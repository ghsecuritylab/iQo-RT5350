cscope 15 $HOME/w3c-libwww-5.4.0 -q 0000010363 0002207766
	@ComLine/src/HTLine.c

15 
	~"WWWLib.h
"

16 
	~"WWWAµ.h
"

17 
	~"WWWMIME.h
"

18 
	~"WWWHTML.h
"

19 
	~"WWWNews.h
"

20 
	~"WWWHTTP.h
"

21 
	~"WWWFTP.h
"

22 
	~"WWWFûe.h
"

23 
	~"WWWG›he.h
"

24 
	~"WWWSåóm.h
"

25 
	~"WWWTøns.h
"

26 
	~"WWWInô.h
"

28 
	~"HTLöe.h
"

30 #i‚de‡
W3C_VERSION


31 
	#W3C_VERSION
 "un•ecifõd"

	)

34 
	#APP_NAME
 "W3C-WebC⁄"

	)

35 
	#APP_VERSION
 
W3C_VERSION


	)

38 
	#W3C_HELP
 "hâp://www.w3.‹g/ComLöe/README"

	)

40 
	#DEFAULT_OUTPUT_FILE
 "w3c.out"

	)

41 
	#DEFAULT_RULE_FILE
 "w3c.c⁄f"

	)

42 
	#DEFAULT_LOG_FILE
 "w3c.log"

	)

44 
	#MILLIES
 1000

	)

45 
	#DEFAULT_TIMEOUT
 20

	)

47 
	#DEFAULT_HOPS
 0

	)

49 
	#DEFAULT_FORMAT
 
WWW_SOURCE


	)

51 
	e_CLFœgs
 {

52 
	mCL_FILTER
 = 0x1,

53 
	mCL_COUNT
 = 0x2,

54 
	mCL_QUIET
 = 0x4,

55 
	mCL_VALIDATE
 = 0x8,

56 
	mCL_END_VALIDATE
 = 0x10,

57 
	mCL_CACHE_FLUSH
 = 0x20

58 } 
	tCLFœgs
;

60 
	#SHOW_MSG
 (!(
˛
->
Êags
 & 
CL_QUIET
))

	)

62 
	s_ComLöe
 {

63 
HTReque°
 * 
	mªque°
;

64 
HTP¨ítAnch‹
 * 
	m™ch‹
;

65 
HTP¨ítAnch‹
 * 
	mde°
;

66 
	mtimî
;

67 * 
	mcwd
;

68 * 
	mruÀs
;

69 * 
	mlogfûe
;

70 
HTLog
 * 
	mlog
;

71 * 
	mouçutfûe
;

72 
FILE
 * 
	mouçut
;

73 
HTF‹m©
 
	mf‹m©
;

75 * 
	mªÆm
;

76 * 
	mu£r
;

77 * 
	m∑ssw‹d
;

79 
CLFœgs
 
	mÊags
;

80 } 
	tComLöe
;

82 
HTChunk
 * 
	gpo°_ªsu…
 = 
NULL
;

86 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

88  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

89 
	}
}

91 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

93  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

94 
	}
}

99 
PRIVATE
 
ComLöe
 * 
	$ComLöe_√w
 ()

101 
ComLöe
 * 
me
;

102 i‡((
me
 = (
ComLöe
 *Ë
	`HT_CALLOC
(1, (ComLöe))Ë=
NULL
)

103 
	`HT_OUTOFMEM
("ComLine_new");

104 
me
->
timî
 = 
DEFAULT_TIMEOUT
*
MILLIES
;

105 
me
->
cwd
 = 
	`HTGëCuºítDúe˘‹yURL
();

106 
me
->
ouçut
 = 
OUTPUT
;

109 
me
->
ªque°
 = 
	`HTReque°_√w
();

110 
	`HTReque°_£tOuçutF‹m©
(
me
->
ªque°
, 
DEFAULT_FORMAT
);

111 
	`HTReque°_£tC⁄ãxt
 (
me
->
ªque°
, me);

113  
me
;

114 
	}
}

119 
PRIVATE
 
BOOL
 
	$ComLöe_dñëe
 (
ComLöe
 * 
me
)

121 i‡(
me
) {

122 
	`HTReque°_dñëe
(
me
->
ªque°
);

123 i‡(
me
->
log
Ë
	`HTLog_˛o£
(me->log);

124 i‡(
me
->
ouçut
 && me->ouçuà!
STDOUT
Ë
	`f˛o£
(me->output);

125 
	`HT_FREE
(
me
->
cwd
);

126 
	`HT_FREE
(
me
);

127  
YES
;

129  
NO
;

130 
	}
}

132 
PRIVATE
 
	$CÀ™up
 (
ComLöe
 * 
me
, 
°©us
)

134 
	`ComLöe_dñëe
(
me
);

135 
	`HTProfûe_dñëe
();

136 #ifde‡
VMS


137 
	`exô
(
°©us
 ? status : 1);

139 
	`exô
(
°©us
 ? status : 0);

141 
	}
}

143 
PRIVATE
 
	$Vîsi⁄Info
 (c⁄° * 
«me
)

145 
	`HTPröt
("\nW3C OpenSource Software");

146 
	`HTPröt
("\n-----------------------\n\n");

147 
	`HTPröt
("\tWebC⁄ vîsi⁄ %s\n", 
APP_VERSION
);

148 
	`HTPröt
("\tusögÅhêW3CÜibwwwÜibøry vîsi⁄ %s.\n\n",
	`HTLib_vîsi⁄
());

149 
	`HTPröt
("\tTry \"%†-hñp\" f‹ hñp\n\n", 
«me
 ?Çamê: 
APP_NAME
);

150 
	`HTPröt
("\tSee \"http://www.w3.org/ComLine/User/\" for user information\n");

151 
	`HTPröt
("\tSee \"http://www.w3.org/ComLine/\" for general information\n\n");

152 
	`HTPröt
("\tPlease send feedbackÅoÅhe <www-lib@w3.org> mailingÜist,\n");

153 
	`HTPröt
("\tsee \"http://www.w3.org/Library/#Forums\" for details\n\n");

154 
	}
}

160 
PRIVATE
 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

161 * 
∑øm
, 
°©us
)

163 
ComLöe
 * 
˛
 = (ComLöê*Ë
	`HTReque°_c⁄ãxt
(
ªque°
);

164 i‡(
°©us
 =
HT_LOADED
) {

165 i‡(
˛
) {

166 i‡(
˛
->
Êags
 & 
CL_COUNT
) {

167 
	`HTPröt
("Content Length foundÅo be %ld\n",

168 
	`HTAnch‹_Àngth
(
˛
->
™ch‹
));

172 
HTAÀπCÆlback
 *
cbf
 = 
	`HTAÀπ_föd
(
HT_A_MESSAGE
);

173 i‡(
cbf
Ë(*cbf)(
ªque°
, 
HT_A_MESSAGE
, 
HT_MSG_NULL
, 
NULL
,

174 
	`HTReque°_îr‹
(
ªque°
), 
NULL
);

176 
	`CÀ™up
(
˛
, (
°©us
/100 == 2) ? 0 : -1);

177  
HT_OK
;

178 
	}
}

180 
PRIVATE
 
BOOL
 
	$Prom±U£∫ameAndPassw‹d
 (
HTReque°
 * 
ªque°
, 
HTAÀπOpcode
 
›
,

181 
msgnum
, c⁄° * 
dÁu…
,

182 * 
öput
, 
HTAÀπP¨
 * 
ª∂y
)

184 
ComLöe
 * 
˛
 = (ComLöê*Ë
	`HTReque°_c⁄ãxt
(
ªque°
);

185 * 
ªÆm
 = (*Ë
öput
;

186 i‡(
ªque°
 && 
˛
) {

192 i‡(
ªÆm
 && 
˛
->ªÆm && !
	`°rcmp
(cl->realm,Ñealm)) {

193 
	`HTAÀπ_£tRïlyMesßge
(
ª∂y
, 
˛
->
u£r
 ? cl->user : "");

194 
	`HTAÀπ_£tRïlySe¸ë
(
ª∂y
, 
˛
->
∑ssw‹d
 ? cl->password : "");

195  
YES
;

197 
BOOL
 
°©us
 = 
	`HTProm±
(
ªque°
, 
›
, 
msgnum
, 
dÁu…
, 
öput
, 
ª∂y
);

198  
°©us
 ?

199 
	`HTProm±Passw‹d
(
ªque°
, 
›
, 
HT_MSG_PW
, 
dÁu…
, 
öput
, 
ª∂y
Ë: 
NO
;

202  
NO
;

203 
	}
}

205 
PRIVATE
 
BOOL
 
	$P¨£Cªdítüls
 (
ComLöe
 * 
˛
, * 
¸edítüls
)

207 i‡(
˛
 && 
¸edítüls
) {

208 * 
°¨t
 = 
¸edítüls
;

209 * 
íd
 = 
¸edítüls
;

212 
˛
->
ªÆm
 = 
NULL
;

213 
˛
->
u£r
 = 
NULL
;

214 
˛
->
∑ssw‹d
 = 
NULL
;

217 *
íd
 && *end!=':')Énd++;

218 i‡(!*
íd
Ë 
NO
;

219 *
íd
++ = '\0';

220 
˛
->
u£r
 = 
°¨t
;

221 
°¨t
 = 
íd
;

224 *
íd
 && *end!='@')Énd++;

225 i‡(!*
íd
Ë 
NO
;

226 *
íd
++ = '\0';

227 
˛
->
∑ssw‹d
 = 
°¨t
;

228 
°¨t
 = 
íd
;

231 
˛
->
ªÆm
 = 
°¨t
;

233  
YES
;

234 
	}
}

240 
	$maö
 (
¨gc
, ** 
¨gv
)

242 
°©us
 = 0;

243 
¨g
;

244 
tokícou¡
 = 0;

245 
BOOL
 
f‹md©a
 = 
NO
;

246 
HTChunk
 * 
keyw‹ds
 = 
NULL
;

247 
HTAssocLi°
*
f‹mfõlds
 = 
NULL
;

248 
HTMëhod
 
mëhod
 = 
METHOD_GET
;

249 
ComLöe
 * 
˛
 = 
	`ComLöe_√w
();

250 
BOOL
 
ˇche
 = 
NO
;

251 
BOOL
 
Êush
 = 
NO
;

252 * 
ˇche_roŸ
 = 
NULL
;

255 #ifde‡
GUSI


256 
	`GUSISëup
(
GUSIwôhSIOUXSockës
);

257 
	`GUSISëup
(
GUSIwôhI¡î√tSockës
);

260 #ifde‡
__MWERKS__


261 
	`InôGøf
((
På
Ë&
qd
.
theP‹t
);

262 
	`InôF⁄ts
();

263 
	`InôWödows
();

264 
	`InôMíus
(); 
	`TEInô
();

265 
	`InôDülogs
(
nû
);

266 
	`InôCurs‹
();

267 
SIOUXSëtögs
.
asktoßve⁄˛o£
 = 
Ál£
;

268 
¨gc
=
	`ccomm™d
(&
¨gv
);

272 
	`HTProfûe_√wNoCacheClõ¡
(
APP_NAME
, 
APP_VERSION
);

275 
	`HTPröt_£tCÆlback
(
¥öãr
);

276 
	`HTTø˚_£tCÆlback
(
åa˚r
);

283 
	`HTAÀπ_dñëeOpcode
(
HT_A_USER_PW
);

284 
	`HTAÀπ_add
(
Prom±U£∫ameAndPassw‹d
, 
HT_A_USER_PW
);

290 
	`HTF‹m©_addCodög
("*", 
HTIdítôyCodög
, HTIdentityCoding, 0.3);

293 
¨g
=1;árg<
¨gc
;árg++) {

294 i‡(*
¨gv
[
¨g
] == '-') {

297 i‡(
¨gv
[
¨g
][1] == '\0') {

298 
˛
->
Êags
 |
CL_FILTER
;

301 } i‡(!
	`°rcmp
(
¨gv
[
¨g
],"-?") || !strcmp(argv[arg],"-help")) {

302 
˛
->
™ch‹
 = (
HTP¨ítAnch‹
 *Ë
	`HTAnch‹_födAddªss
(
W3C_HELP
);

303 
tokícou¡
 = 1;

306 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-n")) {

307 
	`HTAÀπ_£tI¡îa˘ive
(
NO
);

310 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-form")) {

311 
f‹md©a
 = 
YES
;

314 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-from")) {

315 
˛
->
f‹m©
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

316 
	`HTAtom_f‹
(
¨gv
[++
¨g
]Ë: 
WWW_HTML
;

319 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-to")) {

320 
HTF‹m©
 
f‹m©
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

321 
	`HTAtom_f‹
(
¨gv
[++
¨g
]Ë: 
DEFAULT_FORMAT
;

322 
	`HTReque°_£tOuçutF‹m©
(
˛
->
ªque°
, 
f‹m©
);

325 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-dest")) {

326 i‡(
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') {

327 * 
de°
 = 
	`HTP¨£
(
¨gv
[++
¨g
], 
˛
->
cwd
, 
PARSE_ALL
);

328 
˛
->
de°
 = (
HTP¨ítAnch‹
 *Ë
	`HTAnch‹_födAddªss
(dest);

329 
	`HT_FREE
(
de°
);

333 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-source")) {

334 
	`HTReque°_£tOuçutF‹m©
(
˛
->
ªque°
, 
WWW_RAW
);

337 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-l")) {

338 
˛
->
logfûe
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

339 
¨gv
[++
¨g
] : 
DEFAULT_LOG_FILE
;

342 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-hops") ||

343 !
	`°rcmp
(
¨gv
[
¨g
], "-maxforwards")) {

344 
h›s
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

345 
	`©oi
(
¨gv
[++
¨g
]Ë: 
DEFAULT_HOPS
;

346 i‡(
h›s
 >0Ë
	`HTReque°_£tMaxF‹w¨ds
(
˛
->
ªque°
, hops);

349 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-auth", 5)) {

350 * 
¸edítüls
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

351 
¨gv
[++
¨g
] : 
NULL
;

352 i‡(
¸edítüls
Ë
	`P¨£Cªdítüls
(
˛
, credentials);

355 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-r")) {

356 
˛
->
ruÀs
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

357 
¨gv
[++
¨g
] : 
DEFAULT_RULE_FILE
;

360 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-o")) {

361 
˛
->
ouçutfûe
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

362 
¨gv
[++
¨g
] : 
DEFAULT_OUTPUT_FILE
;

365 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-timeout")) {

366 
timeout
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

367 
	`©oi
(
¨gv
[++
¨g
]Ë: 
DEFAULT_TIMEOUT
;

368 i‡(
timeout
 >1Ë
˛
->
timî
 =Åimeout*
MILLIES
;

371 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-single")) {

372 
	`HTReque°_£tPªem±ive
(
˛
->
ªque°
, 
YES
);

375 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-cl")) {

376 
˛
->
Êags
 |
CL_COUNT
;

379 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-version")) {

380 
	`Vîsi⁄Info
(
¨gv
[0]);

381 
	`CÀ™up
(
˛
, 0);

384 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-q")) {

385 
˛
->
Êags
 |
CL_QUIET
;

388 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-cache")) {

389 
ˇche
 = 
YES
;

392 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-cacheroot")) {

393 
ˇche_roŸ
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

394 
¨gv
[++
¨g
] : 
NULL
;

397 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-flush")) {

398 
Êush
 = 
YES
;

401 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-validate")) {

402 
˛
->
Êags
 |
CL_VALIDATE
;

405 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-endvalidate")) {

406 
˛
->
Êags
 |
CL_END_VALIDATE
;

409 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-nocache")) {

410 
˛
->
Êags
 |
CL_CACHE_FLUSH
;

412 #ifde‡
WWWTRACE


414 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-v", 2)) {

415 
	`HTSëTø˚MesßgeMask
(
¨gv
[
¨g
]+2);

419 } i‡(!
	`°rˇ£comp
(
¨gv
[
¨g
], "-get")) {

420 
mëhod
 = 
METHOD_GET
;

423 } i‡(!
	`°rˇ£comp
(
¨gv
[
¨g
], "-head")) {

424 
mëhod
 = 
METHOD_HEAD
;

427 } i‡(!
	`°rˇ£comp
(
¨gv
[
¨g
], "-delete")) {

428 
mëhod
 = 
METHOD_DELETE
;

431 } i‡(!
	`°rˇ£comp
(
¨gv
[
¨g
], "-post")) {

432 
mëhod
 = 
METHOD_POST
;

435 } i‡(!
	`°rˇ£comp
(
¨gv
[
¨g
], "-put")) {

436 
mëhod
 = 
METHOD_PUT
;

439 } i‡(!
	`°rˇ£comp
(
¨gv
[
¨g
], "-options")) {

440 
mëhod
 = 
METHOD_OPTIONS
;

443 } i‡(!
	`°rˇ£comp
(
¨gv
[
¨g
], "-trace")) {

444 
mëhod
 = 
METHOD_TRACE
;

447 i‡(
SHOW_MSG
Ë
	`HTPröt
("Bad Argumíà(%s)\n", 
¨gv
[
¨g
]);

450 i‡(!
tokícou¡
) {

451 * 
ªf
 = 
	`HTP¨£
(
¨gv
[
¨g
], 
˛
->
cwd
, 
PARSE_ALL
);

452 
˛
->
™ch‹
 = (
HTP¨ítAnch‹
 *Ë
	`HTAnch‹_födAddªss
(
ªf
);

453 
tokícou¡
 = 1;

454 
	`HT_FREE
(
ªf
);

455 } i‡(
f‹md©a
) {

456 * 
°rög
 = 
¨gv
[
¨g
];

457 i‡(
tokícou¡
++ <1Ë
f‹mfõlds
 = 
	`HTAssocLi°_√w
();

458 
	`HTP¨£F‹mI≈ut
(
f‹mfõlds
, 
°rög
);

460 * 
esˇ≥d
 = 
	`HTEsˇ≥
(
¨gv
[
¨g
], 
URL_XALPHAS
);

461 i‡(
tokícou¡
++ <= 1)

462 
keyw‹ds
 = 
	`HTChunk_√w
(128);

464 
	`HTChunk_putc
(
keyw‹ds
, ' ');

465 
	`HTChunk_puts
(
keyw‹ds
, 
	`HTSåù
(
esˇ≥d
));

466 
	`HT_FREE
(
esˇ≥d
);

471 i‡(!
tokícou¡
 && !
˛
->
Êags
 & 
CL_FILTER
) {

472 
	`Vîsi⁄Info
(
¨gv
[0]);

473 
	`CÀ™up
(
˛
, 0);

477 i‡(
ˇche
) {

478 
	`HTCacheInô
(
ˇche_roŸ
, 20);

481 i‡(
Êush
Ë
	`HTCache_ÊushAŒ
();

488 i‡(
˛
->
Êags
 & 
CL_VALIDATE
)

489 
	`HTReque°_£tRñﬂdMode
(
˛
->
ªque°
, 
HT_CACHE_VALIDATE
);

490 i‡(
˛
->
Êags
 & 
CL_END_VALIDATE
)

491 
	`HTReque°_£tRñﬂdMode
(
˛
->
ªque°
, 
HT_CACHE_END_VALIDATE
);

492 i‡(
˛
->
Êags
 & 
CL_CACHE_FLUSH
)

493 
	`HTReque°_£tRñﬂdMode
(
˛
->
ªque°
, 
HT_CACHE_FLUSH
);

496 i‡(
˛
->
Êags
 & 
CL_QUIET
Ë
	`HTAÀπ_dñëeOpcode
(
HT_A_PROGRESS
);

499 i‡(
˛
->
ouçutfûe
) {

500 i‡((
˛
->
ouçut
 = 
	`f›í
(˛->
ouçutfûe
, "wb")Ë=
NULL
) {

501 i‡(
SHOW_MSG
Ë
	`HTPröt
("C™'à›í `%s'\\n",
˛
->
ouçutfûe
);

502 
˛
->
ouçut
 = 
OUTPUT
;

511 
	`HTReque°_£tOuçutSåóm
(
˛
->
ªque°
,

512 
	`HTFWrôî_√w
(
˛
->
ªque°
, cl->
ouçut
, 
YES
));

515 
	`HTHo°_£tEvítTimeout
(
˛
->
timî
);

521 
	`HTReque°_£tFlush
(
˛
->
ªque°
, 
YES
);

524 i‡(
˛
->
logfûe
) {

525 
˛
->
log
 = 
	`HTLog_›í
(˛->
logfûe
, 
YES
, YES);

526 i‡(
˛
->
log
Ë
	`HTNë_addA·î
(
HTLogFûãr
, 
NULL
, cl->log, 
HT_ALL
, 
HT_FILTER_LATE
);

530 i‡(
˛
->
Êags
 & 
CL_FILTER
) {

531 #ifde‡
STDIN_FILENO


532 
	`HTReque°_£tAnch‹
(
˛
->
ªque°
, (
HTAnch‹
 *Ë˛->
™ch‹
);

533 
	`HTReque°_£tPªem±ive
(
˛
->
ªque°
, 
YES
);

534 
	`HTLﬂdSockë
(
STDIN_FILENO
, 
˛
->
ªque°
);

536 
	`CÀ™up
(
˛
, 0);

540 i‡(
˛
->
Êags
 & 
CL_COUNT
) {

541 
	`HTReque°_£tOuçutSåóm
(
˛
->
ªque°
,

542 
	`HTC⁄ã¡Cou¡î
(
	`HTBœckHﬁe
(),

543 
˛
->
ªque°
, 0x2000));

547 i‡(
˛
->
ruÀs
) {

548 * 
ruÀs
 = 
	`HTP¨£
(
˛
->ruÀs, cl->
cwd
, 
PARSE_ALL
);

549 i‡(!
	`HTLﬂdRuÀsAutom©iˇŒy
(
ruÀs
))

550 i‡(
SHOW_MSG
Ë
	`HTPröt
("Can'táccessÑules\n");

551 
	`HT_FREE
(
ruÀs
);

555 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

558 
mëhod
) {

559 
METHOD_GET
:

561 i‡(
f‹md©a
)

562 
°©us
 = 
	`HTGëF‹mAnch‹
(
f‹mfõlds
, (
HTAnch‹
 *Ë
˛
->
™ch‹
,

563 
˛
->
ªque°
);

564 i‡(
keyw‹ds
)

565 
°©us
 = 
	`HTSórchAnch‹
(
keyw‹ds
, (
HTAnch‹
 *Ë
˛
->
™ch‹
,

566 
˛
->
ªque°
);

568 
°©us
 = 
	`HTLﬂdAnch‹
((
HTAnch‹
 *Ë
˛
->
™ch‹
, cl->
ªque°
);

571 
METHOD_HEAD
:

572 i‡(
f‹md©a
) {

573 
	`HTReque°_£tMëhod
(
˛
->
ªque°
, 
METHOD_HEAD
);

574 
°©us
 = 
	`HTGëF‹mAnch‹
(
f‹mfõlds
, (
HTAnch‹
 *Ë
˛
->
™ch‹
,

575 
˛
->
ªque°
);

576 } i‡(
keyw‹ds
) {

577 
	`HTReque°_£tMëhod
(
˛
->
ªque°
, 
METHOD_HEAD
);

578 
°©us
 = 
	`HTSórchAnch‹
(
keyw‹ds
, (
HTAnch‹
 *Ë
˛
->
™ch‹
,

579 
˛
->
ªque°
);

581 
°©us
 = 
	`HTHódAnch‹
((
HTAnch‹
 *Ë
˛
->
™ch‹
, cl->
ªque°
);

584 
METHOD_DELETE
:

585 
°©us
 = 
	`HTDñëeAnch‹
((
HTAnch‹
 *Ë
˛
->
™ch‹
, cl->
ªque°
);

588 
METHOD_POST
:

589 i‡(
f‹md©a
) {

590 
HTP¨ítAnch‹
 * 
po°ed
 = 
NULL
;

592 
po°ed
 = 
	`HTPo°F‹mAnch‹
(
f‹mfõlds
, (
HTAnch‹
 *Ë
˛
->
™ch‹
,

593 
˛
->
ªque°
);

594 
°©us
 = 
po°ed
 ? 
YES
 : 
NO
;

597 
po°_ªsu…
 = 
	`HTPo°F‹mAnch‹ToChunk
(
f‹mfõlds
, (
HTAnch‹
 *Ë
˛
->
™ch‹
,

598 
˛
->
ªque°
);

599 
°©us
 = 
po°_ªsu…
 ? 
YES
 : 
NO
;

602 i‡(
SHOW_MSG
Ë
	`HTPröt
("NothingÅoÖostÅoÅhisáddress\n");

603 
°©us
 = 
NO
;

607 
METHOD_PUT
:

608 
°©us
 = 
	`HTPutDocumítAnch‹
(
˛
->
™ch‹
, (
HTAnch‹
 *Ë˛->
de°
,

609 
˛
->
ªque°
);

612 
METHOD_OPTIONS
:

613 
°©us
 = 
	`HTO±i⁄sAnch‹
((
HTAnch‹
 *Ë
˛
->
™ch‹
, cl->
ªque°
);

616 
METHOD_TRACE
:

617 
°©us
 = 
	`HTTø˚Anch‹
((
HTAnch‹
 *Ë
˛
->
™ch‹
, cl->
ªque°
);

621 i‡(
SHOW_MSG
Ë
	`HTPröt
("Don't knowÅhis method\n");

625 i‡(
keyw‹ds
Ë
	`HTChunk_dñëe
(keywords);

626 i‡(
f‹mfõlds
Ë
	`HTAssocLi°_dñëe
(formfields);

627 i‡(
°©us
 !
YES
) {

628 i‡(
SHOW_MSG
Ë
	`HTPröt
("Sorry, can'táccessÑesource\n");

629 
	`CÀ™up
(
˛
, -1);

633 
	`HTEvítLi°_lo›
(
˛
->
ªque°
);

636 
	`CÀ™up
(
˛
, 0);

638 
	}
}

	@ComLine/src/HTLine.h

33 #i‚de‡
HTLINE_H


34 
	#HTLINE_H


	)

42 
	#STDOUT
 
°dout


	)

43 
	#OUTPUT
 
°dout


	)

	@Library/Examples/LoadToFile.c

19 
	~"WWWLib.h
"

20 
	~"WWWMIME.h
"

21 
	~"WWWNews.h
"

22 
	~"WWWHTTP.h
"

23 
	~"WWWFTP.h
"

24 
	~"WWWFûe.h
"

25 
	~"WWWG›he.h
"

26 
	~"WWWInô.h
"

28 
	#APP_NAME
 "GETTOOL"

	)

29 
	#APP_VERSION
 "1.0"

	)

30 
	#DEFAULT_OUTPUT_FILE
 "gë.out"

	)

32 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

34  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

35 
	}
}

37 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

39  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

40 
	}
}

47 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

48 * 
∑øm
, 
°©us
)

51 
	`HTReque°_dñëe
(
ªque°
);

54 
	`HTProfûe_dñëe
();

56 
	`exô
(
°©us
 ? status : 0);

57 
	}
}

59 
	$maö
 (
¨gc
, ** 
¨gv
)

61 
¨g
 = 0;

62 * 
ouçutfûe
 = 
NULL
;

63 * 
gëme
 = 
NULL
;

64 
HTReque°
 * 
ªque°
 = 
NULL
;

67 
	`HTProfûe_√wNoCacheClõ¡
(
APP_NAME
, 
APP_VERSION
);

71 
	`HTSëTø˚MesßgeMask
("sop");

75 
	`HTPröt_£tCÆlback
(
¥öãr
);

76 
	`HTTø˚_£tCÆlback
(
åa˚r
);

79 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

82 
	`HTHo°_£tEvítTimeout
(10000);

85 
¨g
=1;árg<
¨gc
;árg++) {

86 i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-o")) {

87 
ouçutfûe
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

88 
¨gv
[++
¨g
] : 
DEFAULT_OUTPUT_FILE
;

91 
gëme
 = 
¨gv
[
¨g
];

96 i‡(!
ouçutfûe
Ëouçutfûê
DEFAULT_OUTPUT_FILE
;

98 i‡(
gëme
 && *getme) {

99 
ªque°
 = 
	`HTReque°_√w
();

102 i‡(
	`HTLﬂdToFûe
(
gëme
, 
ªque°
, 
ouçutfûe
Ë!
YES
) {

103 
	`HTPröt
("Can't open output file\n");

104 
	`HTProfûe_dñëe
();

109 
	`HTEvítLi°_lo›
(
ªque°
);

112 
	`HTPröt
("TypeÅhe URI of document you wantÅoÜoadándÅheÇame ofÅheÜocal file.\n");

113 
	`HTPröt
("\t%†<addªss> -ÿ<loˇlfûe>\n", 
¨gv
[0]);

114 
	`HTPröt
("F‹Éxam∂e, %†hâp://www.w3.‹g -ÿw3chome.html\n", 
¨gv
[0]);

117 
	`HTProfûe_dñëe
();

121 
	}
}

	@Library/Examples/chunk.c

1 
	~"WWWLib.h
"

2 
	~"WWWHTTP.h
"

3 
	~"WWWInô.h
"

5 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

7  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

8 
	}
}

10 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

12  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

13 
	}
}

15 
PRIVATE
 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

16 * 
∑øm
, 
°©us
)

19 
	`HTPröt
("LﬂdÑesu…ed i¿°©u†%d\n", 
°©us
);

22 
	`HTEvítLi°_°›Lo›
 ();

25  
HT_ERROR
;

26 
	}
}

28 
	$maö
 (
¨gc
, ** 
¨gv
)

30 
HTReque°
 * 
ªque°
 = 
	`HTReque°_√w
();

31 
HTChunk
 * 
chunk
 = 
NULL
;

32 * 
uæ
 = 
¨gc
==2 ? 
¨gv
[1] : 
NULL
;

35 
	`HTProfûe_√wPªem±iveClõ¡
("TestApp", "1.0");

38 
	`HTPröt_£tCÆlback
(
¥öãr
);

39 
	`HTTø˚_£tCÆlback
(
åa˚r
);

43 
	`HTSëTø˚MesßgeMask
("sop");

47 
	`HTReque°_£tOuçutF‹m©
(
ªque°
, 
WWW_RAW
);

50 
	`HTReque°_addC⁄√˘i⁄
(
ªque°
, "close", "");

53 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

55 i‡(
uæ
) {

56 * 
cwd
 = 
	`HTGëCuºítDúe˘‹yURL
();

57 * 
absﬁuã_uæ
 = 
	`HTP¨£
(
uæ
, 
cwd
, 
PARSE_ALL
);

58 
chunk
 = 
	`HTLﬂdToChunk
(
absﬁuã_uæ
, 
ªque°
);

59 
	`HT_FREE
(
absﬁuã_uæ
);

60 
	`HT_FREE
(
cwd
);

63 i‡(
chunk
) {

64 * 
°rög
;

66 
	`HTEvítLi°_lo›
(
ªque°
);

68 
°rög
 = 
	`HTChunk_toCSåög
(
chunk
);

69 
	`HTPröt
("%s", 
°rög
 ? string : "noÅext");

70 
	`HT_FREE
(
°rög
);

73 
	`HTPröt
("TypeÅhe URL you wantÅoáccces onÅhe commandÜine\n");

77 
	`HTReque°_dñëe
(
ªque°
);

80 
	`HTProfûe_dñëe
();

82 
	}
}

	@Library/Examples/chunkbody.c

18 
	~"WWWLib.h
"

19 
	~"WWWHTTP.h
"

20 
	~"WWWInô.h
"

22 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

24  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

25 
	}
}

27 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

29  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

30 
	}
}

32 
PRIVATE
 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

33 * 
∑øm
, 
°©us
)

39 
	`HTEvítLi°_°›Lo›
 ();

42  
HT_ERROR
;

43 
	}
}

45 
	$maö
 (
¨gc
, ** 
¨gv
)

47 
HTReque°
 * 
ªque°
 = 
	`HTReque°_√w
();

48 
HTLi°
 * 
c⁄vîãrs
 = 
	`HTLi°_√w
();

49 
HTLi°
 * 
ícodögs
 = 
	`HTLi°_√w
();

50 
HTChunk
 * 
chunk
 = 
NULL
;

51 * 
uæ
 = 
¨gc
==2 ? 
¨gv
[1] : 
NULL
;

54 
	`HTLibInô
("TestApp", "1.0");

57 
	`HTPröt_£tCÆlback
(
¥öãr
);

58 
	`HTTø˚_£tCÆlback
(
åa˚r
);

62 
	`HTSëTø˚MesßgeMask
("sop");

66 #ifde‡
WWW_WIN_ASYNC


67 
	`HTEvítInô
();

71 
	`HTTøn•‹tInô
();

74 
	`HTPrŸocﬁInô
();

77 
	`HTNëInô
();

80 
	`HTC⁄vîãrInô
(
c⁄vîãrs
);

81 
	`HTF‹m©_£tC⁄vîsi⁄
(
c⁄vîãrs
);

84 
	`HTTøns„rEncodîInô
(
ícodögs
);

85 
	`HTF‹m©_£tTøns„rCodög
(
ícodögs
);

88 
	`HTMIMEInô
();

91 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

94 
	`HTReque°_£tOuçutF‹m©
(
ªque°
, 
WWW_SOURCE
);

95 
	`HTReque°_£tPªem±ive
(
ªque°
, 
YES
);

97 i‡(
uæ
) {

98 * 
cwd
 = 
	`HTGëCuºítDúe˘‹yURL
();

99 * 
absﬁuã_uæ
 = 
	`HTP¨£
(
uæ
, 
cwd
, 
PARSE_ALL
);

100 
HTAnch‹
 * 
™ch‹
 = 
	`HTAnch‹_födAddªss
(
absﬁuã_uæ
);

101 
chunk
 = 
	`HTLﬂdAnch‹ToChunk
(
™ch‹
, 
ªque°
);

102 
	`HT_FREE
(
absﬁuã_uæ
);

103 
	`HT_FREE
(
cwd
);

106 i‡(
chunk
) {

107 * 
°rög
;

109 
	`HTEvítLi°_lo›
 (
ªque°
);

110 
°rög
 = 
	`HTChunk_toCSåög
(
chunk
);

111 
	`HTPröt
("%s", 
°rög
 ? string : "noÅext");

112 
	`HT_FREE
(
°rög
);

115 
	`HTPröt
("TypeÅhe URL you wantÅoáccces onÅhe commandÜine\n");

119 
	`HTReque°_dñëe
(
ªque°
);

120 
	`HTF‹m©_dñëeAŒ
();

123 #ifde‡
WWW_WIN_ASYNC


124 
	`HTEvítTîmö©e
();

128 
	`HTLibTîmö©e
();

130 
	}
}

	@Library/Examples/cookie.c

19 
	~"WWWLib.h
"

20 
	~"WWWMIME.h
"

21 
	~"WWWNews.h
"

22 
	~"WWWHTTP.h
"

23 
	~"WWWFTP.h
"

24 
	~"WWWFûe.h
"

25 
	~"WWWG›he.h
"

26 
	~"WWWInô.h
"

28 
	#APP_NAME
 "GETTOOL"

	)

29 
	#APP_VERSION
 "1.0"

	)

30 
	#DEFAULT_OUTPUT_FILE
 "gë.out"

	)

32 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

34  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

35 
	}
}

37 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

39  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

40 
	}
}

42 
PRIVATE
 
BOOL
 
	$£tCookõ
 (
HTReque°
 * 
ªque°
, 
HTCookõ
 * 
cookõ
, * 
∑øm
)

44 i‡(
cookõ
) {

45 * 
addr
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
	`HTReque°_™ch‹
(
ªque°
));

46 
	`HTPröt
("Whûêac˚ssög `%s\', wêª˚ivedá cookõ wôhÖ¨amëîs:\n", 
addr
);

47 i‡(
	`HTCookõ_«me
(
cookõ
))

48 
	`HTPröt
("\tNamê : `%s\'\n", 
	`HTCookõ_«me
(
cookõ
));

49 i‡(
	`HTCookõ_vÆue
(
cookõ
))

50 
	`HTPröt
("\tVÆuê : `%s\'\n", 
	`HTCookõ_vÆue
(
cookõ
));

51 i‡(
	`HTCookõ_domaö
(
cookõ
))

52 
	`HTPröt
("\tDomaö : `%s\'\n", 
	`HTCookõ_domaö
(
cookõ
));

53 i‡(
	`HTCookõ_∑th
(
cookõ
))

54 
	`HTPröt
("\tP©h : `%s\'\n", 
	`HTCookõ_∑th
(
cookõ
));

55 i‡(
	`HTCookõ_expú©i⁄
(
cookõ
) > 0) {

56 
time_t
 
t
 = 
	`HTCookõ_expú©i⁄
(
cookõ
);

57 
	`HTPröt
("\tExpúes: `%s\'\n", 
	`HTD©eTimeSå
(&
t
, 
NO
));

59 
	`HTPröt
("\tCookõ i†%s£cuª\n\n", 
	`HTCookõ_isSecuª
(
cookõ
) ? "" : "not ");

60 
	`HT_FREE
(
addr
);

62  
YES
;

63 
	}
}

65 
PRIVATE
 
HTAssocLi°
 * 
	$födCookõ
 (
HTReque°
 * 
ªque°
, * 
∑øm
)

67 
HTAssocLi°
 * 
Æi°
 = 
	`HTAssocLi°_√w
();

68 
	`HTAssocLi°_addObje˘
(
Æi°
, "dummy-name", "dummy-value");

69  
Æi°
;

70 
	}
}

77 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

78 * 
∑øm
, 
°©us
)

81 
	`HTReque°_dñëe
(
ªque°
);

84 
	`HTProfûe_dñëe
();

86 
	`exô
(
°©us
 ? status : 0);

87 
	}
}

89 
	$maö
 (
¨gc
, ** 
¨gv
)

91 
°©us
 = 0;

92 
¨g
 = 0;

93 * 
ouçutfûe
 = 
NULL
;

94 * 
gëme
 = 
NULL
;

95 
HTReque°
 * 
ªque°
 = 
NULL
;

98 
	`HTProfûe_√wNoCacheClõ¡
(
APP_NAME
, 
APP_VERSION
);

101 
	`HTPröt_£tCÆlback
(
¥öãr
);

102 
	`HTTø˚_£tCÆlback
(
åa˚r
);

105 
	`HTSëTø˚MesßgeMask
("sop");

109 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

112 
	`HTCookõ_öô
();

113 
	`HTCookõ_£tCÆlbacks
(
£tCookõ
, 
NULL
, 
födCookõ
, NULL);

116 
	`HTHo°_£tEvítTimeout
(10000);

119 
¨g
=1;árg<
¨gc
;árg++) {

120 i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-o")) {

121 
ouçutfûe
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

122 
¨gv
[++
¨g
] : 
DEFAULT_OUTPUT_FILE
;

125 
gëme
 = 
¨gv
[
¨g
];

130 i‡(!
ouçutfûe
Ëouçutfûê
DEFAULT_OUTPUT_FILE
;

132 i‡(
gëme
 && *getme) {

133 
ªque°
 = 
	`HTReque°_√w
();

136 
°©us
 = 
	`HTLﬂdToFûe
(
gëme
, 
ªque°
, 
ouçutfûe
);

139 
	`HTEvítLi°_lo›
(
ªque°
);

142 
	`HTPröt
("TypeÅhe URI of document you wantÅoÜoadándÅheÇame ofÅheÜocal file.\n");

143 
	`HTPröt
("\t%†<addªss> -ÿ<loˇlfûe>\n", 
¨gv
[0]);

144 
	`HTPröt
("F‹Éxam∂e, %†hâp://www.w3.‹g -ÿw3chome.html\n", 
¨gv
[0]);

147 
	`HTProfûe_dñëe
();

151 
	}
}

	@Library/Examples/davsample.c

17 
	~"WWWLib.h
"

18 
	~"WWWInô.h
"

19 
	~"WWWAµ.h
"

20 
	~"HTDAV.h
"

24 
	#APP_NAME
 "DAVSam∂e"

	)

25 
	#APP_VERSION
 "2.0"

	)

28 
	#ERR_UNKNOWN
 0x0

	)

29 
	#ERR_FATAL
 0x1

	)

30 
	#ERR_NON_FATAL
 0x2

	)

31 
	#ERR_WARN
 0x4

	)

32 
	#ERR_INFO
 0x8

	)

37 
	s_cmdlöe
 {

38 
	mmëhod
;

39 
	mfunc
;

40 * 
	mD
;

41 * 
	mI
;

42 * 
	mT
;

43 
	mO
;

45 * 
	mªque°_uri
;

46 * 
	mba£_°r
;

47 * 
	m¨g1
;

48 *
	m¨g2
;

49 } 
	tCmdlöe
;

56 
PRIVATE
 
HTNëA·î
 
	gãrmö©e_h™dÀr
;

57 
PRIVATE
 
HTNëA·î
 
	gîr‹_ˇŒback
;

58 
PRIVATE
 
¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
);

59 
PRIVATE
 
åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
);

65 
PRIVATE
 
Inô
 ();

66 
PRIVATE
 
my_hódîs
 (
HTReque°
 *
ªque°
);

67 
PRIVATE
 * 
¸óã_body
 (* 
ow√r
);

68 
PRIVATE
 * 
¸óã_¥›body
 (* 
¥›
);

69 
PRIVATE
 
HTReque°
 * 
¸óã_ªque°
 ();

71 
PRIVATE
 
BOOL
 
lock_ªque°
 (
Cmdlöe
 * 
¨g
);

72 
PRIVATE
 
BOOL
 
¥›föd_ªque°
 (
Cmdlöe
 * 
¨g
);

73 
PRIVATE
 
BOOL
 
u∆ock_ªque°
 (
Cmdlöe
 * 
¨g
);

74 
PRIVATE
 
BOOL
 
¥›∑tch_ªque°
(
Cmdlöe
 * 
¨g
);

75 
PRIVATE
 
BOOL
 
mkcﬁ_ªque°
 (
Cmdlöe
 * 
¨g
);

76 
PRIVATE
 
BOOL
 
c›y_ªque°
 (
Cmdlöe
 * 
¨g
);

78 
Cmdlöe
 * 
h™dÀ_¨gs
 (
¨gc
, **
¨gv
);

89 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

91  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

92 
	}
}

97 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

99  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

100 
	}
}

107 
PRIVATE
 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

108 * 
∑øm
, 
°©us
)

110 
	`my_hódîs
(
ªque°
);

112 i‡(
ª•⁄£
) {

113 
	`HTPröt
 ("\tStatus:%d\n\tContent-length:%d\n\tIs Cachable:%c\n\tis Cached:%c\n\tReason: %s\n",\

114 
°©us
, 
	`HTRe•⁄£_Àngth
(
ª•⁄£
),\

115 (
	`HTRe•⁄£_isCachabÀ
(
ª•⁄£
))?'Y':'N',\

116 (
	`HTRe•⁄£_isCached
(
ª•⁄£
,
YES
))?'Y':'N', \

117 (
	`HTRe•⁄£_ªas⁄
(
ª•⁄£
))?HTResponse_reason(response):"NULL");

118 
	`HTPröt
 ("\tF‹m© : %†\n",(*)
	`HTAtom_«me
(
	`HTRe•⁄£_f‹m©
(
ª•⁄£
)));

121 
	`HTPröt
 ("\tResponse NULL\n");

125 
	`HTProfûe_dñëe
();

127 
	`exô
(0);

128 
	}
}

135 
PRIVATE
 
	$îr‹_ˇŒback
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

136 * 
∑øm
, 
°©us
) {

138 
HTLi°
 * 
îr‹_li°
 = 
NULL
;

139 
HTEº‹
 * 
îr‹
 = 
NULL
;

141 
	`HTPröt
 ("%s: ERROR CALLBACK\n",
APP_NAME
);

142 
	`HTPröt
 ("\trequest %s \n\tresponse %s \n\tstatus %d\n", \

143 (
ªque°
)?"OK":"NULL",\

144 (
ª•⁄£
)?"OK":"NULL",
°©us
);

146 i‡(
ªque°
) {

147 
îr‹_li°
 = 
	`HTReque°_îr‹
 (
ªque°
);

148 
îr‹_li°
 && (
îr‹
 = (
HTEº‹
 *Ë
	`HTLi°_√xtObje˘
(error_list))) {

149 
	`HTPröt
 ("\tEº‹Üoˇti⁄ %s\n",
	`HTEº‹_loˇti⁄
(
îr‹
));

151 
	`HTEº‹_£vîôy
(
îr‹
)) {

152 
ERR_UNKNOWN
 :

153 
	`HTPröt
 ("\tSeverity : UNKNOWN\n");

155 
ERR_FATAL
 :

156 
	`HTPröt
 ("\tSeverity : FATAL\n");

158 
ERR_NON_FATAL
 :

159 
	`HTPröt
 ("\tSeverity : NON FATAL\n");

161 
ERR_WARN
 :

162 
	`HTPröt
 ("\tSeverity : WARN\n");

164 
ERR_INFO
 :

165 
	`HTPröt
 ("\tSeverity : INFO\n");

168 
	`HTPröt
 ("\tSevîôy : %Xd\n",
	`HTEº‹_£vîôy
(
îr‹
));

174  
HT_OK
;

175 
	}
}

187 
PRIVATE
 
	$my_hódîs
 (
HTReque°
 *
ªque°
) {

188 
HTAssoc
 * 
h
 = 
NULL
;

189 
HTAssocLi°
 * 
hódîs
 = 
NULL
;

190 
HTP¨ítAnch‹
 * 
™ch‹
 = 
NULL
;

192 
	`HTPröt
 ("%s: Sórchög hódîs...\n",
APP_NAME
);

194 
™ch‹
 = 
	`HTReque°_™ch‹
 (
ªque°
);

195 
hódîs
 = 
	`HTAnch‹_hódî
(
™ch‹
);

197 
	`HTPröt
 ("\ènch‹ %s\n",(
™ch‹
)?"OK":"NULL");

199 
h
 = 
	`HTAssocLi°_√xtObje˘
(
hódîs
);

200 
™ch‹
 && 
hódîs
 && 
h
 ) {

201 
	`HTPröt
 ("\t%†: %s\n",
	`HTAssoc_«me
(
h
),
	`HTAssoc_vÆue
(h));

202 
h
 = 
	`HTAssocLi°_√xtObje˘
(
hódîs
);

204 
	}
}

210 
PRIVATE
 
	$Inô
 () {

213 
	`HTProfûe_√wNoCacheClõ¡
(
APP_NAME
, 
APP_VERSION
);

216 
	`HTPröt_£tCÆlback
(
¥öãr
);

217 
	`HTTø˚_£tCÆlback
(
åa˚r
);

220 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

221 
	`HTNë_addA·î
(
îr‹_ˇŒback
, 
NULL
, NULL, 
HT_ERROR
, 
HT_FILTER_LAST
);

226 
	`HTSëTø˚MesßgeMask
("spolc");

229 
	}
}

233 
PRIVATE
 
HTReque°
 * 
	$¸óã_ªque°
 () {

234 
HTReque°
 * 
me
 = 
	`HTReque°_√w
();

237 
	`HTReque°_£tOuçutSåóm
(
me
, 
	`HTFWrôî_√w
(me, 
°dout
, 
YES
));

238 
	`HTReque°_£tDebugSåóm
(
me
, 
	`HTFWrôî_√w
(me, 
°dîr
, 
YES
));

240 
	`HTReque°_£tOuçutF‹m©
(
me
,
	`HTAtom_f‹
("text/xml"));

241 
	`HTReque°_£tDebugF‹m©
(
me
,
WWW_SOURCE
);

243  
me
;

245 
	}
}

254 
PRIVATE
 * 
	$¸óã_body
 (* 
ow√r
) {

255 
tmp
[4096];

256 * 
body
 = 
NULL
;

257 
∆
[3];

259 
	`•rötf
 (
∆
,"%c%c",
CR
,
LF
);

261 i‡(
ow√r
 && *owner) {

262 
	`•rötf
 (
tmp
,"<?xml version=\"1.0\"Éncoding=\"utf-8\" ?>");

263 
	`°rˇt
 (
tmp
,
∆
);

264 
	`°rˇt
 (
tmp
,"<D:lockinfo xmlns:D=\"DAV:\">");

265 
	`°rˇt
 (
tmp
,
∆
);

266 
	`°rˇt
 (
tmp
," <D:lockscope><D:exclusive/></D:lockscope>");

267 
	`°rˇt
 (
tmp
,
∆
);

268 
	`°rˇt
 (
tmp
," <D:locktype><D:write/></D:locktype>");

269 
	`°rˇt
 (
tmp
,
∆
);

270 
	`°rˇt
 (
tmp
," <D:owner>");

271 
	`°rˇt
 (
tmp
,
∆
);

272 
	`°rˇt
 (
tmp
," <D:href>");

273 
	`°rˇt
 (
tmp
,
ow√r
);

274 
	`°rˇt
 (
tmp
,"</D:href>");

275 
	`°rˇt
 (
tmp
,
∆
);

276 
	`°rˇt
 (
tmp
," </D:owner>");

277 
	`°rˇt
 (
tmp
,
∆
);

278 
	`°rˇt
 (
tmp
,"</D:lockinfo>");

280 i‡–(
body
 = 
	`HT_MALLOC
 (
	`°æí
(
tmp
)+4)Ë!
NULL
)

281 
	`•rötf
 (
body
,"%s%c",
tmp
,'\0');

284  
body
;

285 
	}
}

288 
PRIVATE
 * 
	$¸óã_¥›body
 (* 
¥›
) {

289 
tmp
[5120];

290 * 
body
 = 
NULL
;

291 
∆
[3];

293 
	`•rötf
 (
∆
,"%c%c",
CR
,
LF
);

295 i‡(
¥›
 && *prop) {

296 
	`•rötf
 (
tmp
,"<?xml version=\"1.0\"Éncoding=\"utf-8\" ?>");

297 
	`°rˇt
 (
tmp
,
∆
);

298 
	`°rˇt
 (
tmp
,"<D:propfind xmlns:D=\"DAV:\">");

299 
	`°rˇt
 (
tmp
,
∆
);

300 i‡(!
	`°rcmp
(
¥›
,"ÆÕr›")Ë
	`°rˇt
 (
tmp
,"<D:allprop />");

301 i‡(!
	`°rcmp
(
¥›
,"¥›«me")Ë
	`°rˇt
 (
tmp
,"<D:propname />");

302 
	`°rˇt
 (
tmp
,
¥›
);

303 
	`°rˇt
 (
tmp
,
∆
);

304 
	`°rˇt
 (
tmp
,"</D:propfind>");

306 i‡–(
body
 = 
	`HT_MALLOC
 (
	`°æí
(
tmp
)+4)Ë!
NULL
)

307 
	`•rötf
 (
body
,"%s%c",
tmp
,'\0');

310  
body
;

311 
	}
}

322 
PRIVATE
 
BOOL
 
	$lock_ªque°
 (
Cmdlöe
 * 
¨g
) {

324 
HTDAVHódîs
 * 
hódîs
 = 
	`HTDAVHódîs_√w
();

325 
HTReque°
 * 
ªque°
 = 
	`¸óã_ªque°
 ();

326 
HTAnch‹
 * 
d°
 = 
	`HTAnch‹_födAddªss
(
¨g
->
ªque°_uri
);

327 
HTP¨ítAnch‹
 * 
§c
 = 
NULL
;

328 
HTP¨ítAnch‹
 * 
ba£
 = 
NULL
;

329 
BOOL
 
°©us
 = 
NO
;

330 * 
d©a
 = 
NULL
;

332 i‡(
¨g
->
I
) {

333 
	`HTPröt
 ("Addög I‡hódî %s\n",
¨g
->
I
);

334 
	`HTDAV_£tIfHódî
 (
hódîs
,
¨g
->
I
);

337 i‡(
¨g
->
¨g1
) {

338 
d©a
 = 
	`¸óã_body
 (
¨g
->
¨g1
);

339 
	`HTPröt
 ("xm»body %s\n",
d©a
);

342 i‡(
¨g
->
func
==1) {

343 
§c
 = 
	`HTTmpAnch‹
(
NULL
);

344 
	`HTAnch‹_£tDocumít
(
§c
, 
d©a
);

345 
	`HTAnch‹_£tF‹m©
(
§c
, 
	`HTAtom_f‹
 ("text/xml"));

346 
	`HTAnch‹_£tLígth
(
§c
, 
	`°æí
(
d©a
));

350 i‡(
¨g
->
ba£_°r
 && *(arg->base_str))

351 
ba£
 = (
HTP¨ítAnch‹
 *Ë
	`HTAnch‹_födAddªss
(
¨g
->
ba£_°r
);

353 i‡(
¨g
->
D
Ë
	`HTDAV_£tDïthHódî
 (
hódîs
,arg->D);

354 i‡(
¨g
->
T
Ë
	`HTDAV_£tTimeoutHódî
 (
hódîs
,arg->T);

356 
	`HTPröt
 ("fun˘i⁄ %d src? %s\n",
¨g
->
func
,(
§c
)?"yes":"no");

358 
¨g
->
func
) {

359 1: 
°©us
 = 
	`HTLOCKDocumítAnch‹
 (
ªque°
,
d°
,
§c
,
hódîs
);

361 2: 
°©us
 = 
	`HTLOCKAnch‹
 (
ªque°
,
d°
,
d©a
,
hódîs
);

363 3: 
°©us
 = 
	`HTLOCKAbsﬁuã
 (
ªque°
,
¨g
->
ªque°_uri
,
d©a
,
hódîs
);

365 4: 
°©us
 = 
	`HTLOCKRñ©ive
 (
ªque°
,
¨g
->
ªque°_uri
,
ba£
,
d©a
,
hódîs
);

369  
°©us
;

370 
	}
}

377 
PRIVATE
 
BOOL
 
	$u∆ock_ªque°
 (
Cmdlöe
 * 
¨g
 ) {

379 
HTDAVHódîs
 * 
hódîs
 = 
	`HTDAVHódîs_√w
();

380 
HTReque°
 * 
ªque°
 = 
	`¸óã_ªque°
 ();

381 
HTAnch‹
 * 
d°
 = 
	`HTAnch‹_födAddªss
(
¨g
->
ªque°_uri
);

382 
HTP¨ítAnch‹
 *
ba£
 = 
NULL
;

383 
BOOL
 
°©us
 = 
NO
;

385 i‡(
¨g
->
¨g1
) {

386 
	`HTPröt
 ("Addög Lock-Tokí hódî %s\n",
¨g
->
¨g1
);

387 
	`HTDAV_£tLockTokíHódî
 (
hódîs
,
¨g
->
¨g1
);

390 i‡(
¨g
->
ba£_°r
 && *(arg->base_str))

391 
ba£
 = (
HTP¨ítAnch‹
 *Ë
	`HTAnch‹_födAddªss
(
¨g
->
ba£_°r
);

394 
¨g
->
func
) {

395 1: 
°©us
 = 
	`HTUNLOCKAnch‹
 (
ªque°
,
d°
,
hódîs
);

397 2: 
°©us
 = 
	`HTUNLOCKAbsﬁuã
 (
ªque°
,
¨g
->
ªque°_uri
,
hódîs
);

399 3: 
°©us
 = 
	`HTUNLOCKRñ©ive
 (
ªque°
,
¨g
->
ªque°_uri
,
ba£
,
hódîs
);

404  
°©us
;

405 
	}
}

411 
PRIVATE
 
BOOL
 
	$¥›föd_ªque°
 (
Cmdlöe
 * 
¨g
) {

412 
BOOL
 
°©us
 = 
NO
;

413 
HTDAVHódîs
 * 
hódîs
 = 
	`HTDAVHódîs_√w
();

414 
HTReque°
 * 
ªque°
 = 
	`¸óã_ªque°
 ();

415 
HTAnch‹
 * 
d°
 = 
	`HTAnch‹_födAddªss
(
¨g
->
ªque°_uri
);

416 
HTP¨ítAnch‹
 *
ba£
 = 
NULL
;

417 
HTP¨ítAnch‹
 *
§c
 = 
NULL
;

418 * 
xmlbody
 = 
NULL
;

421 
	`HTPröt
 ("should we setÅhe xml body?\n");

422 i‡(
¨g
->
¨g1
 && *(arg->arg1)) {

423 i‡(!
	`°rˇ£comp
 (
¨g
->
¨g1
,"allprop") || !strcasecomp (arg->arg1,"propname"))

424 
xmlbody
 = 
	`¸óã_¥›body
 (
¨g
->
¨g1
);

426 
xmlbody
 = 
¨g
->
¨g1
;

427 
	`HTPröt
 ("xm»body %s\n",
xmlbody
);

430 i‡(
¨g
->
func
==2 && 
xmlbody
 && *xmlbody) {

431 
§c
 = 
	`HTTmpAnch‹
(
NULL
);

432 
	`HTAnch‹_£tDocumít
(
§c
, 
xmlbody
);

433 
	`HTAnch‹_£tF‹m©
(
§c
, 
	`HTAtom_f‹
 ("text/xml"));

434 
	`HTAnch‹_£tLígth
(
§c
, 
	`°æí
(
xmlbody
));

437 i‡(
¨g
->
ba£_°r
 && *(arg->base_str))

438 
ba£
 = (
HTP¨ítAnch‹
 *Ë
	`HTAnch‹_födAddªss
(
¨g
->
ba£_°r
);

440 
	`HTPröt
 ("setting headers\n");

441 i‡(
¨g
->
D
Ë
	`HTDAV_£tDïthHódî
 (
hódîs
,arg->D);

444 
¨g
->
func
) {

445 1: 
°©us
 = 
	`HTPROPFINDAnch‹
 (
ªque°
,
d°
,
xmlbody
,
hódîs
);

447 2: 
°©us
 = 
	`HTPROPFINDDocumítAnch‹
 (
ªque°
,
d°
,
§c
,
hódîs
);

449 3: 
°©us
 = 
	`HTPROPFINDAbsﬁuã
 (
ªque°
,
¨g
->
ªque°_uri
,
xmlbody
,
hódîs
);

451 4: 
°©us
 = 
	`HTPROPFINDRñ©ive
 (
ªque°
,
¨g
->
ªque°_uri
,
ba£
,
xmlbody
,
hódîs
);

455  
°©us
;

456 
	}
}

462 
PRIVATE
 
BOOL
 
	$¥›∑tch_ªque°
 (
Cmdlöe
 * 
¨g
) {

463 
BOOL
 
°©us
 = 
NO
;

464 
HTDAVHódîs
 * 
hódîs
 = 
	`HTDAVHódîs_√w
();

465 
HTReque°
 * 
ªque°
 = 
	`¸óã_ªque°
 ();

466 
HTAnch‹
 * 
d°
 = 
	`HTAnch‹_födAddªss
(
¨g
->
ªque°_uri
);

467 
HTP¨ítAnch‹
 *
ba£
 = 
NULL
;

468 
HTP¨ítAnch‹
 *
§c
 = 
NULL
;

469 * 
xmlbody
 = 
NULL
;

471 i‡(
¨g
->
¨g1
 && *(arg->arg1))

472 
xmlbody
 = 
¨g
->
¨g1
;

474  
NO
;

476 
	`HTPröt
 ("xm»body **%s**\n",
xmlbody
);

478 i‡(
¨g
->
func
==2) {

479 
§c
 = 
	`HTTmpAnch‹
(
NULL
);

480 
	`HTAnch‹_£tDocumít
(
§c
, 
xmlbody
);

481 
	`HTAnch‹_£tF‹m©
(
§c
, 
	`HTAtom_f‹
 ("text/xml"));

482 
	`HTAnch‹_£tLígth
(
§c
, 
	`°æí
(
xmlbody
));

485 i‡(
¨g
->
ba£_°r
 && *(arg->base_str))

486 
ba£
 = (
HTP¨ítAnch‹
 *Ë
	`HTAnch‹_födAddªss
(
¨g
->
ba£_°r
);

488 
	`HTPröt
 ("setting headers\n");

489 i‡(
¨g
->
I
 && *(arg->I)) {

490 
	`HTPröt
 ("Addög I‡hódî %s\n",
¨g
->
I
);

491 
	`HTDAV_£tIfHódî
 (
hódîs
,
¨g
->
I
);

494 
	`HTPröt
 ("Chosing func\n");

495 
¨g
->
func
) {

496 1: 
°©us
 = 
	`HTPROPPATCHAnch‹
 (
ªque°
,
d°
,
xmlbody
,
hódîs
);

498 2: 
°©us
 = 
	`HTPROPPATCHDocumítAnch‹
 (
ªque°
,
d°
,
§c
,
hódîs
);

500 3: 
°©us
 = 
	`HTPROPPATCHAbsﬁuã
 (
ªque°
,
¨g
->
ªque°_uri
,
xmlbody
,
hódîs
);

502 4: 
°©us
 = 
	`HTPROPPATCHRñ©ive
 (
ªque°
,
¨g
->
ªque°_uri
,
ba£
,
xmlbody
,
hódîs
);

506  
°©us
;

507 
	}
}

514 
PRIVATE
 
BOOL
 
	$mkcﬁ_ªque°
 (
Cmdlöe
 * 
¨g
) {

515 
BOOL
 
°©us
 = 
NO
;

516 
HTDAVHódîs
 * 
hódîs
 = 
	`HTDAVHódîs_√w
();

517 
HTReque°
 * 
ªque°
 = 
	`¸óã_ªque°
 ();

518 
HTAnch‹
 * 
d°
 = 
	`HTAnch‹_födAddªss
(
¨g
->
ªque°_uri
);

519 
HTP¨ítAnch‹
 *
ba£
 = 
NULL
;

521 i‡(
¨g
->
ba£_°r
 && *arg->base_str) {

522 
ba£
 = (
HTP¨ítAnch‹
 *Ë
	`HTAnch‹_födAddªss
(
¨g
->
ba£_°r
);

525 i‡(
¨g
->
I
 && *(arg->I)) {

526 
	`HTPröt
 ("I‡hódî: %s\n",
¨g
->
I
);

527 
	`HTDAV_£tIfHódî
 (
hódîs
,
¨g
->
I
);

530 
¨g
->
func
) {

531 1: 
°©us
 = 
	`HTMKCOLAnch‹
 (
ªque°
,
d°
,
hódîs
);

533 2: 
°©us
 = 
	`HTMKCOLAbsﬁuã
 (
ªque°
,
¨g
->
ªque°_uri
,
hódîs
);

535 3: 
°©us
 = 
	`HTMKCOLRñ©ive
 (
ªque°
,
¨g
->
ªque°_uri
,
ba£
,
hódîs
);

539  
°©us
;

540 
	}
}

547 
PRIVATE
 
BOOL
 
	$c›y_ªque°
 (
Cmdlöe
 * 
¨g
 ) {

549 
HTDAVHódîs
 * 
hódîs
 = 
	`HTDAVHódîs_√w
();

550 
HTReque°
 * 
ªque°
 = 
	`¸óã_ªque°
 ();

551 
HTAnch‹
 * 
§c
 = 
	`HTAnch‹_födAddªss
(
¨g
->
ªque°_uri
);

552 
HTP¨ítAnch‹
 * 
body
 = 
NULL
;

553 
HTP¨ítAnch‹
 * 
ba£
 = 
NULL
;

554 
BOOL
 
°©us
 = 
NO
;

556 i‡(
¨g
->
¨g1
 && *(arg->arg1)) {

557 
	`HTPröt
 ("Addög De°ö©i⁄ hódî %s\n",
¨g
->
¨g1
);

558 
	`HTDAV_£tDe°ö©i⁄Hódî
 (
hódîs
,
¨g
->
¨g1
);

563 i‡(
¨g
->
func
==2 &&árg->
¨g2
) {

564 
body
 = 
	`HTTmpAnch‹
(
NULL
);

565 
	`HTAnch‹_£tDocumít
(
body
, 
¨g
->
¨g2
);

566 
	`HTAnch‹_£tF‹m©
(
body
, 
	`HTAtom_f‹
 ("text/xml"));

567 
	`HTAnch‹_£tLígth
(
body
, 
	`°æí
(
¨g
->
¨g2
));

570 i‡(
¨g
->
ba£_°r
 && *(arg->base_str))

571 
ba£
 = (
HTP¨ítAnch‹
 *Ë
	`HTAnch‹_födAddªss
(
¨g
->
ba£_°r
);

573 i‡(
¨g
->
I
) {

574 
	`HTPröt
 ("Addög I‡hódî %s\n",
¨g
->
I
);

575 
	`HTDAV_£tIfHódî
 (
hódîs
,
¨g
->
I
);

578 i‡(
¨g
->
D
)
	`HTDAV_£tDïthHódî
 (
hódîs
,arg->D);

579 i‡(
¨g
->
O
!=' ')
	`HTDAV_£tOvîwrôeHódî
 (
hódîs
,arg->O);

581 
¨g
->
func
) {

582 1: 
°©us
 = 
	`HTCOPYAnch‹
 (
ªque°
,
§c
,
¨g
->
¨g2
,
hódîs
);

584 2: 
°©us
 = 
	`HTCOPYDocumítAnch‹
 (
ªque°
,
§c
,
body
,
hódîs
);

586 3: 
°©us
 = 
	`HTCOPYAbsﬁuã
 (
ªque°
,
¨g
->
ªque°_uri
,¨g->
¨g2
,
hódîs
);

588 4: 
°©us
 = 
	`HTCOPYRñ©ive
 (
ªque°
,
¨g
->
ªque°_uri
,
ba£
,¨g->
¨g2
,
hódîs
);

592  
°©us
;

593 
	}
}

600 
PRIVATE
 
BOOL
 
	$move_ªque°
 ( 
Cmdlöe
 * 
¨g
 ) {

602 
HTDAVHódîs
 * 
hódîs
 = 
	`HTDAVHódîs_√w
();

603 
HTReque°
 * 
ªque°
 = 
	`¸óã_ªque°
 ();

604 
HTAnch‹
 * 
§c
 = 
	`HTAnch‹_födAddªss
(
¨g
->
ªque°_uri
);

605 
HTP¨ítAnch‹
 * 
body
 = 
NULL
;

606 
HTP¨ítAnch‹
 * 
ba£
 = 
NULL
;

607 
BOOL
 
°©us
 = 
NO
;

609 i‡(
¨g
->
¨g1
) {

610 
	`HTPröt
 ("Addög De°ö©i⁄ hódî %s\n",
¨g
->
¨g1
);

611 
	`HTDAV_£tDe°ö©i⁄Hódî
 (
hódîs
,
¨g
->
¨g1
);

614 i‡(
¨g
->
I
) {

615 
	`HTPröt
 ("Addög I‡hódî %s\n",
¨g
->
I
);

616 
	`HTDAV_£tIfHódî
 (
hódîs
,
¨g
->
I
);

620 i‡(
¨g
->
func
==2 &&árg->
¨g2
 ) {

621 
body
 = 
	`HTTmpAnch‹
(
NULL
);

622 
	`HTAnch‹_£tDocumít
(
body
, 
¨g
->
¨g2
);

623 
	`HTAnch‹_£tF‹m©
(
body
, 
	`HTAtom_f‹
 ("text/xml"));

624 
	`HTAnch‹_£tLígth
(
body
, 
	`°æí
(
¨g
->
¨g2
));

627 i‡(
¨g
->
ba£_°r
 && *(arg->base_str))

628 
ba£
 = (
HTP¨ítAnch‹
 *Ë
	`HTAnch‹_födAddªss
(
¨g
->
ba£_°r
);

630 i‡(
¨g
->
D
Ë
	`HTDAV_£tDïthHódî
 (
hódîs
,arg->D);

631 i‡(
¨g
->
O
 ='T'Ë
	`HTDAV_£tOvîwrôeHódî
 (
hódîs
,
YES
);

632 i‡(
¨g
->
O
 ='F'Ë
	`HTDAV_£tOvîwrôeHódî
 (
hódîs
,
NO
);

634 
¨g
->
func
) {

635 1: 
°©us
 = 
	`HTMOVEAnch‹
 (
ªque°
,
§c
,
¨g
->
¨g2
,
hódîs
);

637 2: 
°©us
 = 
	`HTMOVEDocumítAnch‹
 (
ªque°
,
§c
,
body
,
hódîs
);

639 3: 
°©us
 = 
	`HTMOVEAbsﬁuã
 (
ªque°
,
¨g
->
ªque°_uri
,¨g->
¨g2
, 
hódîs
);

641 4: 
°©us
 = 
	`HTMOVERñ©ive
 (
ªque°
,
¨g
->
ªque°_uri
,
ba£
,¨g->
¨g2
,
hódîs
);

645  
°©us
;

646 
	}
}

652 
Cmdlöe
 * 
	$h™dÀ_¨gs
 (
¨gc
, **
¨gv
) {

653 
°©us
 = 0;

654 
Cmdlöe
 *
›t
 = 
NULL
;

655 
Cmdlöe
 *
¨g
 = 
NULL
;

657 
	`¥ötf
 ("Handling Arguments\n");

659 i‡(
¨gc
 > 3) {

660 i‡–(
›t
 = 
¨g
 = 
	`HT_CALLOC
 (1, (
Cmdlöe
))) ) {

661 
i
 = 1;

662 
°©us
 = 1;

665 
›t
->
func
 = 0;

666 
›t
->
mëhod
 = o±->
O
 = ' ';

667 
›t
->
D
 = o±->
T
 = o±->
I
 = 
NULL
;

668 
¨g
->
ªque°_uri
 =árg->
ba£_°r
 = 
NULL
;

669 
¨g
->
¨g1
 =árg->
¨g2
 = 
NULL
;

672 i‡(
¨gv
[
i
][0]=='-'Ë
›t
->
mëhod
 =árgv[i++][1];

673 
°©us
 = 0;

674 
¨gc
--;

677 
›t
->
func
 = 
	`©oi
 (
¨gv
[
i
++]) * (-1);

678 
¨gc
--;

681 
¨gc
>0 && 
¨gv
[
i
][0]=='-') {

682 i‡(
¨gv
[
i
][1] ='D'Ë{ 
›t
->
D
˜rgv[++i]; 
¨gc
--; }

683 i‡(
¨gv
[
i
][1] ='T'Ë{ 
›t
->
T
˜rgv[++i]; 
¨gc
--; }

684 i‡(
¨gv
[
i
][1] ='I'Ë{ 
›t
->
I
˜rgv[++i]; 
¨gc
--; }

685 i‡(
¨gv
[
i
][1] ='O'Ë{ 
›t
->
O
˜rgv[++i][0]; 
¨gc
--; }

686 
°©us
 = 0;

687 
i
++; 
¨gc
--;

692 i‡(
¨gc
>0Ë{ 
¨g
->
ªque°_uri
 = 
¨gv
[
i
++];árgc--; }

693 
°©us
 = 0;

696 i‡–
¨gc
 > 0 &&

697 ––(
›t
->
mëhod
=='l' || opt->method=='f' || opt->method=='p' ||

698 
›t
->
mëhod
=='c' || o±->mëhod=='m'Ë&& o±->
func
==4 ) ||

699 –(
›t
->
mëhod
=='u' || o±->mëhod=='k'Ë&& o±->
func
==3 ) ) )

700 { 
¨g
->
ba£_°r
 = 
¨gv
[
i
++];

701 
¨gc
--;

705 i‡(
¨gc
>0Ë{ 
¨g
->
¨g1
 = 
¨gv
[
i
++];árgc--; }

708 i‡(
¨gc
>0Ë{ 
¨g
->
¨g2
 = 
¨gv
[
i
++];árgc--; }

713  
¨g
;

714 
	}
}

721 
	$maö
 (
¨gc
, ** 
¨gv
)

723 
BOOL
 
°©us
 = 
NO
;

724 
Cmdlöe
 * 
›t
 = 
NULL
;

725 
Cmdlöe
 * 
¨g
 = 
NULL
;

728 
	`Inô
();

731 i‡(
¨gc
 >= 3) {

732 
¨g
 = 
›t
 = 
	`h™dÀ_¨gs
 (
¨gc
,
¨gv
);

733 i‡(
›t
 && 
¨g
) {

734 
	`HTPröt
 ("mëhod: %¯(fun¯%d)\n",
›t
->
mëhod
,›t->
func
);

735 
	`HTPröt
 ("\tDïth: %†\n\tTimeout: %†\n",(
›t
->
D
)?opt->D:"UNDEFINED", \

736 (
›t
->
T
)?opt->T:"UNDEFINED");

737 
	`HTPröt
 ("\tIf: %†\n\tOvîwrôe: %¯\n",(
›t
->
I
)?›t->I:"UNDEFINED",›t->
O
);

739 
	`HTPröt
 ("\tReque° URI: %s%†\n",(
¨g
->
ba£_°r
)?arg->base_str:"", \

740 
¨g
->
ªque°_uri
);

741 
	`HTPröt
 ("\t1∞árgumít: %†\n\t2∞árgumít: %s\n",(
¨g
->
¨g1
)?arg->arg1:"UNDEFINED",

742 (
¨g
->
¨g2
)?arg->arg2:"UNDEFINED");

746 
	`HTPröt
 ("Badárgument\n");

751 
	`HTPröt
 ("Usage: \n");

752 
	`HTPröt
 ("%†<mëhod> <mëhod_fun˘i⁄> [›ti⁄s_hódîs] <fun˘i⁄_¨gumíts>\n\n",
¨gv
[0]);

753 
	`HTPröt
 ("methodsáre: -[lufpkcm]\n");

754 
	`HTPröt
 ("method_functionáre: -[1-4] (see functions order in HTDAV.html)\n");

755 
	`HTPröt
 ("options_headersáre:\n");

756 
	`HTPröt
 ("\t-D <depth_header_value> (for Depth header)\n");

757 
	`HTPröt
 ("\t-T <timeout_header_value> (for Timeout header)\n");

758 
	`HTPröt
 ("\t-I <if_header_value> (for If header)\n");

759 
	`HTPröt
 ("\t-O <'T' | 'F'> (for Overwrite header)\n\n");

760 
	`HTPröt
 ("function_argumentsáre: \n");

761 
	`HTPröt
 ("f‹ LOCK: %†-»-<[1-3]> [›ti⁄s] <de°-uri> <ow√r|\"REFRESH\"> \n",
¨gv
[0]);

762 
	`HTPröt
 ("\à%†-»-4 [›ti⁄s] <ªœtive-uri> <ba£_uri> <ow√r|\"REFRESH\">\n",
¨gv
[0]);

763 
	`HTPröt
 ("\àexam∂e: %†-»-4 -D 0 /dav_cﬁÀ˘i⁄/myfûe.htm»hâp://foo.b¨/ maûto:my£lf@foo.b¨\n\n",
¨gv
[0]);

765 
	`HTPröt
 ("f‹ UNLOCK: %†-u -<[1-2]> [›ti⁄s] <de°-uri> <lock-tokí>\n",
¨gv
[0]);

766 
	`HTPröt
 ("\à%†-u -3 [›ti⁄s] <ªœtive-uri> <ba£-uri> <lock-tokí> \n",
¨gv
[0]);

767 
	`HTPröt
 ("\àexam∂e: %†-u -3 /dav_cﬁÀ˘i⁄/myfûe.htm»hâp://foo.b¨/ <›aquñockí:bœbœbœ>\n\n",
¨gv
[0]);

769 
	`HTPröt
 ("for PROPFIND:%s -f -<[1-3]> [options] <dest-uri> [\"allprop\"|\"propname\"|xml body]\n",\

770 
¨gv
[0]);

771 
	`HTPröt
 ("\t %s -f -4 [options] <relative-uri> <base-uri> [\"allprop\"|\"propname\"|xml body]\n",\

772 
¨gv
[0]);

773 
	`HTPröt
 ("\àexam∂e: %†-‡-4 -D 0 /dav_cﬁÀ˘i⁄/myfûe.htm»hâp://foo.b¨/áŒ¥›\n\n",
¨gv
[0]);

775 
	`HTPröt
 ("f‹ PROPPATCH:%†-∞-<[1-4]> [›ti⁄s] <de°-uri> <xm»body>\n",
¨gv
[0]);

776 
	`HTPröt
 ("\à%†-∞-4 [›ti⁄s] <ªœtive-uri> <ba£-uri> <xm»body>\n",
¨gv
[0]);

777 
	`HTPröt
 ("\tÉxample: %s -p -4 -I <opaquelock:blablabla> /dav_collection/myfile.html http://foo.bar/\\ \n "

780 "</D:¥›îtyupd©e>\" \n\n",
¨gv
[0]);

782 
	`HTPröt
 ("f‹ MKCOL: %†-k -<[1-2]> [›ti⁄s] <de°-uri>\n",
¨gv
[0]);

783 
	`HTPröt
 ("\à%†-k -3 [›ti⁄s] <ªœtive-uri> <ba£-uri>\n",
¨gv
[0]);

784 
	`HTPröt
 ("\àexam∂e: %†-k -3 /dav_cﬁÀ˘i⁄/√wcﬁÀ˘i⁄ hâp://foo.b¨/\n\n",
¨gv
[0]);

786 
	`HTPröt
 ("for COPY: %s -c -<[1-3]> [options] <src-uri> <dst-uri> <xml body|\"NOBODY\">\n",\

787 
¨gv
[0]);

788 
	`HTPröt
 ("\t %s -c -4 [options] <relative-uri> <base-uri> <dst-uri> <xml body|\"NOBODY\">\n",\

789 
¨gv
[0]);

790 
	`HTPröt
 ("\àexam∂e: %†-¯-4 /dav_cﬁÀ˘i⁄/myfûe.htm»hâp://foo.b¨/ hâp://foo.b¨/c›yfûe.htm»NOBODY\n\n",
¨gv
[0]);

792 
	`HTPröt
 ("for MOVE: %s -m -<[1-3]> [options] <src-uri> <dst-uri> <xml body|\"NOBODY\">\n",

793 
¨gv
[0]);

794 
	`HTPröt
 ("\t %s -m -4 [options] <relative-uri> <base-uri> <dst-uri> <xml body|\"NOBODY\">\n",\

795 
¨gv
[0]);

796 
	`HTPröt
 ("\àexam∂e: %†-m -4 /dav_cﬁÀ˘i⁄/myfûe.htm»hâp://foo.b¨/ hâp://foo.b¨/movefûe.htm»NOBODY\n\n",
¨gv
[0]);

799 
	`HTPröt
 ("If, Depthánd Timeout headersás defined in RFC2518 section 9\n");

800 
	`HTPröt
 ("lock-tokenás defined in RFC2518 section 9.5\n");

801 
	`HTPröt
 ("xml bodyás defined in RFC2518 section 12\n\n");

807 i‡(
¨g
) {

808 
¨g
->
mëhod
) {

810 
	`HTPröt
 ("LOCK REQUEST\n");

811 i‡(
¨g
->
¨g1
) {

812 
¨g
->
¨g1
 = (!
	`°rˇ£comp
◊rg->¨g1,"REFRESH"))?
NULL
:arg->arg1;

813 
°©us
 = 
	`lock_ªque°
 (
¨g
);

816 
	`HTPröt
 ("Badárgumít! PÀa£,Éxecuã %†f‹ hñp\n",
¨gv
[0]);

820 
	`HTPröt
 ("UNLOCK REQUEST\n");

821 
°©us
 = 
	`u∆ock_ªque°
 (
¨g
);

825 
	`HTPröt
 ("PROPFIND REQUEST\n");

826 
°©us
 = 
	`¥›föd_ªque°
 (
¨g
);

830 
	`HTPröt
 ("PROPPATCH REQUEST\n");

831 
°©us
 = 
	`¥›∑tch_ªque°
 (
¨g
);

835 
	`HTPröt
 ("MKCOL REQUEST\n");

836 
°©us
 = 
	`mkcﬁ_ªque°
 (
¨g
);

840 
	`HTPröt
 ("COPY REQUEST\n");

841 i‡(
¨g
->
¨g1
) {

842 
¨g
->
¨g2
 = (!
	`°rˇ£comp
◊rg->¨g2,"NOBODY"))?
NULL
:arg->arg2;

843 
°©us
 = 
	`c›y_ªque°
 (
¨g
);

846 
	`HTPröt
 ("Badárgumít! PÀa£,Éxecuã %†f‹ hñp\n",
¨gv
[0]);

851 
	`HTPröt
 ("MOVE REQUEST\n");

852 i‡(
¨g
->
¨g1
) {

853 
¨g
->
¨g2
 = (!
	`°rˇ£comp
◊rg->¨g2,"NOBODY"))?
NULL
:arg->arg2;

854 
°©us
 = 
	`move_ªque°
 (
¨g
);

857 
	`HTPröt
 ("Badárgumít! PÀa£,Éxecuã %†f‹ hñp...\n",
¨gv
[0]);

862 i‡(
°©us
Ë
	`HTEvítLi°_√wLo›
();

863 
	`HTPröt
 ("FAILED\n");

865 
	`HT_FREE
 (
¨g
);

868 
	}
}

	@Library/Examples/eventloop.c

20 
	~"WWWLib.h
"

21 
	~"WWWInô.h
"

22 
	~"WWWLib.h
"

23 
	~"WWWAµ.h
"

24 
	~"WWWInô.h
"

26 #i‚de‡
W3C_VERSION


27 
	#W3C_VERSION
 "Un•ecifõd"

	)

30 
	#APP_NAME
 "W3CSam∂e"

	)

31 
	#APP_VERSION
 
W3C_VERSION


	)

33 
	#ADDRESS
 "hâp://www.w3.‹g/Libøry/ã°.html"

	)

35 #i‡
deföed
(
__svr4__
)

36 
	#CATCH_SIG


	)

39 
	s_Aµ
 {

40 
HTReque°
 * 
	mc⁄sﬁe_ªque°
;

41 
HTEvít
 * 
	mc⁄sﬁe_evít
;

42 
HTLi°
 * 
	ma˘ive
;

43 
HTAnch‹
 * 
	m™ch‹
;

44 } 
	tAµ
;

46 
PRIVATE
 
HTEvítCÆlback
 
	gc⁄sﬁe_∑r£r
;

47 
PRIVATE
 
HTNëA·î
 
	gªque°_ãrmö©î
;

51 
PRIVATE
 
HTReque°
 * 
	$Reque°_√w
 (
Aµ
 * 
≠p
)

53 
HTReque°
 * 
ªque°
 = 
	`HTReque°_√w
();

54 
	`HTReque°_£tOuçutF‹m©
(
ªque°
, 
WWW_SOURCE
);

55 
	`HTReque°_£tOuçutSåóm
(
ªque°
, 
	`HTFWrôî_√w
‘eque°, 
°dout
, 
YES
));

57 i‡(!
≠p
->
a˘ive
Ë≠p->a˘ivê
	`HTLi°_√w
();

58 
	`HTLi°_addObje˘
(
≠p
->
a˘ive
, 
ªque°
);

60  
ªque°
;

61 
	}
}

63 
PRIVATE
 
BOOL
 
	$Reque°_dñëe
 (
Aµ
 * 
≠p
, 
HTReque°
 * 
ªque°
)

65 i‡(
≠p
 &&áµ->
a˘ive
 && 
ªque°
) {

66 
	`HTLi°_ªmoveObje˘
(
≠p
->
a˘ive
, 
ªque°
);

67 
	`HTReque°_dñëe
(
ªque°
);

68  
YES
;

70  
NO
;

71 
	}
}

73 
PRIVATE
 
Aµ
 * 
	$Aµ_√w
 ()

75 
Aµ
 * 
me
 = 
NULL
;

76 i‡((
me
 = (
Aµ
 *Ë
	`HT_CALLOC
(1, (Aµ))Ë=
NULL
)

77 
	`HT_OUTOFMEM
("App_new");

78 
me
->
c⁄sﬁe_ªque°
 = 
	`HTReque°_√w
();

79 
me
->
c⁄sﬁe_evít
 = 
	`HTEvít_√w
(
c⁄sﬁe_∑r£r
, me, 
HT_PRIORITY_MAX
, -1);

80 
me
->
a˘ive
 = 
	`HTLi°_√w
();

83 
me
->
™ch‹
 = 
	`HTAnch‹_födAddªss
(
ADDRESS
);

86 i‡(
	`ißây
(
STDIN_FILENO
)Ë
	`HTEvítLi°_ªgi°î
(STDIN_FILENO, 
HTEvít_READ
, 
me
->
c⁄sﬁe_evít
);

88  
me
;

89 
	}
}

91 
PRIVATE
 
BOOL
 
	$Aµ_dñëe
 (
Aµ
 * 
me
)

93 i‡(
me
) {

96 
	`HTNë_kûlAŒ
();

99 
	`HTReque°_dñëe
(
me
->
c⁄sﬁe_ªque°
);

100 
	`HT_FREE
(
me
);

103 
	`HTProfûe_dñëe
();

105 
	`exô
(0);

107  
NO
;

108 
	}
}

112 
PRIVATE
 
	$c⁄sﬁe_∑r£r
 (
SOCKET
 
s
, * 
∑øm
, 
HTEvítTy≥
 
ty≥
)

114 
Aµ
 * 
≠p
 = (Aµ *Ë
∑øm
;

115 
HTReque°
 * 
√w_ªque°
 = 
NULL
;

116 
buf
[128];

118 i‡(!
	`fgës
(
buf
, (buf), 
°dö
)Ë 
HT_ERROR
;

120 
	`touµî
(
buf
[0])) {

123 
	`Aµ_dñëe
(
≠p
);

127 
√w_ªque°
 = 
	`Reque°_√w
(
≠p
);

128 
	`HTLﬂdAnch‹
(
≠p
->
™ch‹
, 
√w_ªque°
);

132  
HT_OK
;

133 
	}
}

135 
PRIVATE
 
	$ªque°_ãrmö©î
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

136 * 
∑øm
, 
°©us
)

138 
Aµ
 * 
≠p
 = (Aµ *Ë
∑øm
;

139 
	`Reque°_dñëe
(
≠p
, 
ªque°
);

140  
HT_OK
;

141 
	}
}

145 
	$maö
 (
¨gc
, ** 
¨gv
)

147 
Aµ
 * 
≠p
 = 
NULL
;

148 
HTReque°
 * 
ªque°
 = 
NULL
;

151 
	`HTProfûe_√wNoCacheClõ¡
(
APP_NAME
, 
APP_VERSION
);

154 
	`HTSëTø˚MesßgeMask
("ot");

158 
	`HTNë_addA·î
(
ªque°_ãrmö©î
, 
NULL
, 
≠p
, 
HT_ALL
, 
HT_FILTER_LAST
);

161 
≠p
 = 
	`Aµ_√w
();

164 
ªque°
 = 
	`Reque°_√w
(
≠p
);

165 
	`HTLﬂdAnch‹
(
≠p
->
™ch‹
, 
ªque°
);

168 
	`HTEvítLi°_√wLo›
();

170 
	`Aµ_dñëe
(
≠p
);

172 
	}
}

	@Library/Examples/getheaders.c

22 
	~"WWWLib.h
"

23 
	~"WWWAµ.h
"

24 
	~"WWWInô.h
"

26 
PRIVATE
 * 
	gm©ch
 = "*";

28 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

30  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

31 
	}
}

33 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

35  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

36 
	}
}

38 
PRIVATE
 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

39 * 
∑øm
, 
°©us
)

41 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

42 
HTAssocLi°
 * 
hódîs
 = 
	`HTAnch‹_hódî
(
™ch‹
);

48 i‡(
hódîs
) {

49 
HTAssocLi°
 * 
cur
 = 
hódîs
;

50 
HTAssoc
 * 
¥es
;

51 (
¥es
 = (
HTAssoc
 *Ë
	`HTAssocLi°_√xtObje˘
(
cur
))) {

52 * 
«me
 = 
	`HTAssoc_«me
(
¥es
);

53 * 
vÆue
 = 
	`HTAssoc_vÆue
(
¥es
);

56 i‡(
m©ch
 && 
	`HTSåCa£M©ch
(m©ch, 
«me
))

57 
	`HTPröt
("%s: %s\n", 
«me
, 
vÆue
);

62 
	`HTEvítLi°_°›Lo›
 ();

65  
HT_ERROR
;

66 
	}
}

68 
	$maö
 (
¨gc
, ** 
¨gv
)

70 
HTReque°
 * 
ªque°
;

71 
	`HTProfûe_√wPªem±iveClõ¡
("HTTPHeadApplication", "1.0");

72 
ªque°
 = 
	`HTReque°_√w
();

76 
	`HTSëTø˚MesßgeMask
("sop");

80 
	`HTAÀπ_£tI¡îa˘ive
(
NO
);

83 i‡(
¨gc
 >= 2) {

84 * 
uæ
 = 
¨gv
[1];

87 i‡(
¨gc
 >3Ë
m©ch
 = 
¨gv
[2];

90 
	`HTPröt_£tCÆlback
(
¥öãr
);

91 
	`HTTø˚_£tCÆlback
(
åa˚r
);

94 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

97 
	`HTReque°_£tOuçutSåóm
(
ªque°
, 
	`HTFWrôî_√w
‘eque°, 
°dout
, 
YES
));

100 i‡(
uæ
 && *url) {

101 
	`HTHódAbsﬁuã
(
uæ
, 
ªque°
);

103 
	`HTEvítLi°_lo›
 (
ªque°
);

106 
	`HTPröt
("BadÖarameters -ÖleaseÅryágain\n");

108 
	`HTPröt
("TypeÅhe URLÅoÖerformá HEADÑequest on.\n");

109 
	`HTPröt
("\t%†<uæ> <hódî-¥efix>\n", 
¨gv
[0]);

110 
	`HTPröt
("where <header-prefix> isÅheÖrefix ofÅhe header fields\n");

111 
	`HTPröt
("you wantÅo see, forÉxample 'content*. IfÇo \'*\' is used'\n");

112 
	`HTPröt
("thenánÉxact match isÇeeded. Default value isáll header fields'\n");

115 
	`HTReque°_dñëe
(
ªque°
);

116 
	`HTProfûe_dñëe
();

118 
	}
}

	@Library/Examples/head.c

20 
	~"WWWLib.h
"

21 
	~"WWWAµ.h
"

22 
	~"WWWInô.h
"

24 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

26  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

27 
	}
}

29 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

31  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

32 
	}
}

34 
PRIVATE
 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

35 * 
∑øm
, 
°©us
)

37 
HTChunk
 * 
chunk
 = (HTChunk *Ë
	`HTReque°_c⁄ãxt
(
ªque°
);

40 
	`HTPröt
("LﬂdÑesu…ed i¿°©u†%d\n", 
°©us
);

43 i‡(
°©us
 =
HT_LOADED
 && 
chunk
 && 
	`HTChunk_d©a
(chunk))

44 
	`HTPröt
("%s", 
	`HTChunk_d©a
(
chunk
));

48 i‡(
chunk
Ë
	`HTChunk_dñëe
(chunk);

51 
	`HTEvítLi°_°›Lo›
 ();

54  
HT_ERROR
;

55 
	}
}

57 
	$maö
 (
¨gc
, ** 
¨gv
)

59 
HTReque°
 * 
ªque°
;

60 
°©us
;

62 
	`HTProfûe_√wPªem±iveClõ¡
("HTTPHeadApplication", "1.0");

63 
ªque°
 = 
	`HTReque°_√w
();

64 i‡(
¨gc
 >= 2) {

65 * 
uæ
 = 
¨gv
[1];

68 i‡(
¨gc
 =3Ë
	`HTSëTø˚MesßgeMask
(
¨gv
[2]);

71 
	`HTPröt_£tCÆlback
(
¥öãr
);

72 
	`HTTø˚_£tCÆlback
(
åa˚r
);

75 
	`HTReque°_£tOuçutSåóm
(
ªque°
, 
	`HTFWrôî_√w
‘eque°, 
°dout
, 
YES
));

78 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

81 i‡(
uæ
 && *url)

82 
°©us
 = 
	`HTHódAbsﬁuã
(
uæ
, 
ªque°
);

84 
	`HTPröt
("BadÖarameters -ÖleaseÅryágain\n");

86 
	`HTPröt
("TypeÅhe URLÅoÖerformá HEADÑequest on.\n");

87 
	`HTPröt
("\t%†<uæ> <åa˚>\n", 
¨gv
[0]);

91 i‡(
°©us
Ë
	`HTEvítLi°_lo›
(
ªque°
);

94 
	`HTReque°_dñëe
(
ªque°
);

97 
	`HTProfûe_dñëe
();

100 
	}
}

	@Library/Examples/init.c

18 
	~"WWWLib.h
"

19 
	~"WWWHTTP.h
"

20 
	~"WWWInô.h
"

22 
	$maö
()

24 
HTLi°
 * 
c⁄vîãrs
 = 
	`HTLi°_√w
();

25 
HTLi°
 * 
ícodögs
 = 
	`HTLi°_√w
();

29 
	`HTEvítInô
();

32 
	`HTLibInô
("TestApp", "1.0");

35 
	`HTSëTø˚MesßgeMask
("sop");

38 
	`HTTøn•‹tInô
();

41 
	`HTPrŸocﬁInô
();

44 
	`HTNëInô
();

47 
	`HTC⁄vîãrInô
(
c⁄vîãrs
);

48 
	`HTF‹m©_£tC⁄vîsi⁄
(
c⁄vîãrs
);

51 
	`HTTøns„rEncodîInô
(
ícodögs
);

52 
	`HTF‹m©_£tTøns„rCodög
(
ícodögs
);

55 
	`HTFûeInô
();

58 
	`HTMIMEInô
();

61 
	`HTIc⁄Inô
(
NULL
);

64 
	`HTAÀπInô
();

67 
	`HTLibTîmö©e
();

69 
	}
}

	@Library/Examples/isredirected.c

19 
	~"WWWLib.h
"

20 
	~"WWWInô.h
"

22 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

24  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

25 
	}
}

27 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

29  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

30 
	}
}

32 
PRIVATE
 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

33 * 
∑øm
, 
°©us
)

39 i‡(
°©us
 =
HT_PERM_REDIRECT
 || sètu†=
HT_FOUND
 ||

40 
°©us
 =
HT_SEE_OTHER
 || sètu†=
HT_PROXY_REDIRECT
 ||

41 
°©us
 =
HT_TEMP_REDIRECT
) {

42 * 
addr
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
	`HTReque°_™ch‹
(
ªque°
));

43 * 
ª_addr
 = 
	`HTAnch‹_addªss
(
	`HTRe•⁄£_ªdúe˘i⁄
(
ª•⁄£
));

44 
time_t
 
ªåy_a·î
 = 
	`HTRe•⁄£_ªåyTime
(
ª•⁄£
);

45 
	`HTPröt
("Theáddress `%s\' wasÑedirectedÅo `%s\'\n",

46 
addr
, 
ª_addr
 ?Ñe_addr : "<none>");

47 
	`HT_FREE
 (
ª_addr
);

48 i‡(
ªåy_a·î
 >= 0)

49 
	`HTPröt
("AÑëryá·îÖîiod o‡%d sec†wa†giví\n", 
ªåy_a·î
);

51 
	`HTPröt
("Request didn'tÑesult ináÑedirection\n");

55 
	`HTReque°_dñëe
(
ªque°
);

58 
	`HTProfûe_dñëe
();

61 
	`exô
(0);

62 
	}
}

64 
	$maö
 (
¨gc
, ** 
¨gv
)

66 
HTReque°
 * 
ªque°
 = 
NULL
;

67 
HTAnch‹
 * 
d°
 = 
NULL
;

68 * 
d°_°r
 = 
NULL
;

69 
BOOL
 
°©us
 = 
NO
;

72 
	`HTProfûe_√wRobŸ
("catch-redirect", "1.0");

75 
	`HTPröt_£tCÆlback
(
¥öãr
);

76 
	`HTTø˚_£tCÆlback
(
åa˚r
);

80 
	`HTSëTø˚MesßgeMask
("sop");

84 
	`HTHo°_£tEvítTimeout
(10000);

87 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

90 i‡(
¨gc
 >= 2) {

91 
d°_°r
 = 
¨gv
[1];

93 
	`HTPröt
("TypeÅhe URI ofÅhe destination you wantÅo check whether itÑedirected orÇot\n");

94 
	`HTPröt
("\t%†<addªss>\n", 
¨gv
[0]);

95 
	`HTPröt
("F‹Éxam∂e, %†hâp://www.w3.‹g\n", 
¨gv
[0]);

99 i‡(
d°_°r
 && *dst_str) {

101 
	`HTPröt
("SídögÑeque°Åÿ%s\n", 
d°_°r
);

104 
ªque°
 = 
	`HTReque°_√w
();

107 
	`HTAÀπ_£tI¡îa˘ive
(
NO
);

110 
d°
 = 
	`HTAnch‹_födAddªss
(
d°_°r
);

113 
°©us
 = 
	`HTHódAnch‹
(
d°
, 
ªque°
);

116 i‡(
°©us
 =
YES
Ë
	`HTEvítLi°_lo›
(
ªque°
);

121 
	}
}

	@Library/Examples/libapp_1.c

1 
	~"WWWLib.h
"

3 
	$maö
()

5 
	`HTLibInô
("TestApp", "1.0");

6 
	`HTLibTîmö©e
();

8 
	}
}

	@Library/Examples/libapp_2.c

1 
	~"WWWLib.h
"

2 
	~"WWWInô.h
"

3 
	~"WWWHTTP.h
"

4 
	~"WWWTøns.h
"

6 
	$maö
()

8 
HTLi°
 *
c⁄vîãrs
 = 
	`HTLi°_√w
();

11 
	`HTLibInô
("TestApp", "1.0");

14 
	`HTTøn•‹t_add
("buf„ªd_t˝", 
HT_TP_SINGLE
, 
HTRódî_√w
, 
HTBuf„rWrôî_√w
);

17 
	`HTPrŸocﬁ_add
("hâp", "buf„ªd_t˝", 
HTTP_PORT
, 
YES
, 
HTLﬂdHTTP
, 
NULL
);

20 
	`HTC⁄vîsi⁄_add
(
c⁄vîãrs
, "*/*", "www/¥e£¡", 
HTSaveLoˇŒy
, 1.0, 0.0, 0.0);

23 
	`HTF‹m©_£tC⁄vîsi⁄
(
c⁄vîãrs
);

26 
	`HTC⁄vîsi⁄_dñëeAŒ
(
c⁄vîãrs
);

29 
	`HTLibTîmö©e
();

31 
	}
}

	@Library/Examples/libapp_3.c

1 
	~"WWWLib.h
"

2 
	~"WWWSåóm.h
"

3 
	~"WWWInô.h
"

8 
	$maö
 (
¨gc
, ** 
¨gv
)

10 
HTReque°
 * 
ªque°
;

11 
	`HTProfûe_√wPªem±iveRobŸ
("TestApp", "1.0");

12 
ªque°
 = 
	`HTReque°_√w
();

13 
	`HTReque°_£tOuçutF‹m©
(
ªque°
, 
WWW_SOURCE
);

14 i‡(
¨gc
 == 2) {

15 * 
uæ
 = 
¨gv
[1];

16 i‡(
uæ
 && *url) {

17 
HTP¨ítAnch‹
 * 
™ch‹
=(HTP¨ítAnch‹*)
	`HTAnch‹_födAddªss
(
uæ
);

18 
BOOL
 
°©us
 =

19 
	`HTLﬂdToSåóm
(
uæ
,

20 
	`HTC⁄ã¡Cou¡î
(
	`HTBœckHﬁe
(), 
ªque°
,0x2000),

21 
ªque°
);

22 i‡(
°©us
)

23 
	`¥ötf
("ContentÜength foundÅo be %ld bytes\n",

24 
	`HTAnch‹_Àngth
(
™ch‹
));

26 
	`¥ötf
("ContentÜength couldÇot be found\n");

28 
	`¥ötf
("BadÖarameters -ÖleaseÅryágain\n");

30 
	`¥ötf
("TypeÅhe URLÅo fetch\n");

32 
	`HTReque°_dñëe
(
ªque°
);

33 
	`HTProfûe_dñëe
();

35 
	}
}

	@Library/Examples/libapp_4.c

20 
	~"WWWLib.h
"

21 
	~"WWWInô.h
"

26 
	$maö
 (
¨gc
, ** 
¨gv
)

28 
HTReque°
 * 
ªque°
;

29 
	`HTProfûe_√wPªem±iveClõ¡
("TestApp", "1.0");

30 
ªque°
 = 
	`HTReque°_√w
();

31 i‡(
¨gc
 == 3) {

32 * 
uæ
 = 
¨gv
[1];

33 * 
fûíame
 = 
¨gv
[2];

34 i‡(
uæ
 && *uæ && 
fûíame
 && *filename)

35 
	`HTLﬂdToFûe
(
uæ
, 
ªque°
, 
fûíame
);

37 
	`¥ötf
("BadÖarameters -ÖleaseÅryágain\n");

39 
	`¥ötf
("TypeÅhe URLÅo fetchándÅheÇame ofÅheÜocal fileÅoÖut it in\n");

40 
	`¥ötf
("\t%†<uæ> <fûíame>\n", 
¨gv
[0]);

42 
	`HTReque°_dñëe
(
ªque°
);

43 
	`HTProfûe_dñëe
();

45 
	}
}

	@Library/Examples/listen.c

14 
	~"WWWLib.h
"

15 
	~"WWWTøns.h
"

16 
	~"WWWInô.h
"

17 
	~"WWWAµ.h
"

19 #i‚de‡
W3C_VERSION


20 
	#W3C_VERSION
 "un•ecifõd"

	)

23 
	#APP_NAME
 "libwww-li°í"

	)

24 
	#APP_VERSION
 
W3C_VERSION


	)

26 
	#OUTPUT
 
°dîr


	)

28 
	#DEFAULT_PORT
 1024

	)

30 
	#DEFAULT_FORMAT
 
WWW_RAW


	)

32 
	s_Li°íToﬁ
 {

33 
HTReque°
 * 
	mªque°
;

34 
	mp‹t
;

35 } 
	tLi°íToﬁ
;

40 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

42  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

43 
	}
}

45 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

47  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

48 
	}
}

53 
PRIVATE
 
Li°íToﬁ
 * 
	$Li°íToﬁ_√w
 ()

55 
Li°íToﬁ
 * 
me
;

56 i‡((
me
 = (
Li°íToﬁ
 *Ë
	`HT_CALLOC
(1, (Li°íToﬁ))Ë=
NULL
)

57 
	`HT_OUTOFMEM
("ListenTool_new");

58 
me
->
p‹t
 = 
DEFAULT_PORT
;

59  
me
;

60 
	}
}

65 
PRIVATE
 
BOOL
 
	$Li°íToﬁ_dñëe
 (
Li°íToﬁ
 * 
me
)

67 i‡(
me
) {

68 
	`HTReque°_dñëe
(
me
->
ªque°
);

69 
	`HT_FREE
(
me
);

70  
YES
;

72  
NO
;

73 
	}
}

75 
PRIVATE
 
	$CÀ™up
 (
Li°íToﬁ
 * 
me
, 
°©us
)

77 
	`Li°íToﬁ_dñëe
(
me
);

78 
	`HTEvítTîmö©e
();

79 
	`HTLibTîmö©e
();

80 #ifde‡
VMS


81 
	`exô
(
°©us
 ? status : 1);

83 
	`exô
(
°©us
 ? status : 0);

85 
	}
}

87 
PRIVATE
 
	$Vîsi⁄Info
 (c⁄° * 
«me
)

89 
	`HTPröt
("\nW3C OpenSource Software");

90 
	`HTPröt
("\n-----------------------\n\n");

91 
	`HTPröt
("\tLi°íÅoﬁ vîsi⁄ %s\n", 
APP_VERSION
);

92 
	`HTPröt
("\tusögÅhêW3CÜibwwwÜibøry vîsi⁄ %s.\n\n",
	`HTLib_vîsi⁄
());

93 
	`HTPröt
("Format\n\n");

94 
	`HTPröt
("\t%†-p‹à¿[-v[s›t]] [-vîsi⁄]\n\n", 
«me
 ?Çame : "listen");

95 
	`HTPröt
("Please send feedbackÅoÅhe <www-lib@w3.org> mailingÜist,\n");

96 
	`HTPröt
("see \"http://www.w3.org/Library/#Forums\" for details\n\n");

97 
	}
}

99 
PRIVATE
 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

100 * 
∑øm
, 
°©us
)

103 
	`HTReque°_dñëe
(
ªque°
);

105 i‡(
°©us
 =
HT_ERROR
Ë
	`HTPröt
("Can'tÜisten onÅhisÖort\n");

108 
	`HTProfûe_dñëe
();

110 
	`exô
(0);

111 
	}
}

117 
	$maö
 (
¨gc
, ** 
¨gv
)

119 
Li°íToﬁ
 * 
ms
 = 
	`Li°íToﬁ_√w
();

120 
°©us
 = 
HT_ERROR
;

121 
¨g
 = 0;

129 
	`HTLibInô
(
APP_NAME
, 
APP_VERSION
);

132 
	`HTEvítInô
();

135 
	`HTPröt_£tCÆlback
(
¥öãr
);

136 
	`HTTø˚_£tCÆlback
(
åa˚r
);

139 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

142 i‡(
¨gc
==1) {

143 
	`Vîsi⁄Info
(
¨gv
[0]);

144 
	`CÀ™up
(
ms
, 0);

148 
¨g
=1;árg<
¨gc
 ;árg++) {

149 i‡(*
¨gv
[
¨g
] == '-') {

152 i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-p", 2)) {

153 
ms
->
p‹t
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

154 
	`©oi
(
¨gv
[++
¨g
]Ë: 
DEFAULT_PORT
;

157 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-version")) {

158 
	`Vîsi⁄Info
(
¨gv
[0]);

159 
	`CÀ™up
(
ms
, 0);

161 #ifde‡
HTDEBUG


163 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-v", 2)) {

164 
	`HTSëTø˚MesßgeMask
(
¨gv
[
¨g
]+2);

167 
	`Vîsi⁄Info
(
¨gv
[0]);

168 
	`CÀ™up
(
ms
, 0);

171 
	`Vîsi⁄Info
(
¨gv
[0]);

172 
	`CÀ™up
(
ms
, 0);

177 i‡(
ms
->
p‹t
 >= 0) {

180 
	`HTTøn•‹t_add
("t˝", 
HT_TP_SINGLE
, 
HTRódî_√w
, 
HTWrôî_√w
);

183 
	`HTPrŸocﬁ_add
("no›", "t˝", 
ms
->
p‹t
, 
NO
, 
NULL
, 
HTLﬂdSockë
);

186 
ms
->
ªque°
 = 
	`HTReque°_√w
();

187 
	`HTReque°_£tOuçutF‹m©
(
ms
->
ªque°
, 
DEFAULT_FORMAT
);

188 
	`HTReque°_£tOuçutSåóm
(
ms
->
ªque°
,

189 
	`HTFWrôî_√w
(
ms
->
ªque°
, 
OUTPUT
, 
YES
));

192 
	`HTPröt
("Li°íög o¿p‹à%d\n", 
ms
->
p‹t
);

193 i‡((
°©us
 = 
	`HTSîveAbsﬁuã
("no›://loˇlho°", 
ms
->
ªque°
)Ë=
NO
) {

194 
	`HTPröt
("C™'àli°í o¿p‹à%d\n", 
ms
->
p‹t
);

195 
	`CÀ™up
(
ms
, -1);

199 i‡(
°©us
 =
YES
Ë
	`HTEvítLi°_√wLo›
();

201 
	`CÀ™up
(
ms
, 0);

203 
	}
}

	@Library/Examples/memput.c

19 
	~"WWWLib.h
"

20 
	~"WWWInô.h
"

22 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

24  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

25 
	}
}

27 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

29  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

30 
	}
}

32 
PRIVATE
 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

33 * 
∑øm
, 
°©us
)

36 
	`HTReque°_dñëe
(
ªque°
);

39 
	`HTProfûe_dñëe
();

41 
	`exô
(0);

42 
	}
}

44 
	$maö
 (
¨gc
, ** 
¨gv
)

46 
HTReque°
 * 
ªque°
 = 
NULL
;

47 
HTP¨ítAnch‹
 * 
§c
 = 
NULL
;

48 
HTAnch‹
 * 
d°
 = 
NULL
;

49 * 
d°_°r
 = 
NULL
;

50 * 
d©a
 = 
NULL
;

51 
BOOL
 
°©us
 = 
NO
;

54 
	`HTProfûe_√wNoCacheClõ¡
("libwww-PUT", "1.0");

57 
	`HTPröt_£tCÆlback
(
¥öãr
);

58 
	`HTTø˚_£tCÆlback
(
åa˚r
);

61 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

65 
	`HTSëTø˚MesßgeMask
("p");

69 i‡(
¨gc
 >= 3) {

70 
d°_°r
 = 
¨gv
[1];

71 
d©a
 = 
¨gv
[2];

73 
	`HTPröt
("TypeÅhe URI ofÅhe destination you wantÅo create/updateándÅhe contentsÅhat you wantÅo save.\n");

74 
	`HTPröt
("\t%†<de°ö©i⁄> <d©a>\n", 
¨gv
[0]);

75 
	`HTPröt
("ForÉxample, %s http://myserver/destination.html \"This is someÅestdata\"\n",

76 
¨gv
[0]);

80 i‡(
d©a
 && *d©®&& 
d°_°r
 && *dst_str) {

82 
	`HTPröt
("SavögÅÿ%s\n", 
d°_°r
);

85 
ªque°
 = 
	`HTReque°_√w
();

88 
d°
 = 
	`HTAnch‹_födAddªss
(
d°_°r
);

96 
§c
 = 
	`HTTmpAnch‹
(
NULL
);

97 
	`HTAnch‹_£tDocumít
(
§c
, 
d©a
);

98 
	`HTAnch‹_£tF‹m©
(
§c
, 
WWW_PLAINTEXT
);

105 
	`HTAnch‹_£tLígth
(
§c
, 
	`°æí
(
d©a
));

108 
°©us
 = 
	`HTPutAnch‹
(
§c
, 
d°
, 
ªque°
);

111 i‡(
°©us
 =
YES
Ë
	`HTEvítLi°_lo›
(
ªque°
);

116 
	}
}

	@Library/Examples/mget.c

22 
	~"WWWLib.h
"

23 
	~"WWWInô.h
"

25 
	#MAX_COUNT
 1024

	)

27 
PRIVATE
 
	gªmaöög
 = 0;

31 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

33  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

34 
	}
}

36 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

38  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

39 
	}
}

41 
PRIVATE
 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

42 * 
∑øm
, 
°©us
)

44 
HTChunk
 * 
chunk
 = (HTChunk *Ë
	`HTReque°_c⁄ãxt
(
ªque°
);

47 
	`HTPröt
("Lﬂd %dÑesu…ed i¿°©u†%d\n", 
ªmaöög
, 
°©us
);

50 i‡(
°©us
 =
HT_LOADED
 && 
chunk
 && 
	`HTChunk_d©a
(chunk))

51 
	`HTPröt
("%s", 
	`HTChunk_d©a
(
chunk
));

53 *
°rög
 = 
NULL
;

54 
°rög
 = 
	`HTChunk_toCSåög
(
chunk
);

55 
	`HTPröt
("%s", 
°rög
 ? string : "noÅext");

58 i‡(
chunk
Ë
	`HTChunk_dñëe
(chunk);

61 
	`HTReque°_dñëe
(
ªque°
);

63 i‡(--
ªmaöög
 <= 0) {

66 
	`HTProfûe_dñëe
();

68 
	`exô
(0);

71  
HT_OK
;

72 
	}
}

74 
	$maö
 (
¨gc
, ** 
¨gv
)

76 
HTReque°
 * 
ªque°
 = 
NULL
;

77 * 
addr
 = 
NULL
;

78 
BOOL
 
°©us
 = 
YES
;

81 
	`HTProfûe_√wNoCacheClõ¡
("libwww-MGET", "1.0");

84 
	`HTPröt_£tCÆlback
(
¥öãr
);

85 
	`HTTø˚_£tCÆlback
(
åa˚r
);

88 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

92 
	`HTSëTø˚MesßgeMask
("sop");

96 i‡(
¨gc
 >= 2) {

97 
addr
 = 
¨gv
[1];

99 
	`HTPröt
("TypeÅhe URI ofÅhe destination you wantÅo GETándÅheÇumber ofÅimes you wantÅo get it\n");

100 
	`HTPröt
("\t%†<de°ö©i⁄>\n", 
¨gv
[0]);

101 
	`HTPröt
("F‹Éxam∂e, %†hâp://www.w3.‹g 2\n", 
¨gv
[0]);

105 i‡(
addr
 && *addr) {

106 
HTChunk
 * 
chunk
;

107 
˙t
 = 0;

110 
	`HTAÀπ_£tI¡îa˘ive
(
NO
);

113 
	`HTPröt
("Issuög GETÑeque°(sË⁄ `%s\'\n", 
addr
);

116 
ªque°
 = 
	`HTReque°_√w
();

118 
	`HTReque°_addCªdítüls
(
ªque°
, "Authorization", "Token 6ee875a7584eaf9f84b7e33dbb7fc685ad2161a7");

121 
	`HTReque°_£tOuçutF‹m©
(
ªque°
, 
WWW_SOURCE
);

124 i‡((
chunk
 = 
	`HTLﬂdToChunk
(
addr
, 
ªque°
)Ë=
NULL
) {

127 
	`HTReque°_£tC⁄ãxt
(
ªque°
, 
chunk
);

130 i‡(
°©us
) {

131 
	`HTEvítLi°_lo›
(
ªque°
);

137 
	}
}

	@Library/Examples/multichunk.c

20 
	~"WWWLib.h
"

21 
	~"WWWHTTP.h
"

22 
	~"WWWAµ.h
"

23 
	~"WWWInô.h
"

25 
	#MAX_COUNT
 1024

	)

27 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

29  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

30 
	}
}

32 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

34  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

35 
	}
}

37 
PRIVATE
 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

38 * 
∑øm
, 
°©us
)

44 
	`HTEvítLi°_°›Lo›
 ();

47  
HT_ERROR
;

48 
	}
}

50 
	$maö
 (
¨gc
, ** 
¨gv
)

52 
HTReque°
 * 
ªque°
 = 
NULL
;

53 
HTChunk
 * 
chunk
 = 
NULL
;

54 * 
uri
 = 
NULL
;

55 
¨g
 = 0;

56 
maxcou¡
 = 1;

58 
¨g
=1;árg<
¨gc
;árg++) {

59 i‡(*
¨gv
[
¨g
] == '-') {

60 i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-n")) {

61 
maxcou¡
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

62 
	`©oi
(
¨gv
[++
¨g
]) : 1;

65 
	`Ârötf
(
°dîr
, "Bad Argumíà(%s)\n", 
¨gv
[
¨g
]);

68 
uri
 = 
¨gv
[
¨g
];

73 
	`HTProfûe_√wPªem±iveClõ¡
("TestApp", "1.0");

76 
	`HTPröt_£tCÆlback
(
¥öãr
);

77 
	`HTTø˚_£tCÆlback
(
åa˚r
);

80 
	`HTAÀπ_£tI¡îa˘ive
(
NO
);

84 
	`HTSëTø˚MesßgeMask
("sop");

87 i‡(
uri
 && 
maxcou¡
<
MAX_COUNT
) {

88 * 
cwd
 = 
	`HTGëCuºítDúe˘‹yURL
();

89 * 
absﬁuã_uri
 = 
	`HTP¨£
(
uri
, 
cwd
, 
PARSE_ALL
);

90 
time_t
 
loˇl
 = 
	`time
(
NULL
);

91 
ms_t
 
°¨t
 = 
	`HTGëTimeInMûlis
();

92 
ms_t
 
íd
 = -1;

93 
˙t
;

94 
	`HTPröt
("Starting downloading %s %dÅime(s)át %s\n",

95 
uri
, 
maxcou¡
, 
	`HTD©eTimeSå
(&
loˇl
, 
YES
));

96 
˙t
=0; c¡<
maxcou¡
; cnt++) {

97 
ªque°
 = 
	`HTReque°_√w
();

100 
	`HTReque°_£tOuçutF‹m©
(
ªque°
, 
WWW_SOURCE
);

103 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

105 i‡(
uri
) {

106 
chunk
 = 
	`HTLﬂdToChunk
(
absﬁuã_uri
, 
ªque°
);

109 i‡(
chunk
) {

110 * 
°rög
;

112 
	`HTEvítLi°_lo›
 (
ªque°
);

114 
°rög
 = 
	`HTChunk_toCSåög
(
chunk
);

115 
	`HT_FREE
(
°rög
);

120 
	`HTReque°_dñëe
(
ªque°
);

124 
loˇl
 = 
	`time
(
NULL
);

125 
íd
 = 
	`HTGëTimeInMûlis
();

126 
	`HTPröt
("Endingát %s - spent %ld ms\n",

127 
	`HTD©eTimeSå
(&
loˇl
, 
YES
), 
íd
-
°¨t
);

129 
	`HT_FREE
(
absﬁuã_uri
);

130 
	`HT_FREE
(
cwd
);

132 
	`HTPröt
("DownloadsÅhe same URIÇÅimes\n");

133 
	`HTPröt
("Sy¡ax: %†-¿<cou¡> <URI>\n", 
¨gv
[0]);

137 
	`HTProfûe_dñëe
();

138 
	`HTPröt
("\n");

140 
	}
}

	@Library/Examples/myext.c

35 
	~"WWWLib.h
"

36 
	~"WWWInô.h
"

37 
	~"WWWAµ.h
"

38 
	~"WWWXML.h
"

39 
	~"WWWHTTP.h
"

42 #i‚de‡
W3C_VERSION


43 
	#W3C_VERSION
 "Un•ecifõd"

	)

46 
	#APP_NAME
 "MyExt"

	)

47 
	#APP_VERSION
 "3.0"

	)

49 #i‡
deföed
(
__svr4__
)

50 
	#CATCH_SIG


	)

57 
	#ERR_UNKNOWN
 0x0

	)

58 
	#ERR_FATAL
 0x1

	)

59 
	#ERR_NON_FATAL
 0x2

	)

60 
	#ERR_WARN
 0x4

	)

61 
	#ERR_INFO
 0x8

	)

67 #i‚de‡
STDIN_FILENO


68 
	#STDIN_FILENO
 
	`fûío
(
°dö
)

	)

74 
	s_C⁄ãxt
 {

75 
HTChunk
 * 
	mchunk
;

76 
	mdïth
;

77 } 
	tC⁄ãxt
;

83 
	s_Aµ
 {

84 
HTReque°
 * 
	mc⁄sﬁe_ªque°
;

85 
HTEvít
 * 
	mc⁄sﬁe_evít
;

86 
HTLi°
 * 
	ma˘ive
;

87 
HTMëhod
 
	mmëhod
;

88 } 
	tAµ
;

94 
PRIVATE
 
HTEvítCÆlback
 
	gc⁄sﬁe_∑r£r
;

95 
PRIVATE
 
HTNëA·î
 
	gªque°_ãrmö©î
;

96 
PRIVATE
 
HTNëA·î
 
	gloˇl_ªque°_ãrmö©î
;

97 
PRIVATE
 
HTNëA·î
 
	gloˇl_ªque°_fú°
;

98 
PRIVATE
 
HTNëA·î
 
	gîr‹_ˇŒback
;

99 
PRIVATE
 
¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
);

100 
PRIVATE
 
åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
);

106 
PRIVATE
 
Aµ
 * 
Aµ_√w
 ();

107 
PRIVATE
 
BOOL
 
Aµ_dñëe
 (
Aµ
 * 
me
);

108 
PRIVATE
 
C⁄ãxt_√w
 (
HTReque°
 * 
ªque°
, 
HTChunk
 * 
chunk
, 
Aµ
 * 
≠p
);

109 
PRIVATE
 
C⁄ãxt_dñëe
 (
C⁄ãxt
 * 
˘x
);

110 
PRIVATE
 
HTReque°
 * 
Reque°_√w
 (
Aµ
 * 
≠p
);

111 
PRIVATE
 
BOOL
 
Reque°_dñëe
 (
Aµ
 * 
≠p
, 
HTReque°
 * 
ªque°
);

112 
PRIVATE
 
ªque°_ãrmö©î
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

113 * 
∑øm
, 
°©us
);

114 
PRIVATE
 
c⁄sﬁe_∑r£r
 (
SOCKET
 
s
, * 
∑øm
, 
HTEvítTy≥
 
ty≥
);

115 
PRIVATE
 
loˇl_ªque°_ãrmö©î
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

116 * 
∑øm
, 
°©us
);

117 
PRIVATE
 
loˇl_ªque°_fú°
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

118 * 
∑øm
, 
°©us
);

119 
PRIVATE
 
îr‹_ˇŒback
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

120 * 
∑øm
, 
°©us
);

122 
PRIVATE
 
Aµ
 * 
Inô
 ();

123 
PRIVATE
 
my_hódîs
 (
HTReque°
 *
ªque°
);

124 
PRIVATE
 
my_gë_documít
 (
Aµ
 *
≠p
, *
d°
);

125 
PRIVATE
 * 
¸óã_body
 ();

135 
PRIVATE
 
	$XML_°¨tEÀmít
 (* 
u£rD©a
,

136 c⁄° 
XML_Ch¨
 *
«me
,

137 c⁄° 
XML_Ch¨
 ** 
©ts
)

139 *
dïth
 = (*)
u£rD©a
;

140 
i
=0;

141 i‡(
«me
) {

142 
i
=0;i<(*
dïth
);i++)

143 
	`HTPröt
 (" ");

144 
	`HTPröt
("%s: ", 
«me
);

145 
i
 = 0; 
©ts
[i]; i += 2)

146 
	`HTPröt
(" %s='%s'", 
©ts
[
i
],átts[i + 1]);

147 
	`HTPröt
 ("\n");

149 *
dïth
 += 1;

150 
	}
}

152 
PRIVATE
 
	$XML_ídEÀmít
 (* 
u£rD©a
,

153 c⁄° 
XML_Ch¨
 * 
«me
)

155 *
dïth
 = (*)
u£rD©a
;

156 *
dïth
 -= 1;

157 
	}
}

159 
PRIVATE
 
	$XML_ch¨a˘îD©a
 (* 
u£rD©a
,

160 c⁄° 
XML_Ch¨
 * 
s
,

161 
Àn
)

163 *
dïth
 = (*Ë
u£rD©a
;

164 
i
=0;

166 i‡(
Àn
>1) {

167 
i
=-1;i<(*
dïth
);i++)

168 
	`HTPröt
 (" ");

169 
i
=0;i<
Àn
;i++Ë
	`HTPröt
 ("%c",
s
[i]);

170 
	`HTPröt
 ("\n");

173 
i
=-1;i<(*
dïth
);i++)

174 
	`HTPröt
 (" ");

175 i‡(
s
[0]!='\n' && s[0]!=' ')

176 
	`HTPröt
 ("%c\n",
s
[0]);

179 
	}
}

182 
PRIVATE
 
	$XML_¥o˚ssögIn°ru˘i⁄
 (* 
u£rD©a
,

183 c⁄° 
XML_Ch¨
 * 
èrgë
,

184 c⁄° 
XML_Ch¨
 * 
d©a
)

187 
	}
}

190 
PRIVATE
 
	$XML_deÁu…
 (* 
u£rD©a
,

191 c⁄° 
XML_Ch¨
 * 
s
,

192 
Àn
)

195 
	}
}

198 
PRIVATE
 
	$XML_u≈¨£dE¡ôyDe˛
 (* 
u£rD©a
,

199 c⁄° 
XML_Ch¨
 * 
ítôyName
,

200 c⁄° 
XML_Ch¨
 * 
ba£
,

201 c⁄° 
XML_Ch¨
 * 
sy°emId
,

202 c⁄° 
XML_Ch¨
 * 
publicId
,

203 c⁄° 
XML_Ch¨
 * 
nŸ©i⁄Name
)

206 
	}
}

208 
PRIVATE
 
	$XML_nŸ©i⁄De˛
 (* 
u£rD©a
,

209 c⁄° 
XML_Ch¨
 * 
nŸ©i⁄Name
,

210 c⁄° 
XML_Ch¨
 * 
ba£
,

211 c⁄° 
XML_Ch¨
 * 
sy°emId
,

212 c⁄° 
XML_Ch¨
 * 
publicId
)

215 
	}
}

217 
PRIVATE
 
	$XML_exã∫ÆE¡ôyRef
 (
XML_P¨£r
 
∑r£r
,

218 c⁄° 
XML_Ch¨
 * 
›íE¡ôyNames
,

219 c⁄° 
XML_Ch¨
 * 
ba£
,

220 c⁄° 
XML_Ch¨
 * 
sy°emId
,

221 c⁄° 
XML_Ch¨
 * 
publicId
)

224 
	}
}

226 
PRIVATE
 
	$XML_unknownEncodög
 (* 
ícodögH™dÀrD©a
,

227 c⁄° 
XML_Ch¨
 * 
«me
,

228 
XML_Encodög
 * 
öfo
)

231 
	}
}

237 
PRIVATE
 
	$HTXML_£tH™dÀrs
 (
XML_P¨£r
 
me
, 
HTReque°
 *
ªque°
)

239 
	`XML_SëEÀmítH™dÀr
(
me
, 
XML_°¨tEÀmít
, 
XML_ídEÀmít
);

240 
	`XML_SëCh¨a˘îD©aH™dÀr
(
me
, 
XML_ch¨a˘îD©a
);

241 
	`XML_SëPro˚ssögIn°ru˘i⁄H™dÀr
(
me
, 
XML_¥o˚ssögIn°ru˘i⁄
);

242 
	`XML_SëDeÁu…H™dÀr
(
me
, 
XML_deÁu…
);

243 
	`XML_SëU≈¨£dE¡ôyDe˛H™dÀr
(
me
, 
XML_u≈¨£dE¡ôyDe˛
);

244 
	`XML_SëNŸ©i⁄De˛H™dÀr
(
me
, 
XML_nŸ©i⁄De˛
);

245 
	`XML_SëExã∫ÆE¡ôyRefH™dÀr
(
me
, 
XML_exã∫ÆE¡ôyRef
);

246 
	`XML_SëUnknownEncodögH™dÀr
(
me
, 
XML_unknownEncodög
, 
NULL
);

248 i‡(
ªque°
 && 
	`HTReque°_c⁄ãxt
(request)) {

249 
	`XML_SëU£rD©a
(
me
, &(((
C⁄ãxt
 *)(
	`HTReque°_c⁄ãxt
(
ªque°
)))->
dïth
) );

251 
	}
}

253 
PRIVATE
 
	$HTXML_√wIn°™˚
 (
HTSåóm
 * 
me
,

254 
HTReque°
 * 
ªque°
,

255 
HTF‹m©
 
èrgë_f‹m©
,

256 
HTSåóm
 * 
èrgë_°ªam
,

257 
XML_P¨£r
 
xmÕ¨£r
,

258 * 
c⁄ãxt
)

260 
	`HTPröt
 ("MyExt: HTXML_newInstance\n");

261 i‡(
me
 && 
xmÕ¨£r
Ë
	`HTXML_£tH™dÀrs
(xmÕ¨£r,
ªque°
);

262 
	}
}

270 
PUBLIC
 
	$CRLFCÀ™Up
 (*
buf
,
size
) {

271 
i
;

272 if(
buf
 && *buf) {

273 
i
=0;i<
size
;i++)

278 i‡(
buf
[
i
]=='\n' ||

279 
buf
[
i
]=='\010' || buf[i]=='\013' ||

280 
buf
[
i
]==
CR
 || buf[i]==
LF
 )

281 
buf
[
i
]=' ';

283 
	}
}

289 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
) {

290  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

291 
	}
}

297 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
) {

298  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

299 
	}
}

306 
PRIVATE
 
Aµ
 * 
	$Aµ_√w
 () {

307 
Aµ
 * 
me
 = 
NULL
;

309 i‡((
me
 = (
Aµ
 *Ë
	`HT_CALLOC
(1, (Aµ))Ë=
NULL
)

310 
	`HT_OUTOFMEM
("App_new");

313 
me
->
c⁄sﬁe_ªque°
 = 
	`HTReque°_√w
();

314 
me
->
c⁄sﬁe_evít
 = 
	`HTEvít_√w
(
c⁄sﬁe_∑r£r
, me, 
HT_PRIORITY_MAX
, -1);

315 
me
->
a˘ive
 = 
	`HTLi°_√w
();

318 i‡(
	`ißây
(
STDIN_FILENO
))

319 
	`HTEvítLi°_ªgi°î
(
STDIN_FILENO
, 
HTEvít_READ
, 
me
->
c⁄sﬁe_evít
);

322 
	`HTNë_addA·î
(
ªque°_ãrmö©î
, 
NULL
, 
me
, 
HT_ALL
, 
HT_FILTER_LAST
);

324 
	`HTPröt
 ("MyExt: Application context created\n");

327 
	`HTPröt
 ("MyExt: Sëtög mëhod %xÅÿPROPFIND\n",
METHOD_EXT_0
);

328 i‡(
	`HTMëhod_£tExãnsi⁄Mëhod
 (
METHOD_EXT_0
, "PROPFIND",
NO
))

329 
me
->
mëhod
 = 
METHOD_EXT_0
;

331 
	`HTPröt
 ("MyExt: Extension method FAILED - using GET\n");

332 
me
->
mëhod
 = 
METHOD_GET
;

335 
	`HTPröt
 ("ENTER A URL: \n");

336  
me
;

337 
	}
}

347 
PRIVATE
 
BOOL
 
	$Aµ_dñëe
 (
Aµ
 * 
me
) {

348 
HTReque°
 * 
ªq
 = 
NULL
;

350 
	`HTPröt
 ("MyExt: Removingápplication context\n");

352 i‡(
me
) {

355 
	`HTNë_kûlAŒ
();

358 !
	`HTLi°_isEm±y
(
me
->
a˘ive
)) {

359 
ªq
 = (
HTReque°
 *Ë
	`HTLi°_√xtObje˘
 (
me
->
a˘ive
);

360 i‡(
ªq
Ë
	`Reque°_dñëe
 (
me
,req);

364 
	`HTReque°_dñëe
(
me
->
c⁄sﬁe_ªque°
);

365 
	`HTEvít_dñëe
 (
me
->
c⁄sﬁe_evít
);

366 
	`HTLi°_‰ì
 (
me
->
a˘ive
);

369 
	`HTPröt
 ("RemovingÉxtension method\n");

370 i‡(
	`HTMëhod_dñëeExãnsi⁄Mëhod
 (
METHOD_EXT_0
))

371 
	`HTPröt
 ("MyExt: Extension method deleted \n");

373 
	`HT_FREE
(
me
);

376 
	`HTEvítLi°_°›Lo›
();

379 
	`HTProfûe_dñëe
();

381  
YES
;

383  
NO
;

384 
	}
}

393 
PRIVATE
 
	$C⁄ãxt_√w
 (
HTReque°
 * 
ªque°
, 
HTChunk
 * 
chunk
, 
Aµ
 * 
≠p
) {

394 
C⁄ãxt
 * 
˘x
 = 
NULL
;

396 i‡–(
˘x
 = (
C⁄ãxt
 *Ë
	`HT_CALLOC
(1, (C⁄ãxt))Ë=
NULL
 ) {

397 
	`Aµ_dñëe
 (
≠p
);

398 
	`HT_OUTOFMEM
("Contect_new");

401 
	`HTPröt
 ("MyExt: SettingÑequest context...\n");

402 
˘x
->
dïth
 = 0;

403 
˘x
->
chunk
 = chunk;

404 
	`HTReque°_£tC⁄ãxt
(
ªque°
,
˘x
);

405 
	}
}

412 
PRIVATE
 
	$C⁄ãxt_dñëe
 (
C⁄ãxt
 * 
˘x
) {

413 i‡(
˘x
 && ctx->
chunk
) {

414 
	`HTPröt
 ("MyExt: RemovingÑequest context...\n");

415 
	`HTChunk_dñëe
 (
˘x
->
chunk
);

416 
	`HT_FREE
 (
˘x
);

418 
	}
}

426 
PRIVATE
 
HTReque°
 * 
	$Reque°_√w
 (
Aµ
 * 
≠p
)

429 
HTReque°
 * 
ªque°
 = 
	`HTReque°_√w
();

431 
	`HTPröt
 ("MyExt: creatingáÇewÑequest\n");

434 
	`HTReque°_£tOuçutF‹m©
(
ªque°
, 
	`HTAtom_f‹
 ("text/xml"));

435 
	`HTReque°_£tOuçutF‹m©
(
ªque°
, 
WWW_SOURCE
);

437 
	`HTReque°_addC⁄√˘i⁄
 (
ªque°
,"close","");

440 
	`HTPröt
 ("MyExt: Setting method inÅheÑequest\n");

441 i‡(
≠p
)

442 
	`HTReque°_£tMëhod
 (
ªque°
,
≠p
->
mëhod
);

444 
	`HTPröt
 ("MyExt: No App, using default method\n");

445 
	`HTReque°_£tMëhod
 (
ªque°
,
METHOD_GET
);

450 
	`HTReque°_addExåaHódî
 (
ªque°
,"Depth","0");

451 
	`HTReque°_addCacheC⁄åﬁ
 (
ªque°
, "no-cache","");

454 
	`HTReque°_addGnHd
 (
ªque°
,
HT_G_PRAGMA_NO_CACHE
);

457 
	`HTReque°_addA·î
 (
ªque°
, 
loˇl_ªque°_ãrmö©î
, 
NULL
, 
≠p
, \

458 
HT_ALL
 ,
HT_FILTER_LAST
 , 
NO
);

459 
	`HTReque°_addA·î
 (
ªque°
, 
loˇl_ªque°_fú°
, 
NULL
, 
≠p
, \

460 
HT_ALL
 ,
HT_FILTER_FIRST
 , 
NO
);

462 
	`HTReque°_addA·î
 (
ªque°
,
îr‹_ˇŒback
, 
NULL
, 
≠p
, \

463 
HT_ERROR
, 
HT_FILTER_LAST
, 
NO
);

466 i‡(!
≠p
->
a˘ive
Ë≠p->a˘ivê
	`HTLi°_√w
();

467 
	`HTLi°_addObje˘
(
≠p
->
a˘ive
, 
ªque°
);

469 
	`HTReque°_£tFlush
(
ªque°
, 
YES
);

472 
	`HTXMLCÆlback_ªgi°îNew
 (
HTXML_√wIn°™˚
, 
NULL
);

474  
ªque°
;

475 
	}
}

486 
PRIVATE
 
BOOL
 
	$Reque°_dñëe
 (
Aµ
 * 
≠p
, 
HTReque°
 * 
ªque°
)

488 
	`HTPröt
 ("MyExt:ÑemovingÑequest\n");

490 i‡(
≠p
 &&áµ->
a˘ive
 && 
ªque°
) {

491 
	`HTPröt
 ("MyExt: Request deleted \n");

492 
	`HTLi°_ªmoveObje˘
(
≠p
->
a˘ive
, 
ªque°
);

494 
	`HTReque°_dñëe
(
ªque°
);

495  
YES
;

497  
NO
;

498 
	}
}

506 
PRIVATE
 
	$c⁄sﬁe_∑r£r
 (
SOCKET
 
s
, * 
∑øm
, 
HTEvítTy≥
 
ty≥
)

508 
Aµ
 * 
≠p
 = (Aµ *Ë
∑øm
;

509 
buf
[128];

510 * 
fuŒ_d°
;

511 * 
cwd
;

514 i‡(!
	`fgës
(
buf
, (buf), 
°dö
)Ë 
HT_ERROR
;

516 i‡(
	`touµî
(
buf
[0]) == 'Q') {

517 
	`Aµ_dñëe
(
≠p
);

518 
	`exô
 (0);

521 
	`CRLFCÀ™Up
 (
buf
,
	`°æí
(buf));

522 
	`HTPröt
 ("MyExt: C⁄sﬁêªaded **%s**\n",
buf
);

524 
cwd
 = 
	`HTGëCuºítDúe˘‹yURL
();

525 
fuŒ_d°
 = 
	`HTP¨£
 (
buf
,
cwd
,
PARSE_ALL
);

527 
	`HTPröt
 ("Gëtög %s\n",
fuŒ_d°
);

528 
	`my_gë_documít
 (
≠p
,
fuŒ_d°
);

530 
	`HT_FREE
 (
fuŒ_d°
);

531 
	`HT_FREE
 (
cwd
);

535  
HT_OK
;

536 
	}
}

543 
PRIVATE
 
	$ªque°_ãrmö©î
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

544 * 
∑øm
, 
°©us
)

546 
Aµ
 * 
≠p
 = (Aµ *Ë
∑øm
;

547 
C⁄ãxt
 * 
˘x
 = 
NULL
;

549 
	`HTPröt
 ("MyExt: GLOBAL FILTER (request_terminater)\n");

551 
˘x
 = (
C⁄ãxt
 *Ë
	`HTReque°_c⁄ãxt
(
ªque°
);

553 
	`HTPröt
 ("MyExt: context object deleted\n");

554 
	`C⁄ãxt_dñëe
 (
˘x
);

556 
	`Reque°_dñëe
(
≠p
, 
ªque°
);

558 
	`HTPröt
 ("Ready! Enterá New URL: ");

560  
HT_OK
;

561 
	}
}

568 
PRIVATE
 
	$loˇl_ªque°_ãrmö©î
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

569 * 
∑øm
, 
°©us
)

571 
C⁄ãxt
 * 
˘x
 = 
NULL
;

573 
	`HTPröt
 ("\t°©us: %d\n",
°©us
);

575 i‡(
ª•⁄£
) {

576 
	`HTPröt
 ("\tContent-length: %d \n\tIs Cachable: %c\n\tis Cached: %c \n\tReason: %s\n", \

577 
	`HTRe•⁄£_Àngth
(
ª•⁄£
),\

578 (
	`HTRe•⁄£_isCachabÀ
(
ª•⁄£
))?'Y':'N',

579 (
	`HTRe•⁄£_isCached
(
ª•⁄£
,
YES
))?'Y':'N',

580 (
	`HTRe•⁄£_ªas⁄
(
ª•⁄£
))?HTResponse_reason(response):"NULL");

581 
	`HTPröt
 ("\tF‹m© : %†\n",(*)
	`HTAtom_«me
(
	`HTRe•⁄£_f‹m©
(
ª•⁄£
)));

584 
	`HTPröt
 ("\tResponse NULL\n");

586 
˘x
 = (
C⁄ãxt
 *Ë
	`HTReque°_c⁄ãxt
(
ªque°
);

587 i‡–
˘x
 && ctx->
chunk
 && 
	`HTChunk_d©a
(ctx->chunk))

588 
	`HTPröt
 ("MyExt: Lﬂded: \n%s\n",
	`HTChunk_d©a
(
˘x
->
chunk
));

590 
	`HTPröt
 ("MyExt: NoÅext/xml dataávailableát Chunk\n");

592  
HT_OK
;

593 
	}
}

600 
PRIVATE
 
	$loˇl_ªque°_fú°
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

601 * 
∑øm
, 
°©us
) {

602 
	`my_hódîs
 (
ªque°
);

603  
HT_OK
;

604 
	}
}

611 
PRIVATE
 
	$îr‹_ˇŒback
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

612 * 
∑øm
, 
°©us
) {

614 
Aµ
 * 
≠p
 = (Aµ *Ë
∑øm
;

615 
HTLi°
 * 
îr‹_li°
 = 
NULL
;

616 
HTEº‹
 * 
îr‹
 = 
NULL
;

618 
	`HTPröt
 ("MyExt: ERROR CALLBACK\n");

619 
	`HTPröt
 ("\tapp %s \n\trequest %s \n\tresponse %s \n\tstatus %d\n", \

620 (
≠p
)?"OK":"NULL",(
ªque°
)?"OK":"NULL",\

621 (
ª•⁄£
)?"OK":"NULL",
°©us
);

623 i‡(
ªque°
) {

624 
îr‹_li°
 = 
	`HTReque°_îr‹
 (
ªque°
);

625 
îr‹_li°
 && (
îr‹
 = (
HTEº‹
 *Ë
	`HTLi°_√xtObje˘
(error_list))) {

626 
	`HTPröt
 ("\tEº‹Üoˇti⁄ %s\n",
	`HTEº‹_loˇti⁄
(
îr‹
));

627 
	`HTEº‹_£vîôy
(
îr‹
)) {

628 
ERR_UNKNOWN
 :

629 
	`HTPröt
 ("\tSeverity : UNKNOWN\n");

632 
ERR_FATAL
 :

633 
	`HTPröt
 ("\tSeverity : FATAL\n");

636 
ERR_NON_FATAL
 :

637 
	`HTPröt
 ("\tSeverity : NON FATAL\n");

640 
ERR_WARN
 :

641 
	`HTPröt
 ("\tSeverity : WARN\n");

644 
ERR_INFO
 :

645 
	`HTPröt
 ("\tSeverity : INFO\n");

649 
	`HTPröt
 ("\tSevîôy : %Xd\n",
	`HTEº‹_£vîôy
(
îr‹
));

655  
HT_OK
;

656 
	}
}

663 
PRIVATE
 
Aµ
 * 
	$Inô
 () {

664 
Aµ
 * 
≠p
 = 
NULL
;

666 
	`HTPröt
 ("MyExt: startingápplication\n");

669 
	`HTProfûe_√wHTMLNoCacheClõ¡
(
APP_NAME
, 
APP_VERSION
);

671 
	`HTTP_£tC⁄√˘i⁄Mode
(
HTTP_11_NO_PIPELINING
);

674 
≠p
 = 
	`Aµ_√w
();

677 
	`HTPröt_£tCÆlback
(
¥öãr
);

678 
	`HTTø˚_£tCÆlback
(
åa˚r
);

681 
	`HTSëTø˚MesßgeMask
("sapol");

684 
	`HTEvítLi°_√wLo›
();

686  
≠p
;

687 
	}
}

694 
PRIVATE
 
	$my_hódîs
 (
HTReque°
 *
ªque°
) {

695 
HTAssoc
 * 
h
 = 
NULL
;

696 
HTAssocLi°
 * 
hódîs
 = 
NULL
;

697 
HTP¨ítAnch‹
 * 
™ch‹
 = 
NULL
;

699 
	`HTPröt
 ("MyExt: Searching headers...\n");

701 
™ch‹
 = 
	`HTReque°_™ch‹
 (
ªque°
);

702 
hódîs
 = 
	`HTAnch‹_hódî
(
™ch‹
);

704 
h
 = 
	`HTAssocLi°_√xtObje˘
(
hódîs
);

705 
™ch‹
 && 
hódîs
 && 
h
 ) {

706 
	`HTPröt
 ("\t%†: %s\n",
	`HTAssoc_«me
(
h
),
	`HTAssoc_vÆue
(h));

707 
h
 = 
	`HTAssocLi°_√xtObje˘
(
hódîs
);

709 
	}
}

717 
PRIVATE
 
	$my_gë_documít
 (
Aµ
 *
≠p
, *
d°
) {

718 * 
body
 = 
	`¸óã_body
();

719 
HTReque°
 * 
ªque°
 = 
NULL
;

720 
HTChunk
 * 
chunk
 = 
NULL
;

722 
	`HTPröt
 ("MyExt:Üoading document\n");

724 
ªque°
 = 
	`Reque°_√w
 (
≠p
);

727 
	`HTReque°_£tMesßgeBody
(
ªque°
,
body
);

728 
	`HTReque°_£tMesßgeBodyF‹m©
 (
ªque°
,
	`HTAtom_f‹
("text/xml"));

729 
	`HTReque°_£tMesßgeBodyLígth
 (
ªque°
,
	`°æí
(
body
));

731 i‡–
ªque°
 && (
chunk
 = 
	`HTLﬂdToChunk
 (
d°
,request))) {

732 
	`HTPröt
 ("MyExt: setting context\n");

733 
	`C⁄ãxt_√w
 (
ªque°
,
chunk
,
≠p
);

736 
	`HTPröt
 ("MyExt:ÜoadÅo chunk failed\n");

738 
	`HT_FREE
 (
body
);

739 
	}
}

743 
PRIVATE
 * 
	$¸óã_body
 () {

744 
tmp
[4096];

745 * 
body
 = 
NULL
;

746 
∆
[3];

748 
	`•rötf
 (
∆
,"%c%c",
CR
,
LF
);

750 
	`•rötf
 (
tmp
,"<?xml version=\"1.0\"Éncoding=\"utf-8\" ?>");

751 
	`°rˇt
 (
tmp
,
∆
);

752 
	`°rˇt
 (
tmp
,"<D:propfind xmlns:D=\"DAV:\">");

753 
	`°rˇt
 (
tmp
,
∆
);

754 
	`°rˇt
 (
tmp
," <D:allprop />");

755 
	`°rˇt
 (
tmp
,
∆
);

756 
	`°rˇt
 (
tmp
,"</D:propfind>");

758 i‡–(
body
 = 
	`HT_MALLOC
 (
	`°æí
(
tmp
)+4)Ë!
NULL
)

759 
	`•rötf
 (
body
,"%s%c",
tmp
,'\0');

761  
body
;

762 
	}
}

766 
	$maö
 (
¨gc
, ** 
¨gv
)

768 
Aµ
 * 
≠p
 = 
NULL
;

770 
≠p
 = 
	`Inô
();

773 
	}
}

	@Library/Examples/myext2.c

34 
	~"WWWLib.h
"

35 
	~"WWWInô.h
"

36 
	~"WWWAµ.h
"

37 
	~"WWWXML.h
"

38 
	~"WWWHTTP.h
"

41 #i‚de‡
W3C_VERSION


42 
	#W3C_VERSION
 "Un•ecifõd"

	)

45 
	#APP_NAME
 "MyExt"

	)

46 
	#APP_VERSION
 "4.0"

	)

48 #i‡
deföed
(
__svr4__
)

49 
	#CATCH_SIG


	)

55 
	#ERR_UNKNOWN
 0x0

	)

56 
	#ERR_FATAL
 0x1

	)

57 
	#ERR_NON_FATAL
 0x2

	)

58 
	#ERR_WARN
 0x4

	)

59 
	#ERR_INFO
 0x8

	)

65 #i‚de‡
STDIN_FILENO


66 
	#STDIN_FILENO
 
	`fûío
(
°dö
)

	)

71 
	#VIEW
 1

	)

72 
	#SET
 2

	)

73 
	#DEL
 3

	)

76 
	#PROPPATCH
 
METHOD_EXT_0


	)

77 
	#PROPFIND
 
METHOD_EXT_1


	)

83 
	s_HTSåóm
 {

84 c⁄° 
HTSåómCœss
 * 
	miß
;

85 
HTSåóm
 * 
	mèrgë
;

86 
HTReque°
 * 
	mªque°
;

87 
	mvîsi⁄
;

88 
BOOL
 
	mídHódî
;

89 
BOOL
 
	må™•¨ít
;

97 
	s_CmdLöe
 {

98 
	mcmd
;

99 *
	muæ
;

100 *
	m¥›
;

101 *
	mns
;

102 *
	mvÆ
;

103 } 
	tCmdLöe
;

109 
	s_C⁄ãxt
 {

110 
	mdïth
;

111 } 
	tC⁄ãxt
;

117 
	s_Aµ
 {

118 
HTReque°
 * 
	mc⁄sﬁe_ªque°
;

119 
HTEvít
 * 
	mc⁄sﬁe_evít
;

120 
HTLi°
 * 
	ma˘ive
;

121 } 
	tAµ
;

127 
PRIVATE
 
HTEvítCÆlback
 
	gc⁄sﬁe_∑r£r
;

128 
PRIVATE
 
HTNëA·î
 
	gªque°_ãrmö©î
;

129 
PRIVATE
 
HTNëA·î
 
	gîr‹_ˇŒback
;

130 
PRIVATE
 
¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
);

131 
PRIVATE
 
åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
);

137 
PRIVATE
 
CmdLöe
 * 
CmdLöe_√w
 (c⁄° *
buf„r
);

138 
PRIVATE
 
BOOL
 
CmdLöe_dñëe
 (
CmdLöe
 * 
me
);

140 
PRIVATE
 
Aµ
 * 
Aµ_√w
 ();

141 
PRIVATE
 
BOOL
 
Aµ_dñëe
 (
Aµ
 * 
me
);

143 
PRIVATE
 
C⁄ãxt_√w
 (
HTReque°
 * 
ªque°
, 
Aµ
 * 
≠p
);

144 
PRIVATE
 
C⁄ãxt_dñëe
 (
C⁄ãxt
 * 
˘x
);

146 
PRIVATE
 
HTReque°
 * 
Reque°_√w
 (
Aµ
 * 
≠p
,
HTMëhod
 
mëhod
);

147 
PRIVATE
 
BOOL
 
Reque°_dñëe
 (
Aµ
 * 
≠p
, 
HTReque°
 * 
ªque°
);

149 
PRIVATE
 
ªque°_ãrmö©î
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

150 * 
∑øm
, 
°©us
);

151 
PRIVATE
 
c⁄sﬁe_∑r£r
 (
SOCKET
 
s
, * 
∑øm
, 
HTEvítTy≥
 
ty≥
);

152 
PRIVATE
 
îr‹_ˇŒback
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

153 * 
∑øm
, 
°©us
);

155 
PRIVATE
 
mypcbf
 (
HTReque°
 * 
ªque°
, 
HTSåóm
 * 
èrgë
);

157 
PRIVATE
 
Aµ
 * 
Inô
 ();

158 
PRIVATE
 
my_gë_documít
 (
Aµ
 *
≠p
, 
CmdLöe
 * 
löe
);

159 
PRIVATE
 * 
¸óã_body
 (
CmdLöe
 *
löe
);

169 
PRIVATE
 
	$XML_°¨tEÀmít
 (* 
u£rD©a
,

170 c⁄° 
XML_Ch¨
 * 
«me
,

171 c⁄° 
XML_Ch¨
 ** 
©ts
)

173 *
dïth
 = (*)
u£rD©a
;

174 
i
=0;

175 i‡(
«me
) {

176 
	`HTPröt
 ("\n");

177 
i
=0;i<(*
dïth
);i++)

178 
	`HTPröt
 (" ");

179 
	`HTPröt
("%†", 
«me
);

180 
i
 = 0; 
©ts
[i]; i += 2)

181 
	`HTPröt
(" %s='%s'", 
©ts
[
i
],átts[i + 1]);

183 *
dïth
 += 1;

184 
	}
}

186 
PRIVATE
 
	$XML_ídEÀmít
 (* 
u£rD©a
,

187 c⁄° 
XML_Ch¨
 * 
«me
)

189 *
dïth
 = (*)
u£rD©a
;

190 *
dïth
 -= 1;

191 
	}
}

193 
PRIVATE
 
	$XML_ch¨a˘îD©a
 (* 
u£rD©a
,

194 c⁄° 
XML_Ch¨
 * 
s
,

195 
Àn
)

197 
i
=0;

199 i‡(
Àn
>1) {

200 
	`HTPröt
 (": ");

201 
i
=0;i<
Àn
;i++Ë
	`HTPröt
 ("%c",
s
[i]);

202 i‡(
s
[
i
-2]!='\n'Ë
	`HTPröt
 ("\n");

205 i‡(
s
[0]!='\n' && s[0]!=' 'Ë
	`HTPröt
 (": %c\n",s[0]);

208 
	}
}

211 
PRIVATE
 
	$XML_¥o˚ssögIn°ru˘i⁄
 (* 
u£rD©a
,

212 c⁄° 
XML_Ch¨
 * 
èrgë
,

213 c⁄° 
XML_Ch¨
 * 
d©a
)

216 
	}
}

219 
PRIVATE
 
	$XML_deÁu…
 (* 
u£rD©a
,

220 c⁄° 
XML_Ch¨
 * 
s
,

221 
Àn
)

224 
	}
}

227 
PRIVATE
 
	$XML_u≈¨£dE¡ôyDe˛
 (* 
u£rD©a
,

228 c⁄° 
XML_Ch¨
 * 
ítôyName
,

229 c⁄° 
XML_Ch¨
 * 
ba£
,

230 c⁄° 
XML_Ch¨
 * 
sy°emId
,

231 c⁄° 
XML_Ch¨
 * 
publicId
,

232 c⁄° 
XML_Ch¨
 * 
nŸ©i⁄Name
)

235 
	}
}

237 
PRIVATE
 
	$XML_nŸ©i⁄De˛
 (* 
u£rD©a
,

238 c⁄° 
XML_Ch¨
 * 
nŸ©i⁄Name
,

239 c⁄° 
XML_Ch¨
 * 
ba£
,

240 c⁄° 
XML_Ch¨
 * 
sy°emId
,

241 c⁄° 
XML_Ch¨
 * 
publicId
)

244 
	}
}

246 
PRIVATE
 
	$XML_exã∫ÆE¡ôyRef
 (
XML_P¨£r
 
∑r£r
,

247 c⁄° 
XML_Ch¨
 * 
›íE¡ôyNames
,

248 c⁄° 
XML_Ch¨
 * 
ba£
,

249 c⁄° 
XML_Ch¨
 * 
sy°emId
,

250 c⁄° 
XML_Ch¨
 * 
publicId
)

253 
	}
}

255 
PRIVATE
 
	$XML_unknownEncodög
 (* 
ícodögH™dÀrD©a
,

256 c⁄° 
XML_Ch¨
 * 
«me
,

257 
XML_Encodög
 * 
öfo
)

260 
	}
}

266 
PRIVATE
 
	$HTXML_£tH™dÀrs
 (
XML_P¨£r
 
me
, 
HTReque°
 *
ªque°
)

268 
	`XML_SëEÀmítH™dÀr
(
me
, 
XML_°¨tEÀmít
, 
XML_ídEÀmít
);

269 
	`XML_SëCh¨a˘îD©aH™dÀr
(
me
, 
XML_ch¨a˘îD©a
);

270 
	`XML_SëPro˚ssögIn°ru˘i⁄H™dÀr
(
me
, 
XML_¥o˚ssögIn°ru˘i⁄
);

271 
	`XML_SëDeÁu…H™dÀr
(
me
, 
XML_deÁu…
);

272 
	`XML_SëU≈¨£dE¡ôyDe˛H™dÀr
(
me
, 
XML_u≈¨£dE¡ôyDe˛
);

273 
	`XML_SëNŸ©i⁄De˛H™dÀr
(
me
, 
XML_nŸ©i⁄De˛
);

274 
	`XML_SëExã∫ÆE¡ôyRefH™dÀr
(
me
, 
XML_exã∫ÆE¡ôyRef
);

275 
	`XML_SëUnknownEncodögH™dÀr
(
me
, 
XML_unknownEncodög
, 
NULL
);

277 i‡(
ªque°
 && 
	`HTReque°_c⁄ãxt
(request)) {

278 
	`XML_SëU£rD©a
(
me
, &(((
C⁄ãxt
 *)(
	`HTReque°_c⁄ãxt
(
ªque°
)))->
dïth
) );

280 
	}
}

282 
PRIVATE
 
	$HTXML_√wIn°™˚
 (
HTSåóm
 * 
me
,

283 
HTReque°
 * 
ªque°
,

284 
HTF‹m©
 
èrgë_f‹m©
,

285 
HTSåóm
 * 
èrgë_°ªam
,

286 
XML_P¨£r
 
xmÕ¨£r
,

287 * 
c⁄ãxt
)

290 i‡(
me
 && 
xmÕ¨£r
) {

291 i‡(
ªque°
 && 
	`HTReque°_mëhod
‘eque°)==
PROPFIND
)

292 
	`HTXML_£tH™dÀrs
(
xmÕ¨£r
,
ªque°
);

294 
	}
}

307 
PRIVATE
 
CmdLöe
 * 
	$CmdLöe_√w
 (c⁄° *
buf„r
) {

308 *
löe
 = (*)
buf„r
;

309 *
uæ
, *
ns
, *
¥›
, *
vÆ
;

310 *
ruæ
, *
∫s
, *
Ωr›
, *
rvÆ
;

311 
cmd
;

312 
i
,
j
,
Àn
;

313 
CmdLöe
 *
ªs
 = 
NULL
;

314 
BOOL
 
°©us
 = 
YES
;

316 
uæ
 = 
ns
 = 
¥›
 = 
vÆ
 = 
NULL
;

317 
ruæ
 = 
∫s
 = 
Ωr›
 = 
rvÆ
 = 
NULL
;

318 
Àn
 = 
	`°æí
 (
löe
);

319 
cmd
 = 0;

320 
i
 = 
j
 = 0;

323 
löe
[
i
]==' ' && i<
Àn
) i++;

324 
löe
[
i
++]) {

326 'V': 
cmd
 = 
VIEW
;

330 'S': 
cmd
 = 
SET
;

334 'D': 
cmd
 = 
DEL
;

337 : 
°©us
 = 
NO
;

342 
°©us
 && 
löe
[
i
]==' ' && i<
Àn
) i++;

343 i‡(
°©us
 && 
i
<
Àn
Ë
uæ
 = &
löe
[i];

344 
°©us
 = 
NO
;

347 
j
 = 
i
;

348 
°©us
 && 
löe
[
i
]!=' ' &&Üöe[i]!='\n' && i<
Àn
) i++;

351 i‡(
°©us
 && (
ruæ
 = 
	`HT_CALLOC
 ((
i
-
j
+1),()))!=
NULL
) {

352 
	`°∫˝y
 (
ruæ
,
uæ
,
i
-
j
);

353 
ruæ
[
i
-
j
]='\0';

355 
°©us
 = 
NO
;

357 i‡(
°©us
 && 
cmd
!=
VIEW
) {

360 
löe
[
i
]==' ' && i<
Àn
) i++;

361 i‡(
°©us
 && 
i
<
Àn
Ë
¥›
 = &
löe
[i];

362 
°©us
 = 
NO
;

364 
j
 = 
i
;

365 
°©us
 && 
löe
[
i
]!=':' && i<
Àn
) i++;

368 i‡(
°©us
 && 
i
<
Àn
 && (
Ωr›
 = 
	`HT_CALLOC
 ((i-
j
+1),()))!=
NULL
) {

369 
	`°∫˝y
 (
Ωr›
,
¥›
,
i
-
j
);

370 
Ωr›
[
i
-
j
]='\0';

372 
°©us
 = 
NO
;

376 
i
++;

377 i‡(
°©us
 && 
i
<
Àn
)

378 
ns
 = &
löe
[
i
];

379 
°©us
 = 
NO
;

381 
j
 = 
i
;

382 
°©us
 && 
löe
[
i
]!=' ' &&Üöe[i]!='=' &&Üöe[i]!='\n' && i<
Àn
) i++;

385 i‡(
°©us
 && (
∫s
 = 
	`HT_CALLOC
 ((
i
-
j
+1),()))!=
NULL
) {

386 
	`°∫˝y
 (
∫s
,
ns
,
i
-
j
);

387 
∫s
[
i
-
j
]='\0';

389 
°©us
 = 
NO
;

392 i‡(
°©us
 && 
cmd
==
SET
) {

394 
löe
[
i
]!='=' && i<
Àn
) i++;

395 
i
++;

396 
löe
[
i
]==' ' && i<
Àn
) i++;

397 i‡(
i
<
Àn
)

398 
vÆ
 = &
löe
[
i
];

399 
°©us
 = 
NO
;

401 
j
 = 
i
;

402 
°©us
 && 
löe
[
i
]!='\n' && i<
Àn
) i++;

405 i‡(
°©us
 && (
rvÆ
 = 
	`HT_CALLOC
 ((
i
-
j
+1),()))!=
NULL
) {

406 
	`°∫˝y
 (
rvÆ
,
vÆ
,
i
-
j
);

407 
rvÆ
[
i
-
j
]='\0';

409 
°©us
 = 
NO
;

414 i‡(
°©us
 && (
ªs
 = 
	`HT_CALLOC
 (1,(
CmdLöe
))Ë!
NULL
 ) {

415 
ªs
->
cmd
 = cmd;

416 
ªs
->
uæ
 = 
ruæ
;

417 
ªs
->
¥›
 = 
Ωr›
;

418 
ªs
->
ns
 = 
∫s
;

419 
ªs
->
vÆ
 = 
rvÆ
;

422 i‡(
ruæ
Ë
	`HT_FREE
(rurl);

423 i‡(
Ωr›
Ë
	`HT_FREE
(rprop);

424 i‡(
∫s
Ë
	`HT_FREE
(rns);

425 i‡(
rvÆ
Ë
	`HT_FREE
(rval);

426 
ªs
 = 
NULL
;

428  
ªs
;

429 
	}
}

435 
PRIVATE
 
BOOL
 
	$CmdLöe_dñëe
 (
CmdLöe
 * 
me
) {

436 i‡(
me
) {

437 i‡(
me
->
uæ
Ë
	`‰ì
 (me->url);

438 i‡(
me
->
¥›
Ë
	`‰ì
 (me->prop);

439 i‡(
me
->
ns
Ë
	`‰ì
 (me->ns);

440 i‡(
me
->
vÆ
Ë
	`‰ì
 (me->val);

441 
	`‰ì
 (
me
);

442  
YES
;

444  
NO
;

445 
	}
}

452 
PRIVATE
 
Aµ
 * 
	$Aµ_√w
 () {

453 
Aµ
 * 
me
 = 
NULL
;

455 i‡((
me
 = (
Aµ
 *Ë
	`HT_CALLOC
(1, (Aµ))Ë=
NULL
)

456 
	`HT_OUTOFMEM
("App_new");

459 
me
->
c⁄sﬁe_ªque°
 = 
	`HTReque°_√w
();

460 
me
->
c⁄sﬁe_evít
 = 
	`HTEvít_√w
(
c⁄sﬁe_∑r£r
, me, 
HT_PRIORITY_MAX
, -1);

461 
me
->
a˘ive
 = 
	`HTLi°_√w
();

464 i‡(
	`ißây
(
STDIN_FILENO
))

465 
	`HTEvítLi°_ªgi°î
(
STDIN_FILENO
, 
HTEvít_READ
, 
me
->
c⁄sﬁe_evít
);

468 
	`HTNë_addA·î
(
ªque°_ãrmö©î
, 
NULL
, 
me
, 
HT_ALL
, 
HT_FILTER_LAST
);

470 
	`HTPröt
 ("MyExt: Application context created\n");

473 
	`HTPröt
 ("MyExt: Sëtög mëhod %xÅÿPROPPATCH\n",
PROPPATCH
);

474 i‡(!
	`HTMëhod_£tExãnsi⁄Mëhod
 (
PROPPATCH
, "PROPPATCH",
YES
)) {

475 
	`HTPröt
 ("MyExt: ERROR _ UnableÅo setÉxtension method");

476 
	`exô
(1);

479 
	`HTPröt
 ("MyExt: Sëtög mëhod %xÅÿPROPFIND\n",
PROPFIND
);

480 i‡(!
	`HTMëhod_£tExãnsi⁄Mëhod
 (
PROPFIND
, "PROPFIND",
NO
)) {

481 
	`HTPröt
 ("MyExt: ERROR _ UnableÅo setÉxtension method");

482 
	`exô
(1);

485 
	`HTPröt
 ("Enter: <command> <url> [propname:namespace][= valor]\n");

486 
	`HTPröt
 (" or QÅoÉxit \n");

487 
	`HTPröt
 ("command := v (view), s (set) or d (delete)\n");

488 
	`HTPröt
 ("examples : s http://foo.bar/Öropertyname:http://foo.bar/foodtd.dtd =Öroperty_value\n");

489 
	`HTPröt
 (" d http://foo.bar/Öropertyname:http://foo.bar/foodtd.dtd \n");

490 
	`HTPröt
 (" v http://foo.bar/\n");

491 
	`HTPröt
 (">\n ");

493  
me
;

494 
	}
}

504 
PRIVATE
 
BOOL
 
	$Aµ_dñëe
 (
Aµ
 * 
me
) {

505 
HTReque°
 * 
ªq
 = 
NULL
;

507 
	`HTPröt
 ("MyExt: Removingápplication context\n");

509 i‡(
me
) {

512 
	`HTNë_kûlAŒ
();

515 !
	`HTLi°_isEm±y
(
me
->
a˘ive
)) {

516 
ªq
 = (
HTReque°
 *Ë
	`HTLi°_√xtObje˘
 (
me
->
a˘ive
);

517 i‡(
ªq
Ë
	`Reque°_dñëe
 (
me
,req);

521 
	`HTReque°_dñëe
(
me
->
c⁄sﬁe_ªque°
);

522 
	`HTEvít_dñëe
 (
me
->
c⁄sﬁe_evít
);

523 
	`HTLi°_‰ì
 (
me
->
a˘ive
);

526 
	`HTPröt
 ("RemovingÉxtension methods\n");

527 i‡(
	`HTMëhod_dñëeExãnsi⁄Mëhod
 (
PROPPATCH
Ë&& HTMëhod_dñëeExãnsi⁄Mëhod (
PROPFIND
))

528 
	`HTPröt
 ("MyExt: Extension methods deleted \n");

530 
	`HT_FREE
(
me
);

533 
	`HTEvítLi°_°›Lo›
();

536 
	`HTProfûe_dñëe
();

538  
YES
;

540  
NO
;

541 
	}
}

549 
PRIVATE
 
	$C⁄ãxt_√w
 (
HTReque°
 * 
ªque°
, 
Aµ
 * 
≠p
) {

550 
C⁄ãxt
 * 
˘x
 = 
NULL
;

552 i‡–(
˘x
 = (
C⁄ãxt
 *Ë
	`HT_CALLOC
(1, (C⁄ãxt))Ë=
NULL
 ) {

553 
	`Aµ_dñëe
 (
≠p
);

554 
	`HT_OUTOFMEM
("Contect_new");

558 
˘x
->
dïth
 = 0;

559 
	`HTReque°_£tC⁄ãxt
(
ªque°
,
˘x
);

560 
	}
}

567 
PRIVATE
 
	$C⁄ãxt_dñëe
 (
C⁄ãxt
 * 
˘x
) {

568 i‡(
˘x
) {

570 
	`HT_FREE
 (
˘x
);

572 
	}
}

580 
PRIVATE
 
HTReque°
 * 
	$Reque°_√w
 (
Aµ
 * 
≠p
, 
HTMëhod
 
mëhod
)

583 
HTReque°
 * 
ªque°
 = 
	`HTReque°_√w
();

585 
	`HTPröt
 ("MyExt: creatingáÇewÑequest\n");

587 
	`HTReque°_addC⁄√˘i⁄
(
ªque°
,"close","");

591 
	`HTReque°_£tOuçutF‹m©
(
ªque°
, 
	`HTAtom_f‹
 ("text/xml"));

592 
	`HTReque°_£tOuçutF‹m©
(
ªque°
, 
WWW_SOURCE
);

596 
	`HTReque°_£tMëhod
 (
ªque°
,
mëhod
);

599 
	`HTReque°_addExåaHódî
 (
ªque°
,"Depth","0");

600 
	`HTReque°_addCacheC⁄åﬁ
 (
ªque°
, "no-cache","");

601 
	`HTReque°_addGnHd
 (
ªque°
,
HT_G_PRAGMA_NO_CACHE
);

605 
	`HTReque°_addA·î
 (
ªque°
,
îr‹_ˇŒback
, 
NULL
, 
≠p
, \

606 
HT_ERROR
, 
HT_FILTER_LAST
, 
NO
);

609 i‡(!
≠p
->
a˘ive
Ë≠p->a˘ivê
	`HTLi°_√w
();

610 
	`HTLi°_addObje˘
(
≠p
->
a˘ive
, 
ªque°
);

612 
	`HTReque°_£tFlush
(
ªque°
, 
YES
);

615 
	`HTXMLCÆlback_ªgi°îNew
 (
HTXML_√wIn°™˚
, 
NULL
);

617  
ªque°
;

618 
	}
}

628 
PRIVATE
 
BOOL
 
	$Reque°_dñëe
 (
Aµ
 * 
≠p
, 
HTReque°
 * 
ªque°
)

632 i‡(
≠p
 &&áµ->
a˘ive
 && 
ªque°
) {

633 
	`HTPröt
 ("MyExt: Request deleted \n");

634 
	`HTLi°_ªmoveObje˘
(
≠p
->
a˘ive
, 
ªque°
);

636 
	`HTReque°_dñëe
(
ªque°
);

637  
YES
;

639  
NO
;

640 
	}
}

651 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
) {

652  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

653 
	}
}

659 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
) {

660  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

661 
	}
}

667 
PRIVATE
 
	$c⁄sﬁe_∑r£r
 (
SOCKET
 
s
, * 
∑øm
, 
HTEvítTy≥
 
ty≥
)

669 
Aµ
 * 
≠p
 = (Aµ *Ë
∑øm
;

670 
buf
[2048];

671 
CmdLöe
 * 
löe
;

674 i‡(!
	`fgës
(
buf
, (buf), 
°dö
)) {

675 
	`HTPröt
 ("ErrorÑeading stdin\n");

676  
HT_ERROR
;

679 i‡(
	`touµî
(
buf
[0]) == 'Q') {

680 
	`Aµ_dñëe
(
≠p
);

681 
	`exô
 (0);

685 
	`HTPröt
 ("MyExt: C⁄sﬁêªaded **%s**\n",
buf
);

686 i‡–(
löe
 = 
	`CmdLöe_√w
 (
buf
))==
NULL
 ) {

687 
	`HTPröt
 ("Wrong commandÜine\n");

688  
HT_ERROR
;

691 
	`my_gë_documít
 (
≠p
,
löe
);

694  
HT_OK
;

695 
	}
}

702 
PRIVATE
 
	$ªque°_ãrmö©î
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

703 * 
∑øm
, 
°©us
)

705 
Aµ
 * 
≠p
 = (Aµ *Ë
∑øm
;

706 
C⁄ãxt
 * 
˘x
 = 
NULL
;

710 i‡(
°©us
/100 =2Ë
	`HTPröt
 ("MyExt: SUCCED!\n");

711 i‡(
ª•⁄£
Ë
	`HTPröt
 ("\tRós⁄ %s\n",(
	`HTRe•⁄£_ªas⁄
(response))? \

712 
	`HTRe•⁄£_ªas⁄
(
ª•⁄£
):"NULL");

713 
	`HTPröt
 ("\tSètu†%d\n",
°©us
);

715 
˘x
 = (
C⁄ãxt
 *Ë
	`HTReque°_c⁄ãxt
(
ªque°
);

718 
	`C⁄ãxt_dñëe
 (
˘x
);

720 
	`Reque°_dñëe
(
≠p
, 
ªque°
);

722 
	`HTPröt
 ("Ready!\n");

723 
	`HTPröt
 ("Enter: <command> <url> [propname:namespace][= valor]\n");

724 
	`HTPröt
 (" or QÅoÉxit\n");

725 
	`HTPröt
 ("> ");

727  
HT_OK
;

728 
	}
}

736 
PRIVATE
 
	$îr‹_ˇŒback
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

737 * 
∑øm
, 
°©us
) {

739 
Aµ
 * 
≠p
 = (Aµ *Ë
∑øm
;

740 
HTLi°
 * 
îr‹_li°
 = 
NULL
;

741 
HTEº‹
 * 
îr‹
 = 
NULL
;

743 
	`HTPröt
 ("MyExt: ERROR CALLBACK\n");

744 
	`HTPröt
 ("\tapp %s \n\trequest %s \n\tresponse %s \n\tstatus %d\n", \

745 (
≠p
)?"OK":"NULL",(
ªque°
)?"OK":"NULL",\

746 (
ª•⁄£
)?"OK":"NULL",
°©us
);

748 i‡(
ªque°
) {

749 
îr‹_li°
 = 
	`HTReque°_îr‹
 (
ªque°
);

750 
îr‹_li°
 && (
îr‹
 = (
HTEº‹
 *Ë
	`HTLi°_√xtObje˘
(error_list))) {

751 
	`HTPröt
 ("\tEº‹Üoˇti⁄ %s\n",
	`HTEº‹_loˇti⁄
(
îr‹
));

752 
	`HTEº‹_£vîôy
(
îr‹
)) {

753 
ERR_UNKNOWN
 :

754 
	`HTPröt
 ("\tSeverity : UNKNOWN\n");

757 
ERR_FATAL
 :

758 
	`HTPröt
 ("\tSeverity : FATAL\n");

761 
ERR_NON_FATAL
 :

762 
	`HTPröt
 ("\tSeverity : NON FATAL\n");

765 
ERR_WARN
 :

766 
	`HTPröt
 ("\tSeverity : WARN\n");

769 
ERR_INFO
 :

770 
	`HTPröt
 ("\tSeverity : INFO\n");

774 
	`HTPröt
 ("\tSevîôy : %Xd\n",
	`HTEº‹_£vîôy
(
îr‹
));

780  
HT_OK
;

781 
	}
}

793 
PRIVATE
 
	$mypcbf
 (
HTReque°
 * 
ªque°
, 
HTSåóm
 * 
èrgë
)

795 
HTP¨ítAnch‹
 * 
ítôy
 = 
	`HTReque°_ítôyAnch‹
(
ªque°
);

796 
	`HTTRACE
(
APP_TRACE
, "Posting Data from MY callback function\n");

797 i‡(!
ªque°
 || !
ítôy
 || !
èrgë
Ë 
HT_ERROR
;

799 
BOOL
 
chunkög
 = 
NO
;

800 
°©us
;

801 * 
documít
 = (*Ë
	`HTAnch‹_documít
(
ítôy
);

802 
Àn
 = 
	`HTAnch‹_Àngth
(
ítôy
);

803 i‡(!
documít
) {

804 
	`HTTRACE
(
PROT_TRACE
, "Posting Data No document\n");

805  
HT_ERROR
;

813 i‡(
Àn
 < 0) {

814 
HTF‹m©
 
a˘uÆ
 = 
	`HTAnch‹_f‹m©
(
ítôy
);

815 
HTF‹m©
 
tm∂©e
 = 
	`HTAtom_f‹
("text/*");

816 i‡(
	`HTMIMEM©ch
(
tm∂©e
, 
a˘uÆ
)) {

817 
Àn
 = 
	`°æí
(
documít
);

818 
chunkög
 = 
YES
;

820 
	`HTTRACE
(
PROT_TRACE
, "Po°ög D©®Mu° knowÅhêÀngth o‡documíà%p\n" 
_


821 
documít
);

822  
HT_ERROR
;

827 
°©us
 = (*
èrgë
->
iß
->
put_block
)—¨gë, 
documít
, 
Àn
);

828 i‡(
°©us
 =
HT_WOULD_BLOCK
) {

829 
	`HTTRACE
(
PROT_TRACE
, "Posting Data Target WOULD BLOCK\n");

830  
HT_WOULD_BLOCK
;

831 } i‡(
°©us
 =
HT_PAUSE
) {

832 
	`HTTRACE
(
PROT_TRACE
, "Posting Data Target PAUSED\n");

833  
HT_PAUSE
;

834 } i‡(
chunkög
 && 
°©us
 =
HT_OK
) {

835 
	`HTTRACE
(
PROT_TRACE
, "Posting Data Target is SAVED using chunked\n");

836  (*
èrgë
->
iß
->
put_block
)(target, "", 0);

837 } i‡(
°©us
 =
HT_LOADED
 || sètu†=
HT_OK
) {

838 
	`HTTRACE
(
PROT_TRACE
, "Posting Data Target is SAVED\n");

839 (*
èrgë
->
iß
->
Êush
)(target);

840  
HT_LOADED
;

841 } i‡(
°©us
 > 0) {

842 
	`HTTRACE
(
PROT_TRACE
, "Po°ög D©a. T¨gëÑëu∫†%d\n" 
_
 
°©us
);

843  
°©us
;

845 
	`HTTRACE
(
PROT_TRACE
, "Po°ög D©®T¨gë ERROR %d\n" 
_
 
°©us
);

846  
°©us
;

849 
	}
}

864 
PRIVATE
 
Aµ
 * 
	$Inô
 () {

865 
Aµ
 * 
≠p
 = 
NULL
;

867 
	`HTPröt
 ("MyExt: startingápplication\n");

870 
	`HTProfûe_√wHTMLNoCacheClõ¡
(
APP_NAME
, 
APP_VERSION
);

871 
	`HTTP_£tC⁄√˘i⁄Mode
(
HTTP_11_NO_PIPELINING
);

873 
≠p
 = 
	`Aµ_√w
();

876 
	`HTPröt_£tCÆlback
(
¥öãr
);

877 
	`HTTø˚_£tCÆlback
(
åa˚r
);

880 
	`HTSëTø˚MesßgeMask
("sapol");

883 
	`HTEvítLi°_√wLo›
();

885  
≠p
;

886 
	}
}

894 
PRIVATE
 
	$my_gë_documít
 (
Aµ
 *
≠p
, 
CmdLöe
 * 
löe
) {

895 
HTReque°
 * 
ªque°
 = 
NULL
;

896 
HTAnch‹
 * 
d°
 = 
NULL
;

897 * 
fuŒ_d°
;

898 * 
cwd
;

899 * 
body
 = 
	`¸óã_body
(
löe
);

901 
cwd
 = 
	`HTGëCuºítDúe˘‹yURL
();

902 
fuŒ_d°
 = 
	`HTP¨£
 (
löe
->
uæ
,
cwd
,
PARSE_ALL
);

903 
d°
 = 
	`HTAnch‹_födAddªss
 (
fuŒ_d°
);

907 
ªque°
 = 
	`Reque°_√w
 (
≠p
, (
löe
->
cmd
==
VIEW
)?
PROPFIND
:
PROPPATCH
);

908 
	`HTReque°_£tAnch‹
 (
ªque°
,
d°
);

911 i‡(
body
) {

912 
	`HTPröt
 ("MyExt: SëtögÉ¡ôy mesßgêbodyÅÿ%s\n",
body
,
	`°æí
(body));

913 i‡(
löe
->
cmd
==
VIEW
) {

914 
	`HTReque°_£tMesßgeBody
 (
ªque°
,
body
);

915 
	`HTReque°_£tMesßgeBodyLígth
 (
ªque°
,
	`°æí
(
body
));

916 
	`HTReque°_£tMesßgeBodyF‹m©
 (
ªque°
,
	`HTAtom_f‹
("text/xml"));

919 
HTP¨ítAnch‹
 *
ítôy
 = 
	`HTTmpAnch‹
(
NULL
);

920 
	`HTAnch‹_£tDocumít
(
ítôy
, 
body
);

921 
	`HTAnch‹_£tF‹m©
(
ítôy
, 
	`HTAtom_f‹
 ("text/xml"));

922 
	`HTAnch‹_£tLígth
(
ítôy
, 
	`°æí
(
body
));

923 
	`HTReque°_£tE¡ôyAnch‹
 (
ªque°
,
ítôy
);

931 
	`HTReque°_£tPo°CÆlback
(
ªque°
, 
mypcbf
);

936 i‡–
ªque°
 && (
	`HTLﬂd
 (ªque°,
NO
))) {

938 
	`C⁄ãxt_√w
 (
ªque°
,
≠p
);

941 
	`HTPröt
 ("MyExt:Üoad failed\n");

945 
	`CmdLöe_dñëe
 (
löe
);

946 
	}
}

950 
PRIVATE
 * 
	$¸óã_body
 (
CmdLöe
 * 
löe
) {

951 * 
body
 = 
NULL
;

952 
buf
 [2048];

954 i‡(
löe
) {

955 
	`°r˝y
 (
buf
,"<?xml version=\"1.0\"Éncoding=\"utf-8\" ?>\n");

956 i‡(
löe
->
cmd
==
VIEW
) {

957 
	`°rˇt
 (
buf
,"<D:propfind xmlns:D=\"DAV:\"> ");

958 
	`°rˇt
 (
buf
,"<D:allprop/> </D:propfind>");

961 
	`°rˇt
 (
buf
,"<D:propertyupdate xmlns:D=\"DAV:\">\n");

963 i‡(
löe
->
cmd
==
SET
Ë
	`°rˇt
 (
buf
," <D:set>\n");

964 i‡(
löe
->
cmd
==
DEL
Ë
	`°rˇt
 (
buf
," <D:remove>\n");

965  
NULL
;

967 
	`°rˇt
 (
buf
," <D:prop>\n");

968 
	`°rˇt
 (
buf
," <ns:");

969 i‡(
löe
->
¥›
 &&Üöe->
ns
) {

970 
	`°rˇt
 (
buf
,
löe
->
¥›
);

971 
	`°rˇt
 (
buf
," xmlns:ns=\"");

972 
	`°rˇt
 (
buf
,
löe
->
ns
);

973 
	`°rˇt
 (
buf
,"\">");

975  
NULL
;

977 i‡(
löe
->
cmd
==
SET
) {

978 
	`°rˇt
 (
buf
,(
löe
->
vÆ
)?line->val:"");

981 
	`°rˇt
 (
buf
,"</ns:");

982 
	`°rˇt
 (
buf
,
löe
->
¥›
);

983 
	`°rˇt
 (
buf
,">\n");

985 
	`°rˇt
 (
buf
," </D:prop>\n");

986 
	`°rˇt
 (
buf
,(
löe
->
cmd
==
SET
)?" </D:set>\n":" </D:remove>\n");

987 
	`°rˇt
 (
buf
,"</D:propertyupdate>");

989 
	`SåAŒocC›y
 (
body
,
buf
);

991  
body
;

993 
	}
}

997 
	$maö
 (
¨gc
, ** 
¨gv
)

999 
Aµ
 * 
≠p
 = 
NULL
;

1001 
≠p
 = 
	`Inô
();

1004 
	}
}

	@Library/Examples/post.c

19 
	~"WWWLib.h
"

20 
	~"WWWInô.h
"

22 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

24  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

25 
	}
}

27 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

29  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

30 
	}
}

32 
PRIVATE
 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

33 * 
∑øm
, 
°©us
)

36 
	`HTReque°_dñëe
(
ªque°
);

39 
	`HTProfûe_dñëe
();

41 
	`exô
(0);

42 
	}
}

44 
	$maö
 (
¨gc
, ** 
¨gv
)

46 
HTReque°
 * 
ªque°
 = 
NULL
;

47 
HTP¨ítAnch‹
 * 
§c
 = 
NULL
;

48 
HTAnch‹
 * 
d°
 = 
NULL
;

49 * 
d°_°r
 = 
NULL
;

50 * 
d©a
 = 
NULL
;

51 
BOOL
 
°©us
 = 
NO
;

54 
	`HTProfûe_√wNoCacheClõ¡
("libwww-POST", "1.0");

57 
	`HTPröt_£tCÆlback
(
¥öãr
);

58 
	`HTTø˚_£tCÆlback
(
åa˚r
);

61 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

64 i‡(
¨gc
 >= 3) {

65 
d°_°r
 = 
¨gv
[1];

66 
d©a
 = 
¨gv
[2];

68 
	`HTPröt
("TypeÅhe URI ofÅhe destination you wantÅo POSTÅoándÅhe contentsÅhat you wantÅoÖost.\n");

69 
	`HTPröt
("\t%†<de°ö©i⁄> <d©a>\n", 
¨gv
[0]);

70 
	`HTPröt
("ForÉxample, %s http://myserver/destination.html \"This is someÅestdata\"\n",

71 
¨gv
[0]);

75 i‡(
d©a
 && *d©®&& 
d°_°r
 && *dst_str) {

78 * 
cwd
 = 
	`HTGëCuºítDúe˘‹yURL
();

80 
	`HTPröt
("Po°ögÅÿ%s\n", 
d°_°r
);

83 
ªque°
 = 
	`HTReque°_√w
();

86 
d°
 = 
	`HTAnch‹_födAddªss
(
d°_°r
);

94 
§c
 = 
	`HTTmpAnch‹
(
NULL
);

95 
	`HTAnch‹_£tDocumít
(
§c
, 
d©a
);

96 
	`HTAnch‹_£tF‹m©
(
§c
, 
WWW_PLAINTEXT
);

103 
	`HTAnch‹_£tLígth
(
§c
, 
	`°æí
(
d©a
));

106 
°©us
 = 
	`HTPo°Anch‹
(
§c
, 
d°
, 
ªque°
);

109 
	`HT_FREE
(
cwd
);

112 i‡(
°©us
 =
YES
Ë
	`HTEvítLi°_lo›
(
ªque°
);

117 
	}
}

	@Library/Examples/postform.c

19 
	~"WWWLib.h
"

20 
	~"WWWInô.h
"

22 
PRIVATE
 
HTChunk
 * 
	gªsu…
 = 
NULL
;

24 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

26  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

27 
	}
}

29 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

31  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

32 
	}
}

34 
PRIVATE
 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

35 * 
∑øm
, 
°©us
)

37 i‡(
°©us
 =
HT_LOADED
 && 
ªsu…
 && 
	`HTChunk_d©a
(result)) {

38 
	`HTPröt
("%s", 
	`HTChunk_d©a
(
ªsu…
));

39 
	`HTChunk_dñëe
(
ªsu…
);

43 
	`HTReque°_dñëe
(
ªque°
);

46 
	`HTProfûe_dñëe
();

48 
	`exô
(0);

49 
	}
}

51 
	$maö
 (
¨gc
, ** 
¨gv
)

53 
HTReque°
 * 
ªque°
 = 
NULL
;

54 
HTAnch‹
 * 
™ch‹
 = 
NULL
;

55 
HTAssocLi°
 * 
f‹mfõlds
 = 
NULL
;

56 * 
uri
 = 
NULL
;

59 
	`HTProfûe_√wNoCacheClõ¡
("TestApp", "1.0");

62 
	`HTPröt_£tCÆlback
(
¥öãr
);

63 
	`HTTø˚_£tCÆlback
(
åa˚r
);

67 
	`HTSëTø˚MesßgeMask
("sop");

71 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

74 
	`HTHo°_£tEvítTimeout
(20000);

77 i‡(
¨gc
 >= 2) {

78 
¨g
;

79 
uri
 = 
¨gv
[1];

80 
¨g
=2;árg<
¨gc
;árg++) {

81 * 
°rög
 = 
¨gv
[
¨g
];

84 i‡(!
f‹mfõlds
Ëf‹mfõld†
	`HTAssocLi°_√w
();

87 
	`HTP¨£F‹mI≈ut
(
f‹mfõlds
, 
°rög
);

91 i‡(
uri
 && 
f‹mfõlds
) {

94 
ªque°
 = 
	`HTReque°_√w
();

97 
	`HTReque°_£tOuçutF‹m©
(
ªque°
, 
WWW_SOURCE
);

100 
™ch‹
 = 
	`HTAnch‹_födAddªss
(
uri
);

103 
ªsu…
 = 
	`HTPo°F‹mAnch‹ToChunk
(
f‹mfõlds
, 
™ch‹
, 
ªque°
);

106 
	`HTAssocLi°_dñëe
(
f‹mfõlds
);

109 
	`HTEvítLi°_lo›
(
ªque°
);

112 
	`HTPröt
("TypeÅhe URIÅoÖostÅoándÅheárguments forÅhe POST operation. Encode spacesás '+'\n");

113 
	`HTPröt
("\t%†<uri> 'a=1' 'b=+2+' 'c=3 ...'\n", 
¨gv
[0]);

117 
	}
}

	@Library/Examples/ptri.c

23 
	~"WWWLib.h
"

24 
	~"WWWInô.h
"

25 
	~"WWWXML.h
"

27 
PRIVATE
 
HTRDF
 * 
	grdf_∑r£r
 = 
NULL
;

33 
PRIVATE
 
	$√w_åùÀ_h™dÀr
 (
HTRDF
 * 
rdÂ
, 
HTTrùÀ
 * 
t
, * 
c⁄ãxt
)

35 i‡(
rdÂ
 && 
t
) {

36 
	`HTPröt
("ReceivedÇewÅriple:\n");

37 i‡(
	`HTTrùÀ_¥ediˇã
(
t
)Ë
	`HTPröt
("\tPredicate: `%s\'\n", HTTriple_predicate(t));

38 i‡(
	`HTTrùÀ_subje˘
(
t
)Ë
	`HTPröt
("\tSubject : `%s\'\n", HTTriple_subject(t));

39 i‡(
	`HTTrùÀ_obje˘
(
t
)Ë
	`HTPröt
("\tObject : `%s\'\n", HTTriple_object(t));

40 
	`HTPröt
("\n");

42 
	}
}

44 
PRIVATE
 
	$√w_∑r£r_h™dÀr
 (
HTSåóm
 * 
me
,

45 
HTReque°
 * 
ªque°
,

46 
HTF‹m©
 
èrgë_f‹m©
,

47 
HTSåóm
 * 
èrgë_°ªam
,

48 
HTRDF
 * 
rdÂ¨£r
,

49 * 
c⁄ãxt
)

51 
	`HTPröt
("Re˚ivedÇew RDFÖ¨£∏ö°™˚ %p\n", 
rdÂ¨£r
);

52 i‡(
rdÂ¨£r
) {

55 
rdf_∑r£r
 = 
rdÂ¨£r
;

58 
	`HTRDF_ªgi°îNewTrùÀCÆlback
 (
rdf_∑r£r
, 
√w_åùÀ_h™dÀr
, 
NULL
);

60 
	}
}

62 
PRIVATE
 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

63 * 
∑øm
, 
°©us
)

66 
	`HTReque°_dñëe
(
ªque°
);

69 
	`HTProfûe_dñëe
();

71 
	`exô
(0);

72 
	}
}

76 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

78  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

79 
	}
}

81 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

83  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

84 
	}
}

86 
	$maö
 (
¨gc
, ** 
¨gv
)

88 * 
uri
 = 
NULL
;

89 * 
cwd
 = 
	`HTGëCuºítDúe˘‹yURL
();

92 
	`HTProfûe_√wHTMLNoCacheClõ¡
 ("ParseRDF", "1.0");

95 
	`HTPröt_£tCÆlback
(
¥öãr
);

96 
	`HTTø˚_£tCÆlback
(
åa˚r
);

100 
	`HTSëTø˚MesßgeMask
("sopx");

104 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

107 
	`HTHo°_£tEvítTimeout
(15000);

110 i‡(
¨gc
 >2Ë
uri
 = 
	`HTP¨£
(
¨gv
[1], 
cwd
, 
PARSE_ALL
);

111 
	`HT_FREE
(
cwd
);

114 
	`HTF‹m©_addC⁄vîsi⁄
("ãxt/rdf", "*/*", 
HTRDFP¨£r_√w
, 1.0, 0.0, 0.0);

117 
	`HTRDF_ªgi°îNewP¨£rCÆlback
 (
√w_∑r£r_h™dÀr
, 
NULL
);

119 i‡(
uri
) {

120 
HTReque°
 * 
ªque°
 = 
	`HTReque°_√w
();

121 
HTAnch‹
 * 
™ch‹
 = 
	`HTAnch‹_födAddªss
(
uri
);

122 
BOOL
 
°©us
 = 
NO
;

125 
°©us
 = 
	`HTLﬂdAnch‹
(
™ch‹
, 
ªque°
);

128 i‡(
°©us
 =
YES
Ë
	`HTEvítLi°_lo›
(
ªque°
);

131 
	`HTPröt
("TypeÅhe URIÅoÖarse\n");

132 
	`HTPröt
("\t%†<uri>\n", 
¨gv
[0]);

133 
	`HTPröt
("ForÉxample:\n");

134 
	`HTPröt
("\t%†hâp://www.yoursôe.com/your.rdf\n", 
¨gv
[0]);

138 
	}
}

	@Library/Examples/put.c

19 
	~"WWWLib.h
"

20 
	~"WWWInô.h
"

22 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

24  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

25 
	}
}

27 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

29  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

30 
	}
}

32 
PRIVATE
 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

33 * 
∑øm
, 
°©us
)

36 
	`HTReque°_dñëe
(
ªque°
);

39 
	`HTProfûe_dñëe
();

41 
	`exô
(0);

42 
	}
}

44 
	$maö
 (
¨gc
, ** 
¨gv
)

46 
HTReque°
 * 
ªque°
 = 
NULL
;

47 
HTAnch‹
 * 
§c
 = 
NULL
;

48 
HTAnch‹
 * 
d°
 = 
NULL
;

49 * 
§c_°r
 = 
NULL
;

50 * 
d°_°r
 = 
NULL
;

51 
BOOL
 
°©us
 = 
NO
;

54 
	`HTProfûe_√wNoCacheClõ¡
("libwww-PUT", "1.0");

57 
	`HTPröt_£tCÆlback
(
¥öãr
);

58 
	`HTTø˚_£tCÆlback
(
åa˚r
);

62 
	`HTSëTø˚MesßgeMask
("sop");

66 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

69 i‡(
¨gc
 >= 3) {

70 
§c_°r
 = 
¨gv
[1];

71 
d°_°r
 = 
¨gv
[2];

73 
	`HTPröt
("TypeÅhe URI ofÅhe sourceándÅhe URI ofÅhe destination.\n");

74 
	`HTPröt
("\t%†<§c> <d°>\n", 
¨gv
[0]);

75 
	`HTPröt
("ForÉxample, %s http://www.w3.org http://myserver/destination.html\n",

76 
¨gv
[0]);

80 i‡(
§c_°r
 && *§c_°∏&& 
d°_°r
 && *dst_str) {

83 * 
cwd
 = 
	`HTGëCuºítDúe˘‹yURL
();

84 * 
fuŒ_§c_°r
 = 
	`HTP¨£
(
§c_°r
, 
cwd
, 
PARSE_ALL
);

86 
	`HTPröt
("Savög %†tÿ%s\n", 
fuŒ_§c_°r
, 
d°_°r
);

89 
ªque°
 = 
	`HTReque°_√w
();

92 
§c
 = 
	`HTAnch‹_födAddªss
(
fuŒ_§c_°r
);

93 
d°
 = 
	`HTAnch‹_födAddªss
(
d°_°r
);

96 
°©us
 = 
	`HTPutDocumítAnch‹
(
	`HTAnch‹_∑ª¡
(
§c
), 
d°
, 
ªque°
);

99 
	`HT_FREE
(
cwd
);

100 
	`HT_FREE
(
fuŒ_§c_°r
);

103 i‡(
°©us
 =
YES
Ë
	`HTEvítLi°_lo›
(
ªque°
);

108 
	}
}

	@Library/Examples/range.c

19 
	~"WWWLib.h
"

20 
	~"WWWInô.h
"

22 
PRIVATE
 
HTChunk
 * 
	gªsu…
 = 
NULL
;

24 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

26  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

27 
	}
}

29 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

31  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

32 
	}
}

34 
PRIVATE
 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

35 * 
∑øm
, 
°©us
)

37 i‡(
°©us
 =
HT_PARTIAL_CONTENT
) {

38 
HTAssocLi°
 * 
ønges
 = 
	`HTRe•⁄£_ønge
(
ª•⁄£
);

39 i‡(
ønges
) {

40 
HTAssoc
 * 
¥es
;

41 
BOOL
 
fú°
 = 
YES
;

42 (
¥es
 = (
HTAssoc
 *Ë
	`HTAssocLi°_√xtObje˘
(
ønges
))) {

43 i‡(
fú°
) {

44 
	`HTPröt
("RangesÑeceived: ");

45 
fú°
 = 
NO
;

47 
	`HTPröt
(", ");

48 
	`HTPröt
("%s %s",

49 
	`HTAssoc_vÆue
(
¥es
) ? HTAssoc_value(pres) : "<null>",

50 
	`HTAssoc_vÆue
(
¥es
Ë? 
	`HTAssoc_«me
(pres) : "<null>");

53 } i‡(
°©us
 =
HT_LOADED
)

54 
	`HTPröt
("TŸÆÜígth o‡documít: %ld", 
	`HTRe•⁄£_Àngth
(
ª•⁄£
));

56 i‡(
ªsu…
 && 
	`HTChunk_d©a
(result)) {

57 
	`Ârötf
(
°dout
, "%s", 
	`HTChunk_d©a
(
ªsu…
));

58 
	`HTChunk_dñëe
(
ªsu…
);

62 
	`HTReque°_dñëe
(
ªque°
);

65 
	`HTProfûe_dñëe
();

67 
	`exô
(0);

68 
	}
}

70 
	$maö
 (
¨gc
, ** 
¨gv
)

72 
HTReque°
 * 
ªque°
 = 
NULL
;

73 
HTAnch‹
 * 
™ch‹
 = 
NULL
;

74 * 
ønge_unô
 = 
NULL
;

75 
HTChunk
 * 
ønges
 = 
NULL
;

76 * 
uri
 = 
NULL
;

79 
	`HTProfûe_√wNoCacheClõ¡
("RangeApp", "1.0");

82 
	`HTPröt_£tCÆlback
(
¥öãr
);

83 
	`HTTø˚_£tCÆlback
(
åa˚r
);

86 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

90 
	`HTSëTø˚MesßgeMask
("sop");

92 
	`HTAÀπ_£tI¡îa˘ive
(
NO
);

95 
	`HTHo°_£tEvítTimeout
(15000);

98 i‡(
¨gc
 >= 3) {

99 
¨g
;

100 
uri
 = 
¨gv
[1];

101 
ønge_unô
 = 
¨gv
[2];

102 
¨g
=3;árg<
¨gc
;árg++) {

103 * 
ønge
 = 
¨gv
[
¨g
];

104 i‡(
ønge
) {

107 i‡(!
ønges
)

108 
ønges
 = 
	`HTChunk_√w
(64);

110 
	`HTChunk_putc
(
ønges
, ',');

111 
	`HTChunk_puts
(
ønges
, 
ønge
);

117 i‡(
uri
 && 
ønge_unô
 && 
ønges
) {

120 
ªque°
 = 
	`HTReque°_√w
();

123 
™ch‹
 = 
	`HTAnch‹_födAddªss
(
uri
);

126 
	`HTReque°_£tOuçutF‹m©
(
ªque°
, 
WWW_SOURCE
);

129 
	`HTReque°_addR™ge
(
ªque°
, 
ønge_unô
, 
	`HTChunk_d©a
(
ønges
));

132 
ªsu…
 = 
	`HTLﬂdAnch‹ToChunk
(
™ch‹
, 
ªque°
);

134 
	`HTChunk_dñëe
(
ønges
);

137 
	`HTEvítLi°_lo›
(
ªque°
);

140 
	`HTPröt
("TypeÅhe URIÅo getÅheÑange(s) from\n");

141 
	`HTPröt
("\t%†<uri> <ønge-unô> 1*‘™ge-£t)\n", 
¨gv
[0]);

142 
	`HTPröt
("where\n");

143 
	`HTPröt
("\trange-unit = bytes |Åoken\n");

144 
	`HTPröt
("\trange-set = (first-byte-pos - [last-byte-pos]) | - suffix-length\n");

145 
	`HTPröt
("ForÉxample:\n");

146 
	`HTPröt
("\t%†hâp://www.w3.‹g byã†\"0-499\" \"1000-1499\" \"-10\"\n", 
¨gv
[0]);

150 
	}
}

	@Library/Examples/rdf_parse_buffer.c

24 
	~"WWWXML.h
"

29 
PRIVATE
 
	$√w_åùÀ_h™dÀr
 (
HTRDF
 * 
rdÂ
, 
HTTrùÀ
 * 
t
, * 
c⁄ãxt
)

31 i‡(
rdÂ
 && 
t
) {

32 
	`HTPröt
("ReceivedÇewÅriple:\n");

33 i‡(
	`HTTrùÀ_¥ediˇã
(
t
)Ë
	`HTPröt
("\tPredicate: `%s\'\n", HTTriple_predicate(t));

34 i‡(
	`HTTrùÀ_subje˘
(
t
)Ë
	`HTPröt
("\tSubject : `%s\'\n", HTTriple_subject(t));

35 i‡(
	`HTTrùÀ_obje˘
(
t
)Ë
	`HTPröt
("\tObject : `%s\'\n", HTTriple_object(t));

36 
	`HTPröt
("\n");

38 
	}
}

50 
PRIVATE
 * 
	$∑r£_buf„r
(c⁄° *
fûe_«me
, **
ªt_buff
, *
ªt_Àngth
)

52 
tmp_buff
[512];

53 
FILE
 *
Â
;

55 *
ªt_buff
 = 
NULL
;

56 *
ªt_Àngth
 = 0;

59 
Â
 = 
	`f›í
 (
fûe_«me
, "r");

60 i‡(!
Â
)

64 
d⁄e
;

65 
buff_Àn
;

67 (Ë
	`fgës
(
tmp_buff
, —mp_buff), 
Â
);

68 i‡(
	`„º‹
(
Â
)) {

69 (Ë
	`f˛o£
 (
Â
);

72 
d⁄e
 = 
	`„of
(
Â
);

73 i‡(
d⁄e
)

74 
buff_Àn
 = 0;

76 
buff_Àn
 = 
	`°æí
 (
tmp_buff
);

77 *
ªt_Àngth
 = *ªt_Àngth + 
buff_Àn
;

78 i‡(*
ªt_buff
 =
NULL
)

80 i‡(
buff_Àn
 > 0) {

81 *
ªt_buff
 = 
	`HT_MALLOC
(
buff_Àn
 + 1);

82 i‡(!*
ªt_buff
) {

83 (Ë
	`f˛o£
 (
Â
);

86 (Ë
	`°r˝y
 (*
ªt_buff
, 
tmp_buff
);

89 i‡(
buff_Àn
 > 0) {

90 *
ªt_buff
 = 
	`HT_REALLOC
(*ªt_buff, (*
ªt_Àngth
) + 1);

91 i‡(!*
ªt_buff
) {

92 (Ë
	`f˛o£
 (
Â
);

95 (Ë
	`°rˇt
 (*
ªt_buff
, 
tmp_buff
);

98 i‡(
d⁄e
)

103 (Ë
	`f˛o£
 (
Â
);

104 
	}
}

111 
	$maö
 (
¨gc
, ** 
¨gv
)

113 
BOOL
 
°©us
;

114 *
msg
;

115 *
buf„r
 = 
NULL
;

116 
buff_Àn
 = 0;

117 
i
;

119 i‡(
¨gc
 <= 1) {

120 (Ë
	`Ârötf
(
°dîr
, "Ußge: %†fûe_«me(s)_to_∑r£\n", 
¨gv
[0]);

124 
i
=1; i < 
¨gc
; i++) {

125 
msg
 = 
	`∑r£_buf„r
(
¨gv
[
i
], &
buf„r
, &
buff_Àn
);

126 i‡(!
msg
) {

127 
°©us
 = 
	`HTRDF_∑r£Buf„r
(
buf„r
, 
¨gv
[
i
], 
buff_Àn
, 
√w_åùÀ_h™dÀr
, 
NULL
);

128 i‡(!
°©us
)

129 (Ë
	`Ârötf
 (
°dîr
, "ERRORÖ¨sögÅhêbuf„∏‰om fûe: '%s'\n", 
¨gv
[
i
]);

132 (Ë
	`Ârötf
 (
°dîr
, "ERROR cª©ögÅhêbuf„r: '%s'\n", 
msg
);

136 
	}
}

	@Library/Examples/rdf_parse_file.c

25 
	~"WWWXML.h
"

30 
PRIVATE
 
	$√w_åùÀ_h™dÀr
 (
HTRDF
 * 
rdÂ
, 
HTTrùÀ
 * 
t
, * 
c⁄ãxt
)

32 i‡(
rdÂ
 && 
t
) {

33 
	`HTPröt
("ReceivedÇewÅriple:\n");

34 i‡(
	`HTTrùÀ_¥ediˇã
(
t
)Ë
	`HTPröt
("\tPredicate: `%s\'\n", HTTriple_predicate(t));

35 i‡(
	`HTTrùÀ_subje˘
(
t
)Ë
	`HTPröt
("\tSubject : `%s\'\n", HTTriple_subject(t));

36 i‡(
	`HTTrùÀ_obje˘
(
t
)Ë
	`HTPröt
("\tObject : `%s\'\n", HTTriple_object(t));

37 
	`HTPröt
("\n");

39 
	}
}

45 
	$maö
 (
¨gc
, ** 
¨gv
)

47 
BOOL
 
°©us
;

48 
i
;

50 i‡(
¨gc
 <= 1) {

51 (Ë
	`Ârötf
(
°dîr
, "Ußge: %†fûe_«me(s)_to_∑r£\n", 
¨gv
[0]);

55 
i
=1; i < 
¨gc
; i++) {

56 
°©us
 = 
	`HTRDF_∑r£Fûe
(
¨gv
[
i
], 
√w_åùÀ_h™dÀr
, 
NULL
);

57 i‡(!
°©us
)

58 (Ë
	`Ârötf
 (
°dîr
, "A¿îr‹ occuªdÖ¨sög: '%s'\n", 
¨gv
[
i
]);

62 
	}
}

	@Library/Examples/showlinks.c

19 
	~"WWWLib.h
"

20 
	~"WWWInô.h
"

21 
	~"WWWHTML.h
"

23 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

25  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

26 
	}
}

28 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

30  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

31 
	}
}

33 
PRIVATE
 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

34 * 
∑øm
, 
°©us
)

37 
	`HTReque°_dñëe
(
ªque°
);

40 
	`HTProfûe_dñëe
();

42 
	`exô
(0);

43 
	}
}

45 
PRIVATE
 
	$foundLök
 (
HText
 * 
ãxt
,

46 
ñemít_numbî
, 
©åibuã_numbî
,

47 
HTChûdAnch‹
 * 
™ch‹
,

48 c⁄° 
BOOL
 * 
¥e£¡
, c⁄° ** 
vÆue
)

50 i‡(
™ch‹
) {

56 
HTAnch‹
 * 
de°
 = 
	`HTAnch‹_fﬁlowMaöLök
((HTAnch‹ *Ë
™ch‹
);

57 * 
addªss
 = 
	`HTAnch‹_addªss
(
de°
);

58 
	`HTPröt
("FoundÜök `%s\'\n", 
addªss
);

59 
	`HT_FREE
(
addªss
);

61 
	}
}

63 
	$maö
 (
¨gc
, ** 
¨gv
)

65 * 
uri
 = 
NULL
;

68 
	`HTProfûe_√wHTMLNoCacheClõ¡
 ("ShowLinks", "1.0");

71 
	`HTPröt_£tCÆlback
(
¥öãr
);

72 
	`HTTø˚_£tCÆlback
(
åa˚r
);

76 
	`HTSëTø˚MesßgeMask
("sop");

80 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

87 
	`HText_ªgi°îLökCÆlback
(
foundLök
);

90 
	`HTHo°_£tEvítTimeout
(15000);

93 i‡(
¨gc
 >= 2)

94 
uri
 = 
	`HTP¨£
(
¨gv
[1], 
NULL
, 
PARSE_ALL
);

96 i‡(
uri
) {

97 
HTReque°
 * 
ªque°
 = 
NULL
;

98 
HTAnch‹
 * 
™ch‹
 = 
NULL
;

99 
BOOL
 
°©us
 = 
NO
;

102 
ªque°
 = 
	`HTReque°_√w
();

105 
™ch‹
 = 
	`HTAnch‹_födAddªss
(
uri
);

108 
°©us
 = 
	`HTLﬂdAnch‹
(
™ch‹
, 
ªque°
);

111 i‡(
°©us
 =
YES
Ë
	`HTEvítLi°_lo›
(
ªque°
);

114 
	`HTPröt
("TypeÅhe URIÅoÖrint outáÜist ofÉmbeddedÜinks\n");

115 
	`HTPröt
("\t%†<uri>\n", 
¨gv
[0]);

116 
	`HTPröt
("ForÉxample:\n");

117 
	`HTPröt
("\t%†hâp://www.w3.‹g\n", 
¨gv
[0]);

121 
	}
}

	@Library/Examples/showtags.c

19 
	~"WWWLib.h
"

20 
	~"WWWInô.h
"

21 
	~"WWWHTML.h
"

23 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

25  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

26 
	}
}

28 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

30  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

31 
	}
}

33 
PRIVATE
 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

34 * 
∑øm
, 
°©us
)

37 
	`HTReque°_dñëe
(
ªque°
);

40 
	`HTProfûe_dñëe
();

42 
	`exô
(0);

43 
	}
}

45 
PRIVATE
 
	$begöEÀmít
 (
HText
 * 
ãxt
,

46 
ñemít_numbî
,

47 c⁄° 
BOOL
 * 
¥e£¡
,

48 c⁄° ** 
vÆue
)

50 
SGML_dtd
 * 
dtd
 = 
	`HTML_dtd
();

51 
HTTag
 * 
èg
 = 
	`SGML_födTag
(
dtd
, 
ñemít_numbî
);

52 i‡(
èg
) {

53 * 
èg«me
 = 
	`HTTag_«me
(
èg
);

54 
max˙t
 = 
	`HTTag_©åibuãs
(
èg
);

55 
BOOL
 
found
 = 
NO
;

56 
˙t
;

57 
	`HTPröt
("BeginÉlement: <%s> witháttributes:",

58 
èg«me
 ?Åagname : "<unknown>");

59 
˙t
=0; c¡<
max˙t
; cnt++) {

60 i‡(
¥e£¡
[
˙t
]) {

61 * 
©å«me
 = 
	`HTTag_©åibuãName
(
èg
, 
˙t
);

62 
found
 = 
YES
;

63 
	`HTPröt
(" %s", 
©å«me
 ?áttrname : "<unknown>");

64 i‡(
vÆue
[
˙t
]Ë
	`HTPröt
("=\"%s\"", value[cnt]);

67 i‡(!
found
Ë
	`HTPröt
("Çone");

69 
	`HTPröt
("\n");

70 
	}
}

72 
PRIVATE
 
	$ídEÀmít
 (
HText
 * 
ãxt
, 
ñemít_numbî
)

74 
SGML_dtd
 * 
dtd
 = 
	`HTML_dtd
();

75 * 
èg«me
 = 
	`SGML_födTagName
(
dtd
, 
ñemít_numbî
);

76 
	`HTPröt
("EndÉÀmít: </%s>\n", 
èg«me
 ?Åagname : "<unknown>");

77 
	}
}

79 
PRIVATE
 
	$u≈¨£dBegöEÀmít
 (
HText
 * 
ãxt
, c⁄° * 
buf
, 
Àn
)

81 i‡(
buf
Ë
	`HTPröt
("Unknown begin: <%s>\n", buf);

82 
	}
}

84 
PRIVATE
 
	$u≈¨£dEndEÀmít
 (
HText
 * 
ãxt
, c⁄° * 
buf
, 
Àn
)

86 i‡(
buf
Ë
	`HTPröt
("UnknownÉnd: </%s>\n", buf);

87 
	}
}

89 
	$maö
 (
¨gc
, ** 
¨gv
)

91 * 
uri
 = 
NULL
;

94 
	`HTProfûe_√wHTMLNoCacheClõ¡
 ("ShowTags", "1.0");

97 
	`HTPröt_£tCÆlback
(
¥öãr
);

98 
	`HTTø˚_£tCÆlback
(
åa˚r
);

101 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

108 
	`HText_ªgi°îEÀmítCÆlback
(
begöEÀmít
, 
ídEÀmít
);

109 
	`HText_ªgi°îU≈¨£dEÀmítCÆlback
(
u≈¨£dBegöEÀmít
,

110 
u≈¨£dEndEÀmít
);

114 
	`HTSëTø˚MesßgeMask
("sop");

116 
	`HTAÀπ_£tI¡îa˘ive
(
NO
);

119 
	`HTHo°_£tEvítTimeout
(15000);

122 i‡(
¨gc
 >= 2)

123 
uri
 = 
	`HTP¨£
(
¨gv
[1], 
NULL
, 
PARSE_ALL
);

125 i‡(
uri
) {

126 
HTReque°
 * 
ªque°
 = 
NULL
;

127 
HTAnch‹
 * 
™ch‹
 = 
NULL
;

128 
BOOL
 
°©us
 = 
NO
;

131 
ªque°
 = 
	`HTReque°_√w
();

134 
™ch‹
 = 
	`HTAnch‹_födAddªss
(
uri
);

137 
°©us
 = 
	`HTLﬂdAnch‹
(
™ch‹
, 
ªque°
);

140 i‡(
°©us
 =
YES
Ë
	`HTEvítLi°_lo›
(
ªque°
);

143 
	`HTPröt
("TypeÅhe URIÅoÖrint outáÜist ofÉmbeddedÜinks\n");

144 
	`HTPröt
("\t%†<uri>\n", 
¨gv
[0]);

145 
	`HTPröt
("ForÉxample:\n");

146 
	`HTPröt
("\t%†hâp://www.w3.‹g\n", 
¨gv
[0]);

150 
	}
}

	@Library/Examples/showtext.c

19 
	~"WWWLib.h
"

20 
	~"WWWInô.h
"

21 
	~"WWWHTML.h
"

23 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

25  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

26 
	}
}

28 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

30  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

31 
	}
}

33 
PRIVATE
 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

34 * 
∑øm
, 
°©us
)

37 
	`HTReque°_dñëe
(
ªque°
);

40 
	`HTProfûe_dñëe
();

42 
	`exô
(0);

43 
	}
}

45 
PRIVATE
 
	$addText
 (
HText
 * 
ãxt
, c⁄° * 
buf
, 
Àn
)

47 i‡(
buf
Ë
	`fwrôe
(buf, 1, 
Àn
, 
°dout
);

48 
	}
}

50 
	$maö
 (
¨gc
, ** 
¨gv
)

52 * 
uri
 = 
NULL
;

55 
	`HTProfûe_√wHTMLNoCacheClõ¡
 ("ShowTags", "1.0");

58 
	`HTPröt_£tCÆlback
(
¥öãr
);

59 
	`HTTø˚_£tCÆlback
(
åa˚r
);

63 
	`HTSëTø˚MesßgeMask
("sop");

67 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

74 
	`HText_ªgi°îTextCÆlback
(
addText
);

77 
	`HTHo°_£tEvítTimeout
(15000);

80 i‡(
¨gc
 >= 2)

81 
uri
 = 
	`HTP¨£
(
¨gv
[1], 
NULL
, 
PARSE_ALL
);

83 i‡(
uri
) {

84 
HTReque°
 * 
ªque°
 = 
NULL
;

85 
HTAnch‹
 * 
™ch‹
 = 
NULL
;

86 
BOOL
 
°©us
 = 
NO
;

89 
ªque°
 = 
	`HTReque°_√w
();

92 
™ch‹
 = 
	`HTAnch‹_födAddªss
(
uri
);

95 
°©us
 = 
	`HTLﬂdAnch‹
(
™ch‹
, 
ªque°
);

98 i‡(
°©us
 =
YES
Ë
	`HTEvítLi°_lo›
(
ªque°
);

101 
	`¥ötf
("TypeÅhe URIÅoÖrint outáÜist ofÉmbeddedÜinks\n");

102 
	`¥ötf
("\t%†<uri>\n", 
¨gv
[0]);

103 
	`¥ötf
("ForÉxample:\n");

104 
	`¥ötf
("\t%†hâp://www.w3.‹g\n", 
¨gv
[0]);

108 
	}
}

	@Library/Examples/showxml.c

19 
	~"WWWLib.h
"

20 
	~"WWWInô.h
"

21 
	~"WWWXML.h
"

27 
PRIVATE
 
	$XML_°¨tEÀmít
 (* 
u£rD©a
,

28 c⁄° 
XML_Ch¨
 * 
«me
, c⁄° XML_Ch¨ ** 
©ts
)

30 
	`HTPröt
("Sèπ....... %s\n", 
«me
 ?Çame : "<null>");

31 
	}
}

33 
PRIVATE
 
	$XML_ídEÀmít
 (* 
u£rD©a
,

34 c⁄° 
XML_Ch¨
 * 
«me
)

36 
	`HTPröt
("End......... %s\n", 
«me
 ?Çame : "<null>");

37 
	}
}

39 
PRIVATE
 
	$XML_ch¨a˘îD©a
 (* 
u£rD©a
,

40 c⁄° 
XML_Ch¨
 * 
s
, 
Àn
)

43 
	}
}

45 
PRIVATE
 
	$XML_¥o˚ssögIn°ru˘i⁄
 (* 
u£rD©a
,

46 c⁄° 
XML_Ch¨
 * 
èrgë
,

47 c⁄° 
XML_Ch¨
 * 
d©a
)

50 
	}
}

67 
PRIVATE
 
	$XML_deÁu…
 (* 
u£rD©a
,

68 c⁄° 
XML_Ch¨
 * 
s
, 
Àn
)

71 
	}
}

79 
PRIVATE
 
	$XML_u≈¨£dE¡ôyDe˛
 (* 
u£rD©a
,

80 c⁄° 
XML_Ch¨
 * 
ítôyName
,

81 c⁄° 
XML_Ch¨
 * 
ba£
,

82 c⁄° 
XML_Ch¨
 * 
sy°emId
,

83 c⁄° 
XML_Ch¨
 * 
publicId
,

84 c⁄° 
XML_Ch¨
 * 
nŸ©i⁄Name
)

87 
	}
}

94 
PRIVATE
 
	$XML_nŸ©i⁄De˛
 (* 
u£rD©a
,

95 c⁄° 
XML_Ch¨
 * 
nŸ©i⁄Name
,

96 c⁄° 
XML_Ch¨
 * 
ba£
,

97 c⁄° 
XML_Ch¨
 * 
sy°emId
,

98 c⁄° 
XML_Ch¨
 * 
publicId
)

101 
	}
}

129 
PRIVATE
 
	$XML_exã∫ÆE¡ôyRef
 (
XML_P¨£r
 
∑r£r
,

130 c⁄° 
XML_Ch¨
 * 
›íE¡ôyNames
,

131 c⁄° 
XML_Ch¨
 * 
ba£
,

132 c⁄° 
XML_Ch¨
 * 
sy°emId
,

133 c⁄° 
XML_Ch¨
 * 
publicId
)

136 
	}
}

150 
PRIVATE
 
	$XML_unknownEncodög
 (* 
ícodögH™dÀrD©a
,

151 c⁄° 
XML_Ch¨
 * 
«me
,

152 
XML_Encodög
 * 
öfo
)

155 
	}
}

161 
PRIVATE
 
	$HTXML_£tH™dÀrs
 (
XML_P¨£r
 
me
)

163 
	`XML_SëEÀmítH™dÀr
(
me
, 
XML_°¨tEÀmít
, 
XML_ídEÀmít
);

164 
	`XML_SëCh¨a˘îD©aH™dÀr
(
me
, 
XML_ch¨a˘îD©a
);

165 
	`XML_SëPro˚ssögIn°ru˘i⁄H™dÀr
(
me
, 
XML_¥o˚ssögIn°ru˘i⁄
);

166 
	`XML_SëDeÁu…H™dÀr
(
me
, 
XML_deÁu…
);

167 
	`XML_SëU≈¨£dE¡ôyDe˛H™dÀr
(
me
, 
XML_u≈¨£dE¡ôyDe˛
);

168 
	`XML_SëNŸ©i⁄De˛H™dÀr
(
me
, 
XML_nŸ©i⁄De˛
);

169 
	`XML_SëExã∫ÆE¡ôyRefH™dÀr
(
me
, 
XML_exã∫ÆE¡ôyRef
);

170 
	`XML_SëUnknownEncodögH™dÀr
(
me
, 
XML_unknownEncodög
, 
NULL
);

171 
	}
}

173 
PRIVATE
 
	$HTXML_√wIn°™˚
 (
HTSåóm
 * 
me
,

174 
HTReque°
 * 
ªque°
,

175 
HTF‹m©
 
èrgë_f‹m©
,

176 
HTSåóm
 * 
èrgë_°ªam
,

177 
XML_P¨£r
 
xmÕ¨£r
,

178 * 
c⁄ãxt
)

180 i‡(
me
 && 
xmÕ¨£r
Ë
	`HTXML_£tH™dÀrs
(xmlparser);

181 
	}
}

187 
PRIVATE
 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

188 * 
∑øm
, 
°©us
)

191 
	`HTReque°_dñëe
(
ªque°
);

193 
	`HTPröt
("If you didn't seeányÅagsÅhen it isÜikelyÅhat your document wasn't xml\n");

196 
	`HTProfûe_dñëe
();

198 
	`exô
(0);

199 
	}
}

203 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

205  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

206 
	}
}

208 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

210  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

211 
	}
}

213 
	$maö
 (
¨gc
, ** 
¨gv
)

215 * 
uri
 = 
NULL
;

218 
	`HTProfûe_√wHTMLNoCacheClõ¡
 ("ShowXML", "1.0");

221 
	`HTPröt_£tCÆlback
(
¥öãr
);

222 
	`HTTø˚_£tCÆlback
(
åa˚r
);

226 
	`HTSëTø˚MesßgeMask
("sop");

230 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

233 
	`HTXMLCÆlback_ªgi°îNew
 (
HTXML_√wIn°™˚
, 
NULL
);

236 
	`HTHo°_£tEvítTimeout
(15000);

239 i‡(
¨gc
 >= 2)

240 
uri
 = 
	`HTP¨£
(
¨gv
[1], 
NULL
, 
PARSE_ALL
);

242 i‡(
uri
) {

243 
HTReque°
 * 
ªque°
 = 
NULL
;

244 
HTAnch‹
 * 
™ch‹
 = 
NULL
;

245 
BOOL
 
°©us
 = 
NO
;

248 
ªque°
 = 
	`HTReque°_√w
();

251 
™ch‹
 = 
	`HTAnch‹_födAddªss
(
uri
);

254 
°©us
 = 
	`HTLﬂdAnch‹
(
™ch‹
, 
ªque°
);

257 i‡(
°©us
 =
YES
Ë
	`HTEvítLi°_lo›
(
ªque°
);

260 
	`HTPröt
("TypeÅhe URIÅoÖarse\n");

261 
	`HTPröt
("\t%†<uri>\n", 
¨gv
[0]);

262 
	`HTPröt
("ForÉxample:\n");

263 
	`HTPröt
("\t%†hâp://www.yoursôe.com/your.xml\n", 
¨gv
[0]);

267 
	}
}

	@Library/Examples/stri.c

22 
	~"WWWLib.h
"

23 
	~"WWWInô.h
"

24 
	~"WWWXML.h
"

30 
PRIVATE
 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

31 * 
∑øm
, 
°©us
)

35 
	`HTReque°_dñëe
(
ªque°
);

38 
	`HTProfûe_dñëe
();

40 
	`exô
(0);

41 
	}
}

45 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

47  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

48 
	}
}

50 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

52  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

53 
	}
}

55 
	$maö
 (
¨gc
, ** 
¨gv
)

57 * 
uri
 = 
NULL
;

58 * 
cwd
 = 
	`HTGëCuºítDúe˘‹yURL
();

61 
	`HTProfûe_√wHTMLNoCacheClõ¡
 ("ShowRDFTriples", "1.0");

64 
	`HTPröt_£tCÆlback
(
¥öãr
);

65 
	`HTTø˚_£tCÆlback
(
åa˚r
);

69 
	`HTSëTø˚MesßgeMask
("sopx");

73 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

76 
	`HTHo°_£tEvítTimeout
(15000);

79 
	`HTF‹m©_addC⁄vîsi⁄
("ãxt/rdf", "*/*", 
HTRDFToTrùÀs
, 1.0, 0.0, 0.0);

82 i‡(
¨gc
 >2Ë
uri
 = 
	`HTP¨£
(
¨gv
[1], 
cwd
, 
PARSE_ALL
);

83 
	`HT_FREE
(
cwd
);

85 i‡(
uri
) {

86 
HTReque°
 * 
ªque°
 = 
	`HTReque°_√w
();

87 
HTAnch‹
 * 
™ch‹
 = 
	`HTAnch‹_födAddªss
(
uri
);

88 
BOOL
 
°©us
 = 
NO
;

91 
	`HTReque°_£tOuçutSåóm
(
ªque°
, 
	`HTFWrôî_√w
‘eque°, 
°dout
, 
NO
));

94 
°©us
 = 
	`HTLﬂdAnch‹
(
™ch‹
, 
ªque°
);

97 i‡(
°©us
 =
YES
Ë
	`HTEvítLi°_lo›
(
ªque°
);

100 
	`HTPröt
("TypeÅhe URIÅoÖarse\n");

101 
	`HTPröt
("\t%†<uri>\n", 
¨gv
[0]);

102 
	`HTPröt
("ForÉxample:\n");

103 
	`HTPröt
("\t%†hâp://www.yoursôe.com/your.rdf\n", 
¨gv
[0]);

107 
	}
}

	@Library/Examples/tiny.c

26 
	~"WWWLib.h
"

27 
	~"WWWMIME.h
"

28 
	~"WWWHTTP.h
"

30 
	~"HTTCP.h
"

31 
	~"HTSockë.h
"

32 
	~"HTRódî.h
"

33 
	~"HTWrôî.h
"

34 
	~"HTBufWπ.h
"

36 
	~"HTML.h
"

37 
	~"HText.h
"

39 
	~"HTEvtL°.h
"

41 #i‚de‡
W3C_VERSION


42 
	#W3C_VERSION
 "Un•ecifõd"

	)

45 
	#APP_NAME
 "w3c-töy"

	)

46 
	#APP_VERSION
 
W3C_VERSION


	)

48 
	#DEFAULT_HOME
 "hâp://www.w3.‹g/Libøry/"

	)

50 
	s_HText
 {

51 
HTP¨ítAnch‹
 * 
	m∑ª¡
;

52 
HTLi°
 * 
	mkids
;

55 
	s_Aµ
 {

56 
HTReque°
 * 
	mc⁄sﬁe_ªque°
;

57 
HTEvít
 * 
	mc⁄sﬁe_evít
;

58 
HTLi°
 * 
	ma˘ive
;

59 
HText
 * 
	mcuºít
;

60 } 
	tAµ
;

62 
PRIVATE
 
HTLi°
 * 
	gdocumíts
 = 
NULL
;

64 
PRIVATE
 
HTEvítCÆlback
 
	gc⁄sﬁe_∑r£r
;

65 
PRIVATE
 
HTNëA·î
 
	gªque°_ãrmö©î
;

68 
PRIVATE
 
HText_√w
 
	gãxt_√w
;

69 
PRIVATE
 
HText_dñëe
 
	gãxt_dñëe
;

70 
PRIVATE
 
HText_buûd
 
	gãxt_buûd
;

71 
PRIVATE
 
HText_foundLök
 
	gãxt_lök
;

72 
PRIVATE
 
HText_addText
 
	gãxt_add
;

78 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

80  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

81 
	}
}

83 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

85  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

86 
	}
}

88 
PRIVATE
 
	$mime_£tup
 ()

91 * 
°rög
;

92 
HTP¨£rCÆlback
 * 
pH™dÀr
;

93 } 
fixedH™dÀrs
[] = {

94 {"ac˚±", &
HTMIME_ac˚±
},

95 {"ac˚±-ch¨£t", &
HTMIME_ac˚±Ch¨£t
},

96 {"ac˚±-ícodög", &
HTMIME_ac˚±Encodög
},

97 {"ac˚±-œnguage", &
HTMIME_ac˚±L™guage
},

98 {"ac˚±-ønges", &
HTMIME_ac˚±R™ges
},

99 {"auth‹iz©i⁄", 
NULL
},

100 {"ˇche-c⁄åﬁ", &
HTMIME_ˇcheC⁄åﬁ
},

101 {"c⁄√˘i⁄", &
HTMIME_c⁄√˘i⁄
},

102 {"c⁄ã¡-ícodög", &
HTMIME_c⁄ã¡Encodög
},

103 {"c⁄ã¡-Àngth", &
HTMIME_c⁄ã¡Lígth
},

104 {"c⁄ã¡-ønge", &
HTMIME_c⁄ã¡R™ge
},

105 {"c⁄ã¡-å™s„r-ícodög", &
HTMIME_c⁄ã¡Tøns„rEncodög
},

106 {"c⁄ã¡-ty≥", &
HTMIME_c⁄ã¡Ty≥
},

107 {"dige°-MesßgeDige°", &
HTMIME_mesßgeDige°
},

108 {"kìp-Æive", &
HTMIME_kìpAlive
},

109 {"lök", &
HTMIME_lök
},

110 {"loˇti⁄", &
HTMIME_loˇti⁄
},

111 {"max-f‹w¨ds", &
HTMIME_maxF‹w¨ds
},

112 {"mime-vîsi⁄", 
NULL
},

113 {"¥agma", &
HTMIME_¥agma
},

114 {"¥Ÿocﬁ", &
HTMIME_¥Ÿocﬁ
},

115 {"¥Ÿocﬁ-öfo", &
HTMIME_¥ŸocﬁInfo
},

116 {"¥Ÿocﬁ-ªque°", &
HTMIME_¥ŸocﬁReque°
},

117 {"¥oxy-authítiˇã", &
HTMIME_authítiˇã
},

118 {"¥oxy-auth‹iz©i⁄", &
HTMIME_¥oxyAuth‹iz©i⁄
},

119 {"public", &
HTMIME_public
},

120 {"ønge", &
HTMIME_ønge
},

121 {"ª„ªr", &
HTMIME_ª„ªr
},

122 {"ªåy-a·î", &
HTMIME_ªåyA·î
},

123 {"£rvî", &
HTMIME_£rvî
},

124 {"åaûî", &
HTMIME_åaûî
},

125 {"å™s„r-ícodög", &
HTMIME_å™s„rEncodög
},

126 {"upgøde", &
HTMIME_upgøde
},

127 {"u£r-agít", &
HTMIME_u£rAgít
},

128 {"v¨y", &
HTMIME_v¨y
},

129 {"vü", &
HTMIME_vü
},

130 {"w¨nög", &
HTMIME_w¨nög
},

131 {"www-authítiˇã", &
HTMIME_authítiˇã
},

132 {"authítiˇti⁄-öfo", &
HTMIME_authítiˇti⁄Info
},

133 {"¥oxy-authítiˇti⁄-öfo", &
HTMIME_¥oxyAuthítiˇti⁄Info
}

135 
i
;

136 
i
 = 0; i < (
fixedH™dÀrs
)/(fixedHandlers[0]); i++)

137 
	`HTHódî_addP¨£r
(
fixedH™dÀrs
[
i
].
°rög
, 
NO
,

138 
fixedH™dÀrs
[
i
].
pH™dÀr
);

139 
	}
}

145 
PRIVATE
 
	$libwww_£tup
 ()

148 
	`HTTøn•‹t_add
("buf„ªd_t˝", 
HT_TP_SINGLE
, 
HTRódî_√w
, 
HTBuf„rWrôî_√w
);

151 
	`HTPrŸocﬁ_add
("hâp", "buf„ªd_t˝", 80, 
NO
, 
HTLﬂdHTTP
, 
NULL
);

154 
	`HTF‹m©_addTøns„rCodög
("chunked", 
HTChunkedEncodî
, 
HTChunkedDecodî
, 1.0);

157 
	`HTF‹m©_addC⁄vîsi⁄
("mesßge/rfc822", "*/*", 
HTMIMEC⁄vît
, 1.0, 0.0, 0.0);

158 
	`HTF‹m©_addC⁄vîsi⁄
("mesßge/x-rfc822-foŸ", "*/*", 
HTMIMEFoŸî
, 1.0, 0.0, 0.0);

159 
	`HTF‹m©_addC⁄vîsi⁄
("mesßge/x-rfc822-hód", "*/*", 
HTMIMEHódî
, 1.0, 0.0, 0.0);

160 
	`HTF‹m©_addC⁄vîsi⁄
("mesßge/x-rfc822-c⁄t", "*/*", 
HTMIMEC⁄töue
, 1.0, 0.0, 0.0);

161 
	`HTF‹m©_addC⁄vîsi⁄
("mesßge/x-rfc822-∑πül","*/*", 
HTMIMEP¨tül
, 1.0, 0.0, 0.0);

162 
	`HTF‹m©_addC⁄vîsi⁄
("mu…ù¨t/*", "*/*", 
HTBound¨y
, 1.0, 0.0, 0.0);

165 
	`HTF‹m©_addC⁄vîsi⁄
("ãxt/x-hâp", "*/*", 
HTTPSètus_√w
, 1.0, 0.0, 0.0);

168 
	`HTF‹m©_addC⁄vîsi⁄
("ãxt/html", "www/¥e£¡", 
HTMLPª£¡
, 1.0, 0.0, 0.0);

171 
	`HTF‹m©_addC⁄vîsi⁄
("*/*", "www/debug", 
HTBœckHﬁeC⁄vîãr
, 1.0, 0.0, 0.0);

172 
	`HTF‹m©_addC⁄vîsi⁄
("*/*", "www/¥e£¡", 
HTBœckHﬁeC⁄vîãr
, 0.3, 0.0, 0.0);

175 
	`HTNë_£tMaxSockë
(32);

178 
	`HText_ªgi°îCDCÆlback
 (
ãxt_√w
, 
ãxt_dñëe
);

179 
	`HText_ªgi°îBuûdCÆlback
 (
ãxt_buûd
);

180 
	`HText_ªgi°îTextCÆlback
(
ãxt_add
);

181 
	`HText_ªgi°îLökCÆlback
 (
ãxt_lök
);

184 
	`mime_£tup
();

187 
	`HTEvítInô
();

189 
	}
}

191 
PRIVATE
 
	$libwww_ãrmö©e
 ()

194 
	`HTF‹m©_dñëeAŒ
();

197 
	`HTLibTîmö©e
();

198 
	}
}

204 
PRIVATE
 
HText
 * 
	$ãxt_√w
 (
HTReque°
 * 
ªque°
,

205 
HTP¨ítAnch‹
 * 
™ch‹
,

206 
HTSåóm
 * 
ouçut_°ªam
)

208 
Aµ
 * 
≠p
 = (Aµ *Ë
	`HTReque°_c⁄ãxt
(
ªque°
);

209 
HText
 * 
me
;

210 i‡((
me
 = (
HText
 *Ë
	`HT_CALLOC
(1, (HText))Ë=
NULL
)

211 
	`HT_OUTOFMEM
("HText_new");

212 
me
->
∑ª¡
 = 
™ch‹
;

215 i‡(!
documíts
Ëdocumít†
	`HTLi°_√w
();

216 
	`HTLi°_addObje˘
(
documíts
, 
me
);

219 
	`HTAnch‹_£tDocumít
(
™ch‹
, 
me
);

222 i‡(
≠p
 &&áµ->
cuºít
Ë
	`ãxt_dñëe
(app->current);

223 
≠p
->
cuºít
 = 
me
;

225  
me
;

226 
	}
}

228 
PRIVATE
 
BOOL
 
	$ãxt_dñëe
 (
HText
 * 
me
)

230 i‡(
me
) {

233 
	`HTAnch‹_£tDocumít
(
me
->
∑ª¡
, 
NULL
);

236 i‡(
me
->
kids
Ë
	`HTLi°_dñëe
(me->kids);

237 
	`HT_FREE
(
me
);

238  
YES
;

240  
NO
;

241 
	}
}

243 
PRIVATE
 
	$ãxt_buûd
 (
HText
 * 
me
, 
HTextSètus
 
°©us
)

245 i‡(
°©us
==
HTEXT_END
 || sètus==
HTEXT_ABORT
) {

246 
kids
 = 
	`HTLi°_cou¡
(
me
->kids);

247 
	`HTPröt
("\n");

248 i‡(
kids
 > 0)

249 
	`HTPröt
("\nHôáÇumbî bëwì¿[0..%d]: ", 
kids
-1);

251 
	`HTPröt
("\nNoÜinks found\n");

253 
	}
}

255 
PRIVATE
 
	$ãxt_add
 (
HText
 * 
me
, c⁄° * 
buf
, 
Àn
)

257 i‡(
buf
Ë
	`fwrôe
(buf, 1, 
Àn
, 
°dout
);

258 
	}
}

260 
PRIVATE
 
	$ãxt_lök
 (
HText
 * 
me
,

261 
ñemít_numbî
,

262 
©åibuã_numbî
,

263 
HTChûdAnch‹
 * 
™ch‹
,

264 c⁄° 
BOOL
 * 
¥e£¡
,

265 c⁄° ** 
vÆue
)

267 i‡(
me
 && 
™ch‹
) {

268 i‡(
ñemít_numbî
 =
HTML_A
) {

269 i‡(!
me
->
kids
Ëme->kid†
	`HTLi°_√w
();

270 
	`HTLi°_≠≥ndObje˘
(
me
->
kids
, 
™ch‹
);

271 
	`HTPröt
("[%d]", 
	`HTLi°_cou¡
(
me
->
kids
)-1);

272 } i‡(
ñemít_numbî
 =
HTML_IMG
) {

273 i‡(
¥e£¡
[
HTML_IMG_ALT
] && 
vÆue
[HTML_IMG_ALT])

274 
	`HTPröt
("<%s>", 
vÆue
[
HTML_IMG_ALT
]);

276 
	`HTPröt
("<IMAGE>");

279 
	}
}

281 
PRIVATE
 
HTAnch‹
 * 
	$ãxt_födAnch‹
 (
HText
 * 
me
, 
ödex
)

283 i‡(
me
 && me->
kids
) {

284 
HTAnch‹
 * 
™ch‹
 = 
	`HTLi°_obje˘At
(
me
->
kids
, 
ödex
);

285 
HTLök
 * 
lök
 = 
	`HTAnch‹_maöLök
(
™ch‹
);

286  
	`HTLök_de°ö©i⁄
(
lök
);

288  
NULL
;

289 
	}
}

295 
PRIVATE
 
BOOL
 
	$gë_documít
 (
HTReque°
 * 
ªque°
, 
HTAnch‹
 * 
™ch‹
)

297 * 
addªss
 = 
	`HTAnch‹_addªss
(
™ch‹
);

298 
	`HTPröt
("„tchög %s\n", 
addªss
);

299 
	`HT_FREE
(
addªss
);

300 
	`HTReque°_£tAnch‹
(
ªque°
, 
™ch‹
);

301  
	`HTLﬂd
(
ªque°
, 
NO
);

302 
	}
}

304 
PRIVATE
 
HTReque°
 * 
	$Reque°_√w
 (
Aµ
 * 
≠p
)

306 
HTReque°
 * 
ªque°
 = 
	`HTReque°_√w
();

307 i‡(!
≠p
->
a˘ive
Ë≠p->a˘ivê
	`HTLi°_√w
();

308 
	`HTLi°_addObje˘
(
≠p
->
a˘ive
, 
ªque°
);

309 
	`HTReque°_£tC⁄ãxt
(
ªque°
, 
≠p
);

310  
ªque°
;

311 
	}
}

313 
PRIVATE
 
BOOL
 
	$Reque°_dñëe
 (
Aµ
 * 
≠p
, 
HTReque°
 * 
ªque°
)

315 i‡(
≠p
 &&áµ->
a˘ive
 && 
ªque°
) {

318 
	`HTLi°_ªmoveObje˘
(
≠p
->
a˘ive
, 
ªque°
);

321 
	`HTReque°_dñëe
(
ªque°
);

322  
YES
;

324  
NO
;

325 
	}
}

327 
PRIVATE
 
Aµ
 * 
	$Aµ_√w
 ()

329 
Aµ
 * 
me
 = 
NULL
;

330 i‡((
me
 = (
Aµ
 *Ë
	`HT_CALLOC
(1, (Aµ))Ë=
NULL
)

331 
	`HT_OUTOFMEM
("App_new");

332 
me
->
c⁄sﬁe_ªque°
 = 
	`HTReque°_√w
();

333 
me
->
c⁄sﬁe_evít
 = 
	`HTEvít_√w
(
c⁄sﬁe_∑r£r
, me, 
HT_PRIORITY_MAX
, -1);

334 
me
->
a˘ive
 = 
	`HTLi°_√w
();

337 #ifde‡
STDIN_FILENO


338 i‡(
	`ißây
(
STDIN_FILENO
)Ë
	`HTEvítLi°_ªgi°î
(STDIN_FILENO, 
HTEvít_READ
, 
me
->
c⁄sﬁe_evít
);

341  
me
;

342 
	}
}

344 
PRIVATE
 
BOOL
 
	$Aµ_dñëe
 (
Aµ
 * 
me
)

346 i‡(
me
) {

348 i‡(
me
->
a˘ive
Ë
	`HTLi°_dñëe
(me->active);

351 
	`HTNë_kûlAŒ
();

354 
	`HTReque°_dñëe
(
me
->
c⁄sﬁe_ªque°
);

355 
	`HT_FREE
(
me
);

358 
	`libwww_ãrmö©e
();

360 
	`exô
(0);

362  
NO
;

363 
	}
}

367 
PRIVATE
 
	$c⁄sﬁe_∑r£r
 (
SOCKET
 
s
, * 
∑øm
, 
HTEvítTy≥
 
ty≥
)

369 
Aµ
 * 
≠p
 = (Aµ *Ë
∑øm
;

370 
HTReque°
 * 
√w_ªque°
 = 
NULL
;

371 
HTAnch‹
 * 
™ch‹
 = 
NULL
;

372 
ödex
 = 0;

373 
buf
[32];

375 i‡(!
	`fgës
(
buf
, (buf), 
°dö
)Ë 
HT_ERROR
;

376 
buf
[(buf)-1] = '\0';

378 
	`TOUPPER
(
buf
[0])) {

381 
	`Aµ_dñëe
(
≠p
);

394 
ödex
 = 
	`©oi
(
buf
);

395 
√w_ªque°
 = 
	`Reque°_√w
(
≠p
);

396 i‡(
≠p
->
cuºít
 && (
™ch‹
 = 
	`ãxt_födAnch‹
◊µ->cuºít, 
ödex
)))

397 
	`gë_documít
(
√w_ªque°
, 
™ch‹
);

399 
	`HTPröt
("Index out ofÑange -Åryágain\n");

403 
	`HTPröt
("Unknown command -ÅypeáÇumber of 'q' for quit\n");

406  
HT_OK
;

407 
	}
}

409 
PRIVATE
 
	$ªque°_ãrmö©î
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

410 * 
∑øm
, 
°©us
)

412 
Aµ
 * 
≠p
 = (Aµ *Ë
∑øm
;

413 i‡(
°©us
!=
HT_LOADED
Ë
	`HTPröt
("Load couldn't be completed successfully\n");

414 
	`Reque°_dñëe
(
≠p
, 
ªque°
);

415  
HT_OK
;

416 
	}
}

420 
	$maö
 (
¨gc
, ** 
¨gv
)

422 
Aµ
 * 
≠p
 = 
NULL
;

423 
HTReque°
 * 
ªque°
 = 
NULL
;

424 
HTAnch‹
 * 
™ch‹
 = 
NULL
;

427 
	`HTPröt_£tCÆlback
(
¥öãr
);

428 
	`HTTø˚_£tCÆlback
(
åa˚r
);

431 i‡(
¨gc
 >= 2) {

432 * 
uri
 = 
	`HTP¨£
(
¨gv
[1], 
NULL
, 
PARSE_ALL
);

433 i‡((
™ch‹
 = 
	`HTAnch‹_födAddªss
(
uri
)Ë=
NULL
)

434 
™ch‹
 = 
	`HTAnch‹_födAddªss
(
DEFAULT_HOME
);

435 
	`HT_FREE
(
uri
);

437 
	`HTPröt
("TypeÅhe URI ofÅhe firstÖage you wantÅoÜoad\n");

438 
	`HTPröt
("\t%†<addªss>\n", 
¨gv
[0]);

439 
	`HTPröt
("F‹Éxam∂e, %†hâp://www.w3.‹g\n", 
¨gv
[0]);

444 
	`HTSëTø˚MesßgeMask
("sop");

448 
	`libwww_£tup
();

451 
≠p
 = 
	`Aµ_√w
();

454 
	`HTNë_addA·î
(
ªque°_ãrmö©î
, 
NULL
, 
≠p
, 
HT_ALL
, 
HT_FILTER_LAST
);

457 
ªque°
 = 
	`Reque°_√w
(
≠p
);

458 
	`gë_documít
(
ªque°
, 
™ch‹
);

461 
	`HTEvítLi°_√wLo›
();

463 
	`Aµ_dñëe
(
≠p
);

465 
	}
}

	@Library/Examples/trace.c

19 
	~"WWWLib.h
"

20 
	~"WWWInô.h
"

22 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

24  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

25 
	}
}

27 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

29  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

30 
	}
}

32 
PRIVATE
 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

33 * 
∑øm
, 
°©us
)

36 
	`HTReque°_dñëe
(
ªque°
);

39 
	`HTProfûe_dñëe
();

41 
	`exô
(0);

42 
	}
}

44 
	$maö
 (
¨gc
, ** 
¨gv
)

46 
HTReque°
 * 
ªque°
 = 
NULL
;

47 
HTAnch‹
 * 
d°
 = 
NULL
;

48 * 
d°_°r
 = 
NULL
;

49 
max_f‹w¨d
 = 1;

50 
BOOL
 
°©us
 = 
NO
;

53 
	`HTProfûe_√wNoCacheClõ¡
("libwww-TRACE", "1.0");

56 
	`HTPröt_£tCÆlback
(
¥öãr
);

57 
	`HTTø˚_£tCÆlback
(
åa˚r
);

60 
	`HTSëTø˚MesßgeMask
("sop");

64 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

67 i‡(
¨gc
 >= 3) {

68 
d°_°r
 = 
¨gv
[1];

69 
max_f‹w¨d
 = 
	`©oi
(
¨gv
[2]);

70 i‡(
max_f‹w¨d
<0 || max_forward>10) max_forward=1;

72 
	`HTPröt
("TypeÅhe URI ofÅhe destination you wantÅo TRACEándÅhe maxÇumber of hops you wantÅoÅry\n");

73 
	`HTPröt
("\t%†<de°ö©i⁄> <h›s>\n", 
¨gv
[0]);

74 
	`HTPröt
("F‹Éxam∂e, %†hâp://www.w3.‹g 2\n", 
¨gv
[0]);

78 i‡(
d°_°r
 && *dst_str) {

81 * 
cwd
 = 
	`HTGëCuºítDúe˘‹yURL
();

83 
	`HTPröt
("TracingÑequestÅo %s with %dÇumber of hops\n",

84 
d°_°r
, 
max_f‹w¨d
);

87 
ªque°
 = 
	`HTReque°_√w
();

90 
	`HTAÀπ_£tI¡îa˘ive
(
YES
);

93 
	`HTReque°_£tOuçutF‹m©
(
ªque°
, 
WWW_SOURCE
);

94 
	`HTReque°_£tOuçutSåóm
(
ªque°
, 
	`HTFWrôî_√w
‘eque°, 
°dout
, 
YES
));

97 
	`HTReque°_£tMaxF‹w¨ds
(
ªque°
, 
max_f‹w¨d
);

100 
d°
 = 
	`HTAnch‹_födAddªss
(
d°_°r
);

103 
°©us
 = 
	`HTTø˚Anch‹
(
d°
, 
ªque°
);

106 
	`HT_FREE
(
cwd
);

109 i‡(
°©us
 =
YES
Ë
	`HTEvítLi°_lo›
(
ªque°
);

114 
	}
}

	@Library/Examples/tzcheck.c

19 
	~"WWWLib.h
"

20 
	~"WWWInô.h
"

22 
	$maö
 (
¨gc
, ** 
¨gv
)

24 
time_t
 
t
 = 0;

25 
	`HTLibInô
("test","1.0");

26 
t
 = 
	`HTGëTimeZ⁄eOff£t
();

27 
	`Ârötf
(
°dîr
, "Timez⁄êoff£ài†%ld sec⁄d†‹ %ld hours\n", 
t
,Å/3600);

28 
	`HTLibTîmö©e
();

30 
	}
}

	@Library/Examples/upgrade.c

21 
	~"WWWLib.h
"

22 
	~"WWWInô.h
"

24 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

26  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

27 
	}
}

29 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

31  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

32 
	}
}

34 
PRIVATE
 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

35 * 
∑øm
, 
°©us
)

38 
	`HTReque°_dñëe
(
ªque°
);

41 
	`HTProfûe_dñëe
();

43 
	`exô
(0);

44 
	}
}

46 
	$maö
 (
¨gc
, ** 
¨gv
)

48 
HTReque°
 * 
ªque°
 = 
NULL
;

49 
HTAnch‹
 * 
™ch‹
 = 
NULL
;

50 * 
uri
 = 
NULL
;

53 
	`HTProfûe_√wNoCacheClõ¡
("UpgradeApp", "1.0");

56 
	`HTPröt_£tCÆlback
(
¥öãr
);

57 
	`HTTø˚_£tCÆlback
(
åa˚r
);

61 
	`HTSëTø˚MesßgeMask
("sop");

65 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

68 
	`HTAÀπ_£tI¡îa˘ive
(
NO
);

71 
	`HTHo°_£tEvítTimeout
(15000);

74 i‡(
¨gc
 >2Ë
uri
 = 
¨gv
[1];

76 i‡(
uri
 && *uri) {

79 
ªque°
 = 
	`HTReque°_√w
();

82 
™ch‹
 = 
	`HTAnch‹_födAddªss
(
uri
);

85 
	`HTReque°_£tOuçutF‹m©
(
ªque°
, 
WWW_SOURCE
);

88 
	`HTReque°_£tOuçutSåóm
(
ªque°
, 
	`HTFWrôî_√w
‘eque°, 
°dout
, 
YES
));

91 i‡(
	`HTLﬂdAnch‹
(
™ch‹
, 
ªque°
)) {

94 
	`HTEvítLi°_√wLo›
();

98 
	`HTPröt
("TypeÅhe URIÅo get (toÅest for upgrade).\n");

99 
	`HTPröt
("Ifán 101 Switching Protocols status isÑecieved\n");

100 
	`HTPröt
("thenÖrintÉverything followingÅo stdout.\n\n");

101 
	`HTPröt
("\t%†<uri>\n", 
¨gv
[0]);

105 
	}
}

	@Library/Examples/wwwssl.c

19 
	~"WWWLib.h
"

20 
	~"WWWMIME.h
"

21 
	~"WWWNews.h
"

22 
	~"WWWHTTP.h
"

23 
	~"WWWFTP.h
"

24 
	~"WWWFûe.h
"

25 
	~"WWWG›he.h
"

26 
	~"WWWInô.h
"

27 
	~"WWWSSL.h
"

29 
	#APP_NAME
 "libwww-s¶"

	)

30 
	#APP_VERSION
 "1.0"

	)

31 
	#DEFAULT_OUTPUT_FILE
 "gë.out"

	)

33 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

35  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

36 
	}
}

38 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

40  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

41 
	}
}

48 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

49 * 
∑øm
, 
°©us
)

52 
	`HTReque°_dñëe
(
ªque°
);

55 
	`HTSSLhâps_ãrmö©e
();

58 
	`HTProfûe_dñëe
();

60 
	`exô
(
°©us
 ? status : 0);

61 
	}
}

63 
	$maö
 (
¨gc
, ** 
¨gv
)

65 
°©us
 = 0;

66 
¨g
 = 0;

67 * 
ouçutfûe
 = 
NULL
;

68 * 
gëme
 = 
NULL
;

69 
HTReque°
 * 
ªque°
 = 
NULL
;

72 
	`HTProfûe_√wNoCacheClõ¡
(
APP_NAME
, 
APP_VERSION
);

76 
	`HTSëTø˚MesßgeMask
("sop");

83 
	`HTSSL_¥ŸMëhod_£t
 (
HTSSL_V23
);

87 
	`HTSSL_vîifyDïth_£t
 (2);

90 
	`HTSSLhâps_öô
(
YES
);

93 
	`HTPröt_£tCÆlback
(
¥öãr
);

94 
	`HTTø˚_£tCÆlback
(
åa˚r
);

97 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

100 
	`HTHo°_£tEvítTimeout
(10000);

103 
¨g
=1;árg<
¨gc
;árg++) {

104 i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-o")) {

105 
ouçutfûe
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

106 
¨gv
[++
¨g
] : 
DEFAULT_OUTPUT_FILE
;

109 
gëme
 = 
¨gv
[
¨g
];

114 i‡(!
ouçutfûe
Ëouçutfûê
DEFAULT_OUTPUT_FILE
;

116 i‡(
gëme
 && *getme) {

117 
ªque°
 = 
	`HTReque°_√w
();

120 
°©us
 = 
	`HTLﬂdToFûe
(
gëme
, 
ªque°
, 
ouçutfûe
);

123 
	`HTEvítLi°_lo›
(
ªque°
);

126 
	`HTPröt
("TypeÅhe URI of document you wantÅoÜoadándÅheÇame ofÅheÜocal file.\n");

127 
	`HTPröt
("\t%†<addªss> -ÿ<loˇlfûe>\n", 
¨gv
[0]);

128 
	`HTPröt
("F‹Éxam∂e, %†hâp://www.w3.‹g -ÿw3chome.html\n", 
¨gv
[0]);

131 
	`HTProfûe_dñëe
();

135 
	}
}

	@Library/cvs2sql/cvs2sql.c

15 
	~"WWWLib.h
"

16 
	~"WWWSQL.h
"

17 
	~"HTextImp.h
"

19 
	#APP_NAME
 "cvs2sql"

	)

20 
	#APP_VERSION
 "1.0"

	)

22 
	#DEFAULT_SQL_SERVER
 "loˇlho°"

	)

23 
	#DEFAULT_SQL_DB
 "cvs"

	)

24 
	#DEFAULT_SQL_USER
 "n⁄e"

	)

25 
	#DEFAULT_SQL_PW
 "n⁄e"

	)

27 
	#DEFAULT_SQL_LOCATION_TABLE
 "loˇti⁄s"

	)

28 
	#DEFAULT_SQL_USER_TABLE
 "u£rs"

	)

29 
	#DEFAULT_SQL_COMMENTS_TABLE
 "commíts"

	)

30 
	#DEFAULT_SQL_LOG_TABLE
 "logs"

	)

32 
	#DEFAULT_SQL_KEY_TYPE
 "öàunsig√dÇŸÇuŒ"

	)

33 
	#MAX_KEY_LENGTH
 255

	)

35 
	#DEFAULT_CVS_USER
 "unknown"

	)

37 
	#DELIMITERS
 " \n"

	)

39 
	#BUFSIZE
 8196

	)

41 
	e_SQLFœgs
 {

42 
	mSQL_CLEAR_LOCATION_TABLE
 = 0x1,

43 
	mSQL_DROP_LOCATION_TABLE
 = 0x2,

45 
	mSQL_CLEAR_USER_TABLE
 = 0x4,

46 
	mSQL_DROP_USER_TABLE
 = 0x8,

48 
	mSQL_CLEAR_COMMENTS_TABLE
 = 0x10,

49 
	mSQL_DROP_COMMENTS_TABLE
 = 0x20,

51 
	mSQL_CLEAR_LOG_TABLE
 = 0x40,

52 
	mSQL_DROP_LOG_TABLE
 = 0x80

53 } 
	tSQLFœgs
;

57 
PRIVATE
 
	$Vîsi⁄Info
 ()

59 
	`Ârötf
(
°dout
, "W3C Sample Software\n\n");

60 
	`Ârötf
(
°dout
, "\t%s, W3C CVS LogÅÿSQL c⁄vîã∏vîsi⁄ %s\n", 
APP_NAME
, 
APP_VERSION
);

61 
	`Ârötf
(
°dout
, "\éibwww, W3C Sam∂êLibøry vîsi⁄ %s\n\n", 
	`HTLib_vîsi⁄
());

62 
	`Ârötf
(
°dout
, "Please send feedbackÅo <www-lib@w3.org>\n");

63 
	}
}

65 
PRIVATE
 
	$CÀ™up
 (
°©us
, 
HTSQL
 * 
sql
, 
HTChunk
 * 
chunk
)

67 
	`HTChunk_dñëe
(
chunk
);

68 
	`HTSQL_dñëe
(
sql
);

69 
	`HTLibTîmö©e
();

71 #ifde‡
VMS


72 
	`exô
(
°©us
 ? status : 1);

74 
	`exô
(
°©us
 ? status : 0);

76 
	}
}

78 
PRIVATE
 
BOOL
 
	$˛ór_èbÀ
 (
HTSQL
 * 
me
, c⁄° * 
èbÀ
)

80 i‡(
me
 && 
èbÀ
) {

81 
buf
[1024];

82 * 
quîy
 = 
	`HTSQL_¥ötf
(
buf
, 1024, "dñëê‰om %s", 
èbÀ
);

83  
	`HTSQL_quîy
(
me
, 
quîy
);

85  
NO
;

86 
	}
}

88 
PRIVATE
 
BOOL
 
	$dr›_èbÀ
 (
HTSQL
 * 
me
, c⁄° * 
èbÀ
)

90 i‡(
me
 && 
èbÀ
) {

91 
buf
[1024];

92 * 
quîy
 = 
	`HTSQL_¥ötf
(
buf
, 1024, "dr›ÅabÀ %s", 
èbÀ
);

93  
	`HTSQL_quîy
(
me
, 
quîy
);

95  
NO
;

96 
	}
}

104 
PRIVATE
 
BOOL
 
	$¸óãTabÀs
 (
HTSQL
 * 
sql
, 
SQLFœgs
 
Êags
)

106 i‡(
sql
) {

107 
buf
[1024];

108 * 
quîy
 = 
NULL
;

113 i‡(
Êags
 & 
SQL_DROP_LOCATION_TABLE
)

114 
	`dr›_èbÀ
(
sql
, 
DEFAULT_SQL_LOCATION_TABLE
);

116 
quîy
 = 
	`HTSQL_¥ötf
(
buf
, 1024,

118 
DEFAULT_SQL_LOCATION_TABLE
,

119 
DEFAULT_SQL_KEY_TYPE
,

120 
MAX_KEY_LENGTH
);

121 
	`HTSQL_quîy
(
sql
, 
quîy
);

124 i‡(
Êags
 & 
SQL_CLEAR_LOCATION_TABLE
)

125 
	`˛ór_èbÀ
(
sql
, 
DEFAULT_SQL_LOCATION_TABLE
);

130 i‡(
Êags
 & 
SQL_DROP_USER_TABLE
)

131 
	`dr›_èbÀ
(
sql
, 
DEFAULT_SQL_USER_TABLE
);

133 
quîy
 = 
	`HTSQL_¥ötf
(
buf
, 1024,

135 
DEFAULT_SQL_USER_TABLE
,

136 
DEFAULT_SQL_KEY_TYPE
,

137 
MAX_KEY_LENGTH
);

138 
	`HTSQL_quîy
(
sql
, 
quîy
);

141 i‡(
Êags
 & 
SQL_CLEAR_USER_TABLE
)

142 
	`˛ór_èbÀ
(
sql
, 
DEFAULT_SQL_USER_TABLE
);

147 i‡(
Êags
 & 
SQL_DROP_COMMENTS_TABLE
)

148 
	`dr›_èbÀ
(
sql
, 
DEFAULT_SQL_COMMENTS_TABLE
);

150 
quîy
 = 
	`HTSQL_¥ötf
(
buf
, 1024,

152 
DEFAULT_SQL_COMMENTS_TABLE
,

153 
DEFAULT_SQL_KEY_TYPE
);

154 
	`HTSQL_quîy
(
sql
, 
quîy
);

157 i‡(
Êags
 & 
SQL_CLEAR_COMMENTS_TABLE
)

158 
	`˛ór_èbÀ
(
sql
, 
DEFAULT_SQL_COMMENTS_TABLE
);

163 i‡(
Êags
 & 
SQL_DROP_LOG_TABLE
)

164 
	`dr›_èbÀ
(
sql
, 
DEFAULT_SQL_LOG_TABLE
);

166 
quîy
 = 
	`HTSQL_¥ötf
(
buf
, 1024,

168 
DEFAULT_SQL_LOG_TABLE
,

169 
DEFAULT_SQL_KEY_TYPE
,

170 
DEFAULT_SQL_KEY_TYPE
,

171 
DEFAULT_SQL_KEY_TYPE
);

172 
	`HTSQL_quîy
(
sql
, 
quîy
);

175 i‡(
Êags
 & 
SQL_CLEAR_LOG_TABLE
)

176 
	`˛ór_èbÀ
(
sql
, 
DEFAULT_SQL_LOG_TABLE
);

179  
YES
;

181  
NO
;

182 
	}
}

184 
PRIVATE
 
	$föd_loˇti⁄
(
HTSQL
 * 
sql
, c⁄° * 
loˇti⁄
)

186 
ödex
 = -1;

187 i‡(
sql
 && 
loˇti⁄
) {

188 
buf
[4096];

189 * 
quîy
 = 
NULL
;

190 
MYSQL_RES
 * 
ªsu…
 = 
NULL
;

191 
quîy
 = 
	`HTSQL_¥ötf
(
buf
, 4096, "select * from %s whereÜocation=%S",

192 
DEFAULT_SQL_LOCATION_TABLE
, 
loˇti⁄
);

193 i‡(
	`HTSQL_quîy
(
sql
, 
quîy
) &&

194 (
ªsu…
 = 
	`HTSQL_°‹eResu…
(
sql
)Ë!
NULL
) {

195 
MYSQL_ROW
 
row
;

196 i‡((
row
 = 
	`mysql_„tch_row
(
ªsu…
)) &&Ñow[0])

197 
ödex
 = 
	`©oi
(
row
[0]);

198 
	`HTSQL_‰ìResu…
(
ªsu…
);

201  
ödex
;

202 
	}
}

204 
PRIVATE
 
	$add_loˇti⁄
 (
HTSQL
 * 
sql
, c⁄° * 
loˇti⁄
)

206 i‡(
sql
 && 
loˇti⁄
) {

207 
ödex
 = -1;

210 i‡((
ödex
 = 
	`föd_loˇti⁄
(
sql
, 
loˇti⁄
)) < 0) {

211 
buf
[4096];

212 * 
quîy
 = 
	`HTSQL_¥ötf
(
buf
, 4096, "insert into %s (location) values (%S)",

213 
DEFAULT_SQL_LOCATION_TABLE
, 
loˇti⁄
);

214 i‡(
	`HTSQL_quîy
(
sql
, 
quîy
Ë!
YES
) {

217 
ödex
 = 
	`HTSQL_gëLa°In£πId
(
sql
);

219  
ödex
;

222 
	}
}

224 
PRIVATE
 
	$föd_u£r
(
HTSQL
 * 
sql
, c⁄° * 
u£r
)

226 
ödex
 = -1;

227 i‡(
sql
 && 
u£r
) {

228 
buf
[1024];

229 * 
quîy
 = 
NULL
;

230 
MYSQL_RES
 * 
ªsu…
 = 
NULL
;

231 
quîy
 = 
	`HTSQL_¥ötf
(
buf
, 1024, "select * from %s where username=%S",

232 
DEFAULT_SQL_USER_TABLE
, 
u£r
);

233 i‡(
	`HTSQL_quîy
(
sql
, 
quîy
) &&

234 (
ªsu…
 = 
	`HTSQL_°‹eResu…
(
sql
)Ë!
NULL
) {

235 
MYSQL_ROW
 
row
;

236 i‡((
row
 = 
	`mysql_„tch_row
(
ªsu…
)) &&Ñow[0])

237 
ödex
 = 
	`©oi
(
row
[0]);

238 
	`HTSQL_‰ìResu…
(
ªsu…
);

241  
ödex
;

242 
	}
}

244 
PRIVATE
 
	$add_u£r
 (
HTSQL
 * 
sql
, c⁄° * 
u£r
)

246 i‡(
sql
 && 
u£r
) {

247 
ödex
 = -1;

250 i‡((
ödex
 = 
	`föd_u£r
(
sql
, 
u£r
)) < 0) {

251 
buf
[1024];

252 * 
quîy
 = 
	`HTSQL_¥ötf
(
buf
, 1024, "insert into %s (username) values (%S)",

253 
DEFAULT_SQL_USER_TABLE
, 
u£r
);

254 i‡(
	`HTSQL_quîy
(
sql
, 
quîy
Ë!
YES
) {

257 
ödex
 = 
	`HTSQL_gëLa°In£πId
(
sql
);

259  
ödex
;

262 
	}
}

264 
PRIVATE
 
	$add_commít
 (
HTSQL
 * 
sql
, c⁄° * 
commít
)

266 i‡(
sql
 && 
commít
) {

267 
buf
[8196];

268 * 
quîy
 = 
	`HTSQL_¥ötf
(
buf
, 8196, "insert into %s (comment) values (%S)",

269 
DEFAULT_SQL_COMMENTS_TABLE
, 
commít
);

270 i‡(
	`HTSQL_quîy
(
sql
, 
quîy
Ë!
YES
)  -1;

271  
	`HTSQL_gëLa°In£πId
(
sql
);

274 
	}
}

276 
	$maö
 (
¨gc
, ** 
¨gv
)

278 
HTSQL
 * 
sql
 = 
NULL
;

279 * 
sql£rvî
 = 
DEFAULT_SQL_SERVER
;

280 * 
sqldb
 = 
DEFAULT_SQL_DB
;

281 * 
sqlu£r
 = 
DEFAULT_SQL_USER
;

282 * 
sqÕw
 = 
DEFAULT_SQL_PW
;

283 * 
cvsu£r
 = 
DEFAULT_CVS_USER
;

284 
time_t
 
cvsd©e
 = -1;

285 
FILE
 * 
fö
 = 
°dö
;

286 * 
öput_buf„r
[
BUFSIZE
];

287 
HTChunk
 * 
logöfo
 = 
	`HTChunk_√w
(
BUFSIZE
);

288 
¨g
 = 0;

289 
BOOL
 
¸óã_db
 = 
YES
;

292 
	`HTLibInô
(
APP_NAME
, 
APP_VERSION
);

295 
¨g
=1;árg<
¨gc
;árg++) {

296 i‡(*
¨gv
[
¨g
] == '-') {

298 i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-h") || !strcmp(argv[arg], "-?")) {

299 
	`Vîsi⁄Info
();

300 
	`CÀ™up
(0, 
sql
, 
logöfo
);

302 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-v")) {

303 
	`HTSëTø˚MesßgeMask
("q");

305 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-nocreate")) {

306 
¸óã_db
 = 
NO
;

308 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-sqldb", 5)) {

309 
sqldb
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

310 
¨gv
[++
¨g
] : 
DEFAULT_SQL_DB
;

312 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-sqlpassword", 5)) {

313 
sqÕw
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

314 
¨gv
[++
¨g
] : 
DEFAULT_SQL_PW
;

316 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-sqlserver", 5)) {

317 
sql£rvî
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

318 
¨gv
[++
¨g
] : 
DEFAULT_SQL_SERVER
;

320 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-sqluser", 5)) {

321 
sqlu£r
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

322 
¨gv
[++
¨g
] : 
DEFAULT_SQL_USER
;

324 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-cvsuser", 5)) {

325 
cvsu£r
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

326 
¨gv
[++
¨g
] : 
DEFAULT_CVS_USER
;

328 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-cvsdate", 5)) {

329 
cvsd©e
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

330 
	`HTP¨£Time
(
¨gv
[++
¨g
], 
NULL
, 
NO
) : -1;

333 
	`Ârötf
(
°dîr
, "Bad Argumíà(%s)\n", 
¨gv
[
¨g
]);

336 
	`Ârötf
(
°dîr
, "Bad Argumíà(%s)\n", 
¨gv
[
¨g
]);

341 i‡((
sql
 = 
	`HTSQL_√w
(
sql£rvî
, 
sqlu£r
, 
sqÕw
, 0)Ë=
NULL
)

342 
	`CÀ™up
(-1, 
sql
, 
logöfo
);

345 i‡(
	`HTSQL_c⁄√˘
(
sql
Ë!
YES
Ë
	`CÀ™up
(-1, sql, 
logöfo
);

348 i‡(
	`HTSQL_£À˘DB
(
sql
, 
sqldb
Ë!
YES
Ë
	`CÀ™up
(-1, sql, 
logöfo
);

351 i‡(
¸óã_db
Ë
	`¸óãTabÀs
(
sql
, 0);

355 
°©us
 = 
	`‰ód
(
öput_buf„r
, 1, 
BUFSIZE
, 
fö
);

356 i‡(
°©us
 < 0Ë
	`CÀ™up
(-1, 
sql
, 
logöfo
);

357 i‡(
°©us
 == 0) ;

358 
	`HTChunk_putb
(
logöfo
, (c⁄° *Ë
öput_buf„r
, 
°©us
);

363 * 
±r
 = 
	`HTChunk_d©a
(
logöfo
);

364 * 
no›1
 = 
	`HTNextFõld
(&
±r
);

365 * 
no›2
 = 
	`HTNextFõld
(&
±r
);

366 * 
roŸ
 = 
	`HTNextFõld
(&
±r
);

367 * 
›î©i⁄
 = 
NULL
;

368 * 
fûes
 = 
NULL
;

369 * 
commít
 = 
NULL
;

370 
commít_id
 = -1;

371 
u£r_id
 = -1;

372 * 
p
, * 
q
;

373 #ifde‡
HT_REENTRANT


374 *
œ°s
;

378 i‡((
q
 = 
	`HTSåCa£Så
(
±r
, "\nLog Mesßge:")Ë!
NULL
) {

379 
commít
 = 
q
+14;

380 *
q
 = '\0';

382 i‡((
commít_id
 = 
	`add_commít
(
sql
, 
commít
)) < 0)

383 
	`CÀ™up
(-1, 
sql
, 
logöfo
);

386 i‡((
u£r_id
 = 
	`add_u£r
(
sql
, 
cvsu£r
)) < 0)

387 
	`CÀ™up
(-1, 
sql
, 
logöfo
);

390 (
q
 = 
	`HTSåCa£Så
(
±r
, " Fûes:")Ë!
NULL
) {

393 
fûes
 = 
q
+9;

394 
p
=
q
;Ö>
	`HTChunk_d©a
(
logöfo
) && *p && *p!='\n';Ö--);

395 
p
++;

396 
›î©i⁄
 = 
	`HTNextFõld
(&
p
);

399 i‡((
q
 = 
	`°rchr
(
fûes
, '\n')Ë!
NULL
) {

400 *
q
++ = '\0';

401 
±r
 = 
q
;

405 i‡(
›î©i⁄
 && 
fûes
 && 
commít
) {

406 * 
fûe
;

407 
loˇti⁄_id
 = -1;

409 #ifde‡
HT_REENTRANT


410 i‡((
fûe
 = 
	`°πok_r
(
fûes
, 
DELIMITERS
, &
œ°s
)Ë!
NULL
) {

412 i‡((
fûe
 = 
	`°πok
(
fûes
, 
DELIMITERS
)Ë!
NULL
) {

415 * 
∑th
 = 
NULL
;

416 
	`SåAŒocMC›y
(&
∑th
, 
roŸ
, "/", 
fûe
, 
NULL
);

419 i‡((
loˇti⁄_id
 = 
	`add_loˇti⁄
(
sql
, 
∑th
)) < 0) {

420 
	`CÀ™up
(-1, 
sql
, 
logöfo
);

425 
	`Ârötf
(
°dîr
, "location: `%s\', user: `%s\', operation: `%s\', comment: `%s\'\n",

426 
∑th
, 
cvsu£r
, 
›î©i⁄
, 
commít
);

431 
buf
[16384];

432 * 
quîy
 = 
	`HTSQL_¥ötf
(
buf
, 16384, "insert into %s values (%u,%u,%T,%S,%u)",

433 
DEFAULT_SQL_LOG_TABLE
,

434 
loˇti⁄_id
,

435 
u£r_id
,

436 
cvsd©e
,

437 
›î©i⁄
,

438 
commít_id
);

439 i‡(
	`HTSQL_quîy
(
sql
, 
quîy
Ë!
YES
) {

440 
	`CÀ™up
(-1, 
sql
, 
logöfo
);

445 
	`HT_FREE
(
∑th
);

446 #ifde‡
HT_REENTRANT


447 } (
fûe
 = (*Ë
	`°πok_r
(
NULL
, 
DELIMITERS
, &
œ°s
)) != NULL);

449 } (
fûe
 = 
	`°πok
(
NULL
, 
DELIMITERS
)) != NULL);

457 
	}
}

	@Library/src/HTAABrow.c

71 
	~"WWWLib.h
"

72 
	~"HTAAUtû.h
"

73 
	~"HTP¨£.h
"

74 
	~"HTAABrow.h
"

75 
	~"HTDige°.h
"

77 
	#BASIC_AUTH
 "basic"

	)

78 
	#DIGEST_AUTH
 "dige°"

	)

79 
	#DIGEST_AI
 "authítiˇti⁄-öfo"

	)

80 
	#PROXY_DIGEST_AI
 "¥oxy-authítiˇti⁄-öfo"

	)

82 
	s_HTBasic
 {

83 * 
	muid
;

84 * 
	mpw
;

85 
BOOL
 
	mªåy
;

86 
BOOL
 
	m¥oxy
;

87 } 
	tHTBasic
;

89 
	s_HTDige°
 {

91 
	mª„ªn˚s
;

93 * 
	muid
;

94 * 
	mpw
;

95 * 
	mªÆm
;

96 * 
	m˙⁄˚
;

97 
	mnc
;

99 * 
	mn⁄˚
;

100 * 
	m›aque
;

102 
	mÆg‹ôhm
;

103 * 
	mq›
;

104 
BOOL
 
	m°Æe
;

105 
BOOL
 
	mªåy
;

106 
BOOL
 
	m¥oxy
;

107 } 
	tHTDige°
;

109 
	#HASHLEN
 16

	)

110 
	tHASH
[
HASHLEN
+1];

111 
	#HASHHEXLEN
 32

	)

112 
	tHASHHEX
[
HASHHEXLEN
+1];

127 
PRIVATE
 * 
	$make_ãm∂©e
 (c⁄° * 
do˙ame
)

129 * 
tm∂©e
 = 
NULL
;

130 i‡(
do˙ame
) {

131 * 
ho°
 = 
	`HTP¨£
(
do˙ame
, "", 
PARSE_ACCESS
|
PARSE_HOST
|
PARSE_PUNCTUATION
);

132 * 
∑th
 = 
	`HTP¨£
(
do˙ame
, "", 
PARSE_PATH
|
PARSE_PUNCTUATION
);

133 * 
¶ash
 = 
	`°ºchr
(
∑th
, '/');

134 i‡(
¶ash
) {

136 i‡(*(
¶ash
+1)) {

137 
	`°r˝y
(
¶ash
, "*");

138 
	`SåAŒocC©
(
ho°
, 
∑th
);

140 
	`SåAŒocC©
(
ho°
, "/*");

142 i‡(*(
¶ash
+1)) {

143 
	`°r˝y
(
¶ash
 + 1, "*");

144 
	`SåAŒocC©
(
ho°
, 
∑th
);

146 
	`SåAŒocC©
(
ho°
, 
∑th
);

147 
	`SåAŒocC©
(
ho°
, "*");

151 
	`HT_FREE
(
∑th
);

152 
tm∂©e
 = 
ho°
;

154 
	`SåAŒocC›y
(
tm∂©e
, "*");

155 
	`HTTRACE
(
AUTH_TRACE
, "Tem∂©e.... Madêãm∂©ê`%s' f‹ fûê`%s'\n" 
_


156 
tm∂©e
 
_
 
do˙ame
 ? docname : "<null>");

157  
tm∂©e
;

158 
	}
}

168 
PRIVATE
 
	$¥om±_u£r
 (
HTReque°
 * 
ªque°
, c⁄° * 
ªÆm
,

169 
HTBasic
 * 
basic
)

171 
HTAÀπCÆlback
 * 
cbf
 = 
	`HTAÀπ_föd
(
HT_A_USER_PW
);

174 i‡(!
cbf
Ë 
HT_ERROR
;

177 i‡(
ªque°
) {

178 
HTAÀπP¨
 * 
ª∂y
 = 
	`HTAÀπ_√wRïly
();

179 
msg
 = 
basic
->
¥oxy
 ? 
HT_MSG_PROXY_UID
 : 
HT_MSG_UID
;

180 
BOOL
 
ªs
 = (*
cbf
)(
ªque°
, 
HT_A_USER_PW
, 
msg
,

181 
basic
->
uid
, (*Ë
ªÆm
, 
ª∂y
);

182 i‡(
ªs
) {

183 
	`HT_FREE
(
basic
->
uid
);

184 
	`HT_FREE
(
basic
->
pw
);

185 
basic
->
uid
 = 
	`HTAÀπ_ª∂yMesßge
(
ª∂y
);

186 
basic
->
pw
 = 
	`HTAÀπ_ª∂ySe¸ë
(
ª∂y
);

188 
	`HTAÀπ_dñëeRïly
(
ª∂y
);

189  
ªs
 ? 
HT_OK
 : 
HT_ERROR
;

191  
HT_OK
;

192 
	}
}

194 
PRIVATE
 
HTBasic
 * 
	$HTBasic_√w
()

196 
HTBasic
 * 
me
 = 
NULL
;

197 i‡((
me
 = (
HTBasic
 *Ë
	`HT_CALLOC
(1, (HTBasic))Ë=
NULL
)

198 
	`HT_OUTOFMEM
("HTBasic_new");

199 
me
->
ªåy
 = 
YES
;

200  
me
;

201 
	}
}

207 
PUBLIC
 
	$HTBasic_dñëe
 (* 
c⁄ãxt
)

209 
HTBasic
 * 
basic
 = (HTBasi¯*Ë
c⁄ãxt
;

210 i‡(
basic
) {

211 
	`HT_FREE
(
basic
->
uid
);

212 
	`HT_FREE
(
basic
->
pw
);

213 
	`HT_FREE
(
basic
);

214  
YES
;

216  
NO
;

217 
	}
}

229 
PRIVATE
 
BOOL
 
	$basic_¸edítüls
 (
HTReque°
 * 
ªque°
, 
HTBasic
 * 
basic
)

231 i‡(
ªque°
 && 
basic
) {

232 * 
˛óπext
 = 
NULL
;

233 * 
cùhî
 = 
NULL
;

234 
˛_Àn
 = 
	`°æí
(
basic
->
uid
 ? basic->uid : "") +

235 
	`°æí
(
basic
->
pw
 ? basic->pw : "") + 5;

236 
ci_Àn
 = 5 + 4 * (
˛_Àn
/3);

237 i‡((
˛óπext
 = (*Ë
	`HT_CALLOC
(1, 
˛_Àn
)Ë=
NULL
)

238 
	`HT_OUTOFMEM
("basic_credentials");

239 *
˛óπext
 = '\0';

240 i‡(
basic
->
uid
Ë
	`°r˝y
(
˛óπext
, basic->uid);

241 
	`°rˇt
(
˛óπext
, ":");

242 i‡(
basic
->
pw
Ë
	`°rˇt
(
˛óπext
, basic->pw);

243 i‡((
cùhî
 = (*Ë
	`HT_CALLOC
(1, 
ci_Àn
 + 3)Ë=
NULL
)

244 
	`HT_OUTOFMEM
("basic_credentials");

245 
	`HTUU_ícode
((*Ë
˛óπext
, 
	`°æí
(˛óπext), 
cùhî
);

249 
¸_Àn
 = 
	`°æí
("basic"Ë+ 
ci_Àn
 + 3;

250 * 
cookõ
 = (*Ë
	`HT_MALLOC
(
¸_Àn
+1);

251 i‡(!
cookõ
Ë
	`HT_OUTOFMEM
("basic_credentials");

252 
	`°r˝y
(
cookõ
, "Basic ");

253 
	`°rˇt
(
cookõ
, 
cùhî
);

254 
	`HTTRACE
(
AUTH_TRACE
, "Basi¯Cookõ `%s\'\n" 
_
 
cookõ
);

257 i‡(
basic
->
¥oxy
)

258 
	`HTReque°_addCªdítüls
(
ªque°
, "Proxy-Auth‹iz©i⁄", 
cookõ
);

260 
	`HTReque°_addCªdítüls
(
ªque°
, "Auth‹iz©i⁄", 
cookõ
);

262 
	`HT_FREE
(
cookõ
);

264 
	`HT_FREE
(
˛óπext
);

265 
	`HT_FREE
(
cùhî
);

266  
HT_OK
;

268  
HT_ERROR
;

269 
	}
}

278 
PUBLIC
 
	$HTBasic_gíî©e
 (
HTReque°
 * 
ªque°
, * 
c⁄ãxt
, 
mode
)

280 
HTBasic
 * 
basic
 = (HTBasi¯*Ë
c⁄ãxt
;

281 
BOOL
 
¥oxy
 = 
mode
==
HT_NO_PROXY_ACCESS
 ? 
YES
 : 
NO
;

282 i‡(
ªque°
) {

283 c⁄° * 
ªÆm
 = 
	`HTReque°_ªÆm
(
ªque°
);

288 i‡(
mode
 =
HT_REAUTH
 || modê=
HT_PROXY_REAUTH
)

289 
basic
->
ªåy
 = 
YES
;

295 i‡(!
basic
) {

296 
basic
 = 
	`HTBasic_√w
();

297 i‡(
¥oxy
) {

298 * 
uæ
 = 
	`HTReque°_¥oxy
(
ªque°
);

299 
basic
->
¥oxy
 = 
YES
;

300 
	`HTAA_upd©eNode
(
¥oxy
, 
BASIC_AUTH
, 
ªÆm
, 
uæ
, 
basic
);

302 * 
uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
*)
	`HTReque°_™ch‹
(
ªque°
));

303 
	`HTAA_upd©eNode
(
¥oxy
, 
BASIC_AUTH
, 
ªÆm
, 
uæ
, 
basic
);

304 
	`HT_FREE
(
uæ
);

312 i‡((
basic
->
ªåy
 && 
	`¥om±_u£r
(
ªque°
, 
ªÆm
, basicË=
HT_OK
) ||

313 (!
basic
->
ªåy
 && basic->
uid
)) {

314 
basic
->
ªåy
 = 
NO
;

315  
	`basic_¸edítüls
(
ªque°
, 
basic
);

317 * 
uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
*)
	`HTReque°_™ch‹
(
ªque°
));

318 
	`HTAA_dñëeNode
(
¥oxy
, 
BASIC_AUTH
, 
ªÆm
, 
uæ
);

319 
	`HT_FREE
(
uæ
);

320  
HT_ERROR
;

323  
HT_OK
;

324 
	}
}

334 
PUBLIC
 
	$HTBasic_∑r£
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

335 * 
c⁄ãxt
, 
°©us
)

337 
HTAssocLi°
 * 
chÆÀnge
 = 
	`HTRe•⁄£_chÆÀnge
(
ª•⁄£
);

338 
HTBasic
 * 
basic
 = 
NULL
;

339 
BOOL
 
¥oxy
 = 
°©us
==
HT_NO_PROXY_ACCESS
 ? 
YES
 : 
NO
;

340 i‡(
ªque°
 && 
chÆÀnge
) {

341 * 
p
 = 
	`HTAssocLi°_födObje˘
(
chÆÀnge
, 
BASIC_AUTH
);

342 * 
ªÆm
 = 
	`HTNextFõld
(&
p
);

343 * 
rm
 = 
	`HTNextFõld
(&
p
);

349 i‡(
ªÆm
 && !
	`°rˇ£comp
‘ólm, "ªÆm"Ë&& 
rm
) {

350 
	`HTTRACE
(
AUTH_TRACE
, "Basi¯P¨£. Rólm `%s\' found\n" 
_
 
rm
);

351 
	`HTReque°_£tRólm
(
ªque°
, 
rm
);

356 i‡(
¥oxy
) {

357 * 
uæ
 = 
	`HTReque°_¥oxy
(
ªque°
);

358 
	`HTTRACE
(
AUTH_TRACE
, "Basic Parse. Proxyáuthentication\n");

359 
basic
 = (
HTBasic
 *Ë
	`HTAA_upd©eNode
(
¥oxy
, 
BASIC_AUTH
, 
rm
,

360 
uæ
, 
NULL
);

362 i‡(
	`HTReque°_AAªåys
 (
ªque°
) > 1

363 && 
°©us
 =
HT_NO_ACCESS
 && 
basic
)

364 
basic
->
ªåy
 = 
YES
;

366 * 
uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *)

367 
	`HTReque°_™ch‹
(
ªque°
));

368 * 
tm∂©e
 = 
	`make_ãm∂©e
(
uæ
);

369 
basic
 = (
HTBasic
 *Ë
	`HTAA_upd©eNode
(
¥oxy
, 
BASIC_AUTH
, 
rm
,

370 
tm∂©e
, 
NULL
);

372 i‡(
	`HTReque°_AAªåys
 (
ªque°
) > 1

373 && 
°©us
 =
HT_NO_ACCESS
 && 
basic
)

374 
basic
->
ªåy
 = 
YES
;

375 
	`HT_FREE
(
uæ
);

376 
	`HT_FREE
(
tm∂©e
);

385 i‡(
basic
 && basic->
ªåy
) {

386 
HTAÀπCÆlback
 * 
¥om±
 = 
	`HTAÀπ_föd
(
HT_A_CONFIRM
);

392 i‡(
¥om±
) {

393 
code
 = 
¥oxy
 ?

394 
HT_MSG_RETRY_PROXY_AUTH
 : 
HT_MSG_RETRY_AUTHENTICATION
;

395 i‡((*
¥om±
)(
ªque°
, 
HT_A_CONFIRM
, 
code
,

396 
NULL
, NULL, NULLË!
YES
)

397  
HT_ERROR
;

400  
HT_OK
;

402 
	`HTTRACE
(
AUTH_TRACE
, "Auth........ No challenges found\n");

403  
HT_ERROR
;

404 
	}
}

414 
PRIVATE
 
	$¥om±_dige°_u£r
 (
HTReque°
 * 
ªque°
, c⁄° * 
ªÆm
,

415 
HTDige°
 * 
dige°
)

417 
HTAÀπCÆlback
 * 
cbf
 = 
	`HTAÀπ_föd
(
HT_A_USER_PW
);

420 i‡(!
cbf
Ë 
HT_ERROR
;

423 i‡(
ªque°
) {

424 
HTAÀπP¨
 * 
ª∂y
 = 
	`HTAÀπ_√wRïly
();

425 
msg
 = 
dige°
->
¥oxy
 ? 
HT_MSG_PROXY_UID
 : 
HT_MSG_UID
;

426 
BOOL
 
ªs
 = (*
cbf
)(
ªque°
, 
HT_A_USER_PW
, 
msg
,

427 
dige°
->
uid
, (*Ë
ªÆm
, 
ª∂y
);

428 i‡(
ªs
) {

429 
	`HT_FREE
(
dige°
->
uid
);

430 
	`HT_FREE
(
dige°
->
pw
);

431 
dige°
->
uid
 = 
	`HTAÀπ_ª∂yMesßge
(
ª∂y
);

432 
dige°
->
pw
 = 
	`HTAÀπ_ª∂ySe¸ë
(
ª∂y
);

434 
	`HTAÀπ_dñëeRïly
(
ª∂y
);

435  
ªs
 ? 
HT_OK
 : 
HT_ERROR
;

437  
HT_OK
;

438 
	}
}

440 
PRIVATE
 
HTDige°
 * 
	$HTDige°_√w
()

442 
HTDige°
 * 
me
 = 
NULL
;

443 i‡((
me
 = (
HTDige°
 *Ë
	`HT_CALLOC
(1, (HTDige°))Ë=
NULL
)

444 
	`HT_OUTOFMEM
("HTDigest_new");

445 
me
->
Æg‹ôhm
 = 
HTDaMD5
;

446 
me
->
ªåy
 = 
YES
;

447  
me
;

448 
	}
}

457 
PUBLIC
 
	$HTDige°_dñëe
 (* 
c⁄ãxt
)

459 
HTDige°
 * 
dige°
 = (HTDige° *Ë
c⁄ãxt
;

460 i‡(
dige°
) {

461 i‡(
dige°
->
ª„ªn˚s
 <= 0) {

462 
	`HT_FREE
(
dige°
->
uid
);

463 
	`HT_FREE
(
dige°
->
pw
);

464 
	`HT_FREE
(
dige°
->
ªÆm
);

465 
	`HT_FREE
(
dige°
->
˙⁄˚
);

466 
	`HT_FREE
(
dige°
->
n⁄˚
);

467 
	`HT_FREE
(
dige°
->
›aque
);

468 
	`HT_FREE
(
dige°
->
q›
);

469 
	`HT_FREE
(
dige°
);

470  
YES
;

473 
dige°
->
ª„ªn˚s
--;

475  
NO
;

476 
	}
}

486 
PRIVATE
 
	$HTDige°_ª£t
 (
HTDige°
 *
dige°
)

488 i‡(
dige°
) {

489 
dige°
->
nc
 = 0l;

490 
dige°
->
°Æe
 = 0;

491 
dige°
->
ªåy
 = 
YES
;

492 
	`HT_FREE
(
dige°
->
˙⁄˚
);

493 
	`HT_FREE
(
dige°
->
n⁄˚
);

494 
	`HT_FREE
(
dige°
->
›aque
);

495 
	`HT_FREE
(
dige°
->
q›
);

496  
YES
;

499  
NO
;

500 
	}
}

508 
PUBLIC
 
	$HTDige°_upd©eInfo
 (
HTReque°
 *
ªque°
, 
HTRe•⁄£
 *
ª•⁄£
,

509 * 
c⁄ãxt
, 
°©us
)

511 
HTAssocLi°
 * 
chÆÀnge
 = 
	`HTRe•⁄£_chÆÀnge
(
ª•⁄£
);

512 c⁄° * 
ªÆm
 = 
	`HTReque°_ªÆm
 (
ªque°
);

514 i‡(
ªque°
 && 
chÆÀnge
 && 
ªÆm
) {

515 
BOOL
 
¥oxy
 = 0;

516 * 
vÆue
 = 
NULL
;

517 * 
tokí
 = 
NULL
;

518 * 
auth_öfo
 = 
NULL
;

520 
HTDige°
 *
dige°
;

521 *
uæ
;

526 
	`HTTRACE
(
AUTH_TRACE
, "Digest Update.. Processingáuthentication-info\n");

527 i‡((
auth_öfo
 = 
	`HTAssocLi°_födObje˘
(
chÆÀnge
, 
DIGEST_AI
)))

528 
¥oxy
 = 0;

529 i‡((
auth_öfo
 = 
	`HTAssocLi°_födObje˘
(
chÆÀnge
,

530 
PROXY_DIGEST_AI
)))

531 
¥oxy
 = 1;

533 
	`HTTRACE
(
AUTH_TRACE
, "Digest Update.. Didn't findányáuthentication-info\n");

534  
HT_OK
;

540 i‡(
¥oxy
) {

541 
uæ
 = 
	`HTReque°_¥oxy
(
ªque°
);

542 
dige°
 = (
HTDige°
 *Ë
	`HTAA_upd©eNode
 (
¥oxy
, 
DIGEST_AUTH
, 
ªÆm
,

543 
uæ
, 
NULL
);

545 
uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *)

546 
	`HTReque°_™ch‹
(
ªque°
));

547 
dige°
 = (
HTDige°
 *Ë
	`HTAA_upd©eNode
 (
¥oxy
, 
DIGEST_AUTH
, 
ªÆm
,

548 
uæ
, 
NULL
);

549 
	`HT_FREE
(
uæ
);

551 i‡(!
dige°
) {

552 
	`HTTRACE
(
AUTH_TRACE
, "Digest Update.. Error:Ñeceivedáuthentication-info without havingáÜocal digest\n");

553  
HT_ERROR
;

560 (
tokí
 = 
	`HTNextFõld
(&
auth_öfo
))) {

561 i‡(!
	`°rˇ£comp
(
tokí
, "nextnonce")) {

562 i‡((
vÆue
 = 
	`HTNextFõld
(&
auth_öfo
))) {

563 
	`HT_FREE
 (
dige°
->
n⁄˚
);

564 
	`SåAŒocC›y
(
dige°
->
n⁄˚
, 
vÆue
);

565 } i‡(!
	`°rˇ£comp
(
tokí
, "qop")) {

566 
vÆue
 = 
	`HTNextFõld
(&
auth_öfo
);

568 } i‡(!
	`°rˇ£comp
(
tokí
, "rspauth")) {

569 
vÆue
 = 
	`HTNextFõld
(&
auth_öfo
);

571 } i‡(!
	`°rˇ£comp
(
tokí
, "cnonce")) {

572 
vÆue
 = 
	`HTNextFõld
 (&
auth_öfo
);

573 i‡(
vÆue
 && 
	`°rcmp
 (
dige°
->
˙⁄˚
, value)) {

576 } i‡(!
	`°rˇ£comp
(
tokí
, "nc")) {

577 
vÆue
 = 
	`HTNextFõld
(&
auth_öfo
);

583  
HT_OK
;

584 
	}
}

591 
PRIVATE
 
BOOL
 
	$add_∑øm
 (** 
de°
, *
∑øm
, * 
vÆue
, 
BOOL
 
quŸed
)

593 *
tmp
 = *
de°
;

595 i‡(!
∑øm
 || *∑øm ='\0' || !
vÆue
 || *value == '\0')

596  
NO
;

600 i‡(
tmp
)

601 
	`SåAŒocC©
(
tmp
, ",");

604 
	`SåAŒocC©
(
tmp
, 
∑øm
);

605 
	`SåAŒocC©
(
tmp
, "=");

606 i‡(
quŸed
) {

607 
	`SåAŒocC©
(
tmp
, "\"");

608 
	`SåAŒocC©
(
tmp
, 
vÆue
);

609 
	`SåAŒocC©
(
tmp
, "\"");

611 
	`SåAŒocC©
(
tmp
, 
vÆue
);

612 *
de°
 = 
tmp
;

614  
YES
;

615 
	}
}

621 
PRIVATE
 
	$CvtHex
 (
HASH
 
Bö
, 
HASHHEX
 
Hex
)

623 
i
;

624 
j
;

626 
i
 = 0; i < 
HASHLEN
; i++) {

627 
j
 = (
Bö
[
i
] >> 4) & 0xf;

628 i‡(
j
 <= 9)

629 
Hex
[
i
*2] = (
j
 + '0');

631 
Hex
[
i
*2] = (
j
 + 'a' - 10);

632 
j
 = 
Bö
[
i
] & 0xf;

633 i‡(
j
 <= 9)

634 
Hex
[
i
*2+1] = (
j
 + '0');

636 
Hex
[
i
*2+1] = (
j
 + 'a' - 10);

638 
Hex
[
HASHHEXLEN
] = '\0';

639 
	}
}

642 
PRIVATE
 
	$Dige°CÆcHA1
 (
Æg‹ôhm
, * 
pszAlg
, * 
pszU£rName
,

643 * 
pszRólm
, * 
pszPassw‹d
,

644 * 
pszN⁄˚
, * 
pszCN⁄˚
,

645 
HASHHEX
 
Sessi⁄Key
)

647 
HTDige°C⁄ãxt
 
MdCtx
;

648 
HASH
 
HA1
;

650 
	`HTDige°_öô
 (&
MdCtx
, 
Æg‹ôhm
);

651 
	`HTDige°_upd©e
 (&
MdCtx
, 
pszU£rName
, 
	`°æí
(pszUserName));

652 
	`HTDige°_upd©e
 (&
MdCtx
, ":", 1);

653 
	`HTDige°_upd©e
 (&
MdCtx
, 
pszRólm
, 
	`°æí
(pszRealm));

654 
	`HTDige°_upd©e
 (&
MdCtx
, ":", 1);

655 
	`HTDige°_upd©e
 (&
MdCtx
, 
pszPassw‹d
, 
	`°æí
(pszPassword));

656 
	`HTDige°_föÆ
 (
HA1
, &
MdCtx
);

657 i‡(
	`°rˇ£comp
 (
pszAlg
, "md5-sess") == 0) {

658 
	`HTDige°_öô
 (&
MdCtx
, 
Æg‹ôhm
);

659 
	`HTDige°_upd©e
 (&
MdCtx
, 
HA1
, 
	`°æí
 (HA1));

660 
	`HTDige°_upd©e
 (&
MdCtx
, ":", 1);

661 
	`HTDige°_upd©e
 (&
MdCtx
, 
pszN⁄˚
, 
	`°æí
(pszNonce));

662 
	`HTDige°_upd©e
 (&
MdCtx
, ":", 1);

663 
	`HTDige°_upd©e
 (&
MdCtx
, 
pszCN⁄˚
, 
	`°æí
(pszCNonce));

664 
	`HTDige°_föÆ
 (
HA1
, &
MdCtx
);

666 
	`CvtHex
 (
HA1
, 
Sessi⁄Key
);

667 
	}
}

670 
PRIVATE
 
	$Dige°CÆcRe•⁄£
 (

671 
Æg‹ôhm
,

672 
HASHHEX
 
HA1
,

673 * 
pszN⁄˚
,

674 * 
pszN⁄˚Cou¡
,

675 * 
pszCN⁄˚
,

676 * 
pszQ›
,

677 * 
pszMëhod
,

678 * 
pszDige°Uri
,

679 * 
HE¡ôy
,

680 * 
Re•⁄£


683 
HTDige°C⁄ãxt
 
MdCtx
;

684 
HASH
 
HA2
;

685 
HASH
 
Re•Hash
;

686 
HASHHEX
 
HA2Hex
;

690 
	`HTDige°_öô
 (&
MdCtx
, 
Æg‹ôhm
);

691 
	`HTDige°_upd©e
 (&
MdCtx
, 
pszMëhod
, 
	`°æí
(pszMethod));

692 
	`HTDige°_upd©e
 (&
MdCtx
, ":", 1);

693 
	`HTDige°_upd©e
 (&
MdCtx
, 
pszDige°Uri
, 
	`°æí
(pszDigestUri));

694 i‡(
pszQ›
 && 
	`°rˇ£comp
 (pszQop, "auth-int") == 0) {

695 
	`HTDige°_upd©e
 (&
MdCtx
, ":", 1);

696 
	`HTDige°_upd©e
 (&
MdCtx
, 
HE¡ôy
, 
HASHHEXLEN
);

698 
	`HTDige°_föÆ
 (
HA2
, &
MdCtx
);

699 
	`CvtHex
 (
HA2
, 
HA2Hex
);

702 
	`HTDige°_öô
 (&
MdCtx
, 
Æg‹ôhm
);

703 
	`HTDige°_upd©e
 (&
MdCtx
, 
HA1
, 
HASHHEXLEN
);

704 
	`HTDige°_upd©e
 (&
MdCtx
, ":", 1);

705 
	`HTDige°_upd©e
 (&
MdCtx
, 
pszN⁄˚
, 
	`°æí
(pszNonce));

706 
	`HTDige°_upd©e
 (&
MdCtx
, ":", 1);

707 i‡(
pszQ›
 && *pszQop) {

708 
	`HTDige°_upd©e
 (&
MdCtx
, 
pszN⁄˚Cou¡
, 
	`°æí
(pszNonceCount));

709 
	`HTDige°_upd©e
 (&
MdCtx
, ":", 1);

710 
	`HTDige°_upd©e
 (&
MdCtx
, 
pszCN⁄˚
, 
	`°æí
(pszCNonce));

711 
	`HTDige°_upd©e
 (&
MdCtx
, ":", 1);

712 
	`HTDige°_upd©e
 (&
MdCtx
, 
pszQ›
, 
	`°æí
(pszQop));

713 
	`HTDige°_upd©e
 (&
MdCtx
, ":", 1);

715 
	`HTDige°_upd©e
 (&
MdCtx
, 
HA2Hex
, 
HASHHEXLEN
);

716 
	`HTDige°_föÆ
 (
Re•Hash
, &
MdCtx
);

717 
	`CvtHex
 (
Re•Hash
, 
Re•⁄£
);

718 
	}
}

735 
PRIVATE
 
BOOL
 
	$dige°_¸edítüls
 (
HTReque°
 * 
ªque°
, 
HTDige°
 * 
dige°
)

737 i‡(
ªque°
 && 
dige°
 && dige°->
ªÆm
)

739 * 
ªÆm
 = (*Ë
dige°
->realm;

740 * 
uri
;

741 * 
mëhod
 = (*Ë
	`HTMëhod_«me
 (
	`HTReque°_mëhod
 (
ªque°
));

742 * 
˛óπext
 = 
NULL
;

743 
nc
[9];

744 
HASHHEX
 
HA1
;

745 
HASHHEX
 
HA2
;

746 
HASHHEX
 
ª•⁄£
;

750 i‡(
dige°
->
¥oxy
)

751 
uri
 = 
	`HTReque°_¥oxy
(
ªque°
);

753 * 
tmp
;

755 
tmp
 = 
	`HTAnch‹_addªss
–(
HTAnch‹
*)
	`HTReque°_™ch‹
(
ªque°
));

758 
uri
 = 
	`HTP¨£
 (
tmp
, "", 
PARSE_PATH
 | 
PARSE_PUNCTUATION
);

759 
	`HT_FREE
(
tmp
);

763 
dige°
->
nc
++;

764 
	`•rötf
 (
nc
, "%08lx", 
dige°
->nc);

765 
	`add_∑øm
 (&
˛óπext
, "u£∫ame", 
dige°
->
uid
, 
YES
);

766 
	`add_∑øm
 (&
˛óπext
, "ªÆm", 
ªÆm
, 
YES
);

767 
	`add_∑øm
 (&
˛óπext
, "n⁄˚", 
dige°
->
n⁄˚
, 
YES
);

768 
	`add_∑øm
 (&
˛óπext
, "uri", 
uri
, 
YES
);

770 i‡(
dige°
->
q›
) {

771 
	`add_∑øm
 (&
˛óπext
, "q›", "auth", 
NO
);

772 
	`add_∑øm
 (&
˛óπext
, "nc", 
nc
, 
NO
);

773 
	`add_∑øm
 (&
˛óπext
, "˙⁄˚", 
dige°
->
˙⁄˚
, 
YES
);

778 
	`Dige°CÆcHA1
 (
dige°
->
Æg‹ôhm
, "md5", dige°->
uid
, 
ªÆm
, dige°->
pw
, dige°->
n⁄˚
,

779 
dige°
->
˙⁄˚
, 
HA1
);

780 
	`Dige°CÆcRe•⁄£
 (
dige°
->
Æg‹ôhm
, 
HA1
, dige°->
n⁄˚
, 
nc
, dige°->
˙⁄˚
,

781 
dige°
->
q›
, 
mëhod
, 
uri
, 
HA2
, 
ª•⁄£
);

782 
	`add_∑øm
 (&
˛óπext
, "ª•⁄£", 
ª•⁄£
, 
NO
);

783 
	`add_∑øm
 (&
˛óπext
, "›aque", 
dige°
->
›aque
, 
NO
);

787 
¸_Àn
 = 
	`°æí
 ("Dige°"Ë+ såÀ¿(
˛óπext
) + 3;

788 * 
cookõ
 = (*Ë
	`HT_MALLOC
(
¸_Àn
+1);

789 i‡(!
cookõ
Ë
	`HT_OUTOFMEM
("digest_credentials");

790 
	`°r˝y
(
cookõ
, "Digest ");

791 
	`°rˇt
 (
cookõ
, 
˛óπext
);

792 
	`HTTRACE
(
AUTH_TRACE
, "Dige° Cookõ `%s\'\n" 
_
 
cookõ
);

795 i‡(
dige°
->
¥oxy
)

796 
	`HTReque°_addCªdítüls
(
ªque°
, "Proxy-Authorization",

797 
cookõ
);

799 
	`HTReque°_addCªdítüls
(
ªque°
, "Auth‹iz©i⁄", 
cookõ
);

801 
	`HT_FREE
(
cookõ
);

803 i‡(!
dige°
->
¥oxy
)

804 
	`HT_FREE
(
uri
);

805 
	`HT_FREE
(
˛óπext
);

806  
HT_OK
;

808  
HT_ERROR
;

809 
	}
}

818 
PUBLIC
 
	$HTDige°_gíî©e
 (
HTReque°
 * 
ªque°
, * 
c⁄ãxt
, 
mode
)

820 
HTDige°
 * 
dige°
 = (HTDige° *Ë
c⁄ãxt
;

821 
BOOL
 
¥oxy
 = 
mode
==
HT_NO_PROXY_ACCESS
 ? 
YES
 : 
NO
;

822 i‡(
ªque°
) {

823 c⁄° * 
ªÆm
 = 
	`HTReque°_ªÆm
(
ªque°
);

828 i‡(
mode
 =
HT_REAUTH
 || modê=
HT_PROXY_REAUTH
)

829 
dige°
->
ªåy
 = 
YES
;

835 i‡(!
dige°
) {

836 
dige°
 = 
	`HTDige°_√w
();

837 i‡(
¥oxy
) {

838 * 
uæ
 = 
	`HTReque°_¥oxy
(
ªque°
);

839 
dige°
->
¥oxy
 = 
YES
;

840 
	`HTAA_upd©eNode
(
¥oxy
, 
DIGEST_AUTH
, 
ªÆm
, 
uæ
, 
dige°
);

842 * 
uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
*)
	`HTReque°_™ch‹
(
ªque°
));

843 
	`HTAA_upd©eNode
(
¥oxy
, 
DIGEST_AUTH
, 
ªÆm
, 
uæ
, 
dige°
);

844 
	`HT_FREE
(
uæ
);

852 i‡((
dige°
->
ªåy
 &&

853 
	`¥om±_dige°_u£r
(
ªque°
, 
ªÆm
, 
dige°
Ë=
HT_OK
) ||

854 (!
dige°
->
ªåy
 && dige°->
uid
)) {

856 
	`HTSAC›y
 (&(
dige°
->
˙⁄˚
), "012345678");

857 
dige°
->
ªåy
 = 
NO
;

858  
	`dige°_¸edítüls
(
ªque°
, 
dige°
);

860 * 
uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
*)
	`HTReque°_™ch‹
(
ªque°
));

861 i‡(
¥oxy
)

862 
	`HTAA_dñëeNode
(
¥oxy
, 
DIGEST_AUTH
, 
ªÆm
, 
uæ
);

864 
	`HTAA_dñëeNode
(
¥oxy
, 
DIGEST_AUTH
, 
ªÆm
, 
uæ
);

865 
	`HT_FREE
(
uæ
);

866  
HT_ERROR
;

869  
HT_OK
;

870 
	}
}

877 
PRIVATE
 
BOOL
 
	$n⁄˚_is_°Æe
 (
HTReque°
 *
ªque°
, 
HTDige°
 * 
dige°
, * 
ﬁd_n⁄˚
)

879 i‡(!
dige°
->
uid
 || !dige°->
pw
)

880  
FALSE
;

881 i‡(!
dige°
->
n⁄˚
 || !
ﬁd_n⁄˚
)

882  
FALSE
;

883 i‡(
	`°rcmp
 (
dige°
->
n⁄˚
, 
ﬁd_n⁄˚
))

884  
TRUE
;

887 i‡(!
	`HTReque°_¸edítüls
 (
ªque°
Ë&& 
	`HTReque°_AAªåys
 (request) == 1)

888  
TRUE
;

890  
FALSE
;

891 
	}
}

901 
PUBLIC
 
	$HTDige°_∑r£
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

902 * 
c⁄ãxt
, 
°©us
)

904 
HTAssocLi°
 * 
chÆÀnge
 = 
	`HTRe•⁄£_chÆÀnge
(
ª•⁄£
);

905 
HTDige°
 * 
dige°
 = 
NULL
;

906 
BOOL
 
¥oxy
 = 
°©us
==
HT_NO_PROXY_ACCESS
 ? 
YES
 : 
NO
;

907 i‡(
ªque°
 && 
chÆÀnge
) {

908 * 
p
 = 
	`HTAssocLi°_födObje˘
(
chÆÀnge
, 
DIGEST_AUTH
);

909 * 
ªÆm
 = 
	`HTNextFõld
(&
p
);

910 * 
rm
 = 
	`HTNextFõld
(&
p
);

911 * 
vÆue
 = 
NULL
;

912 * 
tokí
 = 
NULL
;

913 * 
uris
 = 
NULL
;

916 * 
ﬁd_n⁄˚
 = 
NULL
;

922 i‡(
ªÆm
 && !
	`°rˇ£comp
‘ólm, "ªÆm"Ë&& 
rm
) {

923 
	`HTTRACE
(
AUTH_TRACE
, "Dige° P¨£. Rólm `%s\' found\n" 
_
 
rm
);

924 
	`HTReque°_£tRólm
(
ªque°
, 
rm
);

929 i‡(
¥oxy
) {

930 * 
uæ
 = 
	`HTReque°_¥oxy
(
ªque°
);

931 
	`HTTRACE
(
AUTH_TRACE
, "Digest Parse. Proxyáuthentication\n");

932 
dige°
 = (
HTDige°
 *Ë
	`HTAA_upd©eNode
(
¥oxy
, 
DIGEST_AUTH
, 
rm
,

933 
uæ
, 
NULL
);

935 i‡(
	`HTReque°_AAªåys
 (
ªque°
) > 1

936 && 
°©us
 =
HT_NO_ACCESS
 && 
dige°
)

937 
dige°
->
ªåy
 = 
YES
;

939 * 
uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *)

940 
	`HTReque°_™ch‹
(
ªque°
));

941 * 
tm∂©e
 = 
	`make_ãm∂©e
(
uæ
);

942 
dige°
 = (
HTDige°
 *Ë
	`HTAA_upd©eNode
(
¥oxy
, 
DIGEST_AUTH
, 
rm
,

943 
tm∂©e
, 
NULL
);

945 i‡(
	`HTReque°_AAªåys
 (
ªque°
) > 1

946 && 
°©us
 =
HT_NO_ACCESS
 && 
dige°
)

947 
dige°
->
ªåy
 = 
YES
;

948 
	`HT_FREE
(
tm∂©e
);

949 
	`HT_FREE
(
uæ
);

952 
	`HTTRACE
(
AUTH_TRACE
, "Digest Parse. Missing or incompleteÑealm\n");

953  
HT_ERROR
;

960 i‡(
dige°
) {

964 
ﬁd_n⁄˚
 = 
dige°
->
n⁄˚
;

965 
dige°
->
n⁄˚
 = 
NULL
;

966 
	`HTDige°_ª£t
 (
dige°
);

969 
dige°
 = 
	`HTDige°_√w
();

970 
	`SåAŒocC›y
 (
dige°
->
ªÆm
, 
rm
);

978 (
tokí
 = 
	`HTNextFõld
(&
p
))) {

979 i‡(!
	`°rˇ£comp
(
tokí
, "domain")) {

980 i‡((
vÆue
 = 
	`HTNextFõld
(&
p
)))

981 
uris
 = 
vÆue
;

982 } i‡(!
	`°rˇ£comp
(
tokí
, "nonce")) {

983 i‡((
vÆue
 = 
	`HTNextFõld
(&
p
)))

984 
	`SåAŒocC›y
(
dige°
->
n⁄˚
, 
vÆue
);

985 } i‡(!
	`°rˇ£comp
(
tokí
, "opaque")) {

986 i‡((
vÆue
 = 
	`HTNextFõld
(&
p
)))

987 
	`SåAŒocC›y
(
dige°
->
›aque
, 
vÆue
);

988 } i‡(!
	`°rˇ£comp
(
tokí
, "qop")) {

990 i‡((
vÆue
 = 
	`HTNextFõld
(&
p
)))

991 
	`SåAŒocC›y
(
dige°
->
q›
, 
vÆue
);

992 } i‡(!
	`°rˇ£comp
(
tokí
, "stale")) {

993 i‡((
vÆue
 = 
	`HTNextFõld
(&
p
)Ë&& !
	`°rˇ£comp
(value, "true")) {

995 i‡(
dige°
->
uid
 && dige°->
pw
) {

996 
dige°
->
°Æe
 = 
YES
;

999 } i‡(!
	`°rˇ£comp
(
tokí
, "algorithm")) {

1000 i‡((
vÆue
 = 
	`HTNextFõld
(&
p
)Ë&& 
	`°rˇ£comp
(value, "md5")) {

1004 
	`HTTRACE
(
AUTH_TRACE
, "Dige° P¨£ Unknow¿Æg‹ôhm `%s\'\n" 
_
 
vÆue
);

1005 
	`HTDige°_dñëe
(
dige°
);

1006 i‡(
ﬁd_n⁄˚
)

1007 
	`HT_FREE
 (
ﬁd_n⁄˚
);

1008  
HT_ERROR
;

1010 
dige°
->
Æg‹ôhm
 = 
HTDaMD5
;

1022 i‡(!
dige°
->
°Æe
 && 
	`n⁄˚_is_°Æe
 (
ªque°
, dige°, 
ﬁd_n⁄˚
))

1023 
dige°
->
°Æe
 = 
YES
;

1025 i‡(
ﬁd_n⁄˚
)

1026 
	`HT_FREE
 (
ﬁd_n⁄˚
);

1028 i‡(
dige°
->
°Æe
) {

1029 
dige°
->
°Æe
 = 
NO
;

1030 
dige°
->
ªåy
 = 
NO
;

1031  
HT_OK
;

1033 i‡(
dige°
->
uid
 || dige°->
pw
) {

1040 
HTAÀπCÆlback
 * 
¥om±
 = 
	`HTAÀπ_föd
(
HT_A_CONFIRM
);

1046 i‡(
¥om±
) {

1047 
code
 = 
¥oxy
 ?

1048 
HT_MSG_RETRY_PROXY_AUTH
 : 
HT_MSG_RETRY_AUTHENTICATION
;

1049 i‡((*
¥om±
)(
ªque°
, 
HT_A_CONFIRM
, 
code
,

1050 
NULL
, NULL, NULLË!
YES
)

1051  
HT_ERROR
;

1052  
HT_OK
;

1054  
HT_ERROR
;

1061 i‡(!
uris
) {

1062 i‡(
¥oxy
) {

1064 * 
loˇti⁄
 = 
	`HTReque°_¥oxy
(
ªque°
);

1065 
	`HTTRACE
(
AUTH_TRACE
, "Digest Parse Proxyáuthentication\n");

1066 
	`HTAA_upd©eNode
(
¥oxy
, 
DIGEST_AUTH
, 
rm
, 
loˇti⁄
, 
dige°
);

1068 * 
uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
	`HTReque°_™ch‹
(
ªque°
));

1069 * 
tm∂©e
 = 
	`make_ãm∂©e
(
uæ
);

1070 
	`HTAA_upd©eNode
(
¥oxy
, 
DIGEST_AUTH
, 
rm
, 
tm∂©e
, 
dige°
);

1071 
	`HT_FREE
(
uæ
);

1072 
	`HT_FREE
(
tm∂©e
);

1075 * 
ba£_uæ
 =

1076 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
	`HTReque°_™ch‹
(
ªque°
));

1077 * 
domaö_uæ
;

1078 * 
fuŒ_uæ
;

1080 (
domaö_uæ
 = 
	`HTNextFõld
 (&
uris
))) {

1082 
fuŒ_uæ
 = 
	`HTP¨£
 (
domaö_uæ
, 
ba£_uæ
, 
PARSE_ALL
);

1083 
dige°
->
ª„ªn˚s
++;

1084 i‡(
¥oxy
) {

1085 
	`HTTRACE
(
AUTH_TRACE
, "Digest Parse Proxyáuthentication\n");

1086 
	`HTAA_upd©eNode
(
¥oxy
, 
DIGEST_AUTH
, 
rm
, 
fuŒ_uæ
, 
dige°
);

1088 * 
tm∂©e
 = 
	`make_ãm∂©e
(
fuŒ_uæ
);

1089 
	`HTAA_upd©eNode
 (
¥oxy
, 
DIGEST_AUTH
, 
rm
, 
tm∂©e
, 
dige°
);

1090 
	`HT_FREE
 (
tm∂©e
);

1092 
	`HT_FREE
 (
fuŒ_uæ
);

1094 
	`HT_FREE
 (
ba£_uæ
);

1096  
HT_OK
;

1098 
	`HTTRACE
(
AUTH_TRACE
, "Auth........ No challenges found\n");

1099  
HT_ERROR
;

1100 
	}
}

	@Library/src/HTAABrow.h

31 #i‚de‡
HTAABROW_H


32 
	#HTAABROW_H


	)

33 
	~"HTUTªe.h
"

34 
	~"HTNë.h
"

44 
HTNëBef‹e
 
HTBasic_gíî©e
;

45 
HTNëA·î
 
HTBasic_∑r£
;

46 
HTUTªe_gc
 
HTBasic_dñëe
;

56 
HTNëBef‹e
 
HTDige°_gíî©e
;

57 
HTNëA·î
 
HTDige°_∑r£
;

58 
HTNëA·î
 
HTDige°_upd©eInfo
;

59 
HTUTªe_gc
 
HTDige°_dñëe
;

	@Library/src/HTAAUtil.c

34 
	~"wwwsys.h
"

35 
	~"WWWUtû.h
"

36 
	~"WWWC‹e.h
"

37 
	~"HTAAUtû.h
"

39 
	#AA_TREE
 "w3c-AA"

	)

40 
	#AA_PROXY_TREE
 "w3c-¥oxy-AA"

	)

41 
	#DEFAULT_PORT
 80

	)

43 
	s_HTAAModuÀ
 {

44 * 
	mscheme
;

45 
HTNëBef‹e
 * 
	mbef‹e
;

46 
HTNëA·î
 * 
	ma·î
;

47 
HTNëA·î
 * 
	mupd©e
;

48 
HTUTªe_gc
 * 
	mgc
;

51 
	s_HTAAEÀmít
 {

52 * 
	mscheme
;

53 * 
	mc⁄ãxt
;

54 } 
	tHTAAEÀmít
;

56 
PRIVATE
 
HTLi°
 * 
	gHTSchemes
;

62 
PRIVATE
 
BOOL
 
	$dñëe_moduÀ
 (
HTAAModuÀ
 * 
moduÀ
)

64 i‡(
moduÀ
) {

65 
	`HT_FREE
(
moduÀ
->
scheme
);

66 
	`HT_FREE
(
moduÀ
);

67  
YES
;

69  
NO
;

70 
	}
}

72 
PRIVATE
 
HTAAModuÀ
 * 
	$föd_moduÀ
 (c⁄° * 
scheme
)

74 i‡(!
HTSchemes
ËHTScheme†
	`HTLi°_√w
();

75 i‡(
scheme
) {

76 
HTLi°
 * 
cur
 = 
HTSchemes
;

77 
HTAAModuÀ
 * 
¥es
 = 
NULL
;

78 (
¥es
 = (
HTAAModuÀ
 *Ë
	`HTLi°_√xtObje˘
(
cur
)))

79 i‡(!
	`°rˇ£comp
(
¥es
->
scheme
, scheme)) Öres;

81 
	`HTTRACE
(
AUTH_TRACE
, "Auth Engine. Badárgument\n");

82  
NULL
;

83 
	}
}

85 
PUBLIC
 
HTAAModuÀ
 * 
	$HTAA_√wModuÀ
 (c⁄° * 
scheme
,

86 
HTNëBef‹e
 * 
bef‹e
,

87 
HTNëA·î
 * 
a·î
,

88 
HTNëA·î
 * 
upd©e
,

89 
HTUTªe_gc
 * 
gc
)

91 i‡(
scheme
) {

92 
HTAAModuÀ
 * 
¥es
 = 
	`föd_moduÀ
(
scheme
);

95 i‡(!
¥es
) {

96 i‡(!(
¥es
 = (
HTAAModuÀ
 *Ë
	`HT_CALLOC
(1, (HTAAModule))))

97 
	`HT_OUTOFMEM
("HTAA_newModule");

98 
	`SåAŒocC›y
(
¥es
->
scheme
, scheme);

99 
¥es
->
bef‹e
 = before;

100 
¥es
->
a·î
 =áfter;

101 
¥es
->
upd©e
 = update;

102 
¥es
->
gc
 = gc;

105 
	`HTLi°_addObje˘
(
HTSchemes
, (*Ë
¥es
);

106 
	`HTTRACE
(
AUTH_TRACE
, "Auth Engöe. Cª©ed moduÀ %p\n" 
_
 
¥es
);

108 
	`HTTRACE
(
AUTH_TRACE
, "Auth Engöe. Found moduÀ %p\n" 
_
 
¥es
);

110  
¥es
;

112 
	`HTTRACE
(
AUTH_TRACE
, "Auth Engine. Badárgument\n");

113  
NULL
;

115 
	}
}

117 
PUBLIC
 
HTAAModuÀ
 * 
	$HTAA_födModuÀ
 (c⁄° * 
scheme
)

119 i‡(
scheme
) {

120 
HTAAModuÀ
 * 
¥es
 = 
	`föd_moduÀ
(
scheme
);

121 
	`HTTRACE
(
AUTH_TRACE
, "Auth Engöe. did %sföd %s\n" 
_
 
¥es
 ? "" : "NOT " _ 
scheme
);

122  
¥es
;

124 
	`HTTRACE
(
AUTH_TRACE
, "Auth Engine. Badáugument\n");

126  
NULL
;

127 
	}
}

129 
PUBLIC
 
BOOL
 
	$HTAA_dñëeModuÀ
 (c⁄° * 
scheme
)

131 i‡(
scheme
) {

132 
HTAAModuÀ
 * 
¥es
 = 
	`föd_moduÀ
(
scheme
);

133 i‡(
¥es
) {

134 
	`HTLi°_ªmoveObje˘
(
HTSchemes
, 
¥es
);

135 
	`HTTRACE
(
AUTH_TRACE
, "Auth Engöe. dñëed %p\n" 
_
 
¥es
);

136 
	`dñëe_moduÀ
(
¥es
);

137  
YES
;

140  
NO
;

141 
	}
}

143 
PUBLIC
 
BOOL
 
	$HTAA_dñëeAŒModuÀs
 ()

145 i‡(
HTSchemes
) {

146 
HTLi°
 * 
cur
 = 
HTSchemes
;

147 
HTAAModuÀ
 * 
¥es
;

148 (
¥es
 = (
HTAAModuÀ
 *Ë
	`HTLi°_√xtObje˘
(
cur
)))

149 
	`dñëe_moduÀ
(
¥es
);

150 
	`HTLi°_dñëe
(
HTSchemes
);

151 
HTSchemes
 = 
NULL
;

152  
YES
;

154  
NO
;

155 
	}
}

167 
PRIVATE
 
HTAAEÀmít
 * 
	$HTAA_√wEÀmít
 (c⁄° * 
scheme
, * 
c⁄ãxt
)

169 i‡(
scheme
) {

170 
HTAAEÀmít
 * 
me
;

171 i‡((
me
 = (
HTAAEÀmít
 *Ë
	`HT_CALLOC
(1, (HTAAEÀmít))Ë=
NULL
)

172 
	`HT_OUTOFMEM
("HTAAElement_new");

173 
	`SåAŒocC›y
(
me
->
scheme
, scheme);

174 
me
->
c⁄ãxt
 = context;

175 
	`HTTRACE
(
AUTH_TRACE
, "Auth Engöe. Cª©edÉÀmíà%p\n" 
_
 
me
);

176  
me
;

178  
NULL
;

179 
	}
}

186 
PRIVATE
 
BOOL
 
	$HTAA_upd©eEÀmít
 (
HTAAEÀmít
 * 
ñemít
,

187 c⁄° * 
scheme
, * 
c⁄ãxt
)

189 i‡(
ñemít
 && 
scheme
) {

194 i‡(
c⁄ãxt
 && c⁄ãxà!
ñemít
->context) {

195 
HTAAModuÀ
 * 
moduÀ
 = 
	`HTAA_födModuÀ
(
ñemít
->
scheme
);

196 i‡(
moduÀ
 && moduÀ->
gc
 && 
ñemít
->
c⁄ãxt
)

197 (*
moduÀ
->
gc
)(
ñemít
->
c⁄ãxt
);

201 
	`SåAŒocC›y
(
ñemít
->
scheme
, scheme);

202 
ñemít
->
c⁄ãxt
 = context;

204  
YES
;

206  
NO
;

207 
	}
}

209 
PRIVATE
 
	$HTAA_dñëeEÀmít
 (* 
c⁄ãxt
)

211 
HTAAEÀmít
 * 
me
 = (HTAAEÀmíà*Ë
c⁄ãxt
;

212 i‡(
me
) {

213 
HTAAModuÀ
 * 
moduÀ
 = 
	`HTAA_födModuÀ
(
me
->
scheme
);

216 i‡(
moduÀ
 && moduÀ->
gc
 && 
me
->
c⁄ãxt
)

217 (*
moduÀ
->
gc
)(
me
->
c⁄ãxt
);

219 
	`HTTRACE
(
AUTH_TRACE
, "Auth Engöe. DñëedÉÀmíà%p\n" 
_
 
me
);

220 
	`HT_FREE
(
me
->
scheme
);

221 
	`HT_FREE
(
me
);

222  
YES
;

224  
NO
;

225 
	}
}

240 
PRIVATE
 
HTAAEÀmít
 * 
	$HTAA_födEÀmít
 (
BOOL
 
¥oxy_ac˚ss
,

241 c⁄° * 
ªÆm
, c⁄° * 
uæ
)

243 
HTUTªe
 * 
åì
;

244 i‡(!
uæ
) {

245 
	`HTTRACE
(
AUTH_TRACE
, "Auth Engine. Badárgument\n");

246  
NULL
;

248 
	`HTTRACE
(
AUTH_TRACE
, "Auth Engöe. Lookög u∞`%s'\n" 
_
 
uæ
);

252 * 
ho°
 = 
	`HTP¨£
(
uæ
, "", 
PARSE_HOST
);

253 * 
cﬁ⁄
 = 
	`°rchr
(
ho°
, ':');

254 
p‹t
 = 
DEFAULT_PORT
;

255 i‡(
cﬁ⁄
 ) {

256 *(
cﬁ⁄
++) = '\0';

257 
p‹t
 = 
	`©oi
(
cﬁ⁄
);

259 
åì
 = 
	`HTUTªe_föd
(
¥oxy_ac˚ss
 ? 
AA_PROXY_TREE
 : 
AA_TREE
, 
ho°
,
p‹t
);

260 
	`HT_FREE
(
ho°
);

261 i‡(!
åì
) {

262 
	`HTTRACE
(
AUTH_TRACE
, "Auth Engine. No information\n");

263  
NULL
;

269 * 
∑th
 = 
	`HTP¨£
(
uæ
, "", 
PARSE_PATH
 | 
PARSE_PUNCTUATION
);

270 
HTAAEÀmít
 *
ñemít
 = (HTAAEÀmít*)
	`HTUTªe_födNode
(
åì
,
ªÆm
,
∑th
);

271 
	`HT_FREE
(
∑th
);

272  
ñemít
;

274  
NULL
;

275 
	}
}

282 
PUBLIC
 * 
	$HTAA_upd©eNode
 (
BOOL
 
¥oxy_ac˚ss
, c⁄° * 
scheme
,

283 c⁄° * 
ªÆm
, c⁄° * 
uæ
,

284 * 
c⁄ãxt
)

286 
HTUTªe
 * 
åì
 = 
NULL
;

287 
HTAAModuÀ
 * 
moduÀ
 = 
NULL
;

288 i‡(!
scheme
 || !
uæ
) {

289 
	`HTTRACE
(
AUTH_TRACE
, "Auth Engine. Badárgument\n");

290  
NULL
;

292 
	`HTTRACE
(
AUTH_TRACE
, "Auth Engöe. Addög infÿf‹ `%s'\n" 
_
 
uæ
);

295 i‡((
moduÀ
 = 
	`HTAA_födModuÀ
(
scheme
)Ë=
NULL
) {

296 
	`HTTRACE
(
AUTH_TRACE
, "Auth Engöe. ModuÀ `%s\'ÇŸÑegi°îed\n" 
_


297 
scheme
 ? scheme : "<null>");

298  
NULL
;

303 * 
ho°
 = 
	`HTP¨£
(
uæ
, "", 
PARSE_HOST
);

304 * 
cﬁ⁄
 = 
	`°rchr
(
ho°
, ':');

305 
p‹t
 = 
DEFAULT_PORT
;

306 i‡(
cﬁ⁄
 ) {

307 *(
cﬁ⁄
++) = '\0';

308 
p‹t
 = 
	`©oi
(
cﬁ⁄
);

310 
åì
 = 
	`HTUTªe_√w
(
¥oxy_ac˚ss
 ? 
AA_PROXY_TREE
 : 
AA_TREE
,

311 
ho°
, 
p‹t
, 
HTAA_dñëeEÀmít
);

312 
	`HT_FREE
(
ho°
);

313 i‡(!
åì
) {

314 
	`HTTRACE
(
AUTH_TRACE
, "Auth Engine. Can't createÅree\n");

315  
NULL
;

321 * 
∑th
 = 
	`HTP¨£
(
uæ
, "", 
PARSE_PATH
 | 
PARSE_PUNCTUATION
);

322 
HTAAEÀmít
 * 
ñemít
 = 
NULL
;

323 
BOOL
 
°©us
;

324 i‡((
ñemít
 = (
HTAAEÀmít
 *Ë
	`HTUTªe_födNode
(
åì
, 
ªÆm
, 
∑th
))

325 && 
ñemít
->
scheme
 && !
	`°rˇ£comp
 (element->scheme, scheme))

326 
°©us
 = 
	`HTAA_upd©eEÀmít
(
ñemít
, 
scheme
, 
c⁄ãxt
);

329 
ñemít
 = 
	`HTAA_√wEÀmít
(
scheme
, 
c⁄ãxt
);

330 
°©us
 = 
	`HTUTªe_addNode
(
åì
, 
ªÆm
, 
∑th
, 
ñemít
);

332 
	`HT_FREE
(
∑th
);

333  
°©us
==
YES
 ? 
ñemít
->
c⁄ãxt
 : 
NULL
;

335 
	}
}

342 
PUBLIC
 
BOOL
 
	$HTAA_dñëeNode
 (
BOOL
 
¥oxy_ac˚ss
, c⁄° * 
scheme
,

343 c⁄° * 
ªÆm
, c⁄° * 
uæ
)

345 
HTUTªe
 * 
åì
 = 
NULL
;

346 
HTAAModuÀ
 * 
moduÀ
 = 
NULL
;

347 i‡(!
scheme
 || !
uæ
) {

348 
	`HTTRACE
(
AUTH_TRACE
, "Auth Engine. Badárgument\n");

349  
NO
;

351 
	`HTTRACE
(
AUTH_TRACE
, "Auth Engöe. Dñëög infÿf‹ `%s'\n" 
_
 
uæ
);

354 i‡((
moduÀ
 = 
	`HTAA_födModuÀ
(
scheme
)Ë=
NULL
) {

355 
	`HTTRACE
(
AUTH_TRACE
, "Auth Engöe. ModuÀ `%s\'ÇŸÑegi°îed\n" 
_


356 
scheme
 ? scheme : "<null>");

357  
NO
;

362 * 
ho°
 = 
	`HTP¨£
(
uæ
, "", 
PARSE_HOST
);

363 * 
cﬁ⁄
 = 
	`°rchr
(
ho°
, ':');

364 
p‹t
 = 
DEFAULT_PORT
;

365 i‡(
cﬁ⁄
 ) {

366 *(
cﬁ⁄
++) = '\0';

367 
p‹t
 = 
	`©oi
(
cﬁ⁄
);

369 
åì
 = 
	`HTUTªe_√w
(
¥oxy_ac˚ss
 ? 
AA_PROXY_TREE
 : 
AA_TREE
,

370 
ho°
, 
p‹t
, 
HTAA_dñëeEÀmít
);

371 
	`HT_FREE
(
ho°
);

372 i‡(!
åì
) {

373 
	`HTTRACE
(
AUTH_TRACE
, "Auth Engine. Can't createÅree\n");

374  
NO
;

380 * 
∑th
 = 
	`HTP¨£
(
uæ
, "", 
PARSE_PATH
 | 
PARSE_PUNCTUATION
);

381 
BOOL
 
°©us
 = 
	`HTUTªe_dñëeNode
(
åì
, 
ªÆm
, 
∑th
);

382 
	`HT_FREE
(
∑th
);

383  
°©us
;

385 
	}
}

398 
PUBLIC
 
	$HTAA_bef‹eFûãr
 (
HTReque°
 * 
ªque°
, * 
∑øm
, 
mode
)

400 * 
uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
	`HTReque°_™ch‹
(
ªque°
));

401 c⁄° * 
ªÆm
 = 
	`HTReque°_ªÆm
(
ªque°
);

402 
HTAAEÀmít
 * 
ñemít
 = 
	`HTAA_födEÀmít
(
NO
, 
ªÆm
, 
uæ
);

403 
	`HT_FREE
(
uæ
);

406 i‡(
ñemít
) {

407 
HTAAModuÀ
 * 
moduÀ
 = 
	`HTAA_födModuÀ
(
ñemít
->
scheme
);

408 i‡(
moduÀ
) {

409 
	`HTTRACE
(
AUTH_TRACE
, "Auth Engöe. Found BEFORE fûã∏%p\n" 
_


410 
moduÀ
->
bef‹e
);

411  (*
moduÀ
->
bef‹e
)(
ªque°
, 
ñemít
->
c⁄ãxt
, 
mode
);

414  
HT_OK
;

415 
	}
}

422 
PUBLIC
 
	$HTAA_a·îFûãr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

423 * 
∑øm
, 
°©us
)

425 c⁄° * 
scheme
 = 
	`HTRe•⁄£_scheme
(
ª•⁄£
);

426 
HTAAModuÀ
 * 
moduÀ
 = 
NULL
;

427 
	`HTTRACE
(
AUTH_TRACE
, "Auth Engöe. A·î fûã∏°©u†%d\n" 
_
 
°©us
);

432 i‡(!
scheme
) {

433 
	`HTRe•⁄£_addChÆÀnge
(
ª•⁄£
, "basic", "realm LIBWWW-UNKNOWN");

434 
scheme
 = "basic";

436 i‡((
moduÀ
 = 
	`HTAA_födModuÀ
(
scheme
)Ë!
NULL
) {

437 
	`HTTRACE
(
AUTH_TRACE
, "Auth Engöe. Found AFTER fûã∏%p\n" 
_
 
moduÀ
->
a·î
);

438 
	`HTReque°_dñëeCªdítülsAŒ
(
ªque°
);

439 
	`HTReque°_addAARëry
 (
ªque°
);

440  (*
moduÀ
->
a·î
)(
ªque°
, 
ª•⁄£
, 
NULL
, 
°©us
);

442  
HT_ERROR
;

443 
	}
}

450 
PUBLIC
 
	$HTAA_upd©eFûãr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

451 * 
∑øm
, 
°©us
)

453 c⁄° * 
scheme
 = 
	`HTRe•⁄£_scheme
(
ª•⁄£
);

454 
HTAAModuÀ
 * 
moduÀ
 = 
NULL
;

455 
	`HTTRACE
(
AUTH_TRACE
, "Auth Engöe. Upd©êfûã∏°©u†%d\n" 
_
 
°©us
);

460 i‡(!
scheme
) {

461 
	`HTRe•⁄£_addChÆÀnge
(
ª•⁄£
, "basic", "realm LIBWWW-UNKNOWN");

462 
scheme
 = "basic";

464 i‡((
moduÀ
 = 
	`HTAA_födModuÀ
(
scheme
)Ë!
NULL
) {

467 i‡(
moduÀ
->
upd©e
) {

468 
	`HTTRACE
(
AUTH_TRACE
, "Auth Engöe. Found Upd©êfûã∏%p\n" 
_
 
moduÀ
->
upd©e
);

469 
	`HTReque°_dñëeCªdítülsAŒ
(
ªque°
);

470  (*
moduÀ
->
upd©e
)(
ªque°
, 
ª•⁄£
, 
NULL
, 
°©us
);

472  
HT_OK
;

474  
HT_ERROR
;

475 
	}
}

485 
PUBLIC
 
	$HTAA_¥oxyBef‹eFûãr
 (
HTReque°
 * 
ªque°
, * 
∑øm
, 
mode
)

487 * 
uæ
 = 
	`HTReque°_¥oxy
(
ªque°
);

493 i‡(
uæ
) {

494 c⁄° * 
ªÆm
 = 
	`HTReque°_ªÆm
(
ªque°
);

495 
HTAAEÀmít
 * 
ñemít
 = 
	`HTAA_födEÀmít
(
YES
, 
ªÆm
, 
uæ
);

498 i‡(
ñemít
) {

499 
HTAAModuÀ
 * 
moduÀ
 = 
	`HTAA_födModuÀ
(
ñemít
->
scheme
);

500 i‡(
moduÀ
) {

501 
	`HTTRACE
(
AUTH_TRACE
, "Auth Engöe. Found Proxy BEFORE fûã∏%∞wôh c⁄ãxà%p\n" 
_


502 
moduÀ
->
bef‹e
 
_
 
ñemít
->
c⁄ãxt
);

503  (*
moduÀ
->
bef‹e
)(
ªque°
, 
ñemít
->
c⁄ãxt
, 
HT_NO_PROXY_ACCESS
);

507  
HT_OK
;

508 
	}
}

	@Library/src/HTAAUtil.h

89 #i‚de‡
HTAAUTIL_H


90 
	#HTAAUTIL_H


	)

91 
	~"HTReq.h
"

92 
	~"HTNë.h
"

93 
	~"HTUTªe.h
"

110 
_HTAAModuÀ
 
	tHTAAModuÀ
;

112 
HTAAModuÀ
 * 
HTAA_√wModuÀ
 (c⁄° * 
scheme
,

113 
HTNëBef‹e
 * 
bef‹e
,

114 
HTNëA·î
 * 
a·î
,

115 
HTNëA·î
 * 
upd©e
,

116 
HTUTªe_gc
 * 
gc
);

123 
HTAAModuÀ
 * 
HTAA_födModuÀ
 (c⁄° * 
scheme
);

130 
BOOL
 
HTAA_dñëeModuÀ
 (c⁄° * 
scheme
);

137 
BOOL
 
HTAA_dñëeAŒModuÀs
 ();

166 * 
HTAA_upd©eNode
 (
BOOL
 
¥oxy
,

167 c⁄° * 
scheme
,

168 c⁄° * 
ªÆm
, c⁄° * 
uæ
,

169 * 
c⁄ãxt
);

180 
BOOL
 
HTAA_dñëeNode
 (BOOL 
¥oxy_ac˚ss
, c⁄° * 
scheme
,

181 c⁄° * 
ªÆm
, c⁄° * 
uæ
);

200 
HTNëBef‹e
 
	gHTAA_bef‹eFûãr
;

210 
HTNëA·î
 
	gHTAA_a·îFûãr
;

220 
HTNëA·î
 
	gHTAA_upd©eFûãr
;

238 
HTNëBef‹e
 
	gHTAA_¥oxyBef‹eFûãr
;

	@Library/src/HTANSI.c

13 
	~"wwwsys.h
"

14 
	~"WWWUtû.h
"

15 
	~"WWWC‹e.h
"

16 
	~"HTNëM™.h
"

17 
	~"HTANSI.h
"

19 
	~"HTH°M™.h
"

21 
	s_HTSåóm
 {

22 c⁄° 
HTSåómCœss
 * 
	miß
;

26 
	s_HTI≈utSåóm
 {

27 c⁄° 
HTI≈utSåómCœss
 * 
	miß
;

28 
HTCh™√l
 * 
	mch
;

29 
HTHo°
 * 
	mho°
;

30 * 
	mwrôe
;

31 * 
	mªad
;

32 
	mb_ªad
;

33 
	md©a
 [
FILE_BUFFER_SIZE
];

36 
	s_HTOuçutSåóm
 {

37 c⁄° 
HTOuçutSåómCœss
 * 
	miß
;

38 
HTCh™√l
 * 
	mch
;

39 
HTHo°
 * 
	mho°
;

40 
FILE
 * 
	mÂ
;

47 
PRIVATE
 
	$HTANSIRódî_Êush
 (
HTI≈utSåóm
 * 
me
)

49 
HTNë
 * 
√t
 = 
	`HTHo°_gëRódNë
(
me
->
ho°
);

50  
√t
 &&Çë->
ªadSåóm
 ?

51 (*
√t
->
ªadSåóm
->
iß
->
Êush
)“ë->ªadSåómË: 
HT_OK
;

52 
	}
}

54 
PRIVATE
 
	$HTANSIRódî_‰ì
 (
HTI≈utSåóm
 * 
me
)

56 
HTNë
 * 
√t
 = 
	`HTHo°_gëRódNë
(
me
->
ho°
);

57 i‡(
√t
 &&Çë->
ªadSåóm
) {

58 
°©us
 = (*
√t
->
ªadSåóm
->
iß
->
_‰ì
)(net->readStream);

59 i‡(
°©us
 =
HT_OK
Ë
√t
->
ªadSåóm
 = 
NULL
;

60  
°©us
;

62  
HT_OK
;

63 
	}
}

65 
PRIVATE
 
	$HTANSIRódî_ab‹t
 (
HTI≈utSåóm
 * 
me
, 
HTLi°
 * 
e
)

67 
HTNë
 * 
√t
 = 
	`HTHo°_gëRódNë
(
me
->
ho°
);

68 i‡(
√t
 &&Çë->
ªadSåóm
) {

69 
°©us
 = (*
√t
->
ªadSåóm
->
iß
->
ab‹t
)“ë->ªadSåóm, 
NULL
);

70 i‡(
°©us
 !
HT_IGNORE
Ë
√t
->
ªadSåóm
 = 
NULL
;

72  
HT_ERROR
;

73 
	}
}

75 
PRIVATE
 
	$HTANSIRódî_ªad
 (
HTI≈utSåóm
 * 
me
)

77 
FILE
 * 
Â
 = 
	`HTCh™√l_fûe
(
me
->
ch
);

78 
HTNë
 * 
√t
 = 
	`HTHo°_gëRódNë
(
me
->
ho°
);

79 
°©us
;

82 
Â
) {

83 i‡((
me
->
b_ªad
 = 
	`‰ód
(me->
d©a
, 1, 
FILE_BUFFER_SIZE
, 
Â
)) == 0){

84 i‡(
	`„º‹
(
Â
)) {

85 
	`HTTRACE
(
PROT_TRACE
, "ANSIÑead... READ ERROR\n");

87 
HTAÀπCÆlback
 *
cbf
 = 
	`HTAÀπ_föd
(
HT_PROG_DONE
);

88 
	`HTTRACE
(
PROT_TRACE
, "ANSIÑód... FöishedÜﬂdög fûê%p\n" 
_
 
Â
);

89 i‡(
cbf
Ë(*cbf)(
√t
->
ªque°
, 
HT_PROG_DONE
, 
HT_MSG_NULL
,
NULL
,NULL,NULL);

90  
HT_CLOSED
;

95 
	`HTTRACEDATA
(
me
->
d©a
, me->
b_ªad
, "HTANSIReader_read me->data:");

96 
me
->
wrôe
 = me->
d©a
;

97 
me
->
ªad
 = me->
d©a
 + me->
b_ªad
;

100 
HTAÀπCÆlback
 * 
cbf
 = 
	`HTAÀπ_föd
(
HT_PROG_READ
);

101 
	`HTNë_addByãsRód
(
√t
, 
me
->
b_ªad
);

102 i‡(
cbf
) {

103 
å
 = 
	`HTNë_byãsRód
(
√t
);

104 (*
cbf
)(
√t
->
ªque°
, 
HT_PROG_READ
, 
HT_MSG_NULL
, 
NULL
, &
å
, NULL);

109 i‡((
°©us
 = (*
√t
->
ªadSåóm
->
iß
->
put_block
)

110 (
√t
->
ªadSåóm
, 
me
->
d©a
, me->
b_ªad
)Ë!
HT_OK
) {

111 i‡(
°©us
 =
HT_WOULD_BLOCK
) {

112 
	`HTTRACE
(
PROT_TRACE
, "ANSIÑead... Target WOULD BLOCK\n");

113  
HT_WOULD_BLOCK
;

114 } i‡(
°©us
 =
HT_PAUSE
) {

115 
	`HTTRACE
(
PROT_TRACE
, "ANSIÑead... Target PAUSED\n");

116  
HT_PAUSE
;

117 } i‡(
°©us
 > 0) {

118 
	`HTTRACE
(
PROT_TRACE
, "ANSIÑód... T¨gëÑëu∫†%d\n" 
_
 
°©us
);

119 
me
->
wrôe
 = me->
d©a
 + me->
b_ªad
;

120  
°©us
;

122 
	`HTTRACE
(
PROT_TRACE
, "ANSIÑead... Target ERROR\n");

123  
°©us
;

126 
me
->
wrôe
 = me->
d©a
 + me->
b_ªad
;

128 
	`HTTRACE
(
PROT_TRACE
, "ANSIÑead... File descriptor is NULL...\n");

129  
HT_ERROR
;

130 
	}
}

138 
PRIVATE
 
	$HTANSIRódî_˛o£
 (
HTI≈utSåóm
 * 
me
)

140 
	`HTTRACE
(
PROT_TRACE
, "ANSIÑead... FREEING...\n");

141 
	`HT_FREE
(
me
);

142  
HT_OK
;

143 
	}
}

145 
PRIVATE
 
	$HTANSIRódî_c⁄sumed
 (
HTI≈utSåóm
 * 
me
, 
size_t
 
byãs
)

147 
	`HTTRACE
(
PROT_TRACE
, "ANSIÑód... c⁄sumed %d byãs\n" 
_
 
byãs
);

148  
HT_OK
;

149 
	}
}

151 
PRIVATE
 c⁄° 
HTI≈utSåómCœss
 
	gHTANSIRódî
 =

154 
HTANSIRódî_Êush
,

155 
HTANSIRódî_‰ì
,

156 
HTANSIRódî_ab‹t
,

157 
HTANSIRódî_ªad
,

158 
HTANSIRódî_˛o£
,

159 
HTANSIRódî_c⁄sumed


162 
PUBLIC
 
HTI≈utSåóm
 * 
	$HTANSIRódî_√w
 (
HTHo°
 * 
ho°
, 
HTCh™√l
 * 
ch
,

163 * 
∑øm
,

164 
mode
)

166 i‡(
ho°
 && 
ch
) {

167 
HTI≈utSåóm
 * 
me
 = 
	`HTCh™√l_öput
(
ch
);

168 i‡(
me
 =
NULL
) {

169 i‡((
me
=(
HTI≈utSåóm
 *Ë
	`HT_CALLOC
(1, (HTI≈utSåóm))Ë=
NULL
)

170 
	`HT_OUTOFMEM
("HTANSIReader_new");

171 
me
->
iß
 = &
HTANSIRódî
;

172 
me
->
ch
 = ch;

174 
me
->
ho°
 = host;

175  
me
;

177  
NULL
;

178 
	}
}

184 
PRIVATE
 
	$HTANSIWrôî_Êush
 (
HTOuçutSåóm
 * 
me
)

186  (
	`fÊush
(
me
->
Â
Ë=
EOF
Ë? 
HT_ERROR
 : 
HT_OK
;

187 
	}
}

189 
PRIVATE
 
	$HTANSIWrôî_‰ì
 (
HTOuçutSåóm
 * 
me
)

191  
HT_OK
;

192 
	}
}

194 
PRIVATE
 
	$HTANSIWrôî_ab‹t
 (
HTOuçutSåóm
 * 
me
, 
HTLi°
 * 
e
)

196 
	`HTTRACE
(
PROT_TRACE
, "ANSI write.. ABORTING...\n");

197  
HT_ERROR
;

198 
	}
}

200 
PRIVATE
 
	$HTANSIWrôî_ch¨a˘î
 (
HTOuçutSåóm
 * 
me
, 
c
)

202  (
	`Âutc
(
c
, 
me
->
Â
Ë=
EOF
Ë? 
HT_ERROR
 : 
HT_OK
;

203 
	}
}

205 
PRIVATE
 
	$HTANSIWrôî_°rög
 (
HTOuçutSåóm
 * 
me
, c⁄° * 
s
)

207 i‡(*
s
)

208  (
	`Âuts
(
s
, 
me
->
Â
Ë=
EOF
Ë? 
HT_ERROR
 : 
HT_OK
;

209  
HT_OK
;

210 
	}
}

212 
PRIVATE
 
	$HTANSIWrôî_block
 (
HTOuçutSåóm
 * 
me
, c⁄° * 
s
, 
l
)

214 
°©us
 ;

215 
°©us
 = (
	`fwrôe
(
s
, 1, 
l
, 
me
->
Â
Ë!lË? 
HT_ERROR
 : 
HT_OK
 ;

216 i‡(
l
 > 1 && 
°©us
 =
HT_OK
Ë(Ë
	`HTANSIWrôî_Êush
(
me
);

217  
°©us
;

218 
	}
}

226 
PRIVATE
 
	$HTANSIWrôî_˛o£
 (
HTOuçutSåóm
 * 
me
)

228 
	`HTTRACE
(
PROT_TRACE
, "ANSI write.. FREEING...\n");

229 
	`HT_FREE
(
me
);

230  
HT_OK
;

231 
	}
}

233 
PRIVATE
 c⁄° 
HTOuçutSåómCœss
 
	gHTANSIWrôî
 =

236 
HTANSIWrôî_Êush
,

237 
HTANSIWrôî_‰ì
,

238 
HTANSIWrôî_ab‹t
,

239 
HTANSIWrôî_ch¨a˘î
,

240 
HTANSIWrôî_°rög
,

241 
HTANSIWrôî_block
,

242 
HTANSIWrôî_˛o£
,

245 
PUBLIC
 
HTOuçutSåóm
 * 
	$HTANSIWrôî_√w
 (
HTHo°
 * 
ho°
, 
HTCh™√l
 * 
ch
,

246 * 
∑øm
, 
mode
)

248 i‡(
ho°
 && 
ch
) {

249 
HTOuçutSåóm
 * 
me
 = 
	`HTCh™√l_ouçut
(
ch
);

250 i‡(
me
 =
NULL
) {

251 i‡((
me
=(
HTOuçutSåóm
 *Ë
	`HT_CALLOC
(1, (HTOuçutSåóm)))==
NULL
)

252 
	`HT_OUTOFMEM
("HTANSIWriter_new");

253 
me
->
iß
 = &
HTANSIWrôî
;

254 
me
->
ch
 = ch;

255 
me
->
ho°
 = host;

256 
me
->
Â
 = 
	`HTCh™√l_fûe
(
ch
);

258  
me
;

260  
NULL
;

261 
	}
}

	@Library/src/HTANSI.h

34 #i‚de‡
HTANSI_H


35 
	#HTANSI_H


	)

37 
	~"HTIOSåóm.h
"

48 
	#FILE_BUFFER_SIZE
 65536

	)

56 
HTI≈ut_√w
 
HTANSIRódî_√w
;

64 
HTOuçut_√w
 
HTANSIWrôî_√w
;

	@Library/src/HTAccess.c

31 
	~"WWWUtû.h
"

32 
	~"WWWC‹e.h
"

33 
	~"WWWSåóm.h
"

34 
	~"HTProxy.h
"

35 
	~"HTRuÀs.h
"

36 
	~"HTReqM™.h
"

37 
	~"HTAc˚ss.h
"

39 
	#PUTBLOCK
(
b
, 
l
Ë(*
èrgë
->
iß
->
put_block
)—¨gë, b,Ü)

	)

41 
	s_HTSåóm
 {

42 
HTSåómCœss
 * 
	miß
;

45 
	e_HTPutSèã
 {

46 
	mHT_LOAD_SOURCE
 = 0,

47 
	mHT_SAVE_DEST
,

48 
	mHT_ABORT_SAVE


49 } 
	tHTPutSèã
;

51 
	s_HTPutC⁄ãxt
 {

52 
HTP¨ítAnch‹
 * 
	msour˚
;

53 
HTAnch‹
 * 
	mde°ö©i⁄
;

54 
HTChunk
 * 
	mdocumít
;

55 
HTF‹m©
 
	mf‹m©
;

56 
HTSåóm
 * 
	mèrgë
;

57 * 
	m∂a˚hﬁdî
;

58 
HTPutSèã
 
	m°©e
;

59 } 
	tHTPutC⁄ãxt
;

70 
PRIVATE
 
BOOL
 
	$œunch_ªque°
 (
HTReque°
 * 
ªque°
, 
BOOL
 
ªcursive
)

72 #ifde‡
HTDEBUG


73 i‡(
PROT_TRACE
) {

74 
HTP¨ítAnch‹
 *
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

75 * 
fuŒ_addªss
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
™ch‹
);

76 
	`HTTRACE
(
PROT_TRACE
, "HTAc˚ss.... Ac˚ssög documíà%s\n" 
_
 
fuŒ_addªss
);

77 
	`HT_FREE
(
fuŒ_addªss
);

80  
	`HTLﬂd
(
ªque°
, 
ªcursive
);

81 
	}
}

88 
PUBLIC
 
BOOL
 
	$HTLﬂdAbsﬁuã
 (c⁄° * 
uæ
, 
HTReque°
 * 
ªque°
)

90 i‡(
uæ
 && 
ªque°
) {

91 
HTAnch‹
 * 
™ch‹
 = 
	`HTAnch‹_födAddªss
(
uæ
);

92 
	`HTReque°_£tAnch‹
(
ªque°
, 
™ch‹
);

93  
	`œunch_ªque°
(
ªque°
, 
NO
);

95  
NO
;

96 
	}
}

105 
PUBLIC
 
BOOL
 
	$HTLﬂdRñ©ive
 (c⁄° * 
ªœtive
,

106 
HTP¨ítAnch‹
 * 
ba£
,

107 
HTReque°
 * 
ªque°
)

109 
BOOL
 
°©us
 = 
NO
;

110 i‡(
ªœtive
 && 
ba£
 && 
ªque°
) {

111 * 
fuŒ_uæ
 = 
NULL
;

112 * 
ba£_uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
ba£
);

113 
fuŒ_uæ
 = 
	`HTP¨£
(
ªœtive
, 
ba£_uæ
,

114 
PARSE_ACCESS
|
PARSE_HOST
|
PARSE_PATH
|
PARSE_PUNCTUATION
);

115 
°©us
 = 
	`HTLﬂdAbsﬁuã
(
fuŒ_uæ
, 
ªque°
);

116 
	`HT_FREE
(
fuŒ_uæ
);

117 
	`HT_FREE
(
ba£_uæ
);

119  
°©us
;

120 
	}
}

128 
PUBLIC
 
BOOL
 
	$HTLﬂdToSåóm
 (c⁄° * 
uæ
, 
HTSåóm
 * 
ouçut
,

129 
HTReque°
 * 
ªque°
)

131 i‡(
uæ
 && 
ouçut
 && 
ªque°
) {

132 
	`HTReque°_£tOuçutSåóm
(
ªque°
, 
ouçut
);

133  
	`HTLﬂdAbsﬁuã
(
uæ
, 
ªque°
);

135  
NO
;

136 
	}
}

142 
PUBLIC
 
BOOL
 
	$HTLﬂdToFûe
 (c⁄° * 
uæ
, 
HTReque°
 * 
ªque°
,

143 c⁄° * 
fûíame
)

145 i‡(
uæ
 && 
fûíame
 && 
ªque°
) {

146 
FILE
 * 
Â
 = 
NULL
;

149 i‡(
	`ac˚ss
(
fûíame
, 
F_OK
) != -1) {

150 
HTAÀπCÆlback
 * 
¥om±
 = 
	`HTAÀπ_föd
(
HT_A_CONFIRM
);

151 i‡(
¥om±
) {

152 i‡((*
¥om±
)(
ªque°
, 
HT_A_CONFIRM
, 
HT_MSG_FILE_REPLACE
, 
NULL
,

153 
NULL
, NULLË!
YES
)

154  
NO
;

159 i‡((
Â
 = 
	`f›í
(
fûíame
, "wb")Ë=
NULL
) {

160 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_NO_FILE
,

161 (*Ë
fûíame
, 
	`°æí
(filename),

163  
NO
;

167 
	`HTReque°_£tOuçutF‹m©
(
ªque°
, 
WWW_SOURCE
);

168 
	`HTReque°_£tOuçutSåóm
(
ªque°
, 
	`HTFWrôî_√w
‘eque°, 
Â
, 
NO
));

169 i‡(
	`HTLﬂdAbsﬁuã
(
uæ
, 
ªque°
Ë=
NO
) {

170 
	`f˛o£
(
Â
);

171  
NO
;

173  
YES
;

175  
NO
;

176 
	}
}

184 
PUBLIC
 
HTChunk
 * 
	$HTLﬂdToChunk
 (c⁄° * 
uæ
, 
HTReque°
 * 
ªque°
)

186 i‡(
uæ
 && 
ªque°
) {

187 
HTChunk
 * 
chunk
 = 
NULL
;

188 
HTSåóm
 * 
èrgë
 = 
	`HTSåómToChunk
(
ªque°
, &
chunk
, 0);

189 
HTAnch‹
 * 
™ch‹
 = 
	`HTAnch‹_födAddªss
(
uæ
);

190 
	`HTReque°_£tAnch‹
(
ªque°
, 
™ch‹
);

191 
	`HTReque°_£tOuçutSåóm
(
ªque°
, 
èrgë
);

192 i‡(
	`œunch_ªque°
(
ªque°
, 
NO
Ë=
YES
)

193  
chunk
;

195 
	`HTChunk_dñëe
(
chunk
);

196  
NULL
;

199  
NULL
;

200 
	}
}

207 
PUBLIC
 
BOOL
 
	$HTLﬂdAnch‹
 (
HTAnch‹
 * 
™ch‹
, 
HTReque°
 * 
ªque°
)

209 i‡(
™ch‹
 && 
ªque°
) {

210 
	`HTReque°_£tAnch‹
(
ªque°
, 
™ch‹
);

211  
	`œunch_ªque°
(
ªque°
, 
NO
);

213  
NO
;

214 
	}
}

224 
PUBLIC
 
BOOL
 
	$HTLﬂdAnch‹Recursive
 (
HTAnch‹
 * 
™ch‹
, 
HTReque°
 * 
ªque°
)

226 i‡(
™ch‹
 && 
ªque°
) {

227 
	`HTReque°_£tAnch‹
(
ªque°
, 
™ch‹
);

228  
	`œunch_ªque°
(
ªque°
, 
YES
);

230  
NO
;

231 
	}
}

239 
PUBLIC
 
HTChunk
 * 
	$HTLﬂdAnch‹ToChunk
 (
HTAnch‹
 * 
™ch‹
, 
HTReque°
 * 
ªque°
)

241 
HTChunk
 * 
chunk
 = 
NULL
;

242 i‡(
™ch‹
 && 
ªque°
) {

243 
HTSåóm
 * 
èrgë
 = 
	`HTSåómToChunk
(
ªque°
, &
chunk
, 0);

244 
	`HTReque°_£tAnch‹
(
ªque°
, 
™ch‹
);

245 
	`HTReque°_£tOuçutSåóm
(
ªque°
, 
èrgë
);

246 i‡(
	`œunch_ªque°
(
ªque°
, 
NO
Ë=
YES
)

247  
chunk
;

249 
	`HTChunk_dñëe
(
chunk
);

250  
NULL
;

253  
NULL
;

254 
	}
}

262 
PUBLIC
 
BOOL
 
	$HTLﬂdRuÀs
 (c⁄° * 
uæ
)

264 
BOOL
 
°©us
 = 
NO
;

265 i‡(
uæ
) {

266 
HTLi°
 * 
li°
 = 
	`HTLi°_√w
();

267 
HTReque°
 * 
ªque°
 = 
	`HTReque°_√w
();

268 
	`HTReque°_£tPªem±ive
(
ªque°
, 
YES
);

276 #ifde‡
HT_AUTOMATIC_RULES


277 
	`HTAÀπ_£tI¡îa˘ive
(
NO
);

285 
	`HTC⁄vîsi⁄_add
(
li°
, "≠∂iˇti⁄/x-www-ruÀs", "*/*", 
HTRuÀs
,

287 
	`HTReque°_£tC⁄vîsi⁄
(
ªque°
, 
li°
, 
YES
);

288 
°©us
 = 
	`HTLﬂdAbsﬁuã
(
uæ
, 
ªque°
);

289 
	`HTC⁄vîsi⁄_dñëeAŒ
(
li°
);

290 
	`HTReque°_dñëe
(
ªque°
);

292  
°©us
;

293 
	}
}

302 
PUBLIC
 
BOOL
 
	$HTLﬂdRuÀsAutom©iˇŒy
 (c⁄° * 
uæ
)

304 
BOOL
 
°©us
 = 
NO
;

305 i‡(
uæ
) {

306 
HTLi°
 * 
li°
 = 
	`HTLi°_√w
();

307 
HTReque°
 * 
ªque°
 = 
	`HTReque°_√w
();

312 
	`HTReque°_£tPªem±ive
(
ªque°
, 
YES
);

317 
	`HTC⁄vîsi⁄_add
(
li°
, "application/x-www-rules", "*/*",

318 
HTRuÀs_∑r£Autom©iˇŒy
,

321 
	`HTReque°_£tC⁄vîsi⁄
(
ªque°
, 
li°
, 
YES
);

322 
°©us
 = 
	`HTLﬂdAbsﬁuã
(
uæ
, 
ªque°
);

323 
	`HTC⁄vîsi⁄_dñëeAŒ
(
li°
);

324 
	`HTReque°_dñëe
(
ªque°
);

326  
°©us
;

327 
	}
}

367 
PRIVATE
 * 
	$quîy_uæ_ícode
 (c⁄° * 
ba£uæ
, 
HTChunk
 * 
keyw‹ds
)

369 * 
fuŒuæ
 = 
NULL
;

370 i‡(
ba£uæ
 && 
keyw‹ds
 && 
	`HTChunk_size
(keywords)) {

371 
Àn
 = 
	`°æí
(
ba£uæ
);

372 
fuŒuæ
 = (*Ë
	`HT_MALLOC
(
Àn
 + 
	`HTChunk_size
(
keyw‹ds
) + 2);

373 
	`•rötf
(
fuŒuæ
, "%s?%s", 
ba£uæ
, 
	`HTChunk_d©a
(
keyw‹ds
));

375 * 
±r
 = 
fuŒuæ
+
Àn
;

376 *
±r
) {

377 i‡(*
±r
 == ' ') *ptr = '+';

378 
±r
++;

382  
fuŒuæ
;

383 
	}
}

385 
PRIVATE
 * 
	$f‹m_uæ_ícode
 (c⁄° * 
ba£uæ
, 
HTAssocLi°
 * 
f‹md©a
)

387 i‡(
f‹md©a
) {

388 
BOOL
 
fú°
 = 
YES
;

389 
˙t
 = 
	`HTLi°_cou¡
((
HTLi°
 *Ë
f‹md©a
);

390 
HTChunk
 * 
fuŒuæ
 = 
	`HTChunk_√w
(128);

391 
HTAssoc
 * 
¥es
;

392 i‡(
ba£uæ
) {

393 
	`HTChunk_puts
(
fuŒuæ
, 
ba£uæ
);

394 
	`HTChunk_putc
(
fuŒuæ
, '?');

396 
˙t
 > 0) {

397 
¥es
 = (
HTAssoc
 *Ë
	`HTLi°_obje˘At
((
HTLi°
 *Ë
f‹md©a
, --
˙t
);

398 i‡(
fú°
)

399 
fú°
 = 
NO
;

401 
	`HTChunk_putc
(
fuŒuæ
, '&');

402 
	`HTChunk_puts
(
fuŒuæ
, 
	`HTAssoc_«me
(
¥es
));

403 
	`HTChunk_putc
(
fuŒuæ
, '=');

404 
	`HTChunk_puts
(
fuŒuæ
, 
	`HTAssoc_vÆue
(
¥es
));

406  
	`HTChunk_toCSåög
(
fuŒuæ
);

408  
NULL
;

409 
	}
}

419 
PUBLIC
 
BOOL
 
	$HTSórchAbsﬁuã
 (
HTChunk
 * 
keyw‹ds
,

420 c⁄° * 
ba£
,

421 
HTReque°
 * 
ªque°
)

423 i‡(
keyw‹ds
 && 
ba£
 && 
ªque°
) {

424 * 
fuŒ
 = 
	`quîy_uæ_ícode
(
ba£
, 
keyw‹ds
);

425 i‡(
fuŒ
) {

426 
HTAnch‹
 * 
™ch‹
 = 
	`HTAnch‹_födAddªss
(
fuŒ
);

427 
	`HTReque°_£tAnch‹
(
ªque°
, 
™ch‹
);

428 
	`HT_FREE
(
fuŒ
);

429  
	`œunch_ªque°
(
ªque°
, 
NO
);

432  
NO
;

433 
	}
}

442 
PUBLIC
 
BOOL
 
	$HTSórchRñ©ive
 (
HTChunk
 * 
keyw‹ds
,

443 c⁄° * 
ªœtive
,

444 
HTP¨ítAnch‹
 * 
ba£
,

445 
HTReque°
 * 
ªque°
)

447 
BOOL
 
°©us
 = 
NO
;

448 i‡(
keyw‹ds
 && 
ªœtive
 && 
ba£
 && 
ªque°
) {

449 * 
fuŒ_uæ
 = 
NULL
;

450 * 
ba£_uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
ba£
);

451 
fuŒ_uæ
 = 
	`HTP¨£
(
ªœtive
, 
ba£_uæ
,

452 
PARSE_ACCESS
|
PARSE_HOST
|
PARSE_PATH
|
PARSE_PUNCTUATION
);

453 
°©us
 = 
	`HTSórchAbsﬁuã
(
keyw‹ds
, 
fuŒ_uæ
, 
ªque°
);

454 
	`HT_FREE
(
fuŒ_uæ
);

455 
	`HT_FREE
(
ba£_uæ
);

457  
°©us
;

458 
	}
}

466 
PUBLIC
 
BOOL
 
	$HTSórchSåög
 (c⁄° * 
keyw‹ds
,

467 
HTAnch‹
 * 
™ch‹
,

468 
HTReque°
 * 
ªque°
)

470 
BOOL
 
°©us
 = 
NO
;

471 i‡(
keyw‹ds
 && 
™ch‹
 && 
ªque°
) {

472 * 
ba£_uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
™ch‹
);

473 
HTChunk
 * 
chunk
 = 
	`HTChunk_√w
(
	`°æí
(
keyw‹ds
)+2);

474 
	`HTChunk_puts
(
chunk
, 
keyw‹ds
);

475 
°©us
 = 
	`HTSórchAbsﬁuã
(
chunk
, 
ba£_uæ
, 
ªque°
);

476 
	`HT_FREE
(
ba£_uæ
);

477 
	`HTChunk_dñëe
(
chunk
);

479  
°©us
;

480 
	}
}

491 
PUBLIC
 
BOOL
 
	$HTSórchAnch‹
 (
HTChunk
 * 
keyw‹ds
,

492 
HTAnch‹
 * 
™ch‹
,

493 
HTReque°
 * 
ªque°
)

495 
BOOL
 
°©us
 = 
NO
;

496 i‡(
keyw‹ds
 && 
™ch‹
 && 
ªque°
) {

497 * 
ba£_uæ
 = 
	`HTAnch‹_addªss
(
™ch‹
);

498 
°©us
 = 
	`HTSórchAbsﬁuã
(
keyw‹ds
, 
ba£_uæ
, 
ªque°
);

499 
	`HT_FREE
(
ba£_uæ
);

501  
°©us
;

502 
	}
}

516 
PUBLIC
 
BOOL
 
	$HTGëF‹mAbsﬁuã
 (
HTAssocLi°
 * 
f‹md©a
,

517 c⁄° * 
ba£
,

518 
HTReque°
 * 
ªque°
)

520 i‡(
f‹md©a
 && 
ba£
 && 
ªque°
) {

521 * 
fuŒ
 = 
	`f‹m_uæ_ícode
(
ba£
, 
f‹md©a
);

522 i‡(
fuŒ
) {

523 
HTAnch‹
 * 
™ch‹
 = 
	`HTAnch‹_födAddªss
(
fuŒ
);

524 
	`HTReque°_£tAnch‹
(
ªque°
, 
™ch‹
);

525 
	`HT_FREE
(
fuŒ
);

526  
	`œunch_ªque°
(
ªque°
, 
NO
);

529  
NO
;

530 
	}
}

540 
PUBLIC
 
BOOL
 
	$HTGëF‹mRñ©ive
 (
HTAssocLi°
 * 
f‹md©a
,

541 c⁄° * 
ªœtive
,

542 
HTP¨ítAnch‹
 * 
ba£
,

543 
HTReque°
 * 
ªque°
)

545 
BOOL
 
°©us
 = 
NO
;

546 i‡(
f‹md©a
 && 
ªœtive
 && 
ba£
 && 
ªque°
) {

547 * 
fuŒ_uæ
 = 
NULL
;

548 * 
ba£_uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
ba£
);

549 
fuŒ_uæ
=
	`HTP¨£
(
ªœtive
, 
ba£_uæ
,

550 
PARSE_ACCESS
|
PARSE_HOST
|
PARSE_PATH
|
PARSE_PUNCTUATION
);

551 
°©us
 = 
	`HTGëF‹mAbsﬁuã
(
f‹md©a
, 
fuŒ_uæ
, 
ªque°
);

552 
	`HT_FREE
(
fuŒ_uæ
);

553 
	`HT_FREE
(
ba£_uæ
);

555  
°©us
;

556 
	}
}

566 
PUBLIC
 
BOOL
 
	$HTGëF‹mAnch‹
 (
HTAssocLi°
 * 
f‹md©a
,

567 
HTAnch‹
 * 
™ch‹
,

568 
HTReque°
 * 
ªque°
)

570 
BOOL
 
°©us
 = 
NO
;

571 i‡(
f‹md©a
 && 
™ch‹
 && 
ªque°
) {

572 * 
ba£_uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
™ch‹
);

573 
°©us
 = 
	`HTGëF‹mAbsﬁuã
(
f‹md©a
, 
ba£_uæ
, 
ªque°
);

574 
	`HT_FREE
(
ba£_uæ
);

576  
°©us
;

577 
	}
}

579 
PRIVATE
 
	$HTE¡ôy_ˇŒback
 (
HTReque°
 * 
ªque°
, 
HTSåóm
 * 
èrgë
)

581 
HTP¨ítAnch‹
 * 
ítôy
 = 
	`HTReque°_ítôyAnch‹
(
ªque°
);

582 
	`HTTRACE
(
APP_TRACE
, "Posting Data from callback function\n");

583 i‡(!
ªque°
 || !
ítôy
 || !
èrgë
Ë 
HT_ERROR
;

585 
BOOL
 
chunkög
 = 
NO
;

586 
°©us
;

587 * 
documít
 = (*Ë
	`HTAnch‹_documít
(
ítôy
);

588 
Àn
 = 
	`HTAnch‹_Àngth
(
ítôy
);

589 i‡(!
documít
) {

590 
	`HTTRACE
(
PROT_TRACE
, "Posting Data No document\n");

591  
HT_ERROR
;

599 i‡(
Àn
 < 0) {

600 
HTF‹m©
 
a˘uÆ
 = 
	`HTAnch‹_f‹m©
(
ítôy
);

601 
HTF‹m©
 
tm∂©e
 = 
	`HTAtom_f‹
("text/*");

602 i‡(
	`HTMIMEM©ch
(
tm∂©e
, 
a˘uÆ
)) {

603 
Àn
 = 
	`°æí
(
documít
);

604 
chunkög
 = 
YES
;

606 
	`HTTRACE
(
PROT_TRACE
, "Po°ög D©®Mu° knowÅhêÀngth o‡documíà%p\n" 
_


607 
documít
);

608  
HT_ERROR
;

613 
°©us
 = (*
èrgë
->
iß
->
put_block
)—¨gë, 
documít
, 
Àn
);

614 i‡(
°©us
 =
HT_WOULD_BLOCK
) {

615 
	`HTTRACE
(
PROT_TRACE
, "Posting Data Target WOULD BLOCK\n");

616  
HT_WOULD_BLOCK
;

617 } i‡(
°©us
 =
HT_PAUSE
) {

618 
	`HTTRACE
(
PROT_TRACE
, "Posting Data Target PAUSED\n");

619  
HT_PAUSE
;

620 } i‡(
chunkög
 && 
°©us
 =
HT_OK
) {

621 
	`HTTRACE
(
PROT_TRACE
, "Posting Data Target is SAVED using chunked\n");

622  (*
èrgë
->
iß
->
put_block
)(target, "", 0);

623 } i‡(
°©us
 =
HT_LOADED
 || sètu†=
HT_OK
) {

624 
	`HTTRACE
(
PROT_TRACE
, "Posting Data Target is SAVED\n");

625 (*
èrgë
->
iß
->
Êush
)(target);

626  
HT_LOADED
;

627 } i‡(
°©us
 > 0) {

628 
	`HTTRACE
(
PROT_TRACE
, "Po°ög D©a. T¨gëÑëu∫†%d\n" 
_
 
°©us
);

629  
°©us
;

631 
	`HTTRACE
(
PROT_TRACE
, "Po°ög D©®T¨gë ERROR %d\n" 
_
 
°©us
);

632  
°©us
;

635 
	}
}

644 
PUBLIC
 
HTP¨ítAnch‹
 * 
	$HTPo°F‹mAbsﬁuã
 (
HTAssocLi°
 * 
f‹md©a
,

645 c⁄° * 
ba£
,

646 
HTReque°
 * 
ªque°
)

648 i‡(
f‹md©a
 && 
ba£
 && 
ªque°
) {

649 
HTAnch‹
 * 
™ch‹
 = 
	`HTAnch‹_födAddªss
(
ba£
);

650  
	`HTPo°F‹mAnch‹
(
f‹md©a
, 
™ch‹
, 
ªque°
);

652  
NULL
;

653 
	}
}

662 
PUBLIC
 
HTP¨ítAnch‹
 * 
	$HTPo°F‹mRñ©ive
 (
HTAssocLi°
 * 
f‹md©a
,

663 c⁄° * 
ªœtive
,

664 
HTP¨ítAnch‹
 * 
ba£
,

665 
HTReque°
 * 
ªque°
)

667 
HTP¨ítAnch‹
 * 
po°™ch‹
 = 
NULL
;

668 i‡(
f‹md©a
 && 
ªœtive
 && 
ba£
 && 
ªque°
) {

669 * 
fuŒ_uæ
 = 
NULL
;

670 * 
ba£_uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
ba£
);

671 
fuŒ_uæ
=
	`HTP¨£
(
ªœtive
, 
ba£_uæ
,

672 
PARSE_ACCESS
|
PARSE_HOST
|
PARSE_PATH
|
PARSE_PUNCTUATION
);

673 
po°™ch‹
 = 
	`HTPo°F‹mAbsﬁuã
(
f‹md©a
, 
fuŒ_uæ
, 
ªque°
);

674 
	`HT_FREE
(
fuŒ_uæ
);

675 
	`HT_FREE
(
ba£_uæ
);

677  
po°™ch‹
;

678 
	}
}

687 
PUBLIC
 
HTP¨ítAnch‹
 * 
	$HTPo°F‹mAnch‹
 (
HTAssocLi°
 * 
f‹md©a
,

688 
HTAnch‹
 * 
™ch‹
,

689 
HTReque°
 * 
ªque°
)

691 
HTP¨ítAnch‹
 * 
po°™ch‹
 = 
NULL
;

692 i‡(
f‹md©a
 && 
™ch‹
 && 
ªque°
) {

693 
HTU£rProfûe
 * 
up
 = 
	`HTReque°_u£rProfûe
(
ªque°
);

694 * 
tmpfûe
 = 
	`HTGëTmpFûeName
(
	`HTU£rProfûe_tmp
(
up
));

695 * 
tmpuæ
 = 
	`HTP¨£
(
tmpfûe
, "fûe:", 
PARSE_ALL
);

696 * 
f‹m_ícoded
 = 
	`f‹m_uæ_ícode
(
NULL
, 
f‹md©a
);

697 i‡(
f‹m_ícoded
) {

704 
po°™ch‹
 = (
HTP¨ítAnch‹
 *Ë
	`HTAnch‹_födAddªss
(
tmpuæ
);

705 
	`HTAnch‹_˛órHódî
(
po°™ch‹
);

706 
	`HTAnch‹_£tDocumít
(
po°™ch‹
, 
f‹m_ícoded
);

707 
	`HTAnch‹_£tLígth
(
po°™ch‹
, 
	`°æí
(
f‹m_ícoded
));

708 
	`HTAnch‹_£tF‹m©
(
po°™ch‹
, 
WWW_FORM
);

714 
	`HTLök_ªmoveAŒ
((
HTAnch‹
 *Ë
po°™ch‹
);

715 
	`HTLök_add
((
HTAnch‹
 *Ë
po°™ch‹
, (HTAnch‹ *Ë
™ch‹
,

716 
NULL
, 
METHOD_POST
);

719 
	`HTReque°_addGnHd
(
ªque°
, 
HT_G_DATE
);

720 
	`HTReque°_£tAnch‹
(
ªque°
, 
™ch‹
);

721 
	`HTReque°_£tE¡ôyAnch‹
(
ªque°
, 
po°™ch‹
);

722 
	`HTReque°_£tMëhod
(
ªque°
, 
METHOD_POST
);

725 
	`HTReque°_£tPo°CÆlback
(
ªque°
, 
HTE¡ôy_ˇŒback
);

728 
	`œunch_ªque°
(
ªque°
, 
NO
);

730 
	`HT_FREE
(
tmpfûe
);

731 
	`HT_FREE
(
tmpuæ
);

733  
po°™ch‹
;

734 
	}
}

741 
PUBLIC
 
HTChunk
 * 
	$HTPo°F‹mAnch‹ToChunk
 (
HTAssocLi°
 * 
f‹md©a
,

742 
HTAnch‹
 * 
™ch‹
,

743 
HTReque°
 * 
ªque°
)

745 i‡(
f‹md©a
 && 
™ch‹
 && 
ªque°
) {

746 
HTChunk
 * 
chunk
 = 
NULL
;

747 
HTSåóm
 * 
èrgë
 = 
	`HTSåómToChunk
(
ªque°
, &
chunk
, 0);

748 
	`HTReque°_£tOuçutSåóm
(
ªque°
, 
èrgë
);

749 i‡(
	`HTPo°F‹mAnch‹
(
f‹md©a
, 
™ch‹
, 
ªque°
Ë!
NULL
)

750  
chunk
;

752 
	`HTChunk_dñëe
(
chunk
);

753  
NULL
;

756  
NULL
;

757 
	}
}

770 
PRIVATE
 
BOOL
 
	$£t_¥ec⁄dôi⁄s
 (
HTReque°
 * 
ªque°
)

772 i‡(
ªque°
) {

773 
HTPªc⁄dôi⁄s
 
¥ec⁄s
 = 
	`HTReque°_¥ec⁄dôi⁄s
(
ªque°
);

774 
HTRqHd
 
if_hódîs
 = 
	`HTReque°_rqHd
 (
ªque°
);

775 
HTRqHd
 
Æl_if_hódîs
 =

776 (
HT_C_IF_MATCH
 | 
HT_C_IF_MATCH_ANY
 |

777 
HT_C_IF_NONE_MATCH
 | 
HT_C_IF_NONE_MATCH_ANY
 |

778 
HT_C_IMS
 | 
HT_C_IF_UNMOD_SINCE
);

779 
¥ec⁄s
) {

780 
HT_NO_MATCH
:

781 
if_hódîs
 &~(
Æl_if_hódîs
);

784 
HT_MATCH_THIS
:

785 
if_hódîs
 &~(
Æl_if_hódîs
);

786 
if_hódîs
 |(
HT_C_IF_MATCH
 | 
HT_C_IF_UNMOD_SINCE
);

789 
HT_MATCH_ANY
:

790 
if_hódîs
 &~(
Æl_if_hódîs
);

791 
if_hódîs
 |(
HT_C_IF_MATCH_ANY
);

794 
HT_DONT_MATCH_THIS
:

795 
if_hódîs
 &~(
Æl_if_hódîs
);

796 
if_hódîs
 |(
HT_C_IF_NONE_MATCH
 | 
HT_C_IMS
);

799 
HT_DONT_MATCH_ANY
:

800 
if_hódîs
 &~(
Æl_if_hódîs
);

801 
if_hódîs
 |(
HT_C_IF_NONE_MATCH_ANY
);

805 
	`HTTRACE
(
APP_TRACE
, "Pªc⁄dôi⁄ %dÇŸ undî°ood\n" 
_
 
¥ec⁄s
);

810 
	`HTReque°_£tRqHd
(
ªque°
, 
if_hódîs
);

812  
YES
;

814  
NO
;

815 
	}
}

817 
PRIVATE
 
BOOL
 
	$£tup_™ch‹s
 (
HTReque°
 * 
ªque°
,

818 
HTP¨ítAnch‹
 * 
sour˚
, HTP¨ítAnch‹ * 
de°
,

819 
HTMëhod
 
mëhod
)

821 i‡(!(
mëhod
 & (
METHOD_PUT
 | 
METHOD_POST
))) {

822 
	`HTTRACE
(
APP_TRACE
, "Posting..... Bad method\n");

823  
NO
;

833 * 
addr
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
sour˚
);

834 * 
ho°«me
 = 
	`HTP¨£
(
addr
, "", 
PARSE_HOST
);

836 
HTHo°
 * 
ho°
 = 
	`HTHo°_föd
(
ho°«me
);

837 
HTMëhod
 
public_mëhods
 = 
	`HTHo°_publicMëhods
(
ho°
);

838 
HTMëhod
 
¥iv©e_mëhods
 = 
	`HTAnch‹_Ælow
(
de°
);

840 
	`HT_FREE
(
ho°«me
);

841 
	`HT_FREE
(
addr
);

847 i‡(!(
mëhod
 & (
¥iv©e_mëhods
 | 
public_mëhods
))) {

848 
HTAÀπCÆlback
 * 
¥om±
 = 
	`HTAÀπ_föd
(
HT_A_CONFIRM
);

849 i‡(
¥om±
) {

850 i‡((*
¥om±
)(
ªque°
, 
HT_A_CONFIRM
, 
HT_MSG_METHOD
,

851 
NULL
, NULL, NULLË!
YES
)

852  
NO
;

864 
HTLök
 *
lök
 = 
	`HTLök_föd
((
HTAnch‹
 *Ë
sour˚
, (HTAnch‹ *Ë
de°
);

865 i‡(
lök
 && 
	`HTLök_mëhod
÷ökË=
METHOD_PUT
) {

866 
HTAÀπCÆlback
 * 
¥om±
 = 
	`HTAÀπ_föd
(
HT_A_CONFIRM
);

867 i‡(
¥om±
) {

868 i‡((*
¥om±
)(
ªque°
, 
HT_A_CONFIRM
, 
HT_MSG_REDO
,

869 
NULL
, NULL, NULLË!
YES
)

870  
NO
;

872 
	`HTLök_ªmove
((
HTAnch‹
 *Ë
sour˚
, (HTAnch‹ *Ë
de°
);

874 
	`HTLök_add
((
HTAnch‹
*Ë
sour˚
, (HTAnch‹*Ë
de°
, 
NULL
, 
METHOD_PUT
);

876  
YES
;

877 
	}
}

886 
PUBLIC
 
BOOL
 
	$HTPutAbsﬁuã
 (
HTP¨ítAnch‹
 * 
sour˚
,

887 c⁄° * 
de°ö©i⁄
,

888 
HTReque°
 * 
ªque°
)

890 i‡(
sour˚
 && 
de°ö©i⁄
 && 
ªque°
) {

891 
HTAnch‹
 * 
de°
 = 
	`HTAnch‹_födAddªss
(
de°ö©i⁄
);

892  
	`HTPutAnch‹
(
sour˚
, 
de°
, 
ªque°
);

894  
NO
;

895 
	}
}

904 
PUBLIC
 
BOOL
 
	$HTPutRñ©ive
 (
HTP¨ítAnch‹
 * 
sour˚
,

905 c⁄° * 
ªœtive
,

906 
HTP¨ítAnch‹
 * 
de°ö©i⁄_ba£
,

907 
HTReque°
 * 
ªque°
)

909 i‡(
sour˚
 && 
ªœtive
 && 
de°ö©i⁄_ba£
 && 
ªque°
) {

910 
BOOL
 
°©us
;

911 * 
fuŒ_uæ
 = 
NULL
;

912 * 
ba£_uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
de°ö©i⁄_ba£
);

913 
fuŒ_uæ
=
	`HTP¨£
(
ªœtive
, 
ba£_uæ
,

914 
PARSE_ACCESS
|
PARSE_HOST
|
PARSE_PATH
|
PARSE_PUNCTUATION
);

915 
°©us
 = 
	`HTPutAbsﬁuã
(
sour˚
, 
fuŒ_uæ
, 
ªque°
);

916 
	`HT_FREE
(
fuŒ_uæ
);

917 
	`HT_FREE
(
ba£_uæ
);

918  
°©us
;

920  
NO
;

921 
	}
}

930 
PUBLIC
 
BOOL
 
	$HTPutAnch‹
 (
HTP¨ítAnch‹
 * 
sour˚
,

931 
HTAnch‹
 * 
de°ö©i⁄
,

932 
HTReque°
 * 
ªque°
)

934 
HTP¨ítAnch‹
 * 
de°
 = 
	`HTAnch‹_∑ª¡
(
de°ö©i⁄
);

935 i‡(
sour˚
 && 
de°
 && 
ªque°
) {

936 i‡(
	`£tup_™ch‹s
(
ªque°
, 
sour˚
, 
de°
, 
METHOD_PUT
Ë=
YES
) {

939 
	`HTReque°_addGnHd
(
ªque°
, 
HT_G_DATE
);

940 
	`HTReque°_£tE¡ôyAnch‹
(
ªque°
, 
sour˚
);

941 
	`HTReque°_£tMëhod
(
ªque°
, 
METHOD_PUT
);

942 
	`HTReque°_£tAnch‹
(
ªque°
, 
de°ö©i⁄
);

945 
	`£t_¥ec⁄dôi⁄s
(
ªque°
);

948 
	`HTReque°_£tPo°CÆlback
(
ªque°
, 
HTE¡ôy_ˇŒback
);

951  
	`œunch_ªque°
(
ªque°
, 
NO
);

954  
NO
;

955 
	}
}

964 
PUBLIC
 
BOOL
 
	$HTPo°Absﬁuã
 (
HTP¨ítAnch‹
 * 
sour˚
,

965 c⁄° * 
de°ö©i⁄
,

966 
HTReque°
 * 
ªque°
)

968 i‡(
sour˚
 && 
de°ö©i⁄
 && 
ªque°
) {

969 
HTAnch‹
 * 
de°
 = 
	`HTAnch‹_födAddªss
(
de°ö©i⁄
);

970  
	`HTPo°Anch‹
(
sour˚
, 
de°
, 
ªque°
);

972  
NO
;

973 
	}
}

982 
PUBLIC
 
BOOL
 
	$HTPo°Rñ©ive
 (
HTP¨ítAnch‹
 * 
sour˚
,

983 c⁄° * 
ªœtive
,

984 
HTP¨ítAnch‹
 * 
de°ö©i⁄_ba£
,

985 
HTReque°
 * 
ªque°
)

987 i‡(
sour˚
 && 
ªœtive
 && 
de°ö©i⁄_ba£
 && 
ªque°
) {

988 
BOOL
 
°©us
;

989 * 
fuŒ_uæ
 = 
NULL
;

990 * 
ba£_uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
de°ö©i⁄_ba£
);

991 
fuŒ_uæ
=
	`HTP¨£
(
ªœtive
, 
ba£_uæ
,

992 
PARSE_ACCESS
|
PARSE_HOST
|
PARSE_PATH
|
PARSE_PUNCTUATION
);

993 
°©us
 = 
	`HTPo°Absﬁuã
(
sour˚
, 
fuŒ_uæ
, 
ªque°
);

994 
	`HT_FREE
(
fuŒ_uæ
);

995 
	`HT_FREE
(
ba£_uæ
);

996  
°©us
;

998  
NO
;

999 
	}
}

1008 
PUBLIC
 
BOOL
 
	$HTPo°Anch‹
 (
HTP¨ítAnch‹
 * 
sour˚
,

1009 
HTAnch‹
 * 
de°ö©i⁄
,

1010 
HTReque°
 * 
ªque°
)

1012 
HTP¨ítAnch‹
 * 
de°
 = 
	`HTAnch‹_∑ª¡
(
de°ö©i⁄
);

1013 i‡(
sour˚
 && 
de°
 && 
ªque°
) {

1014 i‡(
	`£tup_™ch‹s
(
ªque°
, 
sour˚
, 
de°
, 
METHOD_POST
Ë=
YES
) {

1017 
	`HTReque°_addGnHd
(
ªque°
, 
HT_G_DATE
);

1018 
	`HTReque°_£tE¡ôyAnch‹
(
ªque°
, 
sour˚
);

1019 
	`HTReque°_£tMëhod
(
ªque°
, 
METHOD_POST
);

1020 
	`HTReque°_£tAnch‹
(
ªque°
, 
de°ö©i⁄
);

1023 
	`HTReque°_£tPo°CÆlback
(
ªque°
, 
HTE¡ôy_ˇŒback
);

1026  
	`œunch_ªque°
(
ªque°
, 
NO
);

1029  
NO
;

1030 
	}
}

1039 
PUBLIC
 
BOOL
 
	$HTPutSåu˘uªdAbsﬁuã
 (
HTP¨ítAnch‹
 * 
sour˚
,

1040 c⁄° * 
de°ö©i⁄
,

1041 
HTReque°
 * 
ªque°
,

1042 
HTPo°CÆlback
 * 
öput
)

1044 i‡(
sour˚
 && 
de°ö©i⁄
 && 
ªque°
 && 
öput
) {

1045 
HTAnch‹
 * 
de°
 = 
	`HTAnch‹_födAddªss
(
de°ö©i⁄
);

1046  
	`HTPutSåu˘uªdAnch‹
(
sour˚
, 
de°
, 
ªque°
, 
öput
);

1048  
NO
;

1049 
	}
}

1058 
PUBLIC
 
BOOL
 
	$HTPutSåu˘uªdRñ©ive
 (
HTP¨ítAnch‹
 * 
sour˚
,

1059 c⁄° * 
ªœtive
,

1060 
HTP¨ítAnch‹
 * 
de°ö©i⁄_ba£
,

1061 
HTReque°
 * 
ªque°
,

1062 
HTPo°CÆlback
 * 
öput
)

1064 i‡(
sour˚
 && 
ªœtive
 && 
de°ö©i⁄_ba£
 && 
ªque°
 && 
öput
) {

1065 
BOOL
 
°©us
;

1066 * 
fuŒ_uæ
 = 
NULL
;

1067 * 
ba£_uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
de°ö©i⁄_ba£
);

1068 
fuŒ_uæ
=
	`HTP¨£
(
ªœtive
, 
ba£_uæ
,

1069 
PARSE_ACCESS
|
PARSE_HOST
|
PARSE_PATH
|
PARSE_PUNCTUATION
);

1070 
°©us
 = 
	`HTPutSåu˘uªdAbsﬁuã
(
sour˚
, 
fuŒ_uæ
, 
ªque°
, 
öput
);

1071 
	`HT_FREE
(
fuŒ_uæ
);

1072 
	`HT_FREE
(
ba£_uæ
);

1073  
°©us
;

1075  
NO
;

1076 
	}
}

1085 
PUBLIC
 
BOOL
 
	$HTPutSåu˘uªdAnch‹
 (
HTP¨ítAnch‹
 * 
sour˚
,

1086 
HTAnch‹
 * 
de°ö©i⁄
,

1087 
HTReque°
 * 
ªque°
,

1088 
HTPo°CÆlback
 * 
öput
)

1090 
HTP¨ítAnch‹
 * 
de°
 = 
	`HTAnch‹_∑ª¡
(
de°ö©i⁄
);

1091 i‡(
sour˚
 && 
de°
 && 
ªque°
) {

1092 i‡(
	`£tup_™ch‹s
(
ªque°
, 
sour˚
, 
de°
, 
METHOD_PUT
Ë=
YES
) {

1095 
	`HTReque°_addGnHd
(
ªque°
, 
HT_G_DATE
);

1096 
	`HTReque°_£tE¡ôyAnch‹
(
ªque°
, 
sour˚
);

1097 
	`HTReque°_£tMëhod
(
ªque°
, 
METHOD_PUT
);

1098 
	`HTReque°_£tAnch‹
(
ªque°
, 
de°ö©i⁄
);

1101 
	`£t_¥ec⁄dôi⁄s
(
ªque°
);

1104 
	`HTReque°_£tPo°CÆlback
(
ªque°
, 
öput
);

1107  
	`œunch_ªque°
(
ªque°
, 
NO
);

1110  
NO
;

1111 
	}
}

1116 
PRIVATE
 
	$HTSaveFûãr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

1117 * 
∑øm
, 
°©us
)

1119 
HTPutC⁄ãxt
 * 
me
 = (HTPutC⁄ãxà*Ë
∑øm
;

1120 
	`HTTRACE
(
APP_TRACE
, "SavêFûãr. Usög c⁄ãxà%∞wôh sèã %c\n" 
_


1121 
me
 
_
 me->
°©e
+0x30);

1127 i‡(
°©us
 =
HT_NO_ACCESS
 || sètu†=
HT_NO_PROXY_ACCESS
 ||

1128 
°©us
 =
HT_REAUTH
 || sètu†=
HT_PROXY_REAUTH
) {

1129 
	`HTTRACE
(
APP_TRACE
, "Save Filter. Waiting foráuthentication\n");

1130  
HT_OK
;

1137 i‡(
°©us
 =
HT_TEMP_REDIRECT
 || sètu†=
HT_PERM_REDIRECT
 ||

1138 
°©us
 =
HT_FOUND
 || sètu†=
HT_SEE_OTHER
) {

1139 
HTAÀπCÆlback
 * 
¥om±
 = 
	`HTAÀπ_föd
(
HT_A_CONFIRM
);

1140 
HTAnch‹
 * 
ªdúe˘i⁄
 = 
	`HTRe•⁄£_ªdúe˘i⁄
(
ª•⁄£
);

1141 i‡(
¥om±
 && 
ªdúe˘i⁄
) {

1142 i‡(
me
->
°©e
 =
HT_LOAD_SOURCE
) {

1143 i‡((*
¥om±
)(
ªque°
, 
HT_A_CONFIRM
, 
HT_MSG_SOURCE_MOVED
,

1144 
NULL
, NULL, NULLË=
YES
) {

1145 
me
->
sour˚
 = 
	`HTAnch‹_∑ª¡
(
ªdúe˘i⁄
);

1150 
me
->
°©e
 = 
HT_ABORT_SAVE
;

1158 i‡((*
¥om±
)(
ªque°
, 
HT_A_CONFIRM
, 
HT_MSG_DESTINATION_MOVED
,

1159 
NULL
, NULL, NULLË=
YES
) {

1160 
me
->
de°ö©i⁄
 = 
ªdúe˘i⁄
;

1165 
me
->
°©e
 = 
HT_ABORT_SAVE
;

1168 
	`HTTRACE
(
APP_TRACE
, "Save Filter. Destination hae moved!\n");

1169 
me
->
de°ö©i⁄
 = 
ªdúe˘i⁄
;

1173  
HT_OK
;

1180 i‡(
me
->
°©e
 =
HT_LOAD_SOURCE
 &&

1181 (
°©us
 =
HT_LOADED
 || sètu†=
HT_NOT_MODIFIED
) &&

1182 !
	`HTEº‹_hasSevîôy
(
	`HTReque°_îr‹
(
ªque°
), 
ERR_INFO
)) {

1185 
me
->
∂a˚hﬁdî
 = 
	`HTAnch‹_documít
(me->
sour˚
);

1186 
	`HTAnch‹_£tDocumít
(
me
->
sour˚
, 
	`HTChunk_d©a
(me->
documít
));

1189 
	`HTReque°_addGnHd
(
ªque°
, 
HT_G_DATE
);

1190 
	`HTReque°_£tE¡ôyAnch‹
(
ªque°
, 
me
->
sour˚
);

1191 
	`HTReque°_£tMëhod
(
ªque°
, 
METHOD_PUT
);

1192 
	`HTReque°_£tAnch‹
(
ªque°
, 
me
->
de°ö©i⁄
);

1193 
	`HTReque°_£tOuçutF‹m©
(
ªque°
, 
me
->
f‹m©
);

1194 
	`HTReque°_£tOuçutSåóm
(
ªque°
, 
me
->
èrgë
);

1197 
	`£t_¥ec⁄dôi⁄s
(
ªque°
);

1200 
	`HTReque°_dñëeCªdítülsAŒ
(
ªque°
);

1203 
	`HTReque°_f‹˚Flush
(
ªque°
);

1206 
	`HTReque°_£tI¡î«l
(
ªque°
, 
NO
);

1209 
	`HTReque°_£tPo°CÆlback
(
ªque°
, 
HTE¡ôy_ˇŒback
);

1212 i‡(
	`œunch_ªque°
(
ªque°
, 
NO
Ë=
YES
)

1213 
me
->
°©e
 = 
HT_SAVE_DEST
;

1215 
	`HTAnch‹_£tDocumít
(
me
->
sour˚
, me->
∂a˚hﬁdî
);

1216 
	`HTChunk_dñëe
(
me
->
documít
);

1217 
	`HT_FREE
(
me
);

1220 
me
->
°©e
 = 
	`œunch_ªque°
(
ªque°
, 
NO
) ?

1221 
HT_SAVE_DEST
 : 
HT_LOAD_SOURCE
;

1229  
HT_ERROR
;

1238 
	`HTAnch‹_£tDocumít
(
me
->
sour˚
, me->
∂a˚hﬁdî
);

1239 
	`HTChunk_dñëe
(
me
->
documít
);

1240 
	`HT_FREE
(
me
);

1242  
HT_OK
;

1243 
	}
}

1252 
PUBLIC
 
BOOL
 
	$HTPutDocumítAbsﬁuã
 (
HTP¨ítAnch‹
 * 
sour˚
,

1253 c⁄° * 
de°ö©i⁄
,

1254 
HTReque°
 * 
ªque°
)

1256 i‡(
sour˚
 && 
de°ö©i⁄
 && 
ªque°
) {

1257 
HTAnch‹
 * 
de°
 = 
	`HTAnch‹_födAddªss
(
de°ö©i⁄
);

1258  
	`HTPutDocumítAnch‹
(
sour˚
, 
de°
, 
ªque°
);

1260  
NO
;

1261 
	}
}

1270 
PUBLIC
 
BOOL
 
	$HTPutDocumítRñ©ive
 (
HTP¨ítAnch‹
 * 
sour˚
,

1271 c⁄° * 
ªœtive
,

1272 
HTP¨ítAnch‹
 * 
de°ö©i⁄_ba£
,

1273 
HTReque°
 * 
ªque°
)

1275 i‡(
sour˚
 && 
ªœtive
 && 
de°ö©i⁄_ba£
 && 
ªque°
) {

1276 
BOOL
 
°©us
;

1277 * 
fuŒ_uæ
 = 
NULL
;

1278 * 
ba£_uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
de°ö©i⁄_ba£
);

1279 
fuŒ_uæ
=
	`HTP¨£
(
ªœtive
, 
ba£_uæ
,

1280 
PARSE_ACCESS
|
PARSE_HOST
|
PARSE_PATH
|
PARSE_PUNCTUATION
);

1281 
°©us
 = 
	`HTPutDocumítAbsﬁuã
(
sour˚
, 
fuŒ_uæ
, 
ªque°
);

1282 
	`HT_FREE
(
fuŒ_uæ
);

1283 
	`HT_FREE
(
ba£_uæ
);

1284  
°©us
;

1286  
NO
;

1287 
	}
}

1296 
PUBLIC
 
BOOL
 
	$HTPutDocumítAnch‹
 (
HTP¨ítAnch‹
 * 
sour˚
,

1297 
HTAnch‹
 * 
de°ö©i⁄
,

1298 
HTReque°
 * 
ªque°
)

1300 
HTP¨ítAnch‹
 * 
de°
 = 
	`HTAnch‹_∑ª¡
(
de°ö©i⁄
);

1301 i‡(
sour˚
 && 
de°
 && 
ªque°
) {

1302 i‡(
	`£tup_™ch‹s
(
ªque°
, 
sour˚
, 
de°
, 
METHOD_PUT
Ë=
YES
) {

1303 
HTPutC⁄ãxt
 * 
c⁄ãxt
 = 
NULL
;

1310 i‡(!(
c⁄ãxt
=(
HTPutC⁄ãxt
 *Ë
	`HT_CALLOC
(1, (HTPutContext))))

1311 
	`HT_OUTOFMEM
("HTPutDocumentAnchor");

1312 
c⁄ãxt
->
sour˚
 = source;

1313 
c⁄ãxt
->
de°ö©i⁄
 = destination;

1319 
	`HTReque°_addA·î
(
ªque°
, 
HTSaveFûãr
, 
NULL
, 
c⁄ãxt
, 
HT_ALL
,

1320 
HT_FILTER_FIRST
, 
NO
);

1323 
	`HTReque°_£tI¡î«l
(
ªque°
, 
YES
);

1329 
	`HTReque°_£tRñﬂdMode
(
ªque°
, 
HT_CACHE_FLUSH_MEM
);

1338 
	`HTReque°_addCacheC⁄åﬁ
(
ªque°
, "no-cache", "");

1344 
c⁄ãxt
->
f‹m©
 = 
	`HTReque°_ouçutF‹m©
(
ªque°
);

1345 
c⁄ãxt
->
èrgë
 = 
	`HTReque°_ouçutSåóm
(
ªque°
);

1346 
	`HTReque°_£tOuçutF‹m©
(
ªque°
, 
WWW_SOURCE
);

1347 
c⁄ãxt
->
documít
 = 
	`HTLﬂdAnch‹ToChunk
((
HTAnch‹
*)
sour˚
,
ªque°
);

1348 i‡(
c⁄ãxt
->
documít
 =
NULL
) {

1349 
	`HTTRACE
(
APP_TRACE
, "Put Document No source\n");

1350 
	`HT_FREE
(
c⁄ãxt
);

1351  
NO
;

1353  
YES
;

1356  
NO
;

1357 
	}
}

1371 
PUBLIC
 
BOOL
 
	$HTC›yAnch‹
 (
HTAnch‹
 * 
§c_™ch‹
, 
HTReque°
 * 
maö_de°
)

1373 
HTReque°
 * 
§c_ªq
;

1374 
HTLi°
 * 
cur
;

1375 i‡(!
§c_™ch‹
 || !
maö_de°
) {

1376 
	`HTTRACE
(
APP_TRACE
, "Copy........ BAD ARGUMENT\n");

1377  
NO
;

1381 
maö_de°
->
sour˚_™ch‹
 = 
	`HTAnch‹_∑ª¡
(
§c_™ch‹
);

1384 i‡(!
maö_de°
->
sour˚
) {

1385 
§c_ªq
 = 
	`HTReque°_dupI¡î«l
(
maö_de°
);

1386 
	`HTAnch‹_˛órHódî
((
HTP¨ítAnch‹
 *Ë
§c_™ch‹
);

1387 
§c_ªq
->
mëhod
 = 
METHOD_GET
;

1388 
§c_ªq
->
ªlﬂd
 = 
HT_CACHE_FLUSH_MEM
;

1389 
§c_ªq
->
ouçut_°ªam
 = 
NULL
;

1390 
§c_ªq
->
ouçut_f‹m©
 = 
WWW_SOURCE
;

1394 
HTLök
 * 
maö_lök
 = 
	`HTAnch‹_maöLök
((
HTAnch‹
 *Ë
§c_™ch‹
);

1395 
HTAnch‹
 *
maö_™ch‹
 = 
	`HTLök_de°ö©i⁄
(
maö_lök
);

1396 
HTMëhod
 
mëhod
 = 
	`HTLök_mëhod
(
maö_lök
);

1397 i‡(!
maö_lök
 || 
mëhod
==
METHOD_INVALID
) {

1398 
	`HTTRACE
(
APP_TRACE
, "Copy Anchor. No destination found or unspecified method\n");

1399 
	`HTReque°_dñëe
(
§c_ªq
);

1400  
NO
;

1402 
maö_de°
->
GíMask
 |
HT_G_DATE
;

1403 
maö_de°
->
ªlﬂd
 = 
HT_CACHE_VALIDATE
;

1404 
maö_de°
->
mëhod
 = method;

1405 
maö_de°
->
öput_f‹m©
 = 
WWW_SOURCE
;

1406 
	`HTReque°_addDe°ö©i⁄
(
§c_ªq
, 
maö_de°
);

1407 i‡(
	`HTLﬂdAnch‹
(
maö_™ch‹
, 
maö_de°
Ë=
NO
)

1408  
NO
;

1412 i‡((
cur
 = 
	`HTAnch‹_subLöks
(
§c_™ch‹
))) {

1413 
HTLök
 * 
¥es
;

1414 (
¥es
 = (
HTLök
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

1415 
HTAnch‹
 *
de°
 = 
	`HTLök_de°ö©i⁄
(
¥es
);

1416 
HTMëhod
 
mëhod
 = 
	`HTLök_mëhod
(
¥es
);

1417 
HTReque°
 *
de°_ªq
;

1418 i‡(!
de°
 || 
mëhod
==
METHOD_INVALID
) {

1419 
	`HTTRACE
(
APP_TRACE
, "C›y Anch‹. Badánch‹ sëu∞%p\n" 
_


1420 
de°
);

1421  
NO
;

1423 
de°_ªq
 = 
	`HTReque°_dupI¡î«l
(
maö_de°
);

1424 
de°_ªq
->
GíMask
 |
HT_G_DATE
;

1425 
de°_ªq
->
ªlﬂd
 = 
HT_CACHE_VALIDATE
;

1426 
de°_ªq
->
mëhod
 = method;

1427 
de°_ªq
->
ouçut_°ªam
 = 
NULL
;

1428 
de°_ªq
->
ouçut_f‹m©
 = 
WWW_SOURCE
;

1429 
	`HTReque°_addDe°ö©i⁄
(
§c_ªq
, 
de°_ªq
);

1431 i‡(
	`HTLﬂdAnch‹
(
de°
, 
de°_ªq
Ë=
NO
)

1432  
NO
;

1436 
§c_ªq
 = 
maö_de°
->
sour˚
;

1437 i‡(
§c_ªq
->
maöDe°ö©i⁄
)

1438 i‡(
	`œunch_ªque°
(
maö_de°
, 
NO
) == NO)

1439  
NO
;

1440 i‡(
§c_ªq
->
de°ö©i⁄s
) {

1441 
HTReque°
 * 
¥es
;

1442 
cur
 = 
	`HTAnch‹_subLöks
(
§c_™ch‹
);

1443 (
¥es
 = (
HTReque°
 *Ë
	`HTLi°_√xtObje˘
(
cur
)Ë!
NULL
) {

1444 i‡(
	`œunch_ªque°
(
¥es
, 
NO
) == NO)

1445  
NO
;

1451  
	`HTLﬂdAnch‹
(
§c_™ch‹
, 
§c_ªq
);

1452 
	}
}

1472 
PUBLIC
 
BOOL
 
	$HTU∂ﬂdAnch‹
 (
HTAnch‹
 * 
sour˚_™ch‹
,

1473 
HTReque°
 * 
ªque°
,

1474 
HTPo°CÆlback
 * 
ˇŒback
)

1476 
HTLök
 * 
lök
 = 
	`HTAnch‹_maöLök
((
HTAnch‹
 *Ë
sour˚_™ch‹
);

1477 
HTAnch‹
 * 
de°_™ch‹
 = 
	`HTLök_de°ö©i⁄
(
lök
);

1478 
HTMëhod
 
mëhod
 = 
	`HTLök_mëhod
(
lök
);

1479 i‡(!
lök
 || 
mëhod
==
METHOD_INVALID
 || !
ˇŒback
) {

1480 
	`HTTRACE
(
APP_TRACE
, "Upload...... No destination found or unspecified method\n");

1481  
NO
;

1483 
ªque°
->
GíMask
 |
HT_G_DATE
;

1484 
ªque°
->
ªlﬂd
 = 
HT_CACHE_VALIDATE
;

1485 
ªque°
->
mëhod
 = method;

1486 
ªque°
->
sour˚_™ch‹
 = 
	`HTAnch‹_∑ª¡
(source_anchor);

1487 
ªque°
->
Po°CÆlback
 = 
ˇŒback
;

1488  
	`HTLﬂdAnch‹
(
de°_™ch‹
, 
ªque°
);

1489 
	}
}

1500 
PUBLIC
 
	$HTU∂ﬂd_ˇŒback
 (
HTReque°
 * 
ªque°
, 
HTSåóm
 * 
èrgë
)

1502 
	`HTTRACE
(
APP_TRACE
, "Uploading... from callback function\n");

1503 i‡(!
ªque°
 || !ªque°->
sour˚_™ch‹
 || !
èrgë
Ë 
HT_ERROR
;

1505 
°©us
;

1506 
HTP¨ítAnch‹
 * 
sour˚
 = 
ªque°
->
sour˚_™ch‹
;

1507 * 
documít
 = (*Ë
	`HTAnch‹_documít
(
ªque°
->
sour˚_™ch‹
);

1508 
Àn
 = 
	`HTAnch‹_Àngth
(
sour˚
);

1509 i‡(
Àn
 < 0) {

1510 
Àn
 = 
	`°æí
(
documít
);

1511 
	`HTAnch‹_£tLígth
(
sour˚
, 
Àn
);

1513 
°©us
 = (*
èrgë
->
iß
->
put_block
)—¨gë, 
documít
, 
Àn
);

1514 i‡(
°©us
 =
HT_OK
)

1515  (*
èrgë
->
iß
->
Êush
)(target);

1516 i‡(
°©us
 =
HT_WOULD_BLOCK
) {

1517 
	`HTTRACE
(
PROT_TRACE
, "POST Anchor. Target WOULD BLOCK\n");

1518  
HT_WOULD_BLOCK
;

1519 } i‡(
°©us
 =
HT_PAUSE
) {

1520 
	`HTTRACE
(
PROT_TRACE
, "POST Anchor. Target PAUSED\n");

1521  
HT_PAUSE
;

1522 } i‡(
°©us
 > 0) {

1523 
	`HTTRACE
(
PROT_TRACE
, "POST Anch‹. T¨gëÑëu∫†%d\n" 
_
 
°©us
);

1524  
°©us
;

1526 
	`HTTRACE
(
PROT_TRACE
, "POST Anchor. Target ERROR\n");

1527  
°©us
;

1530 
	}
}

1541 
PUBLIC
 
BOOL
 
	$HTHódAbsﬁuã
 (c⁄° * 
uæ
, 
HTReque°
 * 
ªque°
)

1543 i‡(
uæ
 && 
ªque°
) {

1544 
HTAnch‹
 * 
™ch‹
 = 
	`HTAnch‹_födAddªss
(
uæ
);

1545  
	`HTHódAnch‹
(
™ch‹
, 
ªque°
);

1547  
NO
;

1548 
	}
}

1557 
PUBLIC
 
BOOL
 
	$HTHódRñ©ive
 (c⁄° * 
ªœtive
,

1558 
HTP¨ítAnch‹
 * 
ba£
,

1559 
HTReque°
 * 
ªque°
)

1561 
BOOL
 
°©us
 = 
NO
;

1562 i‡(
ªœtive
 && 
ba£
 && 
ªque°
) {

1563 * 
ªl
 = 
NULL
;

1564 * 
fuŒ_uæ
 = 
NULL
;

1565 * 
ba£_uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
ba£
);

1566 
	`SåAŒocC›y
(
ªl
, 
ªœtive
);

1567 
fuŒ_uæ
 = 
	`HTP¨£
(
	`HTSåù
(
ªl
), 
ba£_uæ
,

1568 
PARSE_ACCESS
|
PARSE_HOST
|
PARSE_PATH
|
PARSE_PUNCTUATION
);

1569 
°©us
 = 
	`HTHódAbsﬁuã
(
fuŒ_uæ
, 
ªque°
);

1570 
	`HT_FREE
(
ªl
);

1571 
	`HT_FREE
(
fuŒ_uæ
);

1572 
	`HT_FREE
(
ba£_uæ
);

1574  
°©us
;

1575 
	}
}

1582 
PUBLIC
 
BOOL
 
	$HTHódAnch‹
 (
HTAnch‹
 * 
™ch‹
, 
HTReque°
 * 
ªque°
)

1584 i‡(
™ch‹
 && 
ªque°
) {

1585 
	`HTReque°_£tAnch‹
(
ªque°
, 
™ch‹
);

1586 
	`HTReque°_£tMëhod
(
ªque°
, 
METHOD_HEAD
);

1587  
	`œunch_ªque°
(
ªque°
, 
NO
);

1589  
NO
;

1590 
	}
}

1601 
PUBLIC
 
BOOL
 
	$HTDñëeAbsﬁuã
 (c⁄° * 
uæ
, 
HTReque°
 * 
ªque°
)

1603 i‡(
uæ
 && 
ªque°
) {

1604 
HTAnch‹
 * 
™ch‹
 = 
	`HTAnch‹_födAddªss
(
uæ
);

1605  
	`HTDñëeAnch‹
(
™ch‹
, 
ªque°
);

1607  
NO
;

1608 
	}
}

1617 
PUBLIC
 
BOOL
 
	$HTDñëeRñ©ive
 (c⁄° * 
ªœtive
,

1618 
HTP¨ítAnch‹
 * 
ba£
,

1619 
HTReque°
 * 
ªque°
)

1621 
BOOL
 
°©us
 = 
NO
;

1622 i‡(
ªœtive
 && 
ba£
 && 
ªque°
) {

1623 * 
ªl
 = 
NULL
;

1624 * 
fuŒ_uæ
 = 
NULL
;

1625 * 
ba£_uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
ba£
);

1626 
	`SåAŒocC›y
(
ªl
, 
ªœtive
);

1627 
fuŒ_uæ
 = 
	`HTP¨£
(
	`HTSåù
(
ªl
), 
ba£_uæ
,

1628 
PARSE_ACCESS
|
PARSE_HOST
|
PARSE_PATH
|
PARSE_PUNCTUATION
);

1629 
°©us
 = 
	`HTDñëeAbsﬁuã
(
fuŒ_uæ
, 
ªque°
);

1630 
	`HT_FREE
(
ªl
);

1631 
	`HT_FREE
(
fuŒ_uæ
);

1632 
	`HT_FREE
(
ba£_uæ
);

1634  
°©us
;

1635 
	}
}

1642 
PUBLIC
 
BOOL
 
	$HTDñëeAnch‹
 (
HTAnch‹
 * 
™ch‹
, 
HTReque°
 * 
ªque°
)

1644 i‡(
™ch‹
 && 
ªque°
) {

1645 
	`HTReque°_£tAnch‹
(
ªque°
, 
™ch‹
);

1646 
	`HTReque°_£tMëhod
(
ªque°
, 
METHOD_DELETE
);

1647  
	`œunch_ªque°
(
ªque°
, 
NO
);

1649  
NO
;

1650 
	}
}

1661 
PUBLIC
 
BOOL
 
	$HTO±i⁄sAbsﬁuã
 (c⁄° * 
uæ
, 
HTReque°
 * 
ªque°
)

1663 i‡(
uæ
 && 
ªque°
) {

1664 
HTAnch‹
 * 
™ch‹
 = 
	`HTAnch‹_födAddªss
(
uæ
);

1665  
	`HTO±i⁄sAnch‹
(
™ch‹
, 
ªque°
);

1667  
NO
;

1668 
	}
}

1677 
PUBLIC
 
BOOL
 
	$HTO±i⁄sRñ©ive
 (c⁄° * 
ªœtive
,

1678 
HTP¨ítAnch‹
 * 
ba£
,

1679 
HTReque°
 * 
ªque°
)

1681 
BOOL
 
°©us
 = 
NO
;

1682 i‡(
ªœtive
 && 
ba£
 && 
ªque°
) {

1683 * 
ªl
 = 
NULL
;

1684 * 
fuŒ_uæ
 = 
NULL
;

1685 * 
ba£_uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
ba£
);

1686 
	`SåAŒocC›y
(
ªl
, 
ªœtive
);

1687 
fuŒ_uæ
 = 
	`HTP¨£
(
	`HTSåù
(
ªl
), 
ba£_uæ
,

1688 
PARSE_ACCESS
|
PARSE_HOST
|
PARSE_PATH
|
PARSE_PUNCTUATION
);

1689 
°©us
 = 
	`HTO±i⁄sAbsﬁuã
(
fuŒ_uæ
, 
ªque°
);

1690 
	`HT_FREE
(
ªl
);

1691 
	`HT_FREE
(
fuŒ_uæ
);

1692 
	`HT_FREE
(
ba£_uæ
);

1694  
°©us
;

1695 
	}
}

1702 
PUBLIC
 
BOOL
 
	$HTO±i⁄sAnch‹
 (
HTAnch‹
 * 
™ch‹
, 
HTReque°
 * 
ªque°
)

1704 i‡(
™ch‹
 && 
ªque°
) {

1705 
	`HTReque°_£tAnch‹
(
ªque°
, 
™ch‹
);

1706 
	`HTReque°_£tMëhod
(
ªque°
, 
METHOD_OPTIONS
);

1707  
	`œunch_ªque°
(
ªque°
, 
NO
);

1709  
NO
;

1710 
	}
}

1721 
PUBLIC
 
BOOL
 
	$HTTø˚Absﬁuã
 (c⁄° * 
uæ
, 
HTReque°
 * 
ªque°
)

1723 i‡(
uæ
 && 
ªque°
) {

1724 
HTAnch‹
 * 
™ch‹
 = 
	`HTAnch‹_födAddªss
(
uæ
);

1725  
	`HTTø˚Anch‹
(
™ch‹
, 
ªque°
);

1727  
NO
;

1728 
	}
}

1737 
PUBLIC
 
BOOL
 
	$HTTø˚Rñ©ive
 (c⁄° * 
ªœtive
,

1738 
HTP¨ítAnch‹
 * 
ba£
,

1739 
HTReque°
 * 
ªque°
)

1741 
BOOL
 
°©us
 = 
NO
;

1742 i‡(
ªœtive
 && 
ba£
 && 
ªque°
) {

1743 * 
ªl
 = 
NULL
;

1744 * 
fuŒ_uæ
 = 
NULL
;

1745 * 
ba£_uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
ba£
);

1746 
	`SåAŒocC›y
(
ªl
, 
ªœtive
);

1747 
fuŒ_uæ
 = 
	`HTP¨£
(
	`HTSåù
(
ªl
), 
ba£_uæ
,

1748 
PARSE_ACCESS
|
PARSE_HOST
|
PARSE_PATH
|
PARSE_PUNCTUATION
);

1749 
°©us
 = 
	`HTTø˚Absﬁuã
(
fuŒ_uæ
, 
ªque°
);

1750 
	`HT_FREE
(
ªl
);

1751 
	`HT_FREE
(
fuŒ_uæ
);

1752 
	`HT_FREE
(
ba£_uæ
);

1754  
°©us
;

1755 
	}
}

1762 
PUBLIC
 
BOOL
 
	$HTTø˚Anch‹
 (
HTAnch‹
 * 
™ch‹
, 
HTReque°
 * 
ªque°
)

1764 i‡(
™ch‹
 && 
ªque°
) {

1765 
	`HTReque°_£tAnch‹
(
ªque°
, 
™ch‹
);

1766 
	`HTReque°_£tMëhod
(
ªque°
, 
METHOD_TRACE
);

1767  
	`œunch_ªque°
(
ªque°
, 
NO
);

1769  
NO
;

1770 
	}
}

1777 
PRIVATE
 
BOOL
 
	$œunch_£rvî
 (
HTReque°
 * 
ªque°
, 
BOOL
 
ªcursive
)

1779 #ifde‡
HTDEBUG


1780 i‡(
PROT_TRACE
) {

1781 
HTP¨ítAnch‹
 *
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

1782 * 
fuŒ_addªss
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
™ch‹
);

1783 
	`HTTRACE
(
PROT_TRACE
, "HTAc˚ss.... Sîvög %s\n" 
_
 
fuŒ_addªss
);

1784 
	`HT_FREE
(
fuŒ_addªss
);

1787  
	`HTSîve
(
ªque°
, 
ªcursive
);

1788 
	}
}

1794 
PUBLIC
 
BOOL
 
	$HTSîveAbsﬁuã
 (c⁄° * 
uæ
, 
HTReque°
 * 
ªque°
)

1796 i‡(
uæ
 && 
ªque°
) {

1797 
HTAnch‹
 * 
™ch‹
 = 
	`HTAnch‹_födAddªss
(
uæ
);

1798 
	`HTReque°_£tAnch‹
(
ªque°
, 
™ch‹
);

1799  
	`œunch_£rvî
(
ªque°
, 
NO
);

1801  
NO
;

1802 
	}
}

	@Library/src/HTAccess.h

88 #i‚de‡
HTACCESS_H


89 
	#HTACCESS_H


	)

91 
	~"HTReq.h
"

92 
	~"HTAnch‹.h
"

114 
BOOL
 
HTLﬂdAbsﬁuã
 (c⁄° * 
uæ
, 
HTReque°
 * 
ªque°
);

125 
BOOL
 
HTLﬂdRñ©ive
 (c⁄° * 
ªœtive
,

126 
HTP¨ítAnch‹
 * 
ba£
,

127 
HTReque°
 * 
ªque°
);

139 
HTChunk
 * 
HTLﬂdToChunk
 (c⁄° * 
uæ
, 
HTReque°
 * 
ªque°
);

153 
BOOL
 
HTLﬂdToFûe
 (c⁄° * 
uæ
, 
HTReque°
 * 
ªque°
,

154 c⁄° * 
fûíame
);

166 
BOOL
 
HTLﬂdToSåóm
 (c⁄° * 
uæ
, 
HTSåóm
 * 
ouçut
,

167 
HTReque°
 * 
ªque°
);

178 
BOOL
 
HTLﬂdAnch‹
 (
HTAnch‹
 * 
™ch‹
, 
HTReque°
 * 
ªque°
);

190 
HTChunk
 * 
HTLﬂdAnch‹ToChunk
 (
HTAnch‹
 * 
™ch‹
, 
HTReque°
 * 
ªque°
);

203 
BOOL
 
HTLﬂdAnch‹Recursive
 (
HTAnch‹
 * 
™ch‹
, 
HTReque°
 * 
ªque°
);

229 
BOOL
 
HTLﬂdRuÀs
 (c⁄° * 
uæ
);

230 
BOOL
 
HTLﬂdRuÀsAutom©iˇŒy
 (c⁄° * 
uæ
);

252 
BOOL
 
HTSórchAbsﬁuã
 (
HTChunk
 * 
keyw‹ds
,

253 c⁄° * 
ba£
,

254 
HTReque°
 * 
ªque°
);

266 
BOOL
 
HTSórchRñ©ive
 (
HTChunk
 * 
keyw‹ds
,

267 c⁄° * 
ªœtive
,

268 
HTP¨ítAnch‹
 * 
ba£
,

269 
HTReque°
 * 
ªque°
);

277 
BOOL
 
HTSórchAnch‹
 (
HTChunk
 * 
keyw‹ds
,

278 
HTAnch‹
 * 
™ch‹
,

279 
HTReque°
 * 
ªque°
);

290 
BOOL
 
HTSórchSåög
 (c⁄° * 
keyw‹ds
,

291 
HTAnch‹
 * 
™ch‹
,

292 
HTReque°
 * 
ªque°
);

317 
BOOL
 
HTGëF‹mAbsﬁuã
 (
HTAssocLi°
 * 
f‹md©a
,

318 c⁄° * 
ba£
,

319 
HTReque°
 * 
ªque°
);

332 
BOOL
 
HTGëF‹mRñ©ive
 (
HTAssocLi°
 * 
f‹md©a
,

333 c⁄° * 
ªœtive
,

334 
HTP¨ítAnch‹
 * 
ba£
,

335 
HTReque°
 * 
ªque°
);

347 
BOOL
 
HTGëF‹mAnch‹
 (
HTAssocLi°
 * 
f‹md©a
,

348 
HTAnch‹
 * 
™ch‹
,

349 
HTReque°
 * 
ªque°
);

378 
HTP¨ítAnch‹
 * 
HTPo°F‹mAbsﬁuã
 (
HTAssocLi°
 * 
f‹md©a
,

379 c⁄° * 
ba£
,

380 
HTReque°
 * 
ªque°
);

392 
HTP¨ítAnch‹
 * 
HTPo°F‹mRñ©ive
 (
HTAssocLi°
 * 
f‹md©a
,

393 c⁄° * 
ªœtive
,

394 
HTP¨ítAnch‹
 * 
ba£
,

395 
HTReque°
 * 
ªque°
);

407 
HTP¨ítAnch‹
 * 
HTPo°F‹mAnch‹
 (
HTAssocLi°
 * 
f‹md©a
,

408 
HTAnch‹
 * 
™ch‹
,

409 
HTReque°
 * 
ªque°
);

424 
HTChunk
 * 
HTPo°F‹mAnch‹ToChunk
 (
HTAssocLi°
 * 
f‹md©a
,

425 
HTAnch‹
 * 
™ch‹
,

426 
HTReque°
 * 
ªque°
);

443 
BOOL
 
HTHódAbsﬁuã
 (c⁄° * 
uæ
, 
HTReque°
 * 
ªque°
);

453 
BOOL
 
HTHódRñ©ive
 (c⁄° * 
ªœtive
,

454 
HTP¨ítAnch‹
 * 
ba£
,

455 
HTReque°
 * 
ªque°
);

466 
BOOL
 
HTHódAnch‹
 (
HTAnch‹
 * 
™ch‹
, 
HTReque°
 * 
ªque°
);

482 
BOOL
 
HTDñëeAbsﬁuã
 (c⁄° * 
uæ
, 
HTReque°
 * 
ªque°
);

492 
BOOL
 
HTDñëeRñ©ive
 (c⁄° * 
ªœtive
,

493 
HTP¨ítAnch‹
 * 
ba£
,

494 
HTReque°
 * 
ªque°
);

505 
BOOL
 
HTDñëeAnch‹
 (
HTAnch‹
 * 
™ch‹
, 
HTReque°
 * 
ªque°
);

538 
BOOL
 
HTPutAbsﬁuã
 (
HTP¨ítAnch‹
 * 
sour˚
,

539 c⁄° * 
de°ö©i⁄
,

540 
HTReque°
 * 
ªque°
);

551 
BOOL
 
HTPutRñ©ive
 (
HTP¨ítAnch‹
 * 
sour˚
,

552 c⁄° * 
ªœtive
,

553 
HTP¨ítAnch‹
 * 
de°ö©i⁄_ba£
,

554 
HTReque°
 * 
ªque°
);

565 
BOOL
 
HTPutAnch‹
 (
HTP¨ítAnch‹
 * 
sour˚
,

566 
HTAnch‹
 * 
de°
,

567 
HTReque°
 * 
ªque°
);

589 
BOOL
 
HTPutSåu˘uªdAbsﬁuã
 (
HTP¨ítAnch‹
 * 
sour˚
,

590 c⁄° * 
de°ö©i⁄
,

591 
HTReque°
 * 
ªque°
,

592 
HTPo°CÆlback
 * 
öput
);

603 
BOOL
 
HTPutSåu˘uªdRñ©ive
 (
HTP¨ítAnch‹
 * 
sour˚
,

604 c⁄° * 
ªœtive
,

605 
HTP¨ítAnch‹
 * 
de°ö©i⁄_ba£
,

606 
HTReque°
 * 
ªque°
,

607 
HTPo°CÆlback
 * 
öput
);

619 
BOOL
 
HTPutSåu˘uªdAnch‹
 (
HTP¨ítAnch‹
 * 
sour˚
,

620 
HTAnch‹
 * 
de°ö©i⁄
,

621 
HTReque°
 * 
ªque°
,

622 
HTPo°CÆlback
 * 
öput
);

641 
BOOL
 
HTPutDocumítAbsﬁuã
 (
HTP¨ítAnch‹
 * 
sour˚
,

642 c⁄° * 
de°ö©i⁄
,

643 
HTReque°
 * 
ªque°
);

653 
BOOL
 
HTPutDocumítRñ©ive
 (
HTP¨ítAnch‹
 * 
sour˚
,

654 c⁄° * 
ªœtive
,

655 
HTP¨ítAnch‹
 * 
de°ö©i⁄_ba£
,

656 
HTReque°
 * 
ªque°
);

666 
BOOL
 
HTPutDocumítAnch‹
 (
HTP¨ítAnch‹
 * 
sour˚
,

667 
HTAnch‹
 * 
de°ö©i⁄
,

668 
HTReque°
 * 
ªque°
);

698 
BOOL
 
HTPo°Absﬁuã
 (
HTP¨ítAnch‹
 * 
sour˚
,

699 c⁄° * 
de°ö©i⁄
,

700 
HTReque°
 * 
ªque°
);

710 
BOOL
 
HTPo°Rñ©ive
 (
HTP¨ítAnch‹
 * 
sour˚
,

711 c⁄° * 
ªœtive
,

712 
HTP¨ítAnch‹
 * 
de°ö©i⁄_ba£
,

713 
HTReque°
 * 
ªque°
);

724 
BOOL
 
HTPo°Anch‹
 (
HTP¨ítAnch‹
 * 
sour˚
,

725 
HTAnch‹
 * 
de°
,

726 
HTReque°
 * 
ªque°
);

754 
BOOL
 
HTO±i⁄sAbsﬁuã
 (c⁄° * 
uæ
, 
HTReque°
 * 
ªque°
);

763 
BOOL
 
HTO±i⁄sRñ©ive
 (c⁄° * 
ªœtive
,

764 
HTP¨ítAnch‹
 * 
ba£
,

765 
HTReque°
 * 
ªque°
);

776 
BOOL
 
HTO±i⁄sAnch‹
 (
HTAnch‹
 * 
™ch‹
, 
HTReque°
 * 
ªque°
);

808 
BOOL
 
HTTø˚Absﬁuã
 (c⁄° * 
uæ
, 
HTReque°
 * 
ªque°
);

817 
BOOL
 
HTTø˚Rñ©ive
 (c⁄° * 
ªœtive
,

818 
HTP¨ítAnch‹
 * 
ba£
,

819 
HTReque°
 * 
ªque°
);

830 
BOOL
 
HTTø˚Anch‹
 (
HTAnch‹
 * 
™ch‹
, 
HTReque°
 * 
ªque°
);

857 
BOOL
 
HTSîveAbsﬁuã
 (c⁄° * 
addªss
, 
HTReque°
 * 
ªque°
);

881 
BOOL
 
HTC›yAnch‹
 (
HTAnch‹
 * 
§c_™ch‹
, 
HTReque°
 * 
maö_ªq
);

905 
BOOL
 
HTU∂ﬂdAnch‹
 (
HTAnch‹
 * 
sour˚_™ch‹
,

906 
HTReque°
 * 
ªque°
,

907 
HTPo°CÆlback
 * 
ˇŒback
);

922 
HTU∂ﬂd_ˇŒback
 (
HTReque°
 * 
ªque°
, 
HTSåóm
 * 
èrgë
);

	@Library/src/HTAlert.c

18 
	~"WWWLib.h
"

19 
	~"HTEº‹.h
"

20 
	~"HTAÀπ.h
"

22 
	s_HTAÀπ
 {

23 
HTAÀπCÆlback
 * 
	mcbf
;

24 
HTAÀπOpcode
 
	m›code
;

25 } 
	tHTAÀπ
;

27 
	s_HTAÀπP¨
 {

28 * 
	mmesßge
;

29 * 
	m£¸ë
;

30 * 
	mouçut
;

33 
PRIVATE
 
BOOL
 
	gHTI¡îa˘ive
=
YES
;

35 
PRIVATE
 
HTLi°
 * 
	gHTMesßges
 = 
NULL
;

42 
PUBLIC
 
	$HTAÀπ_£tI¡îa˘ive
 (
BOOL
 
öãø˘ive
)

44 
HTI¡îa˘ive
 = 
öãø˘ive
;

45 
	}
}

47 
PUBLIC
 
BOOL
 
	$HTAÀπ_öãø˘ive
 ()

49  
HTI¡îa˘ive
;

50 
	}
}

61 
PUBLIC
 
BOOL
 
	$HTAÀπCÆl_add
 (
HTLi°
 * 
li°
, 
HTAÀπCÆlback
 * 
cbf
,

62 
HTAÀπOpcode
 
›code
)

64 
	`HTTRACE
(
CORE_TRACE
, "AÀπ CÆl.. Add AÀπ H™dÀ∏%p\n" 
	`_
 (*Ë
cbf
);

65 i‡(
li°
 && 
cbf
) {

66 
HTAÀπ
 *
me
;

67 i‡((
me
 = (
HTAÀπ
 *Ë
	`HT_CALLOC
(1, (HTAÀπ))Ë=
NULL
)

68 
	`HT_OUTOFMEM
("HTAlertCall_add");

69 
me
->
cbf
 = cbf;

70 
me
->
›code
 = opcode;

71  
	`HTLi°_addObje˘
(
li°
, (*Ë
me
);

73  
NO
;

74 
	}
}

80 
PUBLIC
 
BOOL
 
	$HTAÀπCÆl_dñëe
 (
HTLi°
 * 
li°
, 
HTAÀπCÆlback
 *
cbf
)

82 
	`HTTRACE
(
CORE_TRACE
, "AÀπ CÆl.. DñëêAÀπ H™dÀ∏%p\n" 
	`_
 (*Ë
cbf
);

83 i‡(
li°
 && 
cbf
) {

84 
HTLi°
 *
cur
 = 
li°
;

85 
HTAÀπ
 *
¥es
;

86 (
¥es
 = (
HTAÀπ
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

87 i‡(
¥es
->
cbf
 == cbf) {

88 
	`HTLi°_ªmoveObje˘
(
li°
, (*Ë
¥es
);

89 
	`HT_FREE
(
¥es
);

90  
YES
;

94  
NO
;

95 
	}
}

101 
PUBLIC
 
BOOL
 
	$HTAÀπCÆl_dñëeOpcode
 (
HTLi°
 * 
li°
, 
HTAÀπOpcode
 
›code
)

103 
	`HTTRACE
(
CORE_TRACE
, "AÀπ CÆl.. DñëêÆ»h™dÀr†wôh opcodê%d\n" 
_
 
›code
);

104 i‡(
li°
) {

105 
HTLi°
 * 
cur
 = 
li°
;

106 
HTAÀπ
 * 
¥es
;

107 (
¥es
 = (
HTAÀπ
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

108 i‡(
¥es
->
›code
 == opcode) {

109 
	`HTLi°_ªmoveObje˘
(
li°
, (*Ë
¥es
);

110 
	`HT_FREE
(
¥es
);

111 
cur
 = 
li°
;

114  
YES
;

116  
NO
;

117 
	}
}

123 
PUBLIC
 
BOOL
 
	$HTAÀπCÆl_dñëeAŒ
 (
HTLi°
 * 
li°
)

125 
	`HTTRACE
(
CORE_TRACE
, "Alert Call.. Delete All callback functions\n");

126 i‡(
li°
) {

127 
HTLi°
 *
cur
 = 
li°
;

128 
HTAÀπ
 *
¥es
;

129 (
¥es
 = (
HTAÀπ
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

130 
	`HT_FREE
(
¥es
);

132 
	`HTLi°_dñëe
(
li°
);

133  
YES
;

135  
NO
;

136 
	}
}

143 
PUBLIC
 
HTAÀπCÆlback
 * 
	$HTAÀπCÆl_föd
 (
HTLi°
 * 
li°
, 
HTAÀπOpcode
 
›code
)

145 i‡(
li°
 && 
HTI¡îa˘ive
) {

146 
HTAÀπ
 * 
¥es
;

147 (
¥es
 = (
HTAÀπ
 *Ë
	`HTLi°_√xtObje˘
(
li°
)Ë!
NULL
) {

148 i‡(
¥es
->
›code
 & opcode)

149  
¥es
->
cbf
;

151 
	`HTTRACE
(
CORE_TRACE
, "AÀπ CÆl.. Nÿíåy found f‹ opcodê%d\n" 
_
 
›code
);

153  
NULL
;

154 
	}
}

159 
PUBLIC
 
	$HTAÀπ_£tGlobÆ
 (
HTLi°
 * 
li°
)

161 
HTMesßges
 = 
li°
;

162 
	}
}

164 
PUBLIC
 
HTLi°
 * 
	$HTAÀπ_globÆ
 ()

166  
HTMesßges
;

167 
	}
}

169 
PUBLIC
 
BOOL
 
	$HTAÀπ_add
 (
HTAÀπCÆlback
 * 
cbf
, 
HTAÀπOpcode
 
›code
)

171 i‡(!
HTMesßges
ËHTMesßge†
	`HTLi°_√w
();

172  
	`HTAÀπCÆl_add
(
HTMesßges
, 
cbf
, 
›code
);

173 
	}
}

175 
PUBLIC
 
BOOL
 
	$HTAÀπ_dñëe
 (
HTAÀπCÆlback
 * 
cbf
)

177 i‡(!
HTMesßges
ËHTMesßge†
	`HTLi°_√w
();

178  
	`HTAÀπCÆl_dñëe
(
HTMesßges
, 
cbf
);

179 
	}
}

181 
PUBLIC
 
BOOL
 
	$HTAÀπ_dñëeOpcode
 (
HTAÀπOpcode
 
›code
)

183 i‡(!
HTMesßges
ËHTMesßge†
	`HTLi°_√w
();

184  
	`HTAÀπCÆl_dñëeOpcode
(
HTMesßges
, 
›code
);

185 
	}
}

187 
PUBLIC
 
BOOL
 
	$HTAÀπ_dñëeAŒ
 ()

189 
BOOL
 
°©us
 = 
NO
;

190 i‡(
HTMesßges
) {

191 
°©us
 = 
	`HTAÀπCÆl_dñëeAŒ
(
HTMesßges
);

192 
HTMesßges
 = 
NULL
;

194  
°©us
;

195 
	}
}

201 
PUBLIC
 
HTAÀπCÆlback
 * 
	$HTAÀπ_föd
 (
HTAÀπOpcode
 
›code
)

203  
	`HTAÀπCÆl_föd
(
HTMesßges
, 
›code
);

204 
	}
}

206 
PUBLIC
 
HTAÀπP¨
 * 
	$HTAÀπ_√wRïly
 ()

208 
HTAÀπP¨
 * 
me
;

209 i‡((
me
 = (
HTAÀπP¨
 *Ë
	`HT_CALLOC
(1, (HTAÀπP¨))Ë=
NULL
)

210 
	`HT_OUTOFMEM
("HTAlert_newReply");

211  
me
;

212 
	}
}

218 
PUBLIC
 
	$HTAÀπ_dñëeRïly
 (
HTAÀπP¨
 * 
ﬁd
)

220 
	`HT_FREE
(
ﬁd
);

221 
	}
}

223 
PUBLIC
 * 
	$HTAÀπ_ª∂yMesßge
 (
HTAÀπP¨
 * 
me
)

225  
me
 ? me->
mesßge
 : 
NULL
;

226 
	}
}

228 
PUBLIC
 
BOOL
 
	$HTAÀπ_£tRïlyMesßge
 (
HTAÀπP¨
 * 
me
, c⁄° * 
mesßge
)

230 i‡(
me
 && 
mesßge
) {

231 
	`SåAŒocC›y
(
me
->
mesßge
, message);

232  
YES
;

234  
NO
;

235 
	}
}

237 
PUBLIC
 
BOOL
 
	$HTAÀπ_assignRïlyMesßge
 (
HTAÀπP¨
 * 
me
, * 
mesßge
)

239 i‡(
me
Ëme->
mesßge
 = message;

240  
YES
;

241 
	}
}

243 
PUBLIC
 * 
	$HTAÀπ_ª∂ySe¸ë
 (
HTAÀπP¨
 * 
me
)

245  
me
 ? me->
£¸ë
 : 
NULL
;

246 
	}
}

248 
PUBLIC
 
BOOL
 
	$HTAÀπ_£tRïlySe¸ë
 (
HTAÀπP¨
 * 
me
, c⁄° * 
£¸ë
)

250 i‡(
me
 && 
£¸ë
) {

251 
	`SåAŒocC›y
(
me
->
£¸ë
, secret);

252  
YES
;

254  
NO
;

255 
	}
}

257 
PUBLIC
 * 
	$HTAÀπ_ª∂yOuçut
 (
HTAÀπP¨
 * 
me
)

259  
me
 ? me->
ouçut
 : 
NULL
;

260 
	}
}

262 
PUBLIC
 
BOOL
 
	$HTAÀπ_£tRïlyOuçut
 (
HTAÀπP¨
 * 
me
, * 
ouçut
)

264 i‡(
me
) {

265 
me
->
ouçut
 = output;

266  
YES
;

268  
NO
;

269 
	}
}

	@Library/src/HTAlert.h

45 #i‚de‡
HTALERT_H


46 
	#HTALERT_H


	)

48 
	~"HTReq.h
"

67 
	e_HTAÀπOpcode
 {

68 
	mHT_PROG_DNS
 = 0x1,

69 
	mHT_PROG_CONNECT
 = 0x2,

70 
	mHT_PROG_ACCEPT
 = 0x4,

71 
	mHT_PROG_READ
 = 0x8,

72 
	mHT_PROG_WRITE
 = 0x10,

73 
	mHT_PROG_DONE
 = 0x20,

74 
	mHT_PROG_INTERRUPT
 = 0x40,

75 
	mHT_PROG_OTHER
 = 0x80,

76 
	mHT_PROG_TIMEOUT
 = 0x100,

77 
	mHT_PROG_LOGIN
 = 0x200,

78 
	mHT_A_PROGRESS
 = 0xFFFF,

82 
	mHT_A_MESSAGE
 = 0x1<<16,

83 
	mHT_A_CONFIRM
 = 0x2<<16,

84 
	mHT_A_PROMPT
 = 0x4<<16,

85 
	mHT_A_SECRET
 = 0x8<<16,

86 
	mHT_A_USER_PW
 = 0x10<<16

87 } 
	tHTAÀπOpcode
;

89 
_HTAÀπP¨
 
	tHTAÀπP¨
;

91 
BOOL
 
	tHTAÀπCÆlback
 (
	tHTReque°
 * 
	tªque°
, 
	tHTAÀπOpcode
 
	t›
,

92 
	tmsgnum
, c⁄° * 
	tdÁu…
, * 
	töput
,

93 
	tHTAÀπP¨
 * 
	tª∂y
);

109 
	e_HTAÀπMsg
 {

110 
	mHT_MSG_NULL
 = -1,

111 
	mHT_MSG_UID
 = 0,

112 
	mHT_MSG_PROXY_UID
,

113 
	mHT_MSG_FTP_UID
,

114 
	mHT_MSG_PW
,

115 
	mHT_MSG_FILENAME
,

116 
	mHT_MSG_ACCOUNT
,

117 
	mHT_MSG_METHOD
,

118 
	mHT_MSG_MOVED
,

119 
	mHT_MSG_RULES
,

120 
	mHT_MSG_FILE_REPLACE
,

121 
	mHT_MSG_RETRY_AUTHENTICATION
,

122 
	mHT_MSG_RETRY_PROXY_AUTH
,

123 
	mHT_MSG_REDO
,

124 
	mHT_MSG_BIG_PUT
,

125 
	mHT_MSG_SOURCE_MOVED
,

126 
	mHT_MSG_DESTINATION_MOVED
,

127 
	mHT_MSG_REDIRECTION
,

128 
	mHT_MSG_PROXY
,

129 
	mHT_MSG_CACHE_LOCK
,

130 
	mHT_MSG_ACCEPT_COOKIE
,

131 
	mHT_MSG_ELEMENTS


132 } 
	tHTAÀπMsg
;

143 
HTAÀπ_£tI¡îa˘ive
 (
BOOL
 
öãøtive
);

144 
BOOL
 
HTAÀπ_öãø˘ive
 ();

167 
BOOL
 
HTAÀπCÆl_add
 (
HTLi°
 * 
li°
, 
HTAÀπCÆlback
 * 
cbf
,

168 
HTAÀπOpcode
 
›code
);

178 
BOOL
 
HTAÀπCÆl_dñëe
 (
HTLi°
 * 
li°
, 
HTAÀπCÆlback
 * 
cbf
);

188 
BOOL
 
HTAÀπCÆl_dñëeOpcode
 (
HTLi°
 * 
li°
, 
HTAÀπOpcode
 
›code
);

198 
BOOL
 
HTAÀπCÆl_dñëeAŒ
 (
HTLi°
 * 
li°
);

209 
HTAÀπCÆlback
 * 
HTAÀπCÆl_föd
(
HTLi°
 * 
li°
, 
HTAÀπOpcode
 
›code
);

222 
HTAÀπP¨
 * 
HTAÀπ_√wRïly
 ();

223 
HTAÀπ_dñëeRïly
 (
HTAÀπP¨
 * 
ﬁd
);

236 
BOOL
 
HTAÀπ_£tRïlyMesßge
 (
HTAÀπP¨
 * 
me
, c⁄° *
mesßge
);

237 
BOOL
 
HTAÀπ_assignRïlyMesßge
 (
HTAÀπP¨
 * 
me
, * 
mesßge
);

244 * 
HTAÀπ_ª∂yMesßge
 (
HTAÀπP¨
 * 
me
);

249 * 
HTAÀπ_ª∂ySe¸ë
 (
HTAÀπP¨
 * 
me
);

250 
BOOL
 
HTAÀπ_£tRïlySe¸ë
 (
HTAÀπP¨
 * 
me
, c⁄° * 
£¸ë
);

252 * 
HTAÀπ_ª∂yOuçut
 (
HTAÀπP¨
 * 
me
);

253 
BOOL
 
HTAÀπ_£tRïlyOuçut
 (
HTAÀπP¨
 * 
me
, * 
ouçut
);

265 
HTAÀπ_£tGlobÆ
 (
HTLi°
 * 
li°
);

266 
HTLi°
 * 
HTAÀπ_globÆ
 ();

281 
BOOL
 
HTAÀπ_add
 (
HTAÀπCÆlback
 * 
cbf
, 
HTAÀπOpcode
 
›code
);

292 
BOOL
 
HTAÀπ_dñëe
 (
HTAÀπCÆlback
 * 
cbf
);

293 
BOOL
 
HTAÀπ_dñëeOpcode
 (
HTAÀπOpcode
 
›code
);

301 
BOOL
 
HTAÀπ_dñëeAŒ
 ();

309 
HTAÀπCÆlback
 * 
HTAÀπ_föd
 (
HTAÀπOpcode
 
›code
);

	@Library/src/HTAncMan.h

26 #i‚de‡
HTANCMAN_H


27 
	#HTANCMAN_H


	)

29 
	~"HTAnch‹.h
"

30 
	~"HTLi°.h
"

31 
	~"HTAtom.h
"

32 
	~"HTMëhod.h
"

49 
	s_HTAnch‹
 {

50 
HTLök
 
	mmaöLök
;

51 
HTLi°
 * 
	mlöks
;

52 
HTP¨ítAnch‹
 * 
	m∑ª¡
;

66 
	s_HTP¨ítAnch‹
 {

68 
HTLök
 
	mmaöLök
;

69 
HTLi°
 * 
	mlöks
;

70 
HTP¨ítAnch‹
 * 
	m∑ª¡
;

73 
HTLi°
 ** 
	mchûdªn
;

74 
HTLi°
 * 
	msour˚s
;

75 * 
	mdocumít
;

76 * 
	mphysiˇl
;

77 * 
	maddªss
;

78 
BOOL
 
	misIndex
;

80 
HTAssocLi°
 * 
	mhódîs
;

81 
BOOL
 
	mhódî_∑r£d
;

84 
HTLi°
 * 
	mv¨ü¡s
;

87 * 
	mtôÀ
;

88 
HTMëhod
 
	mÆlow
;

90 
HTF‹m©
 
	mc⁄ã¡_ty≥
;

91 
HTAssocLi°
 * 
	mty≥_∑ømëîs
;

93 
HTAssocLi°
 * 
	mmëa_ègs
;

95 * 
	mc⁄ã¡_ba£
;

96 
HTLi°
 * 
	mc⁄ã¡_ícodög
;

97 
HTLi°
 * 
	mc⁄ã¡_œnguage
;

98 
	mc⁄ã¡_Àngth
;

99 * 
	mc⁄ã¡_loˇti⁄
;

100 * 
	mc⁄ã¡_md5
;

102 
HTEncodög
 
	m˘e
;

104 
time_t
 
	md©e
;

105 
time_t
 
	mexpúes
;

106 
time_t
 
	mœ°_modifõd
;

107 
time_t
 
	mage
;

108 * 
	mëag
;

110 * 
	mdîived_‰om
;

111 * 
	mvîsi⁄
;

123 
	s_HTChûdAnch‹
 {

125 
HTLök
 
	mmaöLök
;

126 
HTLi°
 * 
	mlöks
;

127 
HTP¨ítAnch‹
 * 
	m∑ª¡
;

130 * 
	mèg
;

	@Library/src/HTAnchor.c

20 
	~"wwwsys.h
"

21 
	~"WWWUtû.h
"

22 
	~"HTF‹m©.h
"

23 
	~"HTP¨£.h
"

24 
	~"HTMëhod.h
"

25 
	~"HTWWWSå.h
"

26 
	~"HTAncM™.h
"

28 
	#PARENT_HASH_SIZE
 
HT_XL_HASH_SIZE


	)

29 
	#CHILD_HASH_SIZE
 
HT_L_HASH_SIZE


	)

31 
PRIVATE
 
HTLi°
 **
	gadu…_èbÀ
=0;

42 
PRIVATE
 
HTP¨ítAnch‹
 * 
	$HTP¨ítAnch‹_√w
 ()

44 
HTP¨ítAnch‹
 *
√wAnch‹
;

45 i‡((
√wAnch‹
 = (
HTP¨ítAnch‹
 *Ë
	`HT_CALLOC
(1,  (HTP¨ítAnch‹))Ë=
NULL
)

46 
	`HT_OUTOFMEM
("HTParentAnchor_new");

47 
√wAnch‹
->
∑ª¡
 =ÇewAnchor;

48 
√wAnch‹
->
c⁄ã¡_ty≥
 = 
WWW_UNKNOWN
;

49 
√wAnch‹
->
maöLök
.
mëhod
 = 
METHOD_INVALID
;

50 
√wAnch‹
->
c⁄ã¡_Àngth
 = -1;

51 
√wAnch‹
->
d©e
 = (
time_t
) -1;

52 
√wAnch‹
->
expúes
 = (
time_t
) -1;

53 
√wAnch‹
->
œ°_modifõd
 = (
time_t
) -1;

54 
√wAnch‹
->
age
 = (
time_t
) -1;

55  
√wAnch‹
;

56 
	}
}

59 
PRIVATE
 
HTChûdAnch‹
 * 
	$HTChûdAnch‹_√w
 ()

61 
HTChûdAnch‹
 *
chûd
;

62 i‡((
chûd
 = (
HTChûdAnch‹
 *Ë
	`HT_CALLOC
(1, (HTChûdAnch‹))Ë=
NULL
)

63 
	`HT_OUTOFMEM
("HTChildAnchor_new");

64  
chûd
;

65 
	}
}

77 
PUBLIC
 
HTChûdAnch‹
 * 
	$HTAnch‹_födChûd
 (
HTP¨ítAnch‹
 * 
∑ª¡
,

78 c⁄° * 
èg
)

80 
HTChûdAnch‹
 * 
chûd
 = 
NULL
;

81 
HTLi°
 * 
kids
 = 
NULL
;

82 i‡(!
∑ª¡
) {

83 
	`HTTRACE
(
ANCH_TRACE
, "Child Anchor Badárgument\n");

84  
NULL
;

89 
hash
 = 0;

93 i‡(
èg
) {

94 c⁄° * 
±r
 = 
èg
;

95 ; *
±r
;Ötr++)

96 
hash
 = (Ë((hash*3 + (*(*)
±r
)Ë% 
CHILD_HASH_SIZE
);

98 i‡(!
∑ª¡
->
chûdªn
) {

99 i‡(!(
∑ª¡
->
chûdªn
 = (
HTLi°
 **)

100 
	`HT_CALLOC
(
CHILD_HASH_SIZE
, (
HTLi°
 *))))

101 
	`HT_OUTOFMEM
("HTAnchor_findChild");

103 i‡(!
∑ª¡
->
chûdªn
[
hash
]Ë∑ª¡->chûdªn[hash] = 
	`HTLi°_√w
();

104 
kids
 = 
∑ª¡
->
chûdªn
[
hash
];

108 i‡(
èg
 && *tag) {

109 
HTLi°
 * 
cur
 = 
kids
;

110 (
chûd
 = (
HTChûdAnch‹
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

111 i‡(
chûd
->
èg
 && !
	`°rcmp
(child->tag,Åag)) {

112 
	`HTTRACE
(
ANCH_TRACE
, "Chûd Anch‹ %∞o‡∑ª¡ %∞wôhÇamê`%s'áÃódyÉxi°s.\n" 
_


113 (*Ë
chûd
 
	`_
 (*Ë
∑ª¡
 
_
 
èg
);

114  
chûd
;

120 
chûd
 = 
	`HTChûdAnch‹_√w
();

121 
	`HTLi°_addObje˘
(
kids
, (*Ë
chûd
);

122 
chûd
->
∑ª¡
 =Öarent;

123 i‡(
èg
Ë
	`SåAŒocC›y
(
chûd
->tag,Åag);

124 
	`HTTRACE
(
ANCH_TRACE
, "Chûd Anch‹ New Anch‹ %∞«med `%s' i†chûd o‡%p\n" 
_


125 (*Ë
chûd
 
_
 
èg
 ?Åag : (c⁄° *Ë"" 
	`_
 (*)
∑ª¡
);

126  
chûd
;

127 
	}
}

138 
PUBLIC
 
HTAnch‹
 * 
	$HTAnch‹_födAddªss
 (c⁄° * 
addªss
)

140 *
èg
 = 
	`HTP¨£
 (
addªss
, "", 
PARSE_VIEW
);

144 i‡(*
èg
) {

145 *
addr
 = 
	`HTP¨£
(
addªss
, "", 
PARSE_ACCESS
 | 
PARSE_HOST
 |

146 
PARSE_PATH
 | 
PARSE_PUNCTUATION
);

147 
HTP¨ítAnch‹
 * 
∑ª¡
 = (HTP¨ítAnch‹*Ë
	`HTAnch‹_födAddªss
(
addr
);

148 
HTChûdAnch‹
 * 
chûd
 = 
	`HTAnch‹_födChûd
(
∑ª¡
, 
èg
);

149 
	`HT_FREE
(
addr
);

150 
	`HT_FREE
(
èg
);

151  (
HTAnch‹
 *Ë
chûd
;

153 
hash
;

154 c⁄° *
p
;

155 
HTLi°
 * 
adu…s
;

156 
HTLi°
 *
grownups
;

157 
HTP¨ítAnch‹
 * 
foundAnch‹
;

158 *
√waddr
 = 
NULL
;

159 
	`SåAŒocC›y
(
√waddr
, 
addªss
);

160 
	`HT_FREE
(
èg
);

161 
√waddr
 = 
	`HTSim∂ify
(&newaddr);

164 
p
=
√waddr
, 
hash
=0; *p;Ö++)

165 
hash
 = (Ë((hash * 3 + (*(*)
p
)Ë% 
PARENT_HASH_SIZE
);

166 i‡(!
adu…_èbÀ
) {

167 i‡((
adu…_èbÀ
 = (
HTLi°
* *Ë
	`HT_CALLOC
(
PARENT_HASH_SIZE
, (HTLi°*))Ë=
NULL
)

168 
	`HT_OUTOFMEM
("HTAnchor_findAddress");

170 i‡(!
adu…_èbÀ
[
hash
]Ëadu…_èbÀ[hash] = 
	`HTLi°_√w
();

171 
adu…s
 = 
adu…_èbÀ
[
hash
];

174 
grownups
 = 
adu…s
;

175 (
foundAnch‹
 = (
HTP¨ítAnch‹
 *Ë
	`HTLi°_√xtObje˘
(
grownups
))){

176 i‡(!
	`°rcmp
(
foundAnch‹
->
addªss
, 
√waddr
)) {

177 
	`HTTRACE
(
ANCH_TRACE
, "Föd P¨ít. %∞wôháddªs†`%s'áÃódyÉxi°s.\n" 
_


178 (*Ë
foundAnch‹
 
_
 
√waddr
);

179 
	`HT_FREE
(
√waddr
);

180  (
HTAnch‹
 *Ë
foundAnch‹
;

185 
foundAnch‹
 = 
	`HTP¨ítAnch‹_√w
();

186 
foundAnch‹
->
addªss
 = 
√waddr
;

187 
	`HTLi°_addObje˘
 (
adu…s
, 
foundAnch‹
);

188 
	`HTTRACE
(
ANCH_TRACE
, "Föd P¨ít. %∞wôh hash %dándáddªs†`%s' cª©ed\n" 
	`_
 (*)
foundAnch‹
 
_
 
hash
 _ 
√waddr
);

189  (
HTAnch‹
 *Ë
foundAnch‹
;

191 
	}
}

200 
PUBLIC
 
HTChûdAnch‹
 * 
	$HTAnch‹_födChûdAndLök
 (
HTP¨ítAnch‹
 * 
∑ª¡
,

201 c⁄° * 
èg
,

202 c⁄° * 
hªf
,

203 
HTLökTy≥
 
…y≥
)

205 
HTChûdAnch‹
 * 
chûd
 = 
	`HTAnch‹_födChûd
(
∑ª¡
, 
èg
);

206 i‡(
chûd
 && 
hªf
 && *href) {

207 * 
ªœtive_to
 = 
	`HTAnch‹_ex∑ndedAddªss
((
HTAnch‹
 *Ë
∑ª¡
);

208 * 
∑r£d_addªss
 = 
	`HTP¨£
(
hªf
, 
ªœtive_to
, 
PARSE_ALL
);

209 
HTAnch‹
 * 
de°
 = 
	`HTAnch‹_födAddªss
(
∑r£d_addªss
);

210 
	`HTLök_add
((
HTAnch‹
 *Ë
chûd
, 
de°
, 
…y≥
, 
METHOD_INVALID
);

211 
	`HT_FREE
(
∑r£d_addªss
);

212 
	`HT_FREE
(
ªœtive_to
);

214  
chûd
;

215 
	}
}

225 
PUBLIC
 
HTLök
 * 
	$HTAnch‹_maöLök
 (
HTAnch‹
 * 
me
)

227  
me
 ? &(me->
maöLök
Ë: 
NULL
;

228 
	}
}

230 
PUBLIC
 
BOOL
 
	$HTAnch‹_£tMaöLök
 (
HTAnch‹
 * 
me
, 
HTLök
 * 
movögLök
)

232 i‡(!(
me
 && me->
löks
 && 
movögLök
 &&

233 
	`HTLi°_ªmoveObje˘
(
me
->
löks
, 
movögLök
)))

234  
NO
;

237 
HTLök
 * 
√wLök
 = 
	`HTLök_√w
();

238 
	`mem˝y
 ((*Ë
√wLök
, & 
me
->
maöLök
,  (
HTLök
));

239 
	`HTLi°_addObje˘
 (
me
->
löks
, 
√wLök
);

242 
	`mem˝y
 ((*Ë&
me
->
maöLök
, 
movögLök
,  (
HTLök
));

243 
	`HTLök_dñëe
(
movögLök
);

244  
YES
;

246 
	}
}

251 
PUBLIC
 
HTLi°
 * 
	$HTAnch‹_subLöks
 (
HTAnch‹
 * 
™ch‹
)

253  
™ch‹
 ?ánch‹->
löks
 : 
NULL
;

254 
	}
}

256 
PUBLIC
 
BOOL
 
	$HTAnch‹_£tSubLöks
 (
HTAnch‹
 * 
™ch‹
, 
HTLi°
 * 
li°
)

258 i‡(
™ch‹
) {

259 
™ch‹
->
löks
 = 
li°
;

260  
YES
;

262  
NO
;

263 
	}
}

268 
PUBLIC
 
HTAnch‹
 * 
	$HTAnch‹_fﬁlowMaöLök
 (
HTAnch‹
 * 
me
)

270  
me
 ? 
	`HTLök_de°ö©i⁄
(&me->
maöLök
Ë: 
NULL
;

271 
	}
}

276 
PUBLIC
 
HTLök
 * 
	$HTAnch‹_födLökTy≥
 (
HTAnch‹
 * 
me
, 
HTLökTy≥
 
ty≥
)

278 i‡(
me
) {

279 
HTLök
 * 
lök
 = 
	`HTAnch‹_maöLök
(
me
);

280 
HTLi°
 * 
sublöks
 = 
	`HTAnch‹_subLöks
(
me
);

281 i‡(
lök
 && 
	`HTLök_ty≥
÷ökË=
ty≥
)

282  
lök
;

283 i‡(
sublöks
) {

284 (
lök
 = (
HTLök
 *Ë
	`HTLi°_√xtObje˘
 (
sublöks
)))

285 i‡(
	`HTLök_ty≥
(
lök
Ë=
ty≥
) Üink;

288  
NULL
;

289 
	}
}

308 
PRIVATE
 * 
	$dñëe_∑ª¡
 (
HTP¨ítAnch‹
 * 
me
)

310 * 
doc
 = 
me
->
documít
;

313 i‡(
me
->
löks
) {

314 
HTLi°
 *
cur
 = 
me
->
löks
;

315 
HTLök
 *
¥es
;

316 (
¥es
 = (
HTLök
 *Ë
	`HTLi°_√xtObje˘
(
cur
)))

317 
	`HTLök_dñëe
(
¥es
);

318 
	`HTLi°_dñëe
(
me
->
löks
);

322 i‡(
me
->
chûdªn
) {

323 
˙t
 = 0;

324 ; 
˙t
<
CHILD_HASH_SIZE
; cnt++) {

325 i‡(
me
->
chûdªn
[
˙t
]Ë
	`HTLi°_dñëe
(me->children[cnt]);

327 
	`HT_FREE
(
me
->
chûdªn
);

330 
	`HTLi°_dñëe
 (
me
->
sour˚s
);

331 
	`HTLi°_dñëe
 (
me
->
v¨ü¡s
);

332 
	`HT_FREE
(
me
->
physiˇl
);

333 
	`HT_FREE
(
me
->
addªss
);

336 
	`HTAnch‹_˛órHódî
(
me
);

338 
	`HT_FREE
(
me
);

339  
doc
;

340 
	}
}

346 
PRIVATE
 * 
	$dñëe_Ámûy
 (
HTAnch‹
 * 
me
)

348 
HTP¨ítAnch‹
 * 
∑ª¡
 = 
NULL
;

349 i‡(!
me
) {

350 
	`HTTRACE
(
ANCH_TRACE
, "AnchorDelete Noánchor found\n");

351  
NULL
;

353 
∑ª¡
 = 
me
->parent;

354 
	`HTTRACE
(
ANCH_TRACE
, "Anch‹DñëêRemovê∑ª¡ %∞™d chûdªn\n" 
_
 
∑ª¡
);

357 i‡(
∑ª¡
->
chûdªn
) {

358 
˙t
 = 0;

359 ; 
˙t
<
CHILD_HASH_SIZE
; cnt++) {

360 
HTLi°
 * 
kids
 = 
∑ª¡
->
chûdªn
[
˙t
];

361 i‡(
kids
) {

362 
HTChûdAnch‹
 * 
chûd
;

363 (
chûd
=(
HTChûdAnch‹
*)
	`HTLi°_ªmoveLa°Obje˘
(
kids
))) {

364 
	`HT_FREE
(
chûd
->
èg
);

365 i‡(
chûd
->
löks
) {

366 
HTLi°
 * 
cur
 = 
chûd
->
löks
;

367 
HTLök
 * 
¥es
;

368 (
¥es
 = (
HTLök
 *Ë
	`HTLi°_√xtObje˘
(
cur
)))

369 
	`HTLök_dñëe
(
¥es
);

370 
	`HTLi°_dñëe
(
chûd
->
löks
);

372 
	`HT_FREE
(
chûd
);

374 
	`HTLi°_dñëe
(
kids
);

375 
∑ª¡
->
chûdªn
[
˙t
] = 
NULL
;

379  
	`dñëe_∑ª¡
(
∑ª¡
);

380 
	}
}

390 
PUBLIC
 
BOOL
 
	$HTAnch‹_dñëeAŒ
 (
HTLi°
 * 
documíts
)

392 
˙t
;

393 
HTLi°
 *
cur
;

394 i‡(!
adu…_èbÀ
)

395  
NO
;

396 
˙t
=0; c¡<
PARENT_HASH_SIZE
; cnt++) {

397 i‡((
cur
 = 
adu…_èbÀ
[
˙t
])) {

398 
HTP¨ítAnch‹
 *
¥es
;

399 (
¥es
 = (
HTP¨ítAnch‹
 *Ë
	`HTLi°_√xtObje˘
(
cur
)Ë!
NULL
){

400 * 
doc
 = 
	`dñëe_Ámûy
((
HTAnch‹
 *Ë
¥es
);

401 i‡(
doc
 && 
documíts
Ë
	`HTLi°_addObje˘
(documents, doc);

404 
	`HTLi°_dñëe
(
adu…_èbÀ
[
˙t
]);

406 
	`HT_FREE
(
adu…_èbÀ
);

407  
YES
;

408 
	}
}

416 
PUBLIC
 
BOOL
 
	$HTAnch‹_˛órAŒ
 (
HTLi°
 * 
documíts
)

418 
˙t
;

419 
HTLi°
 * 
cur
;

420 i‡(!
adu…_èbÀ
Ë 
NO
;

421 
˙t
=0; c¡<
PARENT_HASH_SIZE
; cnt++) {

422 i‡((
cur
 = 
adu…_èbÀ
[
˙t
])) {

423 
HTP¨ítAnch‹
 * 
¥es
;

424 (
¥es
 = (
HTP¨ítAnch‹
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

427 
	`HTAnch‹_˛órHódî
(
¥es
);

430 
	`HT_FREE
(
¥es
->
physiˇl
);

433 i‡(
documíts
 && 
¥es
->
documít
)

434 
	`HTLi°_addObje˘
(
documíts
, 
¥es
->
documít
);

438  
YES
;

439 
	}
}

441 
PRIVATE
 
	$dñëe_löks
 (
HTAnch‹
 * 
me
)

443 i‡(! 
me
)

447 i‡(
me
->
maöLök
.
de°
) {

448 
HTP¨ítAnch‹
 *
∑ª¡
 = 
me
->
maöLök
.
de°
->parent;

449 
	`HTLi°_ªmoveObje˘
 (
∑ª¡
->
sour˚s
, 
me
);

450 i‡(! 
∑ª¡
->
documít
)

451 
	`HTAnch‹_dñëe
 (
∑ª¡
);

453 i‡(
me
->
löks
) {

454 
HTLök
 *
èrgë
;

455 (
èrgë
 = (
HTLök
 *Ë
	`HTLi°_ªmoveLa°Obje˘
 (
me
->
löks
))) {

456 
HTP¨ítAnch‹
 *
∑ª¡
 = 
èrgë
->
de°
->parent;

457 
	`HTLi°_ªmoveObje˘
 (
∑ª¡
->
sour˚s
, 
me
);

458 i‡(! 
∑ª¡
->
documít
)

459 
	`HTAnch‹_dñëe
 (
∑ª¡
);

462 
	}
}

464 
PUBLIC
 
BOOL
 
	$HTAnch‹_dñëe
 (
HTP¨ítAnch‹
 * 
me
)

467 i‡(!
me
 || me->
documít
) {

468 
	`HTTRACE
(
ANCH_TRACE
, "Anchor...... Not deleted\n");

469  
NO
;

473 
	`dñëe_löks
 ((
HTAnch‹
 *Ë
me
);

475 i‡(!
	`HTLi°_isEm±y
(
me
->
sour˚s
)) {

480 i‡(
me
->
chûdªn
) {

481 
˙t
 = 0;

482 ; 
˙t
<
CHILD_HASH_SIZE
; cnt++) {

483 
HTLi°
 * 
kids
 = 
me
->
chûdªn
[
˙t
];

484 i‡(
kids
) {

485 
HTChûdAnch‹
 * 
chûd
;

486 (
chûd
 = (
HTChûdAnch‹
 *Ë
	`HTLi°_√xtObje˘
(
kids
)))

487 
	`dñëe_löks
((
HTAnch‹
 *Ë
chûd
);

488  
NO
;

497 i‡(
me
->
chûdªn
) {

498 
˙t
 = 0;

499 ; 
˙t
<
CHILD_HASH_SIZE
; cnt++) {

500 
HTLi°
 * 
kids
 = 
me
->
chûdªn
[
˙t
];

501 i‡(
kids
) {

502 
HTChûdAnch‹
 * 
chûd
;

503 (
chûd
=(
HTChûdAnch‹
 *Ë
	`HTLi°_ªmoveLa°Obje˘
(
kids
)))

504 
	`dñëe_löks
((
HTAnch‹
 *Ë
chûd
);

505 
	`HT_FREE
(
chûd
->
èg
);

506 
	`HT_FREE
(
chûd
);

517 i‡(
adu…_èbÀ
) {

518 
hash
;

519 c⁄° *
p
;

520 
HTLi°
 * 
adu…s
;

521 
HTLi°
 * 
grownups
;

522 
HTLi°
 * 
œ°
;

523 
HTP¨ítAnch‹
 * 
foundAnch‹
;

526 
p
=
me
->
addªss
, 
hash
=0; *p;Ö++)

527 
hash
 = (Ë((hash * 3 + (*(*)
p
)) %

528 
PARENT_HASH_SIZE
);

529 
adu…s
 = 
adu…_èbÀ
[
hash
];

532 
grownups
 = 
adu…s
;

533 
œ°
 = 
grownups
;

534 (
foundAnch‹
 = (
HTP¨ítAnch‹
 *)

535 
	`HTLi°_√xtObje˘
(
grownups
))){

536 i‡(!
	`°rcmp
(
foundAnch‹
->
addªss
, 
me
->address)) {

537 
	`HTLi°_quickRemoveEÀmít
 (
grownups
, 
œ°
);

540 
œ°
 = 
grownups
;

545 
	`dñëe_∑ª¡
(
me
);

546  
YES
;

548 i‡(! 
	`HTLi°_isEm±y
 (
me
->
sour˚s
)) {

550 
HTLi°
 *
kids
 = 
me
->
chûdªn
;

551 (
chûd
 = (
HTChûdAnch‹
 *Ë
	`HTLi°_√xtObje˘
 (
kids
)))

552 
	`dñëe_löks
 ((
HTAnch‹
 *Ë
chûd
);

553  
NO
;

558 (
chûd
 = (
HTChûdAnch‹
 *Ë
	`HTLi°_ªmoveLa°Obje˘
 (
me
->
chûdªn
))) {

559 
	`dñëe_löks
 ((
HTAnch‹
 *Ë
chûd
);

560 
	`HT_FREE
(
chûd
->
èg
);

561 
	`HT_FREE
(
chûd
);

564 
	}
}

578 
PUBLIC
 
HTAºay
 * 
	$HTAnch‹_gëAºay
 (
growby
)

580 
˙t
;

581 
HTAºay
 * 
¨øy
 = 
NULL
;

582 
HTLi°
 * 
cur
 = 
NULL
;

583 i‡(!
adu…_èbÀ
Ë 
NULL
;

586 i‡(
growby
 <0Ëgrowby = 
PARENT_HASH_SIZE
;

587 
¨øy
 = 
	`HTAºay_√w
(
growby
);

590 
˙t
=0; c¡<
PARENT_HASH_SIZE
; cnt++) {

591 i‡((
cur
 = 
adu…_èbÀ
[
˙t
])) {

592 
HTP¨ítAnch‹
 * 
¥es
 = 
NULL
;

593 (
¥es
 = (
HTP¨ítAnch‹
 *Ë
	`HTLi°_√xtObje˘
(
cur
)Ë!
NULL
) {

594 i‡(
	`HTAºay_addObje˘
(
¨øy
, 
¥es
Ë=
NO
) {

595 
	`HTTRACE
(
ANCH_TRACE
, "Anch‹...... C™'àadd obje˘ %∞tÿ¨øy %p\n" 
_


596 
¥es
 
_
 
¨øy
);

602  
¨øy
;

603 
	}
}

609 
PUBLIC
 
HTP¨ítAnch‹
 * 
	$HTAnch‹_∑ª¡
 (
HTAnch‹
 * 
me
)

611  
me
 ? me->
∑ª¡
 : 
NULL
;

612 
	}
}

614 
PUBLIC
 
	$HTAnch‹_£tDocumít
 (
HTP¨ítAnch‹
 * 
me
, * 
doc
)

616 i‡(
me
Ëme->
documít
 = 
doc
;

617 
	}
}

619 
PUBLIC
 * 
	$HTAnch‹_documít
 (
HTP¨ítAnch‹
 * 
me
)

621  
me
 ? me->
documít
 : 
NULL
;

622 
	}
}

624 
PUBLIC
 * 
	$HTAnch‹_addªss
 (
HTAnch‹
 * 
me
)

626 *
addr
 = 
NULL
;

627 i‡(
me
) {

628 i‡(((
HTP¨ítAnch‹
 *Ë
me
 =me->
∑ª¡
) ||

629 !((
HTChûdAnch‹
 *Ë
me
)->
èg
) {

630 
	`SåAŒocC›y
 (
addr
, 
me
->
∑ª¡
->
addªss
);

633 i‡((
addr
 = (*Ë
	`HT_MALLOC
(2 + 
	`°æí
 (
me
->
∑ª¡
->
addªss
) + \

634 
	`°æí
 (((
HTChûdAnch‹
 *Ë
me
)->
èg
))Ë=
NULL
)

635 
	`HT_OUTOFMEM
("HTAnchor_address");

636 
	`•rötf
 (
addr
, "%s#%s", 
me
->
∑ª¡
->
addªss
,

637 ((
HTChûdAnch‹
 *Ë
me
)->
èg
);

640  
addr
;

641 
	}
}

647 
PUBLIC
 * 
	$HTAnch‹_ex∑ndedAddªss
 (
HTAnch‹
 * 
me
)

649 *
addr
 = 
NULL
;

650 i‡(
me
) {

651 
HTP¨ítAnch‹
 * 
∑ª¡
 = 
me
->parent;

652 * 
ba£
 = 
	`HTAnch‹_ba£
(
∑ª¡
);

653 i‡(((
HTP¨ítAnch‹
 *Ë
me
 =me->
∑ª¡
) ||

654 !((
HTChûdAnch‹
 *Ë
me
)->
èg
) {

655 
	`SåAŒocC›y
(
addr
, 
ba£
);

657 i‡((
addr
 = (*Ë
	`HT_MALLOC
(2 + 
	`°æí
(
ba£
Ë+ såÀn(((
HTChûdAnch‹
 *Ë
me
)->
èg
))Ë=
NULL
)

658 
	`HT_OUTOFMEM
("HTAnchor_address");

659 
	`•rötf
 (
addr
, "%s#%s", 
ba£
, ((
HTChûdAnch‹
 *Ë
me
)->
èg
);

662  
addr
;

663 
	}
}

668 
PUBLIC
 * 
	$HTAnch‹_physiˇl
 (
HTP¨ítAnch‹
 * 
me
)

670  
me
 ? me->
physiˇl
 ? me->physiˇ»: me->
addªss
 : 
NULL
;

671 
	}
}

673 
PUBLIC
 
	$HTAnch‹_£tPhysiˇl
 (
HTP¨ítAnch‹
 * 
me
, * 
physiˇl
)

675 i‡(!
me
 || !
physiˇl
) {

676 
	`HTTRACE
(
ANCH_TRACE
, "HTAnchor.... setPhysical, called withÇullárgument\n");

679 
	`SåAŒocC›y
(
me
->
physiˇl
,Öhysical);

680 
	}
}

682 
PUBLIC
 
	$HTAnch‹_˛órPhysiˇl
(
HTP¨ítAnch‹
 * 
me
)

684 i‡(
me
Ë
	`HT_FREE
(me->
physiˇl
);

685 
	}
}

690 
PUBLIC
 
BOOL
 
	$HTAnch‹_hasChûdªn
 (
HTP¨ítAnch‹
 * 
me
)

692  (
me
 && me->
chûdªn
);

693 
	}
}

699 
PUBLIC
 
BOOL
 
	$HTAnch‹_isChûd
 (
HTAnch‹
 * 
me
)

701  (
me
 && (
HTP¨ítAnch‹
 *Ëmê!me->
∑ª¡
);

702 
	}
}

704 
PUBLIC
 * 
	$HTAnch‹_võw
 (
HTAnch‹
 * 
me
)

706 * 
võw
 = 
NULL
;

707 i‡(
me
 && (
HTP¨ítAnch‹
 *Ëmê!me->
∑ª¡
 && ((
HTChûdAnch‹
 *Ëme)->
èg
)

708 
	`SåAŒocC›y
(
võw
, ((
HTChûdAnch‹
 *Ë
me
)->
èg
);

709  
võw
;

710 
	}
}

721 
PUBLIC
 
BOOL
 
	$HTAnch‹_upd©e
 (
HTP¨ítAnch‹
 * 
me
, 
HTRe•⁄£
 * 
ª•⁄£
)

723 i‡(
me
 && 
ª•⁄£
) {

724 
HTCachabÀ
 
ˇchabÀ
 = 
	`HTRe•⁄£_isCachabÀ
(
ª•⁄£
);

726 i‡(
ˇchabÀ
 =
HT_CACHE_ETAG
) {

727 * 
ëag
 = 
	`HTRe•⁄£_ëag
(
ª•⁄£
);

728 
	`HTTRACE
(
ANCH_TRACE
, "HTAnch‹.... Upd©ögÉèg f‹ %p\n" 
_
 
me
);

729 i‡(
ëag
) {

730 
	`HTAnch‹_£tEèg
(
me
, 
ëag
);

731  
YES
;

734 } i‡(
ˇchabÀ
 =
HT_CACHE_NOT_MODIFIED
) {

735 
	`HTTRACE
(
ANCH_TRACE
, "HTAnch‹.... Inf‹m©i⁄ i†u∞tÿd©êf‹ %p\n" 
_
 
me
);

736  
YES
;

738 } i‡(
ˇchabÀ
 =
HT_CACHE_ALL
) {

739 * 
ëag
 = 
	`HTRe•⁄£_ëag
(
ª•⁄£
);

740 
	`HTTRACE
(
ANCH_TRACE
, "HTAnch‹.... Upd©ög mëaöf‹m©i⁄ f‹ %p\n" 
_
 
me
);

747 
me
->
c⁄ã¡_Àngth
 = 
	`HTRe•⁄£_Àngth
(
ª•⁄£
);

748 
me
->
c⁄ã¡_ty≥
 = 
	`HTRe•⁄£_f‹m©
(
ª•⁄£
);

749 
me
->
ty≥_∑ømëîs
 = 
	`HTRe•⁄£_f‹m©P¨am
(
ª•⁄£
);

750 
me
->
c⁄ã¡_ícodög
 = 
	`HTRe•⁄£_ícodög
(
ª•⁄£
);

753 i‡(
ëag
Ë
	`HTAnch‹_£tEèg
(
me
,Étag);

758 i‡(
me
->
hódîs
Ë
	`HTAssocLi°_dñëe
(me->headers);

759 
me
->
hódîs
 = 
	`HTRe•⁄£_h™dOvîHódî
(
ª•⁄£
);

765 
	`HTRe•⁄£_isCached
(
ª•⁄£
, 
YES
);

771 i‡(!
	`HTAssocLi°_födObje˘
(
me
->
hódîs
, "date"))

772 
	`HTAnch‹_£tD©e
(
me
, 
	`time
(
NULL
));

774  
YES
;

777  
NO
;

778 
	}
}

785 
PUBLIC
 
HTLi°
 * 
	$HTAnch‹_v¨ü¡s
 (
HTP¨ítAnch‹
 * 
me
)

787  
me
 ? me->
v¨ü¡s
 : 
NULL
;

788 
	}
}

790 
PUBLIC
 
BOOL
 
	$HTAnch‹_addV¨ü¡
 (
HTP¨ítAnch‹
 * 
me
,

791 
HTP¨ítAnch‹
 * 
v¨ü¡
)

793 i‡(
me
 && 
v¨ü¡
) {

794 i‡(!
me
->
v¨ü¡s
Ëme->v¨ü¡†
	`HTLi°_√w
();

795  
	`HTLi°_addObje˘
(
me
->
v¨ü¡s
, 
v¨ü¡
);

797  
NO
;

798 
	}
}

800 
PUBLIC
 
BOOL
 
	$HTAnch‹_dñëeV¨ü¡
 (
HTP¨ítAnch‹
 * 
me
,

801 
HTP¨ítAnch‹
 * 
v¨ü¡
)

803  (
me
 && 
v¨ü¡
Ë? 
	`HTLi°_ªmoveObje˘
(me->
v¨ü¡s
, v¨ü¡Ë: 
NO
;

804 
	}
}

809 
PUBLIC
 
	$HTAnch‹_˛órIndex
 (
HTP¨ítAnch‹
 * 
me
)

811 i‡(
me
Ëme->
isIndex
 = 
NO
;

812 
	}
}

814 
PUBLIC
 
	$HTAnch‹_£tIndex
 (
HTP¨ítAnch‹
 * 
me
)

816 i‡(
me
Ëme->
isIndex
 = 
YES
;

817 
	}
}

819 
PUBLIC
 
BOOL
 
	$HTAnch‹_isIndex
 (
HTP¨ítAnch‹
 * 
me
)

821  
me
 ? me->
isIndex
 : 
NO
;

822 
	}
}

827 
PUBLIC
 * 
	$HTAnch‹_ba£
 (
HTP¨ítAnch‹
 * 
me
)

829 i‡(
me
) {

830 i‡(
me
->
c⁄ã¡_ba£
)  me->content_base;

831 i‡(
me
->
hódîs
) {

832 * 
ba£
 = 
	`HTAssocLi°_födObje˘
(
me
->
hódîs
, "content-base");

837 i‡(
ba£
Ë
	`SåAŒocC›y
(
me
->
c⁄ã¡_ba£
, 
	`HTSåù
(base));

844 * 
loˇti⁄
 = 
	`HTAnch‹_loˇti⁄
(
me
);

845 
	`SåAŒocC›y
(
me
->
c⁄ã¡_ba£
,

846 (
loˇti⁄
 && 
	`HTURL_isAbsﬁuã
(location)) ?

847 
loˇti⁄
 : 
me
->
addªss
);

849  
me
->
c⁄ã¡_ba£
;

851  
NULL
;

852 
	}
}

854 
PUBLIC
 
BOOL
 
	$HTAnch‹_£tBa£
 (
HTP¨ítAnch‹
 * 
me
, * 
ba£
)

856 i‡(
me
 && 
ba£
) {

857 
	`SåAŒocC›y
(
me
->
c⁄ã¡_ba£
, 
ba£
);

858  
YES
;

860  
NO
;

861 
	}
}

866 
PUBLIC
 * 
	$HTAnch‹_loˇti⁄
 (
HTP¨ítAnch‹
 * 
me
)

868 i‡(
me
) {

869 i‡(
me
->
c⁄ã¡_loˇti⁄
)

870  *
me
->
c⁄ã¡_loˇti⁄
 ? me->c⁄ã¡_loˇti⁄ : 
NULL
;

871 i‡(
me
->
hódîs
) {

872 * 
loˇti⁄
 = 
	`HTAssocLi°_födObje˘
(
me
->
hódîs
, "content-location");

873 
	`SåAŒocC›y
(
me
->
c⁄ã¡_loˇti⁄
, 
loˇti⁄
 ? 
	`HTSåù
(location) : "");

874  
me
->
c⁄ã¡_loˇti⁄
;

877  
NULL
;

878 
	}
}

884 
PUBLIC
 
BOOL
 
	$HTAnch‹_£tLoˇti⁄
 (
HTP¨ítAnch‹
 * 
me
, * 
loˇti⁄
)

886 i‡(
me
 && 
loˇti⁄
) {

887 * 
ba£
 = 
	`HTAnch‹_ba£
(
me
);

888 i‡(!
ba£
Ëba£ = 
me
->
addªss
;

889 
me
->
c⁄ã¡_loˇti⁄
 = 
	`HTP¨£
(
loˇti⁄
, 
ba£
, 
PARSE_ALL
);

890  
YES
;

892  
NO
;

893 
	}
}

898 
PUBLIC
 
HTAssocLi°
 * 
	$HTAnch‹_mëa
 (
HTP¨ítAnch‹
 * 
me
)

900  
me
 ? me->
mëa_ègs
 : 
NULL
;

901 
	}
}

903 
PUBLIC
 
BOOL
 
	$HTAnch‹_addMëa
 (
HTP¨ítAnch‹
 * 
me
,

904 c⁄° * 
«me
, c⁄° * 
vÆue
)

906 i‡(
me
) {

907 i‡(!
me
->
mëa_ègs
Ëme->mëa_èg†
	`HTAssocLi°_√w
();

908  
	`HTAssocLi°_ª∂a˚Obje˘
(
me
->
mëa_ègs
, 
«me
, 
vÆue
);

910  
NO
;

911 
	}
}

916 
PUBLIC
 * 
	$HTAnch‹_robŸs
 (
HTP¨ítAnch‹
 * 
me
)

918 i‡(
me
 && me->
mëa_ègs
) {

919 * 
robŸs
 = 
	`HTAssocLi°_födObje˘
(
me
->
mëa_ègs
, "robots");

920  
robŸs
;

922  
NULL
;

923 
	}
}

928 
PUBLIC
 
HTF‹m©
 
	$HTAnch‹_f‹m©
 (
HTP¨ítAnch‹
 * 
me
)

930  
me
 ? me->
c⁄ã¡_ty≥
 : 
NULL
;

931 
	}
}

933 
PUBLIC
 
	$HTAnch‹_£tF‹m©
 (
HTP¨ítAnch‹
 * 
me
, 
HTF‹m©
 
f‹m
)

935 i‡(
me
Ëme->
c⁄ã¡_ty≥
 = 
f‹m
;

936 
	}
}

938 
PUBLIC
 
HTAssocLi°
 * 
	$HTAnch‹_f‹m©P¨am
 (
HTP¨ítAnch‹
 * 
me
)

940  
me
 ? me->
ty≥_∑ømëîs
 : 
NULL
;

941 
	}
}

943 
PUBLIC
 
BOOL
 
	$HTAnch‹_addF‹m©P¨am
 (
HTP¨ítAnch‹
 * 
me
,

944 c⁄° * 
«me
, c⁄° * 
vÆue
)

946 i‡(
me
) {

947 i‡(!
me
->
ty≥_∑ømëîs
Ëme->ty≥_∑ømëî†
	`HTAssocLi°_√w
();

948  
	`HTAssocLi°_ª∂a˚Obje˘
(
me
->
ty≥_∑ømëîs
, 
«me
, 
vÆue
);

950  
NO
;

951 
	}
}

956 
PUBLIC
 
HTCh¨£t
 
	$HTAnch‹_ch¨£t
 (
HTP¨ítAnch‹
 * 
me
)

958 i‡(
me
 && me->
ty≥_∑ømëîs
) {

959 * 
ch¨£t
 = 
	`HTAssocLi°_födObje˘
(
me
->
ty≥_∑ømëîs
,"charset");

960  
	`HTAtom_f‹
(
ch¨£t
);

962  
NULL
;

963 
	}
}

965 
PUBLIC
 
BOOL
 
	$HTAnch‹_£tCh¨£t
 (
HTP¨ítAnch‹
 * 
me
, 
HTCh¨£t
 
ch¨£t
)

967  
	`HTAnch‹_addF‹m©P¨am
(
me
, "ch¨£t", 
	`HTAtom_«me
(
ch¨£t
));

968 
	}
}

973 
PUBLIC
 
HTLevñ
 
	$HTAnch‹_Àvñ
 (
HTP¨ítAnch‹
 * 
me
)

975 i‡(
me
 && me->
ty≥_∑ømëîs
) {

976 * 
Àvñ
 = 
	`HTAssocLi°_födObje˘
(
me
->
ty≥_∑ømëîs
, "level");

977  
	`HTAtom_f‹
(
Àvñ
);

979  
NULL
;

980 
	}
}

982 
PUBLIC
 
BOOL
 
	$HTAnch‹_£tLevñ
 (
HTP¨ítAnch‹
 * 
me
, 
HTLevñ
 
Àvñ
)

984  
	`HTAnch‹_addF‹m©P¨am
(
me
, "Àvñ", 
	`HTAtom_«me
(
Àvñ
));

985 
	}
}

990 
PUBLIC
 
HTLi°
 * 
	$HTAnch‹_ícodög
 (
HTP¨ítAnch‹
 * 
me
)

992  
me
 ? me->
c⁄ã¡_ícodög
 : 
NULL
;

993 
	}
}

995 
PUBLIC
 
BOOL
 
	$HTAnch‹_addEncodög
 (
HTP¨ítAnch‹
 * 
me
, 
HTEncodög
 
ícodög
)

997 i‡(
me
 && 
ícodög
) {

998 i‡(!
me
->
c⁄ã¡_ícodög
Ëme->c⁄ã¡_ícodög = 
	`HTLi°_√w
();

999  
	`HTLi°_addObje˘
(
me
->
c⁄ã¡_ícodög
, 
ícodög
);

1001  
NO
;

1002 
	}
}

1004 
PUBLIC
 
BOOL
 
	$HTAnch‹_dñëeEncodög
 (
HTP¨ítAnch‹
 * 
me
, 
HTEncodög
 
ícodög
)

1006  (
me
 && me->
c⁄ã¡_ícodög
 && 
ícodög
) ?

1007 
	`HTLi°_ªmoveObje˘
(
me
->
c⁄ã¡_ícodög
, 
ícodög
Ë: 
NO
;

1008 
	}
}

1010 
PUBLIC
 
BOOL
 
	$HTAnch‹_dñëeEncodögAŒ
 (
HTP¨ítAnch‹
 * 
me
)

1012 i‡(
me
 && me->
c⁄ã¡_ícodög
) {

1013 
	`HTLi°_dñëe
(
me
->
c⁄ã¡_ícodög
);

1014 
me
->
c⁄ã¡_ícodög
 = 
NULL
;

1015  
YES
;

1017  
NO
;

1018 
	}
}

1023 
PUBLIC
 
HTLi°
 * 
	$HTAnch‹_œnguage
 (
HTP¨ítAnch‹
 * 
me
)

1025 i‡(
me
) {

1026 i‡(
me
->
c⁄ã¡_œnguage
 =
NULL
 && me->
hódîs
) {

1027 * 
vÆue
 = 
	`HTAssocLi°_födObje˘
(
me
->
hódîs
, "content-language");

1028 * 
fõld
;

1029 i‡(!
me
->
c⁄ã¡_œnguage
Ëme->c⁄ã¡_œnguagê
	`HTLi°_√w
();

1030 (
fõld
 = 
	`HTNextFõld
(&
vÆue
)Ë!
NULL
) {

1031 * 
lc
 = 
fõld
;

1032 (*
lc
 = 
	`TOLOWER
(*lc)))Üc++;

1033 
	`HTLi°_addObje˘
(
me
->
c⁄ã¡_œnguage
, 
	`HTAtom_f‹
(
fõld
));

1036  
me
->
c⁄ã¡_œnguage
;

1038  
NULL
;

1039 
	}
}

1041 
PUBLIC
 
BOOL
 
	$HTAnch‹_addL™guage
 (
HTP¨ítAnch‹
 * 
me
, 
HTL™guage
 
œnguage
)

1043 i‡(
me
 && 
œnguage
) {

1044 i‡(!
me
->
c⁄ã¡_œnguage
Ëme->c⁄ã¡_œnguagê
	`HTLi°_√w
();

1045  
	`HTLi°_addObje˘
(
me
->
c⁄ã¡_œnguage
, 
œnguage
);

1047  
NO
;

1048 
	}
}

1050 
PUBLIC
 
BOOL
 
	$HTAnch‹_dñëeL™guageAŒ
 (
HTP¨ítAnch‹
 * 
me
)

1052 i‡(
me
 && me->
c⁄ã¡_œnguage
) {

1053 
	`HTLi°_dñëe
(
me
->
c⁄ã¡_œnguage
);

1054 
me
->
c⁄ã¡_œnguage
 = 
NULL
;

1055  
YES
;

1057  
NO
;

1058 
	}
}

1063 
PUBLIC
 
	$HTAnch‹_Àngth
 (
HTP¨ítAnch‹
 * 
me
)

1065  
me
 ? me->
c⁄ã¡_Àngth
 : -1;

1066 
	}
}

1068 
PUBLIC
 
	$HTAnch‹_£tLígth
 (
HTP¨ítAnch‹
 * 
me
, 
Àngth
)

1070 i‡(
me
Ëme->
c⁄ã¡_Àngth
 = 
Àngth
;

1071 
	}
}

1073 
PUBLIC
 
	$HTAnch‹_addLígth
 (
HTP¨ítAnch‹
 * 
me
, 
dñèÀngth
)

1075 i‡(
me
) {

1076 i‡(
me
->
c⁄ã¡_Àngth
 < 0)

1077 
me
->
c⁄ã¡_Àngth
 = 
dñèÀngth
;

1079 
me
->
c⁄ã¡_Àngth
 +
dñèÀngth
;

1081 
	}
}

1086 
PUBLIC
 
HTEncodög
 
	$HTAnch‹_c⁄ã¡Tøns„rEncodög
 (
HTP¨ítAnch‹
 * 
me
)

1088  
me
 ? me->
˘e
 : 
NULL
;

1089 
	}
}

1091 
PUBLIC
 
	$HTAnch‹_£tC⁄ã¡Tøns„rEncodög
 (
HTP¨ítAnch‹
 * 
me
, 
HTEncodög
 
˘e
)

1093 i‡(
me
Ëme->
˘e
 = cte;

1094 
	}
}

1099 
PUBLIC
 
HTMëhod
 
	$HTAnch‹_Ælow
 (
HTP¨ítAnch‹
 * 
me
)

1101 i‡(
me
) {

1102 i‡(
me
->
Ælow
 =0 && me->
hódîs
) {

1103 * 
vÆue
 = 
	`HTAssocLi°_födObje˘
(
me
->
hódîs
, "allow");

1104 * 
fõld
;

1111 (
fõld
 = 
	`HTNextFõld
(&
vÆue
)Ë!
NULL
) {

1112 
HTMëhod
 
√w_mëhod
;

1113 i‡((
√w_mëhod
 = 
	`HTMëhod_íum
(
fõld
)Ë!
METHOD_INVALID
)

1114 
me
->
Ælow
 |
√w_mëhod
;

1117  
me
->
Ælow
;

1119  
METHOD_INVALID
;

1120 
	}
}

1122 
PUBLIC
 
	$HTAnch‹_£tAŒow
 (
HTP¨ítAnch‹
 * 
me
, 
HTMëhod
 
mëhod£t
)

1124 i‡(
me
Ëme->
Ælow
 = 
mëhod£t
;

1125 
	}
}

1127 
PUBLIC
 
	$HTAnch‹_≠≥ndAŒow
 (
HTP¨ítAnch‹
 * 
me
, 
HTMëhod
 
mëhod£t
)

1129 i‡(
me
Ëme->
Ælow
 |
mëhod£t
;

1130 
	}
}

1135 
PUBLIC
 c⁄° * 
	$HTAnch‹_tôÀ
 (
HTP¨ítAnch‹
 * 
me
)

1137 i‡(
me
) {

1138 i‡(
me
->
tôÀ
)

1139  *
me
->
tôÀ
 ? me->tôÀ : 
NULL
;

1140 i‡(
me
->
hódîs
) {

1141 * 
vÆue
 = 
	`HTAssocLi°_födObje˘
(
me
->
hódîs
, "title");

1142 * 
tôÀ
;

1143 i‡((
tôÀ
 = 
	`HTNextFõld
(&
vÆue
))Ë
	`SåAŒocC›y
(
me
->title,Åitle);

1144  
me
->
tôÀ
;

1147  
NULL
;

1148 
	}
}

1150 
PUBLIC
 
	$HTAnch‹_£tTôÀ
 (
HTP¨ítAnch‹
 * 
me
, c⁄° * 
tôÀ
)

1152 i‡(
me
 && 
tôÀ
) {

1153 * 
±r
;

1154 
	`SåAŒocC›y
(
me
->
tôÀ
,Åitle);

1155 
±r
 = 
me
->
tôÀ
;

1156 *
±r
) {

1157 i‡(
	`is•a˚
((Ë*
±r
)) *ptr = ' ';

1158 
±r
++;

1161 
	}
}

1163 
PUBLIC
 
	$HTAnch‹_≠≥ndTôÀ
 (
HTP¨ítAnch‹
 * 
me
, c⁄° * 
tôÀ
)

1165 i‡(
me
 && 
tôÀ
Ë
	`SåAŒocC©
(me->title,Åitle);

1166 
	}
}

1171 
PUBLIC
 * 
	$HTAnch‹_vîsi⁄
 (
HTP¨ítAnch‹
 * 
me
)

1173 i‡(
me
) {

1174 i‡(
me
->
vîsi⁄
)

1175  *
me
->
vîsi⁄
 ? me->vîsi⁄ : 
NULL
;

1176 i‡(
me
->
hódîs
) {

1177 * 
vÆue
 = 
	`HTAssocLi°_födObje˘
(
me
->
hódîs
, "version");

1178 * 
vîsi⁄
;

1179 i‡((
vîsi⁄
 = 
	`HTNextFõld
(&
vÆue
)))

1180 
	`SåAŒocC›y
(
me
->
vîsi⁄
, version);

1181  
me
->
vîsi⁄
;

1184  
NULL
;

1185 
	}
}

1187 
PUBLIC
 
	$HTAnch‹_£tVîsi⁄
 (
HTP¨ítAnch‹
 * 
me
, c⁄° * 
vîsi⁄
)

1189 i‡(
me
 && 
vîsi⁄
Ë
	`SåAŒocC›y
(me->version, version);

1190 
	}
}

1195 
PUBLIC
 * 
	$HTAnch‹_dîived
 (
HTP¨ítAnch‹
 * 
me
)

1197 i‡(
me
) {

1198 i‡(
me
->
dîived_‰om
)

1199  *
me
->
dîived_‰om
 ? me->dîived_‰om : 
NULL
;

1200 i‡(
me
->
hódîs
) {

1201 * 
vÆue
 = 
	`HTAssocLi°_födObje˘
(
me
->
hódîs
, "derived-from");

1202 * 
dîived_‰om
;

1203 i‡((
dîived_‰om
 = 
	`HTNextFõld
(&
vÆue
)))

1204 
	`SåAŒocC›y
(
me
->
dîived_‰om
, derived_from);

1205  
me
->
dîived_‰om
;

1208  
NULL
;

1209 
	}
}

1211 
PUBLIC
 
	$HTAnch‹_£tDîived
 (
HTP¨ítAnch‹
 * 
me
, c⁄° *
dîived_‰om
)

1213 i‡(
me
 && 
dîived_‰om
Ë
	`SåAŒocC›y
(me->derived_from, derived_from);

1214 
	}
}

1219 
PUBLIC
 * 
	$HTAnch‹_md5
 (
HTP¨ítAnch‹
 * 
me
)

1221 i‡(
me
) {

1222 i‡(
me
->
c⁄ã¡_md5
)

1223  *
me
->
c⁄ã¡_md5
 ? me->c⁄ã¡_md5 : 
NULL
;

1224 i‡(
me
->
hódîs
) {

1225 * 
vÆue
 = 
	`HTAssocLi°_födObje˘
(
me
->
hódîs
, "content-md5");

1226 * 
md5
;

1227 i‡((
md5
 = 
	`HTNextFõld
(&
vÆue
))Ë
	`SåAŒocC›y
(
me
->
c⁄ã¡_md5
,md5);

1228  
me
->
c⁄ã¡_md5
;

1231  
NULL
;

1232 
	}
}

1234 
PUBLIC
 
BOOL
 
	$HTAnch‹_£tMd5
 (
HTP¨ítAnch‹
 * 
me
, c⁄° * 
hash
)

1236 i‡(
me
 && 
hash
) {

1237 
	`SåAŒocC›y
(
me
->
c⁄ã¡_md5
, 
hash
);

1238  
YES
;

1240  
NO
;

1241 
	}
}

1246 
PUBLIC
 
time_t
 
	$HTAnch‹_d©e
 (
HTP¨ítAnch‹
 * 
me
)

1248 i‡(
me
) {

1249 i‡(
me
->
d©e
 =(
time_t
Ë-1 && me->
hódîs
) {

1250 * 
vÆue
 = 
	`HTAssocLi°_födObje˘
(
me
->
hódîs
, "date");

1251 i‡(
vÆue
Ë
me
->
d©e
 = 
	`HTP¨£Time
(vÆue, 
NULL
, 
YES
);

1253  
me
->
d©e
;

1255  (
time_t
) -1;

1256 
	}
}

1258 
PUBLIC
 
	$HTAnch‹_£tD©e
 (
HTP¨ítAnch‹
 * 
me
, c⁄° 
time_t
 
d©e
)

1260 i‡(
me
Ëme->
d©e
 = date;

1261 
	}
}

1266 
PUBLIC
 
time_t
 
	$HTAnch‹_expúes
 (
HTP¨ítAnch‹
 * 
me
)

1268 i‡(
me
) {

1269 i‡(
me
->
expúes
 =(
time_t
Ë-1 && me->
hódîs
) {

1270 * 
vÆue
 = 
	`HTAssocLi°_födObje˘
(
me
->
hódîs
, "expires");

1271 i‡(
vÆue
Ë
me
->
expúes
 = 
	`HTP¨£Time
(vÆue, 
NULL
, 
YES
);

1273  
me
->
expúes
;

1275  (
time_t
) -1;

1276 
	}
}

1278 
PUBLIC
 
	$HTAnch‹_£tExpúes
 (
HTP¨ítAnch‹
 * 
me
, c⁄° 
time_t
 
expúes
)

1280 i‡(
me
Ëme->
expúes
 =Éxpires;

1281 
	}
}

1286 
PUBLIC
 
time_t
 
	$HTAnch‹_œ°Modifõd
 (
HTP¨ítAnch‹
 * 
me
)

1288 i‡(
me
) {

1289 i‡(
me
->
œ°_modifõd
 =(
time_t
Ë-1 && me->
hódîs
) {

1290 * 
vÆue
 = 
	`HTAssocLi°_födObje˘
(
me
->
hódîs
,"last-modified");

1291 i‡(
vÆue
Ë
me
->
œ°_modifõd
 = 
	`HTP¨£Time
(vÆue, 
NULL
, 
YES
);

1293  
me
->
œ°_modifõd
;

1295  (
time_t
) -1;

1296 
	}
}

1298 
PUBLIC
 
	$HTAnch‹_£tLa°Modifõd
 (
HTP¨ítAnch‹
 * 
me
, c⁄° 
time_t
 
lm
)

1300 i‡(
me
Ëme->
œ°_modifõd
 = 
lm
;

1301 
	}
}

1306 
PUBLIC
 
time_t
 
	$HTAnch‹_age
 (
HTP¨ítAnch‹
 * 
me
)

1308 i‡(
me
) {

1309 i‡(
me
->
age
 =(
time_t
Ë-1 && me->
hódîs
) {

1310 * 
vÆue
 = 
	`HTAssocLi°_födObje˘
(
me
->
hódîs
, "age");

1311 i‡(
vÆue
Ë
me
->
age
 = 
	`©ﬁ
(value);

1313  
me
->
age
;

1315  (
time_t
) -1;

1316 
	}
}

1318 
PUBLIC
 
	$HTAnch‹_£tAge
 (
HTP¨ítAnch‹
 * 
me
, c⁄° 
time_t
 
age
)

1320 i‡(
me
Ëme->
age
 =áge;

1321 
	}
}

1326 
PUBLIC
 * 
	$HTAnch‹_ëag
 (
HTP¨ítAnch‹
 * 
me
)

1328 i‡(
me
) {

1329 i‡(
me
->
ëag
)

1330  *
me
->
ëag
 ? me->ëag : 
NULL
;

1331 i‡(
me
->
hódîs
) {

1332 * 
vÆue
 = 
	`HTAssocLi°_födObje˘
(
me
->
hódîs
, "etag");

1333 * 
ëag
;

1334 i‡((
ëag
 = 
	`HTNextFõld
(&
vÆue
))Ë
	`SåAŒocC›y
(
me
->etag,Étag);

1335  
me
->
ëag
;

1339  
me
 ? me->
ëag
 : 
NULL
;

1340 
	}
}

1342 
PUBLIC
 
	$HTAnch‹_£tEèg
 (
HTP¨ítAnch‹
 * 
me
, c⁄° * 
ëag
)

1345 i‡(
me
 && 
ëag
 && ((me->ëag =
NULL
Ë|| 
	`°rcmp
 (me->etag,Étag)))

1346 
	`SåAŒocC›y
(
me
->
ëag
,Étag);

1347 
	}
}

1349 
PUBLIC
 
BOOL
 
	$HTAnch‹_isEègWók
 (
HTP¨ítAnch‹
 * 
me
)

1351  (
me
 && me->
ëag
 && !
	`°∫ˇ£comp
(me->etag, "W/", 2));

1352 
	}
}

1357 
PUBLIC
 
HTAssocLi°
 * 
	$HTAnch‹_hódî
 (
HTP¨ítAnch‹
 * 
me
)

1359  
me
 ? me->
hódîs
 : 
NULL
;

1360 
	}
}

1362 
PUBLIC
 
BOOL
 
	$HTAnch‹_£tHódî
 (
HTP¨ítAnch‹
 * 
me
, 
HTAssocLi°
 * 
hódîs
)

1364 i‡(
me
) {

1365 
me
->
hódîs
 = headers;

1366  
YES
;

1368  
NO
;

1369 
	}
}

1374 
PUBLIC
 
	$HTAnch‹_£tHódîP¨£d
 (
HTP¨ítAnch‹
 * 
me
)

1376 i‡(
me
) {

1377 
	`HTTRACE
(
ANCH_TRACE
, "HTAnchor.... Anchor isÖarsed\n");

1378 
me
->
hódî_∑r£d
 = 
YES
;

1380 
	}
}

1382 
PUBLIC
 
BOOL
 
	$HTAnch‹_hódîP¨£d
 (
HTP¨ítAnch‹
 * 
me
)

1384  (
me
 ? me->
hódî_∑r£d
 : 
NO
);

1385 
	}
}

1390 
PUBLIC
 
	$HTAnch‹_˛órHódî
 (
HTP¨ítAnch‹
 * 
me
)

1392 
	`HTTRACE
(
ANCH_TRACE
, "HTAnchor.... Clearáll header information\n");

1393 
me
->
Ælow
 = 
METHOD_INVALID
;

1394 i‡(
me
->
c⁄ã¡_ícodög
) {

1395 
	`HTLi°_dñëe
(
me
->
c⁄ã¡_ícodög
);

1396 
me
->
c⁄ã¡_ícodög
 = 
NULL
;

1398 i‡(
me
->
c⁄ã¡_œnguage
) {

1399 
	`HTLi°_dñëe
(
me
->
c⁄ã¡_œnguage
);

1400 
me
->
c⁄ã¡_œnguage
 = 
NULL
;

1402 
	`HT_FREE
(
me
->
c⁄ã¡_ba£
);

1403 
	`HT_FREE
(
me
->
c⁄ã¡_loˇti⁄
);

1404 
me
->
c⁄ã¡_Àngth
 = -1;

1407 
	`HT_FREE
(
me
->
tôÀ
);

1410 
me
->
c⁄ã¡_ty≥
 = 
WWW_UNKNOWN
;

1411 i‡(
me
->
ty≥_∑ømëîs
) {

1412 
	`HTAssocLi°_dñëe
(
me
->
ty≥_∑ømëîs
);

1413 
me
->
ty≥_∑ømëîs
 = 
NULL
;

1417 i‡(
me
->
mëa_ègs
) {

1418 
	`HTAssocLi°_dñëe
(
me
->
mëa_ègs
);

1419 
me
->
mëa_ègs
 = 
NULL
;

1423 
me
->
d©e
 = (
time_t
) -1;

1424 
me
->
expúes
 = (
time_t
) -1;

1425 
me
->
œ°_modifõd
 = (
time_t
) -1;

1426 
me
->
age
 = (
time_t
) -1;

1428 
	`HT_FREE
(
me
->
dîived_‰om
);

1429 
	`HT_FREE
(
me
->
vîsi⁄
);

1430 
	`HT_FREE
(
me
->
ëag
);

1433 i‡(
me
->
hódîs
Ë
	`HTAssocLi°_dñëe
(me->headers);

1434 
me
->
hódîs
 = 
NULL
;

1435 
	}
}

	@Library/src/HTAnchor.h

48 #i‚de‡
HTANCHOR_H


49 
	#HTANCHOR_H


	)

60 
	~"WWWUtû.h
"

62 
HTAtom
 * 
	tHTF‹m©
;

63 
HTAtom
 * 
	tHTLevñ
;

64 
HTAtom
 * 
	tHTEncodög
;

65 
HTAtom
 * 
	tHTCh¨£t
;

66 
HTAtom
 * 
	tHTL™guage
;

68 
_HTAnch‹
 
	tHTAnch‹
;

69 
_HTP¨ítAnch‹
 
	tHTP¨ítAnch‹
;

70 
_HTChûdAnch‹
 
	tHTChûdAnch‹
;

72 
	~"HTLök.h
"

73 
	~"HTMëhod.h
"

74 
	~"HTRe•⁄£.h
"

120 
HTAnch‹
 * 
HTAnch‹_födAddªss
 (c⁄° * 
addªss
);

133 
HTChûdAnch‹
 * 
HTAnch‹_födChûd
 (
HTP¨ítAnch‹
 *
∑ª¡
,

134 c⁄° * 
èg
);

148 
HTChûdAnch‹
 * 
HTAnch‹_födChûdAndLök
 (

149 
HTP¨ítAnch‹
 * 
∑ª¡
,

150 c⁄° * 
èg
,

151 c⁄° * 
hªf
,

152 
HTLökTy≥
 
…y≥
);

164 
BOOL
 
HTAnch‹_dñëe
 (
HTP¨ítAnch‹
 *
me
);

179 
BOOL
 
HTAnch‹_˛órAŒ
 (
HTLi°
 * 
documíts
);

196 
BOOL
 
HTAnch‹_dñëeAŒ
 (
HTLi°
 * 
obje˘s
);

214 
HTAºay
 * 
HTAnch‹_gëAºay
 (
growby
);

233 
BOOL
 
HTAnch‹_£tMaöLök
 (
HTAnch‹
 * 
™ch‹
, 
HTLök
 * 
lök
);

234 
HTLök
 * 
HTAnch‹_maöLök
 (
HTAnch‹
 * 
™ch‹
);

236 
HTAnch‹
 * 
HTAnch‹_fﬁlowMaöLök
 (HTAnch‹ * 
™ch‹
);

244 
BOOL
 
HTAnch‹_£tSubLöks
 (
HTAnch‹
 * 
™ch‹
, 
HTLi°
 * 
li°
);

245 
HTLi°
 * 
HTAnch‹_subLöks
 (
HTAnch‹
 * 
™ch‹
);

259 
HTLök
 * 
HTAnch‹_födLökTy≥
 (
HTAnch‹
 * 
me
, 
HTLökTy≥
 
ty≥
);

275 
HTP¨ítAnch‹
 * 
HTAnch‹_∑ª¡
 (
HTAnch‹
 *
me
);

284 
BOOL
 
HTAnch‹_hasChûdªn
 (
HTP¨ítAnch‹
 *
me
);

292 
BOOL
 
HTAnch‹_isChûd
 (
HTAnch‹
 * 
me
);

307 * 
HTAnch‹_võw
 (
HTAnch‹
 * 
me
);

326 * 
HTAnch‹_addªss
 (
HTAnch‹
 * 
me
);

344 * 
HTAnch‹_ex∑ndedAddªss
 (
HTAnch‹
 * 
me
);

353 * 
HTAnch‹_physiˇl
 (
HTP¨ítAnch‹
 * 
me
);

354 
HTAnch‹_£tPhysiˇl
 (
HTP¨ítAnch‹
 * 
me
, * 
¥Ÿocﬁ
);

355 
HTAnch‹_˛órPhysiˇl
 (
HTP¨ítAnch‹
 * 
me
);

369 
HTAnch‹_£tDocumít
 (
HTP¨ítAnch‹
 *
me
, * 
doc
);

370 * 
HTAnch‹_documít
 (
HTP¨ítAnch‹
 *
me
);

384 
HTAnch‹_˛órHódî
 (
HTP¨ítAnch‹
 *
me
);

397 
BOOL
 
HTAnch‹_upd©e
 (
HTP¨ítAnch‹
 * 
me
, 
HTRe•⁄£
 * 
ª•⁄£
);

404 
HTAnch‹_˛órIndex
 (
HTP¨ítAnch‹
 * 
me
);

405 
HTAnch‹_£tIndex
 (
HTP¨ítAnch‹
 * 
me
);

406 
BOOL
 
HTAnch‹_isIndex
 (
HTP¨ítAnch‹
 * 
me
);

418 c⁄° * 
HTAnch‹_tôÀ
 (
HTP¨ítAnch‹
 *
me
);

419 
HTAnch‹_£tTôÀ
 (
HTP¨ítAnch‹
 *
me
,

420 c⁄° * 
tôÀ
);

421 
HTAnch‹_≠≥ndTôÀ
 (
HTP¨ítAnch‹
 *
me
,

422 c⁄° * 
tôÀ
);

431 
HTAssocLi°
 * 
HTAnch‹_mëa
 (
HTP¨ítAnch‹
 * 
me
);

432 
BOOL
 
HTAnch‹_addMëa
 (
HTP¨ítAnch‹
 * 
me
,

433 c⁄° * 
«me
, c⁄° * 
vÆue
);

447 * 
HTAnch‹_robŸs
 (
HTP¨ítAnch‹
 * 
me
);

461 * 
HTAnch‹_ba£
 (
HTP¨ítAnch‹
 * 
me
);

462 
BOOL
 
HTAnch‹_£tBa£
 (
HTP¨ítAnch‹
 * 
me
, * 
ba£
);

475 * 
HTAnch‹_loˇti⁄
 (
HTP¨ítAnch‹
 * 
me
);

476 
BOOL
 
HTAnch‹_£tLoˇti⁄
 (
HTP¨ítAnch‹
 * 
me
, * 
loˇti⁄
);

484 
HTF‹m©
 
HTAnch‹_f‹m©
 (
HTP¨ítAnch‹
 *
me
);

485 
HTAnch‹_£tF‹m©
 (
HTP¨ítAnch‹
 *
me
,

486 
HTF‹m©
 
f‹m
);

499 
HTAssocLi°
 * 
HTAnch‹_f‹m©P¨am
 (
HTP¨ítAnch‹
 * 
me
);

501 
BOOL
 
HTAnch‹_addF‹m©P¨am
 (
HTP¨ítAnch‹
 * 
me
,

502 c⁄° * 
«me
, c⁄° * 
vÆue
);

510 
HTCh¨£t
 
HTAnch‹_ch¨£t
 (
HTP¨ítAnch‹
 *
me
);

511 
BOOL
 
HTAnch‹_£tCh¨£t
 (
HTP¨ítAnch‹
 *
me
,

512 
HTCh¨£t
 
ch¨£t
);

520 
HTLevñ
 
HTAnch‹_Àvñ
 (
HTP¨ítAnch‹
 * 
me
);

521 
BOOL
 
HTAnch‹_£tLevñ
 (
HTP¨ítAnch‹
 * 
me
,

522 
HTLevñ
 
Àvñ
);

530 
HTLi°
 * 
HTAnch‹_œnguage
 (
HTP¨ítAnch‹
 * 
me
);

531 
BOOL
 
HTAnch‹_addL™guage
 (
HTP¨ítAnch‹
 *
me
, 
HTL™guage
 
œng
);

532 
BOOL
 
HTAnch‹_dñëeL™guageAŒ
 (
HTP¨ítAnch‹
 * 
me
);

540 
HTLi°
 * 
HTAnch‹_ícodög
 (
HTP¨ítAnch‹
 * 
me
);

541 
BOOL
 
HTAnch‹_addEncodög
 (
HTP¨ítAnch‹
 * 
me
, 
HTEncodög
 
íc
);

542 
BOOL
 
HTAnch‹_dñëeEncodög
 (
HTP¨ítAnch‹
 * 
me
, 
HTEncodög
 
íc
);

543 
BOOL
 
HTAnch‹_dñëeEncodögAŒ
 (
HTP¨ítAnch‹
 * 
me
);

545 
	#HTAnch‹_ªmoveEncodög
(
a
, 
e
Ë
	`HTAnch‹_dñëeEncodög
(◊), (e))

	)

553 
HTEncodög
 
HTAnch‹_c⁄ã¡Tøns„rEncodög
 (
HTP¨ítAnch‹
 *
me
);

554 
HTAnch‹_£tC⁄ã¡Tøns„rEncodög
 (
HTP¨ítAnch‹
 *
me
,

555 
HTEncodög
 
˘e
);

563 
HTAnch‹_Àngth
 (
HTP¨ítAnch‹
 * 
me
);

564 
HTAnch‹_£tLígth
 (
HTP¨ítAnch‹
 * 
me
, 
Àngth
);

565 
HTAnch‹_addLígth
 (
HTP¨ítAnch‹
 * 
me
, 
dñèÀngth
);

573 * 
HTAnch‹_md5
 (
HTP¨ítAnch‹
 * 
me
);

574 
BOOL
 
HTAnch‹_£tMd5
 (
HTP¨ítAnch‹
 * 
me
, c⁄° * 
hash
);

582 
HTMëhod
 
HTAnch‹_Ælow
 (
HTP¨ítAnch‹
 * 
me
);

583 
HTAnch‹_£tAŒow
 (
HTP¨ítAnch‹
 * 
me
, 
HTMëhod
 
mëhod£t
);

584 
HTAnch‹_≠≥ndAŒow
 (
HTP¨ítAnch‹
 * 
me
, 
HTMëhod
 
mëhod£t
);

592 * 
HTAnch‹_vîsi⁄
 (
HTP¨ítAnch‹
 * 
me
);

593 
HTAnch‹_£tVîsi⁄
 (
HTP¨ítAnch‹
 * 
me
, c⁄° * 
vîsi⁄
);

603 
time_t
 
HTAnch‹_d©e
 (
HTP¨ítAnch‹
 * 
me
);

604 
HTAnch‹_£tD©e
 (
HTP¨ítAnch‹
 * 
me
, c⁄° 
time_t
 
d©e
);

614 
time_t
 
HTAnch‹_œ°Modifõd
 (
HTP¨ítAnch‹
 * 
me
);

615 
HTAnch‹_£tLa°Modifõd
 (
HTP¨ítAnch‹
 * 
me
, c⁄° 
time_t
 
lm
);

627 * 
HTAnch‹_ëag
 (
HTP¨ítAnch‹
 * 
me
);

628 
HTAnch‹_£tEèg
 (
HTP¨ítAnch‹
 * 
me
, c⁄° * 
ëag
);

629 
BOOL
 
HTAnch‹_isEègWók
 (
HTP¨ítAnch‹
 * 
me
);

642 
time_t
 
HTAnch‹_age
 (
HTP¨ítAnch‹
 * 
me
);

643 
HTAnch‹_£tAge
 (
HTP¨ítAnch‹
 * 
me
, c⁄° 
time_t
 
age
);

651 
time_t
 
HTAnch‹_expúes
 (
HTP¨ítAnch‹
 * 
me
);

652 
HTAnch‹_£tExpúes
 (
HTP¨ítAnch‹
 * 
me
, c⁄° 
time_t
 
exp
);

660 * 
HTAnch‹_dîived
 (
HTP¨ítAnch‹
 *
me
);

661 
HTAnch‹_£tDîived
 (
HTP¨ítAnch‹
 *
me
, c⁄° *
dîived_‰om
);

672 
BOOL
 
HTAnch‹_hódîP¨£d
 (
HTP¨ítAnch‹
 *
me
);

673 
HTAnch‹_£tHódîP¨£d
 (
HTP¨ítAnch‹
 *
me
);

684 
BOOL
 
HTAnch‹_£tHódî
 (
HTP¨ítAnch‹
 * 
me
, 
HTAssocLi°
 * 
li°
);

685 
HTAssocLi°
 * 
HTAnch‹_hódî
 (
HTP¨ítAnch‹
 * 
me
);

	@Library/src/HTArray.c

12 
	~"wwwsys.h
"

13 
	~"HTUtûs.h
"

14 
	~"HTAºay.h
"

19 
PUBLIC
 
HTAºay
 * 
	$HTAºay_√w
 (
grow
)

21 
HTAºay
 * 
¨øy
;

22 i‡((
¨øy
 = (
HTAºay
 *Ë
	`HT_CALLOC
(1, (HTAºay))Ë=
NULL
)

23 
	`HT_OUTOFMEM
("HTArray_new");

24 
¨øy
->
growby
 = 
grow
;

25  
¨øy
;

26 
	}
}

31 
PUBLIC
 
BOOL
 
	$HTAºay_˛ór
 (
HTAºay
 * 
¨øy
)

33 i‡(
¨øy
) {

34 
	`HT_FREE
(
¨øy
->
d©a
);

35 
¨øy
->
size
 = 0;

36 
¨øy
->
Æloˇãd
 = 0;

37  
YES
;

39  
NO
;

40 
	}
}

45 
PUBLIC
 
BOOL
 
	$HTAºay_dñëe
 (
HTAºay
 * 
¨øy
)

47 i‡(
¨øy
) {

48 
	`HT_FREE
(
¨øy
->
d©a
);

49 
	`HT_FREE
(
¨øy
);

50  
YES
;

52  
NO
;

53 
	}
}

58 
PUBLIC
 
BOOL
 
	$HTAºay_addObje˘
 (
HTAºay
 * 
¨øy
, * 
obje˘
)

60 i‡(
¨øy
) {

61 i‡(
¨øy
->
size
 >¨øy->
Æloˇãd
-1) {

62 i‡(
¨øy
->
d©a
) {

63 i‡((
¨øy
->
d©a
 = (* *Ë
	`HT_REALLOC
◊ºay->d©a, (¨øy->
Æloˇãd
+¨øy->
growby
Ë* (*))Ë=
NULL
)

64 
	`HT_OUTOFMEM
("HTArray_add");

65 
	`mem£t
((
¨øy
->
d©a
+¨øy->
Æloˇãd
), '\0',áºay->
growby
 * (*));

67 i‡((
¨øy
->
d©a
 = (* *Ë
	`HT_CALLOC
◊ºay->
growby
, (*))Ë=
NULL
)

68 
	`HT_OUTOFMEM
("HTArray_add");

70 
¨øy
->
Æloˇãd
 +¨øy->
growby
;

72 *(
¨øy
->
d©a
+¨øy->
size
++Ë
obje˘
;

73  
YES
;

75  
NO
;

76 
	}
}

81 
PUBLIC
 
BOOL
 
	$HTAºay_s‹t
 (
HTAºay
 * 
¨øy
, 
HTCom∑ªr
 * 
comp
)

83 i‡(
¨øy
 && 
comp
) {

84 
	`qs‹t
(
¨øy
->
d©a
,áºay->
size
,  (*), 
comp
);

85  
YES
;

87  
NO
;

88 
	}
}

	@Library/src/HTArray.h

31 #i‚de‡
HTARRAY_H


32 
	#HTARRAY_H


	)

44 
	msize
;

45 
	mgrowby
;

46 
	mÆloˇãd
;

47 ** 
	md©a
;

48 } 
	tHTAºay
;

60 
HTAºay
 * 
HTAºay_√w
 (
grow
);

70 
BOOL
 
HTAºay_dñëe
 (
HTAºay
 * 
¨øy
);

80 
BOOL
 
HTAºay_˛ór
 (
HTAºay
 * 
¨øy
);

90 
BOOL
 
HTAºay_addObje˘
 (
HTAºay
 * 
¨øy
, * 
obje˘
);

100 
	#HTAºay_fú°Obje˘
(
me
, 
dp
) \

101 ((
me
Ë&& ((
dp
)=(me)->
d©a
Ë? *(dp)++ : 
NULL
)

	)

102 
	#HTAºay_√xtObje˘
(
me
, 
dp
) \

103 ((
me
Ë&& (
dp
Ë? *(dp)++ : 
NULL
)

	)

116 
	tHTCom∑ªr
 (c⁄° * 
	ta
, c⁄° * 
	tb
);

124 
BOOL
 
HTAºay_s‹t
 (
HTAºay
 * 
¨øy
, 
HTCom∑ªr
 * 
comp
);

134 
	#HTAºay_d©a
(
me
Ë((meË? (me)->
d©a
 : 
NULL
)

	)

145 
	#HTAºay_size
(
me
Ë((meË? (me)->
size
 : -1)

	)

	@Library/src/HTAssoc.c

25 
	~"wwwsys.h
"

26 
	~"HTUtûs.h
"

27 
	~"HTSåög.h
"

28 
	~"HTAssoc.h
"

30 
PUBLIC
 
HTAssocLi°
 * 
	$HTAssocLi°_√w
 ()

32  
	`HTLi°_√w
();

33 
	}
}

35 
PUBLIC
 
BOOL
 
	$HTAssocLi°_dñëe
 (
HTAssocLi°
 * 
li°
)

37 i‡(
li°
) {

38 
HTAssocLi°
 *
cur
 = 
li°
;

39 
HTAssoc
 *
assoc
;

40 
NULL
 !(
assoc
 = (
HTAssoc
*)
	`HTLi°_√xtObje˘
(
cur
))) {

41 
	`HT_FREE
(
assoc
->
«me
);

42 
	`HT_FREE
(
assoc
->
vÆue
);

43 
	`HT_FREE
(
assoc
);

45  
	`HTLi°_dñëe
(
li°
);

47  
NO
;

48 
	}
}

50 
PUBLIC
 
BOOL
 
	$HTAssocLi°_addObje˘
 (
HTAssocLi°
 * 
li°
,

51 c⁄° * 
«me
, c⁄° * 
vÆue
)

53 i‡(
li°
 && 
«me
) {

54 
HTAssoc
 * 
assoc
;

55 i‡((
assoc
 = (
HTAssoc
 *Ë
	`HT_CALLOC
(1, (HTAssoc))Ë=
NULL
)

56 
	`HT_OUTOFMEM
("HTAssoc_add");

57 
	`SåAŒocC›y
(
assoc
->
«me
,Çame);

58 i‡(
vÆue
Ë
	`SåAŒocC›y
(
assoc
->value, value);

59  
	`HTLi°_addObje˘
(
li°
, (*Ë
assoc
);

61 
	`HTTRACE
(
UTIL_TRACE
, "HTAssoc_add: ERROR:ássocÜist NULL!!\n");

63  
NO
;

64 
	}
}

66 
PUBLIC
 
BOOL
 
	$HTAssocLi°_ª∂a˚Obje˘
 (
HTAssocLi°
 * 
li°
,

67 c⁄° * 
«me
, c⁄° * 
vÆue
)

69 i‡(
li°
 && 
«me
) {

70 
HTAssocLi°
 * 
cur
 = 
li°
;

71 
HTAssoc
 * 
assoc
;

72 
Àn
 = 
	`°æí
(
«me
);

73 (
assoc
 = (
HTAssoc
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

74 i‡(!
	`°∫ˇ£comp
(
assoc
->
«me
,Çame, 
Àn
)) {

75 
	`SåAŒocC›y
(
assoc
->
«me
,Çame);

76 i‡(
vÆue
Ë
	`SåAŒocC›y
(
assoc
->value, value);

77  
YES
;

80  
	`HTAssocLi°_addObje˘
(
li°
, 
«me
, 
vÆue
);

82  
NO
;

83 
	}
}

85 
PUBLIC
 * 
	$HTAssocLi°_födObje˘
 (
HTAssocLi°
 * 
li°
, c⁄° * 
«me
)

87 i‡(
li°
 && 
«me
) {

88 
HTAssocLi°
 * 
cur
 = 
li°
;

89 
HTAssoc
 * 
assoc
;

90 
Àn
 = 
	`°æí
(
«me
);

91 (
assoc
 = (
HTAssoc
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

92 i‡(!
	`°∫ˇ£comp
(
assoc
->
«me
,Çame, 
Àn
))

93  
assoc
->
vÆue
;

96  
NULL
;

97 
	}
}

99 
PUBLIC
 * 
	$HTAssocLi°_födObje˘Exa˘
 (
HTAssocLi°
 * 
li°
, c⁄° * 
«me
)

101 i‡(
li°
 && 
«me
) {

102 
HTAssocLi°
 * 
cur
 = 
li°
;

103 
HTAssoc
 * 
assoc
;

104 (
assoc
 = (
HTAssoc
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

105 i‡(!
	`°rˇ£comp
(
assoc
->
«me
,Çame))

106  
assoc
->
vÆue
;

109  
NULL
;

110 
	}
}

112 
PUBLIC
 * 
	$HTAssocLi°_födObje˘Ca£Sísôive
 (
HTAssocLi°
 * 
li°
, c⁄° * 
«me
)

114 i‡(
li°
 && 
«me
) {

115 
HTAssocLi°
 * 
cur
 = 
li°
;

116 
HTAssoc
 * 
assoc
;

117 
Àn
 = 
	`°æí
(
«me
);

118 (
assoc
 = (
HTAssoc
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

119 i‡(!
	`°∫cmp
(
assoc
->
«me
,Çame, 
Àn
))

120  
assoc
->
vÆue
;

123  
NULL
;

124 
	}
}

126 
PUBLIC
 * 
	$HTAssocLi°_födObje˘Ca£SísôiveExa˘
 (
HTAssocLi°
 * 
li°
, c⁄° * 
«me
)

128 i‡(
li°
 && 
«me
) {

129 
HTAssocLi°
 * 
cur
 = 
li°
;

130 
HTAssoc
 * 
assoc
;

131 (
assoc
 = (
HTAssoc
 *Ë
	`HTAssocLi°_√xtObje˘
(
cur
))) {

132 i‡(!
	`°rcmp
(
	`HTAssoc_«me
(
assoc
), 
«me
))

133  
	`HTAssoc_vÆue
(
assoc
);

136  
NULL
;

137 
	}
}

142 
PUBLIC
 
BOOL
 
	$HTAssocLi°_ªmoveObje˘
 (
HTAssocLi°
 * 
li°
, c⁄° * 
«me
)

144 
BOOL
 
found
 = 
NO
;

145 i‡(
li°
 && 
«me
) {

146 
HTAssocLi°
 * 
cur
 = 
li°
;

147 
HTAssoc
 * 
assoc
;

148 
Àn
 = 
	`°æí
(
«me
);

149 (
assoc
 = (
HTAssoc
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

150 i‡(!
	`°∫ˇ£comp
(
assoc
->
«me
,Çame, 
Àn
)) {

151 
	`HTLi°_ªmoveObje˘
(
li°
, 
assoc
);

152 
	`HT_FREE
(
assoc
);

153 
found
 = 
YES
;

154 
cur
 = 
li°
;

158  
found
;

159 
	}
}

	@Library/src/HTAssoc.h

28 #i‚de‡
HTASSOC_H


29 
	#HTASSOC_H


	)

31 
	~"HTLi°.h
"

33 
HTLi°
 
	tHTAssocLi°
;

36 * 
	m«me
;

37 * 
	mvÆue
;

38 } 
	tHTAssoc
;

48 
HTAssocLi°
 * 
HTAssocLi°_√w
 ();

49 
BOOL
 
HTAssocLi°_dñëe
 (
HTAssocLi°
 * 
Æi°
);

63 
BOOL
 
HTAssocLi°_addObje˘
 (

64 
HTAssocLi°
 * 
Æi°
,

65 c⁄° * 
«me
,

66 c⁄° * 
vÆue
);

68 
BOOL
 
HTAssocLi°_ª∂a˚Obje˘
 (

69 
HTAssocLi°
 * 
li°
,

70 c⁄° * 
«me
,

71 c⁄° * 
vÆue
);

82 
BOOL
 
HTAssocLi°_ªmoveObje˘
 (

83 
HTAssocLi°
 * 
li°
,

84 c⁄° * 
«me
);

103 * 
HTAssocLi°_födObje˘
 (

104 
HTAssocLi°
 * 
Æi°
,

105 c⁄° * 
«me
);

115 * 
HTAssocLi°_födObje˘Exa˘
 (

116 
HTAssocLi°
 * 
Æi°
,

117 c⁄° * 
«me
);

127 * 
HTAssocLi°_födObje˘Ca£Sísôive
 (

128 
HTAssocLi°
 * 
li°
,

129 c⁄° * 
«me
);

139 * 
HTAssocLi°_födObje˘Ca£SísôiveExa˘
 (

140 
HTAssocLi°
 * 
li°
,

141 c⁄° * 
«me
);

151 
	#HTAssoc_«me
(
me
Ë((meË? (me)->
«me
 : 
NULL
)

	)

152 
	#HTAssoc_vÆue
(
me
Ë((meË? (me)->
vÆue
 : 
NULL
)

	)

164 
	#HTAssocLi°_√xtObje˘
(
me
) \

165 ((
me
Ë&& ((meË(me)->
√xt
Ë? (me)->
obje˘
 : 
NULL
)

	)

	@Library/src/HTAtom.c

20 
	~"wwwsys.h
"

21 
	~"HTUtûs.h
"

22 
	~"HTSåög.h
"

23 
	~"HTLi°.h
"

24 
	~"HTAtom.h
"

26 
PRIVATE
 
HTAtom
 * 
	ghash_èbÀ
[
HT_XL_HASH_SIZE
];

27 
PRIVATE
 
BOOL
 
	göôüli£d
 = 
NO
;

33 
PUBLIC
 
HTAtom
 * 
	$HTAtom_f‹
 (c⁄° * 
°rög
)

35 
hash
;

36 c⁄° * 
p
;

37 
HTAtom
 * 
a
;

39 i‡(!
°rög
Ë 
NULL
;

43 i‡(!
öôüli£d
) {

44 
	`mem£t
((*Ë
hash_èbÀ
, '\0', (
HTAtom
 *Ë* 
HT_XL_HASH_SIZE
);

45 
öôüli£d
 = 
YES
;

50 
p
=
°rög
, 
hash
=0; *p;Ö++) {

51 
hash
 = (hash * 3 + 
	`TOLOWER
(*
p
)Ë% 
HT_XL_HASH_SIZE
;

56 
a
=
hash_èbÀ
[
hash
];á;á˜->
√xt
) {

57 i‡(0==
	`°rcmp
(
a
->
«me
, 
°rög
)) {

59  
a
;

65 i‡((
a
 = (
HTAtom
 *Ë
	`HT_MALLOC
((*a))Ë=
NULL
)

66 
	`HT_OUTOFMEM
("HTAtom_for");

67 i‡((
a
->
«me
 = (*Ë
	`HT_MALLOC
(
	`°æí
(
°rög
)+1)Ë=
NULL
)

68 
	`HT_OUTOFMEM
("HTAtom_for");

69 
	`°r˝y
(
a
->
«me
, 
°rög
);

70 
a
->
√xt
 = 
hash_èbÀ
[
hash
];

71 
hash_èbÀ
[
hash
] = 
a
;

73  
a
;

74 
	}
}

82 
PUBLIC
 
HTAtom
 * 
	$HTAtom_ˇ£F‹
 (c⁄° * 
°rög
)

84 
hash
;

85 c⁄° * 
p
;

86 
HTAtom
 * 
a
;

88 i‡(!
°rög
Ë 
NULL
;

92 i‡(!
öôüli£d
) {

93 
	`mem£t
((*Ë
hash_èbÀ
, '\0', (
HTAtom
 *Ë* 
HT_XL_HASH_SIZE
);

94 
öôüli£d
 = 
YES
;

99 
p
=
°rög
, 
hash
=0; *p;Ö++) {

100 
hash
 = (hash * 3 + 
	`TOLOWER
(*
p
)Ë% 
HT_XL_HASH_SIZE
;

105 
a
=
hash_èbÀ
[
hash
];á;á˜->
√xt
) {

106 i‡(!
	`°rˇ£comp
(
a
->
«me
, 
°rög
)) {

107  
a
;

113 i‡((
a
 = (
HTAtom
 *Ë
	`HT_MALLOC
((*a))Ë=
NULL
)

114 
	`HT_OUTOFMEM
("HTAtom_for");

115 i‡((
a
->
«me
 = (*Ë
	`HT_MALLOC
(
	`°æí
(
°rög
)+1)Ë=
NULL
)

116 
	`HT_OUTOFMEM
("HTAtom_for");

117 
	`°r˝y
(
a
->
«me
, 
°rög
);

118 
a
->
√xt
 = 
hash_èbÀ
[
hash
];

119 
hash_èbÀ
[
hash
] = 
a
;

120  
a
;

121 
	}
}

128 
PUBLIC
 
	$HTAtom_dñëeAŒ
 ()

130 
i
;

131 
HTAtom
 *
cur
;

132 
HTAtom
 *
√xt
;

134 
i
=0; i<
HT_XL_HASH_SIZE
; i++) {

135 i‡(
hash_èbÀ
[
i
]) {

136 
cur
 = 
hash_èbÀ
[
i
];

137 
cur
) {

138 
√xt
 = 
cur
->next;

139 
	`HT_FREE
(
cur
->
«me
);

140 
	`HT_FREE
(
cur
);

141 
cur
 = 
√xt
;

145 
öôüli£d
 = 
NO
;

146 
	}
}

149 
PRIVATE
 
BOOL
 
	$mime_m©ch
 (c⁄° * 
«me
, c⁄° * 
ãm∂
)

151 i‡(
«me
 && 
ãm∂
) {

152 *
n1
 = 
NULL
;

153 *
t1
 = 
NULL
;

154 *
n2
;

155 *
t2
;

157 
	`SåAŒocC›y
(
n1
, 
«me
);

158 
	`SåAŒocC›y
(
t1
, 
ãm∂
);

160 i‡(!(
n2
 = 
	`°rchr
(
n1
, '/')Ë|| !(
t2
 = såchr(
t1
, '/')))

161  
NO
;

163 *(
n2
++) = ()0;

164 *(
t2
++) = ()0;

166 i‡((0==
	`°rcmp
(
t1
, "*"Ë|| 0==°rcmp—1, 
n1
)) &&

167 (0==
	`°rcmp
(
t2
, "*"Ë|| 0==°rcmp—2, 
n2
)))

168  
YES
;

170  
NO
;

171 
	}
}

174 
PUBLIC
 
HTLi°
 *
	$HTAtom_ãm∂©eM©ches
 (c⁄° * 
ãm∂
)

176 
HTLi°
 *
m©ches
 = 
	`HTLi°_√w
();

178 i‡(
öôüli£d
 && 
ãm∂
) {

179 
i
;

180 
HTAtom
 *
cur
;

182 
i
=0; i<
HT_XL_HASH_SIZE
; i++) {

183 
cur
 = 
hash_èbÀ
[
i
]; cur; cur=cur->
√xt
) {

184 i‡(
	`mime_m©ch
(
cur
->
«me
, 
ãm∂
))

185 
	`HTLi°_addObje˘
(
m©ches
, (*)
cur
);

189  
m©ches
;

190 
	}
}

	@Library/src/HTAtom.h

34 #i‚de‡
HTATOM_H


35 
	#HTATOM_H


	)

37 
	~"HTLi°.h
"

39 
_HTAtom
 
	tHTAtom
;

40 
	s_HTAtom
 {

41 
HTAtom
 * 
	m√xt
;

42 * 
	m«me
;

56 
HTAtom
 * 
HTAtom_f‹
 (c⁄° * 
°rög
);

57 
HTAtom
 * 
HTAtom_ˇ£F‹
 (c⁄° * 
°rög
);

65 
	#HTAtom_«me
(
a
Ë(◊Ë? (a)->
«me
 : 
NULL
)

	)

80 
HTLi°
 * 
HTAtom_ãm∂©eM©ches
 (c⁄° * 
ãm∂
);

91 
HTAtom_dñëeAŒ
 ();

	@Library/src/HTBInit.c

12 
	~"wwwsys.h
"

13 
	~"HTUtûs.h
"

14 
	~"HTF‹m©.h
"

15 
	~"HTBöd.h
"

16 
	~"HTBInô.h
"

33 
PUBLIC
 
	$HTFûeInô
 ()

37 
	`HTBöd_add
("ai", "≠∂iˇti⁄/po°s¸ùt", 
NULL
, "8bit", NULL, 0.5);

38 
	`HTBöd_add
("aif", "audio/x-aiff", 
NULL
, "binary", NULL, 1.0);

39 
	`HTBöd_add
("aifc", "audio/x-aiff", 
NULL
, "binary", NULL, 1.0);

40 
	`HTBöd_add
("aiff", "audio/x-aiff", 
NULL
, "binary", NULL, 1.0);

41 
	`HTBöd_add
("au", "audio/basic", 
NULL
, "binary", NULL, 1.0);

42 
	`HTBöd_add
("asf", "video/x-ms-asf", 
NULL
, "binary", NULL, 1.0);

43 
	`HTBöd_add
("avi", "video/x-msvideo", 
NULL
, "binary", NULL, 1.0);

44 
	`HTBöd_add
("b©", "≠∂iˇti⁄/o˘ë-°ªam", 
NULL
, "binary", NULL, 1.0);

45 
	`HTBöd_add
("b˝io", "≠∂iˇti⁄/x-b˝io", 
NULL
, "binary", NULL, 1.0);

46 
	`HTBöd_add
("bö", "≠∂iˇti⁄/o˘ë-°ªam", 
NULL
, "binary", NULL, 1.0);

47 
	`HTBöd_add
("bmp", "image/bmp", 
NULL
, "binary", NULL, 1.0);

48 
	`HTBöd_add
("c", "ãxt/∂aö", 
NULL
, "7bit", NULL, 0.5);

49 
	`HTBöd_add
("cc", "ãxt/∂aö", 
NULL
, "7bit", NULL, 0.5);

50 
	`HTBöd_add
("˝p", "ãxt/∂aö", 
NULL
, "7bit", NULL, 0.5);

51 
	`HTBöd_add
("cdf", "≠∂iˇti⁄/x-√tcdf", 
NULL
, "binary", NULL, 1.0);

52 
	`HTBöd_add
("cgm", "image/cgm", 
NULL
, "binary", NULL, 1.0);

53 
	`HTBöd_add
("c⁄f", "≠∂iˇti⁄/x-www-ruÀs", 
NULL
, "8bit", NULL, 1.0);

54 
	`HTBöd_add
("˝io", "≠∂iˇti⁄/x-˝io", 
NULL
, "binary", NULL, 1.0);

55 
	`HTBöd_add
("csh", "≠∂iˇti⁄/x-csh", 
NULL
, "7bit", NULL, 0.5);

56 
	`HTBöd_add
("css", "ãxt/css", 
NULL
, "8bit", NULL, 1.0);

57 
	`HTBöd_add
("dŒ", "≠∂iˇti⁄/o˘ë-°ªam", 
NULL
, "binary", NULL, 1.0);

58 
	`HTBöd_add
("doc", "≠∂iˇti⁄/msw‹d", 
NULL
, "binary", NULL, 0.5);

59 
	`HTBöd_add
("dŸ", "≠∂iˇti⁄/msw‹d", 
NULL
, "binary", NULL, 0.5);

60 
	`HTBöd_add
("dvi", "≠∂iˇti⁄/x-dvi", 
NULL
, "binary", NULL, 1.0);

61 
	`HTBöd_add
("ïs", "≠∂iˇti⁄/po°s¸ùt", 
NULL
, "8bit", NULL, 0.8);

62 
	`HTBöd_add
("ëx", "ãxt/x-£ãxt", 
NULL
, "7bit", NULL, 0.9);

63 
	`HTBöd_add
("exe", "≠∂iˇti⁄/o˘ë-°ªam", 
NULL
, "binary", NULL, 1.0);

64 
	`HTBöd_add
("f90", "ãxt/∂aö", 
NULL
, "7bit", NULL, 0.5);

65 
	`HTBöd_add
("gif", "image/gif", 
NULL
, "binary", NULL, 1.0);

66 
	`HTBöd_add
("h", "ãxt/∂aö", 
NULL
, "7bit", NULL, 0.5);

67 
	`HTBöd_add
("hdf", "≠∂iˇti⁄/x-hdf", 
NULL
, "binary", NULL, 1.0);

68 
	`HTBöd_add
("hh", "ãxt/∂aö", 
NULL
, "7bit", NULL, 0.5);

69 
	`HTBöd_add
("htm", "ãxt/html", 
NULL
, "8bit", NULL, 1.0);

70 
	`HTBöd_add
("html", "ãxt/html", 
NULL
, "8bit", NULL, 1.0);

71 
	`HTBöd_add
("õf", "image/õf", 
NULL
, "binary", NULL, 1.0);

72 
	`HTBöd_add
("j≥", "image/j≥g", 
NULL
, "binary", NULL, 1.0);

73 
	`HTBöd_add
("j≥g", "image/j≥g", 
NULL
, "binary", NULL, 1.0);

74 
	`HTBöd_add
("jpg", "image/j≥g", 
NULL
, "binary", NULL, 1.0);

75 
	`HTBöd_add
("œãx", "ãxt/œãx", 
NULL
, "8bit", NULL, 1.0);

76 
	`HTBöd_add
("m", "ãxt/∂aö", 
NULL
, "7bit", NULL, 0.5);

77 
	`HTBöd_add
("m™", "≠∂iˇti⁄/x-åoff-m™", 
NULL
, "7bit", NULL, 0.5);

78 
	`HTBöd_add
("me", "≠∂iˇti⁄/x-åoff-me", 
NULL
, "7bit", NULL, 0.5);

79 
	`HTBöd_add
("mht", "mesßge/rfc822", 
NULL
, "8bit", NULL, 1.0);

80 
	`HTBöd_add
("mhtml", "mesßge/rfc822", 
NULL
, "8bit", NULL, 1.0);

81 
	`HTBöd_add
("mime", "mesßge/rfc822", 
NULL
, "8bit", NULL, 1.0);

82 
	`HTBöd_add
("mov", "video/quicktime", 
NULL
, "binary", NULL, 1.0);

83 
	`HTBöd_add
("movõ", "video/x-sgi-movõ", 
NULL
, "binary", NULL, 1.0);

84 
	`HTBöd_add
("m≥", "video/m≥g", 
NULL
, "binary", NULL, 1.0);

85 
	`HTBöd_add
("m≥g", "video/m≥g", 
NULL
, "binary", NULL, 1.0);

86 
	`HTBöd_add
("mpg", "video/m≥g", 
NULL
, "binary", NULL, 1.0);

87 
	`HTBöd_add
("ms", "≠∂iˇti⁄/x-åoff-ms", 
NULL
, "7bit", NULL, 0.5);

88 
	`HTBöd_add
("nc", "≠∂iˇti⁄/x-√tcdf", 
NULL
, "binary", NULL, 1.0);

89 
	`HTBöd_add
("oda", "≠∂iˇti⁄/oda", 
NULL
, "binary", NULL, 1.0);

90 
	`HTBöd_add
("pbm", "image/x-p‹èbÀ-bôm≠", 
NULL
, "binary", NULL, 1.0);

91 
	`HTBöd_add
("pcu", "≠∂iˇti⁄/x-pics-u£r", 
NULL
, "8bit", NULL, 1.0);

92 
	`HTBöd_add
("pdf", "≠∂iˇti⁄/pdf", 
NULL
, "binary", NULL, 1.0);

93 
	`HTBöd_add
("pgm", "image/x-p‹èbÀ-gøym≠", 
NULL
, "binary", NULL, 1.0);

94 
	`HTBöd_add
("pgp", "≠∂iˇti⁄/pgp-í¸y±ed", 
NULL
, "binary", NULL, 1.0);

95 
	`HTBöd_add
("≤g", "image/≤g", 
NULL
, "binary", NULL, 1.0);

96 
	`HTBöd_add
("≤m", "image/x-p‹èbÀ-™ym≠", 
NULL
, "binary", NULL, 1.0);

97 
	`HTBöd_add
("µt", "≠∂iˇti⁄/vnd.ms-powîpoöt",
NULL
, "binary", NULL, 0.5);

98 
	`HTBöd_add
("ps", "≠∂iˇti⁄/po°s¸ùt", 
NULL
, "8bit", NULL, 0.8);

99 
	`HTBöd_add
("qt", "video/quicktime", 
NULL
, "binary", NULL, 1.0);

100 
	`HTBöd_add
("øs", "image/cmu-ø°î", 
NULL
, "binary", NULL, 1.0);

101 
	`HTBöd_add
("rdf", "ãxt/rdf", 
NULL
, "binary", NULL, 1.0);

102 
	`HTBöd_add
("rgb", "image/x-rgb", 
NULL
, "binary", NULL, 1.0);

103 
	`HTBöd_add
("roff", "≠∂iˇti⁄/x-åoff", 
NULL
, "7bit", NULL, 0.5);

104 
	`HTBöd_add
("πf", "ãxt/πf", 
NULL
, "7bit", NULL, 1.0);

105 
	`HTBöd_add
("πx", "ãxt/richãxt", 
NULL
, "7bit", NULL, 1.0);

106 
	`HTBöd_add
("sh", "≠∂iˇti⁄/x-sh", 
NULL
, "7bit", NULL, 0.5);

107 
	`HTBöd_add
("sig", "≠∂iˇti⁄/pgp-sig«tuª", 
NULL
, "binary", NULL, 1.0);

108 
	`HTBöd_add
("sh¨", "≠∂iˇti⁄/x-sh¨", 
NULL
, "8bit", NULL, 1.0);

109 
	`HTBöd_add
("¢d", "audio/basic", 
NULL
, "binary", NULL, 1.0);

110 
	`HTBöd_add
("§c", "≠∂iˇti⁄/x-wais-sour˚", 
NULL
, "7bit", NULL, 1.0);

111 
	`HTBöd_add
("sv4˝io","≠∂iˇti⁄/x-sv4˝io", 
NULL
, "binary", NULL, 1.0);

112 
	`HTBöd_add
("sv4¸c","≠∂iˇti⁄/x-sv4¸c", 
NULL
, "binary", NULL, 1.0);

113 
	`HTBöd_add
("t", "≠∂iˇti⁄/x-åoff", 
NULL
, "7bit", NULL, 0.5);

114 
	`HTBöd_add
("èr", "≠∂iˇti⁄/èr", 
NULL
, "binary", NULL, 1.0);

115 
	`HTBöd_add
("èr", "≠∂iˇti⁄/x-èr", 
NULL
, "binary", NULL, 1.0);

116 
	`HTBöd_add
("t˛", "≠∂iˇti⁄/x-t˛", 
NULL
, "7bit", NULL, 0.5);

117 
	`HTBöd_add
("ãx", "ãxt/ãx", 
NULL
, "8bit", NULL, 1.0);

118 
	`HTBöd_add
("ãxi", "≠∂iˇti⁄/x-ãxöfo", 
NULL
, "7bit", NULL, 1.0);

119 
	`HTBöd_add
("tif", "image/tiff", 
NULL
, "binary", NULL, 1.0);

120 
	`HTBöd_add
("tiff", "image/tiff", 
NULL
, "binary", NULL, 1.0);

121 
	`HTBöd_add
("å", "≠∂iˇti⁄/x-åoff", 
NULL
, "7bit", NULL, 0.5);

122 
	`HTBöd_add
("tsv", "ãxt/èb-£∑øãd-vÆues", 
NULL
, "7bit", NULL, 1.0);

123 
	`HTBöd_add
("txt", "ãxt/∂aö", 
NULL
, "7bit", NULL, 0.5);

124 
	`HTBöd_add
("u°¨", "≠∂iˇti⁄/x-u°¨", 
NULL
, "binary", NULL, 1.0);

125 
	`HTBöd_add
("wav", "audio/x-wav", 
NULL
, "binary", NULL, 1.0);

126 
	`HTBöd_add
("xbm", "image/x-xbôm≠", 
NULL
, "binary", NULL, 1.0);

127 
	`HTBöd_add
("xls", "≠∂iˇti⁄/vnd.ms-ex˚l", 
NULL
, "binary", NULL, 0.5);

128 
	`HTBöd_add
("xml", "≠∂iˇti⁄/xml", 
NULL
, "binary", NULL, 1.0);

129 
	`HTBöd_add
("xpm", "image/x-xpixm≠", 
NULL
, "binary", NULL, 1.0);

130 
	`HTBöd_add
("xwd", "image/x-xwödowdump", 
NULL
, "binary", NULL, 1.0);

132 
	`HTBöd_add
("zù", "≠∂iˇti⁄/zù", 
NULL
, "binary", NULL, 1.0);

133 
	`HTBöd_add
("Z", 
NULL
, "compress", "binary", NULL, 1.0);

134 
	`HTBöd_add
("gz", 
NULL
, "gzip", "binary", NULL, 1.0);

136 
	`HTBöd_add
("*.*", "www/unknown", 
NULL
, "binary", NULL, 0.1);

137 
	`HTBöd_add
("*", "www/unknown", 
NULL
, "7bit", NULL, 0.5);

138 
	}
}

	@Library/src/HTBInit.h

37 #i‚de‡
HTBINIT_H


38 
	#HTBINIT_H


	)

50 
	~"WWWC‹e.h
"

52 
HTFûeInô
 ();

	@Library/src/HTBTree.c

16 
	~"wwwsys.h
"

17 
	~"HTUtûs.h
"

18 
	~"HTBTªe.h
"

20 
	#MAXIMUM
(
a
,
b
Ë(◊)>(b)?◊):(b))

	)

22 
	s_HTBTªe_ñemít
 {

23 *
	mobje˘
;

24 
_HTBTªe_ñemít
 *
	mup
;

25 
_HTBTªe_ñemít
 *
	mÀ·
;

26 
	mÀ·_dïth
;

27 
_HTBTªe_ñemít
 *
	mright
;

28 
	mright_dïth
;

31 
	s_HTBTªe
 {

32 
HTCom∑ªr
 * 
	mcom∑ª
;

33 
_HTBTªe_ñemít
 * 
	mt›
;

36 
PUBLIC
 * 
	$HTBTªe_obje˘
 (
HTBTEÀmít
 * 
ñemít
)

38  
ñemít
 ?ÉÀmít->
obje˘
 : 
NULL
;

39 
	}
}

41 
PUBLIC
 
HTBTªe
 * 
	$HTBTªe_√w
 (
HTCom∑ªr
 * 
comp
)

47 
HTBTªe
 * 
åì
;

48 i‡((
åì
 = (
HTBTªe
 *Ë
	`HT_CALLOC
(1, (HTBTªe))Ë=
NULL
)

49 
	`HT_OUTOFMEM
("HTBTree_new");

50 
åì
->
com∑ª
 = 
comp
;

51 
åì
->
t›
 = 
NULL
;

52  
åì
;

53 
	}
}

58 
PRIVATE
 
	$HTBTEÀmít_‰ì
 (
HTBTEÀmít
* 
ñemít
)

63 i‡(
ñemít
) {

64 i‡(
ñemít
->
À·
 !
NULL
Ë
	`HTBTEÀmít_‰ì
(element->left);

65 i‡(
ñemít
->
right
 !
NULL
Ë
	`HTBTEÀmít_‰ì
(element->right);

66 
	`HT_FREE
(
ñemít
);

68 
	}
}

70 
PUBLIC
 
	$HTBTªe_‰ì
 (
HTBTªe
* 
åì
)

75 
	`HTBTEÀmít_‰ì
(
åì
->
t›
);

76 
	`HT_FREE
(
åì
);

77 
	}
}

82 
PRIVATE
 
	$HTBTEÀmítAndObje˘_‰ì
 (
HTBTEÀmít
* 
ñemít
)

87 i‡(
ñemít
) {

88 i‡(
ñemít
->
À·
 !
NULL
Ë
	`HTBTEÀmítAndObje˘_‰ì
(element->left);

89 i‡(
ñemít
->
right
 !
NULL
)

90 
	`HTBTEÀmítAndObje˘_‰ì
(
ñemít
->
right
);

91 
	`HT_FREE
(
ñemít
->
obje˘
);

92 
	`HT_FREE
(
ñemít
);

94 
	}
}

96 
PUBLIC
 
	$HTBTªeAndObje˘_‰ì
 (
HTBTªe
* 
åì
)

101 
	`HTBTEÀmítAndObje˘_‰ì
(
åì
->
t›
);

102 
	`HT_FREE
(
åì
);

103 
	}
}

111 
PUBLIC
 
	$HTBTªe_add
 (
HTBTªe
 * 
åì
, * 
obje˘
)

113 
HTBTEÀmít
 * 
Áthî_of_ñemít
;

114 
HTBTEÀmít
 * 
added_ñemít
;

115 
HTBTEÀmít
 * 
f‹eÁthî_of_ñemít
;

116 
HTBTEÀmít
 * 
Áthî_of_f‹eÁthî
;

117 
BOOL
 
Áthî_found
,
t›_found
;

118 
dïth
,
dïth2
,
c‹ª˘i⁄s
;

145 i‡(
åì
->
t›
 =
NULL
)

147 i‡((
åì
->
t›
 = (
HTBTEÀmít
 *Ë
	`HT_MALLOC
((HTBTEÀmít))Ë=
NULL
)

148 
	`HT_OUTOFMEM
("HTBTree_add");

149 
åì
->
t›
->
up
 = 
NULL
;

150 
åì
->
t›
->
obje˘
 = object;

151 
åì
->
t›
->
À·
 = 
NULL
;

152 
åì
->
t›
->
À·_dïth
 = 0;

153 
åì
->
t›
->
right
 = 
NULL
;

154 
åì
->
t›
->
right_dïth
 = 0;

158 
Áthî_found
 = 
YES
;

159 
Áthî_of_ñemít
 = 
åì
->
t›
;

160 
added_ñemít
 = 
NULL
;

161 
Áthî_of_f‹eÁthî
 = 
NULL
;

162 
f‹eÁthî_of_ñemít
 = 
NULL
;

163 
Áthî_found
)

165 i‡(
åì
->
	`com∑ª
(
obje˘
,
Áthî_of_ñemít
->object)<0)

167 i‡(
Áthî_of_ñemít
->
À·
 !
NULL
)

168 
Áthî_of_ñemít
 = f©hî_of_ñemít->
À·
;

171 
Áthî_found
 = 
NO
;

172 i‡((
Áthî_of_ñemít
->
À·
 = (
HTBTEÀmít
 *Ë
	`HT_MALLOC
((HTBTEÀmít))Ë=
NULL
)

173 
	`HT_OUTOFMEM
("HTBTree_add");

174 
added_ñemít
 = 
Áthî_of_ñemít
->
À·
;

175 
added_ñemít
->
up
 = 
Áthî_of_ñemít
;

176 
added_ñemít
->
obje˘
 = object;

177 
added_ñemít
->
À·
 = 
NULL
;

178 
added_ñemít
->
À·_dïth
 = 0;

179 
added_ñemít
->
right
 = 
NULL
;

180 
added_ñemít
->
right_dïth
 = 0;

183 i‡(
åì
->
	`com∑ª
(
obje˘
,
Áthî_of_ñemít
->object)>=0)

185 i‡(
Áthî_of_ñemít
->
right
 !
NULL
)

186 
Áthî_of_ñemít
 = f©hî_of_ñemít->
right
;

189 
Áthî_found
 = 
NO
;

190 i‡((
Áthî_of_ñemít
->
right
 = (
HTBTEÀmít
 *Ë
	`HT_MALLOC
((HTBTEÀmít))Ë=
NULL
)

191 
	`HT_OUTOFMEM
("father_of_element->right ");

192 
added_ñemít
 = 
Áthî_of_ñemít
->
right
;

193 
added_ñemít
->
up
 = 
Áthî_of_ñemít
;

194 
added_ñemít
->
obje˘
 = object;

195 
added_ñemít
->
À·
 = 
NULL
;

196 
added_ñemít
->
À·_dïth
 = 0;

197 
added_ñemít
->
right
 = 
NULL
;

198 
added_ñemít
->
right_dïth
 = 0;

205 
Áthî_of_f‹eÁthî
 = 
Áthî_of_ñemít
;

206 
f‹eÁthî_of_ñemít
 = 
added_ñemít
;

209 i‡(
Áthî_of_f‹eÁthî
->
À·
 =
f‹eÁthî_of_ñemít
)

211 
dïth
 = 
Áthî_of_f‹eÁthî
->
À·_dïth
;

212 
Áthî_of_f‹eÁthî
->
À·_dïth
 = 1

213 + 
	`MAXIMUM
(
f‹eÁthî_of_ñemít
->
right_dïth
,

214 
f‹eÁthî_of_ñemít
->
À·_dïth
);

215 
dïth2
 = 
Áthî_of_f‹eÁthî
->
À·_dïth
;

219 
dïth
 = 
Áthî_of_f‹eÁthî
->
right_dïth
;

220 
Áthî_of_f‹eÁthî
->
right_dïth
 = 1

221 + 
	`MAXIMUM
(
f‹eÁthî_of_ñemít
->
right_dïth
,

222 
f‹eÁthî_of_ñemít
->
À·_dïth
);

223 
dïth2
 = 
Áthî_of_f‹eÁthî
->
right_dïth
;

225 
f‹eÁthî_of_ñemít
 = 
Áthî_of_f‹eÁthî
;

226 
Áthî_of_f‹eÁthî
 = f©hî_of_f‹eÁthî->
up
;

227 } (
dïth
 !
dïth2
Ë&& (
Áthî_of_f‹eÁthî
 !
NULL
));

235 
t›_found
 = 
YES
;

236 
c‹ª˘i⁄s
 = 0;

237 (
t›_found
Ë&& (
c‹ª˘i⁄s
 < 7))

239 i‡((
	`abs
(
Áthî_of_ñemít
->
À·_dïth


240 - 
Áthî_of_ñemít
->
right_dïth
)) < 2)

242 i‡(
Áthî_of_ñemít
->
up
 !
NULL
)

243 
Áthî_of_ñemít
 = f©hî_of_ñemít->
up
;

244 
t›_found
 = 
NO
;

249 
c‹ª˘i⁄s
 = corrections + 1;

263 i‡((
Áthî_of_ñemít
->
À·
 =
NULL
)

264 && (
Áthî_of_ñemít
->
right
->righà=
NULL
)

265 && (
Áthî_of_ñemít
->
right
->
À·
->À· =
NULL
)

266 && (
Áthî_of_ñemít
->
right
->
À·
->righà=
NULL
))

267 
c‹ª˘i⁄s
 = 7;

269 i‡((
Áthî_of_ñemít
->
right
 =
NULL
)

270 && (
Áthî_of_ñemít
->
À·
->À· =
NULL
)

271 && (
Áthî_of_ñemít
->
À·
->
right
->righà=
NULL
)

272 && (
Áthî_of_ñemít
->
À·
->
right
->À· =
NULL
))

273 
c‹ª˘i⁄s
 = 7;

276 i‡(
Áthî_of_ñemít
->
À·_dïth
 > f©hî_of_ñemít->
right_dïth
)

278 
added_ñemít
 = 
Áthî_of_ñemít
->
À·
;

279 
Áthî_of_ñemít
->
À·_dïth
 = 
added_ñemít
->
right_dïth
;

280 
added_ñemít
->
right_dïth
 = 1

281 + 
	`MAXIMUM
(
Áthî_of_ñemít
->
right_dïth
,

282 
Áthî_of_ñemít
->
À·_dïth
);

283 i‡(
Áthî_of_ñemít
->
up
 !
NULL
)

286 
BOOL
 
fú°_time
;

288 
Áthî_of_f‹eÁthî
 = 
Áthî_of_ñemít
->
up
;

289 
f‹eÁthî_of_ñemít
 = 
added_ñemít
;

290 
fú°_time
 = 
YES
;

293 i‡(
Áthî_of_f‹eÁthî
->
À·


294 =
f‹eÁthî_of_ñemít
->
up
)

296 
dïth
 = 
Áthî_of_f‹eÁthî
->
À·_dïth
;

297 i‡(
fú°_time
)

299 
Áthî_of_f‹eÁthî
->
À·_dïth
 = 1

300 + 
	`MAXIMUM
(
f‹eÁthî_of_ñemít
->
À·_dïth
,

301 
f‹eÁthî_of_ñemít
->
right_dïth
);

302 
fú°_time
 = 
NO
;

305 
Áthî_of_f‹eÁthî
->
À·_dïth
 = 1

306 + 
	`MAXIMUM
(
f‹eÁthî_of_ñemít
->
up
->
À·_dïth
,

307 
f‹eÁthî_of_ñemít
->
up
->
right_dïth
);

309 
dïth2
 = 
Áthî_of_f‹eÁthî
->
À·_dïth
;

313 
dïth
 = 
Áthî_of_f‹eÁthî
->
right_dïth
;

314 i‡(
fú°_time
)

316 
Áthî_of_f‹eÁthî
->
right_dïth
 = 1

317 + 
	`MAXIMUM
(
f‹eÁthî_of_ñemít
->
À·_dïth
,

318 
f‹eÁthî_of_ñemít
->
right_dïth
);

319 
fú°_time
 = 
NO
;

322 
Áthî_of_f‹eÁthî
->
right_dïth
 = 1

323 + 
	`MAXIMUM
(
f‹eÁthî_of_ñemít
->
up
->
À·_dïth
,

324 
f‹eÁthî_of_ñemít
->
up
->
right_dïth
);

325 
dïth2
 = 
Áthî_of_f‹eÁthî
->
right_dïth
;

327 
f‹eÁthî_of_ñemít
 = f‹eÁthî_of_ñemít->
up
;

328 
Áthî_of_f‹eÁthî
 = f©hî_of_f‹eÁthî->
up
;

329 } (
dïth
 !
dïth2
) &&

330 (
Áthî_of_f‹eÁthî
 !
NULL
));

331 
Áthî_of_f‹eÁthî
 = 
Áthî_of_ñemít
->
up
;

332 i‡(
Áthî_of_f‹eÁthî
->
À·
 =
Áthî_of_ñemít
)

343 
Áthî_of_f‹eÁthî
->
À·
 = 
added_ñemít
;

344 
Áthî_of_ñemít
->
À·
 = 
added_ñemít
->
right
;

345 
added_ñemít
->
right
 = 
Áthî_of_ñemít
;

347 i‡(
Áthî_of_f‹eÁthî
->
right
 =
Áthî_of_ñemít
)

358 
Áthî_of_f‹eÁthî
->
right
 = 
added_ñemít
;

359 
Áthî_of_ñemít
->
À·
 = 
added_ñemít
->
right
;

360 
added_ñemít
->
right
 = 
Áthî_of_ñemít
;

362 
added_ñemít
->
up
 = 
Áthî_of_f‹eÁthî
;

374 
added_ñemít
->
up
 = 
NULL
;

375 
Áthî_of_ñemít
->
À·
 = 
added_ñemít
->
right
;

376 
added_ñemít
->
right
 = 
Áthî_of_ñemít
;

378 
Áthî_of_ñemít
->
up
 = 
added_ñemít
;

379 i‡(
Áthî_of_ñemít
->
À·
 !
NULL
)

380 
Áthî_of_ñemít
->
À·
->
up
 = father_of_element;

384 
added_ñemít
 = 
Áthî_of_ñemít
->
right
;

385 
Áthî_of_ñemít
->
right_dïth
 = 
added_ñemít
->
À·_dïth
;

386 
added_ñemít
->
À·_dïth
 = 1 +

387 
	`MAXIMUM
(
Áthî_of_ñemít
->
right_dïth
,

388 
Áthî_of_ñemít
->
À·_dïth
);

389 i‡(
Áthî_of_ñemít
->
up
 !
NULL
)

392 
BOOL
 
fú°_time
;

394 
Áthî_of_f‹eÁthî
 = 
Áthî_of_ñemít
->
up
;

395 
f‹eÁthî_of_ñemít
 = 
added_ñemít
;

396 
fú°_time
 = 
YES
;

399 i‡(
Áthî_of_f‹eÁthî
->
À·


400 =
f‹eÁthî_of_ñemít
->
up
)

402 
dïth
 = 
Áthî_of_f‹eÁthî
->
À·_dïth
;

403 i‡(
fú°_time
)

405 
Áthî_of_f‹eÁthî
->
À·_dïth
 = 1

406 + 
	`MAXIMUM
(
f‹eÁthî_of_ñemít
->
À·_dïth
,

407 
f‹eÁthî_of_ñemít
->
right_dïth
);

408 
fú°_time
 = 
NO
;

411 
Áthî_of_f‹eÁthî
->
À·_dïth
 = 1

412 + 
	`MAXIMUM
(
f‹eÁthî_of_ñemít
->
up
->
À·_dïth
,

413 
f‹eÁthî_of_ñemít
->
up
->
right_dïth
);

414 
dïth2
 = 
Áthî_of_f‹eÁthî
->
À·_dïth
;

418 
dïth
 = 
Áthî_of_f‹eÁthî
->
right_dïth
;

419 i‡(
fú°_time
)

421 
Áthî_of_f‹eÁthî
->
right_dïth
 = 1

422 + 
	`MAXIMUM
(
f‹eÁthî_of_ñemít
->
À·_dïth
,

423 
f‹eÁthî_of_ñemít
->
right_dïth
);

424 
fú°_time
 = 
NO
;

427 
Áthî_of_f‹eÁthî
->
right_dïth
 = 1

428 + 
	`MAXIMUM
(
f‹eÁthî_of_ñemít
->
up
->
À·_dïth
,

429 
f‹eÁthî_of_ñemít
->
up
->
right_dïth
);

430 
dïth2
 = 
Áthî_of_f‹eÁthî
->
right_dïth
;

432 
Áthî_of_f‹eÁthî
 = f©hî_of_f‹eÁthî->
up
;

433 
f‹eÁthî_of_ñemít
 = f‹eÁthî_of_ñemít->
up
;

434 } (
dïth
 !
dïth2
) &&

435 (
Áthî_of_f‹eÁthî
 !
NULL
));

436 
Áthî_of_f‹eÁthî
 = 
Áthî_of_ñemít
->
up
;

437 i‡(
Áthî_of_f‹eÁthî
->
À·
 =
Áthî_of_ñemít
)

448 
Áthî_of_f‹eÁthî
->
À·
 = 
added_ñemít
;

449 
Áthî_of_ñemít
->
right
 = 
added_ñemít
->
À·
;

450 
added_ñemít
->
À·
 = 
Áthî_of_ñemít
;

452 i‡(
Áthî_of_f‹eÁthî
->
right
 =
Áthî_of_ñemít
)

463 
Áthî_of_f‹eÁthî
->
right
 = 
added_ñemít
;

464 
Áthî_of_ñemít
->
right
 = 
added_ñemít
->
À·
;

465 
added_ñemít
->
À·
 = 
Áthî_of_ñemít
;

467 
added_ñemít
->
up
 = 
Áthî_of_f‹eÁthî
;

479 
added_ñemít
->
up
 = 
NULL
;

480 
Áthî_of_ñemít
->
right
 = 
added_ñemít
->
À·
;

481 
added_ñemít
->
À·
 = 
Áthî_of_ñemít
;

483 
Áthî_of_ñemít
->
up
 = 
added_ñemít
;

484 i‡(
Áthî_of_ñemít
->
right
 !
NULL
)

485 
Áthî_of_ñemít
->
right
->
up
 = father_of_element;

489 
Áthî_of_ñemít
->
up
 !
NULL
)

491 
Áthî_of_ñemít
 = f©hî_of_ñemít->
up
;

493 
åì
->
t›
 = 
Áthî_of_ñemít
;

495 
	}
}

502 
PUBLIC
 
HTBTEÀmít
 * 
	$HTBTªe_√xt
(
HTBTªe
 * 
åì
, 
HTBTEÀmít
 * 
ñemít
)

504 
HTBTEÀmít
 * 
Áthî_of_ñemít
;

505 
HTBTEÀmít
 * 
Áthî_of_f‹eÁthî
;

506 i‡(!
ñemít
) {

507 
Áthî_of_ñemít
 = 
åì
->
t›
;

508 i‡(
Áthî_of_ñemít
 !
NULL
)

509 
Áthî_of_ñemít
->
À·
 !
NULL
)

510 
Áthî_of_ñemít
 = f©hî_of_ñemít->
À·
;

514 
Áthî_of_ñemít
 = 
ñemít
;

515 i‡(
Áthî_of_ñemít
->
right
 !
NULL
)

517 
Áthî_of_ñemít
 = f©hî_of_ñemít->
right
;

518 
Áthî_of_ñemít
->
À·
 !
NULL
)

519 
Áthî_of_ñemít
 = f©hî_of_ñemít->
À·
;

523 
Áthî_of_f‹eÁthî
 = 
Áthî_of_ñemít
->
up
;

524 
Áthî_of_f‹eÁthî
 &&

525 (
Áthî_of_f‹eÁthî
->
right
 =
Áthî_of_ñemít
))

527 
Áthî_of_ñemít
 = 
Áthî_of_f‹eÁthî
;

528 
Áthî_of_f‹eÁthî
 = 
Áthî_of_ñemít
->
up
;

530 
Áthî_of_ñemít
 = 
Áthî_of_f‹eÁthî
;

537 i‡(
Áthî_of_ñemít
 !
NULL
)

539 
	`HTTø˚
("\nObje˘ = %s\t",(*)
Áthî_of_ñemít
->
obje˘
);

540 i‡(
Áthî_of_ñemít
->
up
 !
NULL
)

541 
	`HTTø˚
("Objet duÖere = %s\n",

542 (*)
Áthî_of_ñemít
->
up
->
obje˘
);

543 
	`HTTø˚
("Pas de Pere\n");

544 i‡(
Áthî_of_ñemít
->
À·
 !
NULL
)

545 
	`HTTø˚
("Objet du fils gauche = %s\t",

546 (*)
Áthî_of_ñemít
->
À·
->
obje˘
);

547 
	`HTTø˚
("Pas de fils gauche\t");

548 i‡(
Áthî_of_ñemít
->
right
 !
NULL
)

549 
	`HTTø˚
("Objet du fils droit = %s\n",

550 (*)
Áthî_of_ñemít
->
right
->
obje˘
);

551 
	`HTTø˚
("Pas de fils droit\n");

552 
	`HTTø˚
("Prof⁄deu∏gauchê%i\t",
Áthî_of_ñemít
->
À·_dïth
);

553 
	`HTTø˚
("Prof⁄deu∏droôê%i\n",
Áthî_of_ñemít
->
right_dïth
);

554 
	`HTTø˚
(" **************\n");

557  
Áthî_of_ñemít
;

558 
	}
}

562 
	$maö
 ()

567 
HTBTªe
 * 
åì
;

568 
HTBTEÀmít
 * 
√xt_ñemít
;

570 
åì
 = 
	`HTBTªe_√w
((
HTCom∑ªr
)
°rˇ£comp
);

571 
	`HTBTªe_add
(
åì
,"hypertext");

572 
	`HTBTªe_add
(
åì
,"Addressing");

573 
	`HTBTªe_add
(
åì
,"X11");

574 
	`HTBTªe_add
(
åì
,"Tools");

575 
	`HTBTªe_add
(
åì
,"Proposal.wn");

576 
	`HTBTªe_add
(
åì
,"Protocols");

577 
	`HTBTªe_add
(
åì
,"NeXT");

578 
	`HTBTªe_add
(
åì
,"Daemon");

579 
	`HTBTªe_add
(
åì
,"Test");

580 
	`HTBTªe_add
(
åì
,"Administration");

581 
	`HTBTªe_add
(
åì
,"LineMode");

582 
	`HTBTªe_add
(
åì
,"DesignIssues");

583 
	`HTBTªe_add
(
åì
,"MarkUp");

584 
	`HTBTªe_add
(
åì
,"Macintosh");

585 
	`HTBTªe_add
(
åì
,"Proposal.rtf.wn");

586 
	`HTBTªe_add
(
åì
,"FIND");

587 
	`HTBTªe_add
(
åì
,"Paper");

588 
	`HTBTªe_add
(
åì
,"Tcl");

589 
	`HTBTªe_add
(
åì
,"Talks");

590 
	`HTBTªe_add
(
åì
,"Architecture");

591 
	`HTBTªe_add
(
åì
,"VMSHelp");

592 
	`HTBTªe_add
(
åì
,"Provider");

593 
	`HTBTªe_add
(
åì
,"Archive");

594 
	`HTBTªe_add
(
åì
,"SLAC");

595 
	`HTBTªe_add
(
åì
,"Project");

596 
	`HTBTªe_add
(
åì
,"News");

597 
	`HTBTªe_add
(
åì
,"Viola");

598 
	`HTBTªe_add
(
åì
,"Users");

599 
	`HTBTªe_add
(
åì
,"FAQ");

600 
	`HTBTªe_add
(
åì
,"WorkingNotes");

601 
	`HTBTªe_add
(
åì
,"Windows");

602 
	`HTBTªe_add
(
åì
,"FineWWW");

603 
	`HTBTªe_add
(
åì
,"Frame");

604 
	`HTBTªe_add
(
åì
,"XMosaic");

605 
	`HTBTªe_add
(
åì
,"People");

606 
	`HTBTªe_add
(
åì
,"All");

607 
	`HTBTªe_add
(
åì
,"Curses");

608 
	`HTBTªe_add
(
åì
,"Erwise");

609 
	`HTBTªe_add
(
åì
,"Carl");

610 
	`HTBTªe_add
(
åì
,"MidasWWW");

611 
	`HTBTªe_add
(
åì
,"XPM");

612 
	`HTBTªe_add
(
åì
,"MailRobot");

613 
	`HTBTªe_add
(
åì
,"Illustrations");

614 
	`HTBTªe_add
(
åì
,"VMClient");

615 
	`HTBTªe_add
(
åì
,"XPA");

616 
	`HTBTªe_add
(
åì
,"Clients.html");

617 
	`HTBTªe_add
(
åì
,"Library");

618 
	`HTBTªe_add
(
åì
,"CERNLIB_Distribution");

619 
	`HTBTªe_add
(
åì
,"libHTML");

620 
	`HTBTªe_add
(
åì
,"WindowsPC");

621 
	`HTBTªe_add
(
åì
,"tkWWW");

622 
	`HTBTªe_add
(
åì
,"tk2.3");

623 
	`HTBTªe_add
(
åì
,"CVS-RCS");

624 
	`HTBTªe_add
(
åì
,"DecnetSockets");

625 
	`HTBTªe_add
(
åì
,"SGMLStream");

626 
	`HTBTªe_add
(
åì
,"NextStep");

627 
	`HTBTªe_add
(
åì
,"CVSRepository_old");

628 
	`HTBTªe_add
(
åì
,"ArthurSecret");

629 
	`HTBTªe_add
(
åì
,"CVSROOT");

630 
	`HTBTªe_add
(
åì
,"HytelnetGate");

631 
	`HTBTªe_add
(
åì
,"cern.www.new.src");

632 
	`HTBTªe_add
(
åì
,"Conditions");

633 
	`HTBTªe_add
(
åì
,"HTMLGate");

634 
	`HTBTªe_add
(
åì
,"Makefile");

635 
	`HTBTªe_add
(
åì
,"Newsgroups.html");

636 
	`HTBTªe_add
(
åì
,"People.html");

637 
	`HTBTªe_add
(
åì
,"Bugs.html");

638 
	`HTBTªe_add
(
åì
,"Summary.html");

639 
	`HTBTªe_add
(
åì
,"zDesignIssues.wn");

640 
	`HTBTªe_add
(
åì
,"HT.draw");

641 
	`HTBTªe_add
(
åì
,"HTandCERN.wn");

642 
	`HTBTªe_add
(
åì
,"Ideas.wn");

643 
	`HTBTªe_add
(
åì
,"MarkUp.wn");

644 
	`HTBTªe_add
(
åì
,"Proposal.html");

645 
	`HTBTªe_add
(
åì
,"SearchPanel.draw");

646 
	`HTBTªe_add
(
åì
,"Comments.wn");

647 
	`HTBTªe_add
(
åì
,"Xanadu.html");

648 
	`HTBTªe_add
(
åì
,"Storinglinks.html");

649 
	`HTBTªe_add
(
åì
,"TheW3Book.html");

650 
	`HTBTªe_add
(
åì
,"Talk_Feb-91.html");

651 
	`HTBTªe_add
(
åì
,"JFosterEntry.txt");

652 
	`HTBTªe_add
(
åì
,"Summary.txt");

653 
	`HTBTªe_add
(
åì
,"Bibliography.html");

654 
	`HTBTªe_add
(
åì
,"HTandCern.txt");

655 
	`HTBTªe_add
(
åì
,"Talk.draw");

656 
	`HTBTªe_add
(
åì
,"zDesignNotes.html");

657 
	`HTBTªe_add
(
åì
,"Link.html");

658 
	`HTBTªe_add
(
åì
,"Status.html");

659 
	`HTBTªe_add
(
åì
,"http.txt");

660 
	`HTBTªe_add
(
åì
,"People.html~");

661 
	`HTBTªe_add
(
åì
,"TAGS");

662 
	`HTBTªe_add
(
åì
,"summary.txt");

663 
	`HTBTªe_add
(
åì
,"Technical.html");

664 
	`HTBTªe_add
(
åì
,"Terms.html");

665 
	`HTBTªe_add
(
åì
,"JANETAccess.html");

666 
	`HTBTªe_add
(
åì
,"People.txt");

667 
	`HTBTªe_add
(
åì
,"README.txt");

668 
	`HTBTªe_add
(
åì
,"CodingStandards.html");

669 
	`HTBTªe_add
(
åì
,"Copyright.txt");

670 
	`HTBTªe_add
(
åì
,"Status_old.html");

671 
	`HTBTªe_add
(
åì
,"patches~");

672 
	`HTBTªe_add
(
åì
,"RelatedProducts.html");

673 
	`HTBTªe_add
(
åì
,"Implementation");

674 
	`HTBTªe_add
(
åì
,"History.html");

675 
	`HTBTªe_add
(
åì
,"Makefile.bak");

676 
	`HTBTªe_add
(
åì
,"Makefile.old");

677 
	`HTBTªe_add
(
åì
,"Policy.html");

678 
	`HTBTªe_add
(
åì
,"WhatIs.html");

679 
	`HTBTªe_add
(
åì
,"TheProject.html");

680 
	`HTBTªe_add
(
åì
,"Notation.html");

681 
	`HTBTªe_add
(
åì
,"Helping.html");

682 
	`HTBTªe_add
(
åì
,"Cyber-WWW.sit.Hqx");

683 
	`HTBTªe_add
(
åì
,"Glossary.html");

684 
	`HTBTªe_add
(
åì
,"maketags.html");

685 
	`HTBTªe_add
(
åì
,"IntroCS.html");

686 
	`HTBTªe_add
(
åì
,"Contrib");

687 
	`HTBTªe_add
(
åì
,"Help.html");

688 
	`HTBTªe_add
(
åì
,"CodeManagExec");

689 
	`HTBTªe_add
(
åì
,"HT-0.1draz");

690 
	`HTBTªe_add
(
åì
,"Cello");

691 
	`HTBTªe_add
(
åì
,"TOPUB");

692 
	`HTBTªe_add
(
åì
,"BUILD");

693 
	`HTBTªe_add
(
åì
,"BUILDALL");

694 
	`HTBTªe_add
(
åì
,"Lynx");

695 
	`HTBTªe_add
(
åì
,"ArthurLibrary");

696 
	`HTBTªe_add
(
åì
,"RashtyClient");

697 
	`HTBTªe_add
(
åì
,"#History.html#");

698 
	`HTBTªe_add
(
åì
,"PerlServers");

699 
	`HTBTªe_add
(
åì
,"modules");

700 
	`HTBTªe_add
(
åì
,"NCSA_httpd");

701 
	`HTBTªe_add
(
åì
,"MAIL2HTML");

702 
	`HTBTªe_add
(
åì
,"core");

703 
	`HTBTªe_add
(
åì
,"EmacsWWW");

704 
	`HTTø˚
("\nTªeT›Obje˘=%s\n\n",
åì
->
t›
->
obje˘
);

705 
√xt_ñemít
 = 
	`HTBTªe_√xt
(
åì
,
NULL
);

706 
√xt_ñemít
 !
NULL
)

708 
	`HTTø˚
("Thê√xàñemíài†%s\n",
√xt_ñemít
->
obje˘
);

709 
√xt_ñemít
 = 
	`HTBTªe_√xt
(
åì
,next_element);

711 
	`HTBTªe_‰ì
 (
åì
);

712 
	}
}

	@Library/src/HTBTree.h

28 #i‚de‡
HTBTTEE_H


29 
	#HTBTREE_H


	)

31 
	~"HTAºay.h
"

37 
_HTBTªe
 
	tHTBTªe
;

39 
_HTBTªe_ñemít
 
	tHTBTEÀmít
;

50 
HTBTªe
 * 
HTBTªe_√w
 (
HTCom∑ªr
 * 
comp
);

58 
HTBTªe_‰ì
 (
HTBTªe
 * 
åì
);

66 
HTBTªeAndObje˘_‰ì
 (
HTBTªe
 * 
åì
);

74 
HTBTªe_add
 (
HTBTªe
* 
åì
, * 
obje˘
);

82 * 
HTBTªe_obje˘
 (
HTBTEÀmít
 * 
ñemít
);

96 
HTBTEÀmít
 * 
HTBTªe_√xt
 (
HTBTªe
 * 
åì
, HTBTEÀmíà* 
ñemít
);

	@Library/src/HTBind.c

35 
	~"wwwsys.h
"

36 
	~"WWWUtû.h
"

37 
	~"HTAnch‹.h
"

38 
	~"HTRe•⁄£.h
"

39 
	~"HTP¨£.h
"

40 
	~"HTBöd.h
"

42 
	s_HTBöd
 {

43 * 
	msuffix
;

44 
HTF‹m©
 
	mty≥
;

45 
HTEncodög
 
	mícodög
;

46 
HTEncodög
 
	må™s„r
;

47 
HTL™guage
 
	mœnguage
;

48 
	mquÆôy
;

49 } 
	tHTBöd
;

52 
PRIVATE
 
BOOL
 
	gHTCa£Sí
 = 
YES
;

53 
PRIVATE
 *
	gHTDñimôîs
 = 
NULL
;

55 
PRIVATE
 
HTLi°
 **
	gHTBödögs
 = 
NULL
;

57 
PRIVATE
 
HTBöd
 
	gno_suffix
 = { "*", 
NULL
, NULL, NULL, NULL, 0.5 };

58 
PRIVATE
 
HTBöd
 
	gunknown_suffix
 = { "*.*", 
NULL
, NULL, NULL, NULL, 0.5 };

65 
PUBLIC
 
BOOL
 
	$HTBöd_öô
 ()

67 i‡(!
HTBödögs
) {

68 i‡(!(
HTBödögs
 = (
HTLi°
 **Ë
	`HT_CALLOC
(
HT_L_HASH_SIZE
, (HTList *))))

69 
	`HT_OUTOFMEM
("HTBind_init");

71 
	`SåAŒocC›y
(
HTDñimôîs
, 
DEFAULT_SUFFIXES
);

72 
no_suffix
.
ty≥
 = 
WWW_UNKNOWN
;

73 
no_suffix
.
ícodög
 = 
WWW_CODING_BINARY
;

74 
unknown_suffix
.
ty≥
 = 
WWW_UNKNOWN
;

75 
unknown_suffix
.
ícodög
 = 
WWW_CODING_BINARY
;

76  
YES
;

77 
	}
}

85 
PUBLIC
 
BOOL
 
	$HTBöd_dñëeAŒ
 ()

87 
˙t
;

88 
HTLi°
 *
cur
;

89 i‡(!
HTBödögs
)

90  
NO
;

91 
˙t
=0; c¡<
HT_L_HASH_SIZE
; cnt++) {

92 i‡((
cur
 = 
HTBödögs
[
˙t
])) {

93 
HTBöd
 *
¥es
;

94 (
¥es
 = (
HTBöd
 *Ë
	`HTLi°_√xtObje˘
(
cur
)Ë!
NULL
) {

95 
	`HT_FREE
(
¥es
->
suffix
);

96 
	`HT_FREE
(
¥es
);

99 
	`HTLi°_dñëe
(
HTBödögs
[
˙t
]);

100 
HTBödögs
[
˙t
] = 
NULL
;

102 
	`HT_FREE
(
HTBödögs
);

103 
	`HT_FREE
(
HTDñimôîs
);

104  
YES
;

105 
	}
}

111 
PUBLIC
 
	$HTBöd_ˇ£Sísôive
 (
BOOL
 
£nsôive
)

113 
HTCa£Sí
 = 
£nsôive
;

114 
	}
}

120 
PUBLIC
 c⁄° *
	$HTBöd_dñimôîs
 ()

122  
HTDñimôîs
;

123 
	}
}

129 
PUBLIC
 
	$HTBöd_£tDñimôîs
 (c⁄° * 
√w_suffixes
)

131 i‡(
√w_suffixes
 && *new_suffixes)

132 
	`SåAŒocC›y
(
HTDñimôîs
, 
√w_suffixes
);

133 
	}
}

147 
PUBLIC
 
BOOL
 
	$HTBöd_addTy≥
 (c⁄° * 
suffix
,

148 c⁄° * 
ª¥e£¡©i⁄
,

149 
vÆue
)

151  
	`HTBöd_add
(
suffix
, 
ª¥e£¡©i⁄
, 
NULL
, NULL, NULL, 
vÆue
);

152 
	}
}

154 
PUBLIC
 
BOOL
 
	$HTBöd_addEncodög
 (c⁄° * 
suffix
,

155 c⁄° * 
ícodög
,

156 
vÆue
)

158  
	`HTBöd_add
(
suffix
, 
NULL
, 
ícodög
, NULL, NULL, 
vÆue
);

159 
	}
}

161 
PUBLIC
 
BOOL
 
	$HTBöd_addTøns„r
 (c⁄° * 
suffix
,

162 c⁄° * 
å™s„r
,

163 
vÆue
)

165  
	`HTBöd_add
(
suffix
, 
NULL
, NULL, 
å™s„r
, NULL, 
vÆue
);

166 
	}
}

168 
PUBLIC
 
BOOL
 
	$HTBöd_addL™guage
 (c⁄° * 
suffix
,

169 c⁄° * 
œnguage
,

170 
vÆue
)

172  
	`HTBöd_add
(
suffix
, 
NULL
, NULL, NULL, 
œnguage
, 
vÆue
);

173 
	}
}

175 
PUBLIC
 
BOOL
 
	$HTBöd_add
 (c⁄° * 
suffix
,

176 c⁄° * 
ª¥e£¡©i⁄
,

177 c⁄° * 
ícodög
,

178 c⁄° * 
å™s„r
,

179 c⁄° * 
œnguage
,

180 
vÆue
)

182 
HTBöd
 * 
suff
;

183 i‡(!
suffix
)

184  
NO
;

185 i‡(!
	`°rcmp
(
suffix
, "*"))

186 
suff
 = &
no_suffix
;

187 i‡(!
	`°rcmp
(
suffix
, "*.*"))

188 
suff
 = &
unknown_suffix
;

190 
HTLi°
 * 
suÊi°
;

191 
hash
;

192 c⁄° * 
p
;

195 
p
=
suffix
, 
hash
=0; *p;Ö++) {

196 
hash
 = (hash * 3 + 
	`TOLOWER
(*
p
)Ë% 
HT_L_HASH_SIZE
;

199 i‡(!
HTBödögs
Ë
	`HTBöd_öô
();

200 i‡(!
HTBödögs
[
hash
]ËHTBödögs[hash] = 
	`HTLi°_√w
();

201 
suÊi°
 = 
HTBödögs
[
hash
];

205 
HTLi°
 *
cur
 = 
suÊi°
;

206 (
suff
 = (
HTBöd
 *Ë
	`HTLi°_√xtObje˘
(
cur
)Ë!
NULL
) {

207 i‡(!
	`°rcmp
(
suff
->
suffix
, suffix))

213 i‡(!
suff
) {

214 i‡((
suff
 = (
HTBöd
 *Ë
	`HT_CALLOC
(1, (HTBöd))Ë=
NULL
)

215 
	`HT_OUTOFMEM
("HTBind_add");

216 
	`HTLi°_addObje˘
(
suÊi°
, (*Ë
suff
);

217 
	`SåAŒocC›y
(
suff
->
suffix
, suffix);

223 
HTChunk
 * 
chunk
 = 
	`HTChunk_√w
(32);

224 *
±r
;

225 i‡(
ª¥e£¡©i⁄
) {

226 
	`HTChunk_puts
(
chunk
, 
ª¥e£¡©i⁄
);

227 
±r
 = 
	`HTChunk_d©a
(
chunk
);

228 ; *
±r
;Ötr++)

229 *
±r
 = 
	`TOLOWER
(*ptr);

230 
suff
->
ty≥
 = 
	`HTAtom_f‹
(
	`HTChunk_d©a
(
chunk
));

231 
	`HTChunk_åunˇã
(
chunk
,0);

233 i‡(
ícodög
) {

234 
	`HTChunk_puts
(
chunk
, 
ícodög
);

235 
±r
 = 
	`HTChunk_d©a
(
chunk
);

236 ; *
±r
;Ötr++)

237 *
±r
 = 
	`TOLOWER
(*ptr);

238 
suff
->
ícodög
 = 
	`HTAtom_f‹
(
	`HTChunk_d©a
(
chunk
));

239 
	`HTChunk_åunˇã
(
chunk
,0);

241 i‡(
å™s„r
) {

242 
	`HTChunk_puts
(
chunk
, 
å™s„r
);

243 
±r
 = 
	`HTChunk_d©a
(
chunk
);

244 ; *
±r
;Ötr++)

245 *
±r
 = 
	`TOLOWER
(*ptr);

246 
suff
->
å™s„r
 = 
	`HTAtom_f‹
(
	`HTChunk_d©a
(
chunk
));

247 
	`HTChunk_åunˇã
(
chunk
,0);

249 i‡(
œnguage
) {

250 
	`HTChunk_puts
(
chunk
, 
œnguage
);

251 
±r
 = 
	`HTChunk_d©a
(
chunk
);

252 ; *
±r
;Ötr++)

253 *
±r
 = 
	`TOLOWER
(*ptr);

254 
suff
->
œnguage
 = 
	`HTAtom_f‹
(
	`HTChunk_d©a
(
chunk
));

255 
	`HTChunk_åunˇã
(
chunk
,0);

257 
	`HTChunk_dñëe
(
chunk
);

258 
suff
->
quÆôy
 = 
vÆue
;

260  
YES
;

261 
	}
}

275 
PUBLIC
 * 
	$HTBöd_gëSuffix
 (
HTP¨ítAnch‹
 * 
™ch‹
)

277 
˙t
;

278 
HTLi°
 * 
cur
;

279 
HTChunk
 * 
suffix
 = 
	`HTChunk_√w
(48);

280 
dñimôî
 = *
HTDñimôîs
;

281 * 
˘
=
NULL
, * 
˚
=NULL, * 
˛
=NULL;

282 
HTF‹m©
 
f‹m©
 = 
	`HTAnch‹_f‹m©
(
™ch‹
);

283 
HTLi°
 * 
ícodög
 = 
	`HTAnch‹_ícodög
(
™ch‹
);

284 
HTLi°
 * 
œnguage
 = 
	`HTAnch‹_œnguage
(
™ch‹
);

285 i‡(!
HTBödögs
Ë
	`HTBöd_öô
();

286 i‡(
™ch‹
) {

287 
˙t
=0; c¡<
HT_L_HASH_SIZE
; cnt++) {

288 i‡((
cur
 = 
HTBödögs
[
˙t
])) {

289 
HTBöd
 *
¥es
;

290 (
¥es
 = (
HTBöd
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

291 i‡(!
˘
 && (
¥es
->
ty≥
 &&Öªs->ty≥ =
f‹m©
)){

292 
˘
 = 
¥es
->
suffix
;

293 } i‡(!
˚
 && 
¥es
->
ícodög
 &&Éncoding) {

294 
HTLi°
 * 
cur_íc
 = 
ícodög
;

295 
HTEncodög
 
¥es_íc
;

296 (
¥es_íc
 = (
HTEncodög
Ë
	`HTLi°_√xtObje˘
(
cur_íc
))) {

297 i‡(
¥es_íc
 =
¥es
->
ícodög
) {

298 
˚
 = 
¥es
->
suffix
;

302 } i‡(!
˛
 && 
¥es
->
œnguage
 &&Üanguage) {

303 
HTLi°
 * 
cur_œng
 = 
œnguage
;

304 
HTL™guage
 
¥es_œng
;

305 (
¥es_œng
 = (
HTL™guage
Ë
	`HTLi°_√xtObje˘
(
cur_œng
))) {

306 i‡(
¥es_œng
 =
¥es
->
œnguage
) {

307 
˛
 = 
¥es
->
suffix
;

317 i‡(
˘
) {

318 
	`HTChunk_putc
(
suffix
, 
dñimôî
);

319 
	`HTChunk_puts
(
suffix
, 
˘
);

321 i‡(
˚
) {

322 
	`HTChunk_putc
(
suffix
, 
dñimôî
);

323 
	`HTChunk_puts
(
suffix
, 
˚
);

325 i‡(
˛
) {

326 
	`HTChunk_putc
(
suffix
, 
dñimôî
);

327 
	`HTChunk_puts
(
suffix
, 
˛
);

330  
	`HTChunk_toCSåög
(
suffix
);

331 
	}
}

343 
PUBLIC
 
BOOL
 
	$HTBöd_gëAnch‹Bödögs
 (
HTP¨ítAnch‹
 * 
™ch‹
)

345 
BOOL
 
°©us
 = 
NO
;

346 
quÆôy
=1.0;

347 i‡(
™ch‹
) {

348 *
addr
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
™ch‹
);

349 *
∑th
 = 
	`HTP¨£
(
addr
, "", 
PARSE_PATH
+
PARSE_PUNCTUATION
);

350 *
fûe
;

351 *
íd
;

352 i‡((
íd
 = 
	`°rchr
(
∑th
, ';')) || (end = strchr(path, '?')) ||

353 (
íd
 = 
	`°rchr
(
∑th
, '#')))

354 *
íd
 = '\0';

355 i‡((
fûe
 = 
	`°ºchr
(
∑th
, '/'))) {

356 
HTF‹m©
 
f‹m©
 = 
NULL
;

357 
HTEncodög
 
ícodög
 = 
NULL
;

358 
HTEncodög
 
å™s„r
 = 
NULL
;

359 
HTL™guage
 
œnguage
 = 
NULL
;

360 
	`HTTRACE
(
BIND_TRACE
, "Anch‹...... Gë bödög†f‹ `%s\'\n" 
_
 
∑th
);

361 
°©us
 = 
	`HTBöd_gëF‹m©
(
fûe
, &
f‹m©
, &
ícodög
, &
å™s„r
,

362 &
œnguage
, &
quÆôy
);

363 i‡(
°©us
) {

364 
	`HTAnch‹_£tF‹m©
(
™ch‹
, 
f‹m©
);

365 
	`HTAnch‹_£tC⁄ã¡Tøns„rEncodög
(
™ch‹
, 
å™s„r
);

367 
	`HTAnch‹_dñëeEncodögAŒ
(
™ch‹
);

368 
	`HTAnch‹_addEncodög
(
™ch‹
, 
ícodög
);

370 
	`HTAnch‹_dñëeL™guageAŒ
(
™ch‹
);

371 
	`HTAnch‹_addL™guage
(
™ch‹
, 
œnguage
);

374 
	`HT_FREE
(
addr
);

375 
	`HT_FREE
(
∑th
);

377  
°©us
;

378 
	}
}

380 
PUBLIC
 
BOOL
 
	$HTBöd_gëRe•⁄£Bödögs
 (
HTRe•⁄£
 * 
ª•⁄£
, c⁄° * 
uæ
)

382 
BOOL
 
°©us
 = 
NO
;

383 
quÆôy
 = 1.0;

384 i‡(
ª•⁄£
) {

385 * 
∑th
 = 
	`HTP¨£
(
uæ
, "", 
PARSE_PATH
 + 
PARSE_PUNCTUATION
);

386 * 
fûe
;

387 * 
íd
;

388 i‡((
íd
 = 
	`°rchr
(
∑th
, ';')) || (end = strchr(path, '?')) ||

389 (
íd
 = 
	`°rchr
(
∑th
, '#')))

390 *
íd
 = '\0';

391 i‡((
fûe
 = 
	`°ºchr
(
∑th
, '/'))) {

392 
HTF‹m©
 
f‹m©
 = 
NULL
;

393 
HTEncodög
 
ícodög
 = 
NULL
;

394 
HTEncodög
 
å™s„r
 = 
NULL
;

395 
HTL™guage
 
œnguage
 = 
NULL
;

396 
	`HTTRACE
(
BIND_TRACE
, "Re•⁄£.... Gë Bödög†f‹ `%s\'\n" 
_
 
∑th
);

397 
°©us
 = 
	`HTBöd_gëF‹m©
(
fûe
, &
f‹m©
, &
ícodög
, &
å™s„r
,

398 &
œnguage
, &
quÆôy
);

399 i‡(
°©us
) {

400 
	`HTRe•⁄£_£tF‹m©
(
ª•⁄£
, 
f‹m©
);

401 
	`HTRe•⁄£_£tC⁄ã¡Tøns„rEncodög
(
ª•⁄£
, 
å™s„r
);

402 
	`HTRe•⁄£_addEncodög
(
ª•⁄£
, 
ícodög
);

404 
	`HTRe•⁄£_addL™guage
(
ª•⁄£
, 
œnguage
);

408 
	`HT_FREE
(
∑th
);

410  
°©us
;

411 
	}
}

422 
PUBLIC
 
BOOL
 
	$HTBöd_gëF‹m©
 (c⁄° * 
fûíame
,

423 
HTF‹m©
 * 
f‹m©
,

424 
HTEncodög
 * 
íc
,

425 
HTEncodög
 * 
˘e
,

426 
HTL™guage
 * 
œng
,

427 * 
quÆôy
)

429 
suf˙t
=0;

430 *
fûe
=
NULL
;

431 #ifde‡
HT_REENTRANT


432 *
œ°s
;

434 i‡(!
HTBödögs
Ë
	`HTBöd_öô
();

435 i‡(*
quÆôy
 < 
HT_EPSILON
)

436 *
quÆôy
 = 1.0;

437 
	`SåAŒocC›y
(
fûe
, 
fûíame
);

438 
	`HTUnEsˇ≥
(
fûe
);

439 #ifde‡
HT_REENTRANT


440 i‡(
	`°πok_r
(
fûe
, 
HTDñimôîs
, &
œ°s
)) {

442 i‡(
	`°πok
(
fûe
, 
HTDñimôîs
)) {

444 *
suffix
;

445 #ifde‡
HT_REENTRANT


446 (
suffix
=(*)
	`°πok_r
(
NULL
, 
HTDñimôîs
, &
œ°s
)) != NULL) {

448 (
suffix
=
	`°πok
(
NULL
, 
HTDñimôîs
)) != NULL) {

450 
HTBöd
 *
suff
=
NULL
;

451 
hash
;

452 * 
p
;

453 
	`HTTRACE
(
BIND_TRACE
, "Gë Bödög. Look f‹ '%s\' " 
_
 
suffix
);

454 
suf˙t
++;

457 
p
=
suffix
, 
hash
=0; *p;Ö++) {

458 
hash
 = (hash * 3 + 
	`TOLOWER
(*
p
)Ë% 
HT_L_HASH_SIZE
;

462 i‡(
HTBödögs
[
hash
]) {

463 
HTLi°
 *
cur
 = 
HTBödögs
[
hash
];

464 (
suff
 = (
HTBöd
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

465 i‡((
HTCa£Sí
 && !
	`°rcmp
(
suff
->
suffix
, suffix)) ||

466 !
	`°rˇ£comp
(
suff
->
suffix
, suffix)) {

467 
	`HTTRACE
(
BIND_TRACE
, "Found!\n");

468 i‡(
suff
->
ty≥
 && 
f‹m©
) *format = suff->type;

469 i‡(
suff
->
ícodög
 && 
íc
) *enc = suff->encoding;

470 i‡(
suff
->
å™s„r
 && 
˘e
) *cte = suff->transfer;

471 i‡(
suff
->
œnguage
 && 
œng
) *lang = suff->language;

472 i‡(
suff
->
quÆôy
 > 
HT_EPSILON
)

473 *
quÆôy
 *
suff
->quality;

478 i‡(!
suff
) {

479 
	`HTTRACE
(
BIND_TRACE
, "Not found - use default for \'*.*\'\n");

480 i‡(
f‹m©
Ë*f‹m© = 
unknown_suffix
.
ty≥
;

481 i‡(
íc
Ë*í¯
unknown_suffix
.
ícodög
;

482 i‡(
˘e
Ë*˘ê
unknown_suffix
.
å™s„r
;

483 i‡(
œng
Ë*œng = 
unknown_suffix
.
œnguage
;

484 *
quÆôy
 = 
unknown_suffix
.quality;

488 i‡(!
suf˙t
) {

489 
	`HTTRACE
(
BIND_TRACE
, "Gë Bödög. Nÿsuffix found - usög deÁu… '%s\'\n" 
_
 
fûíame
);

490 i‡(
f‹m©
Ë*f‹m© = 
no_suffix
.
ty≥
;

491 i‡(
íc
Ë*í¯
no_suffix
.
ícodög
;

492 i‡(
˘e
Ë*˘ê
no_suffix
.
å™s„r
;

493 i‡(
œng
Ë*œng = 
no_suffix
.
œnguage
;

494 *
quÆôy
 = 
no_suffix
.quality;

496 
	`HTTRACE
(
BIND_TRACE
, "Gë Bödög. Resu… f‹ '%s\' is:Åy≥='%s\',Éncodög='%s\', cã='%s\',Ü™guage='%s\' wôh quÆôy %.2f\n" 
_


497 
fûíame
 
_


498 (
f‹m©
 && *f‹m©Ë? 
	`HTAtom_«me
(*f‹m©Ë: "unknown" 
_


499 (
íc
 && *ícË? 
	`HTAtom_«me
(*ícË: "unknown" 
_


500 (
˘e
 && *˘eË? 
	`HTAtom_«me
(*˘eË: "unknown" 
_


501 (
œng
 && *œngË? 
	`HTAtom_«me
(*œngË: "unknown" 
_


502 *
quÆôy
);

503 
	`HT_FREE
(
fûe
);

504  
YES
;

505 
	}
}

	@Library/src/HTBind.h

53 #i‚de‡
HTBIND_H


54 
	#HTBIND_H


	)

56 
	~"HTF‹m©.h
"

57 
	~"HTAnch‹.h
"

69 
BOOL
 
HTBöd_öô
 ();

70 
BOOL
 
HTBöd_dñëeAŒ
 ();

81 
HTBöd_ˇ£Sísôive
 (
BOOL
 
£nsôive
);

92 c⁄° *
HTBöd_dñimôîs
 ();

93 
HTBöd_£tDñimôîs
 (c⁄° * 
√w_suffixes
);

115 
BOOL
 
HTBöd_add
 (c⁄° * 
suffix
,

116 c⁄° * 
ª¥e£¡©i⁄
,

117 c⁄° * 
ícodög
,

118 c⁄° * 
å™s„r
,

119 c⁄° * 
œnguage
,

120 
vÆue
);

122 
BOOL
 
HTBöd_addTy≥
 (c⁄° * 
suffix
,

123 c⁄° * 
f‹m©
,

124 
vÆue
);

126 
BOOL
 
HTBöd_addEncodög
 (c⁄° * 
suffix
,

127 c⁄° * 
ícodög
,

128 
vÆue
);

130 
BOOL
 
HTBöd_addTøns„r
 (c⁄° * 
suffix
,

131 c⁄° * 
å™s„r
,

132 
vÆue
);

134 
BOOL
 
HTBöd_addL™guage
 (c⁄° * 
suffix
,

135 c⁄° * 
œnguage
,

136 
vÆue
);

164 * 
HTBöd_gëSuffix
 (
HTP¨ítAnch‹
 * 
™ch‹
);

178 
BOOL
 
HTBöd_gëAnch‹Bödögs
 (
HTP¨ítAnch‹
 * 
™ch‹
);

192 
BOOL
 
HTBöd_gëRe•⁄£Bödögs
 (
HTRe•⁄£
 * 
ª•⁄£
,

193 c⁄° * 
uæ
);

207 
BOOL
 
HTBöd_gëF‹m©
 (c⁄° * 
fûíame
,

208 
HTF‹m©
 * 
f‹m©
,

209 
HTEncodög
 * 
íc
,

210 
HTEncodög
 * 
˘e
,

211 
HTL™guage
 * 
œng
,

212 * 
quÆôy
);

	@Library/src/HTBound.c

21 
	~"wwwsys.h
"

22 
	~"WWWUtû.h
"

23 
	~"WWWC‹e.h
"

24 
	~"HTMîge.h
"

25 
	~"HTReqM™.h
"

26 
	~"HTBound.h
"

28 
	#PUTBLOCK
(
b
, 
l
Ë(*
me
->
èrgë
->
iß
->
put_block
)(me->èrgë, b,Ü)

	)

29 
	#PUTDEBUG
(
b
, 
l
Ë(*
me
->
debug
->
iß
->
put_block
)(me->debug, b,Ü)

	)

30 
	#FREE_TARGET
 (*
me
->
èrgë
->
iß
->
_‰ì
)(me->èrgë)

	)

32 
	s_HTSåóm
 {

33 c⁄° 
HTSåómCœss
 * 
	miß
;

34 
HTSåóm
 * 
	mèrgë
;

35 
HTSåóm
 * 
	m‹ig_èrgë
;

36 
HTF‹m©
 
	mf‹m©
;

37 
HTSåóm
 * 
	mdebug
;

38 
HTReque°
 * 
	mªque°
;

39 
BOOL
 
	mbody
;

40 
HTEOLSèã
 
	m°©e
;

41 
	mdash
;

42 * 
	mbound¨y
;

43 * 
	mbpos
;

48 
PRIVATE
 
	$HTBound¨y_put_block
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
)

50 c⁄° *
°¨t
 = 
b
;

51 c⁄° *
íd
 = 
b
;

52 
l
-- > 0) {

53 i‡(
me
->
°©e
 =
EOL_FCR
) {

54 
me
->
°©e
 = (*
b
 =
LF
Ë? 
EOL_FLF
 : 
EOL_BEGIN
;

55 } i‡(
me
->
°©e
 =
EOL_FLF
) {

56 i‡(
me
->
dash
 == 2) {

57 
l
>0 && *
me
->
bpos
 && *me->bpos==*
b
)Ü--, me->bpos++, b++;

58 i‡(!*
me
->
bpos
) {

59 
	`HTTRACE
(
STREAM_TRACE
, "Bound¨y.... `%s\' found\n" 
_
 
me
->
bound¨y
);

60 
me
->
bpos
 = me->
bound¨y
;

61 
me
->
body
 = 
YES
;

62 
me
->
°©e
 = 
EOL_DOT
;

63 } i‡(
l
>0) {

64 
me
->
dash
 = 0;

65 
me
->
bpos
 = me->
bound¨y
;

66 
me
->
°©e
 = 
EOL_BEGIN
;

69 i‡(*
b
 == '-') {

70 
me
->
dash
++;

71 } i‡(*
b
 !
CR
 && *b !
LF
) {

72 
me
->
dash
 = 0;

73 
me
->
°©e
 = 
EOL_BEGIN
;

75 } i‡(
me
->
°©e
 =
EOL_SLF
) {

76 i‡(
me
->
dash
 == 4) {

77 i‡(
íd
 > 
°¨t
) {

78 
°©us
 = 
	`PUTBLOCK
(
°¨t
, 
íd
-start);

79 i‡(
°©us
 !
HT_OK
)  status;

81 
	`HTTRACE
(
STREAM_TRACE
, "Boundary.... Ending\n");

82 
°¨t
 = 
b
;

83 
me
->
dash
 = 0;

84 
me
->
°©e
 = 
EOL_BEGIN
;

86 i‡(*
b
 == '-') {

87 
me
->
dash
++;

88 } i‡(*
b
 !
CR
 && *b !
LF
) {

89 
me
->
dash
 = 0;

90 
me
->
°©e
 = 
EOL_BEGIN
;

92 
me
->
body
 = 
NO
;

93 } i‡(
me
->
°©e
 =
EOL_DOT
) {

94 
°©us
;

95 i‡(
me
->
body
) {

96 i‡(
me
->
èrgë
Ë
FREE_TARGET
;

97 
me
->
èrgë
 = 
	`HTSåómSèck
(
WWW_MIME
,me->
f‹m©
,

98 
	`HTMîge
(
me
->
‹ig_èrgë
, 2),

99 
me
->
ªque°
, 
YES
);

100 i‡(
íd
 > 
°¨t
) {

101 i‡((
°©us
 = 
	`PUTBLOCK
(
°¨t
, 
íd
-°¨t)Ë!
HT_OK
)

102  
°©us
;

105 i‡(
me
->
debug
)

106 i‡((
°©us
 = 
	`PUTDEBUG
(
°¨t
, 
íd
-°¨t)Ë!
HT_OK
)

107  
°©us
;

109 
°¨t
 = 
b
;

110 i‡(*
b
 ='-'Ë
me
->
dash
++;

111 
me
->
°©e
 = 
EOL_SLF
;

112 } i‡(*
b
 =
CR
) {

113 
me
->
°©e
 = 
EOL_FCR
;

114 
íd
 = 
b
;

115 } i‡(*
b
 =
LF
) {

116 i‡(
me
->
°©e
 !
EOL_FCR
Ë
íd
 = 
b
;

117 
me
->
°©e
 = 
EOL_FLF
;

119 
b
++;

121  (
°¨t
<
b
 && 
me
->
body
Ë? 
	`PUTBLOCK
(°¨t, b-°¨tË: 
HT_OK
;

122 
	}
}

124 
PRIVATE
 
	$HTBound¨y_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

126  
	`HTBound¨y_put_block
(
me
, 
s
, (Ë
	`°æí
(s));

127 
	}
}

129 
PRIVATE
 
	$HTBound¨y_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

131  
	`HTBound¨y_put_block
(
me
, &
c
, 1);

132 
	}
}

134 
PRIVATE
 
	$HTBound¨y_Êush
 (
HTSåóm
 * 
me
)

136  (*
me
->
èrgë
->
iß
->
Êush
)(me->target);

137 
	}
}

139 
PRIVATE
 
	$HTBound¨y_‰ì
 (
HTSåóm
 * 
me
)

141 
°©us
 = 
HT_OK
;

142 i‡(
me
->
èrgë
) {

143 i‡((
°©us
 = (*
me
->
èrgë
->
iß
->
_‰ì
)(me->èrgë)Ë=
HT_WOULD_BLOCK
)

144  
HT_WOULD_BLOCK
;

146 
	`HTTRACE
(
PROT_TRACE
, "Boundary.... FREEING....\n");

147 
	`HT_FREE
(
me
->
bound¨y
);

148 
	`HT_FREE
(
me
);

149  
°©us
;

150 
	}
}

152 
PRIVATE
 
	$HTBound¨y_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

154 
°©us
 = 
HT_ERROR
;

155 i‡(
me
->
èrgë
Ë
°©us
 = (*me->èrgë->
iß
->
ab‹t
)(me->èrgë, 
e
);

156 
	`HTTRACE
(
PROT_TRACE
, "Boundary.... ABORTING...\n");

157 
	`HT_FREE
(
me
->
bound¨y
);

158 
	`HT_FREE
(
me
);

159  
°©us
;

160 
	}
}

162 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTBound¨yCœss
 =

165 
HTBound¨y_Êush
,

166 
HTBound¨y_‰ì
,

167 
HTBound¨y_ab‹t
,

168 
HTBound¨y_put_ch¨a˘î
,

169 
HTBound¨y_put_°rög
,

170 
HTBound¨y_put_block


173 
PUBLIC
 
HTSåóm
 * 
	$HTBound¨y
 (
HTReque°
 * 
ªque°
,

174 * 
∑øm
,

175 
HTF‹m©
 
öput_f‹m©
,

176 
HTF‹m©
 
ouçut_f‹m©
,

177 
HTSåóm
 * 
ouçut_°ªam
)

179 
HTRe•⁄£
 * 
ª•⁄£
 = 
	`HTReque°_ª•⁄£
(
ªque°
);

180 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

181 
HTAssocLi°
 * 
ty≥_∑øm
 = 
ª•⁄£
 ?

182 
	`HTRe•⁄£_f‹m©P¨am
(
ª•⁄£
) :

183 
	`HTAnch‹_f‹m©P¨am
(
™ch‹
);

184 * 
bound¨y
 = 
	`HTAssocLi°_födObje˘
(
ty≥_∑øm
, "boundary");

185 i‡(
bound¨y
) {

186 
HTSåóm
 * 
me
;

187 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

188 
	`HT_OUTOFMEM
("HTBoundary");

189 
me
->
iß
 = &
HTBound¨yCœss
;

190 
me
->
ªque°
 =Ñequest;

191 
me
->
f‹m©
 = 
ouçut_f‹m©
;

192 
me
->
‹ig_èrgë
 = 
ouçut_°ªam
;

193 
me
->
debug
 = 
	`HTReque°_debugSåóm
(
ªque°
);

194 
me
->
°©e
 = 
EOL_FLF
;

195 
	`SåAŒocC›y
(
me
->
bound¨y
, boundary);

196 
me
->
bpos
 = me->
bound¨y
;

197 
	`HTTRACE
(
STREAM_TRACE
, "Bound¨y.... Såóm cª©ed wôh bound¨y '%s\'\n" 
_
 
me
->
bound¨y
);

198  
me
;

200 
	`HTTRACE
(
STREAM_TRACE
, "Boundary.... UNKNOWN boundary!\n");

201  
	`HTEº‹Såóm
();

203 
	}
}

	@Library/src/HTBound.h

32 #i‚de‡
HTBOUND_H


33 
	#HTBOUND_H


	)

34 
	~"HTF‹m©.h
"

36 
HTC⁄vîãr
 
HTBound¨y
;

	@Library/src/HTBufWrt.c

15 
	~"wwwsys.h
"

16 
	~"WWWUtû.h
"

17 
	~"WWWC‹e.h
"

18 
	~"HTNëM™.h
"

19 
	~"HTWrôî.h
"

20 
	~"HTTimî.h
"

21 
	~"HTBufWπ.h
"

23 
	s_HTOuçutSåóm
 {

24 c⁄° 
HTOuçutSåómCœss
 * 
	miß
;

25 
HTOuçutSåóm
 * 
	mèrgë
;

26 
HTHo°
 * 
	mho°
;

28 
	mÆloˇãd
;

29 
	mgrowby
;

30 
	mexpo
;

32 * 
	mªad
;

33 * 
	md©a
;

35 
ms_t
 
	mœ°FlushTime
;

36 
HTTimî
 * 
	mtimî
;

39 
	#PUTBLOCK
(
b
,
l
Ë(*
me
->
èrgë
->
iß
->
put_block
)(me->èrgë,(b),÷))

	)

47 
PRIVATE
 
	$HTBuf„rWrôî_Êush
 (
HTOuçutSåóm
 * 
me
)

49 
°©us
 = 
HT_OK
;

50 i‡(
me
 && me->
ªad
 > me->
d©a
) {

51 
me
->
œ°FlushTime
 = 
	`HTGëTimeInMûlis
();

52 i‡((
°©us
 = 
	`PUTBLOCK
(
me
->
d©a
, me->
ªad
 - me->d©a))==
HT_WOULD_BLOCK
)

53  
HT_WOULD_BLOCK
;

54 
me
->
ªad
 = me->
d©a
;

56  
°©us
;

57 
	}
}

59 
PRIVATE
 
	$FlushEvít
 (
HTTimî
 * 
timî
, * 
∑øm
, 
HTEvítTy≥
 
ty≥
)

61 
HTOuçutSåóm
 * 
me
 = (HTOuçutSåóm *Ë
∑øm
;

62 i‡(
me
->
timî
 &&Åimer != me->timer)

63 
	`HTDEBUGBREAK
("Buf„∏WrôîÅimî %∞nŸ i¿sync\n" 
_
 
timî
);

64 
	`HTTRACE
(
PROT_TRACE
, "Buf„r...... TimeouàÊushög %∞wôhÅimî %p\n" 
_
 
me
 _ 
timî
);

69 
	`HTBuf„rWrôî_Êush
(
me
);

74 
	`HTTimî_dñëe
(
me
->
timî
);

75 
me
->
timî
 = 
NULL
;

76  
HT_OK
;

77 
	}
}

79 
PRIVATE
 
	$HTBuf„rWrôî_œzyFlush
 (
HTOuçutSåóm
 * 
me
)

81 
HTNë
 * 
√t
;

82 
dñay
;

84 i‡(
me
->
ªad
 <me->
d©a
) {

85  
HT_OK
;

92 
dñay
 = 
	`HTHo°_födWrôeDñay
(
me
->
ho°
, me->
œ°FlushTime
, me->
ªad
 - me->
d©a
);

97 i‡(!
dñay
) {

98 
°©us
;

99 
	`HTTRACE
(
STREAM_TRACE
, "Buf„r...... Flushög %p\n" 
_
 
me
);

100 i‡((
°©us
 = 
	`HTBuf„rWrôî_Êush
(
me
)Ë&& me->
timî
) {

101 
	`HTTimî_dñëe
(
me
->
timî
);

102 
me
->
timî
 = 
NULL
;

104  
°©us
;

114 i‡(!
me
->
timî
) {

115 
√t
 = 
	`HTHo°_gëWrôeNë
(
me
->
ho°
);

116 
me
->
timî
 = 
	`HTTimî_√w
(
NULL
, 
FlushEvít
, me, 
dñay
, 
YES
, 
NO
);

117 
	`HTHo°_uƒegi°î
(
me
->
ho°
, 
√t
, 
HTEvít_WRITE
);

118 
	`HTTRACE
(
STREAM_TRACE
, "Buf„r...... Waôög %dm†⁄ %p\n" 
_
 
dñay
 _ 
me
);

120 i‡(
	`HTTimî_hasTimîExpúed
(
me
->
timî
)) {

121 
	`HTTRACE
(
STREAM_TRACE
, "Buf„r...... Di•©chög oldÅimî %p\n" 
_
 
me
->
timî
);

122 
	`HTTimî_di•©ch
(
me
->
timî
);

123 
me
->
timî
 = 
NULL
;

125 
	`HTTRACE
(
STREAM_TRACE
, "Buf„r...... Waôög o¿u√xpúedÅimî %p\n" 
_
 
me
->
timî
);

128  
HT_OK
;

129 
	}
}

131 
PRIVATE
 
	$HTBuf„rWrôî_‰ì
 (
HTOuçutSåóm
 * 
me
)

133  
	`HTBuf„rWrôî_œzyFlush
(
me
);

134 
	}
}

136 
PRIVATE
 
BOOL
 
	$HTBuf„rWrôî_addBuf„r
(
HTOuçutSåóm
 * 
me
, 
addthis
)

138 i‡(
me
) {

139 
me
->
Æloˇãd
 +(
addthis
 -áddthis%me->
growby
 + (me->growby*me->
expo
));

140 
me
->
expo
 *= 2;

141 
	`HTTRACE
(
STREAM_TRACE
, "Buf„r...... In¸ósög buf„∏tÿ%d byãs\n" 
_
 
me
->
Æloˇãd
);

142 i‡(
me
->
d©a
) {

143 
size
 = 
me
->
ªad
-me->
d©a
;

144 i‡((
me
->
d©a
 = (*Ë
	`HT_REALLOC
(me->d©a, me->
Æloˇãd
)Ë=
NULL
)

145 
	`HT_OUTOFMEM
("HTBufferWriter_addBuffer");

146 
me
->
ªad
 = me->
d©a
 + 
size
;

148 i‡((
me
->
d©a
 = (*Ë
	`HT_CALLOC
(1, me->
Æloˇãd
)Ë=
NULL
)

149 
	`HT_OUTOFMEM
("HTBufferWriter_addBuffer");

150 
me
->
ªad
 = me->
d©a
;

152  
YES
;

154  
NO
;

155 
	}
}

157 
PRIVATE
 
	$HTBuf„rWrôî_ab‹t
 (
HTOuçutSåóm
 * 
me
, 
HTLi°
 * 
e
)

159 
	`HTTRACE
(
STREAM_TRACE
, "Buffer...... ABORTING...\n");

160 i‡(
me
->
timî
) {

161 
	`HTTimî_dñëe
(
me
->
timî
);

162 
me
->
timî
 = 
NULL
;

164 i‡(
me
->
èrgë
Ë(*me->èrgë->
iß
->
ab‹t
)(me->èrgë, 
e
);

165  
HT_ERROR
;

166 
	}
}

168 
PRIVATE
 
	$HTBuf„rWrôî_wrôe
 (
HTOuçutSåóm
 * 
me
, c⁄° * 
buf
, 
Àn
)

170 
°©us
;

172 
avaûabÀ
 = 
me
->
d©a
 + me->
Æloˇãd
 - me->
ªad
;

175 i‡(
Àn
 <
avaûabÀ
) {

176 
size
 = 0;

177 
	`mem˝y
(
me
->
ªad
, 
buf
, 
Àn
);

178 
me
->
ªad
 +
Àn
;

181 i‡((
size
 = 
me
->
ªad
 - me->
d©a
Ë> me->
growby
) {

182 
me
->
œ°FlushTime
 = 
	`HTGëTimeInMûlis
();

183 
°©us
 = 
	`PUTBLOCK
(
me
->
d©a
, 
size
);

184 i‡(
°©us
 =
HT_OK
) {

185 
me
->
ªad
 = me->
d©a
;

187  (
°©us
 =
HT_WOULD_BLOCK
Ë? 
HT_OK
 : 
HT_ERROR
;

190  
HT_OK
;

194 i‡(
avaûabÀ
) {

195 
	`mem˝y
(
me
->
ªad
, 
buf
, 
avaûabÀ
);

196 
buf
 +
avaûabÀ
;

197 
Àn
 -
avaûabÀ
;

198 
me
->
ªad
 +
avaûabÀ
;

200 
me
->
œ°FlushTime
 = 
	`HTGëTimeInMûlis
();

201 
°©us
 = 
	`PUTBLOCK
(
me
->
d©a
, me->
Æloˇãd
);

202 i‡(
°©us
 =
HT_OK
) {

203 
me
->
ªad
 = me->
d©a
;

204 } i‡(
°©us
 =
HT_WOULD_BLOCK
) {

205 
	`HTBuf„rWrôî_addBuf„r
(
me
, 
Àn
);

206 
	`mem˝y
(
me
->
ªad
, 
buf
, 
Àn
);

207 
me
->
ªad
 +
Àn
;

208  
HT_OK
;

212 
	}
}

217 
PRIVATE
 
	$HTBuf„rWrôî_put_ch¨a˘î
 (
HTOuçutSåóm
 * 
me
, 
c
)

219  
	`HTBuf„rWrôî_wrôe
(
me
, &
c
, 1);

220 
	}
}

227 
PRIVATE
 
	$HTBuf„rWrôî_put_°rög
 (
HTOuçutSåóm
 * 
me
, c⁄° * 
s
)

229  
	`HTBuf„rWrôî_wrôe
(
me
, 
s
, (Ë
	`°æí
(s));

230 
	}
}

237 
PRIVATE
 
	$HTBuf„rWrôî_˛o£
 (
HTOuçutSåóm
 * 
me
)

239 i‡(
me
) {

240 i‡(
me
->
timî
) {

241 
	`HTTimî_dñëe
(
me
->
timî
);

242 
me
->
timî
 = 
NULL
;

244 i‡(
me
->
èrgë
Ë(*me->èrgë->
iß
->
˛o£
)(me->target);

245 
	`HT_FREE
(
me
->
d©a
);

246 
	`HT_FREE
(
me
);

248  
HT_OK
;

249 
	}
}

251 
PRIVATE
 c⁄° 
HTOuçutSåómCœss
 
	gHTBuf„rWrôî
 =

254 
HTBuf„rWrôî_œzyFlush
,

255 
HTBuf„rWrôî_‰ì
,

256 
HTBuf„rWrôî_ab‹t
,

257 
HTBuf„rWrôî_put_ch¨a˘î
,

258 
HTBuf„rWrôî_put_°rög
,

259 
HTBuf„rWrôî_wrôe
,

260 
HTBuf„rWrôî_˛o£


263 
PRIVATE
 
HTOuçutSåóm
 * 
	$buf„r_√w
 (
HTHo°
 * 
ho°
, 
HTCh™√l
 * 
ch
,

264 * 
∑øm
, 
bufsize
)

266 i‡(
ho°
 && 
ch
) {

267 
HTOuçutSåóm
 * 
me
 = 
	`HTCh™√l_ouçut
(
ch
);

268 i‡(!
me
) {

269 
HTOuçutSåóm
 * 
me
;

270 
t˝bufsize
 = 0;

272 #i‡
	`deföed
(
HAVE_GETSOCKOPT
Ë&& deföed(
SO_SNDBUF
)

277 
SOCKET
 
sockfd
 = 
	`HTCh™√l_sockë
(
ch
);

278 
size
 = ();

279 
°©us
 = 
	`gësock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_SNDBUF
,

280 (*Ë&
t˝bufsize
, &
size
);

281 i‡(
°©us
 == -1) {

282 
	`HTTRACE
(
STREAM_TRACE
, "Sockë...... CouldÇŸ gë TCP síd buf„∏sizêf‹ sockë %d\n" 
_
 
sockfd
);

284 
	`HTTRACE
(
STREAM_TRACE
, "Sockë...... TCP síd buf„∏sizêi†%d f‹ sockë %d\n" 
_
 
t˝bufsize
 _ 
sockfd
);

288 i‡(
bufsize
 <0Ëbufsizê
t˝bufsize
 ?Å˝bufsizê: 
OUTPUT_BUFFER_SIZE
;

289 i‡((
me
 = (
HTOuçutSåóm
 *Ë
	`HT_CALLOC
(1, (HTOuçutSåóm)))==
NULL
 ||

290 (
me
->
d©a
 = (*Ë
	`HT_MALLOC
(
bufsize
)Ë=
NULL
)

291 
	`HT_OUTOFMEM
("HTBufferWriter_new");

292 
me
->
iß
 = &
HTBuf„rWrôî
;

293 
me
->
ªad
 = me->
d©a
;

294 
me
->
Æloˇãd
 = 
bufsize
;

295 
me
->
growby
 = 
bufsize
;

296 
me
->
expo
 = 1;

297 
me
->
ho°
 = host;

298  
me
;

301  
NULL
;

302 
	}
}

304 
PUBLIC
 
HTOuçutSåóm
 * 
	$HTBuf„rWrôî_√w
 (
HTHo°
 * 
ho°
,

305 
HTCh™√l
 * 
ch
,

306 * 
∑øm
,

307 
bufsize
)

309 
HTOuçutSåóm
 * 
me
 = 
	`buf„r_√w
(
ho°
, 
ch
, 
∑øm
, 
bufsize
);

310 i‡(
me
) {

311 
me
->
èrgë
 = 
	`HTWrôî_√w
(
ho°
, 
ch
, 
∑øm
, 0);

312  
me
;

314  
NULL
;

315 
	}
}

317 
PUBLIC
 
HTOuçutSåóm
 * 
	$HTBuf„rC⁄vîãr_√w
 (
HTHo°
 * 
ho°
,

318 
HTCh™√l
 * 
ch
,

319 * 
∑øm
,

320 
bufsize
,

321 
HTOuçutSåóm
 * 
èrgë
)

323 i‡(
èrgë
) {

324 
HTOuçutSåóm
 * 
me
 = 
	`buf„r_√w
(
ho°
, 
ch
, 
∑øm
, 
bufsize
);

325 i‡(
me
) {

326 
me
->
èrgë
 =Åarget;

327  
me
;

330  
NULL
;

331 
	}
}

	@Library/src/HTBufWrt.h

41 #i‚de‡
HTBUFWRT_H


42 
	#HTBUFWRT_H


	)

44 
	~"HTIOSåóm.h
"

58 
	#OUTPUT_BUFFER_SIZE
 1024

	)

66 
HTOuçut_√w
 
HTBuf„rWrôî_√w
;

74 
HTOuçutC⁄vîãr_√w
 
HTBuf„rC⁄vîãr_√w
;

	@Library/src/HTCache.c

18 
	~"wwwsys.h
"

19 
	~"WWWUtû.h
"

20 
	~"WWWC‹e.h
"

21 
	~"WWWTøns.h
"

22 
	~"WWWAµ.h
"

23 
	~"HTCache.h
"

26 
	#HT_CACHE_LOC
 "/tmp/"

	)

27 
	#HT_CACHE_ROOT
 "w3c-ˇche/"

	)

28 
	#HT_CACHE_INDEX
 ".ödex"

	)

29 
	#HT_CACHE_LOCK
 ".lock"

	)

30 
	#HT_CACHE_META
 ".mëa"

	)

31 
	#HT_CACHE_EMPTY_ETAG
 "@w3c@"

	)

34 
	#NO_LM_EXPIRATION
 24*3600

	)

35 
	#MAX_LM_EXPIRATION
 48*3600

	)

41 #i‚de‡
LM_EXPIRATION


42 
	#LM_EXPIRATION
(
t
Ë(
	`HTMIN
((
MAX_LM_EXPIRATION
), (tË/ 10))

	)

45 
	#WARN_HEURISTICS
 24*3600

	)

47 
	#DUMP_FREQUENCY
 10

	)

49 
	#MEGA
 0x100000L

	)

50 
	#HT_CACHE_TOTAL_SIZE
 20

	)

51 
	#HT_CACHE_FOLDER_PCT
 10

	)

52 
	#HT_CACHE_GC_PCT
 10

	)

53 
	#HT_MIN_CACHE_TOTAL_SIZE
 5

	)

54 
	#HT_MAX_CACHE_ENTRY_SIZE
 3

	)

57 
	e_CacheSèã
 {

58 
	mCL_ERROR
 = -3,

59 
	mCL_NO_DATA
 = -2,

60 
	mCL_GOT_DATA
 = -1,

61 
	mCL_BEGIN
 = 0,

62 
	mCL_NEED_BODY
,

63 
	mCL_NEED_OPEN_FILE
,

64 
	mCL_NEED_CONTENT


65 } 
	tCacheSèã
;

68 
	s_ˇche_öfo
 {

69 
CacheSèã
 
	m°©e
;

70 * 
	mloˇl
;

71 
°©
 
	m°©_öfo
;

72 
HTNë
 * 
	m√t
;

73 
HTTimî
 * 
	mtimî
;

74 } 
	tˇche_öfo
;

76 
	s_HTCache
 {

78 
	mhash
;

79 * 
	muæ
;

80 * 
	mˇchíame
;

83 * 
	mëag
;

84 
BOOL
 
	mønge
;

85 
BOOL
 
	mmu°_ªvÆid©e
;

86 
	mhôs
;

87 
	msize
;

88 
time_t
 
	mlm
;

89 
time_t
 
	mexpúes
;

90 
time_t
 
	m‰esh√ss_li„time
;

91 
time_t
 
	mª•⁄£_time
;

92 
time_t
 
	mc‹ª˘ed_öôül_age
;

93 
HTReque°
 * 
	mlock
;

96 
	s_HTSåóm
 {

97 c⁄° 
HTSåómCœss
 * 
	miß
;

98 
FILE
 * 
	mÂ
;

99 
	mbyãs_wrôãn
;

100 
HTCache
 * 
	mˇche
;

101 
HTReque°
 * 
	mªque°
;

102 
HTRe•⁄£
 * 
	mª•⁄£
;

103 
HTChunk
 * 
	mbuf„r
;

104 
HTEOLSèã
 
	mEOL°©e
;

105 
BOOL
 
	m≠≥nd
;

108 
	s_HTI≈utSåóm
 {

109 c⁄° 
HTI≈utSåómCœss
 * 
	miß
;

113 
PRIVATE
 
BOOL
 
	gHTCacheE«bÀ
 = 
NO
;

114 
PRIVATE
 
BOOL
 
	gHTCacheInôülized
 = 
NO
;

115 
PRIVATE
 
BOOL
 
	gHTCachePrŸe˘ed
 = 
YES
;

116 
PRIVATE
 * 
	gHTCacheRoŸ
 = 
NULL
;

117 
PRIVATE
 
HTExpúesMode
 
	gHTExpMode
 = 
HT_EXPIRES_IGNORE
;

118 
PRIVATE
 
HTDisc⁄√˘edMode
 
	gDisc⁄√˘edMode
 = 
HT_DISCONNECT_NONE
;

121 
PRIVATE
 
	gDeÁu…Expú©i⁄
 = 
NO_LM_EXPIRATION
;

124 
PRIVATE
 
HTLi°
 ** 
	gCacheTabÀ
 = 
NULL
;

127 
PRIVATE
 
	gHTCacheTŸÆSize
 = 
HT_CACHE_TOTAL_SIZE
*
MEGA
;

128 
PRIVATE
 
	gHTCacheFﬁdîSize
 = (
HT_CACHE_TOTAL_SIZE
*
MEGA
)/
HT_CACHE_FOLDER_PCT
;

129 
PRIVATE
 
	gHTCacheGCBuf„r
 = (
HT_CACHE_TOTAL_SIZE
*
MEGA
)/
HT_CACHE_GC_PCT
;

130 
PRIVATE
 
	gHTCacheC⁄ã¡Size
 = 0L;

131 
PRIVATE
 
	gHTCacheMaxE¡rySize
 = 
HT_MAX_CACHE_ENTRY_SIZE
*
MEGA
;

133 
PRIVATE
 
	g√w_íåõs
 = 0;

135 
PRIVATE
 
HTNëBef‹e
 
	gHTCacheFûãr
;

136 
PRIVATE
 
HTNëA·î
 
	gHTCacheUpd©eFûãr
;

137 
PRIVATE
 
HTNëA·î
 
	gHTCacheCheckFûãr
;

143 
PRIVATE
 
BOOL
 
	$°›GC
 ()

145  (
HTCacheC⁄ã¡Size
 + 
HTCacheFﬁdîSize
 < 
HTCacheTŸÆSize
 - 
HTCacheGCBuf„r
);

146 
	}
}

148 
PRIVATE
 
BOOL
 
	$°¨tGC
 ()

150  (
HTCacheC⁄ã¡Size
 + 
HTCacheFﬁdîSize
 > 
HTCacheTŸÆSize
);

151 
	}
}

153 
PRIVATE
 
BOOL
 
	$HTCacheG¨bage
 ()

155 
ﬁd_size
 = 
HTCacheC⁄ã¡Size
;

156 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... Garbage collecting\n");

157 i‡(
CacheTabÀ
) {

158 
time_t
 
cur_time
 = 
	`time
(
NULL
);

159 
HTLi°
 * 
cur
;

160 
˙t
;

161 
hôs
;

167 
HTAÀπCÆlback
 * 
cbf
 = 
	`HTAÀπ_föd
(
HT_PROG_OTHER
);

168 i‡(
cbf
Ë(*cbf)(
NULL
, 
HT_PROG_OTHER
, 
HT_MSG_NULL
,NULL, NULL, NULL);

178 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... Collecting StaleÉntries\n");

179 
˙t
=0; c¡<
HT_XL_HASH_SIZE
; cnt++) {

180 i‡((
cur
 = 
CacheTabÀ
[
˙t
])) {

181 
HTLi°
 * 
ﬁd_cur
 = 
cur
;

182 
HTCache
 * 
¥es
;

183 (
¥es
 = (
HTCache
 *Ë
	`HTLi°_√xtObje˘
(
cur
)Ë!
NULL
) {

184 
time_t
 
ªsidít_time
 = 
cur_time
 - 
¥es
->
ª•⁄£_time
;

185 
time_t
 
cuºít_age
 = 
¥es
->
c‹ª˘ed_öôül_age
 +

186 
ªsidít_time
;

191 i‡((
¥es
->
‰esh√ss_li„time
 < 
cuºít_age
)

192 && 
	`HTCache_ªmove
(
¥es
)) {

193 
cur
 = 
ﬁd_cur
;

195 
ﬁd_cur
 = 
cur
;

197 i‡(
	`°›GC
()) ;

207 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... CollectingÜeast usedÉntries\n");

208 
hôs
 = 0;

209 
	`°¨tGC
()) {

210 
BOOL
 
ªmoved
 = 
NO
;

211 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... CﬁÀ˘ögÉ¡rõ†wôh %d hôs\n" 
_
 
hôs
);

212 
˙t
=0; c¡<
HT_XL_HASH_SIZE
; cnt++) {

213 i‡((
cur
 = 
CacheTabÀ
[
˙t
])) {

214 
HTLi°
 * 
ﬁd_cur
 = 
cur
;

215 
HTCache
 * 
¥es
;

216 (
¥es
 = (
HTCache
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

222 i‡((
¥es
->
size
 > 
HTCacheMaxE¡rySize


223 || 
¥es
->
hôs
 <= hits)

224 && 
	`HTCache_ªmove
(
¥es
)) {

225 
cur
 = 
ﬁd_cur
;

226 
ªmoved
 = 
YES
;

228 
ﬁd_cur
 = 
cur
;

230 i‡(
	`°›GC
()) ;

234 i‡(!
ªmoved
) ;

235 
hôs
++;

237 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... Sizêªdu˚d from %ldÅÿ%ld\n" 
_


238 
ﬁd_size
 
_
 
HTCacheC⁄ã¡Size
);

242 
	`HTCacheIndex_wrôe
(
HTCacheRoŸ
);

243 
√w_íåõs
 = 0;

244  
YES
;

246  
NO
;

247 
	}
}

253 
PRIVATE
 * 
	$ˇche_ödex_«me
 (c⁄° * 
ˇche_roŸ
)

255 i‡(
ˇche_roŸ
) {

256 * 
loˇti⁄
 = 
NULL
;

257 i‡((
loˇti⁄
 = (*)

258 
	`HT_MALLOC
(
	`°æí
(
ˇche_roŸ
Ë+ såÀn(
HT_CACHE_INDEX
Ë+ 1)Ë=
NULL
)

259 
	`HT_OUTOFMEM
("cache_index_name");

260 
	`°r˝y
(
loˇti⁄
, 
ˇche_roŸ
);

261 
	`°rˇt
(
loˇti⁄
, 
HT_CACHE_INDEX
);

262  
loˇti⁄
;

264  
NULL
;

265 
	}
}

270 
PUBLIC
 
BOOL
 
	$HTCacheIndex_dñëe
 (c⁄° * 
ˇche_roŸ
)

272 i‡(
ˇche_roŸ
) {

273 * 
ödex
 = 
	`ˇche_ödex_«me
(
ˇche_roŸ
);

274 
	`REMOVE
(
ödex
);

275 
	`HT_FREE
(
ödex
);

276  
YES
;

278  
NO
;

279 
	}
}

286 
PUBLIC
 
BOOL
 
	$HTCacheIndex_wrôe
 (c⁄° * 
ˇche_roŸ
)

288 i‡(
ˇche_roŸ
 && 
CacheTabÀ
) {

289 * 
ödex
 = 
	`ˇche_ödex_«me
(
ˇche_roŸ
);

290 
FILE
 * 
Â
 = 
NULL
;

291 
	`HTTRACE
(
CACHE_TRACE
, "CachêIndex. Wrôög index `%s\'\n" 
_
 
ödex
);

297 i‡(!
ödex
Ë 
NO
;

298 i‡((
Â
 = 
	`f›í
(
ödex
, "wb")Ë=
NULL
) {

299 
	`HTTRACE
(
CACHE_TRACE
, "CachêIndex. C™'à›í `%s\' f‹ wrôög\n" 
_
 
ödex
);

300 
	`HT_FREE
(
ödex
);

301  
NO
;

309 
HTLi°
 * 
cur
;

310 
˙t
;

311 
˙t
=0; c¡<
HT_XL_HASH_SIZE
; cnt++) {

312 i‡((
cur
 = 
CacheTabÀ
[
˙t
])) {

313 
HTCache
 * 
¥es
;

314 (
¥es
 = (
HTCache
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

315 i‡(
	`Ârötf
(
Â
, "%s %s %s %ld %ld %ld %c %d %d %ld %ld %ld %c\r\n",

316 
¥es
->
uæ
,

317 
¥es
->
ˇchíame
,

318 
¥es
->
ëag
 ?Öªs->ëag : 
HT_CACHE_EMPTY_ETAG
,

319 (Ë(
¥es
->
lm
),

320 (Ë(
¥es
->
expúes
),

321 
¥es
->
size
,

322 
¥es
->
ønge
+0x30,

323 
¥es
->
hash
,

324 
¥es
->
hôs
,

325 (Ë(
¥es
->
‰esh√ss_li„time
),

326 (Ë(
¥es
->
ª•⁄£_time
),

327 (Ë(
¥es
->
c‹ª˘ed_öôül_age
),

328 
¥es
->
mu°_ªvÆid©e
+0x30) < 0) {

329 
	`HTTRACE
(
CACHE_TRACE
, "Cache Index. Error writing cache index\n");

330  
NO
;

338 
	`f˛o£
(
Â
);

339 
	`HT_FREE
(
ödex
);

341  
NO
;

342 
	}
}

348 
PRIVATE
 
BOOL
 
	$HTCacheIndex_∑r£Löe
 (* 
löe
)

350 
HTCache
 * 
ˇche
 = 
NULL
;

351 i‡(
löe
) {

352 
vÆid©e
;

353 
ønge
;

354 i‡((
ˇche
 = (
HTCache
 *Ë
	`HT_CALLOC
(1, (HTCache))Ë=
NULL
)

355 
	`HT_OUTOFMEM
("HTCacheIndex_parseLine");

361 * 
uæ
 = 
	`HTNextFõld
(&
löe
);

362 * 
ˇchíame
 = 
	`HTNextFõld
(&
löe
);

363 * 
ëag
 = 
	`HTNextFõld
(&
löe
);

364 
	`SåAŒocC›y
(
ˇche
->
uæ
, url);

365 
	`SåAŒocC›y
(
ˇche
->
ˇchíame
, cachename);

366 i‡(
	`°rcmp
(
ëag
, 
HT_CACHE_EMPTY_ETAG
)Ë
	`SåAŒocC›y
(
ˇche
->etag,Étag);

368 #ifde‡
HAVE_LONG_TIME_T


375 i‡(
	`ssˇnf
(
löe
, "%ld %ld %ld %c %d %d %ld %ld %ld %c",

377 i‡(
	`ssˇnf
(
löe
, "%d %d %ld %c %d %d %d %d %d %c",

379 &
ˇche
->
lm
,

380 &
ˇche
->
expúes
,

381 &
ˇche
->
size
,

382 &
ønge
,

383 &
ˇche
->
hash
,

384 &
ˇche
->
hôs
,

385 &
ˇche
->
‰esh√ss_li„time
,

386 &
ˇche
->
ª•⁄£_time
,

387 &
ˇche
->
c‹ª˘ed_öôül_age
,

388 &
vÆid©e
) < 0) {

389 
	`HTTRACE
(
CACHE_TRACE
, "Cache Index. ErrorÑeading cache index\n");

390  
NO
;

392 
ˇche
->
ønge
 =Ñange-0x30;

393 
ˇche
->
mu°_ªvÆid©e
 = 
vÆid©e
-0x30;

399 i‡(
ˇche
) {

400 
HTAnch‹
 * 
™ch‹
 = 
	`HTAnch‹_födAddªss
(
ˇche
->
uæ
);

401 
HTP¨ítAnch‹
 * 
∑ª¡
 = 
	`HTAnch‹_∑ª¡
(
™ch‹
);

402 
	`HTAnch‹_£tExpúes
(
∑ª¡
, 
ˇche
->
expúes
);

403 
	`HTAnch‹_£tLa°Modifõd
(
∑ª¡
, 
ˇche
->
lm
);

404 i‡(
ˇche
->
ëag
Ë
	`HTAnch‹_£tEèg
(
∑ª¡
, cache->etag);

411 i‡(!
CacheTabÀ
) {

412 i‡((
CacheTabÀ
 = (
HTLi°
 **Ë
	`HT_CALLOC
(
HT_XL_HASH_SIZE
,

413 (
HTLi°
 *))Ë=
NULL
)

414 
	`HT_OUTOFMEM
("HTCache_parseLine");

416 i‡(
ˇche
->
hash
 >0 && cache->hash < 
HT_XL_HASH_SIZE
) {

417 
hash
 = 
ˇche
->hash;

418 i‡(!
CacheTabÀ
[
hash
]ËCacheTabÀ[hash] = 
	`HTLi°_√w
();

419 
	`HTLi°_addObje˘
(
CacheTabÀ
[
hash
], (*Ë
ˇche
);

423 
HTCacheC⁄ã¡Size
 +
ˇche
->
size
;

425  
YES
;

427  
NO
;

428 
	}
}

433 
PRIVATE
 
	$HTCacheIndex_put_block
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
)

435 
l
 > 0) {

436 i‡(
me
->
EOL°©e
 =
EOL_FCR
) {

437 i‡(*
b
 =
LF
)

438 
me
->
EOL°©e
 = 
EOL_FLF
;

439 i‡(
	`is•a˚
((Ë*
b
))

440 
me
->
EOL°©e
 = 
EOL_DOT
;

442 
	`HTCacheIndex_∑r£Löe
(
	`HTChunk_d©a
(
me
->
buf„r
));

443 
me
->
EOL°©e
 = 
EOL_BEGIN
;

444 
	`HTChunk_˛ór
(
me
->
buf„r
);

447 } i‡(
me
->
EOL°©e
 =
EOL_FLF
) {

448 i‡(
	`is•a˚
((Ë*
b
))

449 
me
->
EOL°©e
 = 
EOL_DOT
;

451 
	`HTCacheIndex_∑r£Löe
(
	`HTChunk_d©a
(
me
->
buf„r
));

452 
me
->
EOL°©e
 = 
EOL_BEGIN
;

453 
	`HTChunk_˛ór
(
me
->
buf„r
);

456 } i‡(
me
->
EOL°©e
 =
EOL_DOT
) {

457 i‡(
	`is•a˚
((Ë*
b
)) {

458 
me
->
EOL°©e
 = 
EOL_BEGIN
;

459 
	`HTChunk_putc
(
me
->
buf„r
, ' ');

461 
	`HTCacheIndex_∑r£Löe
(
	`HTChunk_d©a
(
me
->
buf„r
));

462 
me
->
EOL°©e
 = 
EOL_BEGIN
;

463 
	`HTChunk_˛ór
(
me
->
buf„r
);

466 } i‡(*
b
 =
CR
) {

467 
me
->
EOL°©e
 = 
EOL_FCR
;

468 } i‡(*
b
 =
LF
) {

469 
me
->
EOL°©e
 = 
EOL_FLF
;

471 
	`HTChunk_putc
(
me
->
buf„r
, *
b
);

472 
l
--; 
b
++;

474  
HT_OK
;

475 
	}
}

477 
PRIVATE
 
	$HTCacheIndex_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

479  
	`HTCacheIndex_put_block
(
me
, &
c
, 1);

480 
	}
}

482 
PRIVATE
 
	$HTCacheIndex_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

484  
	`HTCacheIndex_put_block
(
me
, 
s
, (Ë
	`°æí
(s));

485 
	}
}

487 
PRIVATE
 
	$HTCacheIndex_Êush
 (
HTSåóm
 * 
me
)

489 i‡(
me
) {

490 * 
Êush
 = 
	`HTChunk_d©a
(
me
->
buf„r
);

491 i‡(
Êush
Ë
	`HTCacheIndex_∑r£Löe
(flush);

492 
	`HTChunk_˛ór
(
me
->
buf„r
);

494  
HT_OK
;

495 
	}
}

497 
PRIVATE
 
	$HTCacheIndex_‰ì
 (
HTSåóm
 * 
me
)

499 i‡(
me
) {

500 
°©us
 = 
	`HTCacheIndex_Êush
(
me
);

501 
	`HTTRACE
(
APP_TRACE
, "Cache Index. FREEING....\n");

502 
	`HTChunk_dñëe
(
me
->
buf„r
);

503 
	`HT_FREE
(
me
);

504  
°©us
;

506  
HT_ERROR
;

507 
	}
}

509 
PRIVATE
 
	$HTCacheIndex_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

511 i‡(
me
) {

512 
°©us
 = 
HT_ERROR
;

513 
	`HTTRACE
(
APP_TRACE
, "Cache Index. ABORTING...\n");

514 
	`HTChunk_dñëe
(
me
->
buf„r
);

515 
	`HT_FREE
(
me
);

516  
°©us
;

518  
HT_ERROR
;

519 
	}
}

524 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTCacheIndexCœss
 =

527 
HTCacheIndex_Êush
,

528 
HTCacheIndex_‰ì
,

529 
HTCacheIndex_ab‹t
,

530 
HTCacheIndex_put_ch¨a˘î
,

531 
HTCacheIndex_put_°rög
,

532 
HTCacheIndex_put_block


535 
PRIVATE
 
HTSåóm
 * 
	$HTCacheIndexRódî
 (
HTReque°
 * 
ªque°
)

537 
HTSåóm
 * 
me
;

538 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

539 
	`HT_OUTOFMEM
("HTCacheIndexs");

540 
me
->
iß
 = &
HTCacheIndexCœss
;

541 
me
->
ªque°
 =Ñequest;

542 
me
->
buf„r
 = 
	`HTChunk_√w
(512);

543 
me
->
EOL°©e
 = 
EOL_BEGIN
;

544  
me
;

545 
	}
}

552 
PUBLIC
 
BOOL
 
	$HTCacheIndex_ªad
 (c⁄° * 
ˇche_roŸ
)

554 
BOOL
 
°©us
 = 
NO
;

555 i‡(
ˇche_roŸ
 && 
CacheTabÀ
 =
NULL
) {

556 
BOOL
 
wasI¡îa˘ive
;

557 * 
fûe
 = 
	`ˇche_ödex_«me
(
ˇche_roŸ
);

558 * 
ödex
 = 
	`HTLoˇlToWWW
(
fûe
, "cache:");

559 
HTAnch‹
 * 
™ch‹
 = 
	`HTAnch‹_födAddªss
(
ödex
);

560 
HTReque°
 * 
ªque°
 = 
	`HTReque°_√w
();

561 
	`HTReque°_£tPªem±ive
(
ªque°
, 
YES
);

562 
	`HTReque°_£tOuçutF‹m©
(
ªque°
, 
WWW_SOURCE
);

565 
	`HTReque°_addBef‹e
(
ªque°
, 
NULL
, NULL, NULL, 0, 
YES
);

566 
	`HTReque°_addA·î
(
ªque°
, 
NULL
, NULL, NULL, 
HT_ALL
, 0, 
YES
);

569 
	`HTReque°_£tOuçutSåóm
(
ªque°
, 
	`HTCacheIndexRódî
(request));

570 
	`HTReque°_£tAnch‹
(
ªque°
, 
™ch‹
);

571 
	`HTAnch‹_£tF‹m©
((
HTP¨ítAnch‹
 *Ë
™ch‹
, 
	`HTAtom_f‹
("www/cache-index"));

572 
wasI¡îa˘ive
 = 
	`HTAÀπ_öãø˘ive
();

573 
	`HTAÀπ_£tI¡îa˘ive
(
NO
);

574 
°©us
 = 
	`HTLﬂd
(
ªque°
, 
NO
);

575 
	`HTAÀπ_£tI¡îa˘ive
(
wasI¡îa˘ive
);

576 
	`HTReque°_dñëe
(
ªque°
);

577 
	`HT_FREE
(
fûe
);

578 
	`HT_FREE
(
ödex
);

580  
°©us
;

581 
	}
}

587 
PRIVATE
 
BOOL
 
	$¸óã_ˇche_roŸ
 (c⁄° * 
ˇche_roŸ
)

589 
°©
 
°©_öfo
;

590 * 
loc
 = 
NULL
;

591 * 
cur
 = 
NULL
;

592 
BOOL
 
¸óã
 = 
NO
;

593 i‡(!
ˇche_roŸ
Ë 
NO
;

594 
	`SåAŒocC›y
(
loc
, 
ˇche_roŸ
);

595 #ifde‡
WWW_MSWINDOWS


596 
cur
 = *(
loc
+1) == ':' ?Üoc+3 :Üoc+1;

598 
cur
 = 
loc
+1;

600 (
cur
 = 
	`°rchr
(cur, 
DIR_SEPARATOR_CHAR
))) {

601 *
cur
 = '\0';

602 i‡(
¸óã
 || 
	`HT_STAT
(
loc
, &
°©_öfo
) == -1) {

603 
¸óã
 = 
YES
;

604 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... Cª©ög dú `%s\'\n" 
_
 
loc
);

605 i‡(
	`MKDIR
(
loc
, 0777) < 0) {

606 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... can't create\n");

607 
	`HT_FREE
(
loc
);

608  
NO
;

611 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... dú `%s\'áÃódyÉxi°s\n" 
_
 
loc
);

613 *
cur
++ = 
DIR_SEPARATOR_CHAR
;

615 
	`HT_FREE
(
loc
);

616  
YES
;

617 
	}
}

623 
PRIVATE
 
BOOL
 
	$HTCacheMode_£tRoŸ
 (c⁄° * 
ˇche_roŸ
)

625 i‡(
ˇche_roŸ
) {

626 i‡((
HTCacheRoŸ
 = 
	`HTWWWToLoˇl
(
ˇche_roŸ
, "fûe:", 
NULL
)) == NULL)

627  
NO
;

628 i‡(*(
HTCacheRoŸ
+
	`°æí
(HTCacheRoŸ)-1Ë!
DIR_SEPARATOR_CHAR
)

629 
	`SåAŒocC©
(
HTCacheRoŸ
, 
DIR_SEPARATOR_STR
);

635 * 
addr
 = 
NULL
;

636 * 
¸
 = (*Ë
	`gëív
("WWW_CACHE");

637 i‡(!
¸
Ë¸ = (*Ë
	`gëív
("TMP");

638 i‡(!
¸
Ë¸ = (*Ë
	`gëív
("TEMP");

639 i‡(!
¸
Ë¸ = 
HT_CACHE_LOC
;

640 
addr
 = 
	`HTLoˇlToWWW
(
¸
, 
NULL
);

641 i‡(*(
addr
+
	`°æí
◊ddr)-1Ë!
DIR_SEPARATOR_CHAR
)

642 
	`SåAŒocC©
(
addr
, 
DIR_SEPARATOR_STR
);

643 
	`SåAŒocC©
(
addr
, 
HT_CACHE_ROOT
);

644 i‡(*(
addr
+
	`°æí
◊ddr)-1Ë!
DIR_SEPARATOR_CHAR
)

645 
	`SåAŒocC©
(
addr
, 
DIR_SEPARATOR_STR
);

646 i‡((
HTCacheRoŸ
 = 
	`HTWWWToLoˇl
(
addr
, "fûe:", 
NULL
)) == NULL) {

647 
	`HT_FREE
(
addr
);

648  
NO
;

650 
	`HT_FREE
(
addr
);

652 i‡(
	`¸óã_ˇche_roŸ
(
HTCacheRoŸ
Ë=
NO
)  NO;

653 
	`HTTRACE
(
CACHE_TRACE
, "CachêRoŸ.. Loˇ»roŸ sëÅÿ`%s\'\n" 
_
 
HTCacheRoŸ
);

654  
YES
;

655 
	}
}

661 
PUBLIC
 * 
	$HTCacheMode_gëRoŸ
 ()

663  
	`HTLoˇlToWWW
(
HTCacheRoŸ
, 
NULL
);

664 
	}
}

669 
PRIVATE
 
FILE
 *
	glocked_›í_fûe
 = {
NULL
};

671 
PRIVATE
 
BOOL
 
	$HTCache_gëSögÀU£rLock
 (c⁄° * 
roŸ
)

673 i‡(
roŸ
 && !
locked_›í_fûe
) {

674 
FILE
 * 
Â
;

675 * 
loˇti⁄
 = 
NULL
;

676 i‡((
loˇti⁄
 = (*)

677 
	`HT_MALLOC
(
	`°æí
(
roŸ
Ë+ såÀn(
HT_CACHE_LOCK
Ë+ 1)Ë=
NULL
)

678 
	`HT_OUTOFMEM
("HTCache_getLock");

679 
	`°r˝y
(
loˇti⁄
, 
roŸ
);

680 
	`°rˇt
(
loˇti⁄
, 
HT_CACHE_LOCK
);

681 i‡((
Â
 = 
	`f›í
(
loˇti⁄
, "r")Ë!
NULL
) {

682 
HTAÀπCÆlback
 *
cbf
 = 
	`HTAÀπ_föd
(
HT_A_CONFIRM
);

683 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... I¿`%s\' i†Æªady i¿u£\n" 
_
 
roŸ
);

684 
	`f˛o£
(
Â
);

685 i‡(
cbf
) {

686 
BOOL
 
ªsu…
 = (*
cbf
)(
NULL
, 
HT_A_CONFIRM
,

687 
HT_MSG_CACHE_LOCK
,
NULL
,
loˇti⁄
,NULL);

688 i‡(
ªsu…
 =
YES
) {

689 
	`REMOVE
(
loˇti⁄
);

691 
	`HT_FREE
(
loˇti⁄
);

692  
NO
;

695 
	`HT_FREE
(
loˇti⁄
);

696  
NO
;

699 i‡((
Â
 = 
	`f›í
(
loˇti⁄
, "w")Ë=
NULL
) {

700 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... C™'à›í `%s\' f‹ wrôög\n" 
_
 
loˇti⁄
);

701 
	`HT_FREE
(
loˇti⁄
);

702  
NO
;

704 
locked_›í_fûe
 = 
Â
;

705 
	`HT_FREE
(
loˇti⁄
);

706  
YES
;

708  
NO
;

709 
	}
}

714 
PRIVATE
 
BOOL
 
	$HTCache_dñëeSögÀU£rLock
 (c⁄° * 
roŸ
)

716 i‡(
roŸ
) {

717 * 
loˇti⁄
 = 
NULL
;

718 i‡((
loˇti⁄
 = (*)

719 
	`HT_MALLOC
(
	`°æí
(
roŸ
Ë+ såÀn(
HT_CACHE_LOCK
Ë+ 1)Ë=
NULL
)

720 
	`HT_OUTOFMEM
("HTCache_deleteLock");

721 
	`°r˝y
(
loˇti⁄
, 
roŸ
);

722 
	`°rˇt
(
loˇti⁄
, 
HT_CACHE_LOCK
);

724 i‡(
locked_›í_fûe
) {

725 
	`f˛o£
(
locked_›í_fûe
);

726 
locked_›í_fûe
 = 
NULL
;

728 
	`REMOVE
(
loˇti⁄
);

729 
	`HT_FREE
(
loˇti⁄
);

730  
YES
;

732  
NO
;

733 
	}
}

741 
PUBLIC
 
BOOL
 
	$HTCacheInô
 (c⁄° * 
ˇche_roŸ
, 
size
)

743 i‡(!
	`HTLib_£cuª
(Ë&& !
HTCacheRoŸ
) {

748 i‡(
	`HTCacheMode_£tRoŸ
(
ˇche_roŸ
Ë!
YES
Ë 
NO
;

753 
	`HTCacheMode_£tMaxSize
(
size
);

759 i‡(
	`HTCache_gëSögÀU£rLock
(
HTCacheRoŸ
Ë=
NO
)

760  
NO
;

765 
	`HTCacheIndex_ªad
(
HTCacheRoŸ
);

770 
	`HTNë_addBef‹e
(
HTCacheFûãr
, "hâp://*", 
NULL
, 
HT_FILTER_MIDDLE
);

771 
	`HTNë_addA·î
(
HTCacheUpd©eFûãr
, "hâp://*", 
NULL
,

772 
HT_NOT_MODIFIED
, 
HT_FILTER_MIDDLE
);

778 
	`HTNë_addA·î
(
HTCacheCheckFûãr
, "hâp://*", 
NULL
, 
HT_ALL
,

779 
HT_FILTER_MIDDLE
);

784 
HTCacheE«bÀ
 = 
YES
;

785 
HTCacheInôülized
 = 
YES
;

786  
YES
;

788  
NO
;

789 
	}
}

794 
PUBLIC
 
BOOL
 
	$HTCacheTîmö©e
 ()

796 i‡(
HTCacheInôülized
) {

801 
	`HTCacheIndex_wrôe
(
HTCacheRoŸ
);

806 
	`HTNë_dñëeBef‹e
(
HTCacheFûãr
);

807 
	`HTNë_dñëeA·î
(
HTCacheUpd©eFûãr
);

808 
	`HTNë_dñëeA·î
(
HTCacheCheckFûãr
);

813 
	`HTCache_dñëeSögÀU£rLock
(
HTCacheRoŸ
);

818 
	`HTCache_dñëeAŒ
();

823 
	`HT_FREE
(
HTCacheRoŸ
);

824 
HTCacheE«bÀ
 = 
NO
;

825  
YES
;

827  
NO
;

828 
	}
}

835 
PUBLIC
 
	$HTCacheMode_£tE«bÀd
 (
BOOL
 
mode
)

837 
HTCacheE«bÀ
 = 
mode
;

838 
	}
}

840 
PUBLIC
 
BOOL
 
	$HTCacheMode_íabÀd
 ()

842  
HTCacheE«bÀ
;

843 
	}
}

845 
PUBLIC
 
	$HTCacheMode_£tPrŸe˘ed
 (
BOOL
 
mode
)

847 
HTCachePrŸe˘ed
 = 
mode
;

848 
	}
}

850 
PUBLIC
 
BOOL
 
	$HTCacheMode_¥Ÿe˘ed
 ()

852  
HTCachePrŸe˘ed
;

853 
	}
}

861 
PUBLIC
 
	$HTCacheMode_£tDisc⁄√˘ed
 (
HTDisc⁄√˘edMode
 
mode
)

863 
Disc⁄√˘edMode
 = 
mode
;

864 
	}
}

866 
PUBLIC
 
HTDisc⁄√˘edMode
 
	$HTCacheMode_disc⁄√˘ed
 ()

868  
Disc⁄√˘edMode
;

869 
	}
}

871 
PUBLIC
 
BOOL
 
	$HTCacheMode_isDisc⁄√˘ed
 (
HTRñﬂd
 
mode
)

873  (
Disc⁄√˘edMode
 !
HT_DISCONNECT_NONE
);

874 
	}
}

884 
PUBLIC
 
	$HTCacheMode_£tExpúes
 (
HTExpúesMode
 
mode
)

886 
HTExpMode
 = 
mode
;

887 
	}
}

889 
PUBLIC
 
HTExpúesMode
 
	$HTCacheMode_expúes
 ()

891  
HTExpMode
;

892 
	}
}

900 
PUBLIC
 
BOOL
 
	$HTCacheMode_£tMaxSize
 (
size
)

902 
√w_size
 = 
size
 < 
HT_MIN_CACHE_TOTAL_SIZE
 ?

903 
HT_MIN_CACHE_TOTAL_SIZE
*
MEGA
 : 
size
*MEGA;

904 
ﬁd_size
 = 
HTCacheTŸÆSize
;

905 
HTCacheTŸÆSize
 = 
√w_size
;

906 
HTCacheFﬁdîSize
 = 
HTCacheTŸÆSize
/
HT_CACHE_FOLDER_PCT
;

907 
HTCacheGCBuf„r
 = 
HTCacheTŸÆSize
/
HT_CACHE_GC_PCT
;

908 i‡(
√w_size
 < 
ﬁd_size
Ë
	`HTCacheG¨bage
();

909 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... TŸÆ cachêsize: %ld wôh %ld byã†f‹ mëaöf‹m©i⁄ánd fﬁdî†™dáàÀa° %ld byã†‰ìá·îÉvîy gc\n" 
_


910 
HTCacheTŸÆSize
 
_
 
HTCacheFﬁdîSize
 _ 
HTCacheGCBuf„r
);

911  
YES
;

912 
	}
}

914 
PUBLIC
 
	$HTCacheMode_maxSize
 ()

916  
HTCacheTŸÆSize
 / 
MEGA
;

917 
	}
}

923 
PUBLIC
 
BOOL
 
	$HTCacheMode_£tMaxCacheE¡rySize
 (
size
)

925 
√w_size
 = 
size
*
MEGA
;

926 i‡(
√w_size
 > 0 &&Çew_sizê< 
HTCacheTŸÆSize
-
HTCacheFﬁdîSize
) {

927 
ﬁd_size
 = 
HTCacheMaxE¡rySize
;

928 
HTCacheMaxE¡rySize
 = 
√w_size
;

929 i‡(
√w_size
 < 
ﬁd_size
Ë
	`HTCacheG¨bage
();

930 
	`HTTRACE
(
CACHE_TRACE
, "Cache...... MaxÉ¡ry cachêsizêi†%ld\n" 
_
 
HTCacheMaxE¡rySize
);

931  
YES
;

933 
	`HTTRACE
(
CACHE_TRACE
, "Cache...... MaxÉntry cache size is unchanged\n");

934  
NO
;

935 
	}
}

937 
PUBLIC
 
	$HTCacheMode_maxCacheE¡rySize
 ()

939  
HTCacheMaxE¡rySize
 / 
MEGA
;

940 
	}
}

945 
PUBLIC
 
	$HTCacheMode_£tDeÁu…Expú©i⁄
 (c⁄° 
exp_time
)

947 
DeÁu…Expú©i⁄
 = 
exp_time
;

948 
	}
}

950 
PUBLIC
 
	$HTCacheMode_DeÁu…Expú©i⁄
 ()

952  
DeÁu…Expú©i⁄
;

953 
	}
}

959 
PRIVATE
 
BOOL
 
	$‰ì_obje˘
 (
HTCache
 * 
me
)

961 
	`HT_FREE
(
me
->
uæ
);

962 
	`HT_FREE
(
me
->
ˇchíame
);

963 
	`HT_FREE
(
me
->
ëag
);

964 
	`HT_FREE
(
me
);

965  
YES
;

966 
	}
}

968 
PRIVATE
 
BOOL
 
	$dñëe_obje˘
 (
HTLi°
 * 
li°
, 
HTCache
 * 
me
)

970 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... dñëê%∞‰omÜi° %p\n" 
_
 
me
 _ 
li°
);

971 
	`HTLi°_ªmoveObje˘
(
li°
, (*Ë
me
);

972 
HTCacheC⁄ã¡Size
 -
me
->
size
;

973 
	`‰ì_obje˘
(
me
);

974  
YES
;

975 
	}
}

986 
PRIVATE
 
BOOL
 
	$HTCache_¸óãLoˇti⁄
 (
HTCache
 * 
me
)

988 i‡(
me
 && 
HTCacheRoŸ
) {

989 
BOOL
 
°©us
 = 
YES
;

990 * 
∑th
 = 
NULL
;

991 
°©
 
°©_öfo
;

992 i‡((
∑th
 = (*Ë
	`HT_MALLOC
(
	`°æí
(
HTCacheRoŸ
Ë+ 10)Ë=
NULL
)

993 
	`HT_OUTOFMEM
("HTCache_createLocation");

998 
	`•rötf
(
∑th
, "%s%d", 
HTCacheRoŸ
, 
me
->
hash
);

999 i‡(
	`HT_STAT
(
∑th
, &
°©_öfo
) == -1) {

1000 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... Cª©êdú `%s\'\n" 
_
 
∑th
);

1001 i‡(
	`MKDIR
(
∑th
, 0777) < 0) {

1002 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... Can't create...\n");

1003 
°©us
 = 
NO
;

1006 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... Dúe˘‹y `%s\'áÃódyÉxi°s\n" 
_
 
∑th
);

1012 
me
->
ˇchíame
 = 
	`HTGëTmpFûeName
(
∑th
);

1013 
	`HT_FREE
(
∑th
);

1014  
°©us
;

1016  
NO
;

1017 
	}
}

1023 
PRIVATE
 
BOOL
 
	$HTCache_födName
 (
HTCache
 * 
me
)

1025 i‡(
me
) {

1031 
me
->
ˇchíame
 = 
	`HTGëTmpFûeName
(
NULL
);

1032  
	`HTCache_¸óãLoˇti⁄
(
me
);

1034  
NO
;

1035 
	}
}

1045 
PRIVATE
 
BOOL
 
	$ˇlcuœã_time
 (
HTCache
 * 
me
, 
HTReque°
 * 
ªque°
,

1046 
HTRe•⁄£
 * 
ª•⁄£
)

1048 i‡(
me
 && 
ªque°
) {

1049 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

1050 
time_t
 
d©e
 = 
	`HTAnch‹_d©e
(
™ch‹
);

1051 
me
->
ª•⁄£_time
 = 
	`time
(
NULL
);

1052 
me
->
expúes
 = 
	`HTAnch‹_expúes
(
™ch‹
);

1054 
time_t
 
≠∑ª¡_age
 = 
	`HTMAX
(0, 
me
->
ª•⁄£_time
 - 
d©e
);

1055 
time_t
 
c‹ª˘ed_ª˚ived_age
 = 
	`HTMAX
(
≠∑ª¡_age
, 
	`HTAnch‹_age
(
™ch‹
));

1056 
time_t
 
ª•⁄£_dñay
 = 
me
->
ª•⁄£_time
 - 
	`HTReque°_d©e
(
ªque°
);

1057 
me
->
c‹ª˘ed_öôül_age
 = 
c‹ª˘ed_ª˚ived_age
 + 
ª•⁄£_dñay
;

1066 
time_t
 
‰esh√ss_li„time
 = 
	`HTRe•⁄£_maxAge
(
ª•⁄£
);

1067 i‡(
‰esh√ss_li„time
 < 0) {

1068 i‡(
me
->
expúes
 < 0) {

1069 
time_t
 
lm
 = 
	`HTAnch‹_œ°Modifõd
(
™ch‹
);

1070 i‡(
lm
 < 0) {

1071 
‰esh√ss_li„time
 = 
DeÁu…Expú©i⁄
;

1073 
‰esh√ss_li„time
 = 
	`LM_EXPIRATION
(
d©e
 - 
lm
);

1074 i‡(
‰esh√ss_li„time
 > 
WARN_HEURISTICS
)

1075 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_WARN
, 
NO
,

1076 
HTERR_HEURISTIC_EXPIRATION
, 
NULL
, 0,

1080 
‰esh√ss_li„time
 = 
me
->
expúes
 - 
d©e
;

1082 
me
->
‰esh√ss_li„time
 = 
	`HTMAX
(0, freshness_lifetime);

1084 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... Re˚ived Agê%d, c‹ª˘ed %d, fªsh√s†li„timê%d\n" 
_


1085 
	`HTAnch‹_age
(
™ch‹
Ë
_
 
me
->
c‹ª˘ed_öôül_age
 _ me->
‰esh√ss_li„time
);

1086  
YES
;

1088  
NO
;

1089 
	}
}

1094 
PRIVATE
 
HTCache
 * 
	$HTCache_√w
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

1095 
HTP¨ítAnch‹
 * 
™ch‹
)

1097 
HTLi°
 * 
li°
 = 
NULL
;

1098 
HTCache
 * 
¥es
 = 
NULL
;

1099 
hash
 = 0;

1100 * 
uæ
 = 
NULL
;

1101 i‡(!
ªque°
 || !
ª•⁄£
 || !
™ch‹
) {

1102 
	`HTTRACE
(
CORE_TRACE
, "Cache....... Badárgument\n");

1103  
NULL
;

1107 i‡((
uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
™ch‹
))) {

1108 * 
±r
;

1109 
±r
=
uæ
; *ptr;Ötr++)

1110 
hash
 = (Ë((hash * 3 + (*(*Ë
±r
)Ë% 
HT_XL_HASH_SIZE
);

1111 i‡(!
CacheTabÀ
) {

1112 i‡((
CacheTabÀ
 = (
HTLi°
 **Ë
	`HT_CALLOC
(
HT_XL_HASH_SIZE
,

1113 (
HTLi°
 *))Ë=
NULL
)

1114 
	`HT_OUTOFMEM
("HTCache_new");

1116 i‡(!
CacheTabÀ
[
hash
]ËCacheTabÀ[hash] = 
	`HTLi°_√w
();

1117 
li°
 = 
CacheTabÀ
[
hash
];

1119  
NULL
;

1123 
HTLi°
 * 
cur
 = 
li°
;

1124 (
¥es
 = (
HTCache
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

1125 i‡(!
	`°rcmp
(
¥es
->
uæ
, url)) ;

1130 i‡(!
¥es
) {

1131 i‡((
¥es
 = (
HTCache
 *Ë
	`HT_CALLOC
(1, (HTCache))Ë=
NULL
)

1132 
	`HT_OUTOFMEM
("HTCache_new");

1133 
¥es
->
hash
 = hash;

1134 
¥es
->
uæ
 = url;

1135 
¥es
->
ønge
 = 
NO
;

1136 
	`HTCache_¸óãLoˇti⁄
(
¥es
);

1137 
	`HTLi°_addObje˘
(
li°
, (*Ë
¥es
);

1138 
√w_íåõs
++;

1140 
	`HT_FREE
(
uæ
);

1142 i‡(
	`HTCache_hasLock
(
¥es
)) {

1143 i‡(
	`HTCache_bªakLock
(
¥es
, 
ªque°
Ë=
NO
) {

1144 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... Entry %pálready in use\n");

1145  
¥es
;

1148 
	`HTCache_gëLock
(
¥es
, 
ªque°
);

1152 
	`ˇlcuœã_time
(
¥es
, 
ªque°
, 
ª•⁄£
);

1156 * 
ëag
 = 
	`HTAnch‹_ëag
(
™ch‹
);

1157 i‡(
ëag
Ë
	`SåAŒocC›y
(
¥es
->etag,Étag);

1158 
¥es
->
lm
 = 
	`HTAnch‹_œ°Modifõd
(
™ch‹
);

1162 
¥es
->
mu°_ªvÆid©e
 = 
	`HTRe•⁄£_mu°RevÆid©e
(
ª•⁄£
);

1163  
¥es
;

1164 
	}
}

1171 
PUBLIC
 
HTCache
 * 
	$HTCache_touch
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

1172 
HTP¨ítAnch‹
 * 
™ch‹
)

1174 
HTCache
 * 
ˇche
 = 
NULL
;

1177 i‡((
ˇche
 = 
	`HTCache_√w
(
ªque°
, 
ª•⁄£
, 
™ch‹
)Ë=
NULL
) {

1178 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... Can't getá cache object\n");

1179  
NULL
;

1183 i‡(
ˇche
) {

1184 
ˇche
->
size
 = 0;

1185 
ˇche
->
ønge
 = 
YES
;

1188  
ˇche
;

1189 
	}
}

1200 
PRIVATE
 
	$HTCacheFûãr
 (
HTReque°
 * 
ªque°
, * 
∑øm
, 
mode
)

1202 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

1203 * 
deÁu…_«me
 = 
	`HTReque°_deÁu…PutName
 (
ªque°
);

1204 
HTCache
 * 
ˇche
 = 
NULL
;

1205 
HTRñﬂd
 
ªlﬂd
 = 
	`HTReque°_ªlﬂdMode
(
ªque°
);

1206 
HTMëhod
 
mëhod
 = 
	`HTReque°_mëhod
(
ªque°
);

1207 
HTDisc⁄√˘edMode
 
disc⁄√˘
 = 
	`HTCacheMode_disc⁄√˘ed
();

1208 
BOOL
 
vÆid©e
 = 
NO
;

1213 i‡(!
	`HTCacheMode_íabÀd
()Ë 
HT_OK
;

1214 
	`HTTRACE
(
CACHE_TRACE
, "Cachefilter. CheckingÖersistent cache\n");

1219 i‡(
mëhod
 !
METHOD_GET
) {

1220 
	`HTTRACE
(
CACHE_TRACE
, "Cachefilter. We only check GET methods\n");

1221 } i‡(
ªlﬂd
 =
HT_CACHE_FLUSH
) {

1229 
vÆid©e
 = 
YES
;

1230 
	`HTReque°_addGnHd
(
ªque°
, 
HT_G_PRAGMA_NO_CACHE
);

1231 
	`HTReque°_addCacheC⁄åﬁ
(
ªque°
, "no-cache", "");

1237 
	`HTAnch‹_˛órHódî
(
™ch‹
);

1246 
ˇche
 = 
	`HTCache_föd
(
™ch‹
, 
deÁu…_«me
);

1247 i‡(
ˇche
) {

1248 
HTRñﬂd
 
ˇche_mode
 = 
	`HTCache_isFªsh
(
ˇche
, 
ªque°
);

1249 i‡(
ˇche_mode
 =
HT_CACHE_ERROR
Ë
ˇche
 = 
NULL
;

1250 
ªlﬂd
 = 
	`HTMAX
‘ñﬂd, 
ˇche_mode
);

1251 
	`HTReque°_£tRñﬂdMode
(
ªque°
, 
ªlﬂd
);

1258 i‡(
ªlﬂd
 =
HT_CACHE_RANGE_VALIDATE
) {

1263 
vÆid©e
 = 
YES
;

1264 
	`HTCache_gëLock
(
ˇche
, 
ªque°
);

1265 
	`HTReque°_addRqHd
(
ªque°
, 
HT_C_IF_RANGE
);

1266 } i‡(
ªlﬂd
 =
HT_CACHE_END_VALIDATE
) {

1271 
vÆid©e
 = 
YES
;

1272 
	`HTCache_gëLock
(
ˇche
, 
ªque°
);

1273 
	`HTReque°_addCacheC⁄åﬁ
(
ªque°
, "max-age", "0");

1274 } i‡(
ªlﬂd
 =
HT_CACHE_VALIDATE
) {

1280 
vÆid©e
 = 
YES
;

1281 
	`HTCache_gëLock
(
ˇche
, 
ªque°
);

1282 
	`HTReque°_addRqHd
(
ªque°
, 
HT_C_IF_NONE_MATCH
 | 
HT_C_IMS
);

1283 } i‡(
ˇche
) {

1296 * 
«me
 = 
	`HTCache_«me
(
ˇche
);

1297 
	`HTAnch‹_£tPhysiˇl
(
™ch‹
, 
«me
);

1298 
	`HTCache_addHô
(
ˇche
);

1299 
	`HT_FREE
(
«me
);

1310 i‡((!
ˇche
 || 
vÆid©e
Ë&& 
disc⁄√˘
 !
HT_DISCONNECT_NONE
) {

1311 i‡(
disc⁄√˘
 =
HT_DISCONNECT_EXTERNAL
)

1312 
	`HTReque°_addCacheC⁄åﬁ
(
ªque°
, "only-if-cached", "");

1314 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
,

1315 
HTERR_GATE_TIMEOUT
, "Disconnected Cache Mode",

1317  
HT_ERROR
;

1320  
HT_OK
;

1321 
	}
}

1331 
PRIVATE
 
	$HTCacheUpd©eFûãr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

1332 * 
∑øm
, 
°©us
)

1334 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

1335 * 
deÁu…_«me
 = 
	`HTReque°_deÁu…PutName
(
ªque°
);

1336 
HTCache
 * 
ˇche
 = 
	`HTCache_föd
(
™ch‹
, 
deÁu…_«me
);

1337 i‡(
ˇche
) {

1344 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... Merging metainformation\n");

1345 i‡(
	`HTRe•⁄£_isCachabÀ
(
ª•⁄£
Ë=
HT_NO_CACHE
) {

1346 
	`HTCache_ªmove
(
ˇche
);

1348 * 
«me
 = 
	`HTCache_«me
(
ˇche
);

1349 
	`HTAnch‹_£tPhysiˇl
(
™ch‹
, 
«me
);

1350 
	`HTCache_addHô
(
ˇche
);

1351 
	`HT_FREE
(
«me
);

1352 
	`HTCache_upd©eMëa
(
ˇche
, 
ªque°
, 
ª•⁄£
);

1361 
	`HTLﬂd
(
ªque°
, 
YES
);

1362  
HT_ERROR
;

1366 
	`HTCache_touch
(
ªque°
, 
ª•⁄£
, 
™ch‹
);

1369  
HT_OK
;

1370 
	}
}

1381 
PRIVATE
 
	$HTCacheCheckFûãr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

1382 * 
∑øm
, 
°©us
)

1384 i‡(
°©us
/100==2 && !
	`HTMëhod_isSa„
(
	`HTReque°_mëhod
(
ªque°
))) {

1385 i‡(
°©us
==201) {

1386 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTAnch‹_∑ª¡
(
	`HTRe•⁄£_ªdúe˘i⁄
(
ª•⁄£
));

1387 i‡(!
™ch‹
Ë™ch‹ = 
	`HTReque°_™ch‹
(
ªque°
);

1388 
	`HTCache_touch
(
ªque°
, 
ª•⁄£
, 
™ch‹
);

1390 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

1391 * 
deÁu…_«me
 = 
	`HTReque°_deÁu…PutName
(
ªque°
);

1392 
HTCache
 * 
ˇche
 = 
	`HTCache_föd
(
™ch‹
, 
deÁu…_«me
);

1393 i‡(
ˇche
) {

1402 i‡(
°©us
 == 204) {

1403 
	`HTCache_upd©eMëa
(
ˇche
, 
ªque°
, 
ª•⁄£
);

1404 
ˇche
->
size
 = 0;

1405 
ˇche
->
ønge
 = 
YES
;

1407 
	`HTCache_wrôeMëa
 (
ˇche
, 
ªque°
, 
ª•⁄£
);

1410 
	`REMOVE
(
ˇche
->
ˇchíame
);

1412 
	`HTCache_ªmove
(
ˇche
);

1415 
	`HTCache_touch
(
ªque°
, 
ª•⁄£
, 
™ch‹
);

1418  
HT_OK
;

1419 
	}
}

1427 
PRIVATE
 
BOOL
 
	$HTCache_£tSize
 (
HTCache
 * 
ˇche
, 
wrôãn
, 
BOOL
 
≠≥nd
)

1429 i‡(
ˇche
) {

1435 i‡(
ˇche
->
size
 > 0 && !
≠≥nd
Ë
HTCacheC⁄ã¡Size
 -= cache->size;

1436 
ˇche
->
size
 = 
wrôãn
;

1437 
HTCacheC⁄ã¡Size
 +
wrôãn
;

1443 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... TŸÆ sizê%ld\n" 
_
 
HTCacheC⁄ã¡Size
);

1444 i‡(
	`°¨tGC
()Ë
	`HTCacheG¨bage
();

1445  
YES
;

1447  
NO
;

1448 
	}
}

1458 
PUBLIC
 
HTCache
 * 
	$HTCache_föd
 (
HTP¨ítAnch‹
 * 
™ch‹
, * 
deÁu…_«me
)

1460 
HTLi°
 * 
li°
 = 
NULL
;

1461 
HTCache
 * 
¥es
 = 
NULL
;

1464 i‡(
	`HTCacheMode_íabÀd
(Ë&& 
™ch‹
 && 
CacheTabÀ
) {

1465 * 
uæ
 = 
NULL
;

1466 
hash
 = 0;

1467 * 
±r
;

1469 i‡(
deÁu…_«me
)

1470 
	`SåAŒocC›y
 (
uæ
, 
deÁu…_«me
);

1472 
uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
™ch‹
);

1473 
±r
 = 
uæ
;

1475 ; *
±r
;Ötr++)

1476 
hash
 = (Ë((hash * 3 + (*(*Ë
±r
)Ë% 
HT_XL_HASH_SIZE
);

1477 i‡(!
CacheTabÀ
[
hash
]) {

1478 
	`HT_FREE
(
uæ
);

1479  
NULL
;

1481 
li°
 = 
CacheTabÀ
[
hash
];

1485 
HTLi°
 * 
cur
 = 
li°
;

1486 (
¥es
 = (
HTCache
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

1487 i‡(!
	`°rcmp
(
¥es
->
uæ
, url)) {

1488 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... Found %∞hô†%d\n" 
_


1489 
¥es
 
_
Öªs->
hôs
);

1494 
	`HT_FREE
(
uæ
);

1496  
¥es
;

1497 
	}
}

1503 
PRIVATE
 
BOOL
 
	$HTCache_dñëe
 (
HTCache
 * 
ˇche
)

1505 i‡(
ˇche
 && 
CacheTabÀ
) {

1506 
HTLi°
 * 
cur
 = 
CacheTabÀ
[
ˇche
->
hash
];

1507  
cur
 && 
	`dñëe_obje˘
(cur, 
ˇche
);

1509  
NO
;

1510 
	}
}

1517 
PUBLIC
 
BOOL
 
	$HTCache_dñëeAŒ
 ()

1519 i‡(
CacheTabÀ
) {

1520 
HTLi°
 * 
cur
;

1521 
˙t
;

1524 
˙t
=0; c¡<
HT_XL_HASH_SIZE
; cnt++) {

1525 i‡((
cur
 = 
CacheTabÀ
[
˙t
])) {

1526 
HTCache
 * 
¥es
;

1527 (
¥es
 = (
HTCache
 *Ë
	`HTLi°_√xtObje˘
(
cur
)Ë!
NULL
)

1528 
	`‰ì_obje˘
(
¥es
);

1530 
	`HTLi°_dñëe
(
CacheTabÀ
[
˙t
]);

1532 
	`HT_FREE
(
CacheTabÀ
);

1533 
HTCacheC⁄ã¡Size
 = 0L;

1534  
YES
;

1536  
NO
;

1537 
	}
}

1546 
PRIVATE
 * 
	$HTCache_mëaLoˇti⁄
 (
HTCache
 * 
ˇche
)

1548 * 
loˇl
 = 
NULL
;

1549 i‡(
ˇche
 && cache->
ˇchíame
 && *cache->cachename) {

1550 i‡((
loˇl
 = (*Ë
	`HT_MALLOC
(
	`°æí
(
ˇche
->
ˇchíame
) +

1551 
	`°æí
(
HT_CACHE_META
Ë+ 5)Ë=
NULL
)

1552 
	`HT_OUTOFMEM
("HTCache_metaLocation");

1553 
	`•rötf
(
loˇl
, "%s%s", 
ˇche
->
ˇchíame
, 
HT_CACHE_META
);

1555  
loˇl
;

1556 
	}
}

1564 
PRIVATE
 
BOOL
 
	$mëa_wrôe
 (
FILE
 * 
Â
, 
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
)

1566 i‡(
Â
 && 
ªque°
 && 
ª•⁄£
) {

1567 
HTAssocLi°
 * 
hódîs
 = 
	`HTAnch‹_hódî
(
	`HTReque°_™ch‹
(
ªque°
));

1568 
HTAssocLi°
 * 
c⁄√˘i⁄
 = 
	`HTRe•⁄£_c⁄√˘i⁄
(
ª•⁄£
);

1569 * 
noˇche
 = 
	`HTRe•⁄£_noCache
(
ª•⁄£
);

1574 i‡(!
hódîs
Ë 
NO
;

1580 i‡(
c⁄√˘i⁄
 || 
noˇche
) {

1585 i‡(
noˇche
) {

1586 * 
löe
 = 
NULL
;

1587 * 
±r
 = 
NULL
;

1588 * 
fõld
 = 
NULL
;

1589 
	`SåAŒocC›y
(
löe
, 
noˇche
);

1590 
±r
 = 
löe
;

1591 (
fõld
 = 
	`HTNextFõld
(&
±r
)Ë!
NULL
)

1592 
	`HTAssocLi°_ªmoveObje˘
(
hódîs
, 
fõld
);

1593 
	`HT_FREE
(
löe
);

1599 i‡(
c⁄√˘i⁄
) {

1600 
HTAssoc
 * 
¥es
;

1601 (
¥es
=(
HTAssoc
 *Ë
	`HTAssocLi°_√xtObje˘
(
c⁄√˘i⁄
))) {

1602 * 
fõld
 = 
	`HTAssoc_«me
(
¥es
);

1603 
	`HTAssocLi°_ªmoveObje˘
(
hódîs
, 
fõld
);

1613 
HTAssocLi°
 * 
cur
 = 
hódîs
;

1614 
HTAssoc
 * 
¥es
;

1615 (
¥es
 = (
HTAssoc
 *Ë
	`HTAssocLi°_√xtObje˘
(
cur
))) {

1616 * 
«me
 = 
	`HTAssoc_«me
(
¥es
);

1619 i‡(
	`°rˇ£comp
(
«me
, "connection") &&

1620 
	`°rˇ£comp
(
«me
, "keep-alive") &&

1621 
	`°rˇ£comp
(
«me
, "proxy-authenticate") &&

1622 
	`°rˇ£comp
(
«me
, "proxy-authorization") &&

1623 
	`°rˇ£comp
(
«me
, "transfer-encoding") &&

1624 
	`°rˇ£comp
(
«me
, "upgrade")) {

1625 i‡(
	`Ârötf
(
Â
, "%s: %s\n", 
«me
, 
	`HTAssoc_vÆue
(
¥es
)) < 0) {

1626 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... Error writing metainfo\n");

1627  
NO
;

1636 i‡(
	`Ârötf
(
Â
, "\n") < 0) {

1637 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... Error writing metainfo\n");

1638  
NO
;

1640  
YES
;

1642  
NO
;

1643 
	}
}

1649 
PUBLIC
 
BOOL
 
	$HTCache_wrôeMëa
 (
HTCache
 * 
ˇche
, 
HTReque°
 * 
ªque°
,

1650 
HTRe•⁄£
 * 
ª•⁄£
)

1652 i‡(
ˇche
 && 
ªque°
 && 
ª•⁄£
) {

1653 
BOOL
 
°©us
;

1654 
FILE
 * 
Â
;

1655 * 
«me
 = 
	`HTCache_mëaLoˇti⁄
(
ˇche
);

1656 i‡(!
«me
) {

1657 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... Invalid cacheÉntry\n");

1658 
	`HTCache_ªmove
(
ˇche
);

1659  
NO
;

1661 i‡((
Â
 = 
	`f›í
(
«me
, "wb")Ë=
NULL
) {

1662 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... C™'à›í `%s\' f‹ wrôög\n" 
_
 
«me
);

1663 
	`HTCache_ªmove
(
ˇche
);

1664 
	`HT_FREE
(
«me
);

1665  
NO
;

1667 
°©us
 = 
	`mëa_wrôe
(
Â
, 
ªque°
, 
ª•⁄£
);

1668 
	`f˛o£
(
Â
);

1669 
	`HT_FREE
(
«me
);

1670  
°©us
;

1672  
NO
;

1673 
	}
}

1675 
PRIVATE
 
BOOL
 
	$mëa_ªad
 (
FILE
 * 
Â
, 
HTReque°
 * 
ªque°
, 
HTSåóm
 * 
èrgë
)

1677 i‡(
Â
 && 
ªque°
 && 
èrgë
) {

1678 
°©us
;

1679 
buf„r
[512];

1681 i‡((
°©us
 = 
	`‰ód
(
buf„r
, 1, 512, 
Â
)) <= 0) {

1682 
	`HTTRACE
(
PROT_TRACE
, "Cache....... Meta informationÜoaded\n");

1683  
YES
;

1687 
°©us
 = (*
èrgë
->
iß
->
put_block
)—¨gë, 
buf„r
, status);

1689 i‡(
°©us
 =
HT_LOADED
) {

1690 (*
èrgë
->
iß
->
Êush
)(target);

1691  
YES
;

1693 i‡(
°©us
 < 0) {

1694 
	`HTTRACE
(
PROT_TRACE
, "Cache....... T¨gë ERROR %d\n" 
_
 
°©us
);

1699  
NO
;

1700 
	}
}

1706 
PRIVATE
 
BOOL
 
	$HTCache_ªadMëa
 (
HTCache
 * 
ˇche
, 
HTReque°
 * 
ªque°
)

1708 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

1709 i‡(
ˇche
 && 
ªque°
 && 
™ch‹
) {

1710 
BOOL
 
°©us
;

1711 
FILE
 * 
Â
;

1712 * 
«me
 = 
	`HTCache_mëaLoˇti⁄
(
ˇche
);

1713 i‡(!
«me
) {

1714 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... InvÆid më®«me\n" 
_
 
«me
);

1715 
	`HTCache_ªmove
(
ˇche
);

1716  
NO
;

1718 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... Lookög f‹ `%s\'\n" 
_
 
«me
);

1719 i‡((
Â
 = 
	`f›í
(
«me
, "rb")Ë=
NULL
) {

1720 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... C™'à›í `%s\' f‹Ñódög\n" 
_
 
«me
);

1721 
	`HTCache_ªmove
(
ˇche
);

1722 
	`HT_FREE
(
«me
);

1724 
HTSåóm
 * 
èrgë
 = 
	`HTSåómSèck
(
WWW_MIME_HEAD
, 
WWW_DEBUG
,

1725 
	`HTBœckHﬁe
(), 
ªque°
, 
NO
);

1729 
	`HTRe•⁄£_£tCachabÀ
(
	`HTReque°_ª•⁄£
(
ªque°
), 
HT_CACHE_ALL
);

1730 
°©us
 = 
	`mëa_ªad
(
Â
, 
ªque°
, 
èrgë
);

1731 (*
èrgë
->
iß
->
_‰ì
)(target);

1736 
	`HTReque°_£tRe•⁄£
(
ªque°
, 
NULL
);

1737 
	`f˛o£
(
Â
);

1738 
	`HT_FREE
(
«me
);

1739  
°©us
;

1742  
NO
;

1743 
	}
}

1750 
PUBLIC
 
BOOL
 
	$HTCache_upd©eMëa
 (
HTCache
 * 
ˇche
, 
HTReque°
 * 
ªque°
,

1751 
HTRe•⁄£
 * 
ª•⁄£
)

1753 i‡(
ˇche
 && 
ªque°
 && 
ª•⁄£
) {

1754 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

1755 
ˇche
->
hôs
++;

1758 
	`ˇlcuœã_time
(
ˇche
, 
ªque°
, 
ª•⁄£
);

1762 * 
ëag
 = 
	`HTAnch‹_ëag
(
™ch‹
);

1763 i‡(
ëag
Ë
	`SåAŒocC›y
(
ˇche
->etag,Étag);

1764 
ˇche
->
lm
 = 
	`HTAnch‹_œ°Modifõd
(
™ch‹
);

1768 
ˇche
->
mu°_ªvÆid©e
 = 
	`HTRe•⁄£_mu°RevÆid©e
(
ª•⁄£
);

1770  
YES
;

1772  
NO
;

1773 
	}
}

1775 
PUBLIC
 
BOOL
 
	$HTCache_ª£tMëa
 (
HTCache
 * 
ˇche
, 
HTReque°
 * 
ªque°
,

1776 
HTRe•⁄£
 * 
ª•⁄£
)

1780 
	`HTCache_upd©eMëa
 (
ˇche
, 
ªque°
, 
ª•⁄£
);

1781 
ˇche
->
size
 = 0;

1782 
ˇche
->
ønge
 = 
YES
;

1784 
	`HTCache_wrôeMëa
 (
ˇche
, 
ªque°
, 
ª•⁄£
);

1787 
	`REMOVE
(
ˇche
->
ˇchíame
);

1789  
YES
;

1790 
	}
}

1796 
PRIVATE
 
BOOL
 
	$Êush_obje˘
 (
HTCache
 * 
ˇche
)

1798 i‡(
ˇche
 && !
	`HTCache_hasLock
(cache)) {

1799 * 
hód
 = 
	`HTCache_mëaLoˇti⁄
(
ˇche
);

1800 
	`REMOVE
(
hód
);

1801 
	`HT_FREE
(
hód
);

1802 
	`REMOVE
(
ˇche
->
ˇchíame
);

1803  
YES
;

1805  
NO
;

1806 
	}
}

1814 
PUBLIC
 
BOOL
 
	$HTCache_ÊushAŒ
 ()

1816 i‡(
CacheTabÀ
) {

1817 
HTLi°
 * 
cur
;

1818 
˙t
;

1821 
˙t
=0; c¡<
HT_XL_HASH_SIZE
; cnt++) {

1822 i‡((
cur
 = 
CacheTabÀ
[
˙t
])) {

1823 
HTCache
 * 
¥es
;

1824 (
¥es
 = (
HTCache
 *Ë
	`HTLi°_√xtObje˘
(
cur
)Ë!
NULL
) {

1825 
	`Êush_obje˘
(
¥es
);

1826 
	`‰ì_obje˘
(
¥es
);

1829 
	`HTLi°_dñëe
(
CacheTabÀ
[
˙t
]);

1830 
CacheTabÀ
[
˙t
] = 
NULL
;

1834 
	`HTCacheIndex_wrôe
(
HTCacheRoŸ
);

1835 
HTCacheC⁄ã¡Size
 = 0L;

1836  
YES
;

1838  
NO
;

1839 
	}
}

1848 
PUBLIC
 
HTRñﬂd
 
	$HTCache_isFªsh
 (
HTCache
 * 
ˇche
, 
HTReque°
 * 
ªque°
)

1850 
HTAssocLi°
 * 
cc
 = 
	`HTReque°_ˇcheC⁄åﬁ
(
ªque°
);

1851 i‡(
ˇche
) {

1852 
time_t
 
max_age
 = -1;

1853 
time_t
 
max_°Æe
 = -1;

1854 
time_t
 
mö_‰esh
 = -1;

1860 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

1861 i‡(!
	`HTAnch‹_hódîP¨£d
(
™ch‹
)) {

1862 i‡(
	`HTCache_ªadMëa
(
ˇche
, 
ªque°
Ë!
YES
)

1863  
HT_CACHE_ERROR
;

1864 
	`HTAnch‹_£tHódîP¨£d
(
™ch‹
);

1871 i‡(
ˇche
->
size
 == 0)

1872  
HT_CACHE_FLUSH
;

1878 i‡(
ˇche
->
ønge
) {

1879 
buf
[20];

1880 
	`•rötf
(
buf
, "%ld-", 
ˇche
->
size
);

1881 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... Askög f‹Ñ™gê`%s\'\n" 
_
 
buf
);

1882 
	`HTReque°_addR™ge
(
ªque°
, "byãs", 
buf
);

1883 
	`HTReque°_addRqHd
(
ªque°
, 
HT_C_RANGE
);

1884  
HT_CACHE_RANGE_VALIDATE
;

1891 i‡(
ˇche
->
mu°_ªvÆid©e
)

1892  
HT_CACHE_VALIDATE
;

1897 i‡(
cc
) {

1898 * 
tokí
 = 
NULL
;

1899 i‡((
tokí
 = 
	`HTAssocLi°_födObje˘
(
cc
, "max-age")))

1900 
max_age
 = 
	`©ﬁ
(
tokí
);

1901 i‡((
tokí
 = 
	`HTAssocLi°_födObje˘
(
cc
, "max-stale")))

1902 
max_°Æe
 = 
	`©ﬁ
(
tokí
);

1903 i‡((
tokí
 = 
	`HTAssocLi°_födObje˘
(
cc
, "min-fresh")))

1904 
mö_‰esh
 = 
	`©ﬁ
(
tokí
);

1911 
time_t
 
ªsidít_time
 = 
	`time
(
NULL
Ë- 
ˇche
->
ª•⁄£_time
;

1912 
time_t
 
cuºít_age
 = 
ˇche
->
c‹ª˘ed_öôül_age
 + 
ªsidít_time
;

1918 i‡(
max_age
 >0 && 
cuºít_age
 > max_age) {

1919 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... Max-age validation\n");

1920  
HT_CACHE_VALIDATE
;

1922 i‡(
mö_‰esh
 >= 0 &&

1923 
ˇche
->
‰esh√ss_li„time
 < 
cuºít_age
 + 
mö_‰esh
) {

1924 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... Min-fresh validation\n");

1925  
HT_CACHE_VALIDATE
;

1928  (
ˇche
->
‰esh√ss_li„time
 +

1929 (
max_°Æe
 >0 ? max_°Æê: 0Ë> 
cuºít_age
) ?

1930 
HT_CACHE_OK
 : 
HT_CACHE_VALIDATE
;

1933  
HT_CACHE_FLUSH
;

1934 
	}
}

1941 
PUBLIC
 
BOOL
 
	$HTCache_gëLock
 (
HTCache
 * 
ˇche
, 
HTReque°
 * 
ªque°
)

1943 i‡(
ˇche
 && 
ªque°
) {

1944 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... Lockög cachêíåy %p\n" 
_
 
ˇche
);

1945 
ˇche
->
lock
 = 
ªque°
;

1946  
YES
;

1948  
NO
;

1949 
	}
}

1951 
PUBLIC
 
BOOL
 
	$HTCache_ªÀa£Lock
 (
HTCache
 * 
ˇche
)

1953 i‡(
ˇche
) {

1954 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... U∆ockög cachêíåy %p\n" 
_
 
ˇche
);

1955 
ˇche
->
lock
 = 
NULL
;

1956  
YES
;

1958  
NO
;

1959 
	}
}

1961 
PUBLIC
 
BOOL
 
	$HTCache_hasLock
 (
HTCache
 * 
ˇche
)

1963  
ˇche
 && cache->
lock
;

1964 
	}
}

1966 
PUBLIC
 
BOOL
 
	$HTCache_bªakLock
 (
HTCache
 * 
ˇche
, 
HTReque°
 * 
ªque°
)

1968 i‡(
ˇche
 && cache->
lock
) {

1969 i‡(
ˇche
->
lock
 =
ªque°
) {

1970 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... BªakögÜock o¿íåy %p\n" 
_
 
ˇche
);

1971 
ˇche
->
lock
 = 
NULL
;

1972  
YES
;

1975  
NO
;

1976 
	}
}

1985 
PUBLIC
 * 
	$HTCache_«me
 (
HTCache
 * 
ˇche
)

1987 i‡(
ˇche
) {

1988 * 
loˇl
 = 
ˇche
->
ˇchíame
;

1989 * 
uæ
 = 
	`HTLoˇlToWWW
(
loˇl
, "cache:");

1990  
uæ
;

1992  
NULL
;

1993 
	}
}

1999 
PUBLIC
 
BOOL
 
	$HTCache_ªmove
 (
HTCache
 * 
ˇche
)

2001  
	`Êush_obje˘
(
ˇche
Ë&& 
	`HTCache_dñëe
(cache);

2002 
	}
}

2004 
PUBLIC
 
BOOL
 
	$HTCache_addHô
 (
HTCache
 * 
ˇche
)

2006 i‡(
ˇche
) {

2007 
ˇche
->
hôs
++;

2008 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... Hô†f‹ %∞i†%d\n" 
_


2009 
ˇche
 
_
 cache->
hôs
);

2010  
YES
;

2012  
NO
;

2013 
	}
}

2019 
PRIVATE
 
BOOL
 
	$‰ì_°ªam
 (
HTSåóm
 * 
me
, 
BOOL
 
ab‹t
)

2021 i‡(
me
) {

2022 
HTCache
 * 
ˇche
 = 
me
->cache;

2030 i‡(
me
->
Â
Ë
	`f˛o£
(me->fp);

2037 i‡(
ˇche
) {

2038 
	`HTCache_wrôeMëa
(
ˇche
, 
me
->
ªque°
, me->
ª•⁄£
);

2039 
	`HTCache_ªÀa£Lock
(
ˇche
);

2045 
ˇche
->
ønge
 = 
ab‹t
;

2053 
	`HTCache_£tSize
(
ˇche
, 
me
->
byãs_wrôãn
, me->
≠≥nd
);

2060 i‡(
√w_íåõs
 > 
DUMP_FREQUENCY
) {

2061 
	`HTCacheIndex_wrôe
(
HTCacheRoŸ
);

2062 
√w_íåõs
 = 0;

2064 
	`HT_FREE
(
me
);

2065  
YES
;

2067  
NO
;

2068 
	}
}

2071 
PRIVATE
 
	$HTCache_‰ì
 (
HTSåóm
 * 
me
)

2073  
	`‰ì_°ªam
(
me
, 
NO
Ë? 
HT_OK
 : 
HT_ERROR
;

2074 
	}
}

2076 
PRIVATE
 
	$HTCache_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

2078 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... ABORTING\n");

2079 
	`‰ì_°ªam
(
me
, 
YES
);

2080  
HT_ERROR
;

2081 
	}
}

2083 
PRIVATE
 
	$HTCache_Êush
 (
HTSåóm
 * 
me
)

2085  (
	`fÊush
(
me
->
Â
Ë=
EOF
Ë? 
HT_ERROR
 : 
HT_OK
;

2086 
	}
}

2088 
PRIVATE
 
	$HTCache_putBlock
 (
HTSåóm
 * 
me
, c⁄° * 
s
, 
l
)

2090 
°©us
 = (
	`fwrôe
(
s
, 1, 
l
, 
me
->
Â
Ë!lË? 
HT_ERROR
 : 
HT_OK
;

2091 i‡(
l
 > 1 && 
°©us
 =
HT_OK
) {

2092 
	`HTCache_Êush
(
me
);

2093 
me
->
byãs_wrôãn
 +
l
;

2095  
°©us
;

2096 
	}
}

2098 
PRIVATE
 
	$HTCache_putCh¨
 (
HTSåóm
 * 
me
, 
c
)

2100  
	`HTCache_putBlock
(
me
, &
c
, 1);

2101 
	}
}

2103 
PRIVATE
 
	$HTCache_putSåög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

2105  
	`HTCache_putBlock
(
me
, 
s
, (Ë
	`°æí
(s));

2106 
	}
}

2108 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTCacheCœss
 =

2111 
HTCache_Êush
,

2112 
HTCache_‰ì
,

2113 
HTCache_ab‹t
,

2114 
HTCache_putCh¨
,

2115 
HTCache_putSåög
,

2116 
HTCache_putBlock


2119 
PRIVATE
 
HTSåóm
 * 
	$HTCacheSåóm
 (
HTReque°
 * 
ªque°
, 
BOOL
 
≠≥nd
)

2121 
HTCache
 * 
ˇche
 = 
NULL
;

2122 
FILE
 * 
Â
 = 
NULL
;

2123 
HTRe•⁄£
 * 
ª•⁄£
 = 
	`HTReque°_ª•⁄£
(
ªque°
);

2124 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

2127 i‡(!
HTCacheE«bÀ
 || !
HTCacheInôülized
) {

2128 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... NotÉnabled\n");

2129  
NULL
;

2133 i‡(
	`HTReque°_¸edítüls
 (
ªque°
Ë&& !
HTCachePrŸe˘ed
) {

2134 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... won't cacheÖrotected objects\n");

2135  
NULL
;

2142 i‡(
	`HTAnch‹_Àngth
(
™ch‹
Ë> 
HTCacheMaxE¡rySize
) {

2143 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... Entry isÅoo big - won't cache\n");

2144  
NULL
;

2148 i‡((
ˇche
 = 
	`HTCache_√w
(
ªque°
, 
ª•⁄£
, 
™ch‹
)Ë=
NULL
) {

2149 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... Can't getá cache object\n");

2150  
NULL
;

2154 i‡(
	`HTCache_hasLock
(
ˇche
)) {

2155 i‡(
	`HTCache_bªakLock
(
ˇche
, 
ªque°
Ë=
NO
) {

2156 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... Entryálready in use\n");

2157  
NULL
;

2160 
	`HTCache_gëLock
(
ˇche
, 
ªque°
);

2166 i‡((
Â
 = 
	`f›í
(
ˇche
->
ˇchíame
, 
≠≥nd
 ? "ab" : "wb")Ë=
NULL
) {

2167 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... C™'à›í `%s\' f‹ wrôög\n" 
_
 
ˇche
->
ˇchíame
);

2168 
	`HTCache_dñëe
(
ˇche
);

2169  
NULL
;

2171 
	`HTTRACE
(
CACHE_TRACE
, "Cache....... %†fûê`%s\'\n" 
_


2172 
≠≥nd
 ? "AµídÅo" : "Cª©ög" 
_
 
ˇche
->
ˇchíame
);

2177 
HTSåóm
 * 
me
 = 
NULL
;

2178 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

2179 
	`HT_OUTOFMEM
("Cache");

2180 
me
->
iß
 = &
HTCacheCœss
;

2181 
me
->
ªque°
 =Ñequest;

2182 
me
->
ª•⁄£
 =Ñesponse;

2183 
me
->
ˇche
 = cache;

2184 
me
->
Â
 = fp;

2185 
me
->
≠≥nd
 =áppend;

2186  
me
;

2188  
NULL
;

2189 
	}
}

2191 
PUBLIC
 
HTSåóm
 * 
	$HTCacheWrôî
 (
HTReque°
 * 
ªque°
,

2192 * 
∑øm
,

2193 
HTF‹m©
 
öput_f‹m©
,

2194 
HTF‹m©
 
ouçut_f‹m©
,

2195 
HTSåóm
 * 
ouçut_°ªam
)

2197  
	`HTCacheSåóm
(
ªque°
, 
NO
);

2198 
	}
}

2200 
PUBLIC
 
HTSåóm
 * 
	$HTCacheAµíd
 (
HTReque°
 * 
ªque°
,

2201 * 
∑øm
,

2202 
HTF‹m©
 
öput_f‹m©
,

2203 
HTF‹m©
 
ouçut_f‹m©
,

2204 
HTSåóm
 * 
ouçut_°ªam
)

2206  
	`HTCacheSåóm
(
ªque°
, 
YES
);

2207 
	}
}

2218 
PRIVATE
 
	$HTCache_c›yHódîs
 (
HTReque°
 * 
ªq
)

2220 
HTP¨ítAnch‹
 * 
™ch‹
;

2221 * 
uæ
;

2223 
™ch‹
 = 
	`HTReque°_™ch‹
 (
ªq
);

2224 
uæ
 = 
	`HTAnch‹_physiˇl
(
™ch‹
);

2225 i‡(
uæ
 && !
	`°∫cmp
 (url, "cache:",  ("cache:") - 1 ))

2234 
	`HTSåómSèck
(
WWW_MIME_COPYHEADERS
, 
WWW_DEBUG
,

2235 
	`HTBœckHﬁe
(), 
ªq
, 
NO
);

2237 
	}
}

2243 
PRIVATE
 
	$CacheCÀ™up
 (
HTReque°
 * 
ªq
, 
°©us
)

2245 
HTNë
 * 
√t
 = 
	`HTReque°_√t
(
ªq
);

2246 
ˇche_öfo
 * 
ˇche
 = (ˇche_öfÿ*Ë
	`HTNë_c⁄ãxt
(
√t
);

2247 
HTSåóm
 * 
öput
 = 
	`HTReque°_öputSåóm
(
ªq
);

2250 i‡(
öput
) {

2251 i‡(
°©us
 =
HT_INTERRUPTED
)

2252 (*
öput
->
iß
->
ab‹t
)(öput, 
NULL
);

2254 (*
öput
->
iß
->
_‰ì
)(input);

2255 
	`HTReque°_£tI≈utSåóm
(
ªq
, 
NULL
);

2261 i‡(
ˇche
->
timî
) {

2262 
	`HTTimî_dñëe
(
ˇche
->
timî
);

2263 
ˇche
->
timî
 = 
NULL
;

2266 i‡(
ˇche
) {

2267 
	`HT_FREE
(
ˇche
->
loˇl
);

2268 
	`HT_FREE
(
ˇche
);

2274 i‡(
°©us
 =
HT_NOT_MODIFIED
)

2275 
	`HTCache_c›yHódîs
 (
ªq
);

2276 
	`HTNë_dñëe
(
√t
, 
°©us
);

2277  
YES
;

2278 
	}
}

2289 
PRIVATE
 
CacheEvít
 (
SOCKET
 
soc
, * 
pVoid
, 
HTEvítTy≥
 
ty≥
);

2291 
PUBLIC
 
	$HTLﬂdCache
 (
SOCKET
 
soc
, 
HTReque°
 * 
ªque°
)

2293 
ˇche_öfo
 * 
ˇche
;

2294 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

2295 
HTNë
 * 
√t
 = 
	`HTReque°_√t
(
ªque°
);

2302 
	`HTTRACE
(
PROT_TRACE
, "Lﬂd Cache.. Lookög f‹ `%s\'\n" 
_


2303 
	`HTAnch‹_physiˇl
(
™ch‹
));

2304 i‡((
ˇche
 = (
ˇche_öfo
 *Ë
	`HT_CALLOC
(1, (ˇche_öfo))Ë=
NULL
)

2305 
	`HT_OUTOFMEM
("HTLoadCACHE");

2306 
ˇche
->
°©e
 = 
CL_BEGIN
;

2307 
ˇche
->
√t
 =Çet;

2308 
	`HTNë_£tC⁄ãxt
(
√t
, 
ˇche
);

2309 
	`HTNë_£tEvítCÆlback
(
√t
, 
CacheEvít
);

2310 
	`HTNë_£tEvítP¨am
(
√t
, 
ˇche
);

2312  
	`CacheEvít
(
soc
, 
ˇche
, 
HTEvít_BEGIN
);

2313 
	}
}

2315 
PRIVATE
 
	$Rëu∫Evít
 (
HTTimî
 * 
timî
, * 
∑øm
, 
HTEvítTy≥
 
ty≥
)

2317 
ˇche_öfo
 * 
ˇche
 = (ˇche_öfÿ*Ë
∑øm
;

2318 i‡(
timî
 !
ˇche
->timer)

2319 
	`HTDEBUGBREAK
("Fûêtimî %∞nŸ i¿sync\n" 
_
 
timî
);

2320 
	`HTTRACE
(
PROT_TRACE
, "HTLﬂdCache. C⁄töuög %∞wôhÅimî %p\n" 
_
 
ˇche
 _ 
timî
);

2325 
ˇche
->
timî
 = 
NULL
;

2330  
	`CacheEvít
(
INVSOC
, 
ˇche
, 
HTEvít_READ
);

2331 
	}
}

2333 
PRIVATE
 
	$CacheEvít
 (
SOCKET
 
soc
, * 
pVoid
, 
HTEvítTy≥
 
ty≥
)

2335 
ˇche_öfo
 * 
ˇche
 = (ˇche_öfÿ*)
pVoid
;

2336 
°©us
 = 
HT_ERROR
;

2337 
HTNë
 * 
√t
 = 
ˇche
->net;

2338 
HTReque°
 * 
ªque°
 = 
	`HTNë_ªque°
(
√t
);

2339 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

2341 i‡(
ty≥
 =
HTEvít_BEGIN
) {

2342 
ˇche
->
°©e
 = 
CL_BEGIN
;

2343 } i‡(
ty≥
 =
HTEvít_CLOSE
) {

2344 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_INTERRUPTED
,

2345 
NULL
, 0, "HTLoadCache");

2346 
	`CacheCÀ™up
(
ªque°
, 
HT_INTERRUPTED
);

2347  
HT_OK
;

2348 } i‡(
ty≥
 =
HTEvít_END
) {

2349 
	`CacheCÀ™up
(
ªque°
, 
HT_OK
);

2350  
HT_OK
;

2351 } i‡(
ty≥
 =
HTEvít_RESET
) {

2352 
	`CacheCÀ™up
(
ªque°
, 
HT_RECOVER_PIPE
);

2353 
ˇche
->
°©e
 = 
CL_BEGIN
;

2354  
HT_OK
;

2359 
ˇche
->
°©e
) {

2361 
CL_BEGIN
:

2362 i‡(
	`HTLib_£cuª
()) {

2363 
	`HTTRACE
(
PROT_TRACE
, "Load Cache.. NoáccessÅoÜocal file system\n");

2364 
ˇche
->
°©e
 = 
CL_ERROR
;

2367 
ˇche
->
loˇl
 = 
	`HTWWWToLoˇl
(
	`HTAnch‹_physiˇl
(
™ch‹
), "",

2368 
	`HTReque°_u£rProfûe
(
ªque°
));

2369 i‡(!
ˇche
->
loˇl
) {

2370 
ˇche
->
°©e
 = 
CL_ERROR
;

2378 
HTHo°
 * 
ho°
 = 
NULL
;

2379 i‡((
ho°
 = 
	`HTHo°_√w
("ˇche", 0)Ë=
NULL
Ë 
HT_ERROR
;

2380 
	`HTNë_£tHo°
(
√t
, 
ho°
);

2381 i‡(
	`HTHo°_addNë
(
ho°
, 
√t
Ë=
HT_PENDING
) {

2382 
	`HTTRACE
(
PROT_TRACE
, "HTLoadCache. Pending...\n");

2383  
HT_OK
;

2386 
ˇche
->
°©e
 = 
CL_NEED_BODY
;

2389 
CL_NEED_BODY
:

2390 i‡(
	`HT_STAT
(
ˇche
->
loˇl
, &ˇche->
°©_öfo
) == -1) {

2391 
	`HTTRACE
(
PROT_TRACE
, "Lﬂd Cache.. NŸ found `%s\'\n" 
_
 
ˇche
->
loˇl
);

2392 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_NOT_FOUND
,

2393 
NULL
, 0, "HTLoadCache");

2394 
ˇche
->
°©e
 = 
CL_ERROR
;

2401 i‡(!
ˇche
->
°©_öfo
.
°_size
) {

2402 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
,
HTERR_NO_CONTENT
,

2403 
NULL
, 0, "HTLoadCache");

2404 
ˇche
->
°©e
 = 
CL_NO_DATA
;

2406 
ˇche
->
°©e
 = 
CL_NEED_OPEN_FILE
;

2409 
CL_NEED_OPEN_FILE
:

2410 
°©us
 = 
	`HTFûeO≥n
(
√t
, 
ˇche
->
loˇl
, 
HT_FB_RDONLY
);

2411 i‡(
°©us
 =
HT_OK
) {

2418 
HTSåóm
 * 
r°ªam
 = 
	`HTSåómSèck
(
	`HTAnch‹_f‹m©
(
™ch‹
),

2419 
	`HTReque°_ouçutF‹m©
(
ªque°
),

2420 
	`HTReque°_ouçutSåóm
(
ªque°
),

2421 
ªque°
, 
YES
);

2422 
	`HTNë_£tRódSåóm
(
√t
, 
r°ªam
);

2423 
	`HTReque°_£tOuçutC⁄√˘ed
(
ªque°
, 
YES
);

2427 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_INFO
, 
NO
, 
HTERR_OK
,

2428 
NULL
, 0, "HTLoadCache");

2429 
ˇche
->
°©e
 = 
CL_NEED_CONTENT
;

2437 i‡(
	`HTEvít_isCÆlbacksRegi°îed
()) {

2438 i‡(!
	`HTReque°_¥ìm±ive
(
ªque°
)) {

2439 i‡(!
	`HTNë_¥ìm±ive
(
√t
)) {

2440 
	`HTTRACE
(
PROT_TRACE
, "HTLoadCache. Returning\n");

2441 
	`HTHo°_ªgi°î
(
	`HTNë_ho°
(
√t
),Çë, 
HTEvít_READ
);

2442 } i‡(!
ˇche
->
timî
) {

2443 
	`HTTRACE
(
PROT_TRACE
, "HTLoadCache. Returning\n");

2444 
ˇche
->
timî
 = 
	`HTTimî_√w
(
NULL
, 
Rëu∫Evít
, cache, 1, 
YES
, 
NO
);

2446  
HT_OK
;

2449 } i‡(
°©us
 =
HT_WOULD_BLOCK
 || sètu†=
HT_PENDING
)

2450  
HT_OK
;

2452 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_INFO
, 
NO
, 
HTERR_INTERNAL
,

2453 
NULL
, 0, "HTLoadCache");

2454 
ˇche
->
°©e
 = 
CL_ERROR
;

2458 
CL_NEED_CONTENT
:

2459 
°©us
 = 
	`HTHo°_ªad
(
	`HTNë_ho°
(
√t
),Çet);

2460 i‡(
°©us
 =
HT_WOULD_BLOCK
)

2461  
HT_OK
;

2462 i‡(
°©us
 =
HT_LOADED
 || sètu†=
HT_CLOSED
) {

2463 
ˇche
->
°©e
 = 
CL_GOT_DATA
;

2465 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_INFO
, 
NO
, 
HTERR_FORBIDDEN
,

2466 
NULL
, 0, "HTLoadCache");

2467 
ˇche
->
°©e
 = 
CL_ERROR
;

2471 
CL_GOT_DATA
:

2472 
	`CacheCÀ™up
(
ªque°
, 
HT_NOT_MODIFIED
);

2473  
HT_OK
;

2476 
CL_NO_DATA
:

2477 
	`CacheCÀ™up
(
ªque°
, 
HT_NO_DATA
);

2478  
HT_OK
;

2481 
CL_ERROR
:

2482 
	`CacheCÀ™up
(
ªque°
, 
HT_ERROR
);

2483  
HT_OK
;

2487 
	}
}

	@Library/src/HTCache.h

28 #i‚de‡
HTCACHE_H


29 
	#HTCACHE_H


	)

31 
	~"WWWLib.h
"

62 
BOOL
 
HTCacheInô
 (c⁄° * 
ˇche_roŸ
, 
size
);

70 
BOOL
 
HTCacheTîmö©e
 ();

87 
HTCacheMode_£tE«bÀd
 (
BOOL
 
mode
);

88 
BOOL
 
HTCacheMode_íabÀd
 ();

96 
HTCacheMode_£tPrŸe˘ed
 (
BOOL
 
mode
);

97 
BOOL
 
HTCacheMode_¥Ÿe˘ed
 ();

109 * 
HTCacheMode_gëRoŸ
 ();

123 
BOOL
 
HTCacheMode_£tMaxSize
 (
size
);

124 
HTCacheMode_maxSize
 ();

137 
BOOL
 
HTCacheMode_£tMaxCacheE¡rySize
 (
size
);

138 
HTCacheMode_maxCacheE¡rySize
 ();

150 
HTCacheMode_£tDeÁu…Expú©i⁄
 (c⁄° 
exp_time
);

151 
HTCacheMode_DeÁu…Expú©i⁄
 ();

166 
	e_HTExpúesMode
 {

167 
	mHT_EXPIRES_IGNORE
 = 0,

168 
	mHT_EXPIRES_NOTIFY
,

169 
	mHT_EXPIRES_AUTO


170 } 
	tHTExpúesMode
;

172 
HTCacheMode_£tExpúes
 (
HTExpúesMode
 
mode
);

173 
HTExpúesMode
 
HTCacheMode_expúes
 ();

199 
	e_HTDisc⁄√˘edMode
 {

200 
	mHT_DISCONNECT_NONE
 = 0,

201 
	mHT_DISCONNECT_NORMAL
 = 1,

202 
	mHT_DISCONNECT_EXTERNAL
 = 2

203 } 
	tHTDisc⁄√˘edMode
;

205 
HTCacheMode_£tDisc⁄√˘ed
 (
HTDisc⁄√˘edMode
 
mode
);

206 
HTDisc⁄√˘edMode
 
HTCacheMode_disc⁄√˘ed
 ();

207 
BOOL
 
HTCacheMode_isDisc⁄√˘ed
 (
HTRñﬂd
 
mode
);

226 
BOOL
 
HTCacheIndex_ªad
 (c⁄° * 
ˇche_roŸ
);

238 
BOOL
 
HTCacheIndex_wrôe
 (c⁄° * 
ˇche_roŸ
);

248 
_HTCache
 
	tHTCache
;

267 
HTC⁄vîãr
 
HTCacheWrôî
, 
HTCacheAµíd
;

276 
BOOL
 
HTCache_wrôeMëa
 (
HTCache
 * 
ˇche
, 
HTReque°
 * 
ªque°
,

277 
HTRe•⁄£
 * 
ª•⁄£
);

286 
BOOL
 
HTCache_upd©eMëa
 (
HTCache
 * 
ˇche
, 
HTReque°
 * 
ªque°
,

287 
HTRe•⁄£
 * 
ª•⁄£
);

294 
BOOL
 
HTCache_ª£tMëa
 (
HTCache
 * 
ˇche
, 
HTReque°
 * 
ªque°
,

295 
HTRe•⁄£
 * 
ª•⁄£
);

308 
HTCache
 * 
HTCache_touch
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

309 
HTP¨ítAnch‹
 * 
™ch‹
);

323 
HTPrŸCÆlback
 
HTLﬂdCache
;

334 
BOOL
 
HTCache_ªmove
 (
HTCache
 * 
ˇche
);

345 
BOOL
 
HTCache_dñëeAŒ
 ();

357 
BOOL
 
HTCache_ÊushAŒ
 ();

370 
HTCache
 * 
HTCache_föd
 (
HTP¨ítAnch‹
 * 
™ch‹
, * 
deÁu…_«me
);

384 
HTRñﬂd
 
HTCache_isFªsh
 (
HTCache
 * 
me
, 
HTReque°
 * 
ªque°
);

396 
BOOL
 
HTCache_addHô
 (
HTCache
 * 
ˇche
);

409 * 
HTCache_«me
 (
HTCache
 * 
ˇche
);

424 
BOOL
 
HTCache_gëLock
 (
HTCache
 * 
ˇche
, 
HTReque°
 * 
ªque°
);

425 
BOOL
 
HTCache_bªakLock
 (
HTCache
 * 
ˇche
, 
HTReque°
 * 
ªque°
);

426 
BOOL
 
HTCache_hasLock
 (
HTCache
 * 
ˇche
);

427 
BOOL
 
HTCache_ªÀa£Lock
 (
HTCache
 * 
ˇche
);

	@Library/src/HTChannl.c

14 
	~"wwwsys.h
"

15 
	~"WWWUtû.h
"

16 
	~"HTAÀπ.h
"

17 
	~"HTHo°.h
"

18 
	~"HTEº‹.h
"

20 #ifde‡
HT_MUX


21 
	~"WWWMux.h
"

24 
	~"HTCh™∆.h
"

26 
	#HASH
(
s
Ë((sË% (
HT_M_HASH_SIZE
))

	)

28 
	s_HTI≈utSåóm
 {

29 c⁄° 
HTI≈utSåómCœss
 * 
	miß
;

30 
HTCh™√l
 * 
	mch™√l
;

33 
	s_HTOuçutSåóm
 {

34 c⁄° 
HTOuçutSåómCœss
 * 
	miß
;

35 
HTCh™√l
 * 
	mch™√l
;

38 
	s_HTCh™√l
 {

40 
SOCKET
 
	msockfd
;

41 
FILE
 * 
	mÂ
;

44 
HTI≈utSåóm
 * 
	möput
;

45 
HTOuçutSåóm
 * 
	mouçut
;

48 
HTI≈utSåóm
 
	mch™√lISåóm
;

49 
HTOuçutSåóm
 
	mch™√lOSåóm
;

51 
BOOL
 
	ma˘ive
;

52 
	m£m≠h‹e
;

53 
HTHo°
 * 
	mho°
;

56 
PRIVATE
 
HTLi°
 ** 
	gch™√ls
 = 
NULL
;

66 
PRIVATE
 
	$Ch™√lISåóm_Êush
 (
HTI≈utSåóm
 * 
me
)

67 { 
me
->
ch™√l
->
öput
 ? (*me->ch™√l->öput->
iß
->
Êush
)(me->ch™√l->öputË: 
HT_ERROR
;
	}
}

68 
PRIVATE
 
	$Ch™√lISåóm_‰ì
 (
HTI≈utSåóm
 * 
me
)

69 { 
me
->
ch™√l
->
öput
 ? (*me->ch™√l->öput->
iß
->
_‰ì
)(me->ch™√l->öputË: 
HT_ERROR
;
	}
}

70 
PRIVATE
 
	$Ch™√lISåóm_ab‹t
 (
HTI≈utSåóm
 * 
me
, 
HTLi°
 * 
e
)

71 { 
me
->
ch™√l
->
öput
 ? (*me->ch™√l->öput->
iß
->
ab‹t
)(me->ch™√l->öput, 
e
Ë: 
HT_ERROR
;
	}
}

72 
PRIVATE
 
	$Ch™√lISåóm_ªad
 (
HTI≈utSåóm
 * 
me
)

73 { 
me
->
ch™√l
->
öput
 ? (*me->ch™√l->öput->
iß
->
ªad
)(me->ch™√l->öputË: 
HT_ERROR
;
	}
}

74 
PRIVATE
 
	$Ch™√lISåóm_˛o£
 (
HTI≈utSåóm
 * 
me
)

75 { 
me
->
ch™√l
->
öput
 ? (*me->ch™√l->öput->
iß
->
˛o£
)(me->ch™√l->öputË: 
HT_ERROR
;
	}
}

76 
PUBLIC
 
	$Ch™√lISåóm_c⁄sumed
 (
HTI≈utSåóm
 * 
me
, 
size_t
 
byãs
)

77 { 
me
->
ch™√l
->
öput
 ? (*me->ch™√l->öput->
iß
->
c⁄sumed
)(me->ch™√l->öput, 
byãs
Ë: 
HT_ERROR
;
	}
}

78 
PRIVATE
 c⁄° 
HTI≈utSåómCœss
 
	gCh™√lISåómIß
 =

81 
Ch™√lISåóm_Êush
,

82 
Ch™√lISåóm_‰ì
,

83 
Ch™√lISåóm_ab‹t
,

84 
Ch™√lISåóm_ªad
,

85 
Ch™√lISåóm_˛o£
,

86 
Ch™√lISåóm_c⁄sumed


89 
PRIVATE
 
	$Ch™√lOSåóm_Êush
 (
HTOuçutSåóm
 * 
me
)

90 { 
me
->
ch™√l
->
ouçut
 ? (*me->ch™√l->ouçut->
iß
->
Êush
)(me->ch™√l->ouçutË: 
HT_ERROR
;
	}
}

91 
PRIVATE
 
	$Ch™√lOSåóm_‰ì
 (
HTOuçutSåóm
 * 
me
)

92 { 
me
->
ch™√l
->
ouçut
 ? (*me->ch™√l->ouçut->
iß
->
_‰ì
)(me->ch™√l->ouçutË: 
HT_ERROR
;
	}
}

93 
PRIVATE
 
	$Ch™√lOSåóm_ab‹t
 (
HTOuçutSåóm
 * 
me
, 
HTLi°
 * 
e
)

94 { 
me
->
ch™√l
->
ouçut
 ? (*me->ch™√l->ouçut->
iß
->
ab‹t
)(me->ch™√l->ouçut, 
e
Ë: 
HT_ERROR
;
	}
}

95 
PRIVATE
 
	$Ch™√lOSåóm_put_ch¨a˘î
 (
HTOuçutSåóm
 * 
me
, 
c
)

96 { 
me
->
ch™√l
->
ouçut
 ? (*me->ch™√l->ouçut->
iß
->
put_ch¨a˘î
)(me->ch™√l->ouçut, 
c
Ë: 
HT_ERROR
;
	}
}

97 
PRIVATE
 
	$Ch™√lOSåóm_put_°rög
 (
HTOuçutSåóm
 * 
me
, c⁄° * 
s
)

98 { 
me
->
ch™√l
->
ouçut
 ? (*me->ch™√l->ouçut->
iß
->
put_°rög
)(me->ch™√l->ouçut, 
s
Ë: 
HT_ERROR
;
	}
}

99 
PRIVATE
 
	$Ch™√lOSåóm_put_block
 (
HTOuçutSåóm
 * 
me
, c⁄° * 
buf
, 
Àn
)

100 { 
me
->
ch™√l
->
ouçut
 ? (*me->ch™√l->ouçut->
iß
->
put_block
)(me->ch™√l->ouçut, 
buf
, 
Àn
Ë: 
HT_ERROR
;
	}
}

101 
PRIVATE
 
	$Ch™√lOSåóm_˛o£
 (
HTOuçutSåóm
 * 
me
)

102 { 
me
->
ch™√l
->
ouçut
 ? (*me->ch™√l->ouçut->
iß
->
˛o£
)(me->ch™√l->ouçutË: 
HT_ERROR
;
	}
}

103 
PRIVATE
 c⁄° 
HTOuçutSåómCœss
 
	gCh™√lOSåómIß
 =

106 
Ch™√lOSåóm_Êush
,

107 
Ch™√lOSåóm_‰ì
,

108 
Ch™√lOSåóm_ab‹t
,

109 
Ch™√lOSåóm_put_ch¨a˘î
,

110 
Ch™√lOSåóm_put_°rög
,

111 
Ch™√lOSåóm_put_block
,

112 
Ch™√lOSåóm_˛o£
,

117 
PRIVATE
 
	$‰ì_ch™√l
 (
HTCh™√l
 * 
ch
)

119 i‡(
ch
) {

122 i‡(
ch
->
öput
) {

123 (*
ch
->
öput
->
iß
->
˛o£
)(ch->input);

124 
ch
->
öput
 = 
NULL
;

126 i‡(
ch
->
ouçut
) {

127 (*
ch
->
ouçut
->
iß
->
˛o£
)(ch->output);

128 
ch
->
ouçut
 = 
NULL
;

132 i‡(
ch
->
sockfd
 !
INVSOC
) {

133 
	`NETCLOSE
(
ch
->
sockfd
);

134 
	`HTNë_de¸ó£Sockë
();

135 
	`HTTRACE
(
PROT_TRACE
, "Ch™√l..... Dñëed %p, sockë %d\n" 
_
 
ch
 _ ch->
sockfd
);

136 
ch
->
sockfd
 = 
INVSOC
;

140 i‡(
ch
->
Â
) {

141 
	`f˛o£
(
ch
->
Â
);

142 
	`HTTRACE
(
PROT_TRACE
, "Ch™√l..... Dñëed %p, fûê%p\n" 
_
 
ch
 _ ch->
Â
);

143 
ch
->
Â
 = 
NULL
;

145 
	`HT_FREE
(
ch
);

147 
	}
}

157 
PUBLIC
 
HTCh™√l
 * 
	$HTCh™√l_√w
 (
SOCKET
 
sockfd
, 
FILE
 * 
Â
, 
BOOL
 
a˘ive
)

159 
HTLi°
 * 
li°
 = 
NULL
;

160 
HTCh™√l
 * 
ch
 = 
NULL
;

161 
hash
 = 
sockfd
 < 0 ? 0 : 
	`HASH
(sockfd);

162 
	`HTTRACE
(
PROT_TRACE
, "Ch™√l..... Hash vÆuêi†%d\n" 
_
 
hash
);

163 i‡(!
ch™√ls
) {

164 i‡(!(
ch™√ls
 = (
HTLi°
 **Ë
	`HT_CALLOC
(
HT_M_HASH_SIZE
,(HTList*))))

165 
	`HT_OUTOFMEM
("HTChannel_new");

167 i‡(!
ch™√ls
[
hash
]Ëch™√ls[hash] = 
	`HTLi°_√w
();

168 
li°
 = 
ch™√ls
[
hash
];

169 i‡((
ch
 = (
HTCh™√l
 *Ë
	`HT_CALLOC
(1, (HTCh™√l))Ë=
NULL
)

170 
	`HT_OUTOFMEM
("HTChannel_new");

171 
ch
->
sockfd
 = sockfd;

172 
ch
->
Â
 = fp;

173 
ch
->
a˘ive
 =áctive;

174 
ch
->
£m≠h‹e
 = 1;

175 
ch
->
ch™√lISåóm
.
iß
 = &
Ch™√lISåómIß
;

176 
ch
->
ch™√lOSåóm
.
iß
 = &
Ch™√lOSåómIß
;

177 
ch
->
ch™√lISåóm
.
ch™√l
 = ch;

178 
ch
->
ch™√lOSåóm
.
ch™√l
 = ch;

179 
	`HTLi°_addObje˘
(
li°
, (*Ë
ch
);

181 #ifde‡
HT_MUX


187 
HTPrŸocﬁ
 * 
¥Ÿocﬁ
 = 
	`HTNë_¥Ÿocﬁ
(
√t
);

188 
HTMuxCh™√l
 * 
muxch
 = 
	`HTMuxCh™√l_√w
(
me
);

189 
√t
->
£ssi⁄
 = 
	`HTMuxSessi⁄_c⁄√˘
(
muxch
,Çë, 
	`HTPrŸocﬁ_id
(
¥Ÿocﬁ
));

193 
	`HTTRACE
(
PROT_TRACE
, "Ch™√l..... Added %∞tÿli° %p\n" 
_
 
ch
 _ 
li°
);

194  
ch
;

195 
	}
}

201 
PUBLIC
 
HTCh™√l
 * 
	$HTCh™√l_föd
 (
SOCKET
 
sockfd
)

203 i‡(
ch™√ls
 && 
sockfd
 !
INVSOC
) {

204 
hash
 = 
	`HASH
(
sockfd
);

205 
HTLi°
 * 
li°
 = 
ch™√ls
[
hash
];

206 i‡(
li°
) {

207 
HTCh™√l
 * 
ch
 = 
NULL
;

208 (
ch
 = (
HTCh™√l
 *Ë
	`HTLi°_√xtObje˘
(
li°
)))

209 i‡(
ch
->
sockfd
 == sockfd)  ch;

212  
NULL
;

213 
	}
}

221 
PUBLIC
 
BOOL
 
	$HTCh™√l_dñëe
 (
HTCh™√l
 * 
ch™√l
, 
°©us
)

223 i‡(
ch™√l
) {

224 
	`HTTRACE
(
PROT_TRACE
, "Ch™√l..... Dñëê%∞wôh sem≠h‹ê%d, sètu†%d\n" 
_


225 
ch™√l
 
_
 ch™√l->
£m≠h‹e
 _ 
°©us
);

232 
	`HTCh™√l_dñëeI≈ut
(
ch™√l
, 
°©us
);

233 
	`HTCh™√l_dñëeOuçut
(
ch™√l
, 
°©us
);

239 i‡(
ch™√l
->
£m≠h‹e
 <0 && 
ch™√ls
 && (

240 
ch™√l
->
sockfd
 !
INVSOC
 || ch™√l->
Â
 !
NULL
)) {

241 
hash
 = 
	`HASH
(
ch™√l
->
sockfd
);

242 
HTLi°
 * 
li°
 = 
ch™√ls
[
hash
];

243 i‡(
li°
) {

244 
	`HTLi°_ªmoveObje˘
(
li°
, (*Ë
ch™√l
);

245 
	`‰ì_ch™√l
(
ch™√l
);

246  
YES
;

249 
	`HTCh™√l_downSem≠h‹e
(
ch™√l
);

251  
NO
;

252 
	}
}

258 
PUBLIC
 
BOOL
 
	$HTCh™√l_dñëeAŒ
 ()

260 i‡(
ch™√ls
) {

261 
HTLi°
 * 
cur
;

262 
˙t
;

263 
˙t
=0; c¡<
HT_M_HASH_SIZE
; cnt++) {

264 i‡((
cur
 = 
ch™√ls
[
˙t
])) {

265 
HTCh™√l
 * 
¥es
;

266 (
¥es
 = (
HTCh™√l
 *Ë
	`HTLi°_√xtObje˘
(
cur
)Ë!
NULL
)

267 
	`‰ì_ch™√l
(
¥es
);

269 
	`HTLi°_dñëe
(
ch™√ls
[
˙t
]);

271 
	`HT_FREE
(
ch™√ls
);

273  
YES
;

274 
	}
}

281 
PUBLIC
 
BOOL
 
	$HTCh™√l_ß„DñëeAŒ
 ()

283 i‡(
ch™√ls
) {

284 
HTLi°
 * 
cur
;

285 
˙t
;

286 
˙t
=0; c¡<
HT_M_HASH_SIZE
; cnt++) {

287 i‡((
cur
 = 
ch™√ls
[
˙t
])) {

288 
HTCh™√l
 * 
¥es
;

289 (
¥es
 = (
HTCh™√l
 *Ë
	`HTLi°_√xtObje˘
(
cur
)Ë!
NULL
) {

290 
	`HTCh™√l_dñëe
 (
¥es
, 
HT_TIMEOUT
);

291 
cur
 = 
ch™√ls
[
˙t
];

293 
	`HTLi°_dñëe
 (
ch™√ls
[
˙t
]);

294 
ch™√ls
[
˙t
] = 
NULL
;

297  
YES
;

299  
NO
;

300 
	}
}

305 
PUBLIC
 
SOCKET
 
	$HTCh™√l_sockë
 (
HTCh™√l
 * 
ch™√l
)

307  
ch™√l
 ? ch™√l->
sockfd
 : 
INVSOC
;

308 
	}
}

310 
PUBLIC
 
BOOL
 
	$HTCh™√l_£tSockë
 (
HTCh™√l
 * 
ch™√l
, 
SOCKET
 
sockfd
)

312 i‡(
ch™√l
) {

318 
ﬁd_hash
 = 
	`HASH
(
ch™√l
->
sockfd
);

319 
√w_hash
 = 
sockfd
 < 0 ? 0 : 
	`HASH
(sockfd);

320 
HTLi°
 * 
li°
 = 
ch™√ls
[
ﬁd_hash
];

321 i‡(
li°
Ë
	`HTLi°_ªmoveObje˘
÷i°, 
ch™√l
);

322 i‡(!
ch™√ls
[
√w_hash
]Ëch™√ls[√w_hash] = 
	`HTLi°_√w
();

323 
li°
 = 
ch™√ls
[
√w_hash
];

324 
	`HTLi°_addObje˘
(
li°
, 
ch™√l
);

326 
ch™√l
->
sockfd
 = sockfd;

327  
YES
;

329  
NO
;

330 
	}
}

335 
PUBLIC
 
FILE
 * 
	$HTCh™√l_fûe
 (
HTCh™√l
 * 
ch™√l
)

337  
ch™√l
 ? ch™√l->
Â
 : 
NULL
;

338 
	}
}

340 
PUBLIC
 
BOOL
 
	$HTCh™√l_£tFûe
 (
HTCh™√l
 * 
ch™√l
, 
FILE
 * 
Â
)

342 i‡(
ch™√l
) {

343 
ch™√l
->
Â
 = fp;

344  
YES
;

346  
NO
;

347 
	}
}

353 
PUBLIC
 
BOOL
 
	$HTCh™√l_£tHo°
 (
HTCh™√l
 * 
ch
, 
HTHo°
 * 
ho°
)

355 i‡(
ch
) {

356 
ch
->
ho°
 = host;

357  
YES
;

359  
NO
;

360 
	}
}

362 
PUBLIC
 
HTHo°
 * 
	$HTCh™√l_ho°
 (
HTCh™√l
 * 
ch
)

364  (
ch
 ? ch->
ho°
 : 
NULL
);

365 
	}
}

370 
PUBLIC
 
	$HTCh™√l_upSem≠h‹e
 (
HTCh™√l
 * 
ch™√l
)

372 i‡(
ch™√l
) {

373 
ch™√l
->
£m≠h‹e
++;

374 
	`HTTRACE
(
PROT_TRACE
, "Ch™√l..... Sem≠h‹êö¸ó£dÅÿ%d f‹ ch™√»%p\n" 
_


375 
ch™√l
->
£m≠h‹e
 
_
 channel);

376 #ifde‡
HT_MUX


377 
HTMuxCh™√l
 * 
muxch
 = 
	`HTMuxCh™√l_föd
(
me
);

378 
HTPrŸocﬁ
 * 
¥Ÿocﬁ
 = 
	`HTNë_¥Ÿocﬁ
(
√t
);

379 
√t
->
£ssi⁄
 = 
	`HTMuxSessi⁄_c⁄√˘
(
muxch
,Çë, 
	`HTPrŸocﬁ_id
(
¥Ÿocﬁ
));

383 
	}
}

388 
PUBLIC
 
	$HTCh™√l_downSem≠h‹e
 (
HTCh™√l
 * 
ch™√l
)

390 i‡(
ch™√l
) {

391 
ch™√l
->
£m≠h‹e
--;

392 i‡(
ch™√l
->
£m≠h‹e
 <= 0) channel->semaphore = 0;

393 
	`HTTRACE
(
PROT_TRACE
, "Ch™√l..... Sem≠h‹êde¸ó£dÅÿ%d f‹ ch™√»%p\n" 
_


394 
ch™√l
->
£m≠h‹e
 
_
 channel);

396 
	}
}

401 
PUBLIC
 
	$HTCh™√l_£tSem≠h‹e
 (
HTCh™√l
 * 
ch™√l
, 
£m≠h‹e
)

403 i‡(
ch™√l
) {

404 
ch™√l
->
£m≠h‹e
 = semaphore;

405 i‡(
ch™√l
->
£m≠h‹e
 <= 0) channel->semaphore = 0;

406 
	`HTTRACE
(
PROT_TRACE
, "Ch™√l..... Sem≠h‹ê£àtÿ%d f‹ ch™√»%p\n" 
_


407 
ch™√l
->
£m≠h‹e
 
_
 channel);

409 
	}
}

415 
PUBLIC
 
BOOL
 
	$HTCh™√l_£tI≈ut
 (
HTCh™√l
 * 
ch
, 
HTI≈utSåóm
 * 
öput
)

417 i‡(
ch
) {

418 
ch
->
öput
 = input;

419  
YES
;

421  
NO
;

422 
	}
}

424 
PUBLIC
 
HTI≈utSåóm
 * 
	$HTCh™√l_öput
 (
HTCh™√l
 * 
ch
)

426  
ch
 ? ch->
öput
 : 
NULL
;

427 
	}
}

429 
PUBLIC
 
BOOL
 
	$HTCh™√l_dñëeI≈ut
 (
HTCh™√l
 * 
ch™√l
, 
°©us
)

431 i‡(
ch™√l
 && ch™√l->
öput
 && 
°©us
 !
HT_IGNORE
) {

432 
	`HTTRACE
(
PROT_TRACE
,

433 "Ch™√l..... Dñëêöpuà°ªam %∞‰om ch™√»%p\n" 
_


434 
ch™√l
->
öput
 
_
 channel);

435 i‡(
°©us
==
HT_INTERRUPTED
 || sètus==
HT_TIMEOUT
)

436 (*
ch™√l
->
öput
->
iß
->
ab‹t
)(ch™√l->öput, 
NULL
);

438 (*
ch™√l
->
öput
->
iß
->
_‰ì
)(channel->input);

439  
YES
;

441  
NO
;

442 
	}
}

448 
PUBLIC
 
BOOL
 
	$HTCh™√l_£tOuçut
 (
HTCh™√l
 * 
ch
, 
HTOuçutSåóm
 * 
ouçut
)

450 i‡(
ch
) {

451 
ch
->
ouçut
 = output;

452  
YES
;

454  
NO
;

455 
	}
}

457 
PUBLIC
 
HTOuçutSåóm
 * 
	$HTCh™√l_ouçut
 (
HTCh™√l
 * 
ch
)

459  
ch
 ? ch->
ouçut
 : 
NULL
;

460 
	}
}

462 
PUBLIC
 
BOOL
 
	$HTCh™√l_dñëeOuçut
 (
HTCh™√l
 * 
ch™√l
, 
°©us
)

464 i‡(
ch™√l
 && ch™√l->
ouçut
 && 
°©us
 !
HT_IGNORE
) {

465 
	`HTTRACE
(
PROT_TRACE
,

466 "Ch™√l..... Dñëêöpuà°ªam %∞‰om ch™√»%p\n" 
_


467 
ch™√l
->
öput
 
_
 channel);

468 i‡(
°©us
==
HT_INTERRUPTED
 || sètus==
HT_TIMEOUT
)

469 (*
ch™√l
->
ouçut
->
iß
->
ab‹t
)(ch™√l->ouçut, 
NULL
);

471 (*
ch™√l
->
ouçut
->
iß
->
_‰ì
)(channel->output);

472  
YES
;

474  
NO
;

475 
	}
}

477 
PUBLIC
 
HTI≈utSåóm
 * 
	$HTCh™√l_gëCh™√lISåóm
 (
HTCh™√l
 * 
ch
)

479 i‡(
ch
)

480  &
ch
->
ch™√lISåóm
;

481  
NULL
;

482 
	}
}

484 
PUBLIC
 
HTOuçutSåóm
 * 
	$HTCh™√l_gëCh™√lOSåóm
 (
HTCh™√l
 * 
ch
)

486 i‡(
ch
)

487  &
ch
->
ch™√lOSåóm
;

488  
NULL
;

489 
	}
}

	@Library/src/HTChannl.h

38 #i‚de‡
HTCHANNL_H


39 
	#HTCHANNL_H


	)

41 
_HTCh™√l
 
	tHTCh™√l
;

43 
	~"HTHo°.h
"

44 
	~"HTIOSåóm.h
"

62 
HTCh™√l
 * 
HTCh™√l_√w
 (
SOCKET
 
sockfd
, 
FILE
 * 
Â
, 
BOOL
 
a˘ive
);

70 
BOOL
 
HTCh™√l_dñëe
 (
HTCh™√l
 * 
ch™√l
, 
°©us
);

71 
BOOL
 
HTCh™√l_dñëeAŒ
 ();

72 
BOOL
 
HTCh™√l_ß„DñëeAŒ
 ();

82 
HTCh™√l
 * 
HTCh™√l_föd
 (
SOCKET
 
sockfd
);

95 
SOCKET
 
HTCh™√l_sockë
 (
HTCh™√l
 * 
ch™√l
);

96 
BOOL
 
HTCh™√l_£tSockë
 (
HTCh™√l
 * 
ch™√l
, 
SOCKET
 
sockë
);

98 
FILE
 * 
HTCh™√l_fûe
 (
HTCh™√l
 * 
ch™√l
);

99 
BOOL
 
HTCh™√l_£tFûe
 (
HTCh™√l
 * 
ch™√l
, 
FILE
 * 
Â
);

109 
BOOL
 
HTCh™√l_£tHo°
 (
HTCh™√l
 * 
ch
, 
HTHo°
 * 
ho°
);

110 
HTHo°
 * 
HTCh™√l_ho°
 (
HTCh™√l
 * 
ch
);

123 
HTCh™√l_upSem≠h‹e
 (
HTCh™√l
 * 
ch™√l
);

124 
HTCh™√l_downSem≠h‹e
 (
HTCh™√l
 * 
ch™√l
);

125 
HTCh™√l_£tSem≠h‹e
 (
HTCh™√l
 * 
ch™√l
, 
£m≠h‹e
);

141 
BOOL
 
HTCh™√l_£tI≈ut
 (
HTCh™√l
 * 
ch
, 
HTI≈utSåóm
 * 
öput
);

142 
HTI≈utSåóm
 * 
HTCh™√l_öput
 (
HTCh™√l
 * 
ch
);

143 
BOOL
 
HTCh™√l_dñëeI≈ut
 (
HTCh™√l
 * 
ch™√l
, 
°©us
);

145 
BOOL
 
HTCh™√l_£tOuçut
 (
HTCh™√l
 * 
ch
, 
HTOuçutSåóm
 * 
ouçut
);

146 
HTOuçutSåóm
 * 
HTCh™√l_ouçut
 (
HTCh™√l
 * 
ch
);

147 
BOOL
 
HTCh™√l_dñëeOuçut
 (
HTCh™√l
 * 
ch™√l
, 
°©us
);

149 
HTI≈utSåóm
 * 
HTCh™√l_gëCh™√lISåóm
 (
HTCh™√l
 * 
ch
);

150 
HTOuçutSåóm
 * 
HTCh™√l_gëCh™√lOSåóm
 (
HTCh™√l
 * 
ch
);

	@Library/src/HTChunk.c

16 
	~"wwwsys.h
"

17 
	~"HTUtûs.h
"

18 
	~"HTChunk.h
"

20 
	s_HTChunk
 {

21 
	msize
;

22 
	mgrowby
;

23 
	mÆloˇãd
;

24 * 
	md©a
;

32 
PUBLIC
 
HTChunk
 * 
	$HTChunk_√w
 (
grow
)

34 
HTChunk
 * 
ch
;

35 i‡((
ch
 = (
HTChunk
 *Ë
	`HT_CALLOC
(1, (HTChunk))Ë=
NULL
)

36 
	`HT_OUTOFMEM
("HTChunk_new");

37 
ch
->
growby
 = 
grow
;

38  
ch
;

39 
	}
}

47 
PUBLIC
 
	$HTChunk_˛ór
 (
HTChunk
 * 
ch
)

49 i‡(
ch
) {

50 
ch
->
size
 = 0;

51 i‡(
ch
->
d©a
Ë
	`mem£t
((*Ëch->d©a, '\0', ch->
Æloˇãd
);

53 
	}
}

59 
PUBLIC
 
	$HTChunk_dñëe
 (
HTChunk
 * 
ch
)

61 i‡(
ch
) {

62 
	`HT_FREE
(
ch
->
d©a
);

63 
	`HT_FREE
(
ch
);

65 
	}
}

67 
PUBLIC
 * 
	$HTChunk_d©a
 (
HTChunk
 * 
ch
)

69  
ch
 ? ch->
d©a
 : 
NULL
;

70 
	}
}

72 
PUBLIC
 
	$HTChunk_size
 (
HTChunk
 * 
ch
)

74  
ch
 ? ch->
size
 : -1;

75 
	}
}

77 
PUBLIC
 
BOOL
 
	$HTChunk_åunˇã
 (
HTChunk
 * 
ch
, 
Àngth
)

79 i‡(
ch
 && 
Àngth
 >0 &&Üígth < ch->
size
) {

80 
	`mem£t
(
ch
->
d©a
+
Àngth
, '\0', ch->
size
-length);

81 
ch
->
size
 = 
Àngth
;

82  
YES
;

84  
NO
;

85 
	}
}

92 
PUBLIC
 
BOOL
 
	$HTChunk_£tSize
 (
HTChunk
 * 
ch
, 
Àngth
)

94 i‡(
ch
 && 
Àngth
 >= 0) {

95 i‡(
Àngth
 < 
ch
->
size
)

96 
	`mem£t
(
ch
->
d©a
+
Àngth
, '\0', ch->
size
-length);

97 i‡(
Àngth
 >
ch
->
Æloˇãd
)

98 
	`HTChunk_ísuª
(
ch
, 
Àngth
 - ch->
size
);

99 
ch
->
size
 = 
Àngth
;

100  
YES
;

102  
NO
;

103 
	}
}

108 
PUBLIC
 
HTChunk
 * 
	$HTChunk_‰omCSåög
 (* 
°r
, 
grow
)

110 
HTChunk
 * 
ch
;

111 
ch
 = 
	`HTChunk_√w
(
grow
);

112 i‡(
°r
) {

113 
ch
->
d©a
 = 
°r
;

114 
ch
->
size
 = 
	`°æí
(
°r
);

115 
ch
->
Æloˇãd
 = ch->
size
 + 1;

117  
ch
;

118 
	}
}

123 
PUBLIC
 
HTChunk
 * 
	$HTChunk_‰omBuf„r
 (* 
buf
, 
buÊí
, 
size
, 
grow
)

125 
HTChunk
 * 
ch
;

126 
ch
 = 
	`HTChunk_√w
(
grow
);

127 i‡(
buf
) {

128 
ch
->
d©a
 = 
buf
;

129 
ch
->
size
 = ch->
Æloˇãd
 = 
buÊí
;

130 i‡(
size
 < 
buÊí
)

131 
	`HTChunk_£tSize
(
ch
, 
size
);

133  
ch
;

134 
	}
}

139 
PUBLIC
 * 
	$HTChunk_toCSåög
 (
HTChunk
 * 
ch
)

141 * 
ªt
 = 0;

142 i‡(
ch
) {

143 
ªt
 = 
ch
->
d©a
;

144 
	`HT_FREE
(
ch
);

146  
ªt
;

147 
	}
}

152 
PUBLIC
 
	$HTChunk_putc
 (
HTChunk
 * 
ch
, 
c
)

154 i‡(
ch
) {

155 i‡(!
ch
->
d©a
 || ch->
size
 >ch->
Æloˇãd
-1) {

156 i‡(
ch
->
d©a
) {

157 i‡((
ch
->
d©a
 = (*Ë
	`HT_REALLOC
(ch->d©a,ch->
Æloˇãd
+ch->
growby
)Ë=
NULL
)

158 
	`HT_OUTOFMEM
("HTChunk_putc");

159 
	`mem£t
((*Ë(
ch
->
d©a
 + ch->
Æloˇãd
), '\0', ch->
growby
);

161 i‡((
ch
->
d©a
 = (*Ë
	`HT_CALLOC
(1, ch->
Æloˇãd
+ch->
growby
)Ë=
NULL
)

162 
	`HT_OUTOFMEM
("HTChunk_putc");

164 
ch
->
Æloˇãd
 +ch->
growby
;

166 *(
ch
->
d©a
+ch->
size
++Ë
c
;

168 
	}
}

173 
PUBLIC
 
	$HTChunk_puts
 (
HTChunk
 * 
ch
, c⁄° * 
s
)

175 
	`HTChunk_putb
(
ch
, 
s
, (Ë
	`°æí
(s));

176 
	}
}

182 
PUBLIC
 
	$HTChunk_putb
 (
HTChunk
 * 
ch
, c⁄° * 
block
, 
Àn
)

184 i‡(
ch
 && 
block
 && 
Àn
) {

185 
√eded
 = 
ch
->
size
+
Àn
;

186 i‡(
√eded
 >
ch
->
Æloˇãd
) {

187 
ch
->
Æloˇãd
 = 
√eded
 -Çìded%ch->
growby
 + ch->growby;

188 i‡(
ch
->
d©a
) {

189 i‡((
ch
->
d©a
 = (*Ë
	`HT_REALLOC
(ch->d©a, ch->
Æloˇãd
)Ë=
NULL
)

190 
	`HT_OUTOFMEM
("HTChunk_putb");

191 
	`mem£t
((*Ë(
ch
->
d©a
 + 
√eded
), '\0', ch->
Æloˇãd
-needed);

193 i‡((
ch
->
d©a
 = (*Ë
	`HT_CALLOC
(1, ch->
Æloˇãd
)Ë=
NULL
)

194 
	`HT_OUTOFMEM
("HTChunk_putb");

197 
	`mem˝y
((*Ë(
ch
->
d©a
+ch->
size
), 
block
, 
Àn
);

198 
ch
->
size
 = 
√eded
;

200 
	}
}

202 
PUBLIC
 
	$HTChunk_ãrmö©e
 (
HTChunk
 * 
ch
)

204 
	`HTChunk_putc
(
ch
, '\0');

205 
	}
}

210 
PUBLIC
 
	$HTChunk_ísuª
 (
HTChunk
 * 
ch
, 
Àn
)

212 i‡(
ch
 && 
Àn
 > 0) {

213 
√eded
 = 
ch
->
size
+
Àn
;

214 i‡(
√eded
 >
ch
->
Æloˇãd
) {

215 
ch
->
Æloˇãd
 = 
√eded
 -Çìded%ch->
growby
 + ch->growby;

216 i‡(
ch
->
d©a
) {

217 i‡((
ch
->
d©a
 = (*Ë
	`HT_REALLOC
(ch->d©a, ch->
Æloˇãd
)Ë=
NULL
)

218 
	`HT_OUTOFMEM
("HTChunk_ensure");

219 
	`mem£t
((*Ë(
ch
->
d©a
 + ch->
size
), '\0', ch->
Æloˇãd
-ch->size);

221 i‡((
ch
->
d©a
 = (*Ë
	`HT_CALLOC
(1, ch->
Æloˇãd
)Ë=
NULL
)

222 
	`HT_OUTOFMEM
("HTChunk_ensure");

227 i‡(
√eded
 <
ch
->
Æloˇãd
) ;

228 
ch
->
Æloˇãd
 = 
√eded
-1 - (“ìded-1Ë% ch->
growby
)

229 + 
ch
->
growby
;

230 
ch
->
d©a
 = ch->d©®? (*)
	`ªÆloc
(ch->d©a, ch->
Æloˇãd
)

231 : (*)
	`HT_MALLOC
(
ch
->
Æloˇãd
);

232 i‡(
ch
->
d©a
 =
NULL
Ë
	`HT_OUTOFMEM
(
__FILE__
, "HTChunk_ensure");

234 
	}
}

	@Library/src/HTChunk.h

37 #i‚de‡
HTCHUNK_H


38 
	#HTCHUNK_H


	)

50 
_HTChunk
 
	tHTChunk
;

52 
HTChunk
 * 
HTChunk_√w
 (
growby
);

62 
HTChunk_dñëe
 (
HTChunk
 * 
ch
);

77 
HTChunk_˛ór
 (
HTChunk
 * 
ch
);

91 
HTChunk_ísuª
 (
HTChunk
 * 
ch
, 
exåa_size
);

101 
HTChunk_putc
 (
HTChunk
 * 
ch
, 
c
);

112 
HTChunk_puts
 (
HTChunk
 * 
ch
, c⁄° *
°r
);

122 
HTChunk_putb
 (
HTChunk
 * 
ch
, c⁄° *
block
, 
Àn
);

134 * 
HTChunk_d©a
 (
HTChunk
 * 
ch
);

144 
HTChunk_size
 (
HTChunk
 * 
ch
);

160 
BOOL
 
HTChunk_åunˇã
 (
HTChunk
 * 
ch
, 
size
);

161 
BOOL
 
HTChunk_£tSize
 (
HTChunk
 * 
ch
, 
size
);

174 
HTChunk_ãrmö©e
 (
HTChunk
 * 
ch
);

187 
HTChunk
 * 
HTChunk_‰omCSåög
 (* 
°r
, 
grow
);

188 * 
HTChunk_toCSåög
 (
HTChunk
 * 
ch
);

205 
HTChunk
 * 
HTChunk_‰omBuf„r
 (* 
buf
, 
buÊí
, 
size
, 
grow
);

215 
	#HTChunkCª©e
(
growby
Ë
	`HTChunk_√w
(growby)

	)

216 
	#HTChunkFªe
(
ch
Ë
	`HTChunk_dñëe
(ch)

	)

217 
	#HTChunkCÀ¨
(
ch
Ë
	`HTChunk_˛ór
(ch)

	)

218 
	#HTChunkEnsuª
(
ch
, 
s
Ë
	`HTChunk_ísuª
((ch), (s))

	)

219 
	#HTChunkPutc
(
ch
, 
c
Ë
	`HTChunk_putc
((ch), (c))

	)

220 
	#HTChunkPuts
(
ch
, 
°r
Ë
	`HTChunk_puts
((ch), (°r))

	)

221 
	#HTChunkTîmö©e
(
ch
Ë
	`HTChunk_ãrmö©e
(ch)

	)

222 
	#HTChunkD©a
(
ch
Ë
	`HTChunk_d©a
(ch)

	)

223 
	#HTChunkSize
(
ch
Ë
	`HTChunk_size
(ch)

	)

	@Library/src/HTConLen.c

13 
	~"wwwsys.h
"

14 
	~"WWWUtû.h
"

15 
	~"WWWC‹e.h
"

16 
	~"HTC⁄Lí.h
"

18 
	#HT_MIN_BLOCK
 0x100

	)

19 
	#HT_MAX_BLOCK
 0x2000

	)

20 
	#HT_MAX_SIZE
 0x10000

	)

21 
	#PUTBLOCK
(
b
, 
l
Ë(*
me
->
èrgë
->
iß
->
put_block
)(me->èrgë,(b),÷))

	)

23 
	s_HTBufIãm
 {

24 
	mÀn
;

25 * 
	mbuf
;

26 
_HTBufIãm
 * 
	m√xt
;

27 } 
	tHTBufIãm
;

29 
	e_Buf„rMode
 {

30 
	mHT_BM_PLAIN
 = 0x0,

31 
	mHT_BM_DELAY
 = 0x1,

32 
	mHT_BM_COUNT
 = 0x2,

33 
	mHT_BM_PIPE
 = 0x4

34 } 
	tBuf„rMode
;

36 
	e_Buf„rSèã
 {

37 
	mHT_BS_OK
 = 0,

38 
	mHT_BS_PAUSE
 = 1,

39 
	mHT_BS_TRANSPARENT
 = 2

40 } 
	tBuf„rSèã
;

42 
	s_HTSåóm
 {

43 
HTSåómCœss
 * 
	miß
;

44 
HTReque°
 * 
	mªque°
;

45 
HTSåóm
 * 
	mèrgë
;

47 * 
	mtmp_buf
;

48 
	mtmp_öd
;

49 
	mtmp_max
;

50 
HTBufIãm
 * 
	mhód
;

51 
HTBufIãm
 * 
	mèû
;

53 
	mmax_size
;

54 
	mcur_size
;

55 
	mc⁄Àn
;

56 
Buf„rMode
 
	mmode
;

57 
Buf„rSèã
 
	m°©e
;

73 
PRIVATE
 
BOOL
 
	$‰ì_buf
 (
HTBufIãm
 * 
me
)

75 i‡(
me
) {

76 
	`HT_FREE
(
me
->
buf
);

77 
	`HT_FREE
(
me
);

78  
YES
;

80  
NO
;

81 
	}
}

83 
PRIVATE
 
	$‰ì_buf_Æl
 (
HTSåóm
 * 
me
)

85 
HTBufIãm
 * 
cur
 = 
me
->
hód
;

86 
HTBufIãm
 * 
kûlme
;

87 
me
->
tmp_öd
 = 0;

88 
me
->
tmp_max
 = 0;

89 
	`HT_FREE
(
me
->
tmp_buf
);

90 
cur
) {

91 
kûlme
 = 
cur
;

92 
cur
 = cur->
√xt
;

93 
	`‰ì_buf
(
cur
);

95 
me
->
hód
 = me->
èû
 = 
NULL
;

96 
	}
}

98 
PRIVATE
 
	$≠≥nd_buf
 (
HTSåóm
 * 
me
)

100 
HTBufIãm
 * 
b
;

101 i‡((
b
 = (
HTBufIãm
 *Ë
	`HT_CALLOC
(1, (HTBufIãm))Ë=
NULL
)

102 
	`HT_OUTOFMEM
("append_buf");

103 
b
->
Àn
 = 
me
->
tmp_öd
;

104 
b
->
buf
 = 
me
->
tmp_buf
;

105 
me
->
tmp_öd
 = 0;

106 
me
->
tmp_max
 = 0;

107 
me
->
tmp_buf
 = 0;

108 i‡(
me
->
èû
)

109 
me
->
èû
->
√xt
 = 
b
;

111 
me
->
hód
 = 
b
;

112 
me
->
èû
 = 
b
;

113 
	}
}

115 
PRIVATE
 
BOOL
 
	$Æloc_√w
 (
HTSåóm
 * 
me
, 
size
)

117 i‡(
me
->
c⁄Àn
 >me->
max_size
) {

118 
	`HTTRACE
(
STREAM_TRACE
, "Buf„r...... sizê%dÑóched, goögÅøn•¨ít\n" 
_


119 
me
->
max_size
);

120  
NO
;

121 } i‡(
size
) {

122 
me
->
tmp_öd
 = 0;

123 
me
->
tmp_max
 = 
size
;

124 i‡((
me
->
tmp_buf
 = (*Ë
	`HT_MALLOC
(
size
)Ë=
NULL
)

125 
	`HT_OUTOFMEM
("buf_put_char");

126 
	`HTTRACE
(
STREAM_TRACE
, "Buf„r...... cª©ed wôhÜí %d\n" 
_
 
size
);

127  
YES
;

129  
NO
;

130 
	}
}

137 
PRIVATE
 
	$buf_Êush
 (
HTSåóm
 * 
me
)

139 i‡(
me
->
°©e
 !
HT_BS_TRANSPARENT
) {

140 
HTBufIãm
 * 
cur
;

141 i‡(
me
->
tmp_buf
Ë
	`≠≥nd_buf
(me);

142 (
cur
 = 
me
->
hód
)) {

143 
°©us
;

144 i‡((
°©us
 = 
	`PUTBLOCK
(
cur
->
buf
, cur->
Àn
)Ë!
HT_OK
) {

145  
°©us
;

147 
me
->
hód
 = 
cur
->
√xt
;

148 
	`‰ì_buf
(
cur
);

152 i‡((
me
->
mode
 & 
HT_BM_PIPE
)Ëme->
°©e
 = 
HT_BS_TRANSPARENT
;

154  (*
me
->
èrgë
->
iß
->
Êush
)(me->target);

155 
	}
}

157 
PRIVATE
 
	$buf_put_block
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
)

163 i‡(
me
->
°©e
 =
HT_BS_PAUSE
Ë 
HT_PAUSE
;

170 
me
->
c⁄Àn
 +
l
;

171 i‡(
me
->
°©e
 !
HT_BS_TRANSPARENT
) {

179 i‡(
me
->
tmp_buf
 && me->
tmp_max
-me->
tmp_öd
 >
l
) {

180 
	`mem˝y
(
me
->
tmp_buf
 + me->
tmp_öd
, 
b
, 
l
);

181 
me
->
tmp_öd
 +
l
;

182  
HT_OK
;

188 i‡(
me
->
tmp_buf
Ë
	`≠≥nd_buf
(me);

195 i‡(
me
->
cur_size
 < 
HT_MAX_BLOCK
) {

196 
√wsize
 = 
me
->
cur_size
 ? me->cur_sizê: 
HT_MIN_BLOCK
;

197 
l
 > 
√wsize
 &&Çewsizê< 
HT_MAX_BLOCK
)Çewsize *= 2;

198 
me
->
cur_size
 = 
√wsize
;

201 i‡(
	`Æloc_√w
(
me
, me->
cur_size
)) {

203 
	`mem˝y
(
me
->
tmp_buf
, 
b
, 
l
);

204 
me
->
tmp_öd
 = 
l
;

205 } i‡(
me
->
mode
 & 
HT_BM_DELAY
) {

207 
me
->
°©e
 = 
HT_BS_PAUSE
;

208 
	`HTTRACE
(
STREAM_TRACE
, "Buffer....... Paused\n");

209  
HT_PAUSE
;

212 
°©us
 = 
	`buf_Êush
(
me
);

213 i‡(
°©us
 !
HT_OK
)  status;

223 i‡(
me
->
°©e
 =
HT_BS_TRANSPARENT
Ë 
	`PUTBLOCK
(
b
, 
l
);

224  
HT_OK
;

225 
	}
}

227 
PRIVATE
 
	$buf_put_ch¨
 (
HTSåóm
 * 
me
, 
c
)

229  
	`buf_put_block
(
me
, &
c
, 1);

230 
	}
}

232 
PRIVATE
 
	$buf_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

234  
	`buf_put_block
(
me
, 
s
, (Ë
	`°æí
(s));

235 
	}
}

237 
PRIVATE
 
	$buf_‰ì
 (
HTSåóm
 * 
me
)

239 
°©us
 = 
HT_OK
;

245 i‡(
me
->
mode
 & 
HT_BM_PIPE
 && me->
°©e
 !
HT_BS_TRANSPARENT
) {

246 
	`HTTRACE
(
STREAM_TRACE
, "PipeBuffer WaitingÅo be flushed\n");

247  
HT_OK
;

254 i‡(
me
->
mode
 & 
HT_BM_COUNT
 && me->
ªque°
) {

255 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
me
->
ªque°
);

256 
	`HTTRACE
(
STREAM_TRACE
, "Buf„r........ CÆcuœãd c⁄ã¡-Àngth: %d\n" 
_
 
me
->
c⁄Àn
);

257 
	`HTAnch‹_£tLígth
(
™ch‹
, 
me
->
c⁄Àn
);

267 i‡((
°©us
 = 
	`buf_Êush
(
me
)Ë!
HT_OK
)

268  
°©us
;

269 i‡((
°©us
 = (*
me
->
èrgë
->
iß
->
_‰ì
)(me->èrgë)Ë!
HT_OK
)

270  
°©us
;

271 
	`HT_FREE
(
me
);

272  
°©us
;

273 
	}
}

275 
PRIVATE
 
	$buf_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

277 i‡(
me
->
èrgë
Ë(*me->èrgë->
iß
->
ab‹t
)(me->èrgë,
e
);

278 
	`‰ì_buf_Æl
(
me
);

279 
	`HT_FREE
(
me
);

280 
	`HTTRACE
(
PROT_TRACE
, "Buffer...... ABORTING...\n");

281  
HT_ERROR
;

282 
	}
}

284 
HTSåómCœss
 
	gHTBuf„rCœss
 = {

286 
buf_Êush
,

287 
buf_‰ì
,

288 
buf_ab‹t
,

289 
buf_put_ch¨
,

290 
buf_put_°rög
,

291 
buf_put_block


294 
PUBLIC
 
HTSåóm
 * 
	$HTBuf„r_√w
 (
HTSåóm
 * 
èrgë
,

295 
HTReque°
 * 
ªque°
,

296 
max_size
)

298 
HTSåóm
 * 
me
;

299 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

300 
	`HT_OUTOFMEM
("HTBufferStream");

301 
me
->
iß
 = &
HTBuf„rCœss
;

302 
me
->
èrgë
 =Åarget;

303 
me
->
ªque°
 =Ñequest;

304 
me
->
max_size
 = (max_sizê> 0Ë? max_sizê: 
HT_MAX_SIZE
;

305 
me
->
mode
 = 
HT_BM_PLAIN
;

306 
	`HTTRACE
(
STREAM_TRACE
, "Buf„r...... Cª©ed wôh sizê%d\n" 
_
 
me
->
max_size
);

307  
me
;

308 
	}
}

310 
PUBLIC
 
HTSåóm
 * 
	$HTDñayBuf„r
 (
HTSåóm
 * 
èrgë
, 
max_size
)

312 
HTSåóm
 * 
me
 = 
	`HTBuf„r_√w
(
èrgë
, 
NULL
, 
max_size
);

313 i‡(
me
) {

314 
me
->
mode
 = 
HT_BM_DELAY
;

315  
me
;

317  
	`HTEº‹Såóm
();

318 
	}
}

320 
PUBLIC
 
HTSåóm
 * 
	$HTC⁄ã¡Cou¡î
 (
HTSåóm
 * 
èrgë
,

321 
HTReque°
 * 
ªque°
,

322 
max_size
)

324 
HTSåóm
 * 
me
 = 
	`HTBuf„r_√w
(
èrgë
, 
NULL
, 
max_size
);

325 i‡(
me
) {

326 
me
->
mode
 = 
HT_BM_COUNT
;

327  
me
;

329  
	`HTEº‹Såóm
();

330 
	}
}

332 
PUBLIC
 
HTSåóm
 * 
	$HTPùeBuf„r
 (
HTSåóm
 * 
èrgë
, 
max_size
)

334 
HTSåóm
 * 
me
 = 
	`HTBuf„r_√w
(
èrgë
, 
NULL
, 
max_size
);

335 i‡(
me
) {

336 
me
->
mode
 = 
HT_BM_PIPE
;

337  
me
;

339  
	`HTEº‹Såóm
();

340 
	}
}

	@Library/src/HTConLen.h

34 #i‚de‡
HTCONLEN_H


35 
	#HTCONLEN_H


	)

49 
HTSåóm
 * 
HTBuf„r_√w
 (HTSåóm * 
èrgë
,

50 
HTReque°
 * 
ªque°
,

51 
max_size
);

64 
HTSåóm
 * 
HTC⁄ã¡Cou¡î
 (HTSåóm * 
èrgë
,

65 
HTReque°
 * 
ªque°
,

66 
max_size
);

80 
HTSåóm
 * 
HTDñayBuf„r
 (HTSåóm * 
èrgë
,

81 
max_size
);

94 
HTSåóm
 * 
HTPùeBuf„r
 (HTSåóm * 
èrgë
,

95 
max_size
);

	@Library/src/HTCookie.c

17 
	~"wwwsys.h
"

18 
	~"WWWUtû.h
"

19 
	~"WWWC‹e.h
"

20 
	~"WWWHTTP.h
"

21 
	~"WWWMIME.h
"

22 
	~"HTCookõ.h
"

25 
PRIVATE
 
HTCookõSëCÆlback
 * 
	gSëCookõ
 = 
NULL
;

26 
PRIVATE
 * 
	gSëCookõC⁄ãxt
 = 
NULL
;

28 
PRIVATE
 
HTCookõFödCÆlback
 * 
	gFödCookõ
 = 
NULL
;

29 
PRIVATE
 * 
	gFödCookõC⁄ãxt
 = 
NULL
;

32 
PRIVATE
 
BOOL
 
	gbakög_cookõs
 = 
NO
;

35 
	s_HTCookõ
 {

36 * 
	m«me
;

37 * 
	mvÆue
;

38 * 
	mdomaö
;

39 * 
	m∑th
;

40 
time_t
 
	mexpú©i⁄
;

41 
BOOL
 
	m£cuª
;

45 
	s_HTCookõHﬁdî
 {

46 
HTReque°
 * 
	mªque°
;

47 
HTLi°
 * 
	mcookõs
;

48 } 
	tHTCookõHﬁdî
;

51 
PRIVATE
 
HTLi°
 * 
	gcookõ_hﬁdî
 = 
NULL
;

54 
PRIVATE
 
HTCookõMode
 
	gCookõMode
 = 
HT_COOKIE_PROMPT
 | 
HT_COOKIE_ACCEPT
 | 
HT_COOKIE_SEND
;

58 
PRIVATE
 
HTCookõ
 * 
	$HTCookõ_√w
 ()

60 
HTCookõ
 * 
me
 = 
NULL
;

61 i‡((
me
 = (
HTCookõ
 *Ë
	`HT_CALLOC
(1, (HTCookõ))Ë=
NULL
)

62 
	`HT_OUTOFMEM
("HTCookie_new");

63  
me
;

64 
	}
}

66 
PRIVATE
 
BOOL
 
	$HTCookõ_dñëe
 (
HTCookõ
 * 
me
)

68 i‡(
me
) {

69 
	`HT_FREE
(
me
->
«me
);

70 
	`HT_FREE
(
me
->
vÆue
);

71 
	`HT_FREE
(
me
->
domaö
);

72 
	`HT_FREE
(
me
->
∑th
);

73 
	`HT_FREE
(
me
);

74  
YES
;

76  
NO
;

77 
	}
}

79 
PUBLIC
 
BOOL
 
	$HTCookõ_£tName
 (
HTCookõ
 * 
me
, c⁄° * 
«me
)

81 i‡(
me
 && 
«me
) {

82 
me
->
«me
 = 
	`SåAŒocC›y
(me->name,Çame);

83  
YES
;

85  
NO
;

86 
	}
}

88 
PUBLIC
 * 
	$HTCookõ_«me
 (
HTCookõ
 * 
me
)

90  
me
 ? me->
«me
 : 
NULL
;

91 
	}
}

93 
PUBLIC
 
BOOL
 
	$HTCookõ_£tVÆue
 (
HTCookõ
 * 
me
, c⁄° * 
vÆue
)

95 i‡(
me
 && 
vÆue
) {

96 
me
->
vÆue
 = 
	`SåAŒocC›y
(me->value, value);

97  
YES
;

99  
NO
;

100 
	}
}

102 
PUBLIC
 * 
	$HTCookõ_vÆue
 (
HTCookõ
 * 
me
)

104  
me
 ? me->
vÆue
 : 
NULL
;

105 
	}
}

107 
PUBLIC
 
BOOL
 
	$HTCookõ_£tDomaö
 (
HTCookõ
 * 
me
, c⁄° * 
domaö
)

109 i‡(
me
 && 
domaö
) {

110 
me
->
domaö
 = 
	`SåAŒocC›y
(me->domain, domain);

111  
YES
;

113  
NO
;

114 
	}
}

116 
PUBLIC
 * 
	$HTCookõ_domaö
 (
HTCookõ
 * 
me
)

118  
me
 ? me->
domaö
 : 
NULL
;

119 
	}
}

121 
PUBLIC
 
BOOL
 
	$HTCookõ_£tP©h
 (
HTCookõ
 * 
me
, c⁄° * 
∑th
)

123 i‡(
me
 && 
∑th
) {

124 
me
->
∑th
 = 
	`SåAŒocC›y
(me->path,Öath);

125  
YES
;

127  
NO
;

128 
	}
}

130 
PUBLIC
 * 
	$HTCookõ_∑th
 (
HTCookõ
 * 
me
)

132  
me
 ? me->
∑th
 : 
NULL
;

133 
	}
}

135 
PUBLIC
 
time_t
 
	$HTCookõ_£tExpú©i⁄
 (
HTCookõ
 * 
me
, 
time_t
 
expú©i⁄
)

137 i‡(
me
) {

138 
me
->
expú©i⁄
 =Éxpiration;

139  
YES
;

141  
NO
;

142 
	}
}

144 
PUBLIC
 
time_t
 
	$HTCookõ_expú©i⁄
 (
HTCookõ
 * 
me
)

146  
me
 ? me->
expú©i⁄
 : -1;

147 
	}
}

149 
PUBLIC
 
time_t
 
	$HTCookõ_£tSecuª
 (
HTCookõ
 * 
me
, 
BOOL
 
£cuª
)

151 i‡(
me
) {

152 
me
->
£cuª
 = secure;

153  
YES
;

155  
NO
;

156 
	}
}

158 
PUBLIC
 
BOOL
 
	$HTCookõ_isSecuª
 (
HTCookõ
 * 
me
)

160  
me
 ? me->
£cuª
 : 
NO
;

161 
	}
}

165 
PRIVATE
 
BOOL
 
	$HTCookõHﬁdî_addCookõ
 (
HTReque°
 * 
ªque°
, 
HTCookõ
 * 
cookõ
)

167 i‡(
ªque°
 && 
cookõ
) {

168 
HTLi°
 * 
cur
 = 
cookõ_hﬁdî
;

169 
HTCookõHﬁdî
 * 
¥es
 = 
NULL
;

172 i‡(!
cookõ_hﬁdî
Ëcookõ_hﬁdî = 
	`HTLi°_√w
();

175 (
¥es
 = (
HTCookõHﬁdî
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

176 i‡(
¥es
->
ªque°
 ==Ñequest) ;

180 i‡(!
¥es
) {

181 i‡((
¥es
 = (
HTCookõHﬁdî
 *Ë
	`HT_CALLOC
(1, (HTCookõHﬁdî))Ë=
NULL
)

182 
	`HT_OUTOFMEM
("HTCookieHolder_newCookie");

183 
¥es
->
ªque°
 =Ñequest;

184 
¥es
->
cookõs
 = 
	`HTLi°_√w
();

187 
	`HTLi°_addObje˘
(
cookõ_hﬁdî
, 
¥es
);

191 
	`HTLi°_addObje˘
(
¥es
->
cookõs
, 
cookõ
);

193  
YES
;

195  
NO
;

196 
	}
}

198 
PRIVATE
 
HTCookõHﬁdî
 * 
	$HTCookõHﬁdî_föd
 (
HTReque°
 * 
ªque°
)

200 i‡(
ªque°
) {

201 
HTLi°
 * 
cur
 = 
cookõ_hﬁdî
;

202 
HTCookõHﬁdî
 * 
¥es
 = 
NULL
;

203 (
¥es
 = (
HTCookõHﬁdî
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

204 i‡(
¥es
->
ªque°
 ==Ñequest) Öres;

207  
NULL
;

208 
	}
}

210 
PRIVATE
 
BOOL
 
	$HTCookõHﬁdî_dñëe
 (
HTCookõHﬁdî
 * 
me
)

212 i‡(
me
) {

213 i‡(
me
->
cookõs
) {

214 
HTLi°
 * 
cookõs
 = 
me
->cookies;

215 
HTCookõ
 * 
cookõ
;

216 (
cookõ
 = (
HTCookõ
 *Ë
	`HTLi°_√xtObje˘
(
cookõs
)))

217 
	`HTCookõ_dñëe
(
cookõ
);

218 
	`HTLi°_dñëe
(
me
->
cookõs
);

220 
	`HTLi°_ªmoveObje˘
(
cookõ_hﬁdî
, 
me
);

221 
	`HT_FREE
(
me
);

222  
YES
;

224  
NO
;

225 
	}
}

227 
PRIVATE
 
BOOL
 
	$HTCookõHﬁdî_dñëeAŒ
 ()

229 i‡(
cookõ_hﬁdî
) {

230 
HTLi°
 * 
cur
 = 
cookõ_hﬁdî
;

231 
HTCookõHﬁdî
 * 
¥es
 = 
NULL
;

232 (
¥es
 = (
HTCookõHﬁdî
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

233 
	`HTCookõHﬁdî_dñëe
(
¥es
);

235 
	`HTLi°_dñëe
(
cookõ_hﬁdî
);

236 
cookõ_hﬁdî
 = 
NULL
;

237  
YES
;

239  
NO
;

240 
	}
}

249 
PRIVATE
 
	$HTCookõ_∑r£SëCookõ
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

250 * 
tokí
, * 
vÆue
)

253 * 
cookõ_«me
 = 
	`HTNextFõld
(&
vÆue
);

254 * 
cookõ_vÆue
 = 
	`HTNextFõld
(&
vÆue
);

255 i‡(
cookõ_«me
 && *cookõ_«mê&& 
cookõ_vÆue
) {

256 
HTCookõ
 * 
cookõ
 = 
	`HTCookõ_√w
();

257 * 
∑øm_∑ú
;

259 
	`HTCookõ_£tName
(
cookõ
, 
cookõ_«me
);

260 
	`HTCookõ_£tVÆue
(
cookõ
, 
cookõ_vÆue
);

263 
	`HTCookõHﬁdî_addCookõ
(
ªque°
, 
cookõ
);

266 (
∑øm_∑ú
 = 
	`HTNextP¨am
(&
vÆue
))) {

267 * 
tok
 = 
	`HTNextFõld
(&
∑øm_∑ú
);

268 * 
vÆ
 = 
∑øm_∑ú
;

269 i‡(
tok
) {

270 i‡(!
	`°rˇ£comp
(
tok
, "expúes"Ë&& 
vÆ
 && *val) {

271 
	`HTTRACE
(
STREAM_TRACE
, "Cookõ...... Expúe†`%s\'\n" 
_
 
vÆ
);

272 
	`HTCookõ_£tExpú©i⁄
(
cookõ
, 
	`HTP¨£Time
(
vÆ
, 
NULL
, 
YES
));

273 } i‡(!
	`°rˇ£comp
(
tok
, "domaö"Ë&& 
vÆ
 && *val) {

274 
	`HTTRACE
(
STREAM_TRACE
, "Cookõ...... Domaö `%s\'\n" 
_
 
vÆ
);

275 
	`HTCookõ_£tDomaö
(
cookõ
, 
vÆ
);

276 } i‡(!
	`°rˇ£comp
(
tok
, "∑th"Ë&& 
vÆ
 && *val) {

277 
	`HTTRACE
(
STREAM_TRACE
, "Cookõ...... P©h `%s\'\n" 
_
 
vÆ
);

278 
	`HTCookõ_£tP©h
(
cookõ
, 
vÆ
);

279 } i‡(!
	`°rˇ£comp
(
tok
, "secure")) {

280 
	`HTTRACE
(
STREAM_TRACE
, "Cookõ...... Secuª `%s\'\n" 
_
 
vÆ
);

281 
	`HTCookõ_£tSecuª
(
cookõ
, 
YES
);

283 
	`HTTRACE
(
STREAM_TRACE
, "Cookõ...... Unknow¿`%s\' wôh vÆuê`%s\'\n" 
_


284 
tok
 
_
 
vÆ
 ? val : "<null>");

288  
HT_OK
;

289 
	}
}

294 
PRIVATE
 
	$HTCookõ_bef‹eFûãr
 (
HTReque°
 * 
ªque°
, * 
∑øm
, 
mode
)

296 i‡((
CookõMode
 & 
HT_COOKIE_SEND
Ë&& 
FödCookõ
) {

297 
HTAssocLi°
 * 
cookõs
 = (*
FödCookõ
)(
ªque°
, 
FödCookõC⁄ãxt
);

298 i‡(
cookõs
) {

299 
HTChunk
 * 
cookõ_hódî
 = 
	`HTChunk_√w
(64);

300 
HTAssocLi°
 * 
cur
 = 
cookõs
;

301 
HTAssoc
 * 
¥es
;

302 
BOOL
 
fú°
=
YES
;

303 (
¥es
 = (
HTAssoc
 *Ë
	`HTAssocLi°_√xtObje˘
(
cur
))) {

304 i‡(!
fú°
Ë
	`HTChunk_putc
(
cookõ_hódî
, ';');

305 
	`HTChunk_puts
(
cookõ_hódî
, 
	`HTAssoc_«me
(
¥es
));

306 
	`HTChunk_putc
(
cookõ_hódî
, '=');

307 
	`HTChunk_puts
(
cookõ_hódî
, 
	`HTAssoc_vÆue
(
¥es
));

308 
fú°
 = 
NO
;

310 
	`HTReque°_addExåaHódî
(
ªque°
, "Cookõ", 
	`HTChunk_d©a
(
cookõ_hódî
));

311 
	`HTChunk_dñëe
(
cookõ_hódî
);

314 
	`HTAssocLi°_dñëe
(
cookõs
);

317  
HT_OK
;

318 
	}
}

324 
PRIVATE
 
	$HTCookõ_a·îFûãr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

325 * 
∑øm
, 
°©us
)

327 i‡((
CookõMode
 & 
HT_COOKIE_ACCEPT
Ë&& 
SëCookõ
) {

328 
HTCookõHﬁdî
 * 
hﬁdî
 = 
	`HTCookõHﬁdî_föd
(
ªque°
);

329 i‡(
hﬁdî
) {

330 
HTLi°
 * 
cookõs
 = 
hﬁdî
->cookies;

331 
HTCookõ
 * 
¥es
;

332 (
¥es
 = (
HTCookõ
 *Ë
	`HTAssocLi°_√xtObje˘
(
cookõs
))) {

335 i‡(
CookõMode
 & (
HT_COOKIE_SAME_HOST
|
HT_COOKIE_SAME_DOMAIN
)) {

336 * 
cookõ_ho°
 = 
	`HTCookõ_domaö
(
¥es
);

337 i‡(
cookõ_ho°
) {

338 
ªs
;

339 * 
addr
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
	`HTReque°_™ch‹
(
ªque°
));

340 * 
ho°
 = 
	`HTP¨£
(
addr
, "", 
PARSE_HOST
);

342 i‡(
CookõMode
 & 
HT_COOKIE_SAME_DOMAIN
)

343 
ªs
 = 
	`èûˇ£comp
(
cookõ_ho°
, 
ho°
);

345 
ªs
 = 
	`°rˇ£comp
(
cookõ_ho°
, 
ho°
);

347 i‡(
ªs
 != 0) {

348 
	`HTTRACE
(
APP_TRACE
, "Cookõ...... Ho° `%s\' d€¢'àm©ch wh© i†£¡ i¿cookõ `%s\'\n" 
_
 
ho°
 _ 
cookõ_ho°
);

349 
	`HT_FREE
(
addr
);

352 
	`HT_FREE
(
addr
);

357 i‡(
CookõMode
 & 
HT_COOKIE_PROMPT
) {

358 
HTAÀπCÆlback
 * 
¥om±
 = 
	`HTAÀπ_föd
(
HT_A_CONFIRM
);

359 i‡(
¥om±
) {

360 i‡((*
¥om±
)(
ªque°
, 
HT_A_CONFIRM
, 
HT_MSG_ACCEPT_COOKIE
,

361 
NULL
, NULL, NULLË!
YES
)

368 (*
SëCookõ
)(
ªque°
, 
¥es
, 
SëCookõC⁄ãxt
);

372 
	`HTCookõHﬁdî_dñëe
(
hﬁdî
);

375  
HT_OK
;

376 
	}
}

383 
PUBLIC
 
BOOL
 
	$HTCookõ_öô
 ()

385 i‡(!
bakög_cookõs
) {

388 
	`HTHódî_addP¨£r
("Së-Cookõ", 
NO
, 
HTCookõ_∑r£SëCookõ
);

391 
	`HTNë_addBef‹e
(
HTCookõ_bef‹eFûãr
, "hâp://*", 
NULL
, 
HT_FILTER_MIDDLE
);

392 
	`HTNë_addA·î
(
HTCookõ_a·îFûãr
, "hâp://*", 
NULL
, 
HT_ALL
, 
HT_FILTER_MIDDLE
);

394 
bakög_cookõs
 = 
YES
;

395  
YES
;

397  
NO
;

398 
	}
}

400 
PUBLIC
 
BOOL
 
	$HTCookõ_ãrmö©e
 ()

403 
	`HTHódî_dñëeP¨£r
("Set-Cookie");

406 
	`HTNë_dñëeBef‹e
(
HTCookõ_bef‹eFûãr
);

407 
	`HTNë_dñëeA·î
(
HTCookõ_a·îFûãr
);

410 
	`HTCookõHﬁdî_dñëeAŒ
();

412 
bakög_cookõs
 = 
NO
;

413  
YES
;

414 
	}
}

416 
PUBLIC
 
BOOL
 
	$HTCookõ_£tCookõMode
 (
HTCookõMode
 
mode
)

418 
CookõMode
 = 
mode
;

419  
YES
;

420 
	}
}

422 
PUBLIC
 
HTCookõMode
 
	$HTCookõ_cookõMode
 ()

424  
CookõMode
;

425 
	}
}

433 
PUBLIC
 
BOOL
 
	$HTCookõ_£tCÆlbacks
 (
HTCookõSëCÆlback
 * 
£tCookõ
,

434 * 
£tCookõC⁄ãxt
,

435 
HTCookõFödCÆlback
 * 
födCookõ
,

436 * 
födCookõC⁄ãxt
)

438 i‡(
£tCookõ
 && 
födCookõ
) {

439 
	`HTTRACE
(
APP_TRACE
, "Cookie...... Registering cookie callbacks\n");

440 
SëCookõ
 = 
£tCookõ
;

441 
SëCookõC⁄ãxt
 = 
£tCookõC⁄ãxt
;

443 
FödCookõ
 = 
födCookõ
;

444 
FödCookõC⁄ãxt
 = 
födCookõC⁄ãxt
;

445  
YES
;

447  
NO
;

448 
	}
}

450 
PUBLIC
 
BOOL
 
	$HTCookõ_dñëeCÆlbacks
 ()

452 
	`HTTRACE
(
APP_TRACE
, "Cookie...... Unregistering cookie callbacks\n");

453 
SëCookõ
 = 
NULL
;

454 
SëCookõC⁄ãxt
 = 
NULL
;

455 
FödCookõ
 = 
NULL
;

456 
FödCookõC⁄ãxt
 = 
NULL
;

457  
YES
;

458 
	}
}

	@Library/src/HTCookie.h

31 #i‚de‡
HTCOOKIE_H


32 
	#HTCOOKIE_H


	)

33 
	~"WWWLib.h
"

58 
BOOL
 
HTCookõ_öô
 ();

59 
BOOL
 
HTCookõ_ãrmö©e
 ();

72 
_HTCookõ
 
	tHTCookõ
;

80 
BOOL
 
HTCookõ_£tName
 (
HTCookõ
 * 
me
, c⁄° * 
«me
);

81 * 
HTCookõ_«me
 (
HTCookõ
 * 
me
);

89 
BOOL
 
HTCookõ_£tVÆue
 (
HTCookõ
 * 
me
, c⁄° * 
vÆue
);

90 * 
HTCookõ_vÆue
 (
HTCookõ
 * 
me
);

98 
BOOL
 
HTCookõ_£tDomaö
 (
HTCookõ
 * 
me
, c⁄° * 
domaö
);

99 * 
HTCookõ_domaö
 (
HTCookõ
 * 
me
);

107 
BOOL
 
HTCookõ_£tP©h
 (
HTCookõ
 * 
me
, c⁄° * 
∑th
);

108 * 
HTCookõ_∑th
 (
HTCookõ
 * 
me
);

116 
time_t
 
HTCookõ_£tExpú©i⁄
 (
HTCookõ
 * 
me
,Åime_à
expú©i⁄
);

117 
time_t
 
HTCookõ_expú©i⁄
 (
HTCookõ
 * 
me
);

125 
time_t
 
HTCookõ_£tSecuª
 (
HTCookõ
 * 
me
, 
BOOL
 
£cuª
);

126 
BOOL
 
HTCookõ_isSecuª
 (
HTCookõ
 * 
me
);

140 
BOOL
 
	tHTCookõSëCÆlback
 (
	tHTReque°
 * 
	tªque°
, 
	tHTCookõ
 * 
	tcookõ
, * 
	t∑øm
);

141 
HTAssocLi°
 * 
	tHTCookõFödCÆlback
 (
	tHTReque°
 * 
	tªque°
, * 
	t∑øm
);

143 
BOOL
 
HTCookõ_£tCÆlbacks
 (
HTCookõSëCÆlback
 * 
£tCookõ
,

144 * 
£tCookõC⁄ãxt
,

145 
HTCookõFödCÆlback
 * 
födCookõ
,

146 * 
födCookõC⁄ãxt
);

147 
BOOL
 
HTCookõ_dñëeCÆlbacks
 ();

158 
	e_HTCookõMode
 {

159 
	mHT_COOKIE_ACCEPT
 = 0x1,

160 
	mHT_COOKIE_SEND
 = 0x2,

161 
	mHT_COOKIE_SAME_HOST
 = 0x4,

162 
	mHT_COOKIE_SAME_DOMAIN
 = 0x8,

163 
	mHT_COOKIE_PROMPT
 = 0x10

164 } 
	tHTCookõMode
;

166 
BOOL
 
HTCookõ_£tCookõMode
 (
HTCookõMode
 
mode
);

167 
HTCookõMode
 
HTCookõ_cookõMode
 ();

	@Library/src/HTDAV.c

43 
	~"wwwsys.h
"

44 
	~"WWWLib.h
"

45 
	~"WWWInô.h
"

46 
	~"WWWUtû.h
"

47 
	~"WWWSåóm.h
"

48 
	~"HTDAV.h
"

50 #ifde‡
HT_DAV


52 
	s_HTSåóm
 {

53 c⁄° 
HTSåómCœss
 * 
	miß
;

54 
HTSåóm
 * 
	mèrgë
;

55 
HTReque°
 * 
	mªque°
;

56 
	mvîsi⁄
;

57 
BOOL
 
	mídHódî
;

58 
BOOL
 
	må™•¨ít
;

74 
	s_HTDAVHódîs
 {

75 * 
	mIf
;

76 * 
	mDïth
;

77 * 
	mDe°ö©i⁄
;

78 * 
	mLockTokí
;

79 * 
	mTimeout
;

80 
	mOvîwrôe
;

87 
PUBLIC
 
HTDAVHódîs
 * 
	$HTDAVHódîs_√w
 () {

88 
HTDAVHódîs
 *
me
;

90 i‡–(
me
 = (
HTDAVHódîs
 *Ë
	`HT_CALLOC
 (1,(HTDAVHódîs))Ë=
NULL
)

91 
	`HT_OUTOFMEM
 ("HTDAVHeaders_new");

94 
me
->
If
 = 
NULL
;

95 
me
->
Dïth
 = 
NULL
;

96 
me
->
De°ö©i⁄
 = 
NULL
;

97 
me
->
LockTokí
 = 
NULL
;

98 
me
->
Timeout
 = 
NULL
;

99 
me
->
Ovîwrôe
 = ' ';

101 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... HTDAVHeaders object created\n");

103  
me
;

104 
	}
}

110 
PUBLIC
 
BOOL
 
	$HTDAVHódîs_dñëe
 (
HTDAVHódîs
 *
me
) {

111 i‡(
me
) {

112 i‡(
me
->
If
Ë
	`HT_FREE
 (me->If);

113 i‡(
me
->
Dïth
Ë
	`HT_FREE
 (me->Depth);

114 i‡(
me
->
De°ö©i⁄
Ë
	`HT_FREE
 (me->Destination);

115 i‡(
me
->
LockTokí
Ë
	`HT_FREE
 (me->LockToken);

116 i‡(
me
->
Timeout
Ë
	`HT_FREE
 (me->Timeout);

117 
	`HT_FREE
 (
me
);

119 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... HTDAVHeaders objectÑemoved\n");

121  
YES
;

123  
NO
;

124 
	}
}

130 
PUBLIC
 
BOOL
 
	$HTDAV_£tIfHódî
 (
HTDAVHódîs
 *
me
, c⁄° *
If
) {

131 i‡(
me
 && 
If
 && *If) {

132 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... If Header set\n");

133 
	`SåAŒocC›y
 (
me
->
If
,If);

134  
YES
;

136  
NO
;

137 
	}
}

142 
PUBLIC
 
BOOL
 
	$HTDAV_dñëeIfHódî
 (
HTDAVHódîs
 * 
me
) {

143 i‡(
me
 && me->
If
) {

144 
	`HT_FREE
(
me
->
If
);

145 
me
->
If
 = 
NULL
;

146  
YES
;

148  
NO
;

149 
	}
}

155 
PUBLIC
 * 
	$HTDAV_ifHódî
 (
HTDAVHódîs
 *
me
) {

156 *
c›y
 = 
NULL
;

157 i‡(
me
 && me->
If
) {

158 
	`SåAŒocC›y
 (
c›y
,
me
->
If
);

160  
c›y
;

161 
	}
}

167 
PUBLIC
 
BOOL
 
	$HTDAV_£tDïthHódî
 (
HTDAVHódîs
 *
me
, c⁄° *
Dïth
) {

168 i‡(
me
 && 
Dïth
 && *Depth) {

169 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Depth Header set\n");

170 
	`SåAŒocC›y
 (
me
->
Dïth
,Depth);

171  
YES
;

173  
NO
;

174 
	}
}

180 
PUBLIC
 
BOOL
 
	$HTDAV_dñëeDïthHódî
 (
HTDAVHódîs
 * 
me
) {

181 i‡(
me
 && me->
Dïth
) {

182 
	`HT_FREE
 (
me
->
Dïth
);

183 
me
->
Dïth
 = 
NULL
;

184  
YES
;

186  
NO
;

187 
	}
}

194 
PUBLIC
 * 
	$HTDAV_DïthHódî
 (
HTDAVHódîs
 *
me
) {

195 *
c›y
 = 
NULL
;

196 i‡(
me
 && me->
Dïth
) {

197 
	`SåAŒocC›y
 (
c›y
,
me
->
Dïth
);

199  
c›y
;

200 
	}
}

206 
PUBLIC
 
BOOL
 
	$HTDAV_£tLockTokíHódî
 (
HTDAVHódîs
 *
me
, c⁄° *
LockTokí
) {

207 i‡(
me
 && 
LockTokí
 && *LockToken) {

208 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Lock-Token Header set\n");

209 
	`SåAŒocC›y
 (
me
->
LockTokí
,LockToken);

210  
YES
;

212  
NO
;

213 
	}
}

219 
PUBLIC
 
BOOL
 
	$HTDAV_dñëeLockTokíHódî
 (
HTDAVHódîs
 * 
me
) {

220 i‡(
me
 && me->
LockTokí
) {

221 
	`HT_FREE
 (
me
->
LockTokí
);

222 
me
->
LockTokí
 = 
NULL
;

223  
YES
;

225  
NO
;

226 
	}
}

233 
PUBLIC
 * 
	$HTDAV_LockTokíHódî
 (
HTDAVHódîs
 *
me
) {

234 *
c›y
 = 
NULL
;

235 i‡(
me
 && me->
LockTokí
) {

236 
	`SåAŒocC›y
 (
c›y
,
me
->
LockTokí
);

238  
c›y
;

239 
	}
}

245 
PUBLIC
 
BOOL
 
	$HTDAV_£tDe°ö©i⁄Hódî
 (
HTDAVHódîs
 *
me
, c⁄° *
De°ö©i⁄
) {

246 i‡(
me
 && 
De°ö©i⁄
 && *Destination) {

247 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Destination Header set\n");

248 
	`SåAŒocC›y
 (
me
->
De°ö©i⁄
,Destination);

249  
YES
;

251  
NO
;

252 
	}
}

258 
PUBLIC
 
BOOL
 
	$HTDAV_dñëeDe°ö©i⁄Hódî
 (
HTDAVHódîs
 * 
me
) {

259 i‡(
me
 && me->
De°ö©i⁄
) {

260 
	`HT_FREE
 (
me
->
De°ö©i⁄
);

261 
me
->
De°ö©i⁄
 = 
NULL
;

262  
YES
;

264  
NO
;

265 
	}
}

272 
PUBLIC
 * 
	$HTDAV_De°ö©i⁄Hódî
 (
HTDAVHódîs
 *
me
) {

273 *
c›y
 = 
NULL
;

274 i‡(
me
 && me->
De°ö©i⁄
) {

275 
	`SåAŒocC›y
 (
c›y
,
me
->
De°ö©i⁄
);

277  
c›y
;

278 
	}
}

285 
PUBLIC
 
BOOL
 
	$HTDAV_£tTimeoutHódî
 (
HTDAVHódîs
 *
me
, c⁄° *
Timeout
) {

286 i‡(
me
 && 
Timeout
 && *Timeout) {

287 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Timeout Header set\n");

288 
	`SåAŒocC›y
 (
me
->
Timeout
,Timeout);

289  
YES
;

291  
NO
;

292 
	}
}

298 
PUBLIC
 
BOOL
 
	$HTDAV_dñëeTimeoutHódî
 (
HTDAVHódîs
 * 
me
) {

299 i‡(
me
 && me->
Timeout
) {

300 
	`HT_FREE
 (
me
->
Timeout
);

301 
me
->
Timeout
 = 
NULL
;

302  
YES
;

304  
NO
;

305 
	}
}

312 
PUBLIC
 * 
	$HTDAV_TimeoutHódî
 (
HTDAVHódîs
 *
me
) {

313 *
c›y
 = 
NULL
;

314 i‡(
me
 && me->
Timeout
) {

315 
	`SåAŒocC›y
 (
c›y
,
me
->
Timeout
);

317  
c›y
;

318 
	}
}

324 
PUBLIC
 
BOOL
 
	$HTDAV_£tOvîwrôeHódî
 (
HTDAVHódîs
 *
me
, 
BOOL
 
Ovîwrôe
) {

325 i‡(
me
) {

326 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Overwrite Header set\n");

327 
me
->
Ovîwrôe
 = (Overwrite)?'T':'F';

328  
YES
;

330  
NO
;

331 
	}
}

336 
PUBLIC
 
BOOL
 
	$HTDAV_dñëeOvîwrôeHódî
 (
HTDAVHódîs
 * 
me
) {

337 i‡(
me
) {

338 
me
->
Ovîwrôe
 = ' ';

339  
YES
;

341  
NO
;

342 
	}
}

349 
PUBLIC
 
BOOL
 
	$HTDAV_OvîwrôeHódî
 (
HTDAVHódîs
 * 
me
) {

350 i‡(
me
) {

351  (
me
->
Ovîwrôe
==' ' || me->Ovîwrôe=='T')?
YES
:
NO
;

353  
YES
;

354 
	}
}

366 
PRIVATE
 
	$HTE¡ôy_ˇŒback
 (
HTReque°
 * 
ªque°
, 
HTSåóm
 * 
èrgë
)

368 
HTP¨ítAnch‹
 * 
ítôy
 = 
	`HTReque°_ítôyAnch‹
(
ªque°
);

369 
	`HTTRACE
(
APP_TRACE
, "Posting Data from callback function\n");

370 i‡(!
ªque°
 || !
ítôy
 || !
èrgë
Ë 
HT_ERROR
;

372 
BOOL
 
chunkög
 = 
NO
;

373 
°©us
;

374 * 
documít
 = (*Ë
	`HTAnch‹_documít
(
ítôy
);

375 
Àn
 = 
	`HTAnch‹_Àngth
(
ítôy
);

376 i‡(!
documít
) {

377 
	`HTTRACE
(
PROT_TRACE
, "Posting Data No document\n");

378  
HT_ERROR
;

386 i‡(
Àn
 < 0) {

387 
HTF‹m©
 
a˘uÆ
 = 
	`HTAnch‹_f‹m©
(
ítôy
);

388 
HTF‹m©
 
tm∂©e
 = 
	`HTAtom_f‹
("text/*");

389 i‡(
	`HTMIMEM©ch
(
tm∂©e
, 
a˘uÆ
)) {

390 
Àn
 = 
	`°æí
(
documít
);

391 
chunkög
 = 
YES
;

393 
	`HTTRACE
(
PROT_TRACE
, "Po°ög D©®Mu° knowÅhêÀngth o‡documíà%p\n" 
_


394 
documít
);

395  
HT_ERROR
;

400 
°©us
 = (*
èrgë
->
iß
->
put_block
)—¨gë, 
documít
, 
Àn
);

401 i‡(
°©us
 =
HT_WOULD_BLOCK
) {

402 
	`HTTRACE
(
PROT_TRACE
, "Posting Data Target WOULD BLOCK\n");

403  
HT_WOULD_BLOCK
;

404 } i‡(
°©us
 =
HT_PAUSE
) {

405 
	`HTTRACE
(
PROT_TRACE
, "Posting Data Target PAUSED\n");

406  
HT_PAUSE
;

407 } i‡(
chunkög
 && 
°©us
 =
HT_OK
) {

408 
	`HTTRACE
(
PROT_TRACE
, "Posting Data Target is SAVED using chunked\n");

409  (*
èrgë
->
iß
->
put_block
)(target, "", 0);

410 } i‡(
°©us
 =
HT_LOADED
 || sètu†=
HT_OK
) {

411 
	`HTTRACE
(
PROT_TRACE
, "Posting Data Target is SAVED\n");

412 (*
èrgë
->
iß
->
Êush
)(target);

413  
HT_LOADED
;

414 } i‡(
°©us
 > 0) {

415 
	`HTTRACE
(
PROT_TRACE
, "Po°ög D©a. T¨gëÑëu∫†%d\n" 
_
 
°©us
);

416  
°©us
;

418 
	`HTTRACE
(
PROT_TRACE
, "Po°ög D©®T¨gë ERROR %d\n" 
_
 
°©us
);

419  
°©us
;

422 
	}
}

444 
PUBLIC
 
BOOL
 
	$HTLOCKDocumítAnch‹
 (
HTReque°
 * 
ªque°
,

445 
HTAnch‹
 * 
d°
,

446 
HTP¨ítAnch‹
 * 
xmlbody
,

447 
HTDAVHódîs
 * 
hódîs
) {

449 i‡(
ªque°
 && 
d°
) {

451 
	`HTReque°_£tMëhod
 (
ªque°
,
METHOD_LOCK
);

452 
	`HTReque°_£tAnch‹
 (
ªque°
,
d°
);

453 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Method setÅo LOCK\n");

456 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Seting default Headers \n");

457 
	`HTReque°_addCacheC⁄åﬁ
 (
ªque°
,"no-cache","");

458 
	`HTReque°_addEnHd
 (
ªque°
,
HT_E_CONTENT_ENCODING
);

459 
	`HTReque°_addEnHd
 (
ªque°
,
HT_E_CONTENT_LENGTH
);

460 
	`HTReque°_addGnHd
 (
ªque°
,
HT_G_PRAGMA_NO_CACHE
);

462 i‡(
hódîs
) {

463 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Setting WebDAV headers \n");

464 i‡(
hódîs
->
If
)

465 
	`HTReque°_addExåaHódî
 (
ªque°
,"If",
hódîs
->
If
);

467 i‡(
hódîs
->
Dïth
) {

468 i‡(!
	`°rˇ£comp
(
hódîs
->
Dïth
,"0") ||

469 !
	`°rˇ£comp
(
hódîs
->
Dïth
,"infinity"))

470 
	`HTReque°_addExåaHódî
 (
ªque°
,"Dïth",
hódîs
->
Dïth
);

473 i‡(
hódîs
->
Timeout
)

474 
	`HTReque°_addExåaHódî
 (
ªque°
,"Timeout",
hódîs
->
Timeout
);

478 i‡(
xmlbody
) {

479 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Setting Entity Body \n");

480 
	`HTReque°_£tE¡ôyAnch‹
 (
ªque°
,
xmlbody
);

481 
	`HTReque°_£tPo°CÆlback
(
ªque°
, 
HTE¡ôy_ˇŒback
);

484  
	`HTLﬂd
 (
ªque°
,
NO
);

486  
NO
;

487 
	}
}

494 
PUBLIC
 
BOOL
 
	$HTLOCKAnch‹
 (
HTReque°
 * 
ªque°
,

495 
HTAnch‹
 * 
d°
,

496 * 
xmlbody
,

497 
HTDAVHódîs
 * 
hódîs
) {

499 i‡(
ªque°
 && 
d°
) {

500 
HTP¨ítAnch‹
 * 
§c
 = 
NULL
;

501 i‡(
xmlbody
) {

502 
§c
 = 
	`HTTmpAnch‹
(
NULL
);

503 
	`HTAnch‹_£tDocumít
(
§c
, 
xmlbody
);

504 
	`HTAnch‹_£tF‹m©
(
§c
, 
	`HTAtom_f‹
 ("text/xml"));

505 
	`HTAnch‹_£tLígth
(
§c
, 
	`°æí
(
xmlbody
));

507  (
	`HTLOCKDocumítAnch‹
 (
ªque°
,
d°
,
§c
,
hódîs
));

509  
NO
;

510 
	}
}

517 
PUBLIC
 
BOOL
 
	$HTLOCKAbsﬁuã
 (
HTReque°
 * 
ªque°
,

518 c⁄° * 
uri
,

519 * 
xmlbody
,

520 
HTDAVHódîs
 * 
hódîs
){

521 i‡(
ªque°
 && 
uri
 && *uri) {

522 
HTAnch‹
 *
d°
 = 
	`HTAnch‹_födAddªss
 (
uri
);

523 
HTP¨ítAnch‹
 *
§c
 = 
NULL
;

525 i‡(
xmlbody
) {

526 
§c
 = 
	`HTTmpAnch‹
(
NULL
);

527 
	`HTAnch‹_£tDocumít
(
§c
, 
xmlbody
);

528 
	`HTAnch‹_£tF‹m©
(
§c
, 
	`HTAtom_f‹
 ("text/xml"));

529 
	`HTAnch‹_£tLígth
(
§c
, 
	`°æí
(
xmlbody
));

532  (
	`HTLOCKDocumítAnch‹
 (
ªque°
,
d°
,
§c
,
hódîs
));

534  
NO
;

535 
	}
}

542 
PUBLIC
 
BOOL
 
	$HTLOCKRñ©ive
 (
HTReque°
 * 
ªque°
,

543 c⁄° * 
ªœtive
,

544 
HTP¨ítAnch‹
 * 
ba£
,

545 * 
xmlbody
,

546 
HTDAVHódîs
 * 
hódîs
){

547 
BOOL
 
°©us
 = 
NO
;

548 i‡(
ªque°
 && 
ªœtive
 && 
ba£
) {

549 * 
ba£_uri
 = 
	`HTAnch‹_addªss
 ((
HTAnch‹
 *)
ba£
);

550 * 
fuŒ_uri
 = 
	`HTP¨£
(
ªœtive
,
ba£_uri
,
PARSE_ACCESS
|
PARSE_HOST
| \

551 
PARSE_PATH
|
PARSE_PUNCTUATION
);

553 
°©us
 = 
	`HTLOCKAbsﬁuã
 (
ªque°
,
fuŒ_uri
,
xmlbody
,
hódîs
);

554 
	`HT_FREE
 (
fuŒ_uri
);

555 
	`HT_FREE
 (
ba£_uri
);

557  
°©us
;

558 
	}
}

573 
PUBLIC
 
BOOL
 
	$HTUNLOCKAnch‹
 (
HTReque°
 * 
ªque°
,

574 
HTAnch‹
 * 
d°
,

575 
HTDAVHódîs
 * 
hódîs
) {

576 i‡(
ªque°
 && 
d°
) {

578 
	`HTReque°_£tMëhod
 (
ªque°
,
METHOD_UNLOCK
);

579 
	`HTReque°_£tAnch‹
 (
ªque°
,
d°
);

580 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Method setÅo UNLOCK\n");

583 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Setting default Headers \n");

584 
	`HTReque°_addCacheC⁄åﬁ
 (
ªque°
, "no-cache","");

585 
	`HTReque°_addEnHd
 (
ªque°
,
HT_E_CONTENT_ENCODING
);

586 
	`HTReque°_addEnHd
 (
ªque°
,
HT_E_CONTENT_LENGTH
);

587 
	`HTReque°_addGnHd
 (
ªque°
,
HT_G_PRAGMA_NO_CACHE
);

589 i‡(
hódîs
 && hódîs->
LockTokí
) {

590 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Seting Lock-Token \n");

591 i‡(
hódîs
->
LockTokí
 =
NULL
) {

592 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... FAILED Lock-Token is NULL\n");

593  
NO
;

595 
	`HTReque°_addExåaHódî
 (
ªque°
,"Lock-Tokí",
hódîs
->
LockTokí
);

597  
	`HTLﬂd
 (
ªque°
,
NO
);

600  
NO
;

601 
	}
}

608 
PUBLIC
 
BOOL
 
	$HTUNLOCKAbsﬁuã
 (
HTReque°
 * 
ªque°
,

609 c⁄° * 
uri
,

610 
HTDAVHódîs
 * 
hódîs
) {

612 i‡(
ªque°
 && 
uri
 && *uri) {

613 
HTAnch‹
 *
d°
 = 
	`HTAnch‹_födAddªss
 (
uri
);

614  
	`HTUNLOCKAnch‹
 (
ªque°
,
d°
,
hódîs
);

616  
NO
;

617 
	}
}

624 
PUBLIC
 
BOOL
 
	$HTUNLOCKRñ©ive
 (
HTReque°
 * 
ªque°
,

625 c⁄° * 
ªœtive
,

626 
HTP¨ítAnch‹
 * 
ba£
,

627 
HTDAVHódîs
 * 
hódîs
) {

628 
BOOL
 
°©us
 = 
NO
;

629 i‡(
ªque°
 && 
ªœtive
 && 
ba£
) {

630 * 
ba£_uri
 = 
	`HTAnch‹_addªss
 ((
HTAnch‹
 *)
ba£
);

631 * 
fuŒ_uri
 = 
	`HTP¨£
 (
ªœtive
,
ba£_uri
,
PARSE_ACCESS
|
PARSE_HOST
| \

632 
PARSE_PATH
|
PARSE_PUNCTUATION
);

634 
°©us
 = 
	`HTUNLOCKAbsﬁuã
 (
ªque°
,
fuŒ_uri
,
hódîs
);

635 
	`HT_FREE
 (
fuŒ_uri
);

636 
	`HT_FREE
 (
ba£_uri
);

638  
°©us
;

639 
	}
}

657 
PUBLIC
 
BOOL
 
	$HTPROPFINDDocumítAnch‹
 (
HTReque°
 * 
ªque°
,

658 
HTAnch‹
 * 
d°
,

659 
HTP¨ítAnch‹
 * 
xmlbody
,

660 
HTDAVHódîs
 * 
hódîs
) {

662 i‡(
ªque°
 && 
d°
) {

664 
	`HTReque°_£tMëhod
 (
ªque°
,
METHOD_PROPFIND
);

665 
	`HTReque°_£tAnch‹
 (
ªque°
,
d°
);

666 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Method setÅo PROPFIND\n");

669 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Seting default Headers \n");

670 
	`HTReque°_addCacheC⁄åﬁ
 (
ªque°
,"no-cache","");

671 
	`HTReque°_addGnHd
 (
ªque°
,
HT_G_PRAGMA_NO_CACHE
);

673 i‡(
hódîs
) {

674 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Setting WebDAV headers \n");

675 i‡(
hódîs
->
Dïth
)

676 i‡(!
	`°rˇ£comp
(
hódîs
->
Dïth
,"0") ||

677 !
	`°rˇ£comp
(
hódîs
->
Dïth
,"1") ||

678 !
	`°rˇ£comp
(
hódîs
->
Dïth
,"infinity"))

679 
	`HTReque°_addExåaHódî
(
ªque°
,"Dïth",
hódîs
->
Dïth
);

683 i‡(
xmlbody
) {

684 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Setting WebDAV Entity Request Body \n");

685 
	`HTReque°_£tE¡ôyAnch‹
 (
ªque°
,
xmlbody
);

686 
	`HTReque°_£tPo°CÆlback
 (
ªque°
, 
HTE¡ôy_ˇŒback
);

689  
	`HTLﬂd
 (
ªque°
,
NO
);

692  
NO
;

693 
	}
}

697 
PUBLIC
 
BOOL
 
	$HTPROPFINDAnch‹
 (
HTReque°
 * 
ªque°
,

698 
HTAnch‹
 * 
d°
,

699 c⁄° * 
xmlbody
,

700 
HTDAVHódîs
 * 
hódîs
) {

701 i‡(
ªque°
 && 
d°
) {

702 
HTP¨ítAnch‹
 * 
body
 = 
NULL
;

703 i‡(
xmlbody
) {

704 
body
 = 
	`HTTmpAnch‹
(
NULL
);

705 
	`HTAnch‹_£tDocumít
(
body
, (*)
xmlbody
);

706 
	`HTAnch‹_£tF‹m©
(
body
, 
	`HTAtom_f‹
 ("text/xml"));

707 
	`HTAnch‹_£tLígth
(
body
, 
	`°æí
(
xmlbody
));

709  
	`HTPROPFINDDocumítAnch‹
 (
ªque°
,
d°
,
body
,
hódîs
);

712  
NO
;

713 
	}
}

720 
PUBLIC
 
BOOL
 
	$HTPROPFINDAbsﬁuã
 (
HTReque°
 * 
ªque°
,

721 c⁄° * 
uri
,

722 c⁄° * 
xmlbody
,

723 
HTDAVHódîs
 * 
hódîs
) {

724 i‡(
ªque°
 && 
uri
 && *uri) {

725 
HTAnch‹
 *
d°
 = 
	`HTAnch‹_födAddªss
 (
uri
);

726  
	`HTPROPFINDAnch‹
 (
ªque°
,
d°
,
xmlbody
,
hódîs
);

728  
NO
;

729 
	}
}

737 
PUBLIC
 
BOOL
 
	$HTPROPFINDRñ©ive
 (
HTReque°
 * 
ªque°
,

738 c⁄° * 
ªœtive
,

739 
HTP¨ítAnch‹
 * 
ba£
,

740 c⁄° * 
xmlbody
,

741 
HTDAVHódîs
 * 
hódîs
) {

742 
BOOL
 
°©us
 = 
NO
;

743 i‡(
ªque°
 && 
ªœtive
 && 
ba£
) {

744 * 
ba£_uri
 = 
	`HTAnch‹_addªss
 ((
HTAnch‹
 *)
ba£
);

745 * 
fuŒ_uri
 = 
	`HTP¨£
(
ªœtive
,
ba£_uri
,
PARSE_ACCESS
|
PARSE_HOST
| \

746 
PARSE_PATH
|
PARSE_PUNCTUATION
);

748 
°©us
 = 
	`HTPROPFINDAbsﬁuã
 (
ªque°
,
fuŒ_uri
,
xmlbody
,
hódîs
);

749 
	`HT_FREE
 (
fuŒ_uri
);

750 
	`HT_FREE
 (
ba£_uri
);

752  
°©us
;

753 
	}
}

771 
PUBLIC
 
BOOL
 
	$HTPROPPATCHDocumítAnch‹
 (
HTReque°
 * 
ªque°
,

772 
HTAnch‹
 * 
d°
,

773 
HTP¨ítAnch‹
 * 
xmlbody
,

774 
HTDAVHódîs
 * 
hódîs
) {

776 i‡(
ªque°
 && 
d°
 && 
xmlbody
) {

779 
	`HTReque°_£tMëhod
 (
ªque°
,
METHOD_PROPPATCH
);

780 
	`HTReque°_£tAnch‹
 (
ªque°
,
d°
);

781 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Method setÅo PROPPATCH\n");

784 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Seting default Headers \n");

785 
	`HTReque°_addCacheC⁄åﬁ
 (
ªque°
,"no-cache","");

786 
	`HTReque°_addGnHd
 (
ªque°
,
HT_G_PRAGMA_NO_CACHE
);

788 i‡(
hódîs
) {

789 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Setting WebDAV headers \n");

790 i‡(
hódîs
->
If
)

791 
	`HTReque°_addExåaHódî
 (
ªque°
,"If",
hódîs
->
If
);

795 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Setting Entity Body \n");

796 
	`HTReque°_£tE¡ôyAnch‹
 (
ªque°
,
xmlbody
);

797 
	`HTReque°_£tPo°CÆlback
 (
ªque°
, 
HTE¡ôy_ˇŒback
);

799  
	`HTLﬂd
 (
ªque°
,
NO
);

801  
NO
;

803 
	}
}

807 
PUBLIC
 
BOOL
 
	$HTPROPPATCHAnch‹
 (
HTReque°
 * 
ªque°
,

808 
HTAnch‹
 * 
d°
,

809 c⁄° * 
xmlbody
,

810 
HTDAVHódîs
 * 
hódîs
) {

811 i‡(
ªque°
 && 
d°
 && 
xmlbody
) {

812 
HTP¨ítAnch‹
 * 
body
 = 
	`HTTmpAnch‹
(
NULL
);

813 
	`HTAnch‹_£tDocumít
 (
body
, (*)
xmlbody
);

814 
	`HTAnch‹_£tF‹m©
 (
body
, 
	`HTAtom_f‹
 ("text/xml"));

815 
	`HTAnch‹_£tLígth
 (
body
, 
	`°æí
(
xmlbody
));

817  
	`HTPROPPATCHDocumítAnch‹
 (
ªque°
,
d°
,
body
,
hódîs
);

819  
NO
;

820 
	}
}

827 
PUBLIC
 
BOOL
 
	$HTPROPPATCHAbsﬁuã
 (
HTReque°
 * 
ªque°
,

828 c⁄° * 
uri
,

829 c⁄° * 
xmlbody
,

830 
HTDAVHódîs
 * 
hódîs
) {

831 i‡(
ªque°
 && 
uri
 && *urò&& 
xmlbody
 && *xmlbody) {

832 
HTAnch‹
 *
d°
 = 
	`HTAnch‹_födAddªss
 (
uri
);

833  
	`HTPROPPATCHAnch‹
 (
ªque°
,
d°
,
xmlbody
,
hódîs
);

835  
NO
;

836 
	}
}

844 
PUBLIC
 
BOOL
 
	$HTPROPPATCHRñ©ive
 (
HTReque°
 * 
ªque°
,

845 c⁄° * 
ªœtive
,

846 
HTP¨ítAnch‹
 * 
ba£
,

847 c⁄° * 
xmlbody
,

848 
HTDAVHódîs
 * 
hódîs
) {

849 
BOOL
 
°©us
 = 
NO
;

850 i‡(
ªque°
 && 
ªœtive
 && 
ba£
 && 
xmlbody
 && *xmlbody) {

851 * 
ba£_uri
 = 
	`HTAnch‹_addªss
 ((
HTAnch‹
 *)
ba£
);

852 * 
fuŒ_uri
 = 
	`HTP¨£
 (
ªœtive
,
ba£_uri
,
PARSE_ACCESS
|
PARSE_HOST
| \

853 
PARSE_PATH
|
PARSE_PUNCTUATION
);

855 
°©us
 = 
	`HTPROPPATCHAbsﬁuã
 (
ªque°
,
fuŒ_uri
,
xmlbody
,
hódîs
);

856 
	`HT_FREE
 (
fuŒ_uri
);

857 
	`HT_FREE
 (
ba£_uri
);

859  
°©us
;

860 
	}
}

876 
PUBLIC
 
BOOL
 
	$HTMKCOLAnch‹
 (
HTReque°
 * 
ªque°
,

877 
HTAnch‹
 * 
d°
,

878 
HTDAVHódîs
 * 
hódîs
) {

879 i‡(
ªque°
 && 
d°
) {

881 
	`HTReque°_£tMëhod
 (
ªque°
,
METHOD_MKCOL
);

882 
	`HTReque°_£tAnch‹
 (
ªque°
,
d°
);

883 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Method setÅo MKCOL\n");

886 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Seting default Headers \n");

887 
	`HTReque°_addCacheC⁄åﬁ
 (
ªque°
,"no-cache","");

888 
	`HTReque°_addGnHd
 (
ªque°
,
HT_G_PRAGMA_NO_CACHE
);

890 i‡(
hódîs
) {

891 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Setting WebDAV headers \n");

892 i‡(
hódîs
->
If
)

893 
	`HTReque°_addExåaHódî
 (
ªque°
,"If",
hódîs
->
If
);

896  
	`HTLﬂd
 (
ªque°
,
NO
);

899  
NO
;

900 
	}
}

908 
PUBLIC
 
BOOL
 
	$HTMKCOLAbsﬁuã
 (
HTReque°
 * 
ªque°
,

909 c⁄° * 
uri
,

910 
HTDAVHódîs
 * 
hódîs
) {

911 i‡(
ªque°
 && 
uri
 && *uri) {

912 
HTAnch‹
 *
d°
 = 
	`HTAnch‹_födAddªss
 (
uri
);

913  
	`HTMKCOLAnch‹
 (
ªque°
,
d°
,
hódîs
);

915  
NO
;

916 
	}
}

924 
PUBLIC
 
BOOL
 
	$HTMKCOLRñ©ive
 (
HTReque°
 * 
ªque°
,

925 c⁄° * 
ªœtive
,

926 
HTP¨ítAnch‹
 * 
ba£
,

927 
HTDAVHódîs
 * 
hódîs
) {

928 
BOOL
 
°©us
 = 
NO
;

929 i‡(
ªque°
 && 
ªœtive
 && 
ba£
) {

930 * 
ba£_uri
 = 
	`HTAnch‹_addªss
 ((
HTAnch‹
 *)
ba£
);

931 * 
fuŒ_uri
 = 
	`HTP¨£
 (
ªœtive
,
ba£_uri
,
PARSE_ACCESS
|
PARSE_HOST
| \

932 
PARSE_PATH
|
PARSE_PUNCTUATION
);

934 
°©us
 = 
	`HTMKCOLAbsﬁuã
 (
ªque°
,
fuŒ_uri
,
hódîs
);

935 
	`HT_FREE
 (
fuŒ_uri
);

936 
	`HT_FREE
 (
ba£_uri
);

938  
°©us
;

939 
	}
}

962 
PUBLIC
 
BOOL
 
	$HTCOPYDocumítAnch‹
 (
HTReque°
 * 
ªque°
,

963 
HTAnch‹
 * 
§c
,

964 
HTP¨ítAnch‹
 * 
xmlbody
,

965 
HTDAVHódîs
 * 
hódîs
) {

967 i‡(
ªque°
 && 
§c
 && 
hódîs
) {

970 
	`HTReque°_£tMëhod
 (
ªque°
,
METHOD_COPY
);

971 
	`HTReque°_£tAnch‹
 (
ªque°
,
§c
);

972 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Method setÅo COPY\n");

975 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Seting default Headers \n");

976 
	`HTReque°_addCacheC⁄åﬁ
 (
ªque°
,"no-cache","");

977 
	`HTReque°_addGnHd
 (
ªque°
,
HT_G_PRAGMA_NO_CACHE
);

980 i‡(
hódîs
->
De°ö©i⁄
 && *headers->Destination) {

981 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Setting WebDAV headers \n");

982 
	`HTReque°_addExåaHódî
 (
ªque°
,"De°ö©i⁄",
hódîs
->
De°ö©i⁄
);

984 i‡(
hódîs
->
If
)

985 
	`HTReque°_addExåaHódî
 (
ªque°
,"If",
hódîs
->
If
);

987 i‡(
hódîs
->
Ovîwrôe
 != ' ') {

988 
ovî
[] = { 
hódîs
->
Ovîwrôe
, '\0' };

989 
	`HTReque°_addExåaHódî
 (
ªque°
,"Ovîwúã", 
ovî
 );

992 i‡(
hódîs
->
Dïth
) {

993 i‡(!
	`°rˇ£comp
 (
hódîs
->
Dïth
,"0") ||

994 !
	`°rˇ£comp
 (
hódîs
->
Dïth
,"infinity"))

995 
	`HTReque°_addExåaHódî
 (
ªque°
,"Dïth",
hódîs
->
Dïth
);

998  
NO
;

1001 i‡(
xmlbody
) {

1002 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Setting Entity Body \n");

1003 
	`HTReque°_£tE¡ôyAnch‹
 (
ªque°
,
xmlbody
);

1004 
	`HTReque°_£tPo°CÆlback
 (
ªque°
, 
HTE¡ôy_ˇŒback
);

1006  
	`HTLﬂd
 (
ªque°
,
NO
);

1009  
NO
;

1010 
	}
}

1014 
PUBLIC
 
BOOL
 
	$HTCOPYAnch‹
 (
HTReque°
 * 
ªque°
,

1015 
HTAnch‹
 * 
§c
,

1016 c⁄° * 
xmlbody
,

1017 
HTDAVHódîs
 * 
hódîs
) {

1019 i‡(
ªque°
 && 
§c
 && 
hódîs
) {

1020 
HTP¨ítAnch‹
 * 
body
 = 
NULL
;

1021 i‡(
xmlbody
) {

1022 
body
 = 
	`HTTmpAnch‹
(
NULL
);

1023 
	`HTAnch‹_£tDocumít
 (
body
, (*)
xmlbody
);

1024 
	`HTAnch‹_£tF‹m©
 (
body
, 
	`HTAtom_f‹
 ("text/xml"));

1025 
	`HTAnch‹_£tLígth
 (
body
, 
	`°æí
(
xmlbody
));

1027  
	`HTCOPYDocumítAnch‹
 (
ªque°
,
§c
,
body
,
hódîs
);

1029  
NO
;

1030 
	}
}

1037 
PUBLIC
 
BOOL
 
	$HTCOPYAbsﬁuã
 (
HTReque°
 * 
ªque°
,

1038 c⁄° * 
uri
,

1039 c⁄° * 
xmlbody
,

1040 
HTDAVHódîs
 * 
hódîs
) {

1041 i‡(
ªque°
 && 
uri
 && *urò&& 
hódîs
) {

1042 
HTAnch‹
 *
§c
 = 
	`HTAnch‹_födAddªss
 (
uri
);

1043  
	`HTCOPYAnch‹
 (
ªque°
,
§c
,
xmlbody
,
hódîs
);

1045  
NO
;

1046 
	}
}

1053 
PUBLIC
 
BOOL
 
	$HTCOPYRñ©ive
 (
HTReque°
 * 
ªque°
,

1054 c⁄° * 
ªœtive
,

1055 
HTP¨ítAnch‹
 * 
ba£
,

1056 c⁄° * 
xmlbody
,

1057 
HTDAVHódîs
 * 
hódîs
) {

1058 
BOOL
 
°©us
 = 
NO
;

1059 i‡(
ªque°
 && 
ªœtive
 && 
ba£
 && 
hódîs
) {

1060 * 
ba£_uri
 = 
	`HTAnch‹_addªss
 ((
HTAnch‹
 *)
ba£
);

1061 * 
fuŒ_uri
 = 
	`HTP¨£
 (
ªœtive
,
ba£_uri
,
PARSE_ACCESS
|
PARSE_HOST
| \

1062 
PARSE_PATH
|
PARSE_PUNCTUATION
);

1064 
°©us
 = 
	`HTCOPYAbsﬁuã
 (
ªque°
,
fuŒ_uri
,
xmlbody
,
hódîs
);

1065 
	`HT_FREE
 (
fuŒ_uri
);

1066 
	`HT_FREE
 (
ba£_uri
);

1068  
°©us
;

1069 
	}
}

1092 
PUBLIC
 
BOOL
 
	$HTMOVEDocumítAnch‹
 (
HTReque°
 * 
ªque°
,

1093 
HTAnch‹
 * 
§c
,

1094 
HTP¨ítAnch‹
 * 
xmlbody
,

1095 
HTDAVHódîs
 * 
hódîs
) {

1097 i‡(
ªque°
 && 
§c
 && 
hódîs
) {

1100 
	`HTReque°_£tMëhod
 (
ªque°
,
METHOD_MOVE
);

1101 
	`HTReque°_£tAnch‹
 (
ªque°
,
§c
);

1102 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Method setÅo MOVE\n");

1105 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Seting default Headers \n");

1106 
	`HTReque°_addCacheC⁄åﬁ
 (
ªque°
,"no-cache","");

1107 
	`HTReque°_addGnHd
 (
ªque°
,
HT_G_PRAGMA_NO_CACHE
);

1110 i‡(
hódîs
->
De°ö©i⁄
 && *headers->Destination) {

1111 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Setting WebDAV headers \n");

1112 
	`HTReque°_addExåaHódî
 (
ªque°
,"De°ö©i⁄",
hódîs
->
De°ö©i⁄
);

1114 i‡(
hódîs
->
If
)

1115 
	`HTReque°_addExåaHódî
 (
ªque°
,"If",
hódîs
->
If
);

1117 i‡(
hódîs
->
Ovîwrôe
 != ' ') {

1118 
ovî
[] = { 
hódîs
->
Ovîwrôe
, '\0' };

1119 
	`HTReque°_addExåaHódî
 (
ªque°
,"Ovîwúã", 
ovî
 );

1122 i‡(
hódîs
->
Dïth
) {

1123 i‡(!
	`°rˇ£comp
 (
hódîs
->
Dïth
,"0") ||

1124 !
	`°rˇ£comp
 (
hódîs
->
Dïth
,"infinity"))

1125 
	`HTReque°_addExåaHódî
(
ªque°
,"Dïth",
hódîs
->
Dïth
);

1128  
NO
;

1131 i‡(
xmlbody
) {

1132 
	`HTTRACE
 (
PROT_TRACE
,"HTDAV.... Setting Entity Body \n");

1133 
	`HTReque°_£tE¡ôyAnch‹
 (
ªque°
,
xmlbody
);

1134 
	`HTReque°_£tPo°CÆlback
 (
ªque°
,
HTE¡ôy_ˇŒback
);

1136  
	`HTLﬂd
 (
ªque°
,
NO
);

1139  
NO
;

1140 
	}
}

1144 
PUBLIC
 
BOOL
 
	$HTMOVEAnch‹
 (
HTReque°
 * 
ªque°
,

1145 
HTAnch‹
 * 
§c
,

1146 c⁄° * 
xmlbody
,

1147 
HTDAVHódîs
 * 
hódîs
) {

1149 i‡(
ªque°
 && 
§c
 && 
hódîs
) {

1150 
HTP¨ítAnch‹
 * 
body
 = 
NULL
;

1151 i‡(
xmlbody
) {

1152 
body
 = 
	`HTTmpAnch‹
 (
NULL
);

1153 
	`HTAnch‹_£tDocumít
(
body
, (*Ë
xmlbody
);

1154 
	`HTAnch‹_£tF‹m©
 (
body
, 
	`HTAtom_f‹
 ("text/xml"));

1155 
	`HTAnch‹_£tLígth
 (
body
, 
	`°æí
(
xmlbody
));

1157  
	`HTMOVEDocumítAnch‹
 (
ªque°
,
§c
,
body
,
hódîs
);

1159  
NO
;

1160 
	}
}

1167 
PUBLIC
 
BOOL
 
	$HTMOVEAbsﬁuã
 (
HTReque°
 * 
ªque°
,

1168 c⁄° * 
uri
,

1169 c⁄° * 
xmlbody
,

1170 
HTDAVHódîs
 * 
hódîs
) {

1171 i‡(
ªque°
 && 
uri
 && *urò&& 
hódîs
) {

1172 
HTAnch‹
 *
§c
 = 
	`HTAnch‹_födAddªss
 (
uri
);

1173  
	`HTMOVEAnch‹
 (
ªque°
,
§c
,
xmlbody
,
hódîs
);

1175  
NO
;

1176 
	}
}

1183 
PUBLIC
 
BOOL
 
	$HTMOVERñ©ive
 (
HTReque°
 * 
ªque°
,

1184 c⁄° * 
ªœtive
,

1185 
HTP¨ítAnch‹
 * 
ba£
,

1186 c⁄° * 
xmlbody
,

1187 
HTDAVHódîs
 * 
hódîs
) {

1188 
BOOL
 
°©us
 = 
NO
;

1189 i‡(
ªque°
 && 
ªœtive
 && 
ba£
 && 
hódîs
) {

1190 * 
ba£_uri
 = 
	`HTAnch‹_addªss
 ((
HTAnch‹
 *)
ba£
);

1191 * 
fuŒ_uri
 = 
	`HTP¨£
 (
ªœtive
,
ba£_uri
,
PARSE_ACCESS
|
PARSE_HOST
| \

1192 
PARSE_PATH
|
PARSE_PUNCTUATION
);

1194 
°©us
 = 
	`HTMOVEAbsﬁuã
 (
ªque°
,
fuŒ_uri
,
xmlbody
,
hódîs
);

1195 
	`HT_FREE
 (
fuŒ_uri
);

1196 
	`HT_FREE
 (
ba£_uri
);

1198  
°©us
;

1199 
	}
}

	@Library/src/HTDAV.h

29 #i‚de‡
HTDAV_H


30 
	#HTDAV_H


	)

32 #ifde‡
HT_DAV


45 
_HTDAVHódîs
 
	tHTDAVHódîs
;

47 
HTDAVHódîs
 * 
HTDAVHódîs_√w
 ();

48 
BOOL
 
HTDAVHódîs_dñëe
 (
HTDAVHódîs
 *
me
);

84 
BOOL
 
HTDAV_£tIfHódî
 (
HTDAVHódîs
 *
me
, c⁄° *
If
);

85 
BOOL
 
HTDAV_dñëeIfHódî
 (
HTDAVHódîs
 * 
me
);

86 * 
HTDAV_ifHódî
 (
HTDAVHódîs
 *
me
);

109 
BOOL
 
HTDAV_£tDïthHódî
 (
HTDAVHódîs
 *
me
, c⁄° *
Dïth
);

110 
BOOL
 
HTDAV_dñëeDïthHódî
 (
HTDAVHódîs
 * 
me
);

111 * 
HTDAV_DïthHódî
 (
HTDAVHódîs
 *
me
);

130 
BOOL
 
HTDAV_£tLockTokíHódî
 (
HTDAVHódîs
 *
me
, c⁄° *
LockTokí
);

131 
BOOL
 
HTDAV_dñëeLockTokíHódî
 (
HTDAVHódîs
 * 
me
);

132 * 
HTDAV_LockTokíHódî
 (
HTDAVHódîs
 *
me
);

150 
BOOL
 
HTDAV_£tDe°ö©i⁄Hódî
 (
HTDAVHódîs
 *
me
, c⁄° *
De°ö©i⁄
);

151 
BOOL
 
HTDAV_dñëeDe°ö©i⁄Hódî
 (
HTDAVHódîs
 * 
me
);

152 * 
HTDAV_De°ö©i⁄Hódî
 (
HTDAVHódîs
 *
me
);

188 
BOOL
 
HTDAV_£tTimeoutHódî
 (
HTDAVHódîs
 *
me
, c⁄° *
Timeout
);

189 
BOOL
 
HTDAV_dñëeTimeoutHódî
 (
HTDAVHódîs
 * 
me
);

190 * 
HTDAV_TimeoutHódî
 (
HTDAVHódîs
 *
me
);

203 
BOOL
 
HTDAV_£tOvîwrôeHódî
 (
HTDAVHódîs
 *
me
, BOOL 
Ovîwrôe
);

204 
BOOL
 
HTDAV_dñëeOvîwrôeHódî
 (
HTDAVHódîs
 * 
me
);

205 
BOOL
 
HTDAV_OvîwrôeHódî
 (
HTDAVHódîs
 * 
me
);

229 
BOOL
 
HTLOCKDocumítAnch‹
(
HTReque°
 * 
ªque°
, 
HTAnch‹
 * 
d°
,

230 
HTP¨ítAnch‹
 *
xmlbody
, 
HTDAVHódîs
 *
hódîs
);

231 
BOOL
 
HTLOCKAnch‹
 (
HTReque°
 * 
ªque°
,
HTAnch‹
 * 
d°
,

232 * 
xmlbody
, 
HTDAVHódîs
 * 
hódîs
);

233 
BOOL
 
HTLOCKAbsﬁuã
 (
HTReque°
 * 
ªque°
, c⁄° * 
uri
,

234 * 
xmlbody
, 
HTDAVHódîs
 * 
hódîs
);

235 
BOOL
 
HTLOCKRñ©ive
 (
HTReque°
 * 
ªque°
, c⁄° * 
ªœtive
,

236 
HTP¨ítAnch‹
 * 
ba£
, * 
xmlbody
,

237 
HTDAVHódîs
 * 
hódîs
);

251 
BOOL
 
HTUNLOCKAnch‹
 (
HTReque°
 * 
ªque°
, 
HTAnch‹
 * 
d°
,

252 
HTDAVHódîs
 * 
hódîs
);

253 
BOOL
 
HTUNLOCKAbsﬁuã
 (
HTReque°
 * 
ªque°
, c⁄° * 
uri
,

254 
HTDAVHódîs
 * 
hódîs
);

255 
BOOL
 
HTUNLOCKRñ©ive
 (
HTReque°
 * 
ªque°
, c⁄° * 
ªœtive
,

256 
HTP¨ítAnch‹
 * 
ba£
, 
HTDAVHódîs
 * 
hódîs
);

272 
BOOL
 
HTPROPFINDAnch‹
 (
HTReque°
 * 
ªque°
, 
HTAnch‹
 * 
d°
,

273 c⁄° * 
xmlbody
, 
HTDAVHódîs
 * 
hódîs
);

274 
BOOL
 
HTPROPFINDDocumítAnch‹
 (
HTReque°
 * 
ªque°
, 
HTAnch‹
 * 
d°
,

275 
HTP¨ítAnch‹
 * 
xmlbody
, 
HTDAVHódîs
 * 
hódîs
);

276 
BOOL
 
HTPROPFINDAbsﬁuã
 (
HTReque°
 * 
ªque°
, c⁄° * 
uri
,

277 c⁄° * 
xmlbody
, 
HTDAVHódîs
 * 
hódîs
);

278 
BOOL
 
HTPROPFINDRñ©ive
 (
HTReque°
 * 
ªque°
, c⁄° * 
ªœtive
,

279 
HTP¨ítAnch‹
 * 
ba£
, c⁄° * 
xmlbody
,

280 
HTDAVHódîs
 * 
hódîs
);

295 
BOOL
 
HTPROPPATCHAnch‹
 (
HTReque°
 * 
ªque°
, 
HTAnch‹
 * 
d°
,

296 c⁄° * 
xmlbody
,
HTDAVHódîs
 * 
hódîs
);

297 
BOOL
 
HTPROPPATCHDocumítAnch‹
 (
HTReque°
 * 
ªque°
,
HTAnch‹
 * 
d°
,

298 
HTP¨ítAnch‹
 * 
xmlbody
,
HTDAVHódîs
 * 
hódîs
);

299 
BOOL
 
HTPROPPATCHAbsﬁuã
 (
HTReque°
 * 
ªque°
, c⁄° * 
uri
,

300 c⁄° * 
xmlbody
, 
HTDAVHódîs
 * 
hódîs
);

301 
BOOL
 
HTPROPPATCHRñ©ive
 (
HTReque°
 * 
ªque°
, c⁄° * 
ªœtive
,

302 
HTP¨ítAnch‹
 * 
ba£
, c⁄° * 
xmlbody
,

303 
HTDAVHódîs
 * 
hódîs
);

317 
BOOL
 
HTMKCOLAnch‹
 (
HTReque°
 * 
ªque°
, 
HTAnch‹
 * 
d°
,

318 
HTDAVHódîs
 * 
hódîs
);

319 
BOOL
 
HTMKCOLAbsﬁuã
 (
HTReque°
 * 
ªque°
, c⁄° * 
uri
,

320 
HTDAVHódîs
 * 
hódîs
);

321 
BOOL
 
HTMKCOLRñ©ive
 (
HTReque°
 * 
ªque°
, c⁄° * 
ªœtive
,

322 
HTP¨ítAnch‹
 * 
ba£
, 
HTDAVHódîs
 * 
hódîs
);

338 
BOOL
 
HTCOPYAnch‹
 (
HTReque°
 * 
ªque°
, 
HTAnch‹
 * 
§c
,

339 c⁄° * 
xmlbody
, 
HTDAVHódîs
 * 
hódîs
);

340 
BOOL
 
HTCOPYDocumítAnch‹
 (
HTReque°
 * 
ªque°
, 
HTAnch‹
 * 
§c
,

341 
HTP¨ítAnch‹
 * 
xmlbody
, 
HTDAVHódîs
 * 
hódîs
);

342 
BOOL
 
HTCOPYAbsﬁuã
 (
HTReque°
 * 
ªque°
, c⁄° * 
uri
,

343 c⁄° * 
xmlbody
, 
HTDAVHódîs
 * 
hódîs
);

344 
BOOL
 
HTCOPYRñ©ive
 (
HTReque°
 * 
ªque°
, c⁄° * 
ªœtive
,

345 
HTP¨ítAnch‹
 * 
ba£
, c⁄° * 
xmlbody
,

346 
HTDAVHódîs
 * 
hódîs
);

363 
BOOL
 
HTMOVEAnch‹
 (
HTReque°
 * 
ªque°
, 
HTAnch‹
 * 
§c
,

364 c⁄° * 
xmlbody
, 
HTDAVHódîs
 * 
hódîs
);

365 
BOOL
 
HTMOVEDocumítAnch‹
 (
HTReque°
 * 
ªque°
, 
HTAnch‹
 * 
§c
,

366 
HTP¨ítAnch‹
 * 
xmlbody
, 
HTDAVHódîs
 * 
hódîs
);

367 
BOOL
 
HTMOVEAbsﬁuã
 (
HTReque°
 * 
ªque°
, c⁄° * 
uri
,

368 c⁄° * 
xmlbody
, 
HTDAVHódîs
 * 
hódîs
);

369 
BOOL
 
HTMOVERñ©ive
 (
HTReque°
 * 
ªque°
, c⁄° * 
ªœtive
,

370 
HTP¨ítAnch‹
 * 
ba£
, c⁄° * 
xmlbody
,

371 
HTDAVHódîs
 * 
hódîs
);

	@Library/src/HTDNS.c

17 
	~"wwwsys.h
"

18 
	~"WWWUtû.h
"

19 
	~"HTP¨£.h
"

20 
	~"HTAÀπ.h
"

21 
	~"HTEº‹.h
"

22 
	~"HTTøns.h
"

23 
	~"HTH°M™.h
"

24 
	~"HTDNS.h
"

26 
	#DNS_TIMEOUT
 1800L

	)

29 
	s_HTdns
 {

30 * 
	mho°«me
;

31 
time_t
 
	m¡ime
;

32 
	maddæígth
;

33 
	mhomes
;

34 ** 
	maddæi°
;

35 * 
	mweight
;

38 
PRIVATE
 
HTLi°
 **
	gCacheTabÀ
 = 
NULL
;

39 
PRIVATE
 
time_t
 
	gDNSTimeout
 = 
DNS_TIMEOUT
;

43 
PRIVATE
 
	$‰ì_obje˘
 (
HTdns
 * 
me
)

45 i‡(
me
) {

46 
	`HT_FREE
(
me
->
ho°«me
);

47 i‡(*
me
->
addæi°
)

48 
	`HT_FREE
(*
me
->
addæi°
);

49 
	`HT_FREE
(
me
->
addæi°
);

50 
	`HT_FREE
(
me
->
weight
);

51 
	`HT_FREE
(
me
);

53 
	}
}

55 
PRIVATE
 
BOOL
 
	$dñëe_obje˘
 (
HTLi°
 * 
li°
, 
HTdns
 * 
me
)

57 
	`HTTRACE
(
PROT_TRACE
, "DNS Dñëe.. obje˘ %∞‰omÜi° %p\n" 
_
 
me
 _ 
li°
);

58 
	`HTLi°_ªmoveObje˘
(
li°
, (*Ë
me
);

59 
	`‰ì_obje˘
(
me
);

60  
YES
;

61 
	}
}

67 
PUBLIC
 
	$HTDNS_£tTimeout
 (
time_t
 
timeout
)

69 
DNSTimeout
 = 
timeout
;

70 
	}
}

76 
PUBLIC
 
time_t
 
	$HTDNS_timeout
 (
time_t
 
timeout
)

78  
DNSTimeout
;

79 
	}
}

89 
PUBLIC
 
HTdns
 * 
	$HTDNS_add
 (
HTLi°
 * 
li°
, 
ho°ít
 * 
ñemít
,

90 *
ho°
, *
homes
)

92 
HTdns
 *
me
;

93 *
addr
 = 
NULL
;

94 **
ödex
 = 
ñemít
->
h_addr_li°
;

95 
˙t
 = 1;

97 *
ödex
++Ë
˙t
++;

98 i‡((
me
 = (
HTdns
 *Ë
	`HT_CALLOC
(1, (HTdns))Ë=
NULL
 ||

99 (
me
->
addæi°
 = (**Ë
	`HT_CALLOC
(1, 
˙t
*(*))Ë=
NULL
 ||

100 (
addr
 = (*Ë
	`HT_CALLOC
(1, 
˙t
*
ñemít
->
h_Àngth
)Ë=
NULL
)

101 
	`HT_OUTOFMEM
("HTDNS_add");

102 
	`SåAŒocC›y
(
me
->
ho°«me
, 
ho°
);

103 
me
->
¡ime
 = 
	`time
(
NULL
);

104 
ödex
 = 
ñemít
->
h_addr_li°
;

105 
˙t
 = 0;

106 *
ödex
) {

107 *(
me
->
addæi°
+
˙t
Ë
addr
+˙t*
ñemít
->
h_Àngth
;

108 
	`mem˝y
((*Ë*(
me
->
addæi°
+
˙t
++), *
ödex
++, 
ñemít
->
h_Àngth
);

110 
me
->
homes
 = 
˙t
;

111 *
homes
 = 
˙t
;

112 i‡((
me
->
weight
 = (*Ë
	`HT_CALLOC
(me->
homes
, ())Ë=
NULL
)

113 
	`HT_OUTOFMEM
("HTDNS_add");

114 
me
->
addæígth
 = 
ñemít
->
h_Àngth
;

115 
	`HTTRACE
(
PROT_TRACE
, "DNS Add..... `%s\' wôh %d home(sËtÿ%p\n" 
_


116 
ho°
 
_
 *
homes
 _ 
li°
);

117 
	`HTLi°_addObje˘
(
li°
, (*Ë
me
);

118  
me
;

119 
	}
}

136 
PUBLIC
 
BOOL
 
	$HTDNS_upd©eWeigths
(
HTdns
 *
dns
, 
cuºít
, 
ms_t
 
dñètime
)

138 i‡(
dns
) {

139 
˙t
;

140 c⁄° 
∑ssive
 = 0.9;

142 c⁄° 
Neff
 = 3;

143 c⁄° 
Æpha
 = 
	`exp
(-1.0/
Neff
);

145 c⁄° 
Æpha
 = 0.716531310574;

147 
˙t
=0; c¡<
dns
->
homes
; cnt++) {

148 i‡(
˙t
 =
cuºít
) {

149 *(
dns
->
weight
+
cuºít
Ë*(dns->weight+cuºít)*
Æpha
 + (1.0-Æpha)*
dñètime
;

150 i‡(*(
dns
->
weight
+
cuºít
) < 0.0) *(dns->weight+current) = 0.0;

152 *(
dns
->
weight
+
˙t
Ë*(dns->weight+˙tË* 
∑ssive
;

154 
	`HTTRACE
(
PROT_TRACE
, "DNS weight.. Homê%d ha†weighà%4.2f\n" 
_
 
˙t
 _

155 *(
dns
->
weight
+
˙t
));

157  
YES
;

159 
	`HTTRACE
(
PROT_TRACE
, "DNS weight.. Obje˘ %∞nŸ found'\n" 
_
 
dns
);

160  
NO
;

161 
	}
}

167 
PUBLIC
 
BOOL
 
	$HTDNS_dñëe
 (c⁄° * 
ho°
)

169 
HTLi°
 *
li°
;

170 
hash
 = 0;

171 c⁄° *
±r
;

172 i‡(!
ho°
 || !
CacheTabÀ
Ë 
NO
;

173 
±r
=
ho°
; *ptr;Ötr++)

174 
hash
 = (Ë((hash * 3 + (*(*Ë
±r
)Ë% 
HT_M_HASH_SIZE
);

175 i‡((
li°
 = 
CacheTabÀ
[
hash
])) {

176 
HTdns
 *
¥es
;

177 (
¥es
 = (
HTdns
 *Ë
	`HTLi°_√xtObje˘
(
li°
))) {

178 i‡(!
	`°rcmp
(
¥es
->
ho°«me
, 
ho°
)) {

179 
	`dñëe_obje˘
(
CacheTabÀ
[
hash
], 
¥es
);

184  
YES
;

185 
	}
}

191 
PUBLIC
 
BOOL
 
	$HTDNS_dñëeAŒ
 ()

193 
˙t
;

194 
HTLi°
 *
cur
;

195 i‡(!
CacheTabÀ
Ë 
NO
;

196 
˙t
=0; c¡<
HT_M_HASH_SIZE
; cnt++) {

197 i‡((
cur
 = 
CacheTabÀ
[
˙t
])) {

198 
HTdns
 *
¥es
;

199 (
¥es
 = (
HTdns
 *Ë
	`HTLi°_√xtObje˘
(
cur
)Ë!
NULL
)

200 
	`‰ì_obje˘
(
¥es
);

202 
	`HTLi°_dñëe
(
CacheTabÀ
[
˙t
]);

203 
CacheTabÀ
[
˙t
] = 
NULL
;

205 
	`HT_FREE
(
CacheTabÀ
);

206  
YES
;

207 
	}
}

218 
PUBLIC
 
	$HTGëHo°ByName
 (
HTHo°
 * 
ho°
, *
ho°«me
, 
HTReque°
* 
ªque°
)

220 
SockA
 *
sö
 = 
	`HTHo°_gëSockAddr
(
ho°
);

221 
homes
 = -1;

222 
HTLi°
 *
li°
;

223 
HTdns
 *
¥es
 = 
NULL
;

224 i‡(!
ho°
 || !
ho°«me
) {

225 
	`HTTRACE
(
PROT_TRACE
, "HostByName.. Badárgument\n");

228 
	`HTHo°_£tHome
(
ho°
, 0);

232 
hash
 = 0;

233 *
±r
;

234 
±r
=
ho°«me
; *ptr;Ötr++)

235 
hash
 = (Ë((hash * 3 + (*(*Ë
±r
)Ë% 
HT_M_HASH_SIZE
);

236 i‡(!
CacheTabÀ
) {

237 i‡((
CacheTabÀ
 = (
HTLi°
* *Ë
	`HT_CALLOC
(
HT_M_HASH_SIZE
, (HTLi° *))Ë=
NULL
)

238 
	`HT_OUTOFMEM
("HTDNS_init");

240 i‡(!
CacheTabÀ
[
hash
]ËCacheTabÀ[hash] = 
	`HTLi°_√w
();

241 
li°
 = 
CacheTabÀ
[
hash
];

246 
HTLi°
 *
cur
 = 
li°
;

247 (
¥es
 = (
HTdns
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

248 i‡(!
	`°rcmp
(
¥es
->
ho°«me
, hostname)) {

249 i‡(
	`time
(
NULL
Ë> 
¥es
->
¡ime
 + 
DNSTimeout
) {

250 
	`HTTRACE
(
PROT_TRACE
, "HostByName.. Refreshing cache\n");

251 
	`dñëe_obje˘
(
li°
, 
¥es
);

252 
¥es
 = 
NULL
;

258 i‡(
¥es
) {

263 
homes
 = 
¥es
->homes;

264 i‡(
¥es
->
homes
 > 1) {

265 
˙t
 = 0;

266 
be°_weight
 = 1e30;

267 
˙t
 < 
¥es
->
homes
) {

268 i‡(*(
¥es
->
weight
+
˙t
Ë< 
be°_weight
) {

269 
be°_weight
 = *(
¥es
->
weight
+
˙t
);

270 
	`HTHo°_£tHome
(
ho°
, 
˙t
);

272 
˙t
++;

275 
ho°
->
dns
 = 
¥es
;

276 
	`mem˝y
((*Ë&
sö
->
sö_addr
, *(
¥es
->
addæi°
+
	`HTHo°_home
(
ho°
)),

277 
¥es
->
addæígth
);

279 
ho°ít
 *
ho°ñemít
;

280 
HTAÀπCÆlback
 *
cbf
 = 
	`HTAÀπ_föd
(
HT_PROG_DNS
);

281 #ifde‡
HT_REENTRANT


282 
thd_î∫o
;

283 
buf„r
[
HOSTENT_MAX
];

284 
ho°ít
 
ªsu…
;

286 #ifde‡
HAVE_GETHOSTBYNAME_R_3


287 
ho°ít_d©a
 
hd©a
;

290 i‡(
cbf
Ë(*cbf)(
ªque°
, 
HT_PROG_DNS
, 
HT_MSG_NULL
,
NULL
,
ho°«me
,NULL);

291 #ifde‡
HAVE_GETHOSTBYNAME_R_5


292 
ho°ñemít
 = 
	`gëho°by«me_r
(
ho°«me
, &
ªsu…
, 
buf„r
,

293 
HOSTENT_MAX
, &
thd_î∫o
);

294 #ñi‡
	`deföed
(
HAVE_GETHOSTBYNAME_R_6
)

295 
	`gëho°by«me_r
(
ho°«me
, &
ªsu…
, 
buf„r
,

296 
HOSTENT_MAX
, &
ho°ñemít
, &
thd_î∫o
);

298 #ñi‡
	`deföed
(
HAVE_GETHOSTBYNAME_R_3
)

299 i‡(
	`gëho°by«me_r
(
ho°«me
, &
ªsu…
, &
hd©a
) == 0) {

300 
ho°ñemít
 = &
ªsu…
;

303 
ho°ñemít
 = 
NULL
;

306 i‡(
cbf
Ë(*cbf)(
ªque°
, 
HT_PROG_DNS
, 
HT_MSG_NULL
,
NULL
,
ho°«me
,NULL);

307 
ho°ñemít
 = 
	`gëho°by«me
(
ho°«me
);

309 i‡(!
ho°ñemít
) {

310 
	`HTReque°_addSy°emEº‹
(
ªque°
, 
ERR_FATAL
, 
so˚ºno
, 
NO
,

314 
ho°
->
dns
 = 
	`HTDNS_add
(
li°
, 
ho°ñemít
, 
ho°«me
, &
homes
);

315 
	`mem˝y
((*Ë&
sö
->
sö_addr
, *
ho°ñemít
->
h_addr_li°
,

316 
ho°ñemít
->
h_Àngth
);

318  
homes
;

319 
	}
}

326 
PUBLIC
 * 
	$HTGëHo°BySock
 (
soc
)

328 
sockaddr
 
addr
;

329 
Àn
 = (
sockaddr
);

330 
ö_addr
 *
üddr
;

331 *
«me
 = 
NULL
;

332 
ho°ít
 * 
pho°
;

333 #ifde‡
HT_REENTRANT


334 
thd_î∫o
;

335 
buf„r
[
HOSTENT_MAX
];

336 
ho°ít
 
ªsu…
;

338 #ifde‡
HAVE_GETHOSTBYADDR_R_5


339 
ho°ít_d©a
 
hd©a
;

342 #ifde‡
DECNET


343  
NULL
;

345 i‡(
	`gë≥î«me
(
soc
, &
addr
, &
Àn
) < 0)

346  
NULL
;

347 
üddr
 = &(((
sockaddr_ö
 *)&
addr
)->
sö_addr
);

349 #ifde‡
HAVE_GETHOSTBYADDR_R_7


350 
pho°
 = 
	`gëho°byaddr_r
((*Ë
üddr
, (
ö_addr
), 
AF_INET
,

351 &
ªsu…
, 
buf„r
, 
HOSTENT_MAX
, &
thd_î∫o
);

352 #ñi‡
	`deföed
(
HAVE_GETHOSTBYADDR_R_8
)

353 
	`gëho°byaddr_r
((*Ë
üddr
, (
ö_addr
), 
AF_INET
,

354 &
ªsu…
, 
buf„r
, 
HOSTENT_MAX
, &
pho°
, &
thd_î∫o
);

355 #ñi‡
	`deföed
(
HAVE_GETHOSTBYADDR_R_5
)

356 if(
	`gëho°byaddr_r
((*Ë
üddr
, (
ö_addr
), 
AF_INET
,

357 &
ªsu…
, &
hd©a
)==0) {

358 
pho°
=&
ªsu…
;

361 
pho°
 = 
NULL
;

364 
pho°
 = 
	`gëho°byaddr
((*Ë
üddr
, (
ö_addr
), 
AF_INET
);

366 i‡(!
pho°
) {

367 
	`HTTRACE
(
PROT_TRACE
, "TCP......... Can't find internetÇodeÇame forÖeer!!\n");

368  
NULL
;

370 
	`SåAŒocC›y
(
«me
, 
pho°
->
h_«me
);

371 
	`HTTRACE
(
PROT_TRACE
, "TCP......... Pì∏«mêi†`%s'\n" 
_
 
«me
);

372  
«me
;

375 
	}
}

	@Library/src/HTDNS.h

37 #i‚de‡
HTDNS_H


38 
	#HTDNS_H


	)

43 
_HTdns
 
	tHTdns
;

58 
HTDNS_£tTimeout
 (
time_t
 
timeout
);

59 
time_t
 
HTDNS_timeout
 (time_à
timeout
);

74 
HTdns
 * 
HTDNS_add
 (
HTLi°
 * 
li°
, 
ho°ít
 * 
ñemít
,

75 * 
ho°
, * 
homes
);

85 
BOOL
 
HTDNS_dñëe
 (c⁄° * 
ho°
);

96 
BOOL
 
HTDNS_dñëeAŒ
 ();

110 
BOOL
 
HTDNS_upd©eWeigths
 (
HTdns
 *
dns
, 
cur
, 
ms_t
 
dñètime
);

126 * 
HTGëHo°BySock
 (
soc
);

139 
HTGëHo°ByName
 (
HTHo°
 * 
ho°
, *
ho°«me
, 
HTReque°
 * 
ªque°
);

	@Library/src/HTDemux.c

18 
	~"wwwsys.h
"

19 
	~"WWWUtû.h
"

20 
	~"WWWC‹e.h
"

21 
	~"HTMuxHódî.h
"

22 
	~"HTMuxCh.h
"

23 
	~"HTDemux.h
"

25 
	s_HTSåóm
 {

26 c⁄° 
HTSåómCœss
 * 
	miß
;

27 
HTHo°
 * 
	mho°
;

28 
HTMuxCh™√l
 * 
	mmuxch
;

29 
HTMuxSessi⁄
 * 
	m£ssi⁄
;

30 
	m√xt
;

39 
PRIVATE
 
	$HTDemux_wrôe
 (
HTSåóm
 * 
me
, c⁄° * 
buf
, 
Àn
)

41 
HTMuxCh™√l
 * 
muxch
 = 
me
->muxch;

42 
Àngth
 = 0;

43 
Àn
 > 0) {

49 i‡(!
me
->
√xt
) {

50 
HTMuxHódî
 
hódî
[2];

51 
HTMuxSessi⁄Id
 
sid
 = 
INVSID
;

52 
hódî
[0] = 
	`HT_WORDSWAP
(*(
HTMuxHódî
 *Ë
buf
);

58 i‡(
	`MUX_IS_LONG
(
hódî
[0])) {

59 
hódî
[1] = 
	`HT_WORDSWAP
(*(
HTMuxHódî
 *Ë(
buf
+1));

60 
me
->
√xt
 = 
	`MUX_LONG_ALIGN
(
hódî
[1]);

61 
buf
 +8, 
Àn
 -= 8;

63 
me
->
√xt
 = 
	`MUX_ALIGN
(
	`MUX_GET_LEN
(
hódî
[0]));

64 
buf
 +4, 
Àn
 -= 4;

66 
Àngth
 = 
	`HTMIN
(
Àn
, 
me
->
√xt
);

67 
sid
 = 
	`MUX_GET_SID
(
hódî
[0]);

68 
	`HTTRACE
(
MUX_TRACE
, "Demux såóm Hódî: %x, sid %d,Üígth %d\n" 
_
 
hódî
[0] _ 
Àngth
 _ 
sid
);

73 i‡(
hódî
[0] & 
MUX_CONTROL
) {

74 i‡(
hódî
[0] & 
MUX_STRING
) {

78 } i‡(
hódî
[0] & 
MUX_STACK
) {

82 } i‡(
hódî
[0] & 
MUX_FRAGMENT
) {

83 
	`HTMuxSessi⁄_£tFøgmít
(
muxch
, 
sid
, 
	`MUX_GET_LEN
(
hódî
[0]));

84 } i‡(
hódî
[0] & 
MUX_CREDIT
) {

85 
	`HTMuxSessi⁄_£tCªdô
(
muxch
, 
sid
, 
hódî
[1]);

87 } i‡(
hódî
[0] & 
MUX_SYN
) {

88 
me
->
£ssi⁄
 = 
	`HTMuxSessi⁄_ªgi°î
(
muxch
, 
sid
, 
	`MUX_GET_PID
(
hódî
[0]));

89 } i‡(
hódî
[0] & 
MUX_FIN
) {

90 
me
->
£ssi⁄
 = 
	`HTMuxCh™√l_födSessi⁄
(
muxch
, 
sid
);

91 
	`HTMuxSessi⁄_£tClo£
(
me
->
muxch
, me->
£ssi⁄
, 
MUX_S_END_READ
);

93 
me
->
£ssi⁄
 = 
	`HTMuxCh™√l_födSessi⁄
(
muxch
, 
sid
);

99 i‡(
me
->
√xt
 && me->
£ssi⁄
) {

100 i‡(
	`HTMuxSessi⁄_di•o£D©a
(
me
->
£ssi⁄
, 
buf
, 
Àngth
) == 1) {

101 
	`HTMuxCh™√l_£ndC⁄åﬁ
(
muxch
, 
	`HTMuxSessi⁄_id
(
me
->
£ssi⁄
),

102 
MUX_CREDIT
, 
DEFAULT_CREDIT
, 
NULL
, 0);

105 
buf
 +
Àngth
, 
Àn
 -Àngth, 
me
->
√xt
 -=Üength;

107  
HT_OK
;

108 
	}
}

110 
PRIVATE
 
	$HTDemux_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

112  
	`HTDemux_wrôe
(
me
, &
c
, 1);

113 
	}
}

115 
PRIVATE
 
	$HTDemux_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

117  
	`HTDemux_wrôe
(
me
, 
s
, (Ë
	`°æí
(s));

118 
	}
}

120 
PRIVATE
 
	$HTDemux_Êush
 (
HTSåóm
 * 
me
)

122  
HT_OK
;

123 
	}
}

125 
PRIVATE
 
	$HTDemux_‰ì
 (
HTSåóm
 * 
me
)

127  
HT_IGNORE
;

128 
	}
}

130 
PRIVATE
 
	$HTDemux_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

132  
HT_IGNORE
;

133 
	}
}

135 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTDemux
 =

138 
HTDemux_Êush
,

139 
HTDemux_‰ì
,

140 
HTDemux_ab‹t
,

141 
HTDemux_put_ch¨a˘î
,

142 
HTDemux_put_°rög
,

143 
HTDemux_wrôe


146 
PUBLIC
 
HTSåóm
 * 
	$HTDemux_√w
 (
HTHo°
 * 
ho°
, 
HTMuxCh™√l
 * 
muxch
)

148 
HTSåóm
 * 
me
 = 
NULL
;

149 i‡(
muxch
) {

150 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

151 
	`HT_OUTOFMEM
("HTDemux_new");

152 
me
->
iß
 = &
HTDemux
;

153 
me
->
ho°
 = host;

154 
me
->
muxch
 = muxch;

156  
me
;

157 
	}
}

	@Library/src/HTDemux.h

33 #i‚de‡
HTMUXRX_H


34 
	#HTMUXRX_H


	)

35 
	~"HTSåóm.h
"

36 
	~"HTMuxCh.h
"

42 
HTSåóm
 * 
HTDemux_√w
 (
HTHo°
 * 
ho°
, 
HTMuxCh™√l
 * 
muxch
);

	@Library/src/HTDescpt.c

18 
	~"wwwsys.h
"

19 
	~"HTUtûs.h
"

20 
	~"HTSåög.h
"

21 
	~"HTF‹m©.h
"

22 
	~"HTLi°.h
"

24 
	#MAX_LINE_LEN
 256

	)

26 
PRIVATE
 * 
	gHTDes¸ùti⁄Fûe
 = ".www_descript";

27 
PRIVATE
 
BOOL
 
	gHTPìkTôÀs
 = 
YES
;

35 
PUBLIC
 
HTLi°
 * 
	$HTRódDes¸ùti⁄s
 (* 
dú«me
)

37 * 
«me
 = 
NULL
;

38 
FILE
 * 
Â
 = 
NULL
;

39 
HTLi°
 * 
li°
 = 
NULL
;

40 
buf
[
MAX_LINE_LEN
 + 1];

42 i‡(!
dú«me
Ë 
NULL
;

44 i‡((
«me
 = (*Ë
	`HT_MALLOC
(
	`°æí
(
dú«me
Ë+ såÀn(
HTDes¸ùti⁄Fûe
Ë+ 2)Ë=
NULL
)

45 
	`HT_OUTOFMEM
("HTReadDescriptions");

47 
	`•rötf
(
«me
, "%s/%s", 
dú«me
, 
HTDes¸ùti⁄Fûe
);

48 
Â
 = 
	`f›í
(
«me
, "r");

49 i‡(!
Â
) {

50 
	`HTTRACE
(
PROT_TRACE
, "DúBrow£... Nÿdes¸ùti⁄ fûê%s\n" 
_
 
«me
);

51 
	`HT_FREE
(
«me
);

52  
NULL
;

54 
	`HTTRACE
(
PROT_TRACE
, "DúBrow£... Des¸ùti⁄ fûêfound %s\n" 
_
 
«me
);

57 
li°
 = 
	`HTLi°_√w
();

59 
	`fgës
(
buf
, 
MAX_LINE_LEN
, 
Â
)) {

60 * 
s
 = 
buf
;

61 * 
t
 = 
NULL
;

62 * 
d
 = 
NULL
;

64 *
s
 && 
	`is•a˚
(() *s)) s++;

65 i‡(*
s
!='d' && *s!='D') ;

67 
t
 = 
s
+1;

68 *
t
 && !
	`is•a˚
(() *t))Å++;

69 *
t
 && 
	`is•a˚
(() *t))Å++;

71 i‡(*
t
) {

72 
d
 = 
t
+1;

73 *
d
 && !
	`is•a˚
(() *d)) d++;

74 i‡(*
d
) {

75 *
d
++ = 0;

76 *
d
 && 
	`is•a˚
(() *d)) d++;

77 i‡(*
d
) {

78 * 
p
 = 
d
;

79 *
p
 && *p!='\r' && *p!='\n')Ö++;

80 *
p
 = 0;

84 i‡(
t
 && 
d
 && *t && *d) {

85 * 
°uff
;

86 i‡((
°uff
 = (*Ë
	`HT_MALLOC
(
	`°æí
(
t
Ë+ såÀn(
d
Ë+ 2)Ë=
NULL
)

87 
	`HT_OUTOFMEM
("HTDirReadDescriptions");

88 
	`•rötf
(
°uff
, "%†%s", 
t
, 
d
);

89 
	`HTLi°_addObje˘
(
li°
, (*)
°uff
);

90 
	`HTTRACE
(
PROT_TRACE
, "Des¸ùti⁄. %s\n" 
_
 
°uff
);

93 
	`f˛o£
(
Â
);

94 
	`HT_FREE
(
«me
);

95  
li°
;

96 
	}
}

99 
PUBLIC
 
	$HTFªeDes¸ùti⁄s
 (
HTLi°
 * 
des¸ùti⁄s
)

101 
HTLi°
 * 
cur
 = 
des¸ùti⁄s
;

102 * 
°r
;

104 i‡(
des¸ùti⁄s
) {

105 (
°r
 = (*)
	`HTLi°_√xtObje˘
(
cur
)))

106 
	`HT_FREE
(
°r
);

107 
	`HTLi°_dñëe
(
des¸ùti⁄s
);

109 
	}
}

112 
PRIVATE
 * 
	$HTPìkTôÀ
 (* 
dú«me
,

113 * 
fûíame
)

115 
	#PEEK_BUF_SIZE
 200

	)

116 * 
«me
;

117 
FILE
 * 
Â
;

118 
buf
[
PEEK_BUF_SIZE
 + 1];

119 
°©us
;

120 * 
cur
;

121 * 
íd
;

122 * 
ªt
 = 
NULL
;

123 * 
p
;

124 
BOOL
 
•a˚
 = 
YES
;

126 
	`HT_FREE
(
ªt
);

128 
	`HTTRACE
(
PROT_TRACE
, "HTPìkTôÀ. cÆÀd, dú«me=%†fûíame=%s\n" 
_


129 
dú«me
 ? dú«mê: "-nuŒ-" 
_


130 
fûíame
 ? filename : "-null-");

132 i‡(!
dú«me
 || !
fûíame
Ë 
NULL
;

134 i‡((
«me
 = (*Ë
	`HT_MALLOC
(
	`°æí
(
dú«me
Ë+ såÀn(
fûíame
Ë+ 2)Ë=
NULL
)

135 
	`HT_OUTOFMEM
("HTPeekTitle");

136 
	`•rötf
(
«me
, "%s/%s", 
dú«me
, 
fûíame
);

138 
Â
 = 
	`f›í
(
«me
, "r");

139 i‡(!
Â
) {

140 
	`HTTRACE
(
PROT_TRACE
, "HTPeekTitle. fopen failed\n");

141 
˛ónup
;

144 
°©us
 = 
	`‰ód
(
buf
, 1, 
PEEK_BUF_SIZE
, 
Â
);

145 
	`f˛o£
(
Â
);

146 i‡(
°©us
 <0Ë
˛ónup
;

147 
buf
[
°©us
] = 0;

149 
cur
 = 
buf
;

150 (
cur
 = 
	`°rchr
(cur,'<'))) {

151 i‡(!
	`°∫ˇ£comp
(
cur
+1,"TITLE>",6)) {

152 
cur
 += 7;

153 
íd
 = 
	`°rchr
(
cur
,'<');

154 
íd
 && 
	`°∫ˇ£comp
(end+1, "/TITLE>", 7))

155 
íd
 = 
	`°rchr
(end+1, '<');

156 i‡(
íd
) *end = 0;

157 i‡((
p
 = 
ªt
 = (*Ë
	`HT_MALLOC
(
	`°æí
(
cur
Ë+ 1)Ë=
NULL
)

158 
	`HT_OUTOFMEM
("HTPeekTitle");

159 *
cur
) {

160 i‡(
	`is•a˚
((Ë*
cur
)) {

161 i‡(!
•a˚
) {

162 
•a˚
 = 
YES
;

163 *
p
++ = ' ';

167 i‡(
•a˚
Ë•a˚ = 
NO
;

168 *
p
++ = *
cur
;

170 
cur
++;

172 *
p
 = 0;

173 
˛ónup
;

175 
cur
++;

178 
˛ónup
:

179 
	`HTTRACE
(
PROT_TRACE
, "HTPìkTôÀ.Ñëu∫ög %c%s%c\n" 
_


180 
ªt
 ? '"' : '-' 
_
Ñet ?Ñet : "null" _Ñet ? '"' : '-');

181 
	`HT_FREE
(
«me
);

182  
ªt
;

183 
	}
}

191 
PUBLIC
 * 
	$HTGëDes¸ùti⁄
 (
HTLi°
 * 
des¸ùti⁄s
,

192 * 
dú«me
,

193 * 
fûíame
,

194 
HTF‹m©
 
f‹m©
)

196 
HTLi°
 * 
cur
 = 
des¸ùti⁄s
;

197 * 
t
;

199 i‡(!
dú«me
 || !
fûíame
Ë 
NULL
;

205 (
t
 = (*)
	`HTLi°_√xtObje˘
(
cur
))) {

206 * 
d
 = 
	`°rchr
(
t
,' ');

207 i‡(!
d
) ;

208 *
d
 = 0;

210 i‡(
	`HTAA_ãm∂©eM©ch
(
t
,
fûíame
)) {

212 i‡(
	`HTSåM©ch
(
t
, 
fûíame
)) {

214 *
d
 = ' ';

215  
d
+1;

217 *
d
 = ' ';

220 i‡(
HTPìkTôÀs
 && 
f‹m©
 =
WWW_HTML
)

221  
	`HTPìkTôÀ
(
dú«me
, 
fûíame
);

223  
NULL
;

224 
	}
}

	@Library/src/HTDescpt.h

31 #i‚de‡
HTDESCRIPT_H


32 
	#HTDESCRIPT_H


	)

45 * 
HTDes¸ùti⁄Fûe
;

73 
BOOL
 
HTPìkTôÀs
;

85 
HTLi°
 * 
HTRódDes¸ùti⁄s
 (* 
dú«me
);

98 * 
HTGëDes¸ùti⁄
 (
HTLi°
 * 
des¸ùti⁄s
,

99 * 
dú«me
,

100 * 
fûíame
,

101 
HTF‹m©
 
f‹m©
);

121 
HTFªeDes¸ùti⁄s
 (
HTLi°
 * 
des¸ùti⁄s
);

	@Library/src/HTDialog.c

18 
	~"WWWLib.h
"

19 
	~"WWWAµ.h
"

20 
	~"WWWHTTP.h
"

21 
	~"HTDülog.h
"

26 
PRIVATE
 c⁄° * 
	gHTDülogs
[
HT_MSG_ELEMENTS
] = {
HT_MSG_ENGLISH_INITIALIZER
};

33 
PRIVATE
 
HTEº‹Mesßge
 
	gHTEº‹s
[
HTERR_ELEMENTS
] = {
HTERR_ENGLISH_INITIALIZER
};

39 
PUBLIC
 * 
	$HTDülog_¥ogªssMesßge
 (
HTReque°
 * 
ªque°
, 
HTAÀπOpcode
 
›
,

40 
msgnum
, c⁄° * 
dÁu…
,

41 * 
öput
)

43 * 
ªsu…
 = 
NULL
;

44 
›
) {

45 
HT_PROG_DNS
:

46 
	`SåAŒocMC›y
(&
ªsu…
, "Looking up ",

47 
öput
 ? (*) input : "",

48 
NULL
);

51 
HT_PROG_CONNECT
:

52 
	`SåAŒocMC›y
(&
ªsu…
, "Contacting ",

53 
öput
 ? (*) input : "",

54 
NULL
);

57 
HT_PROG_ACCEPT
:

58 
	`SåAŒocC›y
(
ªsu…
, "Waiting for connection...");

61 
HT_PROG_LOGIN
:

62 
	`SåAŒocC›y
(
ªsu…
, "Logging in...");

65 
HT_PROG_READ
:

66 i‡(
ªque°
) {

67 
˛
 = 
	`HTAnch‹_Àngth
(
	`HTReque°_™ch‹
(
ªque°
));

68 i‡(
˛
 > 0) {

69 
b_ªad
 = 
	`HTReque°_bodyRód
(
ªque°
);

70 
¥o
 = (Ë
b_ªad
/
˛
*100;

71 
buf
[10];

72 
p˘
[10];

73 
	`HTNumToSå
((Ë
˛
, 
buf
, 10);

74 
	`•rötf
(
p˘
, "%d%%", (Ë
¥o
);

75 
	`SåAŒocMC›y
(&
ªsu…
, "Ród (", 
p˘
, " o‡", 
buf
, ")", 
NULL
);

77 
b_ªad
 = 
	`HTReque°_byãsRód
(
ªque°
);

78 * 
øw_ªad
 = 
öput
 ? (*Ëöpuà: 
NULL
;

79 i‡(
b_ªad
 > 0) {

80 
buf
[10];

81 
	`HTNumToSå
(
b_ªad
, 
buf
, 10);

82 
	`SåAŒocMC›y
(&
ªsu…
, "Ród ", 
buf
, "byãs", 
NULL
);

83 } i‡(
øw_ªad
 && *raw_read>0) {

84 
buf
[10];

85 
	`HTNumToSå
(*
øw_ªad
, 
buf
, 10);

86 
	`SåAŒocMC›y
(&
ªsu…
, "Ród ", 
buf
, "byãs", 
NULL
);

88 
	`SåAŒocC›y
(
ªsu…
, "Reading...");

94 
HT_PROG_WRITE
:

95 i‡(
ªque°
 && 
	`HTMëhod_hasE¡ôy
(
	`HTReque°_mëhod
(request))) {

96 
HTP¨ítAnch‹
 *
™ch‹
=
	`HTReque°_™ch‹
(
	`HTReque°_sour˚
(
ªque°
));

97 
˛
 = 
	`HTAnch‹_Àngth
(
™ch‹
);

98 i‡(
˛
 > 0) {

99 
b_wrôe
 = 
	`HTReque°_bodyWrôãn
(
ªque°
);

100 
¥o
 = (Ë
b_wrôe
/
˛
*100;

101 
buf
[10];

102 
p˘
[10];

103 
	`HTNumToSå
((Ë
˛
, 
buf
, 10);

104 
	`•rötf
(
p˘
, "%d%%", (Ë
¥o
);

105 
	`SåAŒocMC›y
(&
ªsu…
, "Wrôög (", 
p˘
, " o‡", 
buf
, ")", 
NULL
);

107 
b_wrôãn
 = 
	`HTReque°_byãsWrôãn
(
ªque°
);

108 * 
øw_wrôãn
 = 
öput
 ? (*Ëöpuà: 
NULL
;

109 i‡(
b_wrôãn
 > 0) {

110 
buf
[10];

111 
	`HTNumToSå
(
b_wrôãn
>0 ? b_wrôã¿: 0, 
buf
, 10);

112 
	`SåAŒocMC›y
(&
ªsu…
, "Wrôög ", 
buf
, "byãs", 
NULL
);

113 } i‡(
øw_wrôãn
 && *raw_written>0) {

114 
buf
[10];

115 
	`HTNumToSå
(*
øw_wrôãn
, 
buf
, 10);

116 
	`SåAŒocMC›y
(&
ªsu…
, "Wrôög ", 
buf
, "byãs", 
NULL
);

118 
	`SåAŒocC›y
(
ªsu…
, "Writing...");

124 
HT_PROG_DONE
:

125 
	`SåAŒocC›y
(
ªsu…
, "Done!");

128 
HT_PROG_INTERRUPT
:

129 
	`SåAŒocC›y
(
ªsu…
, "Interrupted!");

132 
HT_PROG_OTHER
:

133 
	`SåAŒocC›y
(
ªsu…
, "Working -Ölease wait...");

136 
HT_PROG_TIMEOUT
:

137 
	`SåAŒocC›y
(
ªsu…
, "RequestÅimeout - server didÇotÑespond.");

141 
	`SåAŒocC›y
(
ªsu…
, "UNKNOWN PROGRESS STATE");

144  
ªsu…
;

145 
	}
}

147 
PUBLIC
 * 
	$HTDülog_îr‹Mesßge
 (
HTReque°
 * 
ªque°
, 
HTAÀπOpcode
 
›
,

148 
msgnum
, c⁄° * 
dÁu…
,

149 * 
öput
)

151 
HTLi°
 * 
cur
 = (HTLi° *Ë
öput
;

152 
HTEº‹
 * 
¥es
;

153 
HTEº‹Show
 
showmask
 = 
	`HTEº‹_show
();

154 
HTChunk
 * 
msg
 = 
NULL
;

155 
code
;

156 i‡(!
ªque°
 || !
cur
Ë 
NULL
;

157 (
¥es
 = (
HTEº‹
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

158 
ödex
 = 
	`HTEº‹_ödex
(
¥es
);

159 i‡(
	`HTEº‹_doShow
(
¥es
)) {

160 i‡(!
msg
) {

161 
HTSevîôy
 
£vîôy
 = 
	`HTEº‹_£vîôy
(
¥es
);

162 
msg
 = 
	`HTChunk_√w
(128);

163 i‡(
£vîôy
 =
ERR_WARN
)

164 
	`HTChunk_puts
(
msg
, "Warning: ");

165 i‡(
£vîôy
 =
ERR_NON_FATAL
)

166 
	`HTChunk_puts
(
msg
, "Non Fatal Error: ");

167 i‡(
£vîôy
 =
ERR_FATAL
)

168 
	`HTChunk_puts
(
msg
, "Fatal Error: ");

169 i‡(
£vîôy
 =
ERR_INFO
)

170 
	`HTChunk_puts
(
msg
, "Information: ");

172 
	`HTChunk_puts
(
msg
, "UNKNOWN ERROR TYPE");

173  
	`HTChunk_toCSåög
(
msg
);

177 i‡((
code
 = 
HTEº‹s
[
ödex
].code) > 0) {

178 
buf
[10];

179 
	`•rötf
(
buf
, "%d ", 
code
);

180 
	`HTChunk_puts
(
msg
, 
buf
);

183 
	`HTChunk_puts
(
msg
, "\nReason: ");

185 i‡(
ödex
 =
HTERR_SYSTEM
) {

186 
Àngth
 = 0;

187 * 
∑rs
 = (*Ë
	`HTEº‹_∑ømëî
(
¥es
, &
Àngth
);

188 
	`HTChunk_puts
(
msg
, 
	`HTEº‹_loˇti⁄
(
¥es
));

189 
	`HTChunk_puts
(
msg
, " ");

190 
	`HTChunk_puts
(
msg
, 
HTEº‹s
[
ödex
].msg);

191 i‡(
Àngth
 && 
∑rs
) {

192 
	`HTChunk_puts
(
msg
, " (");

193 
	`HTChunk_puts
(
msg
, 
∑rs
);

194 
	`HTChunk_puts
(
msg
, ")");

200 
	`HTChunk_puts
(
msg
, 
HTEº‹s
[
ödex
].msg);

203 i‡(
showmask
 & 
HT_ERR_SHOW_PARS
) {

204 
Àngth
;

205 
˙t
;

206 *
∑rs
 = (*Ë
	`HTEº‹_∑ømëî
(
¥es
, &
Àngth
);

207 i‡(
Àngth
 && 
∑rs
) {

208 
	`HTChunk_puts
(
msg
, " (");

209 
˙t
=0; c¡<
Àngth
; cnt++) {

210 
ch
 = *(
∑rs
+
˙t
);

211 i‡(
ch
 < 0x20 || ch >= 0x7F)

212 
	`HTChunk_putc
(
msg
, '#');

214 
	`HTChunk_putc
(
msg
, 
ch
);

216 
	`HTChunk_puts
(
msg
, ") ");

221 i‡(
showmask
 & 
HT_ERR_SHOW_LOCATION
) {

222 
	`HTChunk_puts
(
msg
, "This occured in ");

223 
	`HTChunk_puts
(
msg
, 
	`HTEº‹_loˇti⁄
(
¥es
));

224 
	`HTChunk_putc
(
msg
, '\n');

232 
	`HTEº‹_£tIgn‹e
(
¥es
);

235 i‡(
showmask
 & 
HT_ERR_SHOW_FIRST
)

239  
	`HTChunk_toCSåög
(
msg
);

240 
	}
}

250 
PUBLIC
 
BOOL
 
	$HTProgªss
 (
HTReque°
 * 
ªque°
, 
HTAÀπOpcode
 
›
,

251 
msgnum
, c⁄° * 
dÁu…
, * 
öput
,

252 
HTAÀπP¨
 * 
ª∂y
)

254 * 
msg
 = 
	`HTDülog_¥ogªssMesßge
(
ªque°
, 
›
, 
msgnum
, 
dÁu…
, 
öput
);

255 i‡(
msg
) {

256 
	`HTPröt
("%s\n", 
msg
);

257 
	`HT_FREE
(
msg
);

259  
YES
;

260 
	}
}

262 
PUBLIC
 
BOOL
 
	$HTC⁄fúm
 (
HTReque°
 * 
ªque°
, 
HTAÀπOpcode
 
›
,

263 
msgnum
, c⁄° * 
dÁu…
, * 
öput
,

264 
HTAÀπP¨
 * 
ª∂y
)

266 
ª•⁄£
[4];

267 
	`HTPröt
("%s", 
HTDülogs
[
msgnum
]);

268 i‡(
öput
Ë
	`HTPröt
(" (%s)", (*) input);

269 
	`HTPröt
(" (y/n) ");

270 i‡(
	`fgës
(
ª•⁄£
, 4, 
°dö
)) {

271 *
±r
 = 
ª•⁄£
;

272 *
±r
) {

273 i‡(*
±r
 == '\n') {

274 *
±r
 = '\0';

277 *
±r
 = 
	`TOUPPER
(*ptr);

278 
±r
++;

280  (!
	`°rcmp
(
ª•⁄£
, "YES"Ë|| !°rcmp‘e•⁄£, "Y")Ë? 
YES
 : 
NO
;

282  
NO
;

283 
	}
}

288 
PUBLIC
 
BOOL
 
	$HTProm±
 (
HTReque°
 * 
ªque°
, 
HTAÀπOpcode
 
›
,

289 
msgnum
, c⁄° * 
dÁu…
, * 
öput
,

290 
HTAÀπP¨
 * 
ª∂y
)

292 
	`HTPröt
("%†", 
HTDülogs
[
msgnum
]);

293 i‡(
öput
Ë
	`HTPröt
(" (%s) ", (*) input);

294 i‡(
dÁu…
Ë
	`HTPröt
("(RETURN for [%s]) ", (*) dfault);

295 i‡(
ª∂y
 && 
msgnum
>=0) {

296 
buf„r
[200];

297 i‡(!
	`fgës
(
buf„r
, 200, 
°dö
)Ë 
NO
;

298 
buf„r
[
	`°æí
(buffer)-1] = '\0';

299 i‡(*
buf„r
)

300 
	`HTAÀπ_£tRïlyMesßge
(
ª∂y
, 
buf„r
);

301 i‡(
dÁu…
)

302 
	`HTAÀπ_£tRïlyMesßge
(
ª∂y
, (*Ë
dÁu…
);

304  
NO
;

305  
YES
;

307  
NO
;

308 
	}
}

313 
PUBLIC
 
BOOL
 
	$HTProm±Passw‹d
 (
HTReque°
 * 
ªque°
, 
HTAÀπOpcode
 
›
,

314 
msgnum
, c⁄° * 
dÁu…
, * 
öput
,

315 
HTAÀπP¨
 * 
ª∂y
)

317 i‡(
ª∂y
 && 
msgnum
>=0) {

318 #ifde‡
HAVE_GETPASS


319 * 
pw
 = (*Ë
	`gë∑ss
(
HTDülogs
[
msgnum
]);

320 i‡(
pw
Ë
	`HTAÀπ_£tRïlySe¸ë
(
ª∂y
,Öw);

321  
YES
;

327 
buf„r
[100];

328 
	`mem£t
(
buf„r
, '\0', 100);

329 
	`HTPröt
("%†", 
HTDülogs
[
msgnum
]);

330 i‡(!
	`fgës
(
buf„r
, 99, 
°dö
)Ë 
NO
;

331 
buf„r
[
	`°æí
(buffer)-1] = '\0';

332 i‡(*
buf„r
) {

333 
	`HTAÀπ_£tRïlySe¸ë
(
ª∂y
, 
buf„r
);

334  
YES
;

336  
NO
;

339  
NO
;

340 
	}
}

346 
PUBLIC
 
BOOL
 
	$HTProm±U£∫ameAndPassw‹d
 (
HTReque°
 * 
ªque°
, 
HTAÀπOpcode
 
›
,

347 
msgnum
, c⁄° * 
dÁu…
,

348 * 
öput
, 
HTAÀπP¨
 * 
ª∂y
)

350 
BOOL
 
°©us
 = 
	`HTProm±
(
ªque°
, 
›
, 
msgnum
, 
dÁu…
, 
öput
, 
ª∂y
);

351  
°©us
 ?

352 
	`HTProm±Passw‹d
(
ªque°
, 
›
, 
HT_MSG_PW
, 
dÁu…
, 
öput
, 
ª∂y
Ë: 
NO
;

353 
	}
}

362 
PUBLIC
 
BOOL
 
	$HTEº‹_¥öt
 (
HTReque°
 * 
ªque°
, 
HTAÀπOpcode
 
›
,

363 
msgnum
, c⁄° * 
dÁu…
, * 
öput
,

364 
HTAÀπP¨
 * 
ª∂y
)

366 * 
msg
 = 
	`HTDülog_îr‹Mesßge
(
ªque°
, 
›
, 
msgnum
, 
dÁu…
, 
öput
);

367 i‡(
msg
) {

368 
	`HTPröt
("%s\n", 
msg
);

369 
	`HT_FREE
(
msg
);

371  
YES
;

372 
	}
}

381 
PUBLIC
 
BOOL
 
	$HTEº‹_ª•⁄£
 (
HTReque°
 * 
ªque°
, 
HTAÀπOpcode
 
›
,

382 
msgnum
, c⁄° * 
dÁu…
, * 
öput
,

383 
HTAÀπP¨
 * 
ª∂y
)

385  
NO
;

386 
	}
}

	@Library/src/HTDialog.h

29 #i‚de‡
HTDIALOG_H


30 
	#HTDIALOG_H


	)

31 
	~"WWWLib.h
"

48 
	#HT_MSG_ENGLISH_INITIALIZER
 \

71 "Thê£rvî ha†£¡ youá cookõ -ác˚±?"

	)

83 
	#HTERR_ENGLISH_INITIALIZER
 \

168 { 0, "Autom©i¯¥oxyÑedúe˘i⁄ mu° bêex∂icôlyácknowÀdged", "öã∫Æ" }

	)

181 * 
HTDülog_îr‹Mesßge
 (
HTReque°
 * 
ªque°
, 
HTAÀπOpcode
 
›
,

182 
msgnum
, c⁄° * 
dÁu…
,

183 * 
öput
);

195 * 
HTDülog_¥ogªssMesßge
 (
HTReque°
 * 
ªque°
, 
HTAÀπOpcode
 
›
,

196 
msgnum
, c⁄° * 
dÁu…
,

197 * 
öput
);

217 
HTAÀπCÆlback
 
HTC⁄fúm
;

228 
HTAÀπCÆlback
 
HTProm±
;

242 
HTAÀπCÆlback
 
HTProm±Passw‹d
;

253 
HTAÀπCÆlback
 
HTProm±U£∫ameAndPassw‹d
;

263 
HTAÀπCÆlback
 
HTAÀπ
;

277 
HTAÀπCÆlback
 
HTProgªss
;

292 
HTAÀπCÆlback
 
HTEº‹_¥öt
;

305 
BOOL
 
HTEº‹_ª•⁄£
 (
HTReque°
 * 
ªque°
, 
HTAÀπOpcode
 
›
,

306 
msgnum
, c⁄° * 
dÁu…
, * 
öput
,

307 
HTAÀπP¨
 * 
ª∂y
);

	@Library/src/HTDigest.c

22 
	~"wwwsys.h
"

23 
	~"WWWLib.h
"

24 
	~"HTDige°.h
"

26 
PUBLIC
 
BOOL
 
	$HTDige°_öô
 (
HTDige°C⁄ãxt
 *
c⁄ãxt
, 
dige°ty≥
)

28 
c⁄ãxt
->
Æg‹ôhm
 = 
dige°ty≥
;

30 
dige°ty≥
) {

31 
HTDaMD5
:

32 
	`MD5Inô
 (&
c⁄ãxt
->c⁄ãxt.
md5
);

35  
NO
;

38  
YES
;

39 
	}
}

41 
PUBLIC
 
BOOL
 
	$HTDige°_upd©e
 (
HTDige°C⁄ãxt
 *
c⁄ãxt
, *
öput
, 
öputLí
)

43 i‡(
c⁄ãxt
) {

44 
c⁄ãxt
->
Æg‹ôhm
) {

45 
HTDaMD5
:

46 
	`MD5Upd©e
 (&
c⁄ãxt
->c⁄ãxt.
md5
, (*Ë
öput
,

47 
öputLí
);

50  
NO
;

53  
YES
;

55  
NO
;

56 
	}
}

58 
PUBLIC
 
BOOL
 
	$HTDige°_föÆ
 (*
dige°
, 
HTDige°C⁄ãxt
 *
c⁄ãxt
)

60 i‡(
c⁄ãxt
) {

61 
c⁄ãxt
->
Æg‹ôhm
) {

62 
HTDaMD5
:

63 
	`MD5FöÆ
 (
dige°
, &
c⁄ãxt
->c⁄ãxt.
md5
);

66  
NO
;

69  
YES
;

71  
NO
;

72 
	}
}

	@Library/src/HTDigest.h

37 #i‚de‡
HTDige°_H


38 
	#HTDige°_H


	)

40 
	~"WWWLib.h
"

42 
	~"md5.h
"

52 
	#HTDaMD5
 1

	)

60 
	s_HTDige°C⁄ãxt
 {

61 
	mÆg‹ôhm
;

63 
MD5_CTX
 
	mmd5
;

64 } 
	mc⁄ãxt
;

65 } 
	tHTDige°C⁄ãxt
;

72 
BOOL
 
HTDige°_öô
 (
HTDige°C⁄ãxt
 *
c⁄ãxt
, 
dige°ty≥
);

73 
BOOL
 
HTDige°_upd©e
 (
HTDige°C⁄ãxt
 *
c⁄ãxt
, *
öput
, 
öputLí
);

74 
BOOL
 
HTDige°_föÆ
 (*
dige°
, 
HTDige°C⁄ãxt
 *
c⁄ãxt
);

	@Library/src/HTDir.c

23 
	~"wwwsys.h
"

24 
	~"WWWUtû.h
"

25 
	~"WWWC‹e.h
"

26 
	~"WWWFûe.h
"

27 
	~"WWWHTML.h
"

28 
	~"HTIc⁄s.h
"

29 
	~"HTDes˝t.h
"

30 
	~"HTDú.h
"

33 
	#PUTC
(
c
Ë(*
èrgë
->
iß
->
put_ch¨a˘î
)—¨gë, c)

	)

34 
	#PUTS
(
s
Ë(*
èrgë
->
iß
->
put_°rög
)—¨gë, s)

	)

35 
	#START
(
e
Ë(*
èrgë
->
iß
->
°¨t_ñemít
)—¨gë,É, 0, 0)

	)

36 
	#END
(
e
Ë(*
èrgë
->
iß
->
íd_ñemít
)—¨gë,É)

	)

37 
	#FREE_TARGET
 (*
èrgë
->
iß
->
_‰ì
)—¨gë)

	)

39 
	#DEFAULT_MINFW
 15

	)

40 
	#DEFAULT_MAXFW
 25

	)

44 
	s_HTSåu˘uªd
 {

45 c⁄° 
HTSåu˘uªdCœss
 * 
	miß
;

49 
	s_HTDú
 {

50 
HTSåu˘uªd
 * 
	mèrgë
;

51 
HTReque°
 * 
	mªque°
;

52 
HTAºay
 * 
	m¨øy
;

53 * 
	m‚buf
;

54 * 
	m buf
;

55 * 
	mba£
;

56 
HTDúShow
 
	mshow
;

57 
HTDúKey
 
	mkey
;

58 
	msize
;

59 
	mcurfw
;

62 
	s_HTDúNode
 {

63 * 
	m‚ame
;

64 * 
	md©e
;

65 * 
	msize
;

66 * 
	mnŸe
;

67 
HTFûeMode
 
	mmode
;

68 } 
	tHTDúNode
;

70 
	e_HTShowLígth
 {

71 
	mHT_DLEN_SIZE
 = 6,

72 
	mHT_DLEN_DATE
 = 15,

73 
	mHT_DLEN_SPACE
 = 1,

74 
	mHT_DLEN_DES
 = 25

75 } 
	tHTShowLígth
;

77 
PRIVATE
 
	gMöFûeW
 = 
DEFAULT_MINFW
;

78 
PRIVATE
 
	gMaxFûeW
 = 
DEFAULT_MAXFW
;

88 
PRIVATE
 
	$Le·Så
 (**
out°r
, * 
ö°r
, 
l
)

90 *
out
 = *
out°r
;

91 
l
-- > 0 && *
ö°r
 && (*
out
++ = *instr++));

92 
l
-- > 0Ë*
out
++ = ' ';

93 *
out°r
 = 
out
;

94 
	}
}

100 
PRIVATE
 
	$RightSå
 (**
out°r
, * 
ö°r
, 
l
)

102 *
°¨t
 = *
out°r
+
l
-
	`°æí
(
ö°r
);

103 *
out
 = *
out°r
;

104 
out
<
°¨t
) *out++ = ' ';

105 *
ö°r
 && (*
out
++ = *instr++));

106 *
out°r
 = 
out
;

107 
	}
}

116 
PRIVATE
 
HTDúNode
 * 
	$HTDúNode_√w
 ()

118 
HTDúNode
 *
node
;

119 i‡((
node
 = (
HTDúNode
 *Ë
	`HT_CALLOC
(1, (HTDúNode))Ë=
NULL
)

120 
	`HT_OUTOFMEM
("HTDirNode_new");

121  
node
;

122 
	}
}

127 
PRIVATE
 
BOOL
 
	$HTDúNode_‰ì
 (
HTDúNode
 *
node
)

129 i‡(
node
) {

130 
	`HT_FREE
(
node
->
‚ame
);

131 
	`HT_FREE
(
node
->
d©e
);

132 
	`HT_FREE
(
node
->
size
);

133 
	`HT_FREE
(
node
->
nŸe
);

134 
	`HT_FREE
(
node
);

135  
YES
;

137  
NO
;

138 
	}
}

143 
PRIVATE
 * 
	$ex∑nd_«me
 (* 
«me
, 
HTFûeMode
 
mode
)

145 * 
esˇ≥d
 = 
	`HTEsˇ≥
(
«me
, 
URL_XPALPHAS
);

146 i‡(
mode
 =
HT_IS_DIR
)

147 i‡(*(
«me
+
	`°æí
“ame)-1Ë!'/'Ë
	`SåAŒocC©
(
esˇ≥d
, "/");

148  
esˇ≥d
;

149 
	}
}

155 
PRIVATE
 
BOOL
 
	$HTDúNode_¥öt
 (
HTDú
 *
dú
, 
HTDúNode
 *
node
)

157 *
ç
 = 
NULL
;

158 
HTSåu˘uªd
 *
èrgë
 = 
dú
->target;

159 i‡(
dú
->
show
 & 
HT_DS_ICON
) {

160 
HTF‹m©
 
f‹m©
 = 
NULL
;

161 
HTEncodög
 
ícodög
 = 
NULL
;

162 
q
=1.0;

163 
HTIc⁄Node
 * 
ic⁄
;

164 i‡(
node
->
mode
 =
HT_IS_FILE
)

165 
	`HTBöd_gëF‹m©
(
node
->
‚ame
, &
f‹m©
, &
ícodög
, 
NULL
, NULL, &
q
);

166 
ic⁄
 = 
	`HTIc⁄_föd
(
node
->
mode
, 
f‹m©
, 
ícodög
);

169 i‡(!(
dú
->
show
 & 
HT_DS_HOTI
)) {

170 i‡(
ic⁄
) {

171 * 
Æt
 = 
	`HTIc⁄_Æã∫©ive
(
ic⁄
, 
YES
);

172 
	`HTMLPutImg
(
èrgë
, 
	`HTIc⁄_uæ
(
ic⁄
), 
Æt
, 
NULL
);

173 
	`HT_FREE
(
Æt
);

174 
	`PUTC
(' ');

179 i‡(
dú
->
ba£
) {

180 *
esˇ≥d
 = 
	`ex∑nd_«me
(
node
->
‚ame
,Çode->
mode
);

181 *
fuŒ
;

182 i‡((
fuŒ
 = (*Ë
	`HT_MALLOC
(
	`°æí
(
esˇ≥d
)+°æí(
dú
->
ba£
)+1)Ë=
NULL
)

183 
	`HT_OUTOFMEM
("HTDirNode_print");

184 
	`°r˝y
(
fuŒ
, 
dú
->
ba£
);

185 
	`°rˇt
(
fuŒ
, 
esˇ≥d
);

186 
	`HTSèπAnch‹
(
èrgë
, 
NULL
, 
fuŒ
);

187 
	`HT_FREE
(
esˇ≥d
);

188 
	`HT_FREE
(
fuŒ
);

190 *
esˇ≥d
 = 
	`ex∑nd_«me
(
node
->
‚ame
,Çode->
mode
);

191 
	`HTSèπAnch‹
(
èrgë
, 
NULL
, 
esˇ≥d
);

192 
	`HT_FREE
(
esˇ≥d
);

195 i‡(
dú
->
show
 & 
HT_DS_HOTI
) {

196 * 
Æt
 = 
	`HTIc⁄_Æã∫©ive
(
ic⁄
, 
YES
);

197 
	`HTMLPutImg
(
èrgë
, 
	`HTIc⁄_uæ
(
ic⁄
), 
Æt
, 
NULL
);

198 
	`PUTC
(' ');

201 i‡(
dú
->
ba£
) {

202 *
esˇ≥d
 = 
	`ex∑nd_«me
(
node
->
‚ame
,Çode->
mode
);

203 *
fuŒ
;

204 i‡((
fuŒ
 = (*Ë
	`HT_MALLOC
(
	`°æí
(
esˇ≥d
)+°æí(
dú
->
ba£
)+1)Ë=
NULL
)

205 
	`HT_OUTOFMEM
("HTDirNode_print");

206 
	`°r˝y
(
fuŒ
, 
dú
->
ba£
);

207 
	`°rˇt
(
fuŒ
, 
esˇ≥d
);

208 
	`HTSèπAnch‹
(
èrgë
, 
NULL
, 
esˇ≥d
);

209 
	`HT_FREE
(
esˇ≥d
);

210 
	`HT_FREE
(
fuŒ
);

212 *
esˇ≥d
 = 
	`HTEsˇ≥
(
node
->
‚ame
, 
URL_XPALPHAS
);

213 
	`HTSèπAnch‹
(
èrgë
, 
NULL
, 
esˇ≥d
);

214 
	`HT_FREE
(
esˇ≥d
);

220 *
ö
 = 
node
->
‚ame
;

221 *
out
 = 
dú
->
‚buf
;

222 
l
 = 
dú
->
curfw
;

223 
l
-- > 0 && *
ö
 && (*
out
++ = *in++));

224 i‡(*
ö
)

225 *(
out
-1) = '>';

226 i‡(
node
->
mode
 =
HT_IS_DIR
) {

227 *
out
++ = '/';

228 
l
--;

230 *
out
 = '\0';

231 
	`PUTS
(
dú
->
‚buf
);

232 
	`END
(
HTML_A
);

233 
out
 = 
dú
->
‚buf
;

234 
l
-- >0Ë*
out
++ = ' ';

235 
	`Le·Så
(&
out
, " ", 
HT_DLEN_SPACE
);

236 *
out
 = '\0';

237 
	`PUTS
(
dú
->
‚buf
);

241 
ç
 = 
dú
->
 buf
;

242 i‡(
node
->
d©e
) {

243 
	`RightSå
(&
ç
, 
node
->
d©e
, 
HT_DLEN_DATE
);

244 
	`Le·Så
(&
ç
, " ", 
HT_DLEN_SPACE
);

246 i‡(
node
->
size
) {

247 
	`RightSå
(&
ç
, 
node
->
size
, 
HT_DLEN_SIZE
);

248 
	`Le·Så
(&
ç
, " ", 
HT_DLEN_SPACE
);

250 i‡(
node
->
nŸe
) {

251 
	`Le·Så
(&
ç
, 
node
->
nŸe
, 
HT_DLEN_DES
);

252 
	`Le·Så
(&
ç
, " ", 
HT_DLEN_SPACE
);

254 *
ç
 = '\0';

255 
	`PUTS
(
dú
->
 buf
);

256 
	`PUTC
('\n');

257  
YES
;

258 
	}
}

269 
PRIVATE
 
BOOL
 
	$HTDú_hódLöe
 (
HTDú
 *
dú
)

271 i‡(
dú
) {

272 *
ç
;

273 
HTSåu˘uªd
 *
èrgë
 = 
dú
->target;

274 
	`START
(
HTML_PRE
);

275 i‡(
dú
->
show
 & 
HT_DS_ICON
) {

276 
HTIc⁄Node
 * 
ic⁄
 = 
	`HTIc⁄_föd
(
HT_IS_BLANK
, 
NULL
, NULL);

277 i‡(
ic⁄
) {

278 * 
Æt
 = 
	`HTIc⁄_Æã∫©ive
(
ic⁄
, 
NO
);

279 
	`HTMLPutImg
(
èrgë
, 
	`HTIc⁄_uæ
(
ic⁄
), 
Æt
, 
NULL
);

280 
	`HT_FREE
(
Æt
);

281 
	`PUTC
(' ');

285 
ç
 = 
dú
->
‚buf
;

286 
	`Le·Så
(&
ç
, "Name", 
dú
->
curfw
);

287 
	`Le·Så
(&
ç
, " ", 
HT_DLEN_SPACE
);

288 *
ç
 = '\0';

289 
	`PUTS
(
dú
->
‚buf
);

291 
ç
 = 
dú
->
 buf
;

292 i‡(
dú
->
show
 & 
HT_DS_DATE
) {

293 
	`Le·Så
(&
ç
, "La° Modifõd", 
HT_DLEN_DATE
);

294 
	`Le·Så
(&
ç
, " ", 
HT_DLEN_SPACE
);

296 i‡(
dú
->
show
 & 
HT_DS_SIZE
) {

297 
	`RightSå
(&
ç
, "Size", 
HT_DLEN_SIZE
);

298 
	`Le·Så
(&
ç
, " ", 
HT_DLEN_SPACE
);

300 i‡(
dú
->
show
 & 
HT_DS_DES
) {

301 
	`Le·Så
(&
ç
, "Des¸ùti⁄", 
HT_DLEN_DATE
);

302 
	`Le·Så
(&
ç
, " ", 
HT_DLEN_SPACE
);

304 *
ç
 = '\0';

305 
	`PUTS
(
dú
->
 buf
);

306 
	`END
(
HTML_PRE
);

307 
	`START
(
HTML_HR
);

308 
	`START
(
HTML_PRE
);

309  
YES
;

311  
NO
;

312 
	}
}

320 
PUBLIC
 
BOOL
 
	$HTDú_£tWidth
 (
möfûe
, 
maxfûe
)

322 
MöFûeW
 = (
möfûe
>=0) ? minfile : 0;

323 
MaxFûeW
 = (
maxfûe
>
möfûe
) ? maxfile : minfile+1;

324  
YES
;

325 
	}
}

332 
PUBLIC
 
HTDú
 * 
	$HTDú_√w
 (
HTReque°
 * 
ªque°
, 
HTDúShow
 
show
, 
HTDúKey
 
key
)

334 
HTDú
 *
dú
;

335 *
tôÀ
 = 
NULL
;

336 i‡(!
ªque°
Ë 
NULL
;

339 i‡((
dú
 = (
HTDú
 *Ë
	`HT_CALLOC
(1,  (HTDú))Ë=
NULL
 ||

340 (
dú
->
‚buf
 = (*Ë
	`HT_MALLOC
(
MaxFûeW
+
HT_DLEN_SPACE
)Ë=
NULL
)

341 
	`HT_OUTOFMEM
("HTDir_new");

342 
dú
->
èrgë
 = 
	`HTMLGíî©‹
(
ªque°
, 
NULL
, 
WWW_HTML
,

343 
	`HTReque°_ouçutF‹m©
(
ªque°
),

344 
	`HTReque°_ouçutSåóm
(
ªque°
));

345 
	`HTReque°_£tOuçutC⁄√˘ed
(
ªque°
, 
YES
);

346 
	`HTAnch‹_£tF‹m©
(
	`HTReque°_™ch‹
(
ªque°
), 
WWW_HTML
);

347 
dú
->
ªque°
 =Ñequest;

348 
dú
->
show
 = show;

349 
dú
->
key
 = key;

350 i‡(
key
==
HT_DK_NONE
)

351 
dú
->
curfw
 = 
MaxFûeW
;

353 
dú
->
curfw
 = 
MöFûeW
;

354 
dú
->
¨øy
 = 
	`HTAºay_√w
(256);

358 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_INFO
, 
NO
, 
HTERR_OK
, 
NULL
, 0, "HTDir_new");

362 
Àn
 = 
HT_DLEN_SPACE
+1;

363 i‡(
show
 & 
HT_DS_SIZE
Ë
Àn
 +(
HT_DLEN_SIZE
+
HT_DLEN_SPACE
);

364 i‡(
show
 & 
HT_DS_DATE
Ë
Àn
 +(
HT_DLEN_DATE
+
HT_DLEN_SPACE
);

365 i‡(
show
 & 
HT_DS_DES
Ë
Àn
 +
HT_DLEN_DES
;

366 i‡((
dú
->
 buf
 = (*Ë
	`HT_MALLOC
(
Àn
)Ë=
NULL
)

367 
	`HT_OUTOFMEM
("HTDir_new");

372 *
addr
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
	`HTReque°_™ch‹
(
ªque°
));

373 *
∑th
 = 
	`HTP¨£
(
addr
, "", 
PARSE_PATH
+
PARSE_PUNCTUATION
);

374 *
±r
;

375 i‡((
±r
 = 
	`°rchr
(
∑th
, ';')) || (ptr = strchr(path, '?')))

376 *
±r
 = '\0';

377 
	`SåAŒocC›y
(
tôÀ
, 
∑th
);

378 
	`HTUnEsˇ≥
(
tôÀ
);

379 if((
±r
=
	`°ºchr
(
∑th
, '/')Ë&& (±r<∑th+
	`°æí
(path)-1 ||Ötr==path)){

380 
	`SåAŒocC›y
(
dú
->
ba£
, ++
±r
);

381 
	`SåAŒocC©
(
dú
->
ba£
, "/");

383 
	`HTTRACE
(
PROT_TRACE
, "HTDú_√w... ba£ i†`%s\'\n" 
_
 
dú
->
ba£
 ? dir->base : "");

384 
	`HT_FREE
(
addr
);

385 
	`HT_FREE
(
∑th
);

390 
HTSåu˘uªd
 *
èrgë
 = 
dú
->target;

391 
	`START
(
HTML_HTML
);

392 
	`START
(
HTML_HEAD
);

393 
	`START
(
HTML_TITLE
);

394 
	`PUTS
("Current index is ");

395 
	`PUTS
(
tôÀ
);

396 
	`END
(
HTML_TITLE
);

397 
	`END
(
HTML_HEAD
);

398 
	`START
(
HTML_BODY
);

399 
	`START
(
HTML_H1
);

400 
	`PUTS
("Index of ");

401 
	`PUTS
(
tôÀ
);

402 
	`END
(
HTML_H1
);

404 
	`HT_FREE
(
tôÀ
);

405  
dú
;

406 
	}
}

414 
PUBLIC
 
BOOL
 
	$HTDú_addEÀmít
 (
HTDú
 *
dú
, *
«me
, *
d©e
, *
size
,

415 
HTFûeMode
 
mode
)

417 
HTDúNode
 *
node
 = 
	`HTDúNode_√w
();

418 i‡(!
dú
 || !
«me
Ë 
NO
;

419 i‡((
node
->
‚ame
 = (*Ë
	`HT_MALLOC
(
	`°æí
(
«me
Ë+ 2)Ë=
NULL
)

420 
	`HT_OUTOFMEM
("HTDir_addElement");

421 
	`°r˝y
(
node
->
‚ame
, 
«me
);

422 i‡(
dú
->
show
 & 
HT_DS_DATE
 && 
d©e
Ë
	`SåAŒocC›y
(
node
->date, date);

423 i‡(
dú
->
show
 & 
HT_DS_SIZE
 && 
size
Ë
	`SåAŒocC›y
(
node
->size, size);

424 i‡(
dú
->
show
 & 
HT_DS_DES
) {

434 
node
->
mode
 = mode;

437 i‡(
dú
->
key
 =
HT_DK_NONE
) {

438 i‡(!
dú
->
size
++Ë
	`HTDú_hódLöe
(dir);

439 
	`HTDúNode_¥öt
(
dú
, 
node
);

440 
	`HTDúNode_‰ì
(
node
);

442 
¶í
 = 
	`°æí
(
«me
);

443 i‡(
¶í
 > 
dú
->
curfw
)

444 
dú
->
curfw
 = 
¶í
 < 
MaxFûeW
 ? slen : MaxFileW;

445 
	`HTAºay_addObje˘
(
dú
->
¨øy
, (*Ë
node
);

447  
YES
;

448 
	}
}

450 
PRIVATE
 
	$DúS‹t
 (c⁄° *
a
, c⁄° *
b
)

453 
HTDúNode
 *
Ø
 = *(HTDúNodê**Ë
a
;

454 
HTDúNode
 *
bb
 = *(HTDúNodê**Ë
b
;

455  
	`°rcmp
(
Ø
->
‚ame
, 
bb
->fname);

457  
	`°rcmp
((*((
HTDúNode
 **Ë
a
))->
‚ame
,

458 (*((
HTDúNode
 **Ë
b
))->
‚ame
);

460 
	}
}

462 
PRIVATE
 
	$DúCa£S‹t
 (c⁄° *
a
, c⁄° *
b
)

465 
HTDúNode
 *
Ø
 = *(HTDúNodê**Ë
a
;

466 
HTDúNode
 *
bb
 = *(HTDúNodê**Ë
b
;

467  
	`°rˇ£comp
(
Ø
->
‚ame
, 
bb
->fname);

469  
	`°rˇ£comp
((*((
HTDúNode
 **Ë
a
))->
‚ame
,

470 (*((
HTDúNode
 **Ë
b
))->
‚ame
);

472 
	}
}

479 
PUBLIC
 
BOOL
 
	$HTDú_‰ì
 (
HTDú
 * 
dú
)

481 i‡(!
dú
Ë 
NO
;

482 i‡(
dú
->
key
 !
HT_DK_NONE
) {

483 
HTAºay
 *
¨øy
 = 
dú
->array;

484 **
d©a
;

485 
HTDúNode
 *
node
;

486 
	`HTDú_hódLöe
(
dú
);

487 
	`HTAºay_s‹t
(
¨øy
, (
dú
->
key
==
HT_DK_CINS
 ? 
DúCa£S‹t
 : 
DúS‹t
));

488 
node
 = (
HTDúNode
 *Ë
	`HTAºay_fú°Obje˘
(
¨øy
, 
d©a
);

489 
node
) {

490 
	`HTDúNode_¥öt
(
dú
, 
node
);

491 
	`HTDúNode_‰ì
(
node
);

492 
node
 = (
HTDúNode
 *Ë
	`HTAºay_√xtObje˘
(
¨øy
, 
d©a
);

494 
dú
->
size
 = 
	`HTAºay_size
(
¨øy
);

495 
	`HTAºay_dñëe
(
¨øy
);

500 
HTSåu˘uªd
 *
èrgë
 = 
dú
->target;

501 
	`END
(
HTML_PRE
);

502 
	`START
(
HTML_HR
);

503 
	`START
(
HTML_PRE
);

504 i‡(!
dú
->
size
)

505 
	`PUTS
("Empty directory");

506 i‡(
dú
->
size
 == 1)

507 
	`PUTS
("1 File");

509 
buf„r
[20];

510 
	`•rötf
(
buf„r
, "%u fûes", 
dú
->
size
);

511 
	`PUTS
(
buf„r
);

513 
	`END
(
HTML_PRE
);

514 
	`END
(
HTML_BODY
);

515 
	`END
(
HTML_HTML
);

516 
FREE_TARGET
;

519 
	`HT_FREE
(
dú
->
‚buf
);

520 
	`HT_FREE
(
dú
->
 buf
);

521 
	`HT_FREE
(
dú
->
ba£
);

522 
	`HT_FREE
(
dú
);

523  
YES
;

524 
	}
}

	@Library/src/HTDir.h

30 #i‚de‡
HTDIR_H


31 
	#HTDIR_H


	)

32 
	~"HTReq.h
"

33 
	~"HTIc⁄s.h
"

46 
	e_HTDúShow
 {

47 
	mHT_DS_SIZE
 = 0x1,

48 
	mHT_DS_DATE
 = 0x2,

49 
	mHT_DS_HID
 = 0x4,

50 
	mHT_DS_DES
 = 0x8,

51 
	mHT_DS_ICON
 = 0x10,

52 
	mHT_DS_HOTI
 = 0x20

53 } 
	tHTDúShow
;

55 
	e_HTDúKey
 {

56 
	mHT_DK_NONE
 = 0,

57 
	mHT_DK_CSEN
 = 1,

58 
	mHT_DK_CINS
 = 2

59 } 
	tHTDúKey
;

72 
BOOL
 
HTDú_£tWidth
 (
möfûe
, 
maxfûe
);

91 
BOOL
 
HTDú_£tWidth
 (
möfûe
, 
maxfûe
);

102 
_HTDú
 
	tHTDú
;

104 
HTDú
 * 
HTDú_√w
 (
HTReque°
 * 
ªque°
, 
HTDúShow
 
show
, 
HTDúKey
 
key
);

115 
BOOL
 
HTDú_addEÀmít
 (
HTDú
 *
dú
, *
«me
, *
d©e
,

116 *
size
, 
HTFûeMode
 
mode
);

127 
BOOL
 
HTDú_‰ì
 (
HTDú
 * 
dú
);

	@Library/src/HTEPtoCl.c

19 
	~"wwwsys.h
"

20 
	~"HTUtûs.h
"

21 
	~"HTSåóm.h
"

23 
PUBLIC
 
	$HTCÆlClõ¡
 (
HTSåóm
 * 
me
)

26 
	}
}

	@Library/src/HTEPtoCl.h

32 #i‚de‡
HTEPTOCLIENT_H


33 
	#HTEPTOCLIENT_H


	)

35 
	~"HTSåóm.h
"

36 
	~"HTXP¨£.h
"

38 
CÆlClõ¡
 
HTCÆlClõ¡
;

	@Library/src/HTError.c

19 
	~"wwwsys.h
"

20 
	~"WWWUtû.h
"

21 
	~"HTI√t.h
"

22 
	~"HTEº‹.h
"

24 
	s_HTEº‹
 {

25 
HTEº‹EÀmít
 
	mñemít
;

26 
HTSevîôy
 
	m£vîôy
;

27 
BOOL
 
	mign‹e
;

28 * 
	m∑r
;

29 
	mÀngth
;

30 * 
	mwhîe
;

33 
PRIVATE
 
HTEº‹Show
 
	gHTShowMask
 = 
HT_ERR_SHOW_DEFAULT
;

47 
PUBLIC
 
BOOL
 
	$HTEº‹_add
 (
HTLi°
 * 
li°
,

48 
HTSevîôy
 
£vîôy
,

49 
BOOL
 
ign‹e
,

50 
ñemít
,

51 * 
∑r
,

52 
Àngth
,

53 * 
whîe
)

55 
HTEº‹
 *
√wEº‹
;

56 i‡(!
li°
Ë 
NO
;

57 i‡((
√wEº‹
 = (
HTEº‹
 *Ë
	`HT_CALLOC
(1, (HTEº‹))Ë=
NULL
)

58 
	`HT_OUTOFMEM
("HTError_add");

59 
√wEº‹
->
ñemít
 = (
HTEº‹EÀmít
)Élement;

60 
√wEº‹
->
£vîôy
 = severity;

61 
√wEº‹
->
ign‹e
 = ignore;

62 i‡(
∑r
) {

63 i‡(!
Àngth
ËÀngth = (Ë
	`°æí
((*Ë
∑r
);

64 i‡((
√wEº‹
->
∑r
 = 
	`HT_MALLOC
(
Àngth
+1)Ë=
NULL
)

65 
	`HT_OUTOFMEM
("HTErrorError");

66 
	`mem˝y
(
√wEº‹
->
∑r
,Ö¨, 
Àngth
);

67 *(((*Ë
√wEº‹
->
∑r
)+
Àngth
) = '\0';

68 
√wEº‹
->
Àngth
 =Üength;

70 
√wEº‹
->
whîe
 = where;

71 
	`HTTRACE
(
CORE_TRACE
, "Eº‹....... Add %3d\tSevîôy: %d\tP¨amëî: `%s\'\tWhîe: `%s\'\n" 
_


72 
ñemít
 
_


73 
√wEº‹
->
£vîôy
 
_


74 
√wEº‹
->
∑r
 ? (*Ë√wEº‹->∑∏: "Un•ecifõd" 
_


75 
√wEº‹
->
whîe
 ?ÇewError->where : "Unspecified");

76  
	`HTLi°_addObje˘
(
li°
, (*Ë
√wEº‹
);

77 
	}
}

88 
PUBLIC
 
BOOL
 
	$HTEº‹_addSy°em
 (
HTLi°
 * 
li°
,

89 
HTSevîôy
 
£vîôy
,

90 
îr‹numbî
,

91 
BOOL
 
ign‹e
,

92 * 
sysˇŒ
)

94 
BOOL
 
°©us
 = 
NO
;

95 i‡(
li°
) {

96 * 
îrsysmsg
 = 
	`HTEºnoSåög
(
îr‹numbî
);

97 
°©us
 = 
	`HTEº‹_add
(
li°
, 
£vîôy
, 
ign‹e
, 
HTERR_SYSTEM
,

98 
îrsysmsg
,Éºsysmsg ? (Ë
	`°æí
(errsysmsg) : 0,

99 
sysˇŒ
 ? syscall : "unknown");

100 
	`HT_FREE
(
îrsysmsg
);

102  
°©us
;

103 
	}
}

109 
PUBLIC
 
BOOL
 
	$HTEº‹_dñëeAŒ
 (
HTLi°
 * 
li°
)

111 i‡(
li°
) {

112 
HTLi°
 *
cur
 = 
li°
;

113 
HTEº‹
 *
¥es
;

114 (
¥es
 = (
HTEº‹
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

115 
	`HT_FREE
(
¥es
->
∑r
);

116 
	`HT_FREE
(
¥es
);

118 
	`HTLi°_dñëe
(
li°
);

119  
YES
;

121  
NO
;

122 
	}
}

129 
PUBLIC
 
BOOL
 
	$HTEº‹_dñëeLa°
 (
HTLi°
 * 
li°
)

131 i‡(
li°
) {

132 
HTEº‹
 * 
ﬁd
 = (HTEº‹ *Ë
	`HTLi°_ªmoveLa°Obje˘
(
li°
);

133 i‡(
ﬁd
) {

134 
	`HTTRACE
(
CORE_TRACE
, "Eº‹....... Dñëê%p\n" 
_
 
ﬁd
);

135 
	`HT_FREE
(
ﬁd
->
∑r
);

136 
	`HT_FREE
(
ﬁd
);

137  
YES
;

140  
NO
;

141 
	}
}

148 
PUBLIC
 
BOOL
 
	$HTEº‹_ign‹eLa°
 (
HTLi°
 * 
li°
)

150 i‡(
li°
) {

151 
HTEº‹
 * 
œ°
 = (HTEº‹ *Ë
	`HTLi°_œ°Obje˘
(
li°
);

152 i‡(
œ°
) {

153 
	`HTTRACE
(
CORE_TRACE
, "Eº‹....... Ign‹ê%p\n" 
_
 
œ°
);

154 
œ°
->
ign‹e
 = 
YES
;

155  
YES
;

158  
NO
;

159 
	}
}

164 
PUBLIC
 
BOOL
 
	$HTEº‹_£tIgn‹e
 (
HTEº‹
 * 
öfo
)

166 i‡(
öfo
) {

167 
öfo
->
ign‹e
 = 
YES
;

168  
YES
;

170  
NO
;

171 
	}
}

176 
PUBLIC
 
HTEº‹Show
 
	$HTEº‹_show
 ()

178  
HTShowMask
;

179 
	}
}

181 
PUBLIC
 
BOOL
 
	$HTEº‹_£tShow
 (
HTEº‹Show
 
mask
)

183 
HTShowMask
 = 
mask
;

184  
YES
;

185 
	}
}

190 
PUBLIC
 
BOOL
 
	$HTEº‹_doShow
 (
HTEº‹
 *
öfo
)

192  (
öfo
 && ((
HTShowMask
 & info->
£vîôy
) &&

193 (!
öfo
->
ign‹e
 || 
HTShowMask
 & 
HT_ERR_SHOW_IGNORE
)));

194 
	}
}

199 
PUBLIC
 
HTSevîôy
 
	$HTEº‹_£vîôy
 (
HTEº‹
 *
öfo
)

201  
öfo
 ? info->
£vîôy
 : 
ERR_UNKNOWN
;

202 
	}
}

208 
PUBLIC
 
BOOL
 
	$HTEº‹_hasSevîôy
 (
HTLi°
 * 
li°
, 
HTSevîôy
 
£vîôy
)

210 i‡(
li°
) {

211 
HTLi°
 * 
cur
 = 
li°
;

212 
HTEº‹
 * 
¥es
;

213 (
¥es
 = (
HTEº‹
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

214 i‡(
¥es
->
£vîôy
 < severity) {

215 
	`HTTRACE
(
CORE_TRACE
, "Severity.... Foundá severeÉrror\n");

216  
YES
;

220  
NO
;

221 
	}
}

223 
PUBLIC
 
	$HTEº‹_ödex
 (
HTEº‹
 * 
öfo
)

225  
öfo
 ? info->
ñemít
 : 
HTERR_INTERNAL
;

226 
	}
}

228 
PUBLIC
 * 
	$HTEº‹_∑ømëî
 (
HTEº‹
 * 
öfo
, * 
Àngth
)

230 i‡(
öfo
) {

231 *
Àngth
 = 
öfo
->length;

232  
öfo
->
∑r
;

234  
NULL
;

235 
	}
}

237 
PUBLIC
 c⁄° * 
	$HTEº‹_loˇti⁄
 (
HTEº‹
 * 
öfo
)

239  
öfo
 ? info->
whîe
 : 
NULL
;

240 
	}
}

	@Library/src/HTError.h

33 #i‚de‡
HTERROR_H


34 
	#HTERROR_H


	)

36 
_HTEº‹
 
	tHTEº‹
;

38 
	e_HTSevîôy
 {

39 
	mERR_UNKNOWN
 = 0x0,

40 
	mERR_FATAL
 = 0x1,

41 
	mERR_NON_FATAL
 = 0x2,

42 
	mERR_WARN
 = 0x4,

43 
	mERR_INFO
 = 0x8

44 } 
	tHTSevîôy
;

46 
	~"HTReq.h
"

61 
	s_HTEº‹Mesßge
 {

62 
	mcode
;

63 * 
	mmsg
;

64 * 
	muæ
;

65 } 
	tHTEº‹Mesßge
;

82 
	e_HTEº‹EÀmít
 {

83 
	mHTERR_CONTINUE
 = 0,

84 
	mHTERR_SWITCHING
,

85 
	mHTERR_OK
,

86 
	mHTERR_CREATED
,

87 
	mHTERR_ACCEPTED
,

88 
	mHTERR_NON_AUTHORITATIVE
,

89 
	mHTERR_NO_CONTENT
,

90 
	mHTERR_RESET
,

91 
	mHTERR_PARTIAL
,

92 
	mHTERR_PARTIAL_OK
,

93 
	mHTERR_MULTIPLE
,

94 
	mHTERR_MOVED
,

95 
	mHTERR_FOUND
,

96 
	mHTERR_METHOD
,

97 
	mHTERR_NOT_MODIFIED
,

98 
	mHTERR_USE_PROXY
,

99 
	mHTERR_PROXY_REDIRECT
,

100 
	mHTERR_TEMP_REDIRECT
,

101 
	mHTERR_BAD_REQUEST
,

102 
	mHTERR_UNAUTHORIZED
,

103 
	mHTERR_PAYMENT_REQUIRED
,

104 
	mHTERR_FORBIDDEN
,

105 
	mHTERR_NOT_FOUND
,

106 
	mHTERR_NOT_ALLOWED
,

107 
	mHTERR_NONE_ACCEPTABLE
,

108 
	mHTERR_PROXY_UNAUTHORIZED
,

109 
	mHTERR_TIMEOUT
,

110 
	mHTERR_CONFLICT
,

111 
	mHTERR_GONE
,

112 
	mHTERR_LENGTH_REQUIRED
,

113 
	mHTERR_PRECON_FAILED
,

114 
	mHTERR_TOO_BIG
,

115 
	mHTERR_URI_TOO_BIG
,

116 
	mHTERR_UNSUPPORTED
,

117 
	mHTERR_BAD_RANGE
,

118 
	mHTERR_EXPECTATION_FAILED
,

119 
	mHTERR_REAUTH
,

120 
	mHTERR_PROXY_REAUTH
,

121 
	mHTERR_INTERNAL
,

122 
	mHTERR_NOT_IMPLEMENTED
,

123 
	mHTERR_BAD_GATE
,

124 
	mHTERR_DOWN
,

125 
	mHTERR_GATE_TIMEOUT
,

126 
	mHTERR_BAD_VERSION
,

127 
	mHTERR_NO_PARTIAL_UPDATE
,

129 #ifde‡
HT_DAV


131 
	mHTERR_UNPROCESSABLE
,

132 
	mHTERR_LOCKED
,

133 
	mHTERR_FAILED_DEPENDENCY
,

134 
	mHTERR_INSUFFICIENT_STORAGE
,

138 
	mHTERR_STALE
,

139 
	mHTERR_REVALIDATION_FAILED
,

140 
	mHTERR_DISCONNECTED_CACHE
,

141 
	mHTERR_HEURISTIC_EXPIRATION
,

142 
	mHTERR_TRANSFORMED
,

143 
	mHTERR_CACHE
,

146 
	mHTERR_NO_REMOTE_HOST
,

147 
	mHTERR_NO_HOST
,

148 
	mHTERR_NO_FILE
,

149 
	mHTERR_FTP_SERVER
,

150 
	mHTERR_FTP_NO_RESPONSE
,

151 
	mHTERR_FTP_LOGIN_FAILURE
,

152 
	mHTERR_TIME_OUT
,

153 
	mHTERR_GOPHER_SERVER
,

154 
	mHTERR_INTERRUPTED
,

155 
	mHTERR_CON_INTR
,

156 
	mHTERR_CSO_SERVER
,

157 
	mHTERR_HTTP09
,

158 
	mHTERR_BAD_REPLY
,

159 
	mHTERR_UNKNOWN_AA
,

160 
	mHTERR_NEWS_SERVER
,

161 
	mHTERR_FILE_TO_FTP
,

162 
	mHTERR_AUTO_REDIRECT
,

163 
	mHTERR_MAX_REDIRECT
,

164 
	mHTERR_EOF
,

165 
	mHTERR_WAIS_OVERFLOW
,

166 
	mHTERR_WAIS_MODULE
,

167 
	mHTERR_WAIS_NO_CONNECT
,

168 
	mHTERR_SYSTEM
,

169 
	mHTERR_CLASS
,

170 
	mHTERR_ACCESS
,

171 
	mHTERR_LOGIN
,

172 
	mHTERR_CACHE_EXPIRED
,

173 
	mHTERR_NO_AUTO_RULES
,

174 
	mHTERR_NO_AUTO_PROXY
,

175 
	mHTERR_ELEMENTS


176 } 
	tHTEº‹EÀmít
;

203 
	e_HTEº‹Show
 {

204 
	mHT_ERR_SHOW_FATAL
 = 0x1,

205 
	mHT_ERR_SHOW_NON_FATAL
 = 0x3,

206 
	mHT_ERR_SHOW_WARNING
 = 0x7,

207 
	mHT_ERR_SHOW_INFO
 = 0xF,

208 
	mHT_ERR_SHOW_PARS
 = 0x10,

209 
	mHT_ERR_SHOW_LOCATION
 = 0x20,

210 
	mHT_ERR_SHOW_IGNORE
 = 0x40,

211 
	mHT_ERR_SHOW_FIRST
 = 0x80,

212 
	mHT_ERR_SHOW_LINKS
 = 0x100,

213 
	mHT_ERR_SHOW_DEFAULT
 = 0x13,

214 
	mHT_ERR_SHOW_DETAILED
 = 0x1F,

215 
	mHT_ERR_SHOW_DEBUG
 = 0x7F

216 } 
	tHTEº‹Show
;

218 
HTEº‹Show
 
HTEº‹_show
 ();

219 
BOOL
 
HTEº‹_£tShow
 (
HTEº‹Show
 
mask
);

236 
BOOL
 
HTEº‹_add
 (
HTLi°
 * 
li°
,

237 
HTSevîôy
 
£vîôy
,

238 
BOOL
 
ign‹e
,

239 
ñemít
,

240 * 
∑r
,

241 
Àngth
,

242 * 
whîe
);

256 
BOOL
 
HTEº‹_addSy°em
 (
HTLi°
 * 
li°
,

257 
HTSevîôy
 
£vîôy
,

258 
îr‹numbî
,

259 
BOOL
 
ign‹e
,

260 * 
sysˇŒ
);

270 
BOOL
 
HTEº‹_dñëeAŒ
 (
HTLi°
 * 
li°
);

280 
BOOL
 
HTEº‹_dñëeLa°
 (
HTLi°
 * 
li°
);

293 
BOOL
 
HTEº‹_doShow
 (
HTEº‹
 * 
öfo
);

304 
BOOL
 
HTEº‹_ign‹eLa°
 (
HTLi°
 * 
li°
);

305 
BOOL
 
HTEº‹_£tIgn‹e
 (
HTEº‹
 * 
öfo
);

319 
HTEº‹_ödex
 (
HTEº‹
 * 
öfo
);

328 
HTSevîôy
 
HTEº‹_£vîôy
 (
HTEº‹
 * 
öfo
);

335 
BOOL
 
HTEº‹_hasSevîôy
 (
HTLi°
 * 
li°
, 
HTSevîôy
 
£vîôy
);

343 * 
HTEº‹_∑ømëî
 (
HTEº‹
 * 
öfo
, * 
Àngth
);

351 c⁄° * 
HTEº‹_loˇti⁄
 (
HTEº‹
 * 
öfo
);

	@Library/src/HTEscape.c

14 
	~"wwwsys.h
"

15 
	~"HTUtûs.h
"

16 
	~"HTEsˇ≥.h
"

18 
	#HEX_ESCAPE
 '%'

	)

19 
	#ACCEPTABLE
(
a
Ë–a>=32 &&á<128 && ((
isAc˚±abÀ
[a-32]Ë& 
mask
))

	)

31 
PRIVATE
 
	gisAc˚±abÀ
[96] =

40 
PRIVATE
 *
	ghex
 = "0123456789ABCDEF";

60 
PUBLIC
 * 
	$HTEsˇ≥
 (c⁄° * 
°r
, 
HTURIEncodög
 
mask
)

62 c⁄° * 
p
;

63 * 
q
;

64 * 
ªsu…
;

65 
u«c˚±abÀ
 = 0;

66 i‡(!
°r
Ë 
NULL
;

67 
p
=
°r
; *p;Ö++)

68 i‡(!
	`ACCEPTABLE
(()
	`TOASCII
(*
p
)))

69 
u«c˚±abÀ
++;

70 i‡((
ªsu…
 = (*Ë
	`HT_MALLOC
(
p
-
°r
 + 
u«c˚±abÀ
+ u«c˚±abÀ + 1)Ë=
NULL
)

71 
	`HT_OUTOFMEM
("HTEscape");

72 
q
=
ªsu…
, 
p
=
°r
; *p;Ö++) {

73 
a
 = 
	`TOASCII
(*
p
);

74 i‡(!
	`ACCEPTABLE
(
a
)) {

75 *
q
++ = 
HEX_ESCAPE
;

76 *
q
++ = 
hex
[
a
 >> 4];

77 *
q
++ = 
hex
[
a
 & 15];

79 *
q
++ = *
p
;

81 *
q
++ = 0;

82  
ªsu…
;

83 
	}
}

86 
PUBLIC
 
	$HTAsciiHexToCh¨
 (
c
)

88  
c
 >= '0' && c <= '9' ? c - '0'

89 : 
c
 >= 'A' && c <= 'F'? c - 'A' + 10

90 : 
c
 - 'a' + 10;

91 
	}
}

101 
PUBLIC
 * 
	$HTUnEsˇ≥
 (* 
°r
)

103 * 
p
 = 
°r
;

104 * 
q
 = 
°r
;

106 i‡(!
°r
) {

107 
	`HTTRACE
(
URI_TRACE
, "HTUnEscape.. Called with NULLárgument.\n");

108  
NULL
;

110 *
p
) {

111 i‡(*
p
 =
HEX_ESCAPE
) {

112 
p
++;

113 i‡(*
p
Ë*
q
 = 
	`HTAsciiHexToCh¨
(*p++) * 16;

116 i‡(*
p
Ë*
q
 = 
	`FROMASCII
(*q + 
	`HTAsciiHexToCh¨
(*p)), ++p;

117 
q
++;

119 i‡(*
p
Ë*
q
 = 
	`FROMASCII
(*q + 
	`HTAsciiHexToCh¨
(*p));

120 
p
++, 
q
++;

123 *
q
++ = *
p
++;

127 *
q
++ = 0;

128  
°r
;

130 
	}
}

	@Library/src/HTEscape.h

31 #i‚de‡
HTESCAPE_H


32 
	#HTESCAPE_H


	)

46 
	e_HTURIEncodög
 {

47 
	mURL_XALPHAS
 = 0x1,

48 
	mURL_XPALPHAS
 = 0x2,

49 
	mURL_PATH
 = 0x4,

50 
	mURL_DOSFILE
 = 0x8

51 } 
	tHTURIEncodög
;

53 * 
HTEsˇ≥
 (c⁄° * 
°r
, 
HTURIEncodög
 
mask
);

63 
HTAsciiHexToCh¨
 (
c
);

77 * 
HTUnEsˇ≥
 (* 
°r
);

	@Library/src/HTEvent.c

19 
	~"wwwsys.h
"

20 
	~"WWWUtû.h
"

21 
	~"HTEvít.h
"

23 
PRIVATE
 
HTEvít_ªgi°îCÆlback
 * 
	gRegi°îCBF
 = 
NULL
;

24 
PRIVATE
 
HTEvít_uƒegi°îCÆlback
 * 
	gUƒegi°îCBF
 = 
NULL
;

28 
PUBLIC
 
	$HTEvít_£tRegi°îCÆlback
(
HTEvít_ªgi°îCÆlback
 * 
ªgi°îCBF
)

30 
	`HTTRACE
(
CORE_TRACE
, "Evít.......Ñegi°îög %p\n" 
_
 
ªgi°îCBF
);

31 
Regi°îCBF
 = 
ªgi°îCBF
;

32 
	}
}

34 
PUBLIC
 
	$HTEvít_£tUƒegi°îCÆlback
(
HTEvít_uƒegi°îCÆlback
 * 
uƒegi°îCBF
)

36 
	`HTTRACE
(
CORE_TRACE
, "Evít.......Ñegi°îög %p\n" 
_
 
uƒegi°îCBF
);

37 
Uƒegi°îCBF
 = 
uƒegi°îCBF
;

38 
	}
}

40 
PUBLIC
 
BOOL
 
	$HTEvít_isCÆlbacksRegi°îed
 ()

42  (
Regi°îCBF
 && 
Uƒegi°îCBF
);

43 
	}
}

45 
PUBLIC
 
	$HTEvít_uƒegi°î
 (
SOCKET
 
s
, 
HTEvítTy≥
 
ty≥
)

47 i‡(!
Uƒegi°îCBF
) {

48 
	`HTTRACE
(
CORE_TRACE
, "Event....... No handlerÑegistered\n");

51  (*
Uƒegi°îCBF
)(
s
, 
ty≥
);

52 
	}
}

54 
PUBLIC
 
	$HTEvít_ªgi°î
(
SOCKET
 
s
, 
HTEvítTy≥
 
ty≥
, 
HTEvít
 * 
evít
)

56 i‡(!
Regi°îCBF
) {

57 
	`HTTRACE
(
CORE_TRACE
, "Event....... No handlerÑegistered\n");

60  (*
Regi°îCBF
)(
s
, 
ty≥
, 
evít
);

61 
	}
}

63 
PUBLIC
 
BOOL
 
	$HTEvít_£tCÆlback
(
HTEvít
 * 
evít
, 
HTEvítCÆlback
 * 
cbf
)

65 i‡(!
evít
Ë 
NO
;

66 
evít
->
cbf
 = cbf;

67  
YES
;

68 
	}
}

70 
PUBLIC
 
HTEvít
 * 
	$HTEvít_√w
 (
HTEvítCÆlback
 * 
cbf
, * 
c⁄ãxt
,

71 
HTPri‹ôy
 
¥i‹ôy
, 
mûlis
)

73 i‡(
cbf
) {

74 
HTEvít
 * 
me
;

75 i‡((
me
 = (
HTEvít
 *Ë
	`HT_CALLOC
(1, (HTEvít))Ë=
NULL
)

76 
	`HT_OUTOFMEM
("HTEvent_new");

77 
me
->
cbf
 = cbf;

78 
me
->
∑øm
 = 
c⁄ãxt
;

79 
me
->
¥i‹ôy
 =Öriority;

80 
me
->
mûlis
 = millis;

81 
	`HTTRACE
(
CORE_TRACE
, "Evít....... Cª©edÉvíà%∞wôh c⁄ãxà%p,Öri‹ôy %d,ándÅimeouà%d\n" 
_


82 
me
 
_
 
c⁄ãxt
 _ 
¥i‹ôy
 _ 
mûlis
);

83  
me
;

85  
NULL
;

86 
	}
}

88 
PUBLIC
 
BOOL
 
	$HTEvít_dñëe
 (
HTEvít
 * 
me
)

90 i‡(
me
) {

91 
	`HT_FREE
(
me
);

92 
	`HTTRACE
(
CORE_TRACE
, "Evít....... DñëedÉvíà%p\n" 
_
 
me
);

93  
YES
;

95  
NO
;

96 
	}
}

98 
PUBLIC
 
BOOL
 
	$HTEvít_£tP¨am
(
HTEvít
 * 
evít
, * 
∑øm
)

100 i‡(!
evít
Ë 
NO
;

101 
evít
->
∑øm
 =Öaram;

102  
YES
;

103 
	}
}

105 
PUBLIC
 
BOOL
 
	$HTEvít_£tPri‹ôy
(
HTEvít
 * 
evít
, 
HTPri‹ôy
 
¥i‹ôy
)

107 i‡(!
evít
Ë 
NO
;

108 
evít
->
¥i‹ôy
 =Öriority;

109  
YES
;

110 
	}
}

112 
PUBLIC
 
BOOL
 
	$HTEvít_£tTimeout
(
HTEvít
 * 
evít
, 
timeout
)

114 i‡(
evít
) {

115 
evít
->
mûlis
 = 
timeout
;

116  
YES
;

118  
NO
;

119 
	}
}

121 
PUBLIC
 * 
	$HTEvít_ty≥2°r
(
HTEvítTy≥
 
ty≥
)

123 
i
;

124 
•a˚
[20];

125 °ru˘ {
ty≥
; * 
°r
;} 
m©ch
[] = {
HT_EVENT_INITIALIZER
};

126 
i
 = 0; i < (
m©ch
)/(match[0]); i++)

127 i‡(
m©ch
[
i
].
ty≥
 ==Åype)

128  
m©ch
[
i
].
°r
;

129 
	`•rötf
(
•a˚
, "0x%x", 
ty≥
);

130  
•a˚
;

131 
	}
}

	@Library/src/HTEvent.h

49 #i‚de‡
HTEVENT_H


50 
	#HTEVENT_H


	)

51 
	~"wwwsys.h
"

52 #ifde‡
IN_EVENT


53 
_HTTimî
 
	tHTTimî
;

56 
	e_HTPri‹ôy
 {

57 
	mHT_PRIORITY_INV
 = -1,

58 
	mHT_PRIORITY_OFF
 = 0,

59 
	mHT_PRIORITY_MIN
 = 1,

60 
	mHT_PRIORITY_MAX
 = 20

61 } 
	tHTPri‹ôy
;

63 
	#HTEVENT_INDEX
 0x10

	)

65 #ifde‡
WWW_WIN_ASYNC


66 
	mHTEvít_READ
 = (0x001 | 0 << 
HTEVENT_INDEX
),

67 
	mHTEvít_WRITE
 = (0x002 | 1 << 
HTEVENT_INDEX
),

68 
	mHTEvít_OOB
 = (0x004 | 2 << 
HTEVENT_INDEX
),

69 
	mHTEvít_ACCEPT
 = (0x008 | 3 << 
HTEVENT_INDEX
),

70 
	mHTEvít_CONNECT
 = (0x010 | 4 << 
HTEVENT_INDEX
),

71 
	mHTEvít_CLOSE
 = (0x020 | 5 << 
HTEVENT_INDEX
),

72 
	mHTEvít_TYPES
 = 6,

73 
	#HTEVENT_TYPES
 6

	)

75 
	mHTEvít_READ
 = (0x001 | 0 << 
HTEVENT_INDEX
),

76 
	mHTEvít_ACCEPT
 = (0x002 | 0 << 
HTEVENT_INDEX
),

77 
	mHTEvít_CLOSE
 = (0x004 | 0 << 
HTEVENT_INDEX
),

78 
	mHTEvít_WRITE
 = (0x008 | 1 << 
HTEVENT_INDEX
),

79 
	mHTEvít_CONNECT
 = (0x010 | 1 << 
HTEVENT_INDEX
),

80 
	mHTEvít_OOB
 = (0x020 | 2 << 
HTEVENT_INDEX
),

81 
	mHTEvít_TYPES
 = 3,

82 
	#HTEVENT_TYPES
 3

	)

88 
	mHTEvít_TIMEOUT
 = (0x040 | 
HTEVENT_TYPES
 << 
HTEVENT_INDEX
),

89 
	mHTEvít_BEGIN
 = (0x000 | 
HTEVENT_TYPES
 << 
HTEVENT_INDEX
),

90 
	mHTEvít_END
 = (0x080 | 
HTEVENT_TYPES
 << 
HTEVENT_INDEX
),

91 
	mHTEvít_FLUSH
 = (0x100 | 
HTEVENT_TYPES
 << 
HTEVENT_INDEX
),

92 
	mHTEvít_RESET
 = (0x200 | 
HTEVENT_TYPES
 << 
HTEVENT_INDEX
),

93 
	mHTEvít_ALL
 = 0xFFFF

94 } 
	tHTEvítTy≥
;

96 
	#HTEvít_BITS
(
ty≥
Ë—y≥ & 0xFFFF)

	)

97 
	#HTEvít_INDEX
(
ty≥
Ë—y≥ >> 
HTEVENT_INDEX
)

	)

99 
	#HT_EVENT_INITIALIZER
 \

100 {
HTEvít_READ
, "HTEvent_READ"}, \

101 {
HTEvít_ACCEPT
, "HTEvent_ACCEPT"}, \

102 {
HTEvít_CLOSE
, "HTEvent_CLOSE"}, \

103 {
HTEvít_WRITE
, "HTEvent_WRITE"}, \

104 {
HTEvít_CONNECT
, "HTEvent_CONNECT"}, \

105 {
HTEvít_OOB
, "HTEvent_OOB"}, \

106 {
HTEvít_TIMEOUT
, "HTEvent_TIMEOUT"}, \

107 {
HTEvít_BEGIN
, "HTEvent_BEGIN"}, \

108 {
HTEvít_END
, "HTEvent_END"}, \

109 {
HTEvít_FLUSH
, "HTEvent_FLUSH"}, \

110 {
HTEvít_RESET
, "HTEvít_RESET"}

	)

112 * 
HTEvít_ty≥2°r
(
HTEvítTy≥
 
ty≥
);

124 
	tHTEvítCÆlback
 (
	tSOCKET
, *, 
	tHTEvítTy≥
);

125 
_HTEvít
 
	tHTEvít
;

128 
	~"HTReq.h
"

148 
HTEvít_ªgi°î
 (
SOCKET
, 
HTEvítTy≥
, 
HTEvít
 *);

149 
HTEvít_uƒegi°î
 (
SOCKET
, 
HTEvítTy≥
);

173 
	tHTEvít_ªgi°îCÆlback
(
	tSOCKET
, 
	tHTEvítTy≥
, 
	tHTEvít
 *);

174 
	tHTEvít_uƒegi°îCÆlback
(
	tSOCKET
, 
	tHTEvítTy≥
);

176 
HTEvít_£tRegi°îCÆlback
(
HTEvít_ªgi°îCÆlback
 *);

177 
HTEvít_£tUƒegi°îCÆlback
(
HTEvít_uƒegi°îCÆlback
 *);

188 
BOOL
 
HTEvít_isCÆlbacksRegi°îed
();

196 
HTEvít
 * 
HTEvít_√w
 (
HTEvítCÆlback
 * 
cbf
, * 
c⁄ãxt
,

197 
HTPri‹ôy
 
¥ô‹ôy
, 
timeoutInMûlis
);

198 
BOOL
 
HTEvít_dñëe
 (
HTEvít
 * 
evít
);

208 
BOOL
 
HTEvít_£tP¨am
(
HTEvít
 * 
evít
, * 
∑øm
);

209 
BOOL
 
HTEvít_£tPri‹ôy
(
HTEvít
 * 
evít
, 
HTPri‹ôy
 
¥i‹ôy
);

210 
BOOL
 
HTEvít_£tTimeout
(
HTEvít
 * 
evít
, 
timeoutInMûlis
);

211 
BOOL
 
HTEvít_£tCÆlback
(
HTEvít
 * 
evít
, 
HTEvítCÆlback
 * 
cbf
);

221 
	s_HTEvít
 {

222 
HTPri‹ôy
 
	m¥i‹ôy
;

223 
	mmûlis
;

224 #ifde‡
IN_EVENT


225 
HTTimî
 * 
	mtimî
;

227 
HTEvítCÆlback
 * 
	mcbf
;

228 * 
	m∑øm
;

229 
HTReque°
 * 
	mªque°
;

	@Library/src/HTEvtLst.c

30 
	~"wwwsys.h
"

31 
	~"WWWUtû.h
"

32 
	~"WWWC‹e.h
"

33 
	~"HTReqM™.h
"

34 
	~"HTTimî.h
"

35 
	~"HTEvít.h
"

36 
	~"HTEvtL°.h
"

39 
	#MILLI_PER_SECOND
 1000

	)

40 
	#HASH
(
s
Ë((sË% 
HT_M_HASH_SIZE
)

	)

42 
	#EVENTS_TO_EXECUTE
 10

	)

44 
	#HT_FS_BYTES
(
a
Ë(((◊)/16)+1Ë* 4)

	)

47 
SOCKET
 
	ms
 ;

48 
HTEvít
 * 
	mevíts
[
HTEvít_TYPES
];

49 
HTTimî
 * 
	mtimeouts
[
HTEvít_TYPES
];

50 } 
	tSockEvíts
;

53 
HTEvít
 * 
	mevít
;

54 
SOCKET
 
	ms
;

55 
HTEvítTy≥
 
	mty≥
;

56 
HTPri‹ôy
 
	mskù≥d
;

57 } 
	tEvítOrdî
;

60 
	mSockEvíts_mayCª©e
,

61 
	mSockEvíts_föd


62 } 
	tSockEvíts_a˘i⁄
;

64 
PRIVATE
 
HTLi°
 * 
	gHashTabÀ
 [
HT_M_HASH_SIZE
];

65 
PRIVATE
 
HTLi°
 * 
	gEvítOrdîLi°
 = 
NULL
;

66 
PRIVATE
 
	gHTEndLo›
 = 0;

67 
PRIVATE
 
BOOL
 
	gHTInLo›
 = 
NO
;

69 #ifde‡
WWW_WIN_ASYNC


70 
	#TIMEOUT
 1

	)

71 
PRIVATE
 
HWND
 
	gHTSockëWö
;

72 
PRIVATE
 
ATOM
 
	gHT˛ass
;

73 
PRIVATE
 
HINSTANCE
 
	gHTö°™˚
;

74 
PRIVATE
 
	gHTwöMsg
;

76 
PRIVATE
 
fd_£t
 
	gFdAºay
[
HTEvít_TYPES
];

77 
PRIVATE
 
SOCKET
 
	gMaxSock
 = 0;

84 #ifde‡
HTDEBUG


85 
PRIVATE
 
	$Evít_åa˚
 (
HTEvít
 * 
evít
)

87 i‡(
evít
) {

88 
	`HTTRACE
(
ALL_TRACE
, "%8p: %3d %6d %8∞%8∞%8p" 
_


89 
evít
 
_
Évít->
¥i‹ôy
 _Évít->
mûlis
 _Évít->
cbf
 _

90 
evít
->
∑øm
 
_
Évít->
ªque°
);

92 
	}
}

94 
PRIVATE
 
	$Evít_åa˚Hód
 ()

96 
	`HTTRACE
(
ALL_TRACE
, "Évent:Öri millis callbackÖaramÑequest ");

97 
	}
}

99 
PRIVATE
 
	$Timî_åa˚
 (
HTTimî
 * 
timî
)

101 i‡(
timî
) {

102 
	`HTTRACE
(
ALL_TRACE
, "%8p: %6d %ld %¯%8p" 
_


103 
timî
 
_


104 
	`HTTimî_expúesAbsﬁuã
(
timî
Ë
_


105 
	`HTTimî_expúesRñ©ive
(
timî
Ë
_


106 
	`HTTimî_isRñ©ive
(
timî
Ë? 'R' : 'A' 
_


107 
	`HTTimî_ˇŒback
(
timî
));

109 
	}
}

111 
PRIVATE
 
	$Timî_åa˚Hód
 ()

113 
	`HTTRACE
(
ALL_TRACE
, "Åimer: millisÉxpires ?Öaram callback ");

114 
	}
}

120 
PRIVATE
 
	$EvítLi°_dump
 ()

122 
v
 = 0;

123 
HTLi°
* 
cur
;

124 
SockEvíts
 * 
¥es
;

125 
	`HTTRACE
(
ALL_TRACE
, "Event....... Dumping socketÉvents\n");

126 
	`HTTRACE
(
ALL_TRACE
, "soc ");

127 
	`Evít_åa˚Hód
();

128 
	`HTTRACE
(
ALL_TRACE
, " ");

129 
	`Timî_åa˚Hód
();

130 
	`HTTRACE
(
ALL_TRACE
, "\n");

131 
v
 = 0; v < 
HT_M_HASH_SIZE
; v++) {

132 
cur
 = 
HashTabÀ
[
v
];

133 (
¥es
 = (
SockEvíts
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

134 
i
;

135 
	`HTTRACE
(
ALL_TRACE
, "%3d \n" 
_
 
¥es
->
s
);

136 
i
 = 0; i < 
HTEvít_TYPES
; i++)

137 i‡(
¥es
->
evíts
[
i
]) {

138 * 
«mes
[
HTEvít_TYPES
] = {"read", "writ", "xcpt"};

139 
	`HTTRACE
(
ALL_TRACE
, "%†" 
_
 
«mes
[
i
]);

140 
	`Evít_åa˚
(
¥es
->
evíts
[
i
]);

141 
	`HTTRACE
(
ALL_TRACE
, " ");

142 
	`Timî_åa˚
(
¥es
->
timeouts
[
i
]);

143 
	`HTTRACE
(
ALL_TRACE
, " ");

145 
	`HTTRACE
(
ALL_TRACE
, "\n");

148 
	}
}

150 
PRIVATE
 
	$fd_dump
 (
SOCKET
 
maxfs
, 
fd_£t
 * 
r£t
, fd_£à* 
w£t
, fd_£à* 
o£t
,

151 
timevÆ
 * 
wt
)

153 
SOCKET
 
˙t
;

156 
	`HTTRACE
(
THD_TRACE
, "............ READ :");

157 
˙t
=0; c¡<=
maxfs
; cnt++)

158 i‡(
	`FD_ISSET
(
˙t
, 
r£t
)Ë
	`HTTRACE
(
THD_TRACE
, " %d" 
_
 cnt);

159 
	`HTTRACE
(
THD_TRACE
, "\n");

162 
	`HTTRACE
(
THD_TRACE
, "............ WRITE:");

163 
˙t
=0; c¡<=
maxfs
; cnt++)

164 i‡(
	`FD_ISSET
(
˙t
, 
w£t
)Ë
	`HTTRACE
(
THD_TRACE
, " %d" 
_
 cnt);

165 
	`HTTRACE
(
THD_TRACE
, "\n");

168 
	`HTTRACE
(
THD_TRACE
, "............ OOB :");

169 
˙t
=0; c¡<=
maxfs
; cnt++)

170 i‡(
	`FD_ISSET
(
˙t
, 
o£t
)Ë
	`HTTRACE
(
THD_TRACE
, " %d" 
_
 cnt);

171 
	`HTTRACE
(
THD_TRACE
, "\n");

173 i‡(
wt
)

174 
	`HTTRACE
(
THD_TRACE
, "............ Timeouài†%ld s, %ld mi¸o£cs\n" 
_


175 
wt
->
tv_£c
 
_
 wt->
tv_u£c
);

176 
	}
}

183 #ifde‡
WWW_WIN_ASYNC


184 
PRIVATE
 
BOOL
 
	$Timî_£tWödowsTimî
 (
HTTimî
 * 
timî
)

186 
UINT
 
id
;

187 
HWND
 
hwnd
 = 
	`HTEvítLi°_gëWöH™dÀ
(&
id
);

188 
BOOL
 
°©us
 = (
	`SëTimî
(
hwnd
, (
UINT
)
timî
, (UINT)
	`HTTimî_gëTime
—imî), 
NULL
Ë=0Ë? 
NO
 : 
YES
;

189  
°©us
;

190 
	}
}

192 
PRIVATE
 
BOOL
 
	$Timî_dñëeWödowsTimî
 (
HTTimî
 * 
timî
)

194 
UINT
 
id
;

195 
HWND
 
hwnd
 = 
	`HTEvítLi°_gëWöH™dÀ
(&
id
);

196 
BOOL
 
°©us
 = (
	`KûlTimî
(
hwnd
, (
UINT
)
timî
Ë=0Ë? 
NO
 : 
YES
;

197  
°©us
;

198 
	}
}

206 
PRIVATE
 
	$EvítLi°TimîH™dÀr
 (
HTTimî
 * 
timî
, * 
∑øm
, 
HTEvítTy≥
 
ty≥
)

208 
SockEvíts
 * 
sockp
 = (SockEvít†*Ë
∑øm
;

209 
HTEvít
 * 
evít
 = 
NULL
;

212 i‡(
sockp
->
timeouts
[
	`HTEvít_INDEX
(
HTEvít_READ
)] =
timî
) {

213 
evít
 = 
sockp
->
evíts
[
	`HTEvít_INDEX
(
HTEvít_READ
)];

214 
	`HTTRACE
(
THD_TRACE
, "Evít....... READÅimed ouà⁄ %d.\n" 
_
 
sockp
->
s
);

215  (*
evít
->
cbf
Ë(
sockp
->
s
,Évít->
∑øm
, 
HTEvít_TIMEOUT
);

219 i‡(
sockp
->
timeouts
[
	`HTEvít_INDEX
(
HTEvít_WRITE
)] =
timî
) {

220 
evít
 = 
sockp
->
evíts
[
	`HTEvít_INDEX
(
HTEvít_WRITE
)];

221 
	`HTTRACE
(
THD_TRACE
, "Evít....... WRITEÅimed ouà⁄ %d.\n" 
_
 
sockp
->
s
);

222  (*
evít
->
cbf
Ë(
sockp
->
s
,Évít->
∑øm
, 
HTEvít_TIMEOUT
);

226 i‡(
sockp
->
timeouts
[
	`HTEvít_INDEX
(
HTEvít_OOB
)] =
timî
) {

227 
evít
 = 
sockp
->
evíts
[
	`HTEvít_INDEX
(
HTEvít_OOB
)];

228 
	`HTTRACE
(
THD_TRACE
, "Evít....... OOBÅimed ouà⁄ %d.\n" 
_
 
sockp
->
s
);

229  (*
evít
->
cbf
Ë(
sockp
->
s
,Évít->
∑øm
, 
HTEvít_TIMEOUT
);

231 
	`HTTRACE
(
THD_TRACE
, "Evít....... Nÿevíàf‹Åimî %∞wôh c⁄ãxà%p\n" 
_
 
timî
 _ 
∑øm
);

232  
HT_ERROR
;

233 
	}
}

235 
PUBLIC
 
	$CheckSockEvít
 (
HTTimî
 * 
timî
, 
HTTimîCÆlback
 * 
cbf
, * 
∑øm
)

237 
SockEvíts
 * 
sockp
 = (SockEvít†*)
∑øm
;

238 i‡(
cbf
 =
EvítLi°TimîH™dÀr
 &&

239 
sockp
->
timeouts
[0] !
timî
 &&

240 
sockp
->
timeouts
[1] !
timî
 &&

241 
sockp
->
timeouts
[2] !
timî
) {

242 
	`HTDEBUGBREAK
("BadÅimî %p\n" 
_
 
timî
);

244 
	}
}

250 
PRIVATE
 
SockEvíts
 * 
	$SockEvíts_gë
 (
SOCKET
 
s
, 
SockEvíts_a˘i⁄
 
a˘i⁄
)

252 
v
 = 
	`HASH
(
s
);

253 
HTLi°
* 
cur
;

254 
SockEvíts
 * 
¥es
;

257 i‡(
s
 =
INVSOC
)

258  
NULL
;

260 i‡(
HashTabÀ
[
v
] =
NULL
ËHashTabÀ[v] = 
	`HTLi°_√w
();

261 
cur
 = 
HashTabÀ
[
v
];

262 (
¥es
 = (
SockEvíts
 *Ë
	`HTLi°_√xtObje˘
(
cur
)))

263 i‡(
¥es
->
s
 == s) Öres;

265 i‡(
a˘i⁄
 =
SockEvíts_mayCª©e
) {

266 i‡((
¥es
 = (
SockEvíts
 *Ë
	`HT_CALLOC
(1, (SockEvíts))Ë=
NULL
)

267 
	`HT_OUTOFMEM
("HTEventList_register");

268 
¥es
->
s
 = s;

269 
	`HTLi°_addObje˘
(
HashTabÀ
[
v
], (*)
¥es
);

270  
¥es
;

272  
NULL
;

273 
	}
}

275 
PRIVATE
 
	$EvítOrdî_add
 (
SOCKET
 
s
, 
HTEvítTy≥
 
ty≥
, 
ms_t
 
now
)

277 
EvítOrdî
 * 
¥es
;

278 
HTLi°
 * 
cur
 = 
EvítOrdîLi°
;

279 
HTLi°
 * 
ö£πA·î
 = 
cur
;

280 
SockEvíts
 * 
sockp
 = 
	`SockEvíts_gë
(
s
, 
SockEvíts_föd
);

281 
HTEvít
 * 
evít
;

283 i‡(
sockp
 =
NULL
 || (
evít
 = sockp->
evíts
[
	`HTEvít_INDEX
(
ty≥
)]) == NULL) {

284 
	`HTTRACE
(
THD_TRACE
, "EvítOrdî..Çÿevíàfound f‹ sockë %d,Åy≥ %s.\n" 
_


285 
s
 
_
 
	`HTEvít_ty≥2°r
(
ty≥
));

286  
HT_ERROR
;

290 i‡(
sockp
->
timeouts
[
	`HTEvít_INDEX
(
ty≥
)])

291 
	`HTTimî_ª‰esh
(
sockp
->
timeouts
[
	`HTEvít_INDEX
(
ty≥
)], 
now
);

294 (
¥es
 = (
EvítOrdî
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

295 i‡(
¥es
->
s
 =†&&Öªs->
evít
 =evíà&&Öªs->
ty≥
 ==Åype) {

296 
¥es
->
skù≥d
++;

297  
HT_OK
;

299 i‡(
¥es
->
evít
->
¥i‹ôy
+¥es->
skù≥d
 >Évent->priority)

300 
ö£πA·î
 = 
cur
;

304 i‡((
¥es
 = (
EvítOrdî
 *Ë
	`HT_CALLOC
(1, (EvítOrdî))Ë=
NULL
)

305 
	`HT_OUTOFMEM
("EventOrder_add");

306 
¥es
->
evít
 =Évent;

307 
¥es
->
s
 = s;

308 
¥es
->
ty≥
 =Åype;

309 
	`HTLi°_addObje˘
(
ö£πA·î
, (*)
¥es
);

310  
HT_OK
;

311 
	}
}

313 
PUBLIC
 
	$EvítOrdî_execuãAndDñëe
 ()

315 
HTLi°
 * 
cur
 = 
EvítOrdîLi°
;

316 
EvítOrdî
 * 
¥es
;

317 
i
 = 0;

318 
	`HTTRACE
(
THD_TRACE
, "EventOrder..Éxecute orderedÉvents\n");

319 i‡(
cur
 =
NULL
Ë 
NO
;

320 (
¥es
=(
EvítOrdî
 *Ë
	`HTLi°_ªmoveLa°Obje˘
(
cur
)Ë&& 
i
<
EVENTS_TO_EXECUTE
) {

321 
HTEvít
 * 
evít
 = 
¥es
->event;

322 
ªt
;

323 
	`HTTRACE
(
THD_TRACE
, "EvítLi°... cÆlög sockë %d,Ñeque° %∞h™dÀ∏%∞ty≥ %s\n" 
_


324 
¥es
->
s
 
	`_
 (*Ë
evít
->
ªque°
 
_


325 (*Ë
evít
->
cbf
 
_
 
	`HTEvít_ty≥2°r
(
¥es
->
ty≥
));

326 
ªt
 = (*
¥es
->
evít
->
cbf
)’ªs->
s
,Öªs->evít->
∑øm
,Öªs->
ty≥
);

327 
	`HT_FREE
(
¥es
);

328 i‡(
ªt
 !
HT_OK
) Ñet;

329 
i
++;

331  
HT_OK
;

332 
	}
}

334 
PRIVATE
 
BOOL
 
	$EvítOrdî_˛órAŒ
 ()

336 
HTLi°
 * 
cur
 = 
EvítOrdîLi°
;

337 
EvítOrdî
 * 
¥es
;

338 
	`HTTRACE
(
THD_TRACE
, "EventOrder.. Clearingáll orderedÉvents\n");

339 i‡(
cur
) {

340 (
¥es
 = (
EvítOrdî
 *Ë
	`HTLi°_√xtObje˘
(
cur
)))

341 
	`HT_FREE
(
¥es
);

342  
YES
;

344  
NO
;

345 
	}
}

347 
PUBLIC
 
BOOL
 
	$EvítOrdî_dñëeAŒ
 ()

349 
	`EvítOrdî_˛órAŒ
();

350 
	`HTLi°_dñëe
(
EvítOrdîLi°
);

351 
EvítOrdîLi°
 = 
NULL
;

352  
YES
;

353 
	}
}

362 #i‚de‡
WWW_WIN_ASYNC


363 
PRIVATE
 
	$__Re£tMaxSock
 ()

365 
SOCKET
 
˙t
;

366 
SOCKET
 
t_max
 = 0;

367 
SOCKET
 
ﬁd_max
 = 
MaxSock
;

368 
˙t
 = 0 ; c¡ <
MaxSock
; cnt++) {

369 i‡(
	`FD_ISSET
(
˙t
, (
FdAºay
 + 
	`HTEvít_INDEX
(
HTEvít_READ
))) ||

370 
	`FD_ISSET
(
˙t
, (
FdAºay
 + 
	`HTEvít_INDEX
(
HTEvít_WRITE
))) ||

371 
	`FD_ISSET
(
˙t
, (
FdAºay
 + 
	`HTEvít_INDEX
(
HTEvít_OOB
))))

372 i‡(
˙t
 > 
t_max
)Å_max = cnt;

374 
MaxSock
 = 
t_max
+1;

375 
	`HTTRACE
(
THD_TRACE
, "Evít....... Re£àMaxSock from %uÅÿ%u\n" 
_
 
ﬁd_max
 _ 
MaxSock
);

377 
	}
}

380 
PRIVATE
 
	$EvítLi°_ªmaöög
 (
SockEvíts
 * 
¥es
)

382 
ªt
 = 0;

383 
i
;

384 
i
 = 0; i < 
HTEvít_TYPES
; i++)

385 i‡(
¥es
->
evíts
[
i
] !
NULL
)

386 
ªt
 |1<<
i
;

387  
ªt
;

388 
	}
}

396 
PUBLIC
 
	$HTEvítLi°_ªgi°î
 (
SOCKET
 
s
, 
HTEvítTy≥
 
ty≥
, 
HTEvít
 * 
evít
)

398 
√w£t
 = 0;

399 
SockEvíts
 * 
sockp
;

400 
	`HTTRACE
(
THD_TRACE
, "Evít....... Regi°î sockë %d,Ñeque° %∞h™dÀ∏%∞ty≥ %†©Öri‹ôy %d\n" 
_


401 
s
 
	`_
 (*Ë
evít
->
ªque°
 
_


402 (*Ë
evít
->
cbf
 
_
 
	`HTEvít_ty≥2°r
(
ty≥
) _

403 (Ë
evít
->
¥i‹ôy
);

404 i‡(
s
==
INVSOC
 || 
	`HTEvít_INDEX
(
ty≥
Ë>
HTEvít_TYPES
)

411 
	`HTTRACE
(
THD_TRACE
, "Evít....... Regi°îög sockë f‹ %s\n" 
_
 
	`HTEvít_ty≥2°r
(
ty≥
));

412 
sockp
 = 
	`SockEvíts_gë
(
s
, 
SockEvíts_mayCª©e
);

413 
sockp
->
s
 = s;

414 
sockp
->
evíts
[
	`HTEvít_INDEX
(
ty≥
)] = 
evít
;

415 
√w£t
 = 
	`EvítLi°_ªmaöög
(
sockp
);

416 #ifde‡
WWW_WIN_ASYNC


417 i‡(
	`WSAAsyncSñe˘
(
s
, 
HTSockëWö
, 
HTwöMsg
, 
	`HTEvít_BITS
(
√w£t
)) < 0) {

418 
	`HTTRACE
(
THD_TRACE
, "Evít....... WSAAsyncSñe˘Ñëu∫ed `%s'!" 
_
 
	`HTEºnoSåög
(
so˚ºno
));

419  
HT_ERROR
;

422 
	`FD_SET
(
s
, 
FdAºay
+
	`HTEvít_INDEX
(
ty≥
));

424 
	`HTTRACEDATA
((*Ë
FdAºay
+
	`HTEvít_INDEX
(
ty≥
), 8, "HTEvítLi°_ªgi°î: (s:%d)" 
_
 
s
);

426 i‡(
s
 > 
MaxSock
) {

427 
MaxSock
 = 
s
 ;

428 
	`HTTRACE
(
THD_TRACE
, "Evít....... New vÆuêf‹ MaxSock i†%d\n" 
_
 
MaxSock
);

436 i‡(
evít
->
mûlis
 >= 0) {

437 
sockp
->
timeouts
[
	`HTEvít_INDEX
(
ty≥
)] =

438 
	`HTTimî_√w
(
sockp
->
timeouts
[
	`HTEvít_INDEX
(
ty≥
)],

439 
EvítLi°TimîH™dÀr
, 
sockp
, 
evít
->
mûlis
, 
YES
, YES);

442  
HT_OK
;

443 
	}
}

451 
PUBLIC
 
	$HTEvítLi°_uƒegi°î
 (
SOCKET
 
s
, 
HTEvítTy≥
 
ty≥
)

453 
v
 = 
	`HASH
(
s
);

454 
HTLi°
 * 
cur
 = 
HashTabÀ
[
v
];

455 
HTLi°
 * 
œ°
 = 
cur
;

456 
SockEvíts
 * 
¥es
;

457 
ªt
 = 
HT_ERROR
;

460 i‡(
s
 =
INVSOC
)

461  
HT_OK
;

463 
cur
 && (
¥es
 = (
SockEvíts
 *Ë
	`HTLi°_√xtObje˘
(cur))) {

464 i‡(
¥es
->
s
 == s) {

465 
ªmaöög
 = 0;

470 
¥es
->
evíts
[
	`HTEvít_INDEX
(
ty≥
)] = 
NULL
;

471 
ªmaöög
 = 
	`EvítLi°_ªmaöög
(
¥es
);

478 
HTTimî
 * 
timî
 = 
¥es
->
timeouts
[
	`HTEvít_INDEX
(
ty≥
)];

479 i‡(
timî
Ë
	`HTTimî_dñëe
(timer);

480 
¥es
->
timeouts
[
	`HTEvít_INDEX
(
ty≥
)] = 
NULL
;

483 #ifde‡
WWW_WIN_ASYNC


484 i‡(
	`WSAAsyncSñe˘
(
s
, 
HTSockëWö
, 
HTwöMsg
, 
ªmaöög
) < 0)

485 
ªt
 = 
HT_ERROR
;

487 
	`FD_CLR
(
s
, 
FdAºay
+
	`HTEvít_INDEX
(
ty≥
));

489 
	`HTTRACEDATA
((*)
FdAºay
+
	`HTEvít_INDEX
(
ty≥
), 8, "HTEvítLi°_uƒegi°î: (s:%d)" 
_
 
s
);

497 i‡(
ªmaöög
 == 0) {

498 
HTLi°
 * 
doomed
 = 
cur
;

499 
	`HTTRACE
(
THD_TRACE
, "Evít....... Nÿm‹êevít†ªgi°îed f‹ sockë %d\n" 
_
 
s
);

501 #i‚de‡
WWW_WIN_ASYNC


503 i‡(
¥es
->
s
 >
MaxSock
Ë
	`__Re£tMaxSock
();

506 
	`HT_FREE
(
¥es
);

507 
¥es
 = (
SockEvíts
 *Ë
	`HTLi°_√xtObje˘
(
cur
);

508 
	`HTLi°_quickRemoveEÀmít
(
doomed
, 
œ°
);

510 
ªt
 = 
HT_OK
;

512 
	`HTTRACE
(
THD_TRACE
, "Evít....... Sockë %d uƒegi°îed f‹ %s\n" 
_
 
s
 _

513 
	`HTEvít_ty≥2°r
(
ty≥
));

518 
œ°
 = 
cur
;

520 i‡(
THD_TRACE
) {

521 i‡(
ªt
 =
HT_ERROR
)

522 
	`HTTRACE
(
THD_TRACE
, "Evít....... Couldn'àföd sockë %d. C™'àuƒegi°îÅy≥ %s\n" 
_


523 
s
 
_
 
	`HTEvít_ty≥2°r
(
ty≥
));

525  
ªt
;

526 
	}
}

533 
PUBLIC
 
	$HTEvítLi°_uƒegi°îAŒ
 ()

535 
i
;

536 
	`HTTRACE
(
THD_TRACE
, "Unregister..áll sockets\n");

537 
i
 = 0 ; i < 
HT_M_HASH_SIZE
; i++) {

538 
HTLi°
 * 
cur
 = 
HashTabÀ
[
i
];

539 
SockEvíts
 * 
¥es
;

540 (
¥es
 = (
SockEvíts
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

541 #ifde‡
WWW_WIN_ASYNC


542 
	`WSAAsyncSñe˘
(
¥es
->
s
, 
HTSockëWö
, 
HTwöMsg
, 0);

544 
	`HT_FREE
(
¥es
);

546 
	`HTLi°_dñëe
(
HashTabÀ
[
i
]);

547 
HashTabÀ
[
i
] = 
NULL
;

550 #i‚de‡
WWW_WIN_ASYNC


551 
MaxSock
 = 0 ;

552 
	`HTTRACE
(
THD_TRACE
, "Evít....... New vÆuêf‹ MaxSock i†%d\n" 
_
 
MaxSock
);

553 
	`FD_ZERO
(
FdAºay
+
	`HTEvít_INDEX
(
HTEvít_READ
));

554 
	`FD_ZERO
(
FdAºay
+
	`HTEvít_INDEX
(
HTEvít_WRITE
));

555 
	`FD_ZERO
(
FdAºay
+
	`HTEvít_INDEX
(
HTEvít_OOB
));

558 
	`EvítOrdî_dñëeAŒ
();

560 
	}
}

566 
PUBLIC
 
	$HTEvítLi°_di•©ch
 (
SOCKET
 
s
, 
HTEvítTy≥
 
ty≥
, 
ms_t
 
now
)

568 
SockEvíts
 * 
sockp
 = 
	`SockEvíts_gë
(
s
, 
SockEvíts_föd
);

569 i‡(
sockp
) {

570 
HTEvít
 * 
evít
 = 
sockp
->
evíts
[
	`HTEvít_INDEX
(
ty≥
)];

573 i‡(
sockp
->
timeouts
[
	`HTEvít_INDEX
(
ty≥
)])

574 
	`HTTimî_ª‰esh
(
sockp
->
timeouts
[
	`HTEvít_INDEX
(
ty≥
)], 
now
);

580 i‡(
evít
 &&Évít->
¥i‹ôy
!=
HT_PRIORITY_OFF
)

581  (*
evít
->
cbf
Ë(
s
,Évít->
∑øm
, 
ty≥
);

582 
	`HTTRACE
(
THD_TRACE
, "Di•©ch.... H™dÀ∏%∞NOT cÆÀd\n" 
_
 
sockp
);

583  
HT_OK
;

585 
	`HTTRACE
(
THD_TRACE
, "Di•©ch.... Bad sockë %d\n" 
_
 
s
);

586  
NO
;

587 
	}
}

589 
PUBLIC
 
HTEvít
 * 
	$HTEvítLi°_lookup
 (
SOCKET
 
s
, 
HTEvítTy≥
 
ty≥
)

591 
SockEvíts
 * 
sockp
 = 
NULL
;

592 i‡((
sockp
 = 
	`SockEvíts_gë
(
s
, 
SockEvíts_föd
)Ë=
NULL
)

593  
NULL
;

594  
sockp
->
evíts
[
	`HTEvít_INDEX
(
ty≥
)];

595 
	}
}

604 
PUBLIC
 
	$HTEvítLi°_√wLo›
 ()

606  
	`HTEvítLi°_lo›
 (
NULL
);

607 
	}
}

613 
PUBLIC
 
	$HTEvítLi°_°›Lo›
 ()

615 
HTEndLo›
 = 1;

616 
	}
}

623 
PUBLIC
 
	$HTEvítLi°_lo›
 (
HTReque°
 * 
theReque°
)

625 #ifde‡
WWW_WIN_ASYNC


627 
MSG
 
msg
;

628 
°©us
;

629 !
HTEndLo›
 && 
	`GëMesßge
(&
msg
,0,0,0)) {

630 
	`Tøn¶©eMesßge
(&
msg
);

631 
	`Di•©chMesßge
(&
msg
);

634 
°©us
 = 
HTEndLo›
;

637 
HTEndLo›
 = 0;

639  (
°©us
 =1 ? 
HT_OK
 : 
HT_ERROR
);

643 
fd_£t
 
åód£t
, 
twrôe£t
, 
ãx˚±£t
;

644 
timevÆ
 
waôtime
, * 
wt
;

645 
a˘ive_sockës
;

646 
maxfds
;

647 
ms_t
 
timeout
;

648 
ms_t
 
now
;

649 
SOCKET
 
s
;

650 
°©us
 = 
HT_OK
;

653 i‡(
HTInLo›
) {

654 
	`HTTRACE
(
THD_TRACE
, "Event Loop.. Already oneÜoopÑunning -Éxiting\n");

655  
HT_ERROR
;

657 
HTInLo›
 = 
YES
;

660 i‡(!
EvítOrdîLi°
)

661 
EvítOrdîLi°
 = 
	`HTLi°_√w
();

663 
	`EvítOrdî_˛órAŒ
();

666 !
HTEndLo›
) {

673 
wt
 = 
NULL
;

674 i‡((
°©us
 = 
	`HTTimî_√xt
(&
timeout
)))

676 i‡(
timeout
 != 0) {

677 
waôtime
.
tv_£c
 = 
timeout
 / 
MILLI_PER_SECOND
;

678 
waôtime
.
tv_u£c
 = (
timeout
 % 
MILLI_PER_SECOND
) *

679 (1000000 / 
MILLI_PER_SECOND
);

680 
wt
 = &
waôtime
;

687 i‡(
HTEndLo›
) ;

692 
åód£t
 = 
FdAºay
[
	`HTEvít_INDEX
(
HTEvít_READ
)];

693 
twrôe£t
 = 
FdAºay
[
	`HTEvít_INDEX
(
HTEvít_WRITE
)];

694 
ãx˚±£t
 = 
FdAºay
[
	`HTEvít_INDEX
(
HTEvít_OOB
)];

697 
maxfds
 = 
MaxSock
;

699 
	`HTTRACE
(
THD_TRACE
, "EvíàLo›.. cÆlög sñe˘: maxfd†i†%d\n" 
_
 
maxfds
);

700 #ifde‡
HTDEBUG


701 
	`fd_dump
(
maxfds
, &
åód£t
, &
twrôe£t
, &
ãx˚±£t
, 
wt
);

704 #ifde‡
__hpux


705 
a˘ive_sockës
 = 
	`£À˘
(
maxfds
+1, (*)&
åód£t
, (*)&
twrôe£t
,

706 (*)&
ãx˚±£t
, 
wt
);

707 #ñi‡
	`deföed
(
_WINSOCKAPI_
)

718 i‡((
åód£t
.
fd_cou¡
 || 
twrôe£t
.fd_cou¡ || 
ãx˚±£t
.fd_count)

719 && 
wt
)

720 
a˘ive_sockës
 = 
	`£À˘
(
maxfds
+1, &
åód£t
, &
twrôe£t
,

721 &
ãx˚±£t
, 
wt
);

723 
a˘ive_sockës
 = -1;

725 
a˘ive_sockës
 = 
	`£À˘
(
maxfds
+1, &
åód£t
, &
twrôe£t
, &
ãx˚±£t
, 
wt
);

728 
now
 = 
	`HTGëTimeInMûlis
();

730 
	`HTTRACE
(
THD_TRACE
, "EvíàLo›.. sñe˘Ñëu∫†%d\n" 
_
 
a˘ive_sockës
);

731 #ifde‡
HTDEBUG


732 
	`fd_dump
(
maxfds
, &
åód£t
, &
twrôe£t
, &
ãx˚±£t
, 
wt
);

735 i‡(
a˘ive_sockës
 == -1) {

736 #ifde‡
EINTR


737 i‡(
so˚ºno
 =
EINTR
) {

747 
	`HTTRACE
(
THD_TRACE
, "Event Loop.. select was interruted -Åryágain\n");

751 #ifde‡
EBADF


752 i‡(
so˚ºno
 =
EBADF
) {

758 
	`HTTRACE
(
THD_TRACE
, "Event Loop.. One or more sockets wereÇotÅhroughÅheir connectÖhase -Åryágain\n");

762 
	`HTTRACE
(
THD_TRACE
, "EvíàLo›.. sñe˘Ñëu∫edÉº‹ %d\n" 
_
 
so˚ºno
);

764 #ifde‡
HTDEBUG


765 
	`EvítLi°_dump
();

768 
°©us
 = 
HT_ERROR
;

776 i‡(
a˘ive_sockës
 == 0)

780 
s
 = 0 ; s <
maxfds
 ; s++) {

781 i‡(
	`FD_ISSET
(
s
, &
ãx˚±£t
))

782 i‡((
°©us
 = 
	`EvítOrdî_add
(
s
, 
HTEvít_OOB
, 
now
)Ë!
HT_OK
)

783 
°›_lo›
;

784 i‡(
	`FD_ISSET
(
s
, &
twrôe£t
))

785 i‡((
°©us
 = 
	`EvítOrdî_add
(
s
, 
HTEvít_WRITE
, 
now
)Ë!
HT_OK
)

786 
°›_lo›
;

787 i‡(
	`FD_ISSET
(
s
, &
åód£t
))

788 i‡((
°©us
 = 
	`EvítOrdî_add
(
s
, 
HTEvít_READ
, 
now
)Ë!
HT_OK
)

789 
°›_lo›
;

791 i‡((
°©us
 = 
	`EvítOrdî_execuãAndDñëe
()Ë!
HT_OK
) ;

795 
°›_lo›
:

796 
HTEndLo›
 = 0;

797 
HTInLo›
 = 
NO
;

798  
°©us
;

800 
	}
}

806 #ifde‡
WWW_WIN_ASYNC


809 
PRIVATE
 
LRESULT
 
CALLBACK
 
	$AsyncWödowProc
(
HWND
 
hwnd
, 
UINT
 
uMsg
, 
WPARAM
 
wP¨am
, 
LPARAM
 
lP¨am
)

811 
WORD
 
evít
;

812 
SOCKET
 
sock
;

813 
HTEvítTy≥
 
ty≥
;

814 
ms_t
 
now
 = 
	`HTGëTimeInMûlis
();

817 i‡(
uMsg
 =
WM_TIMER
) {

818 
	`HTTimî_di•©ch
((
HTTimî
 *)
wP¨am
);

822 i‡(
uMsg
 !
HTwöMsg
)

823  (
	`DefWödowProc
(
hwnd
, 
uMsg
, 
wP¨am
, 
lP¨am
));

825 
evít
 = 
	`LOWORD
(
lP¨am
);

826 
sock
 = (
SOCKET
)
wP¨am
;

827 
evít
) {

828 
FD_READ
: 
ty≥
 = 
HTEvít_READ
; ;

829 
FD_WRITE
: 
ty≥
 = 
HTEvít_WRITE
; ;

830 
FD_ACCEPT
: 
ty≥
 = 
HTEvít_ACCEPT
; ;

831 
FD_CONNECT
: 
ty≥
 = 
HTEvít_CONNECT
; ;

832 
FD_OOB
: 
ty≥
 = 
HTEvít_OOB
; ;

835 
FD_CLOSE
: 
ty≥
 = 
HTEvít_READ
; ;

836 : 
	`HTDEBUGBREAK
("Unknow¿evíà%d\n" 
_
 
evít
);

838 i‡(
	`HTEvítLi°_di•©ch
(()
sock
, 
ty≥
, 
now
Ë!
HT_OK
)

839 
HTEndLo›
 = -1;

841 
	}
}

847 
PUBLIC
 
BOOL
 
	$HTEvítLi°_£tWöH™dÀ
 (
HWND
 
wödow
, 
mesßge
)

849 
HTSockëWö
 = 
wödow
;

850 
HTwöMsg
 = 
mesßge
;

851  
YES
;

852 
	}
}

854 
PUBLIC
 
HWND
 
	$HTEvítLi°_gëWöH™dÀ
 (* 
pMesßge
)

856 i‡(
pMesßge
)

857 *
pMesßge
 = 
HTwöMsg
;

858  (
HTSockëWö
);

859 
	}
}

862 
PUBLIC
 
BOOL
 
	$HTEvítInô
 ()

864 #ifde‡
WWW_WIN_ASYNC


870 
˛assName
[] = "AsyncWindowClass";

871 
WNDCLASS
 
wc
;

872 
OSVERSIONINFO
 
osInfo
;

874 
wc
.
°yÀ
=0;

875 
wc
.
Õ‚WndProc
=(
WNDPROC
)
AsyncWödowProc
;

876 
wc
.
cbClsExåa
=0;

877 
wc
.
cbWndExåa
=0;

878 
wc
.
hIc⁄
=0;

879 
wc
.
hCurs‹
=0;

880 
wc
.
hbrBackground
=0;

881 
wc
.
ÕszMíuName
=(
LPSTR
)0;

882 
wc
.
ÕszCœssName
=
˛assName
;

884 
osInfo
.
dwOSVîsi⁄InfoSize
 = (osInfo);

885 
	`GëVîsi⁄Ex
(&
osInfo
);

889 i‡(
osInfo
.
dwPœtf‹mId
 =
VER_PLATFORM_WIN32s
 || osInfo.dwPœtf‹mId =
VER_PLATFORM_WIN32_WINDOWS
)

890 
wc
.
hIn°™˚
=
	`GëModuÀH™dÀ
(
NULL
);

892 
wc
.
hIn°™˚
=
	`GëCuºítPro˚ss
();

894 
wc
.
hIn°™˚
=
	`GëModuÀH™dÀ
(
NULL
);

897 
HTö°™˚
 = 
wc
.
hIn°™˚
;

898 
HT˛ass
 = 
	`Regi°îCœss
(&
wc
);

899 i‡(!
HT˛ass
) {

900 
	`HTTRACE
(
THD_TRACE
, "HTLibInô.. C™'àRegi°îCœs†\"%s\"\n" 
_
 
˛assName
);

901  
NO
;

903 i‡(!(
HTSockëWö
 = 
	`Cª©eWödow
(
˛assName
, "WWW_WIN_ASYNC", 
WS_POPUP
, 
CW_USEDEFAULT
, CW_USEDEFAULT,

904 
CW_USEDEFAULT
, CW_USEDEFAULT, 0, 0, 
wc
.
hIn°™˚
,0))) {

905 #ifde‡
HTDEBUG


906 
•a˚
[50];

907 
	`HTTRACE
(
THD_TRACE
, "HTLibInit.. Can't Create Window \"WWW_WIN_ASYNC\" -Érror:");

908 
	`•rötf
(
•a˚
, "%ld\n", 
	`GëLa°Eº‹
());

909 
	`HTTRACE
(
THD_TRACE
, 
•a˚
);

911  
NO
;

913 
HTwöMsg
 = 
WM_USER
;

916 
	`HTTimî_ªgi°îSëTimîCÆlback
(
Timî_£tWödowsTimî
);

917 
	`HTTimî_ªgi°îDñëeTimîCÆlback
(
Timî_dñëeWödowsTimî
);

921 #ifde‡
_WINSOCKAPI_


926 
WSADATA
 
wßd©a
;

927 i‡(
	`WSASèπup
(
DESIRED_WINSOCK_VERSION
, &
wßd©a
)) {

928 
	`HTTRACE
(
THD_TRACE
, "HTEventInit. Can't initialize WinSoc\n");

929 
	`WSACÀ™up
();

930  
NO
;

932 i‡(
wßd©a
.
wVîsi⁄
 < 
MINIMUM_WINSOCK_VERSION
) {

933 
	`HTTRACE
(
THD_TRACE
, "HTEventInit. Bad version of WinSoc\n");

934 
	`WSACÀ™up
();

935  
NO
;

937 
	`HTTRACE
(
APP_TRACE
, "HTEvítInô. Usög WöSo¯vîsi⁄ \"%s\".\n" 
_


938 
wßd©a
.
szDes¸ùti⁄
);

942 
	`HTEvít_£tRegi°îCÆlback
(
HTEvítLi°_ªgi°î
);

943 
	`HTEvít_£tUƒegi°îCÆlback
(
HTEvítLi°_uƒegi°î
);

944  
YES
;

945 
	}
}

947 
PUBLIC
 
BOOL
 
	$HTEvítTîmö©e
 ()

949 #ifde‡
_WINSOCKAPI_


950 
	`WSACÀ™up
();

953 #ifde‡
WWW_WIN_ASYNC


954 
	`De°royWödow
(
HTSockëWö
);

955 
	`Uƒegi°îCœss
((
LPCTSTR
)
HT˛ass
, 
HTö°™˚
);

958  
YES
;

959 
	}
}

	@Library/src/HTEvtLst.h

45 #i‚de‡
HTEVTLST_H


46 
	#HTEVTLST_H


	)

48 
	~"wwwsys.h
"

49 
	~"HTEvít.h
"

50 
	~"HTReq.h
"

58 #i‡
deföed
(
WWW_WIN_ASYNC
Ë|| deföed(
WWW_WIN_DLL
)

59 
BOOL
 
HTEvítLi°_wöH™dÀ
 (
HTReque°
 * 
ªque°
);

60 
BOOL
 
HTEvítLi°_£tWöH™dÀ
 (
HWND
 
wödow
, 
mesßge
);

61 
HWND
 
HTEvítLi°_gëWöH™dÀ
 (* 
pMesßge
);

62 
LRESULT
 
CALLBACK
 
AsyncWödowProc
(
HWND
 
hwnd
, 
UINT
 
uMsg
, 
WPARAM
 
wP¨am
, 
LPARAM
 
lP¨am
);

83 
HTEvít_ªgi°îCÆlback
 
HTEvítLi°_ªgi°î
;

96 
HTEvít_uƒegi°îCÆlback
 
HTEvítLi°_uƒegi°î
;

107 
HTEvítLi°_uƒegi°îAŒ
 ();

118 
HTEvítLi°_di•©ch
 (
SOCKET
 
s
, 
HTEvítTy≥
 
ty≥
, 
ms_t
 
now
);

119 
HTEvít
 * 
HTEvítLi°_lookup
 (
SOCKET
 
s
, 
HTEvítTy≥
 
ty≥
);

133 
BOOL
 
HTEvítInô
 ();

134 
BOOL
 
HTEvítTîmö©e
 ();

146 
HTEvítLi°_√wLo›
 ();

154 
HTEvítLi°_lo›
 (
HTReque°
 * 
ªque°
);

167 
HTEvítLi°_°›Lo›
 ();

	@Library/src/HTFSave.c

23 
	~"wwwsys.h
"

24 
	~"WWWUtû.h
"

25 
	~"WWWC‹e.h
"

26 
	~"HTBöd.h
"

27 
	~"HTFWrôe.h
"

28 
	~"HTFSave.h
"

30 
	s_HTSåóm
 {

31 c⁄° 
HTSåómCœss
 *
	miß
;

32 
HTSåóm
 * 
	mèrgë
;

33 * 
	míd_comm™d
;

34 
BOOL
 
	mªmove_⁄_˛o£
;

35 * 
	mfûíame
;

36 
HTReque°
 * 
	mªque°
;

37 
HTReque°CÆlback
 * 
	mˇŒback
;

40 
	#DEFAULT_LAST_SEGMENT
 "ödex"

	)

44 
PRIVATE
 
	$HTFûeSave_Êush
 (
HTSåóm
 * 
me
)

46  (*
me
->
èrgë
->
iß
->
Êush
)(me->target);

47 
	}
}

49 
PRIVATE
 
	$HTFûeSave_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

51  (*
me
->
èrgë
->
iß
->
put_ch¨a˘î
)(me->èrgë, 
c
);

52 
	}
}

54 
PRIVATE
 
	$HTFûeSave_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

56  (*
me
->
èrgë
->
iß
->
put_°rög
)(me->èrgë, 
s
);

57 
	}
}

59 
PRIVATE
 
	$HTFûeSave_wrôe
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
)

61  (*
me
->
èrgë
->
iß
->
put_block
)(me->èrgë, 
b
, 
l
);

62 
	}
}

64 
PRIVATE
 
	$HTFûeSave_‰ì
 (
HTSåóm
 * 
me
)

66 i‡(
me
) {

67 (*
me
->
èrgë
->
iß
->
_‰ì
)(me->target);

68 #ifde‡
HAVE_SYSTEM


69 i‡(
me
->
íd_comm™d
Ë
	`sy°em
(me->end_command);

71 i‡(
me
->
ˇŒback
Ë(*me->ˇŒback)(me->
ªque°
, me->
fûíame
);

72 i‡(
me
->
ªmove_⁄_˛o£
Ë
	`REMOVE
(me->
fûíame
);

73 
	`HT_FREE
(
me
->
íd_comm™d
);

74 
	`HT_FREE
(
me
->
fûíame
);

75 
	`HT_FREE
(
me
);

77  
HT_OK
;

78 
	}
}

80 
PRIVATE
 
	$HTFûeSave_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

82 
	`HTTRACE
(
STREAM_TRACE
, "Save File.. ABORTING...\n");

83 i‡(
me
) {

84 (*
me
->
èrgë
->
iß
->
ab‹t
)(me->èrgë, 
e
);

85 i‡(
me
->
ªmove_⁄_˛o£
Ë
	`REMOVE
(me->
fûíame
);

86 
	`HT_FREE
(
me
->
íd_comm™d
);

87 
	`HT_FREE
(
me
->
fûíame
);

88 
	`HT_FREE
(
me
);

90  
HT_ERROR
;

91 
	}
}

93 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTFûeSave
 =

96 
HTFûeSave_Êush
,

97 
HTFûeSave_‰ì
,

98 
HTFûeSave_ab‹t
,

99 
HTFûeSave_put_ch¨a˘î
,

100 
HTFûeSave_put_°rög
,

101 
HTFûeSave_wrôe


104 
PUBLIC
 
HTSåóm
 * 
	$HTFûeSave_√w
 (
HTReque°
 * 
ªque°
, 
FILE
 * 
Â
,

105 
BOOL
 
Àave_›í
)

107 
HTSåóm
 * 
me
 = 
NULL
;

108 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

109 
	`HT_OUTOFMEM
("HTFileSave_new");

110 
me
->
iß
 = &
HTFûeSave
;

111 
me
->
èrgë
 = 
	`HTFWrôî_√w
(
ªque°
, 
Â
, 
Àave_›í
);

112 
me
->
ªque°
 =Ñequest;

113  
me
;

114 
	}
}

123 
PRIVATE
 * 
	$gë_fûíame
 (* 
ba£
, c⁄° * 
uri
,

124 c⁄° * 
suffix
, 
BOOL
 
u£_œ°_£gmít
)

126 * 
∑th
 = 
NULL
;

127 i‡(
u£_œ°_£gmít
) {

128 * 
uri_∑th
 = 
NULL
;

129 i‡(
uri
 && (
uri_∑th
 = 
	`HTP¨£
(uri, "", 
PARSE_PATH
|
PARSE_PUNCTUATION
))) {

130 * 
œ°_£gmít
 = 
	`°ºchr
(
uri_∑th
, '/');

131 
BOOL
 
¶ash
 = (
ba£
 && *(ba£+
	`°æí
(ba£)-1)==
DIR_SEPARATOR_CHAR
);

132 i‡(
œ°_£gmít
 && *(last_segment+1)) {

133 
	`SåAŒocMC›y
(&
∑th
, 
ba£
 ? base : "",

134 
¶ash
 ? "" : 
DIR_SEPARATOR_STR
, ++
œ°_£gmít
, 
NULL
);

136 
	`SåAŒocMC›y
(&
∑th
, 
ba£
 ? base : "",

137 
¶ash
 ? "" : 
DIR_SEPARATOR_STR
, 
DEFAULT_LAST_SEGMENT
,

138 
suffix
 ? suffix : "", 
NULL
);

142 
∑th
 = 
	`HTGëTmpFûeName
(
ba£
);

143 i‡(
∑th
 && 
suffix
Ë
	`SåAŒocC©
(path, suffix);

146 
	`HTTRACE
(
STREAM_TRACE
, "Savêfûe... Temp‹¨ay fûê`%s\'\n" 
_
 
∑th
 ?Öath : "<null>");

147  
∑th
;

148 
	}
}

156 
PUBLIC
 
HTSåóm
* 
	$HTSaveLoˇŒy
 (
HTReque°
 * 
ªque°
,

157 * 
∑øm
,

158 
HTF‹m©
 
öput_f‹m©
,

159 
HTF‹m©
 
ouçut_f‹m©
,

160 
HTSåóm
 * 
ouçut_°ªam
)

162 
FILE
 * 
Â
 = 
NULL
;

163 * 
fûíame
 = 
NULL
;

164 
HTU£rProfûe
 * 
up
 = 
	`HTReque°_u£rProfûe
(
ªque°
);

165 * 
tm¥oŸ
 = 
	`HTU£rProfûe_tmp
(
up
);

166 i‡(
	`HTLib_£cuª
()) {

167 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_NON_FATAL
, 
NO
, 
HTERR_UNAUTHORIZED
,

168 
NULL
, 0, "HTSaveLocally");

169  
	`HTEº‹Såóm
();

171 i‡(!
tm¥oŸ
) {

172 
	`HTTRACE
(
STREAM_TRACE
, "Save File...Åurned off\n");

173  
	`HTEº‹Såóm
();

178 
HTAÀπCÆlback
 *
cbf
 = 
	`HTAÀπ_föd
(
HT_A_PROMPT
);

179 
HTP¨ítAnch‹
 *
™ch‹
 = (HTP¨ítAnch‹ *Ë
	`HTReque°_™ch‹
(
ªque°
);

187 i‡(
cbf
) {

188 
HTAÀπP¨
 * 
ª∂y
 = 
	`HTAÀπ_√wRïly
();

189 * 
suffix
 = 
	`HTBöd_gëSuffix
(
™ch‹
);

190 * 
deÊt
 = 
	`gë_fûíame
(
tm¥oŸ
, 
	`HTAnch‹_physiˇl
(
™ch‹
), 
suffix
, 
YES
);

191 i‡((*
cbf
)(
ªque°
, 
HT_A_PROMPT
, 
HT_MSG_FILENAME
,
deÊt
,
NULL
,
ª∂y
))

192 
fûíame
 = 
	`HTAÀπ_ª∂yMesßge
(
ª∂y
);

193 
	`HTAÀπ_dñëeRïly
(
ª∂y
);

194 
	`HT_FREE
(
suffix
);

195 
	`HT_FREE
(
deÊt
);

197 i‡(
fûíame
) {

198 i‡((
Â
 = 
	`f›í
(
fûíame
, "wb")Ë=
NULL
) {

199 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_NON_FATAL
, 
NO
, 
HTERR_NO_FILE
,

200 
fûíame
, 
	`°æí
(filename),"HTSaveLocally");

201 
	`HT_FREE
(
fûíame
);

202  
	`HTEº‹Såóm
();

204 } i‡(
cbf
) {

205 
	`HTTRACE
(
STREAM_TRACE
, "Save File... No fileÇame -Érror stream\n");

206  
	`HTEº‹Såóm
();

208 
	`HTTRACE
(
STREAM_TRACE
, "Save File... No fileÇame - black hole\n");

209  
	`HTBœckHﬁe
();

214 i‡(
Â
) {

215 
HTSåóm
 * 
me
 = 
	`HTFûeSave_√w
(
ªque°
, 
Â
, 
NO
);

216 
me
->
fûíame
 = filename;

217  
me
;

219 
	`HT_FREE
(
fûíame
);

220  
	`HTEº‹Såóm
();

221 
	}
}

231 
PUBLIC
 
HTSåóm
* 
	$HTSaveAndExecuã
 (
HTReque°
 * 
ªque°
,

232 * 
∑øm
,

233 
HTF‹m©
 
öput_f‹m©
,

234 
HTF‹m©
 
ouçut_f‹m©
,

235 
HTSåóm
 * 
ouçut_°ªam
)

237 
FILE
 * 
Â
 = 
NULL
;

238 * 
fûíame
 = 
NULL
;

239 
HTU£rProfûe
 * 
up
 = 
	`HTReque°_u£rProfûe
(
ªque°
);

240 * 
tm¥oŸ
 = 
	`HTU£rProfûe_tmp
(
up
);

241 i‡(
	`HTLib_£cuª
()) {

242 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_NON_FATAL
, 
NO
, 
HTERR_UNAUTHORIZED
,

243 
NULL
, 0, "HTSaveLocally");

244  
	`HTEº‹Såóm
();

246 i‡(!
tm¥oŸ
) {

247 
	`HTTRACE
(
STREAM_TRACE
, "Save File...Åurned off");

248  
	`HTEº‹Såóm
();

253 
HTP¨ítAnch‹
 *
™ch‹
 = (HTP¨ítAnch‹ *Ë
	`HTReque°_™ch‹
(
ªque°
);

254 *
suffix
 = 
	`HTBöd_gëSuffix
(
™ch‹
);

255 
fûíame
 = 
	`gë_fûíame
(
tm¥oŸ
, 
	`HTAnch‹_physiˇl
(
™ch‹
), 
suffix
, 
NO
);

256 
	`HT_FREE
(
suffix
);

257 i‡(
fûíame
) {

258 i‡((
Â
 = 
	`f›í
(
fûíame
, "wb")Ë=
NULL
) {

259 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_NON_FATAL
, 
NO
, 
HTERR_NO_FILE
,

260 
fûíame
, 
	`°æí
(filename),"HTSaveAndExecute");

261 
	`HT_FREE
(
fûíame
);

262  
	`HTEº‹Såóm
();

265 
	`HTTRACE
(
STREAM_TRACE
, "Save File... No fileÇame\n");

266  
	`HTEº‹Såóm
();

271 i‡(
Â
) {

272 
HTSåóm
 * 
me
 = 
	`HTFûeSave_√w
(
ªque°
, 
Â
, 
NO
);

273 
me
->
fûíame
 = filename;

274 i‡(
∑øm
) {

275 i‡((
me
->
íd_comm™d
 = (*Ë
	`HT_MALLOC
((
	`°æí
((*Ë
∑øm
Ë+ 10 + 3*°æí(
fûíame
)))Ë=
NULL
)

276 
	`HT_OUTOFMEM
("SaveAndExecute");

277 
	`•rötf
 (
me
->
íd_comm™d
,

278 (*)
∑øm
, 
fûíame
, filename, filename);

280  
me
;

282 
	`HT_FREE
(
fûíame
);

283  
	`HTEº‹Såóm
();

284 
	}
}

296 
PUBLIC
 
HTSåóm
* 
	$HTSaveAndCÆlback
 (
HTReque°
 * 
ªque°
,

297 * 
∑øm
,

298 
HTF‹m©
 
öput_f‹m©
,

299 
HTF‹m©
 
ouçut_f‹m©
,

300 
HTSåóm
 * 
ouçut_°ªam
)

302 
HTSåóm
 * 
me
 = 
	`HTSaveAndExecuã
(
ªque°
, 
∑øm
, 
öput_f‹m©
,

303 
ouçut_f‹m©
, 
ouçut_°ªam
);

304 i‡(
me
) {

305 
me
->
ˇŒback
 = 
	`HTReque°_ˇŒback
(
ªque°
);

306  
me
;

308  
	`HTEº‹Såóm
();

309 
	}
}

	@Library/src/HTFSave.h

28 #i‚de‡
HTFSAVE_H


29 
	#HTFSAVE_H


	)

31 
	~"HTFWrôe.h
"

43 
HTC⁄vîãr
 
HTSaveAndExecuã
, 
HTSaveLoˇŒy
, 
HTSaveAndCÆlback
;

	@Library/src/HTFTP.c

68 
	~"wwwsys.h
"

69 
	~"WWWUtû.h
"

70 
	~"WWWC‹e.h
"

71 
	~"WWWSåóm.h
"

72 
	~"WWWTøns.h
"

73 
	~"WWWFûe.h
"

74 
	~"HTReqM™.h
"

75 
	~"HTNëM™.h
"

76 
	~"HTFTPDú.h
"

77 
	~"HTFTP.h
"

79 #i‚de‡
FTP_PORT


80 
	#FTP_PORT
 21

	)

81 
	#FTP_DATA
 20

	)

84 
	#WWW_FTP_CLIENT
 "libwww@"

	)

85 
	#FTP_DIR
(
me
Ë((me)->
ty≥
=='L' || (me)->ty≥=='N')

	)

90 
	e_HTFTPSèã
 {

91 
	mFTP_SUCCESS
 = -2,

92 
	mFTP_ERROR
 = -1,

93 
	mFTP_BEGIN
 = 0,

94 
	mFTP_NEED_CCON
,

95 
	mFTP_NEED_LOGIN
,

96 
	mFTP_NEED_DCON
,

97 
	mFTP_NEED_DATA
,

98 
	mFTP_NEED_SERVER


99 } 
	tHTFTPSèã
;

101 
	s_·p_˘æ
 {

102 
HTChunk
 * 
	mcmd
;

103 
	mªpcode
;

104 * 
	mª∂y
;

105 * 
	muid
;

106 * 
	m∑sswd
;

107 * 
	maccou¡
;

108 
HTFTPSèã
 
	m°©e
;

109 
	msub°©e
;

110 
BOOL
 
	m£¡
;

111 
BOOL
 
	mcwd
;

112 
BOOL
 
	mª£t
;

113 
FTPSîvîTy≥
 
	m£rvî
;

114 
HTNë
 * 
	m˙ë
;

115 
HTNë
 * 
	md√t
;

116 
BOOL
 
	mÆªadyLoggedIn
;

117 } 
	t·p_˘æ
;

119 
	s_·p_d©a
 {

120 
	mho°
[30];

121 * 
	mfûe
;

122 * 
	moff£t
;

123 
BOOL
 
	m∑sv
;

124 
	mty≥
;

125 
	mcom∂ëe
;

126 
BOOL
 
	m°ªam_îr‹
;

127 } 
	t·p_d©a
;

129 
	s_HTSåóm
 {

130 c⁄° 
HTSåómCœss
 * 
	miß
;

131 
HTSåóm
 * 
	mèrgë
;

132 
HTReque°
 * 
	mªque°
;

133 
·p_˘æ
 * 
	m˘æ
;

134 
HTEOLSèã
 
	m°©e
;

135 
HTChunk
 * 
	mwñcome
;

136 
BOOL
 
	mjunk
;

137 
BOOL
 
	mfú°_löe
;

138 
	mbuf„r
[
MAX_FTP_LINE
+1];

139 
	mbuÊí
;

140 
HTHo°
 * 
	mho°
;

143 
	s_HTI≈utSåóm
 {

144 c⁄° 
HTI≈utSåómCœss
 * 
	miß
;

148 
	e_FTPD©aC⁄
 {

149 
	mFTP_DATA_PASV
 = 0x1,

150 
	mFTP_DATA_PORT
 = 0x2

151 } 
	tFTPD©aC⁄
;

153 
PRIVATE
 
FTPD©aC⁄
 
	gFTPMode
 = 
FTP_DATA_PORT
;

156 
PRIVATE
 
FTPTøns„rMode
 
	gg_FTPTøns„rMode
 = 
FTP_DEFAULT_TRANSFER_MODE
;

157 
PRIVATE
 
FTPC⁄åﬁMode
 
	gg_FTPC⁄åﬁMode
 = 
FTP_DEFAULT_CONTROL_MODE
;

168 
PRIVATE
 
	$FTPCÀ™up
 (
HTReque°
 * 
ªque°
, 
°©us
)

170 i‡(
ªque°
) {

171 
HTNë
 * 
˙ë
 = 
	`HTReque°_√t
(
ªque°
);

172 
·p_˘æ
 * 
˘æ
 = (·p_˘æ *Ë
	`HTNë_c⁄ãxt
(
˙ë
);

173 
HTSåóm
 * 
öput
 = 
	`HTReque°_öputSåóm
(
ªque°
);

175 i‡(
°©us
 =
HT_INTERRUPTED
) {

176 
HTAÀπCÆlback
 * 
cbf
 = 
	`HTAÀπ_föd
(
HT_PROG_INTERRUPT
);

177 i‡(
cbf
Ë(*cbf)(
ªque°
, 
HT_PROG_INTERRUPT
,

178 
HT_MSG_NULL
, 
NULL
, NULL, NULL);

179 } i‡(
°©us
 =
HT_TIMEOUT
) {

180 
HTAÀπCÆlback
 * 
cbf
 = 
	`HTAÀπ_föd
(
HT_PROG_TIMEOUT
);

181 i‡(
cbf
Ë(*cbf)(
ªque°
, 
HT_PROG_TIMEOUT
,

182 
HT_MSG_NULL
, 
NULL
, NULL, NULL);

183 } i‡(
°©us
 =
HT_LOADED
) {

184 
HTAÀπCÆlback
 * 
cbf
 = 
	`HTAÀπ_föd
(
HT_PROG_DONE
);

185 i‡(
cbf
Ë(*cbf)(
ªque°
, 
HT_PROG_DONE
,

186 
HT_MSG_NULL
, 
NULL
, NULL, NULL);

190 i‡(!
	`HTReque°_isDe°ö©i⁄
(
ªque°
Ë&& 
öput
) {

191 i‡(
°©us
 =
HT_INTERRUPTED
)

192 (*
öput
->
iß
->
ab‹t
)(öput, 
NULL
);

194 (*
öput
->
iß
->
_‰ì
)(input);

198 i‡(
˙ë
 && 
˘æ
) {

199 
HTNë
 * 
d√t
 = 
˘æ
->dnet;

200 
·p_d©a
 * 
d©a
 = (·p_d©®*Ë
	`HTNë_c⁄ãxt
(
d√t
);

201 
	`HTChunk_dñëe
(
˘æ
->
cmd
);

202 
	`HT_FREE
(
˘æ
->
ª∂y
);

203 
	`HT_FREE
(
˘æ
->
uid
);

204 
	`HT_FREE
(
˘æ
->
∑sswd
);

205 
	`HT_FREE
(
˘æ
->
accou¡
);

206 
	`HT_FREE
(
˘æ
);

207 i‡(
d√t
 && 
d©a
) {

208 
	`HT_FREE
(
d©a
->
fûe
);

209 
	`HT_FREE
(
d©a
);

213 i‡(
°©us
 =
HT_LOADED
)

214 
	`HTAnch‹_£tLígth
(
	`HTReque°_™ch‹
(
ªque°
), 
	`HTNë_byãsRód
(
d√t
));

217 
	`HTCh™√l_dñëeI≈ut
(
	`HTNë_ch™√l
(
d√t
), 
°©us
);

218 
	`HTCh™√l_dñëeOuçut
(
	`HTNë_ch™√l
(
d√t
), 
°©us
);

219 
	`HTNë_dñëe
(
d√t
, 
HT_IGNORE
);

222 
	`HTNë_dñëe
(
˙ë
, 
°©us
);

223  
YES
;

225  
NO
;

226 
	}
}

234 
PRIVATE
 
	$SˇnRe•⁄£
 (
HTSåóm
 * 
me
)

236 
ª∂y
 = 0;

237 
c⁄t
 = '\0';

238 *
±r
 = 
me
->
buf„r
+4;

239 *(
me
->
buf„r
+me->
buÊí
) = '\0';

242 
me
->
˘æ
->
ÆªadyLoggedIn
 = 
NO
;

244 i‡(
	`isdigô
((Ë*(
me
->
buf„r
))Ë
	`ssˇnf
(me->buf„r, "%d%c", &
ª∂y
, &
c⁄t
);

245 i‡(
me
->
fú°_löe
) {

246 
	`HTTRACE
(
PROT_TRACE
, "FTP Rx...... `%s\'\n" 
_
 
me
->
buf„r
);

247 i‡(!
ª∂y
Ë 
HT_ERROR
;

248 
me
->
fú°_löe
 = 
NO
;

249 
me
->
˘æ
->
ªpcode
 = 
ª∂y
;

250 
	`SåAŒocC›y
(
me
->
˘æ
->
ª∂y
, 
±r
);

253 i‡–(
ª∂y
 =530Ë&& (
	`HTSåCa£Så
(
me
->
buf„r
, "Æªady"Ë!
NULL
) ) {

254 
me
->
˘æ
->
ÆªadyLoggedIn
 = 
YES
;

256 
me
->
˘æ
->
ÆªadyLoggedIn
 = 
NO
;

260 
	`HTChunk_puts
(
me
->
wñcome
, 
±r
);

261 
	`HTChunk_putc
(
me
->
wñcome
, '\n');

263 
me
->
buÊí
 = 0;

264 
me
->
°©e
 = 
EOL_BEGIN
;

265 i‡(
c⁄t
 != '-') {

266 
me
->
fú°_löe
 = 
YES
;

267  
HT_LOADED
;

269  
HT_OK
;

270 
	}
}

276 
PRIVATE
 
	$FTPSètus_put_block
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
)

278 
°©us
;

279 
	`HTHo°_£tC⁄sumed
(
me
->
ho°
, 
l
);

280 
l
-- > 0) {

281 i‡(
me
->
°©e
 =
EOL_FCR
) {

282 i‡(*
b
 =
LF
) {

283 i‡(!
me
->
junk
) {

284 i‡((
°©us
 = 
	`SˇnRe•⁄£
(
me
)Ë!
HT_OK
)  status;

286 
me
->
buÊí
 = 0;

287 
me
->
junk
 = 
NO
;

290 } i‡(*
b
 =
CR
) {

291 
me
->
°©e
 = 
EOL_FCR
;

292 } i‡(*
b
 =
LF
) {

293 i‡(!
me
->
junk
) {

294 i‡((
°©us
 = 
	`SˇnRe•⁄£
(
me
)Ë!
HT_OK
)  status;

296 
me
->
buÊí
 = 0;

297 
me
->
junk
 = 
NO
;

300 *(
me
->
buf„r
+me->
buÊí
++Ë*
b
;

301 i‡(
me
->
buÊí
 >
MAX_FTP_LINE
) {

302 
	`HTTRACE
(
PROT_TRACE
, "FTP Status.. LineÅooÜong - chopped\n");

303 
me
->
junk
 = 
YES
;

304 i‡((
°©us
 = 
	`SˇnRe•⁄£
(
me
)Ë!
HT_OK
) {

305 
me
->
junk
 = 
NO
;

306  
°©us
;

310 
b
++;

312  
HT_OK
;

313 
	}
}

315 
PRIVATE
 
	$FTPSètus_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

317  
	`FTPSètus_put_block
(
me
, 
s
, (Ë
	`°æí
(s));

318 
	}
}

320 
PRIVATE
 
	$FTPSètus_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

322  
	`FTPSètus_put_block
(
me
, &
c
, 1);

323 
	}
}

325 
PRIVATE
 
	$FTPSètus_Êush
 (
HTSåóm
 * 
me
)

327  (*
me
->
èrgë
->
iß
->
Êush
)(me->target);

328 
	}
}

330 
PRIVATE
 
	$FTPSètus_‰ì
 (
HTSåóm
 * 
me
)

332 
°©us
 = 
HT_OK
;

333 i‡(
me
->
èrgë
) {

334 i‡((
°©us
 = (*
me
->
èrgë
->
iß
->
_‰ì
)(me->èrgë)Ë=
HT_WOULD_BLOCK
)

335  
HT_WOULD_BLOCK
;

337 
	`HTChunk_dñëe
(
me
->
wñcome
);

338 
	`HT_FREE
(
me
);

339  
HT_OK
;

340 
	}
}

342 
PRIVATE
 
	$FTPSètus_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

344 i‡(
me
->
èrgë
)

345 (*
me
->
èrgë
->
iß
->
ab‹t
)(me->èrgë, 
e
);

346 
	`HTChunk_dñëe
(
me
->
wñcome
);

347 
	`HT_FREE
(
me
);

348 
	`HTTRACE
(
PROT_TRACE
, "FTPStatus... ABORTING...\n");

349  
HT_ERROR
;

350 
	}
}

355 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gFTPSètusCœss
 =

358 
FTPSètus_Êush
,

359 
FTPSètus_‰ì
,

360 
FTPSètus_ab‹t
,

361 
FTPSètus_put_ch¨a˘î
,

362 
FTPSètus_put_°rög
,

363 
FTPSètus_put_block


366 
PRIVATE
 
HTSåóm
 * 
	$FTPSètus_√w
 (
HTReque°
 * 
ªque°
, 
·p_˘æ
 * 
˘æ
, 
HTHo°
 * 
ho°
)

368 
HTSåóm
 * 
me
;

369 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

370 
	`HT_OUTOFMEM
("FTPStatus_new");

371 
me
->
iß
 = &
FTPSètusCœss
;

372 
me
->
ªque°
 =Ñequest;

373 
me
->
fú°_löe
 = 
YES
;

374 
me
->
wñcome
 = 
	`HTChunk_√w
(256);

375 
me
->
˘æ
 = ctrl;

376 
me
->
°©e
 = 
EOL_BEGIN
;

377 
me
->
ho°
 = host;

378  
me
;

379 
	}
}

385 
PRIVATE
 
	$SídComm™d
 (
HTReque°
 *
ªque°
, 
·p_˘æ
 *
˘æ
,

386 *
tokí
, *
∑rs
)

388 
Àn
 = 
	`°æí
(
tokí
Ë+ (
∑rs
 ? strlen(pars)+1:0) + 2;

389 
HTSåóm
 * 
öput
 = 
	`HTReque°_öputSåóm
(
ªque°
);

390 
	`HTChunk_£tSize
(
˘æ
->
cmd
, 
Àn
);

391 i‡(
∑rs
 && *pars)

392 
	`•rötf
(
	`HTChunk_d©a
(
˘æ
->
cmd
), "%†%s%c%c", 
tokí
, 
∑rs
, 
CR
, 
LF
);

394 
	`•rötf
(
	`HTChunk_d©a
(
˘æ
->
cmd
), "%s%c%c", 
tokí
, 
CR
, 
LF
);

395 
	`HTTRACE
(
PROT_TRACE
, "FTP Tx...... %s" 
_
 
	`HTChunk_d©a
(
˘æ
->
cmd
));

396  (*
öput
->
iß
->
put_block
)(öput, 
	`HTChunk_d©a
(
˘æ
->
cmd
), 
Àn
);

397 
	}
}

406 
PRIVATE
 
BOOL
 
	$HTFTPP¨£URL
 (
HTReque°
 * 
ªque°
,

407 *
uæ
, 
·p_˘æ
 *
˘æ
, 
·p_d©a
 *
d©a
)

409 *
logö
 = 
	`HTP¨£
(
uæ
, "", 
PARSE_HOST
);

410 *
∑th
 = 
	`HTP¨£
(
uæ
, "", 
PARSE_PATH
+
PARSE_PUNCTUATION
);

411 *
±r
 = 
	`°rchr
(
logö
, '@');

412 i‡(
±r
) {

413 *
∑sswd
;

414 *
±r
 = '\0';

415 i‡((
∑sswd
 = 
	`°rchr
(
logö
, ':'))) {

416 *
∑sswd
++ = '\0';

417 
	`HTUnEsˇ≥
(
∑sswd
);

418 
	`SåAŒocC›y
(
˘æ
->
∑sswd
,Öasswd);

420 
	`HTUnEsˇ≥
(
logö
);

421 
	`SåAŒocC›y
(
˘æ
->
uid
, 
logö
);

422 } i‡(
g_FTPC⁄åﬁMode
 & 
FTP_ALWAYS_ASK_UID_PW
) {

423 
˘æ
->
uid
=
NULL
;

424 
˘æ
->
∑sswd
=
NULL
;

426 
HTU£rProfûe
 * 
up
 = 
	`HTReque°_u£rProfûe
(
ªque°
);

427 c⁄° * 
maûaddªss
 = 
	`HTU£rProfûe_emaû
(
up
);

428 
	`SåAŒocC›y
(
˘æ
->
uid
, "anonymous");

429 i‡(
maûaddªss
)

430 
	`SåAŒocC›y
(
˘æ
->
∑sswd
, 
maûaddªss
);

432 
	`SåAŒocC›y
(
˘æ
->
∑sswd
, 
WWW_FTP_CLIENT
);

434 
	`HTTRACE
(
PROT_TRACE
, "FTPP¨£.... uid `%s\'Öw `%s\'\n" 
_


435 
˘æ
->
uid
 ? cål->uid : "<nuŒ>" 
_


436 
˘æ
->
∑sswd
 ? ctrl->passwd : "<null>");

442 i‡((
±r
 = 
	`°rchr
(
∑th
, ';')Ë!
NULL
) {

443 *
±r
 = '\0';

444 i‡(
	`°∫ˇ£comp
(
±r
, ";type=", 6))

445 
d©a
->
ty≥
 = 
	`TOUPPER
(*(
±r
+6));

446 i‡(*(
±r
-1) == '/')

447 
d©a
->
ty≥
 = 'D';

448 } i‡(*(
∑th
+
	`°æí
(path)-1) == '/') {

449 *(
∑th
+
	`°æí
(path)-1) = '\0';

450 
d©a
->
ty≥
 = 'D';

452 
	`HTTRACE
(
PROT_TRACE
, "FTPP¨£.... D©©y≥ %c\n" 
_
 
d©a
->
ty≥
 ? data->type : '?');

453 
	`SåAŒocC›y
(
d©a
->
fûe
, 
∑th
);

454 
d©a
->
off£t
 = d©a->
fûe
;

455 
	`HT_FREE
(
logö
);

456 
	`HT_FREE
(
∑th
);

457  
YES
;

458 
	}
}

465 
PRIVATE
 
BOOL
 
	$FTPLi°Ty≥
 (
·p_d©a
 * 
d©a
, 
FTPSîvîTy≥
 
ty≥
)

467 i‡(!
d©a
Ë 
NO
;

468 
ty≥
) {

469 
FTP_GENERIC
: 
d©a
->
ty≥
='N'; ;

470 
FTP_MACHTEN
: 
d©a
->
ty≥
='L'; ;

471 
FTP_UNIX
: 
d©a
->
ty≥
='L'; ;

472 
FTP_VMS
: 
d©a
->
ty≥
='L'; ;

473 
FTP_CMS
: 
d©a
->
ty≥
='N'; ;

474 
FTP_DCTS
: 
d©a
->
ty≥
='N'; ;

475 
FTP_TCPC
: 
d©a
->
ty≥
='N'; ;

476 
FTP_PETER_LEWIS
: 
d©a
->
ty≥
='L'; ;

477 
FTP_NCSA
: 
d©a
->
ty≥
='N'; ;

478 
FTP_WINNT
: 
d©a
->
ty≥
='L'; ;

479 : 
d©a
->
ty≥
='N'; ;

481  
YES
;

482 
	}
}

489 
PRIVATE
 
BOOL
 
	$Ac˚±D©aSockë
 (
HTNë
 *
˙ë
, HTNë *
d√t
, 
·p_d©a
 *
d©a
)

491 i‡(
	`HTHo°_li°í
(
NULL
, 
d√t
, "·p://loˇlho°:0"Ë=
HT_ERROR
)

492  
NO
;

500 
SockA
 
loˇl_p‹t
, 
loˇl_ho°
;

501 
addr_size
 = (
loˇl_p‹t
);

502 
	`mem£t
((*Ë&
loˇl_ho°
, '\0', 
addr_size
);

503 
	`mem£t
((*Ë&
loˇl_p‹t
, '\0', 
addr_size
);

504 i‡(
	`gësock«me
(
	`HTNë_sockë
(
˙ë
),

505 (
sockaddr
 *Ë&
loˇl_ho°
, &
addr_size
) < 0 ||

506 
	`gësock«me
(
	`HTNë_sockë
(
d√t
),

507 (
sockaddr
 *Ë&
loˇl_p‹t
, &
addr_size
) < 0) {

508 
	`HTReque°_addSy°emEº‹
(
	`HTNë_ªque°
(
d√t
), 
ERR_FATAL
, 
so˚ºno
,

509 
NO
, "getsockname");

510  
NO
;

512 
	`HTTRACE
(
PROT_TRACE
, "FTP......... Thi†ho° i†`%s\'\n" 
_
 
	`HTI√tSåög
(&
loˇl_ho°
));

514 
u_l⁄g
 
addr
 = 
loˇl_ho°
.
sö_addr
.
s_addr
;

515 
u_sh‹t
 
p‹t
 = 
loˇl_p‹t
.
sö_p‹t
;

516 
	`•rötf
(
d©a
->
ho°
, "%d,%d,%d,%d,%d,%d",

517 ()*((*)(&
addr
)+0),

518 ()*((*)(&
addr
)+1),

519 ()*((*)(&
addr
)+2),

520 ()*((*)(&
addr
)+3),

521 ()*((*)(&
p‹t
)+0),

522 ()*((*)(&
p‹t
)+1));

525  
YES
;

526 
	}
}

535 
PRIVATE
 
	$HTFTPLogö
 (
HTReque°
 *
ªque°
, 
HTNë
 *
˙ë
, 
·p_˘æ
 *
˘æ
)

537 
°©us
;

538 
	e_°©e
 {

539 
SUB_ERROR
 = -2,

540 
SUB_SUCCESS
 = -1,

541 
NEED_SELECT
 = 0,

542 
NEED_GREETING
,

543 
NEED_REIN
,

544 
NEED_UID
,

545 
NEED_PASSWD
,

546 
NEED_ACCOUNT
,

547 
PROMPT_USER


548 } 
	t°©e
;

552 (
°©e
Ë
˘æ
->
sub°©e
) {

553 
NEED_SELECT
:

555 
HTAÀπCÆlback
 * 
cbf
 = 
	`HTAÀπ_föd
(
HT_PROG_LOGIN
);

556 i‡(
cbf
Ë(*cbf)(
ªque°
, 
HT_PROG_LOGIN
, 
HT_MSG_NULL
, 
NULL
, NULL, NULL);

557 
	`HTTRACE
(
PROT_TRACE
, "FTP Login...Çow in state NEED_SELECT\n");

558 
˘æ
->
sub°©e
 = cål->
ª£t
 ? 
NEED_REIN
 : 
NEED_GREETING
;

562 
NEED_GREETING
:

563 
	`HTTRACE
(
PROT_TRACE
, "FTP Login...Çow in state NEED_GREETING\n");

564 
°©us
 = 
	`HTHo°_ªad
(
	`HTNë_ho°
(
˙ë
), cnet);

565 i‡(
°©us
 =
HT_WOULD_BLOCK
)

566  
HT_WOULD_BLOCK
;

567 i‡(
°©us
 =
HT_LOADED
) {

568 i‡(
˘æ
->
ªpcode
/100 == 2) {

569 
˘æ
->
sub°©e
 = (˘æ->
uid
 && *ctrl->uid) ?

570 
NEED_UID
 : 
PROMPT_USER
;

572 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

575 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

579 
NEED_REIN
:

580 
	`HTTRACE
(
PROT_TRACE
, "FTP Login...Çow in state NEED_REIN\n");

581 i‡(!
˘æ
->
£¡
) {

582 
°©us
 = 
	`SídComm™d
(
ªque°
, 
˘æ
, "REIN", 
NULL
);

583 i‡(
°©us
 =
HT_WOULD_BLOCK
)

584  
HT_WOULD_BLOCK
;

585 i‡(
°©us
 =
HT_ERROR
)

586 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

587 
˘æ
->
£¡
 = 
YES
;

589 
°©us
 = 
	`HTHo°_ªad
(
	`HTNë_ho°
(
˙ë
), cnet);

590 i‡(
°©us
 =
HT_WOULD_BLOCK
)

591  
HT_WOULD_BLOCK
;

592 i‡(
°©us
 =
HT_LOADED
) {

597 i‡((
˘æ
->
ªpcode
/100 == 2) || (ctrl->repcode == 502)) {

598 
˘æ
->
sub°©e
 = (˘æ->
uid
 && *ctrl->uid) ?

599 
NEED_UID
 : 
PROMPT_USER
;

601 
˘æ
->
sub°©e
 = 
SUB_SUCCESS
;

604 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

606 
˘æ
->
£¡
 = 
NO
;

610 
NEED_UID
:

611 
	`HTTRACE
(
PROT_TRACE
, "FTP Login...Çow in state NEED_UID\n");

612 i‡(!
˘æ
->
£¡
) {

613 
°©us
 = 
	`SídComm™d
(
ªque°
, 
˘æ
, "USER", cål->
uid
);

614 i‡(
°©us
 =
HT_WOULD_BLOCK
)

615  
HT_WOULD_BLOCK
;

616 i‡(
°©us
 =
HT_ERROR
)

617 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

618 
˘æ
->
£¡
 = 
YES
;

620 
°©us
 = 
	`HTHo°_ªad
(
	`HTNë_ho°
(
˙ë
), cnet);

621 i‡(
°©us
 =
HT_WOULD_BLOCK
)

622  
HT_WOULD_BLOCK
;

623 i‡(
°©us
 =
HT_LOADED
) {

624 
code
 = 
˘æ
->
ªpcode
/100;

625 i‡(
code
 == 2)

626 
˘æ
->
sub°©e
 = 
SUB_SUCCESS
;

627 i‡(
code
 == 3) {

628 
˘æ
->
sub°©e
 = (˘æ->
∑sswd
 && *ctrl->passwd) ?

629 
NEED_PASSWD
 : 
PROMPT_USER
;

634 } i‡(
˘æ
->
ªpcode
 == 530) {

635 i‡(
˘æ
->
ÆªadyLoggedIn
 =
YES
) {

636 
˘æ
->
sub°©e
 = 
SUB_SUCCESS
;

637 
	`HTTRACE
(
PROT_TRACE
, "FTP Login... AlreadyÜogged in\n");

639 
˘æ
->
sub°©e
 = 
PROMPT_USER
;

640 
	`HTTRACE
(
PROT_TRACE
, "FTP Login... User Unknown\n");

645 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

647 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

648 
˘æ
->
£¡
 = 
NO
;

652 
NEED_PASSWD
:

653 
	`HTTRACE
(
PROT_TRACE
, "FTP Login...Çow in state NEED_PASSWD\n");

654 i‡(!
˘æ
->
£¡
) {

655 
°©us
 = 
	`SídComm™d
(
ªque°
, 
˘æ
, "PASS", cål->
∑sswd
);

656 i‡(
°©us
 =
HT_WOULD_BLOCK
)

657  
HT_WOULD_BLOCK
;

658 i‡(
°©us
 =
HT_ERROR
)

659 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

660 
˘æ
->
£¡
 = 
YES
;

662 
°©us
 = 
	`HTHo°_ªad
(
	`HTNë_ho°
(
˙ë
), cnet);

663 i‡(
°©us
 =
HT_WOULD_BLOCK
)

664  
HT_WOULD_BLOCK
;

665 i‡(
°©us
 =
HT_LOADED
) {

666 
code
 = 
˘æ
->
ªpcode
/100;

667 i‡(
code
 == 2)

668 
˘æ
->
sub°©e
 = 
SUB_SUCCESS
;

669 i‡(
code
 == 3) {

670 
HTAÀπCÆlback
 *
cbf
 = 
	`HTAÀπ_föd
(
HT_A_PROMPT
);

671 
HTAÀπP¨
 * 
ª∂y
 = 
	`HTAÀπ_√wRïly
();

672 i‡(
cbf
 && (*cbf)(
ªque°
, 
HT_A_PROMPT
,

673 
HT_MSG_ACCOUNT
, 
NULL
, NULL, 
ª∂y
)) {

674 
˘æ
->
accou¡
 = 
	`HTAÀπ_ª∂yMesßge
(
ª∂y
);

675 
˘æ
->
sub°©e
 = 
NEED_ACCOUNT
;

677 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

678 
	`HTAÀπ_dñëeRïly
(
ª∂y
);

679 } i‡(
˘æ
->
ªpcode
 == 530)

680 
˘æ
->
sub°©e
 = 
PROMPT_USER
;

682 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

684 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

685 
˘æ
->
£¡
 = 
NO
;

689 
NEED_ACCOUNT
:

690 
	`HTTRACE
(
PROT_TRACE
, "FTP Login...Çow in state NEED_ACCOUNT\n");

691 i‡(!
˘æ
->
£¡
) {

692 
°©us
 = 
	`SídComm™d
(
ªque°
, 
˘æ
, "ACCT", cål->
accou¡
);

693 i‡(
°©us
 =
HT_WOULD_BLOCK
)

694  
HT_WOULD_BLOCK
;

695 i‡(
°©us
 =
HT_ERROR
)

696 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

697 
˘æ
->
£¡
 = 
YES
;

699 
°©us
 = 
	`HTHo°_ªad
(
	`HTNë_ho°
(
˙ë
), cnet);

700 i‡(
°©us
 =
HT_WOULD_BLOCK
)

701  
HT_WOULD_BLOCK
;

702 i‡(
°©us
 =
HT_LOADED
) {

703 
code
 = 
˘æ
->
ªpcode
/100;

704 i‡(
code
 == 2)

705 
˘æ
->
sub°©e
 = 
SUB_SUCCESS
;

707 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

709 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

710 
˘æ
->
£¡
 = 
NO
;

714 
PROMPT_USER
:

715 
	`HTTRACE
(
PROT_TRACE
, "FTP Login...Çow in state PROMPT_USER\n");

717 
HTAÀπCÆlback
 *
cbf
 = 
	`HTAÀπ_föd
(
HT_A_USER_PW
);

718 
HTAÀπP¨
 * 
ª∂y
 = 
	`HTAÀπ_√wRïly
();

719 
	`HT_FREE
(
˘æ
->
uid
);

720 
	`HT_FREE
(
˘æ
->
∑sswd
);

721 i‡(
cbf
 && (*cbf)(
ªque°
, 
HT_A_USER_PW
, 
HT_MSG_FTP_UID
,

722 
NULL
, NULL, 
ª∂y
)){

723 
˘æ
->
uid
 = 
	`HTAÀπ_ª∂yMesßge
(
ª∂y
);

724 
˘æ
->
∑sswd
 = 
	`HTAÀπ_ª∂ySe¸ë
(
ª∂y
);

727 
˘æ
->
uid
 = 
NULL
;

728 
˘æ
->
∑sswd
 = 
NULL
;

730 
	`HTAÀπ_dñëeRïly
(
ª∂y
);

731 i‡(
˘æ
->
uid
 && *˘æ->uid && cål->
∑sswd
 && *ctrl->passwd)

732 
˘æ
->
sub°©e
 = 
NEED_UID
;

734 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

738 
SUB_ERROR
:

739 
	`HTTRACE
(
PROT_TRACE
, "FTP Login...Çow in state SUB_ERROR\n");

740 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
,

741 
HTERR_FTP_LOGIN_FAILURE
, 
NULL
, 0, "HTFTPLogin");

742 
	`HTTRACE
(
PROT_TRACE
, "FTP......... Login failed\n");

743 
˘æ
->
sub°©e
 = 0;

744  
HT_ERROR
;

747 
SUB_SUCCESS
:

748 
	`HTTRACE
(
PROT_TRACE
, "FTP Login...Çow in state SUB_SUCCESS\n");

749 
	`HTTRACE
(
PROT_TRACE
, "FTP......... Logged i¿a†`%s\'\n" 
_
 
˘æ
->
uid
);

750 
˘æ
->
sub°©e
 = 0;

751  
HT_OK
;

755 
	}
}

763 
PRIVATE
 
	$HTFTPD©aC⁄√˘i⁄
 (
HTReque°
 * 
ªque°
, 
HTNë
 *
˙ë
,

764 
·p_˘æ
 *
˘æ
, 
·p_d©a
 *
d©a
)

766 
°©us
;

767 
HTNë
 *
d√t
 = 
˘æ
->dnet;

768 
	e_°©e
 {

769 
SUB_ERROR
 = -2,

770 
SUB_SUCCESS
 = -1,

771 
NEED_TYPE
 = 0,

772 
NEED_SELECT
,

773 
NEED_PASV
,

774 
NEED_PORT


775 } 
	t°©e
;

779 (
°©e
Ë
˘æ
->
sub°©e
) {

780 
NEED_TYPE
:

781 
	`HTTRACE
(
PROT_TRACE
, "FTP Data....Çow in state NEED_TYPE\n");

782 if(!
d©a
->
ty≥
|| d©a->
∑sv
 || data->type=='N' || data->type=='L'){

783 
˘æ
->
sub°©e
 = 
NEED_SELECT
;

786 i‡(!
˘æ
->
£¡
) {

787 
ty≥
[2];

788 *
ty≥
 = 
d©a
->type;

789 *(
ty≥
+1) = '\0';

790 
°©us
 = 
	`SídComm™d
(
ªque°
, 
˘æ
, "TYPE", 
ty≥
);

791 i‡(
°©us
 =
HT_WOULD_BLOCK
)

792  
HT_WOULD_BLOCK
;

793 i‡(
°©us
 =
HT_ERROR
)

794 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

795 
˘æ
->
£¡
 = 
YES
;

797 
°©us
 = 
	`HTHo°_ªad
(
	`HTNë_ho°
(
˙ë
), cnet);

798 i‡(
°©us
 =
HT_WOULD_BLOCK
)

799  
HT_WOULD_BLOCK
;

800 i‡(
°©us
 =
HT_LOADED
) {

801 i‡(
˘æ
->
ªpcode
/100 == 2)

802 
˘æ
->
sub°©e
 = 
NEED_SELECT
;

804 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

806 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

807 
˘æ
->
£¡
 = 
NO
;

811 
NEED_SELECT
:

812 
	`HTTRACE
(
PROT_TRACE
, "FTP Data....Çow in state NEED_SELECT\n");

813 i‡(
FTPMode
 & 
FTP_DATA_PASV
 && !
d©a
->
∑sv
)

814 
˘æ
->
sub°©e
 = 
NEED_PASV
;

815 i‡(
	`Ac˚±D©aSockë
(
˙ë
, 
d√t
, 
d©a
))

816 
˘æ
->
sub°©e
 = 
NEED_PORT
;

818 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

821 
NEED_PASV
:

822 
	`HTTRACE
(
PROT_TRACE
, "FTP Data....Çow in state NEED_PASV\n");

823 i‡(!
˘æ
->
£¡
) {

824 
°©us
 = 
	`SídComm™d
(
ªque°
, 
˘æ
, "PASV", 
NULL
);

825 i‡(
°©us
 =
HT_WOULD_BLOCK
)

826  
HT_WOULD_BLOCK
;

827 i‡(
°©us
 =
HT_ERROR
)

828 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

829 
˘æ
->
£¡
 = 
YES
;

831 
°©us
 = 
	`HTHo°_ªad
(
	`HTNë_ho°
(
˙ë
), cnet);

832 i‡(
°©us
 =
HT_WOULD_BLOCK
)

833  
HT_WOULD_BLOCK
;

834 i‡(
°©us
 =
HT_LOADED
) {

835 i‡(
˘æ
->
ªpcode
 == 227) {

842 *
ho°
 = 
˘æ
->
ª∂y
;

843 
h0
, 
h1
, 
h2
, 
h3
, 
p0
=0, 
p1
=0;

844 *
ho°
 && !
	`isdigô
(() *host++));

845 i‡(!*
ho°
 || 
	`ssˇnf
(--host, "%d,%d,%d,%d,%d,%d",

846 &
h0
,&
h1
,&
h2
,&
h3
,&
p0
,&
p1
) < 6) {

847 
	`HTTRACE
(
PROT_TRACE
, "FTP Data.... PASV Noáddr\n");

848 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

851 
p‹t
 = (
p0
<<8)+
p1
;

852 
	`•rötf
(
d©a
->
ho°
, "ftp://%d.%d.%d.%d:%d/",

853 
h0
, 
h1
, 
h2
, 
h3
, 
p‹t
);

854 
d©a
->
∑sv
 = 
YES
;

855 
˘æ
->
sub°©e
 = 
SUB_SUCCESS
;

858 
˘æ
->
sub°©e
 = 
	`Ac˚±D©aSockë
(
˙ë
, 
d√t
, 
d©a
) ?

859 
NEED_PORT
 : 
SUB_ERROR
;

862 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

863 
˘æ
->
£¡
 = 
NO
;

867 
NEED_PORT
:

868 
	`HTTRACE
(
PROT_TRACE
, "FTP Data....Çow in state NEED_PORT\n");

869 i‡(!
˘æ
->
£¡
) {

870 
°©us
 = 
	`SídComm™d
(
ªque°
, 
˘æ
, "PORT", 
d©a
->
ho°
);

871 i‡(
°©us
 =
HT_WOULD_BLOCK
)

872  
HT_WOULD_BLOCK
;

873 i‡(
°©us
 =
HT_ERROR
)

874 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

875 
˘æ
->
£¡
 = 
YES
;

877 
°©us
 = 
	`HTHo°_ªad
(
	`HTNë_ho°
(
˙ë
), cnet);

878 i‡(
°©us
 =
HT_WOULD_BLOCK
)

879  
HT_WOULD_BLOCK
;

880 i‡(
°©us
 =
HT_LOADED
) {

881 
d©a
->
∑sv
 = 
NO
;

882 
˘æ
->
sub°©e
 = (˘æ->
ªpcode
/100 == 2) ?

883 
SUB_SUCCESS
 : 
SUB_ERROR
;

885 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

886 
˘æ
->
£¡
 = 
NO
;

890 
SUB_ERROR
:

891 
	`HTTRACE
(
PROT_TRACE
, "FTP Data....Çow in state SUB_ERROR\n");

892 
	`HTTRACE
(
PROT_TRACE
, "FTP Data.... Can't setup data connection\n");

893 
˘æ
->
sub°©e
 = 0;

894  
HT_ERROR
;

897 
SUB_SUCCESS
:

898 
	`HTTRACE
(
PROT_TRACE
, "FTP Data....Çow in state SUB_SUCCESS\n");

899 
	`HTTRACE
(
PROT_TRACE
, "FTP Data.... Data connectionÇegotiated\n");

900 
˘æ
->
sub°©e
 = 0;

901  
HT_OK
;

905 
	}
}

916 
PRIVATE
 
	$HTFTPSîvîInfo
 (
HTReque°
 *
ªque°
, 
HTNë
 *
˙ë
,

917 
·p_˘æ
 *
˘æ
, 
·p_d©a
 *
d©a
)

919 
°©us
;

920 
	e_°©e
 {

921 
SUB_ERROR
 = -2,

922 
SUB_SUCCESS
 = -1,

923 
NEED_SYST
 = 0,

924 
CHECK_SYST
,

925 
NEED_PWD
,

926 
CHECK_PWD


927 } 
	t°©e
;

931 (
°©e
Ë
˘æ
->
sub°©e
) {

932 
NEED_SYST
:

933 
	`HTTRACE
(
PROT_TRACE
, "FTP Server..Çow in state NEED_SYST\n");

934 i‡(!
˘æ
->
£¡
) {

935 i‡(
˘æ
->
£rvî
 !
FTP_UNSURE
) {

936 
	`FTPLi°Ty≥
(
d©a
, 
˘æ
->
£rvî
);

937  
HT_OK
;

939 
°©us
 = 
	`SídComm™d
(
ªque°
, 
˘æ
, "SYST", 
NULL
);

940 i‡(
°©us
 =
HT_WOULD_BLOCK
)

941  
HT_WOULD_BLOCK
;

942 i‡(
°©us
 =
HT_ERROR
)

943 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

944 
˘æ
->
£¡
 = 
YES
;

946 
°©us
 = 
	`HTHo°_ªad
(
	`HTNë_ho°
(
˙ë
), cnet);

947 i‡(
°©us
 =
HT_WOULD_BLOCK
)

948  
HT_WOULD_BLOCK
;

949 i‡(
°©us
 =
HT_LOADED
) {

950 
˘æ
->
sub°©e
=˘æ->
ªpcode
==215 ? 
CHECK_SYST
 : 
NEED_PWD
;

952 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

953 
˘æ
->
£¡
 = 
NO
;

957 
CHECK_SYST
:

958 
	`HTTRACE
(
PROT_TRACE
, "FTP Server..Çow in state CHECK_SYST\n");

960 *
ª∂y
 = 
˘æ
->reply;

961 i‡(!*
ª∂y
) {

962 
	`HTTRACE
(
PROT_TRACE
, "FTP Server.. No server info?\n");

963 
˘æ
->
sub°©e
 = 
NEED_PWD
;

966 i‡(
	`°∫cmp
(
ª∂y
, "UNIX Type: L8MAC-OSMachTen", 28) == 0) {

967 
˘æ
->
£rvî
 = 
FTP_MACHTEN
;

968 } i‡(
	`°r°r
(
ª∂y
, "UNIX"Ë!
NULL
) {

969 
˘æ
->
£rvî
 = 
FTP_UNIX
;

970 } i‡(
	`°∫cmp
(
ª∂y
, "VMS", 3) == 0) {

971 
˘æ
->
£rvî
 = 
FTP_VMS
;

972 } i‡((
	`°∫cmp
(
ª∂y
, "VM/CMS", 6) == 0) ||

973 (
	`°∫cmp
(
ª∂y
, "VM", 2) == 0)) {

974 
˘æ
->
£rvî
 = 
FTP_CMS
;

975 } i‡(
	`°∫cmp
(
ª∂y
, "DCTS", 4) == 0) {

976 
˘æ
->
£rvî
 = 
FTP_DCTS
;

977 } i‡(
	`°r°r
(
ª∂y
, "MAC-OS TCP/C⁄√˘II"Ë!
NULL
) {

979 
˘æ
->
£rvî
 = 
FTP_TCPC
 + 
FTP_UNSURE
;

980 } i‡(
	`°∫cmp
(
ª∂y
, "MACOS Peter's Server", 20) == 0) {

981 
˘æ
->
£rvî
 = 
FTP_PETER_LEWIS
;

982 } i‡(
	`°∫cmp
(
ª∂y
, "Windows_NT", 10) == 0) {

983 
˘æ
->
£rvî
 = 
FTP_WINNT
;

987 i‡(
˘æ
->
£rvî
 & 
FTP_UNSURE
)

988 
˘æ
->
sub°©e
 = 
NEED_PWD
;

990 
˘æ
->
sub°©e
 = 
SUB_SUCCESS
;

994 
NEED_PWD
:

995 
	`HTTRACE
(
PROT_TRACE
, "FTP Server..Çow in state NEED_PWD\n");

996 i‡(!
˘æ
->
£¡
) {

997 
°©us
 = 
	`SídComm™d
(
ªque°
, 
˘æ
, "PWD", 
NULL
);

998 i‡(
°©us
 =
HT_WOULD_BLOCK
)

999  
HT_WOULD_BLOCK
;

1000 i‡(
°©us
 =
HT_ERROR
)

1001 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

1002 
˘æ
->
£¡
 = 
YES
;

1004 
°©us
 = 
	`HTHo°_ªad
(
	`HTNë_ho°
(
˙ë
), cnet);

1005 i‡(
°©us
 =
HT_WOULD_BLOCK
)

1006  
HT_WOULD_BLOCK
;

1007 i‡(
°©us
 =
HT_LOADED
) {

1008 
˘æ
->
sub°©e
 = (˘æ->
ªpcode
/100 == 2) ?

1009 
CHECK_PWD
 : 
SUB_ERROR
;

1011 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

1012 
˘æ
->
£¡
 = 
NO
;

1016 
CHECK_PWD
:

1017 
	`HTTRACE
(
PROT_TRACE
, "FTP Server..Çow in state CHECK_PWD\n");

1019 *
°¨t
 = 
	`°rchr
(
˘æ
->
ª∂y
, '"');

1020 *
íd
;

1021 i‡(!
°¨t
 || (
íd
 = 
	`°rchr
(++°¨t, '"')Ë=
NULL
) {

1022 
	`HTTRACE
(
PROT_TRACE
, "FTP Server.. No current directory?\n");

1023 
˘æ
->
£rvî
 = 
FTP_GENERIC
;

1025 *
íd
 = '\0';

1026 i‡(
˘æ
->
£rvî
 & 
FTP_TCPC
) {

1027 
˘æ
->
£rvî
 = *
°¨t
 ='/' ? 
FTP_NCSA
 : 
FTP_TCPC
;

1028 } i‡(*
°¨t
 == '/') {

1030 
˘æ
->
£rvî
 = 
FTP_UNIX
;

1031 } i‡(*(
íd
-1) == ']') {

1033 
˘æ
->
£rvî
 = 
FTP_VMS
;

1035 
˘æ
->
£rvî
 = 
FTP_GENERIC
;

1037 
˘æ
->
sub°©e
 = 
SUB_SUCCESS
;

1041 
SUB_ERROR
:

1042 
	`HTTRACE
(
PROT_TRACE
, "FTP Server..Çow in state SUB_ERROR\n");

1043 
	`HTTRACE
(
PROT_TRACE
, "FTP Server.. Can't get server information\n");

1044 
˘æ
->
sub°©e
 = 0;

1045 
˘æ
->
£rvî
 = 
FTP_GENERIC
;

1046  
HT_ERROR
;

1049 
SUB_SUCCESS
:

1050 
	`HTTRACE
(
PROT_TRACE
, "FTP Server..Çow in state SUB_SUCCESS\n");

1052 
HTHo°
 * 
ho°
 = 
	`HTNë_ho°
(
˙ë
);

1053 
	`HTTRACE
(
PROT_TRACE
, "FTP Sîvî.. Gues£dÅy≥ %d\n" 
_
 
˘æ
->
£rvî
);

1054 
	`HTHo°_£tVîsi⁄
(
ho°
, 
˘æ
->
£rvî
);

1055 
	`FTPLi°Ty≥
(
d©a
, 
˘æ
->
£rvî
);

1056 
˘æ
->
sub°©e
 = 0;

1057  
HT_OK
;

1062 
	}
}

1072 
PRIVATE
 
	$HTFTPGëD©a
 (
HTReque°
 *
ªque°
, 
HTNë
 *
˙ë
, 
SOCKET
 
sockfd
,

1073 
·p_˘æ
 *
˘æ
, 
·p_d©a
 *
d©a
)

1075 
°©us
;

1076 *
£gmít
 = 
NULL
;

1077 
HTNë
 *
d√t
 = 
˘æ
->dnet;

1078 
BOOL
 
d©a_is_a˘ive
 = (
sockfd
 =
	`HTNë_sockë
(
d√t
));

1079 
HTPo°CÆlback
 *
pcbf
;

1080 
	e_°©e
 {

1081 
SUB_ERROR
 = -2,

1082 
SUB_SUCCESS
 = -1,

1083 
NEED_SELECT
 = 0,

1084 
NEED_CONNECT
,

1085 
NEED_ACCEPT
,

1086 
NEED_ACTION
,

1087 
NEED_CWD
,

1088 
NEED_SEGMENT
,

1089 
NEED_STREAM
,

1090 
NEED_BODY


1091 } 
	t°©e
;

1095 (
°©e
Ë
˘æ
->
sub°©e
) {

1096 
NEED_SELECT
:

1097 
	`HTTRACE
(
PROT_TRACE
, "FTP Get DataÇow in state NEED_SELECT\n");

1098 
˘æ
->
sub°©e
 = 
d©a
->
∑sv
 ? 
NEED_CONNECT
 : 
NEED_ACTION
;

1101 
NEED_CONNECT
:

1102 
	`HTTRACE
(
PROT_TRACE
, "FTP Get DataÇow in state NEED_CONNECT\n");

1103 
°©us
 = 
	`HTHo°_c⁄√˘
(
	`HTNë_ho°
(
d√t
), d√t, 
d©a
->
ho°
);

1104 i‡(
°©us
 =
HT_WOULD_BLOCK
)

1105  
HT_WOULD_BLOCK
;

1106 i‡(
°©us
 =
HT_OK
) {

1107 
	`HTTRACE
(
PROT_TRACE
, "FTP Gë D©®A˘ivêd©®sockë %d\n" 
_


1108 
	`HTNë_sockë
(
d√t
));

1109 
˘æ
->
sub°©e
 = 
NEED_ACTION
;

1111 
	`NETCLOSE
(
	`HTNë_sockë
(
d√t
));

1112 
	`HTNë_£tSockë
(
d√t
, 
INVSOC
);

1113 
	`HTTRACE
(
PROT_TRACE
, "FTP Get Data SwapÅo PORT onÅhe fly\n");

1114 
˘æ
->
sub°©e
 = 
NEED_SELECT
;

1115 
	`HT_FREE
(
£gmít
);

1116  
HT_OK
;

1120 
NEED_ACCEPT
:

1121 
	`HTTRACE
(
PROT_TRACE
, "FTP Get DataÇow in state NEED_ACCEPT\n");

1122 
°©us
 = 
	`HTHo°_ac˚±
(
	`HTNë_ho°
(
d√t
), d√t, 
NULL
);

1123 i‡(
°©us
 =
HT_WOULD_BLOCK
)

1124  
HT_WOULD_BLOCK
;

1125 i‡(
°©us
 =
HT_OK
) {

1126 
	`HTTRACE
(
PROT_TRACE
, "FTP Gë D©®Passivêd©®sockë %d\n" 
_


1127 
	`HTNë_sockë
(
d√t
));

1128 
˘æ
->
sub°©e
 = 
NEED_STREAM
;

1130 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

1133 
NEED_ACTION
:

1134 
	`HTTRACE
(
PROT_TRACE
, "FTP Get DataÇow in state NEED_ACTION\n");

1135 i‡(!
˘æ
->
£¡
) {

1136 *
cmd
 = (
d©a
->
ty≥
=='L') ? "LIST" :

1137 (
d©a
->
ty≥
=='N') ? "NLST" : "RETR";

1138 i‡(
	`HTReque°_mëhod
(
ªque°
Ë=
METHOD_PUT
Ë
cmd
 = "STOR";

1139 
	`SåAŒocC›y
(
£gmít
, 
d©a
->
off£t
);

1140 
	`HTUnEsˇ≥
(
£gmít
);

1141 
	`HTCÀ™Tñ√tSåög
(
£gmít
);

1142 
°©us
 = 
	`SídComm™d
(
ªque°
, 
˘æ
, 
cmd
, 
£gmít
);

1143 
	`HT_FREE
(
£gmít
);

1144 i‡(
°©us
 =
HT_WOULD_BLOCK
)

1145  
HT_WOULD_BLOCK
;

1146 i‡(
°©us
 =
HT_ERROR
)

1147 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

1148 
˘æ
->
£¡
 = 
YES
;

1150 
°©us
 = 
	`HTHo°_ªad
(
	`HTNë_ho°
(
˙ë
), cnet);

1151 i‡(
°©us
 =
HT_WOULD_BLOCK
)

1152  
HT_WOULD_BLOCK
;

1153 i‡(
°©us
 =
HT_LOADED
) {

1154 
code
 = 
˘æ
->
ªpcode
;

1155 i‡(
code
==125 || code==150 || code==225)

1156 
˘æ
->
sub°©e
 = 
d©a
->
∑sv
 ? 
NEED_STREAM
 : 
NEED_ACCEPT
;

1157 i‡(
code
/100==5 && !
˘æ
->
cwd
)

1158 
˘æ
->
sub°©e
 = 
NEED_SEGMENT
;

1160 i‡(
˘æ
->
ªpcode
 == 550) {

1161 
	`HTTRACE
(
PROT_TRACE
, "FTP Get DataÇo such file or directory\n");

1162 
d©a
->
°ªam_îr‹
 = 
YES
;

1164 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

1167 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

1168 
˘æ
->
£¡
 = 
NO
;

1172 
NEED_SEGMENT
:

1173 
	`HTTRACE
(
PROT_TRACE
, "FTP Get DataÇow in state NEED_SEGMENT\n");

1175 *
±r
;

1176 i‡(
d©a
->
off£t
 =d©a->
fûe
) {

1177 i‡(
˘æ
->
£rvî
 =
FTP_VMS
) {

1178 i‡((
£gmít
 = (*Ë
	`HT_MALLOC
(
	`°æí
(
˘æ
->
uid
)+3)Ë=
NULL
)

1179 
	`HT_OUTOFMEM
("segment ");

1180 
	`•rötf
(
£gmít
, "[%s]", 
˘æ
->
uid
);

1182 
	`SåAŒocC›y
(
£gmít
, "/");

1183 
d©a
->
off£t
++;

1184 
˘æ
->
sub°©e
 = 
NEED_CWD
;

1186 i‡((
±r
 = 
	`°rchr
(
d©a
->
off£t
, '/'))) {

1187 *
±r
='\0';

1188 
	`SåAŒocC›y
(
£gmít
, 
d©a
->
off£t
);

1189 *
±r
='/';

1190 
d©a
->
off£t
 = ++
±r
;

1191 
	`HTUnEsˇ≥
(
£gmít
);

1192 
	`HTCÀ™Tñ√tSåög
(
£gmít
);

1193 
˘æ
->
sub°©e
 = 
NEED_CWD
;

1195 
˘æ
->
sub°©e
 = 
NEED_ACTION
;

1200 
NEED_CWD
:

1201 
	`HTTRACE
(
PROT_TRACE
, "FTP Get DataÇow in state NEED_CWD\n");

1202 i‡(!
˘æ
->
£¡
) {

1203 
°©us
 = 
	`SídComm™d
(
ªque°
, 
˘æ
, "CWD", 
£gmít
);

1204 
	`HT_FREE
(
£gmít
);

1205 i‡(
°©us
 =
HT_WOULD_BLOCK
)

1206  
HT_WOULD_BLOCK
;

1207 i‡(
°©us
 =
HT_ERROR
)

1208 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

1209 
˘æ
->
cwd
 = 
YES
;

1210 
˘æ
->
£¡
 = 
YES
;

1212 
°©us
 = 
	`HTHo°_ªad
(
	`HTNë_ho°
(
˙ë
), cnet);

1213 i‡(
°©us
 =
HT_WOULD_BLOCK
)

1214  
HT_WOULD_BLOCK
;

1215 i‡(
°©us
 =
HT_LOADED
) {

1216 i‡(
˘æ
->
ªpcode
/100 == 2)

1217 
˘æ
->
sub°©e
 = 
NEED_SEGMENT
;

1219 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

1221 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

1222 
˘æ
->
£¡
 = 
NO
;

1226 
NEED_STREAM
:

1227 
	`HTTRACE
(
PROT_TRACE
, "FTP Get DataÇow in state NEED_STREAM\n");

1234 
HTSåóm
 * 
èrgë
 = 
	`FTP_DIR
(
d©a
) ?

1235 
	`HTFTPDú_√w
(
ªque°
, 
˘æ
->
£rvî
, 
d©a
->
ty≥
) :

1236 
	`HTSåómSèck
(
	`HTAnch‹_f‹m©
(
	`HTReque°_™ch‹
(
ªque°
)),

1237 
	`HTReque°_ouçutF‹m©
(
ªque°
),

1238 
	`HTReque°_ouçutSåóm
(
ªque°
),

1239 
ªque°
, 
YES
);

1240 
	`HTNë_£tRódSåóm
(
d√t
, 
èrgë
);

1241 
	`HTReque°_£tOuçutC⁄√˘ed
(
ªque°
, 
YES
);

1243 
d©a_is_a˘ive
 = 
YES
;

1244 
˘æ
->
sub°©e
 = 
NEED_BODY
;

1247 
NEED_BODY
:

1248 
	`HTTRACE
(
PROT_TRACE
, "FTP Get DataÇow in state NEED_BODY\n");

1249 i‡(
d©a_is_a˘ive
) {

1250 i‡(
	`HTReque°_mëhod
(
ªque°
Ë=
METHOD_PUT
) {

1251 
HTP¨ítAnch‹
 * 
ítôy
 = 
	`HTReque°_ítôyAnch‹
(
ªque°
);

1252 c⁄° * 
documít
 = (c⁄° *Ë
	`HTAnch‹_documít
(
ítôy
);

1253 
Àngth
 = ()
	`HTAnch‹_Àngth
(
ítôy
);

1254 
HTSåóm
 * 
ouçut
 =

1255 (
HTSåóm
 *)
	`HTCh™√l_ouçut
(
	`HTNë_ho°
(
d√t
)->
ch™√l
);

1256 
pcbf
 = 
	`HTReque°_po°CÆlback
(
ªque°
);

1257 i‡(
pcbf
) {

1258 
°©us
 = (*
pcbf
)(
ªque°
, 
ouçut
);

1260 
°©us
 = (*
ouçut
->
iß
->
put_block
)(output,

1261 
documít
,

1262 
Àngth
);

1263 i‡(
°©us
 =
HT_OK
) {

1264 
°©us
 = 
HT_LOADED
;

1268 i‡(
°©us
 =
HT_WOULD_BLOCK
) {

1269  
HT_WOULD_BLOCK
;

1270 } i‡–
°©us
 =
HT_LOADED
 ) {

1271 
˘æ
->
sub°©e
 = 
SUB_SUCCESS
;

1272 
d©a
->
com∂ëe
 |= 3;

1273 } i‡–
°©us
 =
HT_OK
 ) {

1274  
HT_WOULD_BLOCK
;

1276 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

1277 
d©a
->
°ªam_îr‹
 = 
YES
;

1281 
°©us
 = 
	`HTHo°_ªad
(
	`HTNë_ho°
(
d√t
), dnet);

1283 i‡(
°©us
 =
HT_WOULD_BLOCK
)

1284  
HT_WOULD_BLOCK
;

1285 i‡(
°©us
 =
HT_LOADED
 || sètu†=
HT_CLOSED
 || sètu†=
HT_OK
) {

1286 
	`HTDoClo£
(
d√t
);

1287 
d©a
->
com∂ëe
 |= 1;

1288 i‡(
d©a
->
com∂ëe
 >= 3)

1289 
˘æ
->
sub°©e
 = 
SUB_SUCCESS
;

1291 
d©a_is_a˘ive
 = 
NO
;

1293 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

1294 
d©a
->
°ªam_îr‹
 = 
YES
;

1297 
°©us
 = 
	`HTHo°_ªad
(
	`HTNë_ho°
(
˙ë
), cnet);

1298 i‡(
°©us
 =
HT_WOULD_BLOCK
)

1299  
HT_WOULD_BLOCK
;

1300 i‡(
°©us
 =
HT_LOADED
 || sètu†=
HT_CLOSED
) {

1301 i‡(
˘æ
->
ªpcode
/100 == 2) {

1302 
d©a
->
com∂ëe
 |= 2;

1303 i‡(
d©a
->
com∂ëe
 >= 3)

1304 
˘æ
->
sub°©e
 = 
SUB_SUCCESS
;

1306 
d©a_is_a˘ive
 = 
YES
;

1308 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

1310 
˘æ
->
sub°©e
 = 
SUB_ERROR
;

1314 
SUB_ERROR
:

1315 
	`HTTRACE
(
PROT_TRACE
, "FTP Get DataÇow in state SUB_ERROR\n");

1316 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_NOT_FOUND
,

1317 
NULL
, 0, "HTFTPGetData");

1318 
˘æ
->
sub°©e
 = 0;

1319 
	`HT_FREE
(
£gmít
);

1320  
HT_ERROR
;

1323 
SUB_SUCCESS
:

1324 
	`HTTRACE
(
PROT_TRACE
, "FTP Get DataÇow in state SUB_SUCCESS\n");

1325 
˘æ
->
sub°©e
 = 0;

1326 
	`HT_FREE
(
£gmít
);

1327  
HT_LOADED
;

1331 
	}
}

1344 
PRIVATE
 
FTPEvít
 (
SOCKET
 
soc
, * 
pVoid
, 
HTEvítTy≥
 
ty≥
);

1346 
PUBLIC
 
	$HTLﬂdFTP
 (
SOCKET
 
soc
, 
HTReque°
 * 
ªque°
)

1348 
HTNë
 * 
˙ë
 = 
	`HTReque°_√t
(
ªque°
);

1349 
·p_˘æ
 * 
˘æ
 = 
NULL
;

1350 
·p_d©a
 * 
d©a
 = 
NULL
;

1351 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

1352 * 
uæ
 = 
	`HTAnch‹_physiˇl
(
™ch‹
);

1359 
	`HTTRACE
(
PROT_TRACE
, "FTP......... Lookög f‹ `%s\'\n" 
_
 
uæ
);

1360 i‡((
˘æ
 = (
·p_˘æ
 *Ë
	`HT_CALLOC
(1, (·p_˘æ))Ë=
NULL
 ||

1361 (
d©a
 = (
·p_d©a
 *Ë
	`HT_CALLOC
(1, (·p_d©a))Ë=
NULL
)

1362 
	`HT_OUTOFMEM
("HTLoadFTP");

1363 
˘æ
->
cmd
 = 
	`HTChunk_√w
(128);

1364 
˘æ
->
°©e
 = 
FTP_BEGIN
;

1365 
˘æ
->
£rvî
 = 
FTP_UNSURE
;

1366 
˘æ
->
d√t
 = 
	`HTNë_dup
(
˙ë
);

1367 
˘æ
->
˙ë
 = cnet;

1368 
	`HTNë_£tC⁄ãxt
(
˙ë
, 
˘æ
);

1369 
	`HTNë_£tEvítCÆlback
(
˙ë
, 
FTPEvít
);

1370 
	`HTNë_£tEvítP¨am
(
˙ë
, 
˘æ
);

1371 
	`HTNë_£tRawByãsCou¡
(
˘æ
->
d√t
, 
YES
);

1376 
	`HTNë_£tC⁄ãxt
(
˘æ
->
d√t
, 
d©a
);

1377 
	`HTNë_£tEvítCÆlback
(
˘æ
->
d√t
, 
FTPEvít
);

1378 
	`HTNë_£tEvítP¨am
(
˘æ
->
d√t
, ctrl);

1379  
	`FTPEvít
(
soc
, 
˘æ
, 
HTEvít_BEGIN
);

1380 
	}
}

1382 
PRIVATE
 
	$FTPEvít
 (
SOCKET
 
soc
, * 
pVoid
, 
HTEvítTy≥
 
ty≥
)

1384 
·p_˘æ
 * 
˘æ
 = (·p_˘æ *Ë
pVoid
;

1385 
·p_d©a
 * 
d©a
 = (·p_d©®*Ë
	`HTNë_c⁄ãxt
(
˘æ
->
d√t
);

1386 
°©us
 = 
HT_ERROR
;

1387 
HTNë
 * 
˙ë
 = 
˘æ
->cnet;

1388 
HTReque°
 * 
ªque°
 = 
	`HTNë_ªque°
(
˙ë
);

1389 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

1390 * 
uæ
 = 
	`HTAnch‹_physiˇl
(
™ch‹
);

1392 
HTHo°
 *
ho°
 = 
	`HTNë_ho°
(
˙ë
);

1395 i‡(
ty≥
 =
HTEvít_CLOSE
) {

1396 i‡(
soc
 =
	`HTNë_sockë
(
˙ë
Ë&& 
d©a
->
com∂ëe
<1)

1397 
	`FTPCÀ™up
(
ªque°
, 
HT_INTERRUPTED
);

1399 
	`FTPCÀ™up
(
ªque°
, 
HT_LOADED
);

1400  
HT_OK
;

1401 } i‡(
ty≥
 =
HTEvít_TIMEOUT
) {

1407 i‡(!(
soc
 =
	`HTNë_sockë
(
˙ë
Ë&& !(
d©a
->
com∂ëe
 & 1Ë&& 
	`HTNë_byãsRód
(
˘æ
->
d√t
)>0)) {

1408 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_TIME_OUT
, 
NULL
, 0, "HTLoadHTTP");

1409 
	`FTPCÀ™up
(
ªque°
, 
HT_TIMEOUT
);

1411  
HT_OK
;

1414 
˘æ
 = (
·p_˘æ
 *Ë
	`HTNë_c⁄ãxt
(
˙ë
);

1415 
d©a
 = (
·p_d©a
 *Ë
	`HTNë_c⁄ãxt
(
˘æ
->
d√t
);

1420 
˘æ
->
°©e
) {

1421 
FTP_BEGIN
:

1422 
	`HTTRACE
(
PROT_TRACE
, "FTP Event...Çow in state FTP_BEGIN\n");

1425 i‡(
	`HTReque°_mëhod
(
ªque°
Ë!
METHOD_GET
 &&

1426 
	`HTReque°_mëhod
(
ªque°
Ë!
METHOD_PUT
 ) {

1427 
	`HTTRACE
(
PROT_TRACE
, "FTP Event... This module only supportsÅhe GET or PUT methods\n");

1428 
˘æ
->
°©e
 = 
FTP_ERROR
;

1432 
	`HTFTPP¨£URL
(
ªque°
, 
uæ
, 
˘æ
, 
d©a
);

1440 i‡(
g_FTPTøns„rMode
 =
FTP_DEFAULT_TRANSFER_MODE
) {

1441 
d©a
->
ty≥
) {

1442 'a' : 
d©a
->
ty≥
 = 'A'; ;

1443 'A' : 
d©a
->
ty≥
 = 'A'; ;

1444 'i' : 
d©a
->
ty≥
 = 'I'; ;

1445 'I' : 
d©a
->
ty≥
 = 'I'; ;

1446 'd' : 
	`FTPLi°Ty≥
(
d©a
, 
˘æ
->
£rvî
); ;

1447 'D' : 
	`FTPLi°Ty≥
(
d©a
, 
˘æ
->
£rvî
); ;

1448  : 
d©a
->
ty≥
 = 'I'; ;

1453 
g_FTPTøns„rMode
) {

1454 
FTP_ASCII_TRANSFER_MODE
 : 
d©a
->
ty≥
 = 'A'; ;

1455 
FTP_BINARY_TRANSFER_MODE
 : 
d©a
->
ty≥
 = 'I'; ;

1456 
FTP_DIR_TRANSFER_MODE
 : 
	`FTPLi°Ty≥
(
d©a
, 
˘æ
->
£rvî
); ;

1457  : 
d©a
->
ty≥
 = 'I'; ;

1461 
	`HTTRACE
(
PROT_TRACE
, "FTP Evít... Tøns„∏modê£àtÿ'%c'\n" 
_
 
d©a
->
ty≥
);

1466 i‡(!
	`FTP_DIR
(
d©a
)Ë
	`HTBöd_gëAnch‹Bödögs
(
™ch‹
);

1469 
˘æ
->
°©e
 = 
FTP_NEED_CCON
;

1472 
FTP_NEED_CCON
:

1473 
	`HTTRACE
(
PROT_TRACE
, "FTP Event...Çow in state FTP_NEED_CONN\n");

1474 
°©us
 = 
	`HTHo°_c⁄√˘
(
ho°
, 
˙ë
, 
uæ
);

1475 
ho°
 = 
	`HTNë_ho°
(
˙ë
);

1476 i‡(
°©us
 =
HT_OK
) {

1483 * 
s_˛ass
 = 
	`HTHo°_˛ass
(
ho°
);

1484 i‡(
s_˛ass
 && 
	`°rˇ£comp
(s_class, "ftp")) {

1485 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_CLASS
,

1486 
NULL
, 0, "HTLoadNews");

1487 
˘æ
->
°©e
 = 
FTP_ERROR
;

1490 
	`HTHo°_£tCœss
(
ho°
, "ftp");

1494 i‡(
	`HTNë_≥rsi°ít
(
˙ë
)) {

1495 
˘æ
->
£rvî
 = 
	`HTHo°_vîsi⁄
(
ho°
);

1496 
	`HTTRACE
(
PROT_TRACE
, "FTP Sîvî.. Cachêßy†ty≥ %d sîvî\n" 
_


1497 
˘æ
->
£rvî
);

1498 
˘æ
->
ª£t
 = 1;

1500 
	`HTNë_£tPîsi°ít
(
˙ë
, 
YES
, 
HT_TP_SINGLE
);

1508 
HTSåóm
 * 
ªad°ªam
 = 
	`FTPSètus_√w
(
ªque°
, 
˘æ
, 
ho°
);

1509 
	`HTNë_£tRódSåóm
(
˙ë
, 
ªad°ªam
);

1517 
HTOuçutSåóm
 * 
ouçut
 = 
	`HTNë_gëOuçut
(
˙ë
, 
NULL
, 0);

1518 
	`HTReque°_£tI≈utSåóm
(
ªque°
, (
HTSåóm
 *Ë
ouçut
);

1527 i‡(
	`HTReque°_isPo°Web
(
ªque°
)) {

1528 
HTEvít
 * 
evít
 = 
	`HTNë_evít
(
˙ë
);

1529 
	`HTEvít_ªgi°î
(
	`HTNë_sockë
(
˙ë
), 
HTEvít_READ
, 
evít
);

1530 
	`HTReque°_lökDe°ö©i⁄
(
ªque°
);

1533 
˘æ
->
°©e
 = 
FTP_NEED_LOGIN
;

1534 } i‡(
°©us
 =
HT_WOULD_BLOCK
 || sètu†=
HT_PENDING
)

1535  
HT_OK
;

1537 
˘æ
->
°©e
 = 
FTP_ERROR
;

1540 
FTP_NEED_LOGIN
:

1541 
	`HTTRACE
(
PROT_TRACE
, "FTP Event...Çow in state FTP_NEED_LOGIN\n");

1542 
°©us
 = 
	`HTFTPLogö
(
ªque°
, 
˙ë
, 
˘æ
);

1543 i‡(
°©us
 =
HT_WOULD_BLOCK
Ë 
HT_OK
;

1544 
˘æ
->
°©e
 = (
°©us
 =
HT_OK
Ë? 
FTP_NEED_DCON
 : 
FTP_ERROR
;

1547 
FTP_NEED_DCON
:

1548 
	`HTTRACE
(
PROT_TRACE
, "FTP Event...Çow in state FTP_NEED_DCON\n");

1549 
°©us
 = 
	`HTFTPD©aC⁄√˘i⁄
(
ªque°
, 
˙ë
, 
˘æ
, 
d©a
);

1550 i‡(
°©us
 =
HT_WOULD_BLOCK
Ë 
HT_OK
;

1551 i‡(
°©us
 =
HT_OK
)

1552 
˘æ
->
°©e
 = (
d©a
->
ty≥
=='N') ?

1553 
FTP_NEED_SERVER
 : 
FTP_NEED_DATA
;

1555 
˘æ
->
°©e
 = 
FTP_ERROR
;

1558 
FTP_NEED_DATA
:

1559 
	`HTTRACE
(
PROT_TRACE
, "FTP Event...Çow in state FTP_NEED_DATA\n");

1560 
°©us
 = 
	`HTFTPGëD©a
(
ªque°
, 
˙ë
, 
soc
, 
˘æ
, 
d©a
);

1561 i‡(
°©us
 =
HT_WOULD_BLOCK
Ë 
HT_OK
;

1562 i‡(
°©us
 =
HT_LOADED
)

1563 
˘æ
->
°©e
 = 
FTP_SUCCESS
;

1564 i‡(
°©us
 =
HT_OK
)

1565 
˘æ
->
°©e
 = 
FTP_NEED_DCON
;

1566 i‡(
	`HTReque°_mëhod
(
ªque°
Ë=
METHOD_PUT
)

1567 
˘æ
->
°©e
 = 
FTP_ERROR
;

1568 i‡(!
	`FTP_DIR
(
d©a
Ë&& !d©a->
°ªam_îr‹
) {

1569 
	`FTPLi°Ty≥
(
d©a
, 
˘æ
->
£rvî
);

1570 
˘æ
->
°©e
 = 
FTP_NEED_SERVER
;

1572 
˘æ
->
°©e
 = 
FTP_ERROR
;

1575 
FTP_NEED_SERVER
:

1576 
	`HTTRACE
(
PROT_TRACE
, "FTP Event...Çow in state FTP_NEED_SERVER\n");

1577 
°©us
 = 
	`HTFTPSîvîInfo
(
ªque°
, 
˙ë
, 
˘æ
, 
d©a
);

1578 i‡(
°©us
 =
HT_WOULD_BLOCK
Ë 
HT_OK
;

1579 
˘æ
->
°©e
 = 
FTP_NEED_DATA
;

1582 
FTP_SUCCESS
:

1583 
	`HTTRACE
(
PROT_TRACE
, "FTP Event...Çow in state FTP_SUCCESS\n");

1584 
	`FTPCÀ™up
(
ªque°
, 
HT_LOADED
);

1585  
HT_OK
;

1588 
FTP_ERROR
:

1589 
	`HTTRACE
(
PROT_TRACE
, "FTP Event...Çow in state FTP_ERROR\n");

1590 
	`FTPCÀ™up
(
ªque°
, 
HT_ERROR
);

1591  
HT_OK
;

1595 
	}
}

1597 
PUBLIC
 
	$HTFTP_£tTøns„rMode
(
FTPTøns„rMode
 
mode
)

1599 
g_FTPTøns„rMode
 = 
mode
;

1600 
	}
}

1602 
PUBLIC
 
FTPTøns„rMode
 
	$HTFTP_å™s„rMode
 ()

1604  
g_FTPTøns„rMode
;

1605 
	}
}

1607 
PUBLIC
 
	$HTFTP_£tC⁄åﬁMode
 (
FTPC⁄åﬁMode
 
mode
)

1609 
g_FTPC⁄åﬁMode
 = 
mode
;

1610 
	}
}

1612 
PUBLIC
 
FTPC⁄åﬁMode
 
	$HTFTP_c⁄åﬁMode
 ()

1614  
g_FTPC⁄åﬁMode
;

1615 
	}
}

	@Library/src/HTFTP.h

29 #i‚de‡
HTFTP_H


30 
	#HTFTP_H


	)

31 
	~"HTPrŸ.h
"

33 
HTPrŸCÆlback
 
HTLﬂdFTP
;

35 
	e_FTPSîvîTy≥
 {

36 
	mFTP_GENERIC
 = 0x1,

37 
	mFTP_MACHTEN
 = 0x2,

38 
	mFTP_UNIX
 = 0x4,

39 
	mFTP_VMS
 = 0x8,

40 
	mFTP_CMS
 = 0x10,

41 
	mFTP_DCTS
 = 0x20,

42 
	mFTP_TCPC
 = 0x40,

43 
	mFTP_PETER_LEWIS
 = 0x80,

44 
	mFTP_NCSA
 = 0x200,

45 
	mFTP_WINNT
 = 0x400,

46 
	mFTP_UNSURE
 = 0x8000

47 } 
	tFTPSîvîTy≥
;

49 
	#MAX_FTP_LINE
 128

	)

63 
	e_FTPTøns„rMode
 {

64 
	mFTP_DEFAULT_TRANSFER_MODE
 = 0,

65 
	mFTP_ASCII_TRANSFER_MODE
 = 1,

66 
	mFTP_BINARY_TRANSFER_MODE
 = 2,

67 
	mFTP_DIR_TRANSFER_MODE
 = 3

68 } 
	tFTPTøns„rMode
;

70 
FTPTøns„rMode
 
HTFTP_å™s„rMode
 ();

71 
HTFTP_£tTøns„rMode
 (
FTPTøns„rMode
 
mode
);

84 
	e_FTPC⁄åﬁMode
 {

85 
	mFTP_DEFAULT_CONTROL_MODE
 = 0,

86 
	mFTP_ALWAYS_ASK_UID_PW
 = 1

87 } 
	tFTPC⁄åﬁMode
;

89 
FTPC⁄åﬁMode
 
HTFTP_c⁄åﬁMode
 ();

90 
HTFTP_£tC⁄åﬁMode
 (
FTPC⁄åﬁMode
 
mode
);

	@Library/src/HTFTPDir.c

17 
	~"wwwsys.h
"

18 
	~"WWWUtû.h
"

19 
	~"WWWC‹e.h
"

20 
	~"WWWDú.h
"

21 
	~"WWWTøns.h
"

22 
	~"HTFTPDú.h
"

24 
	s_HTSåóm
 {

25 c⁄° 
HTSåómCœss
 * 
	miß
;

26 
HTReque°
 * 
	mªque°
;

27 
FTPSîvîTy≥
 
	m£rvî
;

28 
HTEOLSèã
 
	m°©e
;

29 
HTDú
 * 
	mdú
;

30 
BOOL
 
	mfú°
;

31 
BOOL
 
	mjunk
;

32 
	mbuf„r
[
MAX_FTP_LINE
+1];

33 
	mbuÊí
;

36 
PRIVATE
 
HTDúShow
 
	gdú_show
 = 
HT_DS_SIZE
+
HT_DS_DATE
+
HT_DS_DES
+
HT_DS_ICON
;

37 
PRIVATE
 
HTDúKey
 
	gdú_key
 = 
HT_DK_CINS
;

50 
PRIVATE
 
BOOL
 
	$P¨£Unix
 (
HTDú
 *
dú
, * 
löe
)

52 
˙t
;

53 *
±r
 = 
löe
;

54 *
cﬁumn
 = 
NULL
;

55 *
d©e
 = 
NULL
;

56 
size°r
[10];

57 
HTFûeMode
 
mode
 = (*
löe
 ='d'Ë? 
HT_IS_DIR
 : 
HT_IS_FILE
;

60 
˙t
=0; cnt<4; cnt++) {

61 i‡((
cﬁumn
 = 
	`HTNextFõld
(&
±r
)Ë=
NULL
) ;

68 *
±r
 && 
	`is•a˚
(() *ptr))Ötr++;

69 i‡(
	`isdigô
((Ë*
±r
)) {

70 
cﬁumn
 = 
	`HTNextFõld
(&
±r
);

71 *
±r
 && 
	`is•a˚
(() *ptr))Ötr++;

74 i‡(
mode
 =
HT_IS_FILE
) {

75 
ls
 = 
	`©ﬁ
(
cﬁumn
);

76 
	`HTNumToSå
(
ls
, 
size°r
, 10);

78 
	`°r˝y
(
size°r
, "-");

81 
d©e
 = 
±r
;

82 
±r
 += 12;

83 *
±r
++ = '\0';

84 
d©e
 = 
	`HTSåù
(date);

87 *
±r
 && 
	`is•a˚
(() *ptr))Ötr++;

88 i‡((
cﬁumn
 = 
	`°r°r
(
±r
, " -> ")))

89 *
cﬁumn
 = '\0';

92  
	`HTDú_addEÀmít
(
dú
, 
±r
, 
d©e
, 
size°r
, 
mode
);

93 
	}
}

101 
PRIVATE
 
BOOL
 
	$P¨£VMS
 (
HTDú
 *
dú
, * 
löe
)

103 *
±r
 = 
NULL
;

104 *
d©e
 = 
NULL
;

105 *
size
 = 
NULL
;

106 
size°r
[10];

107 
HTFûeMode
 
mode
;

110 i‡((
±r
 = 
	`°rchr
(
löe
, ';')Ë=
NULL
)

111  
YES
;

112 *
±r
++ ='\0';

113 i‡(
	`HTNextFõld
(&
±r
Ë=
NULL
Ë 
YES
;

117 *
Õ
 = 
löe
;

118 *
Õ
) {

119 i‡(
	`°rcmp
(
Õ
, ".Z")==0 || strcmp(lp, "_Z")==0) ;

120 *
Õ
 = 
	`TOLOWER
(*lp);

121 
Õ
++;

123 i‡((
Õ
 = 
	`°r°r
(
löe
, ".dir"))) {

124 
mode
 = 
HT_IS_DIR
;

125 *
Õ
 = '\0';

127 
mode
 = 
HT_IS_FILE
;

131 i‡((
size
 = 
	`HTNextFõld
(&
±r
))) {

132 i‡(
mode
 =
HT_IS_FILE
) {

133 
ls
 = 
	`©ﬁ
(
size
) * 512;

134 
	`HTNumToSå
(
ls
, 
size°r
, 10);

136 
	`°r˝y
(
size°r
, "-");

138 *
size°r
 = '\0';

142 *
íd
 = 
	`°rchr
(
±r
, '[');

143 i‡(
íd
) *end = '\0';

144 
d©e
 = 
	`HTSåù
(
±r
);

146  
	`HTDú_addEÀmít
(
dú
, 
löe
, 
d©e
, 
size°r
, 
mode
);

147 
	}
}

155 
PRIVATE
 
BOOL
 
	$P¨£FTPLöe
 (
HTSåóm
 *
me
)

157 i‡(!
me
->
buÊí
Ë 
YES
;

158 
me
->
£rvî
) {

159 
FTP_WINNT
:

160 
FTP_UNIX
:

161 
FTP_PETER_LEWIS
:

162 
FTP_MACHTEN
:

163 i‡(
me
->
fú°
) {

164 i‡(
	`°∫cmp
(
me
->
buf„r
, "total ", 6) &&

165 !
	`°r°r
(
me
->
buf„r
, "notávailable"))

166 
	`P¨£Unix
(
me
->
dú
, me->
buf„r
);

167 
me
->
fú°
 = 
NO
;

169 
	`P¨£Unix
(
me
->
dú
, me->
buf„r
);

172 
FTP_VMS
:

175 
	`P¨£VMS
(
me
->
dú
, me->
buf„r
);

178 
FTP_NCSA
:

179 
FTP_TCPC
:

182 
HTFûeMode
 
mode
 = (*(
me
->
buf„r
+me->
buÊí
-1)=='/') ?

183 
HT_IS_DIR
 : 
HT_IS_FILE
;

184  
	`HTDú_addEÀmít
(
me
->
dú
, me->
buf„r
, 
NULL
, NULL, 
mode
);

189  
	`HTDú_addEÀmít
(
me
->
dú
, me->
buf„r
, 
NULL
, NULL, 
HT_IS_FILE
);

192  
NO
;

193 
	}
}

198 
PRIVATE
 
	$FTPDú_put_block
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
)

200 
l
-- > 0) {

201 i‡(
me
->
°©e
 =
EOL_FCR
) {

202 i‡(*
b
 =
LF
 && 
me
->
buÊí
) {

203 i‡(!
me
->
junk
) {

204 *(
me
->
buf„r
+me->
buÊí
) = '\0';

205 
	`P¨£FTPLöe
(
me
);

207 
me
->
junk
 = 
NO
;

209 
me
->
buÊí
 = 0;

210 
me
->
°©e
 = 
EOL_BEGIN
;

211 } i‡(*
b
 =
CR
) {

212 
me
->
°©e
 = 
EOL_FCR
;

213 } i‡(*
b
 =
LF
 && 
me
->
buÊí
) {

214 i‡(!
me
->
junk
) {

215 *(
me
->
buf„r
+me->
buÊí
) = '\0';

216 
	`P¨£FTPLöe
(
me
);

218 
me
->
junk
 = 
NO
;

219 
me
->
buÊí
 = 0;

220 
me
->
°©e
 = 
EOL_BEGIN
;

222 *(
me
->
buf„r
+me->
buÊí
++Ë*
b
;

223 i‡(
me
->
buÊí
 >
MAX_FTP_LINE
) {

224 
	`HTTRACE
(
PROT_TRACE
, "FTP Dir..... LineÅooÜong - ignored\n");

225 
me
->
buÊí
 = 0;

226 
me
->
junk
 = 
YES
;

229 
b
++;

231  
HT_OK
;

232 
	}
}

234 
PRIVATE
 
	$FTPDú_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

236  
	`FTPDú_put_block
(
me
, 
s
, (Ë
	`°æí
(s));

237 
	}
}

239 
PRIVATE
 
	$FTPDú_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

241  
	`FTPDú_put_block
(
me
, &
c
, 1);

242 
	}
}

244 
PRIVATE
 
	$FTPDú_Êush
 (
HTSåóm
 * 
me
)

246  
HT_OK
;

247 
	}
}

249 
PRIVATE
 
	$FTPDú_‰ì
 (
HTSåóm
 * 
me
)

251 
	`HTDú_‰ì
(
me
->
dú
);

252 
	`HT_FREE
(
me
);

253  
HT_OK
;

254 
	}
}

256 
PRIVATE
 
	$FTPDú_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

258 
	`HTTRACE
(
PROT_TRACE
, "FTPDir...... ABORTING...\n");

259 
	`FTPDú_‰ì
(
me
);

260  
HT_ERROR
;

261 
	}
}

266 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gFTPDúCœss
 =

269 
FTPDú_Êush
,

270 
FTPDú_‰ì
,

271 
FTPDú_ab‹t
,

272 
FTPDú_put_ch¨a˘î
,

273 
FTPDú_put_°rög
,

274 
FTPDú_put_block


277 
PUBLIC
 
HTSåóm
 * 
	$HTFTPDú_√w
 (
HTReque°
 * 
ªque°
,

278 
FTPSîvîTy≥
 
£rvî
,

279 
li°
)

281 
HTSåóm
 * 
me
;

282 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

283 
	`HT_OUTOFMEM
("HTFTPDir");

284 
me
->
iß
 = &
FTPDúCœss
;

285 
me
->
ªque°
 =Ñequest;

286 
me
->
£rvî
 = server;

287 
me
->
°©e
 = 
EOL_BEGIN
;

288 
me
->
dú
 = 
	`HTDú_√w
(
ªque°
, (
li°
=='L' ? 
dú_show
 : 0), 
dú_key
);

289 
me
->
fú°
 = 
YES
;

290 i‡(
me
->
dú
 =
NULL
) {

291 
	`HT_FREE
(
me
);

292  
	`HTEº‹Såóm
();

294  
me
;

295 
	}
}

	@Library/src/HTFTPDir.h

27 #i‚de‡
HTFTPDIR_H


28 
	#HTFTPDIR_H


	)

30 
	~"HTSåóm.h
"

31 
	~"HTFTP.h
"

33 
HTSåóm
 * 
HTFTPDú_√w
 (
HTReque°
 * 
ªque°
,

34 
FTPSîvîTy≥
 
£rvî
,

35 
li°
);

	@Library/src/HTFWrite.c

23 
	~"wwwsys.h
"

24 
	~"WWWUtû.h
"

25 
	~"WWWC‹e.h
"

26 
	~"HTFWrôe.h
"

28 
	s_HTSåóm
 {

29 c⁄° 
HTSåómCœss
 *
	miß
;

30 
FILE
 * 
	mÂ
;

31 
BOOL
 
	mÀave_›í
;

36 
PRIVATE
 
	$HTFWrôî_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

38  (
	`Âutc
(
c
, 
me
->
Â
Ë=
EOF
Ë? 
HT_ERROR
 : 
HT_OK
;

39 
	}
}

41 
PRIVATE
 
	$HTFWrôî_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

43 i‡(*
s
)

44  (
	`Âuts
(
s
, 
me
->
Â
Ë=
EOF
Ë? 
HT_ERROR
 : 
HT_OK
;

45  
HT_OK
;

46 
	}
}

48 
PRIVATE
 
	$HTFWrôî_Êush
 (
HTSåóm
 * 
me
)

50  (
	`fÊush
(
me
->
Â
Ë=
EOF
Ë? 
HT_ERROR
 : 
HT_OK
;

51 
	}
}

53 
PRIVATE
 
	$HTFWrôî_wrôe
 (
HTSåóm
 * 
me
, c⁄° * 
s
, 
l
)

55 
°©us
 ;

56 
°©us
 = (
	`fwrôe
(
s
, 1, 
l
, 
me
->
Â
Ë!lË? 
HT_ERROR
 : 
HT_OK
 ;

57 i‡(
l
 > 1 && 
°©us
 =
HT_OK
Ë(Ë
	`HTFWrôî_Êush
(
me
);

58  
°©us
 ;

59 
	}
}

61 
PRIVATE
 
	$HTFWrôî_‰ì
 (
HTSåóm
 * 
me
)

63 i‡(
me
) {

64 i‡(
me
->
Àave_›í
 !
YES
)

65 
	`f˛o£
(
me
->
Â
);

67 
	`HTFWrôî_Êush
(
me
);

68 
	`HT_FREE
(
me
);

70  
HT_OK
;

71 
	}
}

73 
PRIVATE
 
	$HTFWrôî_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

75 
	`HTTRACE
(
STREAM_TRACE
, "FileWriter.. ABORTING...\n");

76 i‡(
me
) {

77 i‡(
me
->
Àave_›í
 !
YES
Ë
	`f˛o£
(me->
Â
);

78 
	`HT_FREE
(
me
);

80  
HT_ERROR
;

81 
	}
}

83 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTFWrôî
 =

86 
HTFWrôî_Êush
,

87 
HTFWrôî_‰ì
,

88 
HTFWrôî_ab‹t
,

89 
HTFWrôî_put_ch¨a˘î
,

90 
HTFWrôî_put_°rög
,

91 
HTFWrôî_wrôe


94 
PUBLIC
 
HTSåóm
 * 
	$HTFWrôî_√w
 (
HTReque°
 * 
ªque°
, 
FILE
 * 
Â
,

95 
BOOL
 
Àave_›í
)

97 
HTSåóm
 * 
me
 = 
NULL
;

98 i‡(!
Â
) {

99 
	`HTTRACE
(
STREAM_TRACE
, "FileWriter.. Bad file descriptor\n");

100  
	`HTEº‹Såóm
();

102 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

103 
	`HT_OUTOFMEM
("HTFWriter_new");

104 
me
->
iß
 = &
HTFWrôî
;

105 
me
->
Â
 = fp;

106 
me
->
Àave_›í
 =Üeave_open;

107  
me
;

108 
	}
}

	@Library/src/HTFWrite.h

29 #i‚de‡
HTFWRITE_H


30 
	#HTFWRITE_H


	)

32 
	~"HTSåóm.h
"

33 
	~"HTReq.h
"

45 
HTSåóm
 * 
HTFWrôî_√w
 (

46 
HTReque°
 * 
ªque°
,

47 
FILE
 * 
Â
,

48 
BOOL
 
Àave_›í
);

	@Library/src/HTFile.c

30 
	~"wwwsys.h
"

31 
	~"WWWUtû.h
"

32 
	~"WWWC‹e.h
"

33 
	~"WWWDú.h
"

34 
	~"WWWTøns.h
"

35 
	~"HTReqM™.h
"

36 
	~"HTBöd.h
"

37 
	~"HTMu…i.h
"

38 
	~"HTFûe.h
"

41 
	e_FûeSèã
 {

42 
	mFS_RETRY
 = -4,

43 
	mFS_ERROR
 = -3,

44 
	mFS_NO_DATA
 = -2,

45 
	mFS_GOT_DATA
 = -1,

46 
	mFS_BEGIN
 = 0,

47 
	mFS_PENDING
,

48 
	mFS_DO_CN
,

49 
	mFS_NEED_OPEN_FILE
,

50 
	mFS_NEED_BODY
,

51 
	mFS_PARSE_DIR
,

52 
	mFS_TRY_FTP


53 } 
	tFûeSèã
;

56 
	s_fûe_öfo
 {

57 
FûeSèã
 
	m°©e
;

58 * 
	mloˇl
;

59 
°©
 
	m°©_öfo
;

60 
HTNë
 * 
	m√t
;

61 
HTTimî
 * 
	mtimî
;

62 } 
	tfûe_öfo
;

64 
	s_HTSåóm
 {

65 c⁄° 
HTSåómCœss
 * 
	miß
;

68 
	s_HTI≈utSåóm
 {

69 c⁄° 
HTI≈utSåómCœss
 * 
	miß
;

72 
PRIVATE
 
HTDúRódme
 
	gdú_ªadme
 = 
HT_DIR_README_TOP
;

73 
PRIVATE
 
HTDúAc˚ss
 
	gdú_ac˚ss
 = 
HT_DIR_OK
;

74 
PRIVATE
 
HTDúShow
 
	gdú_show
 = 
HT_DS_SIZE
+
HT_DS_DATE
+
HT_DS_DES
+
HT_DS_ICON
;

75 
PRIVATE
 
HTDúKey
 
	gdú_key
 = 
HT_DK_CINS
;

76 
PRIVATE
 
BOOL
 
	gfûe_suffix_bödög
 = 
YES
;

83 
PUBLIC
 
BOOL
 
	$HTFûe_£tDúAc˚ss
 (
HTDúAc˚ss
 
mode
)

85 
dú_ac˚ss
 = 
mode
;

86  
YES
;

87 
	}
}

89 
PUBLIC
 
HTDúAc˚ss
 
	$HTFûe_dúAc˚ss
 ()

91  
dú_ac˚ss
;

92 
	}
}

97 
PUBLIC
 
BOOL
 
	$HTFûe_£tDúRódme
 (
HTDúRódme
 
mode
)

99 
dú_ªadme
 = 
mode
;

100  
YES
;

101 
	}
}

103 
PUBLIC
 
HTDúRódme
 
	$HTFûe_dúRódme
 ()

105  
dú_ªadme
;

106 
	}
}

112 
PUBLIC
 
BOOL
 
	$HTFûe_doFûeSuffixBödög
 (
BOOL
 
mode
)

114 
fûe_suffix_bödög
 = 
mode
;

115  
YES
;

116 
	}
}

118 
PUBLIC
 
BOOL
 
	$HTFûe_fûeSuffixBödög
 ()

120  
fûe_suffix_bödög
;

121 
	}
}

131 
PRIVATE
 
	$HTFûe_ªadDú
 (
HTReque°
 * 
ªque°
, 
fûe_öfo
 *
fûe
)

133 #ifde‡
HAVE_READDIR


134 
DIR
 * 
dp
;

135 
°©
 
fûe_öfo
;

136 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

137 *
uæ
 = 
	`HTAnch‹_physiˇl
(
™ch‹
);

138 
fuŒ«me
[
HT_MAX_PATH
+1];

139 *
«me
;

140 
	`HTTRACE
(
PROT_TRACE
, "Reading..... directory\n");

141 i‡(
dú_ac˚ss
 =
HT_DIR_FORBID
) {

142 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_FORBIDDEN
,

143 
NULL
, 0, "HTFile_readDir");

144  
HT_FORBIDDEN
;

148 i‡(*(
«me
 = (
uæ
+
	`°æí
(url)-1)) != '/') {

149 *
√wuæ
 = 
NULL
;

150 
	`SåAŒocC›y
(
√wuæ
, 
uæ
);

151 
	`SåAŒocC©
(
√wuæ
, "/");

152 
	`HT_FREE
(
fûe
->
loˇl
);

153 
fûe
->
loˇl
 = 
	`HTWWWToLoˇl
(
√wuæ
, "", 
	`HTReque°_u£rProfûe
(
ªque°
));

154 
	`HT_FREE
(
√wuæ
);

156 
	`°r˝y
(
fuŒ«me
, 
fûe
->
loˇl
);

157 
«me
 = 
fuŒ«me
+
	`°æí
(fullname);

160 i‡(
dú_ac˚ss
 =
HT_DIR_SELECTIVE
) {

161 
	`°r˝y
(
«me
, 
DEFAULT_DIR_FILE
);

162 i‡(
	`HT_STAT
(
fuŒ«me
, &
fûe_öfo
)) {

163 
	`HTTRACE
(
PROT_TRACE
, "Ród dú.... `%s\'ÇŸ found\n" 
_
 
DEFAULT_DIR_FILE
);

164 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_FORBIDDEN
,

165 
NULL
, 0, "HTFile_readDir");

166  
HT_FORBIDDEN
;

170 i‡((
dp
 = 
	`›ídú
(
fûe
->
loˇl
))) {

171 
dúít
 * 
dúbuf
;

172 
HTDú
 *
dú
 = 
	`HTDú_√w
(
ªque°
, 
dú_show
, 
dú_key
);

173 
d©e°r
[20];

174 
size°r
[10];

175 
HTFûeMode
 
mode
;

176 #ifde‡
HT_REENTRANT


177 
dúít
 
ªsu…
;

180 #ifde‡
HAVE_READDIR_R_2


181 (
dúbuf
 = (
dúít
 *Ë
	`ªaddú_r
(
dp
, &
ªsu…
)))

182 #ñi‡
	`deföed
(
HAVE_READDIR_R_3
)

183 
	`ªaddú_r
(
dp
, &
ªsu…
, &
dúbuf
) == 0)

185 (
dúbuf
 = 
	`ªaddú
(
dp
)))

189 #ifde‡
HAVE_DIRENT_INO


190 i‡(!
dúbuf
->
d_öo
 ||

191 !
	`°rcmp
(
dúbuf
->
d_«me
, ".") || !strcmp(dirbuf->d_name, ".."))

193 i‡(!
	`°rcmp
(
dúbuf
->
d_«me
, ".") || !strcmp(dirbuf->d_name, ".."))

198 
	`°r˝y
(
«me
, 
dúbuf
->
d_«me
);

199 i‡(
	`HT_LSTAT
(
fuŒ«me
, &
fûe_öfo
)) {

200 
	`HTTRACE
(
PROT_TRACE
, "Ród dú....Ü°© faûed: %s\n" 
_
 
fuŒ«me
);

205 i‡(((
mode_t
Ë
fûe_öfo
.
°_mode
 & 
S_IFMT
Ë=
S_IFDIR
) {

206 #ifde‡
VMS


207 *
dŸ
 = 
	`°r°r
(
«me
, ".DIR");

208 i‡(
dŸ
) *dot = '\0';

210 
mode
 = 
HT_IS_DIR
;

211 i‡(
dú_show
 & 
HT_DS_SIZE
Ë
	`°r˝y
(
size°r
, "-");

213 
mode
 = 
HT_IS_FILE
;

214 i‡(
dú_show
 & 
HT_DS_SIZE
)

215 
	`HTNumToSå
(
fûe_öfo
.
°_size
, 
size°r
, 10);

217 i‡(
dú_show
 & 
HT_DS_DATE
)

218 
	`HTD©eDúSå
(&
fûe_öfo
.
°_mtime
, 
d©e°r
, 20);

221 i‡(
	`HTDú_addEÀmít
(
dú
, 
«me
, 
d©e°r
, 
size°r
, 
mode
Ë!
YES
)

224 
	`˛o£dú
(
dp
);

225 
	`HTDú_‰ì
(
dú
);

226  
HT_LOADED
;

228 
	`HTReque°_addSy°emEº‹
(
ªque°
, 
ERR_FATAL
, 
î∫o
, 
NO
, "opendir");

229  
HT_ERROR
;

232  
HT_ERROR
;

234 
	}
}

247 
PRIVATE
 
BOOL
 
	$HTEdôabÀ
 (c⁄° * 
fûíame
, 
°©
 * 
°©_öfo
)

249 #ifde‡
GETGROUPS_T


250 
i
;

251 
uid_t
 
myUid
;

252 
ngroups
;

253 
°©
 
fûeSètus
;

254 
°©
 *
fûïå
 = 
°©_öfo
 ? sèt_öfÿ: &
fûeSètus
;

255 
GETGROUPS_T
 
groups
[
NGROUPS
];

256 i‡(!
°©_öfo
) {

257 i‡(
	`HT_STAT
(
fûíame
, &
fûeSètus
))

258  
NO
;

260 
ngroups
 = 
	`gëgroups
(
NGROUPS
, 
groups
);

261 
myUid
 = 
	`gëeuid
();

263 #ifde‡
HTDEBUG


264 i‡(
PROT_TRACE
) {

265 
i
;

266 
	`HTTRACE
(
PROT_TRACE
,

267 "Fûêmodêi†0%o, uid=%d, gid=%d. My uid=%d, %d group†(" 
_


268 (Ë
fûïå
->
°_mode
 
_


269 (Ë
fûïå
->
°_uid
 
	`_
 (Ëfûïå->
°_gid
 
_


270 (Ë
myUid
 
_
 
ngroups
);

271 
i
=0; i<
ngroups
; i++Ë
	`HTTRACE
(
PROT_TRACE
, " %d" 
	`_
 (Ë
groups
[i]);

272 
	`HTTRACE
(
PROT_TRACE
, ")\n");

276 i‡(
fûïå
->
°_mode
 & 0002)

277  
YES
;

279 i‡((
fûïå
->
°_mode
 & 0200)

280 && (
fûïå
->
°_uid
 =
myUid
))

281  
YES
;

283 i‡(
fûïå
->
°_mode
 & 0020)

285 
i
=0; i<
ngroups
; i++) {

286 i‡(
groups
[
i
] =
fûïå
->
°_gid
)

287  
YES
;

290 
	`HTTRACE
(
PROT_TRACE
, "\tFile isÇotÉditable.\n");

291  
NO
;

297  
NO
;

299 
	}
}

306 
PRIVATE
 
	$FûeCÀ™up
 (
HTReque°
 *
ªq
, 
°©us
)

308 
HTNë
 * 
√t
 = 
	`HTReque°_√t
(
ªq
);

309 
fûe_öfo
 * 
fûe
 = (fûe_öfÿ*Ë
	`HTNë_c⁄ãxt
(
√t
);

310 
HTSåóm
 * 
öput
 = 
	`HTReque°_öputSåóm
(
ªq
);

313 i‡(
öput
) {

314 i‡(
°©us
 =
HT_INTERRUPTED
)

315 (*
öput
->
iß
->
ab‹t
)(öput, 
NULL
);

317 (*
öput
->
iß
->
_‰ì
)(input);

318 
	`HTReque°_£tI≈utSåóm
(
ªq
, 
NULL
);

324 i‡(
fûe
->
timî
) {

325 
	`HTTimî_dñëe
(
fûe
->
timî
);

326 
fûe
->
timî
 = 
NULL
;

329 i‡(
fûe
) {

330 
	`HT_FREE
(
fûe
->
loˇl
);

331 
	`HT_FREE
(
fûe
);

333 
	`HTNë_dñëe
(
√t
, 
°©us
);

334  
YES
;

335 
	}
}

347 
PRIVATE
 
FûeEvít
 (
SOCKET
 
soc
, * 
pVoid
, 
HTEvítTy≥
 
ty≥
);

349 
PUBLIC
 
	$HTLﬂdFûe
 (
SOCKET
 
soc
, 
HTReque°
 * 
ªque°
)

351 
fûe_öfo
 *
fûe
;

352 
HTNë
 * 
√t
 = 
	`HTReque°_√t
(
ªque°
);

353 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

355 
	`HTTRACE
(
PROT_TRACE
, "HTLﬂdFûe.. Lookög f‹ `%s\'\n" 
_


356 
	`HTAnch‹_physiˇl
(
™ch‹
));

357 i‡((
fûe
 = (
fûe_öfo
 *Ë
	`HT_CALLOC
(1, (fûe_öfo))Ë=
NULL
)

358 
	`HT_OUTOFMEM
("HTLoadFILE");

359 
fûe
->
°©e
 = 
FS_BEGIN
;

360 
fûe
->
√t
 =Çet;

361 
	`HTNë_£tC⁄ãxt
(
√t
, 
fûe
);

362 
	`HTNë_£tEvítCÆlback
(
√t
, 
FûeEvít
);

363 
	`HTNë_£tEvítP¨am
(
√t
, 
fûe
);

365  
	`FûeEvít
(
soc
, 
fûe
, 
HTEvít_BEGIN
);

366 
	}
}

368 
PRIVATE
 
	$Rëu∫Evít
 (
HTTimî
 * 
timî
, * 
∑øm
, 
HTEvítTy≥
 
ty≥
)

370 
fûe_öfo
 * 
fûe
 = (fûe_öfÿ*Ë
∑øm
;

371 i‡(
timî
 !
fûe
->timer)

372 
	`HTDEBUGBREAK
("Fûêtimî %∞nŸ i¿sync\n" 
_
 
timî
);

373 
	`HTTRACE
(
PROT_TRACE
, "HTLﬂdFûe.. C⁄töuög %∞wôhÅimî %p\n" 
_
 
fûe
 _ 
timî
);

378 
	`HTTimî_dñëe
(
fûe
->
timî
);

379 
fûe
->
timî
 = 
NULL
;

384  
	`FûeEvít
(
INVSOC
, 
fûe
, 
HTEvít_READ
);

385 
	}
}

388 
PRIVATE
 
	$FûeEvít
 (
SOCKET
 
soc
, * 
pVoid
, 
HTEvítTy≥
 
ty≥
)

390 
fûe_öfo
 *
fûe
 = 
pVoid
;

391 
°©us
 = 
HT_ERROR
;

392 
HTNë
 * 
√t
 = 
fûe
->net;

393 
HTReque°
 * 
ªque°
 = 
	`HTNë_ªque°
(
√t
);

394 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

401 i‡(
ty≥
 =
HTEvít_CLOSE
) {

402 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_INTERRUPTED
,

403 
NULL
, 0, "HTLoadFile");

404 
	`FûeCÀ™up
(
ªque°
, 
HT_INTERRUPTED
);

405  
HT_OK
;

411 
fûe
->
°©e
) {

412 
FS_BEGIN
:

415 i‡(!
	`HTMëhod_isSa„
(
	`HTReque°_mëhod
(
ªque°
))) {

416 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_NOT_ALLOWED
,

417 
NULL
, 0, "HTLoadFile");

418 
fûe
->
°©e
 = 
FS_ERROR
;

423 i‡(
	`HTLib_£cuª
()) {

424 
	`HTTRACE
(
PROT_TRACE
, "LoadFile.... NoáccessÅoÜocal file system\n");

425 
fûe
->
°©e
 = 
FS_TRY_FTP
;

428 
fûe
->
loˇl
 = 
	`HTWWWToLoˇl
(
	`HTAnch‹_physiˇl
(
™ch‹
), "",

429 
	`HTReque°_u£rProfûe
(
ªque°
));

430 i‡(!
fûe
->
loˇl
) {

431 
fûe
->
°©e
 = 
FS_TRY_FTP
;

437 
HTHo°
 * 
ho°
 = 
NULL
;

438 i‡((
ho°
 = 
	`HTHo°_√w
("loˇlho°", 0)Ë=
NULL
Ë 
HT_ERROR
;

439 
	`HTNë_£tHo°
(
√t
, 
ho°
);

440 i‡(
	`HTHo°_addNë
(
ho°
, 
√t
Ë=
HT_PENDING
) {

441 
	`HTTRACE
(
PROT_TRACE
, "HTLoadFile.. Pending...\n");

443 
fûe
->
°©e
 = 
FS_PENDING
;

444  
HT_OK
;

447 
fûe
->
°©e
 = 
FS_DO_CN
;

450 
FS_PENDING
:

463 
HTHo°
 * 
ho°
 = 
NULL
;

464 i‡((
ho°
 = 
	`HTHo°_√w
("loˇlho°", 0)Ë=
NULL
Ë 
HT_ERROR
;

465 
	`HTNë_£tHo°
(
√t
, 
ho°
);

466 i‡(
	`HTHo°_addNë
(
ho°
, 
√t
Ë=
HT_PENDING
) {

467 
	`HTTRACE
(
PROT_TRACE
, "HTLoadFile.. Pending...\n");

468 
fûe
->
°©e
 = 
FS_PENDING
;

469  
HT_OK
;

472 
fûe
->
°©e
 = 
FS_DO_CN
;

475 
FS_DO_CN
:

485 i‡(
	`HTReque°_√gŸüti⁄
(
ªque°
) &&

486 
	`HTMëhod_isSa„
(
	`HTReque°_mëhod
(
ªque°
))) {

487 * 
c⁄√g
 = 
	`HTMu…i
(
ªque°
, 
fûe
->
loˇl
,&fûe->
°©_öfo
);

488 i‡(
c⁄√g
) {

489 
	`HT_FREE
(
fûe
->
loˇl
);

490 
fûe
->
loˇl
 = 
c⁄√g
;

491 
	`HTAnch‹_£tPhysiˇl
(
™ch‹
, 
c⁄√g
);

492 
	`HTTRACE
(
PROT_TRACE
, "Lﬂd Fûe... Found `%s\'\n" 
_
 
c⁄√g
);

494 
	`HTTRACE
(
PROT_TRACE
, "Load File... Not found -ÉvenÅried contentÇegotiation\n");

495 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_NOT_FOUND
,

496 
NULL
, 0, "HTLoadFile");

497 
fûe
->
°©e
 = 
FS_ERROR
;

501 i‡(
	`HT_STAT
(
fûe
->
loˇl
, &fûe->
°©_öfo
) == -1) {

502 
	`HTTRACE
(
PROT_TRACE
, "Lﬂd Fûe... NŸ found `%s\'\n" 
_
 
fûe
->
loˇl
);

503 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_NOT_FOUND
,

504 
NULL
, 0, "HTLoadFile");

505 
fûe
->
°©e
 = 
FS_ERROR
;

514 i‡(((
fûe
->
°©_öfo
.
°_mode
Ë& 
S_IFMT
Ë=
S_IFDIR
) {

515 i‡(
	`HTReque°_mëhod
(
ªque°
Ë=
METHOD_GET
)

516 
fûe
->
°©e
 = 
FS_PARSE_DIR
;

518 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_INFO
, 
NO
, 
HTERR_NO_CONTENT
,

519 
NULL
, 0, "HTLoadFile");

520 
fûe
->
°©e
 = 
FS_NO_DATA
;

530 
BOOL
 
edôabÀ
 = 
	`HTEdôabÀ
(
fûe
->
loˇl
, &fûe->
°©_öfo
);

531 i‡(
fûe_suffix_bödög
Ë
	`HTBöd_gëAnch‹Bödögs
(
™ch‹
);

532 i‡(
edôabÀ
Ë
	`HTAnch‹_≠≥ndAŒow
(
™ch‹
, 
METHOD_PUT
);

535 i‡(
fûe
->
°©_öfo
.
°_size
)

536 
	`HTAnch‹_£tLígth
(
™ch‹
, 
fûe
->
°©_öfo
.
°_size
);

539 i‡(
fûe
->
°©_öfo
.
°_mtime
 > 0)

540 
	`HTAnch‹_£tLa°Modifõd
(
™ch‹
, 
fûe
->
°©_öfo
.
°_mtime
);

543 i‡(!
edôabÀ
 && !
fûe
->
°©_öfo
.
°_size
) {

544 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_INFO
, 
NO
, 
HTERR_NO_CONTENT
,

545 
NULL
, 0, "HTLoadFile");

546 
fûe
->
°©e
 = 
FS_NO_DATA
;

548 
fûe
->
°©e
 = (
	`HTReque°_mëhod
(
ªque°
)==
METHOD_GET
) ?

549 
FS_NEED_OPEN_FILE
 : 
FS_GOT_DATA
;

554 
FS_NEED_OPEN_FILE
:

555 
°©us
 = 
	`HTFûeO≥n
(
√t
, 
fûe
->
loˇl
, 
HT_FB_RDONLY
);

556 i‡(
°©us
 =
HT_OK
) {

563 
HTSåóm
 * 
r°ªam
 = 
	`HTSåómSèck
(
	`HTAnch‹_f‹m©
(
™ch‹
),

564 
	`HTReque°_ouçutF‹m©
(
ªque°
),

565 
	`HTReque°_ouçutSåóm
(
ªque°
),

566 
ªque°
, 
YES
);

567 
	`HTNë_£tRódSåóm
(
√t
, 
r°ªam
);

568 
	`HTReque°_£tOuçutC⁄√˘ed
(
ªque°
, 
YES
);

576 
HTOuçutSåóm
 * 
ouçut
 = 
	`HTNë_gëOuçut
(
√t
, 
NULL
, 0);

577 
	`HTReque°_£tI≈utSåóm
(
ªque°
, (
HTSåóm
 *Ë
ouçut
);

586 i‡(
	`HTReque°_isSour˚
(
ªque°
Ë&& !
	`HTReque°_de°ö©i⁄sRódy
(request))

587  
HT_OK
;

588 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_INFO
, 
NO
, 
HTERR_OK
, 
NULL
, 0,

590 
fûe
->
°©e
 = 
FS_NEED_BODY
;

598 i‡(
	`HTEvít_isCÆlbacksRegi°îed
()) {

599 i‡(!
	`HTReque°_¥ìm±ive
(
ªque°
)) {

600 i‡(!
	`HTNë_¥ìm±ive
(
√t
)) {

601 
	`HTTRACE
(
PROT_TRACE
, "HTLoadFile.. Returning\n");

602 
	`HTHo°_ªgi°î
(
	`HTNë_ho°
(
√t
),Çë, 
HTEvít_READ
);

603 } i‡(!
fûe
->
timî
) {

604 
	`HTTRACE
(
PROT_TRACE
, "HTLoadFile.. Returning\n");

605 
fûe
->
timî
 =

606 
	`HTTimî_√w
(
NULL
, 
Rëu∫Evít
, 
fûe
, 1, 
YES
, 
NO
);

608  
HT_OK
;

611 } i‡(
°©us
 =
HT_WOULD_BLOCK
 || sètu†=
HT_PENDING
)

612  
HT_OK
;

614 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_INFO
, 
NO
, 
HTERR_INTERNAL
,

615 
NULL
, 0, "HTLoadFile");

616 
fûe
->
°©e
 = 
FS_ERROR
;

620 
FS_NEED_BODY
:

621 
°©us
 = 
	`HTHo°_ªad
(
	`HTNë_ho°
(
√t
),Çet);

622 i‡(
°©us
 =
HT_WOULD_BLOCK
)

623  
HT_OK
;

624 i‡(
°©us
 =
HT_LOADED
 || sètu†=
HT_CLOSED
) {

625 
fûe
->
°©e
 = 
FS_GOT_DATA
;

627 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_INFO
, 
NO
, 
HTERR_FORBIDDEN
,

628 
NULL
, 0, "HTLoadFile");

629 
fûe
->
°©e
 = 
FS_ERROR
;

633 
FS_PARSE_DIR
:

634 
°©us
 = 
	`HTFûe_ªadDú
(
ªque°
, 
fûe
);

635 i‡(
°©us
 =
HT_LOADED
)

636 
fûe
->
°©e
 = 
FS_GOT_DATA
;

638 
fûe
->
°©e
 = 
FS_ERROR
;

641 
FS_TRY_FTP
:

643 *
uæ
 = 
	`HTAnch‹_physiˇl
(
™ch‹
);

644 
HTAnch‹
 *
™ch‹
;

645 *
√w«me
 = 
NULL
;

646 
	`SåAŒocC›y
(
√w«me
, "ftp:");

647 i‡(!
	`°∫cmp
(
uæ
, "file:", 5))

648 
	`SåAŒocC©
(
√w«me
, 
uæ
+5);

650 
	`SåAŒocC©
(
√w«me
, 
uæ
);

651 
™ch‹
 = 
	`HTAnch‹_födAddªss
(
√w«me
);

652 
	`HTReque°_£tAnch‹
(
ªque°
, 
™ch‹
);

653 
	`HT_FREE
(
√w«me
);

654 
	`FûeCÀ™up
(
ªque°
, 
HT_IGNORE
);

655  
	`HTLﬂd
(
ªque°
, 
YES
);

659 
FS_GOT_DATA
:

660 
	`FûeCÀ™up
(
ªque°
, 
HT_LOADED
);

661  
HT_OK
;

664 
FS_NO_DATA
:

665 
	`FûeCÀ™up
(
ªque°
, 
HT_NO_DATA
);

666  
HT_OK
;

669 
FS_RETRY
:

670 
	`FûeCÀ™up
(
ªque°
, 
HT_RETRY
);

671  
HT_OK
;

674 
FS_ERROR
:

675 
	`FûeCÀ™up
(
ªque°
, 
HT_ERROR
);

676  
HT_OK
;

680 
	}
}

	@Library/src/HTFile.h

27 #i‚de‡
HTFILE_H


28 
	#HTFILE_H


	)

30 
	~"HTPrŸ.h
"

32 
HTPrŸCÆlback
 
HTLﬂdFûe
;

43 
	e_HTDúAc˚ss
 {

44 
	mHT_DIR_FORBID
,

45 
	mHT_DIR_SELECTIVE
,

46 
	mHT_DIR_OK


47 } 
	tHTDúAc˚ss
;

49 
	#DEFAULT_DIR_FILE
 ".www_browßbÀ"

	)

51 
HTDúAc˚ss
 
HTFûe_dúAc˚ss
 ();

52 
BOOL
 
HTFûe_£tDúAc˚ss
 (
HTDúAc˚ss
 
mode
);

63 
	e_HTDúRódme
 {

64 
	mHT_DIR_README_NONE
,

65 
	mHT_DIR_README_TOP
,

66 
	mHT_DIR_README_BOTTOM


67 } 
	tHTDúRódme
;

69 
	#DEFAULT_README
 "README"

	)

71 
HTDúRódme
 
HTFûe_dúRódme
 ();

72 
BOOL
 
HTFûe_£tDúRódme
 (
HTDúRódme
 
mode
);

88 
BOOL
 
HTFûe_doFûeSuffixBödög
 (BOOL 
mode
);

89 
BOOL
 
HTFûe_fûeSuffixBödög
 ();

	@Library/src/HTFilter.c

17 
	~"WWWLib.h
"

18 
	~"WWWCache.h
"

19 
	~"WWWHTTP.h
"

20 
	~"HTLog.h
"

21 
	~"HTAc˚ss.h
"

22 
	~"HTProxy.h
"

23 
	~"HTRuÀs.h
"

24 
	~"HTFûãr.h
"

38 
PUBLIC
 
	$HTProxyFûãr
 (
HTReque°
 * 
ªque°
, * 
∑øm
, 
mode
)

40 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

41 * 
addr
 = 
	`HTAnch‹_physiˇl
(
™ch‹
);

42 * 
physiˇl
 = 
NULL
;

43 i‡((
physiˇl
 = 
	`HTProxy_föd
(
addr
))) {

44 
	`HTReque°_£tFuŒURI
(
ªque°
, 
YES
);

45 
	`HTReque°_£tProxy
(
ªque°
, 
physiˇl
);

46 
	`HT_FREE
(
physiˇl
);

49 
	`SåAŒocC©
(
physiˇl
, 
addr
);

50 
	`HTAnch‹_£tPhysiˇl
(
™ch‹
, 
physiˇl
);

52 } i‡((
physiˇl
 = 
	`HTG©eway_föd
(
addr
))) {

57 * 
∑th
 =

58 
	`HTP¨£
(
addr
, "", 
PARSE_HOST
 + 
PARSE_PATH
 + 
PARSE_PUNCTUATION
);

59 * 
g©ewayed
 = 
	`HTP¨£
((*
∑th
=='/'Ë?Ö©h+1 :Ö©h, 
physiˇl
, 
PARSE_ALL
);

60 
	`HTAnch‹_£tPhysiˇl
(
™ch‹
, 
g©ewayed
);

61 
	`HT_FREE
(
∑th
);

62 
	`HT_FREE
(
g©ewayed
);

63 
	`HTReque°_£tFuŒURI
(
ªque°
, 
NO
);

64 
	`HTReque°_dñëeProxy
(
ªque°
);

66 
	`HTReque°_£tFuŒURI
(
ªque°
, 
NO
);

67 
	`HTReque°_dñëeProxy
(
ªque°
);

69  
HT_OK
;

70 
	}
}

83 
PUBLIC
 
	$HTRuÀFûãr
 (
HTReque°
 * 
ªque°
, * 
∑øm
, 
mode
)

85 
HTLi°
 * 
li°
 = 
	`HTRuÀ_globÆ
();

86 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

87 * 
addr
 = 
	`HTAnch‹_physiˇl
(
™ch‹
);

88 * 
physiˇl
 = 
	`HTRuÀ_å™¶©e
(
li°
, 
addr
, 
NO
);

89 i‡(!
physiˇl
) {

90 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_FORBIDDEN
,

91 
NULL
, 0, "HTRuleFilter");

92  
HT_ERROR
;

94 
	`HTAnch‹_£tPhysiˇl
(
™ch‹
, 
physiˇl
);

95 
	`HT_FREE
(
physiˇl
);

96  
HT_OK
;

97 
	}
}

108 
PUBLIC
 
	$HTMem‹yCacheFûãr
 (
HTReque°
 * 
ªque°
, * 
∑øm
, 
mode
)

110 
HTRñﬂd
 
vÆid©i⁄
 = 
	`HTReque°_ªlﬂdMode
(
ªque°
);

111 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

112 * 
documít
 = 
	`HTAnch‹_documít
(
™ch‹
);

117 i‡(
	`HTReque°_mëhod
(
ªque°
Ë!
METHOD_GET
) {

118 
	`HTTRACE
(
CACHE_TRACE
, "Mem Cache... We only check GET methods\n");

119  
HT_OK
;

127 i‡(!
documít
 || 
vÆid©i⁄
 > 
HT_CACHE_FLUSH_MEM
) {

128 
	`HTTRACE
(
CACHE_TRACE
, "Mem Cache... No fresh document...\n");

129  
HT_OK
;

137 i‡(
documít
 && 
vÆid©i⁄
 !
HT_CACHE_FLUSH_MEM
) {

138 
	`HTTRACE
(
CACHE_TRACE
, "Mem Cache... Documentálready in memory\n");

139  
HT_LOADED
;

141  
HT_OK
;

142 
	}
}

150 
PUBLIC
 
	$HTInfoFûãr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

151 * 
∑øm
, 
°©us
)

153 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

154 * 
uri
 = 
	`HTAnch‹_addªss
((
HTAnch‹
*Ë
™ch‹
);

155 
°©us
) {

156 
HT_RETRY
: {

157 
HTAÀπCÆlback
 *
cbf
 = 
	`HTAÀπ_föd
(
HT_A_MESSAGE
);

158 i‡(
cbf
Ë(*cbf)(
ªque°
, 
HT_A_MESSAGE
, 
HT_MSG_NULL
, 
NULL
,

159 
	`HTReque°_îr‹
(
ªque°
), 
NULL
);

160 
	`HTTRACE
(
PROT_TRACE
, "Lﬂd End.... NOT AVAILABLE, RETRY AT %ld\n" 
_


161 
	`HTRe•⁄£_ªåyTime
(
ª•⁄£
));

165 
HT_NO_DATA
:

170 
HTAÀπCÆlback
 *
cbf
 = 
	`HTAÀπ_föd
(
HT_A_MESSAGE
);

171 i‡(
cbf
Ë(*cbf)(
ªque°
, 
HT_A_MESSAGE
, 
HT_MSG_NULL
, 
NULL
,

172 
	`HTReque°_îr‹
(
ªque°
), 
NULL
);

173 
	`HTTRACE
(
PROT_TRACE
, "Lﬂd End.... EMPTY: Nÿc⁄ã¡ `%s\'\n" 
_


174 
uri
 ? uri : "<UNKNOWN>");

178 
HT_LOADED
:

179 
	`HTTRACE
(
PROT_TRACE
, "Lﬂd End.... OK: `%s\'\n" 
_
 
uri
);

188 
HTAÀπCÆlback
 *
cbf
 = 
	`HTAÀπ_föd
(
HT_A_MESSAGE
);

189 i‡(
cbf
Ë(*cbf)(
ªque°
, 
HT_A_MESSAGE
, 
HT_MSG_NULL
, 
NULL
,

190 
	`HTReque°_îr‹
(
ªque°
), 
NULL
);

191 
	`HTTRACE
(
PROT_TRACE
, "Lﬂd End.... Reque°Énded wôh codê%d\n" 
_
 
°©us
);

195 
	`HT_FREE
(
uri
);

196  
HT_OK
;

197 
	}
}

205 
PUBLIC
 
	$HTRedúe˘Fûãr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

206 * 
∑øm
, 
°©us
)

208 
HTMëhod
 
mëhod
 = 
	`HTReque°_mëhod
(
ªque°
);

209 
HTAnch‹
 * 
√w_™ch‹
 = 
	`HTRe•⁄£_ªdúe˘i⁄
(
ª•⁄£
);

212 i‡(!
√w_™ch‹
) {

213 
	`HTTRACE
(
PROT_TRACE
, "Redirection. No destination\n");

214  
HT_OK
;

221 i‡(!
	`HTMëhod_isSa„
(
mëhod
)) {

227 i‡(
°©us
 =
HT_SEE_OTHER
) {

228 
	`HTTRACE
(
PROT_TRACE
, "Redúe˘i⁄. Ch™gög mëhod from %†tÿGET\n" 
_


229 
	`HTMëhod_«me
(
mëhod
));

230 
	`HTReque°_£tMëhod
(
ªque°
, 
METHOD_GET
);

232 
HTAÀπCÆlback
 * 
¥om±
 = 
	`HTAÀπ_föd
(
HT_A_CONFIRM
);

233 i‡(
¥om±
) {

234 i‡((*
¥om±
)(
ªque°
, 
HT_A_CONFIRM
, 
HT_MSG_REDIRECTION
,

235 
NULL
, NULL, NULLË!
YES
)

236  
HT_OK
;

243 
HTLökTy≥
 
…y≥
 = 
°©us
==
HT_PERM_REDIRECT
 ? 
HT_LR_PERM_REDIRECT
 :

244 (
°©us
==
HT_TEMP_REDIRECT
 || sètus==
HT_FOUND
Ë? 
HT_LR_TEMP_REDIRECT
 :

245 
°©us
==
HT_SEE_OTHER
 ? 
HT_LR_SEE_OTHER
 : 
NULL
;

246 i‡(
…y≥
) {

247 
	`HTLök_add
((
HTAnch‹
 *Ë
	`HTReque°_™ch‹
(
ªque°
), 
√w_™ch‹
,

248 
…y≥
, 
mëhod
);

253 
	`HTReque°_dñëeCªdítülsAŒ
(
ªque°
);

262 i‡(
	`HTReque°_doRëry
(
ªque°
)) {

263 
	`HTLﬂdAnch‹
(
√w_™ch‹
, 
ªque°
);

265 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_MAX_REDIRECT
,

266 
NULL
, 0, "HTRedirectFilter");

267  
HT_OK
;

275  
HT_ERROR
;

276 
	}
}

284 
PUBLIC
 
	$HTU£ProxyFûãr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

285 * 
∑øm
, 
°©us
)

287 
HTAÀπCÆlback
 * 
cbf
 = 
	`HTAÀπ_föd
(
HT_A_CONFIRM
);

288 
HTAnch‹
 * 
¥oxy_™ch‹
 = 
	`HTRe•⁄£_ªdúe˘i⁄
(
ª•⁄£
);

289 i‡(!
¥oxy_™ch‹
) {

290 
	`HTTRACE
(
PROT_TRACE
, "Use Proxy... NoÖroxyÜocation\n");

291  
HT_OK
;

301 i‡((
cbf
 && (*cbf)(
ªque°
, 
HT_A_CONFIRM
, 
HT_MSG_PROXY
, 
NULL
,NULL,NULL))) {

302 * 
addr
 = 
	`HTAnch‹_addªss
(
¥oxy_™ch‹
);

303 
	`HTProxy_add
("hâp", 
addr
);

304 
	`HT_FREE
(
addr
);

310 i‡(
	`HTReque°_doRëry
(
ªque°
)) {

311 
	`HTLﬂdAnch‹
(
¥oxy_™ch‹
, 
ªque°
);

313 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_MAX_REDIRECT
,

314 
NULL
, 0, "HTRedirectFilter");

322  
HT_ERROR
;

325 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_NO_AUTO_PROXY
,

326 
NULL
, 0, "HTUseProxyFilter");

327  
HT_OK
;

329 
	}
}

337 
PUBLIC
 
	$HTCªdítülsFûãr
 (
HTReque°
 * 
ªque°
, * 
∑øm
, 
mode
)

343 i‡(
	`HTAA_bef‹eFûãr
(
ªque°
, 
∑øm
, 
mode
Ë=
HT_OK
) {

344 
	`HTTRACE
(
PROT_TRACE
, "Credentials. verified\n");

345  
HT_OK
;

347 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_UNAUTHORIZED
,

348 
NULL
, 0, "HTCredentialsFilter");

349  
HT_ERROR
;

351 
	}
}

361 
PUBLIC
 
	$HTAuthFûãr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

362 * 
∑øm
, 
°©us
)

368 i‡(
	`HTAA_a·îFûãr
(
ªque°
, 
ª•⁄£
, 
∑øm
, 
°©us
Ë=
HT_OK
) {

375 
	`HTLﬂd
(
ªque°
, 
NO
);

382  
HT_ERROR
;

384  
HT_OK
;

385 
	}
}

391 
PUBLIC
 
	$HTAuthInfoFûãr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

392 * 
∑øm
, 
°©us
)

398 i‡(! 
	`HTRe•⁄£_chÆÀnge
 (
ª•⁄£
))

399  
HT_OK
;

400 i‡(
	`HTAA_upd©eFûãr
(
ªque°
, 
ª•⁄£
, 
∑øm
, 
°©us
Ë=
HT_OK
)

401  
HT_OK
;

403  
HT_ERROR
;

404 
	}
}

411 
PUBLIC
 
	$HTLogFûãr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

412 * 
∑øm
, 
°©us
)

414 i‡(
ªque°
) {

415 
HTLog
 * 
log
 = (HTLog *Ë
∑øm
;

416 i‡(
log
Ë
	`HTLog_addCLF
÷og, 
ªque°
, 
°©us
);

417  
HT_OK
;

419  
HT_ERROR
;

420 
	}
}

427 
PUBLIC
 
	$HTRe„ªrFûãr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

428 * 
∑øm
, 
°©us
)

430 i‡(
ªque°
) {

431 
HTLog
 * 
log
 = (HTLog *Ë
∑øm
;

432 i‡(
log
Ë
	`HTLog_addRe„ªr
÷og, 
ªque°
, 
°©us
);

433  
HT_OK
;

435  
HT_ERROR
;

436 
	}
}

	@Library/src/HTFilter.h

29 #i‚de‡
HTFILTER_H


30 
	#HTFILTER_H


	)

31 
	~"WWWLib.h
"

54 
HTNëBef‹e
 
HTProxyFûãr
;

69 
HTNëBef‹e
 
HTRuÀFûãr
;

83 
HTNëBef‹e
 
HTMem‹yCacheFûãr
;

95 
HTNëBef‹e
 
HTCªdítülsFûãr
;

114 
HTNëA·î
 
HTInfoFûãr
;

126 
HTNëA·î
 
HTRedúe˘Fûãr
;

137 
HTNëA·î
 
HTU£ProxyFûãr
;

149 
HTNëA·î
 
HTAuthFûãr
;

163 
HTNëA·î
 
HTAuthInfoFûãr
;

174 
HTNëA·î
 
HTLogFûãr
;

186 
HTNëA·î
 
HTRe„ªrFûãr
;

	@Library/src/HTFormat.c

19 
	~"wwwsys.h
"

20 
	~"WWWUtû.h
"

21 
	~"HTSåóm.h
"

22 
	~"HTWWWSå.h
"

23 
	~"HTFWrôe.h
"

24 
	~"HTEº‹.h
"

25 
	~"HTF‹m©.h
"

27 
	#NO_VALUE_FOUND
 -1e30

	)

29 
PRIVATE
 
HTLi°
 * 
	gHTC⁄vîsi⁄s
 = 
NULL
;

30 
PRIVATE
 
HTLi°
 * 
	gHTC⁄ã¡Codîs
 = 
NULL
;

31 
PRIVATE
 
HTLi°
 * 
	gHTTøns„rCodîs
 = 
NULL
;

32 
PRIVATE
 
HTLi°
 * 
	gHTCh¨£ts
 = 
NULL
;

33 
PRIVATE
 
HTLi°
 * 
	gHTL™guages
 = 
NULL
;

35 
PRIVATE
 
	gHTMaxSecs
 = 1e10;

37 
PRIVATE
 
HTC⁄vîãr
 * 
	g¥e£¡©i⁄_c⁄vîãr
 = 
NULL
;

39 
	s_HTSåóm
 {

40 c⁄° 
HTSåómCœss
 * 
	miß
;

43 
	s_HTCodög
 {

44 
HTEncodög
 
	mícodög
;

45 
HTCodî
 * 
	mícodî
;

46 
HTCodî
 * 
	mdecodî
;

47 
	mquÆôy
;

50 
PRIVATE
 
HTSåóm
 
	gHTBa£C⁄vîãrSåómIn°™˚
;

56 
PRIVATE
 
	$HTBœckHﬁeC⁄vîãr_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

58  
HT_OK
;

59 
	}
}

61 
PRIVATE
 
	$HTBœckHﬁeC⁄vîãr_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

63  
HT_OK
;

64 
	}
}

66 
PRIVATE
 
	$HTBœckHﬁeC⁄vîãr_wrôe
 (
HTSåóm
 * 
me
, c⁄° * 
s
, 
l
)

68  
HT_OK
;

69 
	}
}

71 
PRIVATE
 
	$HTBœckHﬁeC⁄vîãr_Êush
 (
HTSåóm
 * 
me
)

73  
HT_OK
;

74 
	}
}

76 
PRIVATE
 
	$HTBœckHﬁeC⁄vîãr_‰ì
 (
HTSåóm
 * 
me
)

78  
HT_OK
;

79 
	}
}

81 
PRIVATE
 
	$HTBœckHﬁeC⁄vîãr_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

83  
HT_ERROR
;

84 
	}
}

87 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTBœckHﬁeC⁄vîãrCœss
 =

90 
HTBœckHﬁeC⁄vîãr_Êush
,

91 
HTBœckHﬁeC⁄vîãr_‰ì
,

92 
HTBœckHﬁeC⁄vîãr_ab‹t
,

93 
HTBœckHﬁeC⁄vîãr_put_ch¨a˘î
,

94 
HTBœckHﬁeC⁄vîãr_put_°rög
,

95 
HTBœckHﬁeC⁄vîãr_wrôe


98 
PUBLIC
 
HTSåóm
 * 
	$HTBœckHﬁeC⁄vîãr
 (
HTReque°
 * 
ªque°
,

99 * 
∑øm
,

100 
HTF‹m©
 
öput_f‹m©
,

101 
HTF‹m©
 
ouçut_f‹m©
,

102 
HTSåóm
 * 
ouçut_°ªam
)

104 
	`HTTRACE
(
STREAM_TRACE
, "BlackHole... Converter Created\n");

105 
HTBa£C⁄vîãrSåómIn°™˚
.
iß
 = &
HTBœckHﬁeC⁄vîãrCœss
;

106  &
HTBa£C⁄vîãrSåómIn°™˚
;

107 
	}
}

115 
PUBLIC
 
HTSåóm
* 
	$HTThroughLöe
 (
HTReque°
 * 
ªque°
,

116 * 
∑øm
,

117 
HTF‹m©
 
öput_f‹m©
,

118 
HTF‹m©
 
ouçut_f‹m©
,

119 
HTSåóm
 * 
ouçut_°ªam
)

121  
ouçut_°ªam
;

122 
	}
}

128 
PUBLIC
 
HTSåóm
 * 
	$HTSaveC⁄vîãr
 (
HTReque°
 * 
ªque°
,

129 * 
∑øm
,

130 
HTF‹m©
 
öput_f‹m©
,

131 
HTF‹m©
 
ouçut_f‹m©
,

132 
HTSåóm
 * 
ouçut_°ªam
)

134  
	`HTBœckHﬁe
();

135 
	}
}

137 
PUBLIC
 
HTSåóm
 * 
	$HTIdítôyCodög
 (
HTReque°
 * 
ªque°
,

138 * 
∑øm
,

139 
HTEncodög
 
codög
,

140 
HTSåóm
 * 
ouçut_°ªam
)

142  
ouçut_°ªam
;

143 
	}
}

157 
PUBLIC
 
	$HTPª£¡©i⁄_£tC⁄vîãr
 (
HTC⁄vîãr
 * 
pc⁄v
)

159 
¥e£¡©i⁄_c⁄vîãr
 = 
pc⁄v
;

160 
	}
}

162 
PUBLIC
 
HTC⁄vîãr
 * 
	$HTPª£¡©i⁄_c⁄vîãr
 ()

164  
¥e£¡©i⁄_c⁄vîãr
;

165 
	}
}

177 
PUBLIC
 
	$HTPª£¡©i⁄_add
 (
HTLi°
 * 
c⁄vîsi⁄s
,

178 c⁄° * 
ª¥e£¡©i⁄
,

179 c⁄° * 
comm™d
,

180 c⁄° * 
ã°_comm™d
,

181 
quÆôy
,

182 
£cs
,

183 
£cs_≥r_byã
)

185 
HTPª£¡©i⁄
 * 
¥es
;

186 i‡(
¥e£¡©i⁄_c⁄vîãr
) {

187 i‡((
¥es
 = (
HTPª£¡©i⁄
 *Ë
	`HT_CALLOC
(1,(HTPª£¡©i⁄))Ë=
NULL
)

188 
	`HT_OUTOFMEM
("HTSetPresentation");

189 
¥es
->
ªp
 = 
	`HTAtom_f‹
(
ª¥e£¡©i⁄
);

190 
¥es
->
ªp_out
 = 
WWW_PRESENT
;

191 
¥es
->
c⁄vîãr
 = 
¥e£¡©i⁄_c⁄vîãr
;

192 
¥es
->
quÆôy
 = quality;

193 
¥es
->
£cs
 = secs;

194 
¥es
->
£cs_≥r_byã
 = secs_per_byte;

195 
¥es
->
ªp
 = 
	`HTAtom_f‹
(
ª¥e£¡©i⁄
);

196 
¥es
->
comm™d
 = 
NULL
;

197 
	`SåAŒocC›y
(
¥es
->
comm™d
, command);

198 
¥es
->
ã°_comm™d
 = 
NULL
;

199 
	`SåAŒocC›y
(
¥es
->
ã°_comm™d
,Åest_command);

200 
	`HTTRACE
(
CORE_TRACE
, "Pª£¡©i⁄ Addög `%s\' wôh quÆôy %.2f\n" 
_


201 
comm™d
 
_
 
quÆôy
);

202 
	`HTLi°_addObje˘
(
c⁄vîsi⁄s
, 
¥es
);

204 
	}
}

206 
PUBLIC
 
	$HTPª£¡©i⁄_dñëeAŒ
 (
HTLi°
 * 
li°
)

208 i‡(
li°
) {

209 
HTLi°
 *
cur
 = 
li°
;

210 
HTPª£¡©i⁄
 *
¥es
;

211 (
¥es
 = (
HTPª£¡©i⁄
*Ë
	`HTLi°_√xtObje˘
(
cur
))) {

212 
	`HT_FREE
(
¥es
->
comm™d
);

213 
	`HT_FREE
(
¥es
);

215 
	`HTLi°_dñëe
(
li°
);

217 
	}
}

222 
PUBLIC
 
	$HTC⁄vîsi⁄_add
 (
HTLi°
 * 
c⁄vîsi⁄s
,

223 c⁄° * 
ª¥e£¡©i⁄_ö
,

224 c⁄° * 
ª¥e£¡©i⁄_out
,

225 
HTC⁄vîãr
 * 
c⁄vîãr
,

226 
quÆôy
,

227 
£cs
,

228 
£cs_≥r_byã
)

230 
HTPª£¡©i⁄
 * 
¥es
;

231 i‡((
¥es
 = (
HTPª£¡©i⁄
*Ë
	`HT_CALLOC
(1,(HTPª£¡©i⁄))Ë=
NULL
)

232 
	`HT_OUTOFMEM
("HTSetPresentation");

233 
¥es
->
ªp
 = 
	`HTAtom_f‹
(
ª¥e£¡©i⁄_ö
);

234 
¥es
->
ªp_out
 = 
	`HTAtom_f‹
(
ª¥e£¡©i⁄_out
);

235 
¥es
->
c⁄vîãr
 = converter;

236 
¥es
->
comm™d
 = 
NULL
;

237 
¥es
->
ã°_comm™d
 = 
NULL
;

238 
¥es
->
quÆôy
 = quality;

239 
¥es
->
£cs
 = secs;

240 
¥es
->
£cs_≥r_byã
 = secs_per_byte;

241 
	`HTTRACE
(
CORE_TRACE
, "C⁄vîsi⁄s. Addög %∞wôh quÆôy %.2f\n" 
_


242 
c⁄vîãr
 
_
 
quÆôy
);

243 
	`HTLi°_addObje˘
(
c⁄vîsi⁄s
, 
¥es
);

244 
	}
}

246 
PUBLIC
 
	$HTC⁄vîsi⁄_dñëeAŒ
 (
HTLi°
 * 
li°
)

248 
	`HTPª£¡©i⁄_dñëeAŒ
(
li°
);

249 
	}
}

255 
PUBLIC
 
BOOL
 
	$HTCodög_add
 (
HTLi°
 * 
li°
,

256 c⁄° * 
ícodög
,

257 
HTCodî
 * 
ícodî
,

258 
HTCodî
 * 
decodî
,

259 
quÆôy
)

261 i‡(
li°
 && 
ícodög
 && (
ícodî
 || 
decodî
)) {

262 
HTCodög
 * 
me
;

263 i‡((
me
 = (
HTCodög
 *Ë
	`HT_CALLOC
(1, (HTCodög))Ë=
NULL
)

264 
	`HT_OUTOFMEM
("HTCoding_add");

265 
me
->
ícodög
 = 
	`HTAtom_f‹
(encoding);

266 
me
->
ícodî
 =Éncoder;

267 
me
->
decodî
 = decoder;

268 
me
->
quÆôy
 = quality;

269 
	`HTTRACE
(
CORE_TRACE
, "Codögs..... Addög %†wôh quÆôy %.2f\n" 
_


270 
ícodög
 
_
 
quÆôy
);

271  
	`HTLi°_addObje˘
(
li°
, (*Ë
me
);

273 
	`HTTRACE
(
CORE_TRACE
, "Codings..... Badárgument\n");

274  
NO
;

275 
	}
}

277 
PUBLIC
 
	$HTCodög_dñëeAŒ
 (
HTLi°
 * 
li°
)

279 i‡(
li°
) {

280 
HTLi°
 * 
cur
 = 
li°
;

281 
HTCodög
 * 
¥es
;

282 (
¥es
 = (
HTCodög
 *Ë
	`HTLi°_√xtObje˘
(
cur
)))

283 
	`HT_FREE
(
¥es
);

284 
	`HTLi°_dñëe
(
li°
);

286 
	}
}

288 
PUBLIC
 c⁄° * 
	$HTCodög_«me
 (
HTCodög
 * 
me
)

290  
me
 ? 
	`HTAtom_«me
(me->
ícodög
Ë: 
NULL
;

291 
	}
}

293 
PUBLIC
 
	$HTCodög_quÆôy
 (
HTCodög
 * 
me
)

295  
me
 ? me->
quÆôy
 : 0.0;

296 
	}
}

302 
PUBLIC
 
	$HTL™guage_add
 (
HTLi°
 * 
li°
,

303 c⁄° * 
œng
,

304 
quÆôy
)

306 
HTAc˚±Node
 * 
node
;

307 i‡(!
li°
 || !
œng
 || !*lang) {

308 
	`HTTRACE
(
CORE_TRACE
, "Languages... Badárgument\n");

311 i‡((
node
 = (
HTAc˚±Node
 *Ë
	`HT_CALLOC
(1, (HTAc˚±Node))Ë=
NULL
)

312 
	`HT_OUTOFMEM
("HTAcceptLanguage");

314 
	`HTLi°_addObje˘
(
li°
, (*)
node
);

315 
node
->
©om
 = 
	`HTAtom_f‹
(
œng
);

316 
node
->
quÆôy
 = quality;

317 
	}
}

319 
PUBLIC
 
	$HTL™guage_dñëeAŒ
 (
HTLi°
 * 
li°
)

321 i‡(
li°
) {

322 
HTLi°
 *
cur
 = 
li°
;

323 
HTAc˚±Node
 *
¥es
;

324 (
¥es
 = (
HTAc˚±Node
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

325 
	`HT_FREE
(
¥es
);

327 
	`HTLi°_dñëe
(
li°
);

329 
	}
}

335 
PUBLIC
 
	$HTCh¨£t_add
 (
HTLi°
 * 
li°
,

336 c⁄° * 
ch¨£t
,

337 
quÆôy
)

339 
HTAc˚±Node
 * 
node
;

340 i‡(!
li°
 || !
ch¨£t
 || !*charset) {

341 
	`HTTRACE
(
CORE_TRACE
, "Charset..... Badárgument\n");

344 i‡((
node
 = (
HTAc˚±Node
 *Ë
	`HT_CALLOC
(1, (HTAc˚±Node))Ë=
NULL
)

345 
	`HT_OUTOFMEM
("HTAcceptCharsetuage");

347 
	`HTLi°_addObje˘
(
li°
, (*)
node
);

348 
node
->
©om
 = 
	`HTAtom_f‹
(
ch¨£t
);

349 
node
->
quÆôy
 = quality;

350 
	}
}

352 
PUBLIC
 
	$HTCh¨£t_dñëeAŒ
 (
HTLi°
 * 
li°
)

354 i‡(
li°
) {

355 
HTLi°
 *
cur
 = 
li°
;

356 
HTAc˚±Node
 *
¥es
;

357 (
¥es
 = (
HTAc˚±Node
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

358 
	`HT_FREE
(
¥es
);

360 
	`HTLi°_dñëe
(
li°
);

362 
	}
}

372 
PUBLIC
 
	$HTF‹m©_£tC⁄vîsi⁄
 (
HTLi°
 * 
li°
)

374 
HTC⁄vîsi⁄s
 = 
li°
;

375 
	}
}

377 
PUBLIC
 
HTLi°
 * 
	$HTF‹m©_c⁄vîsi⁄
 ()

379  
HTC⁄vîsi⁄s
;

380 
	}
}

382 
PUBLIC
 
	$HTF‹m©_addC⁄vîsi⁄
 (c⁄° * 
öput_f‹m©
,

383 c⁄° * 
ouçut_f‹m©
,

384 
HTC⁄vîãr
 * 
c⁄vîãr
,

385 
quÆôy
,

386 
£cs
,

387 
£cs_≥r_byã
)

389 i‡(!
HTC⁄vîsi⁄s
ËHTC⁄vîsi⁄†
	`HTLi°_√w
();

390 
	`HTC⁄vîsi⁄_add
(
HTC⁄vîsi⁄s
, 
öput_f‹m©
, 
ouçut_f‹m©
,

391 
c⁄vîãr
, 
quÆôy
, 
£cs
, 
£cs_≥r_byã
);

392 
	}
}

398 
PUBLIC
 
	$HTF‹m©_£tC⁄ã¡Codög
 (
HTLi°
 *
li°
)

400 
HTC⁄ã¡Codîs
 = 
li°
;

401 
	}
}

403 
PUBLIC
 
HTLi°
 * 
	$HTF‹m©_c⁄ã¡Codög
 ()

405  
HTC⁄ã¡Codîs
;

406 
	}
}

408 
PUBLIC
 
BOOL
 
	$HTF‹m©_addCodög
 ( * 
ícodög
,

409 
HTCodî
 * 
ícodî
,

410 
HTCodî
 * 
decodî
,

411 
quÆôy
)

413 i‡(!
HTC⁄ã¡Codîs
ËHTC⁄ã¡Codî†
	`HTLi°_√w
();

414  
	`HTCodög_add
(
HTC⁄ã¡Codîs
, 
ícodög
, 
ícodî
, 
decodî
, 
quÆôy
);

415 
	}
}

421 
PUBLIC
 
	$HTF‹m©_£tTøns„rCodög
 (
HTLi°
 *
li°
)

423 
HTTøns„rCodîs
 = 
li°
;

424 
	}
}

426 
PUBLIC
 
HTLi°
 * 
	$HTF‹m©_å™s„rCodög
 ()

428  
HTTøns„rCodîs
;

429 
	}
}

431 
PUBLIC
 
BOOL
 
	$HTF‹m©_addTøns„rCodög
 ( * 
ícodög
,

432 
HTCodî
 * 
ícodî
,

433 
HTCodî
 * 
decodî
,

434 
quÆôy
)

436 i‡(!
HTTøns„rCodîs
ËHTTøns„rCodî†
	`HTLi°_√w
();

437  
	`HTCodög_add
(
HTTøns„rCodîs
, 
ícodög
, 
ícodî
, 
decodî
, 
quÆôy
);

438 
	}
}

444 
PUBLIC
 
	$HTF‹m©_£tL™guage
 (
HTLi°
 *
li°
)

446 
HTL™guages
 = 
li°
;

447 
	}
}

449 
PUBLIC
 
HTLi°
 * 
	$HTF‹m©_œnguage
 ()

451  
HTL™guages
;

452 
	}
}

458 
PUBLIC
 
	$HTF‹m©_£tCh¨£t
 (
HTLi°
 *
li°
)

460 
HTCh¨£ts
 = 
li°
;

461 
	}
}

463 
PUBLIC
 
HTLi°
 * 
	$HTF‹m©_ch¨£t
 ()

465  
HTCh¨£ts
;

466 
	}
}

471 
PUBLIC
 
	$HTF‹m©_dñëeAŒ
 ()

473 i‡(
HTC⁄vîsi⁄s
) {

474 
	`HTC⁄vîsi⁄_dñëeAŒ
(
HTC⁄vîsi⁄s
);

475 
HTC⁄vîsi⁄s
 = 
NULL
;

477 i‡(
HTL™guages
) {

478 
	`HTL™guage_dñëeAŒ
(
HTL™guages
);

479 
HTL™guages
 = 
NULL
;

481 i‡(
HTC⁄ã¡Codîs
) {

482 
	`HTCodög_dñëeAŒ
(
HTC⁄ã¡Codîs
);

483 
HTC⁄ã¡Codîs
 = 
NULL
;

485 i‡(
HTTøns„rCodîs
) {

486 
	`HTCodög_dñëeAŒ
(
HTTøns„rCodîs
);

487 
HTTøns„rCodîs
 = 
NULL
;

489 i‡(
HTCh¨£ts
) {

490 
	`HTCh¨£t_dñëeAŒ
(
HTCh¨£ts
);

491 
HTCh¨£ts
 = 
NULL
;

493 
	}
}

499 
PRIVATE
 
BOOL
 
	$bëãr_m©ch
 (
HTF‹m©
 
f
, HTF‹m© 
g
)

501 c⁄° *
p
, *
q
;

503 i‡(
f
 && 
g
 && (
p
 = 
	`HTAtom_«me
(f)Ë&& (
q
 = HTAtom_name(g))) {

504 
i
,
j
;

505 
i
=0 ; *
p
;Ö++) if (*p == '*') i++;

506 
j
=0 ; *
q
; q++) if (*q == '*') j++;

507 i‡(
i
 < 
j
Ë 
YES
;

509  
NO
;

510 
	}
}

523 
PUBLIC
 
HTSåóm
 * 
	$HTSåómSèck
 (
HTF‹m©
 
ªp_ö
,

524 
HTF‹m©
 
ªp_out
,

525 
HTSåóm
 * 
ouçut_°ªam
,

526 
HTReque°
 * 
ªque°
,

527 
BOOL
 
guess
)

529 
HTLi°
 * 
c⁄vîsi⁄
[2];

530 
which_li°
;

531 
be°_quÆôy
 = -1e30;

532 
HTPª£¡©i⁄
 *
¥es
, *
be°_m©ch
=
NULL
;

533 i‡(
ªp_out
 =
WWW_RAW
) {

534 
	`HTTRACE
(
CORE_TRACE
, "StreamStack. Raw output...\n");

535  
ouçut_°ªam
 ? ouçut_°ªam : 
	`HTEº‹Såóm
();

538 i‡(
ªp_out
 =
ªp_ö
) {

539 
	`HTTRACE
(
CORE_TRACE
, "SåómSèck. Idítiˇ»öput/ouçuàf‹m© (%s)\n" 
_


540 
	`HTAtom_«me
(
ªp_out
));

541  
ouçut_°ªam
 ? ouçut_°ªam : 
	`HTEº‹Såóm
();

544 #ifde‡
HTDEBUG


545 i‡(
CORE_TRACE
) {

546 c⁄° *
p
 = 
	`HTAtom_«me
(
ªp_ö
);

547 c⁄° *
q
 = 
	`HTAtom_«me
(
ªp_out
);

548 
	`HTTRACE
(
CORE_TRACE
, "SåómSèck. C⁄°ru˘ög såóm sèck f‹ %†tÿ%s\n" 
_


549 
p
 ?Ö : "<NULL>" 
_
 
q
 ? q : "<NULL>");

553 
c⁄vîsi⁄
[0] = 
	`HTReque°_c⁄vîsi⁄
(
ªque°
);

554 
c⁄vîsi⁄
[1] = 
HTC⁄vîsi⁄s
;

556 
which_li°
 = 0; which_list<2; which_list++) {

557 
HTLi°
 * 
cur
 = 
c⁄vîsi⁄
[
which_li°
];

558 (
¥es
 = (
HTPª£¡©i⁄
*)
	`HTLi°_√xtObje˘
(
cur
))) {

559 i‡((
¥es
->
ªp
==
ªp_ö
 || 
	`HTMIMEM©ch
(pres->rep,Ñep_in)) &&

560 (
¥es
->
ªp_out
=Ùï_ouà|| 
	`HTMIMEM©ch
(pres->rep_out,rep_out))){

561 i‡(!
be°_m©ch
 || 
	`bëãr_m©ch
(
¥es
->
ªp
, best_match->rep) ||

562 (!
	`bëãr_m©ch
(
be°_m©ch
->
ªp
, 
¥es
->rep) &&

563 
¥es
->
quÆôy
 > 
be°_quÆôy
)) {

564 #ifde‡
HAVE_SYSTEM


565 
ªsu…
=0;

566 i‡(
¥es
->
ã°_comm™d
) {

567 
ªsu…
 = 
	`sy°em
(
¥es
->
ã°_comm™d
);

568 
	`HTTRACE
(
CORE_TRACE
, "SåómSèck. sy°em(%sËªtu∫†%d\n" 
_
 
¥es
->
ã°_comm™d
 _ 
ªsu…
);

570 i‡(!
ªsu…
) {

571 
be°_m©ch
 = 
¥es
;

572 
be°_quÆôy
 = 
¥es
->
quÆôy
;

575 
be°_m©ch
 = 
¥es
;

576 
be°_quÆôy
 = 
¥es
->
quÆôy
;

583 i‡(
be°_m©ch
) {

584 i‡(
ªp_out
 =
WWW_SOURCE
 && 
be°_m©ch
->rep_out != WWW_SOURCE) {

585 
	`HTTRACE
(
CORE_TRACE
, "StreamStack. Source output\n");

586  
ouçut_°ªam
 ? ouçut_°ªam : 
	`HTEº‹Såóm
();

588  (*
be°_m©ch
->
c⁄vîãr
)(
ªque°
, be°_m©ch->
comm™d
,

589 
ªp_ö
, 
ªp_out
, 
ouçut_°ªam
);

591 i‡(
ªp_out
 =
WWW_SOURCE
) {

592 
	`HTTRACE
(
CORE_TRACE
, "StreamStack. Source output\n");

593  
ouçut_°ªam
 ? ouçut_°ªam : 
	`HTEº‹Såóm
();

596 
	`HTTRACE
(
CORE_TRACE
, "StreamStack. NOT FOUND -Érror!\n");

597  
	`HTBœckHﬁe
();

598 
	}
}

609 
PUBLIC
 
	$HTSèckVÆue
 (
HTLi°
 * 
the£C⁄vîsi⁄s
,

610 
HTF‹m©
 
ªp_ö
,

611 
HTF‹m©
 
ªp_out
,

612 
öôül_vÆue
,

613 
Àngth
)

615 
which_li°
;

616 
HTLi°
* 
c⁄vîsi⁄
[2];

618 
	`HTTRACE
(
CORE_TRACE
, "SèckVÆue.. EvÆu©ög såóm sèck f‹ %†w‹th %.3‡tÿ%s\n" 
_


619 
	`HTAtom_«me
(
ªp_ö
Ë
_
 
öôül_vÆue
 _ HTAtom_«me(
ªp_out
));

621 i‡(
ªp_out
 =
WWW_SOURCE
 ||Ñï_ouà=
ªp_ö
)  0.0;

623 
c⁄vîsi⁄
[0] = 
the£C⁄vîsi⁄s
;

624 
c⁄vîsi⁄
[1] = 
HTC⁄vîsi⁄s
;

626 
which_li°
 = 0; which_list<2; which_list++)

627 i‡(
c⁄vîsi⁄
[
which_li°
]) {

628 
HTLi°
 * 
cur
 = 
c⁄vîsi⁄
[
which_li°
];

629 
HTPª£¡©i⁄
 * 
¥es
;

630 (
¥es
 = (
HTPª£¡©i⁄
*)
	`HTLi°_√xtObje˘
(
cur
))) {

631 i‡(
¥es
->
ªp
 =
ªp_ö
 &&

632 (
¥es
->
ªp_out
 =ªp_ouà|| 
	`HTMIMEM©ch
(pres->rep_out,Ñep_out))) {

633 
vÆue
 = 
öôül_vÆue
 * 
¥es
->
quÆôy
;

634 i‡(
HTMaxSecs
 != 0.0)

635 
vÆue
 = vÆuê- (
Àngth
*
¥es
->
£cs_≥r_byã
 +Öªs->
£cs
)

636 /
HTMaxSecs
;

637  
vÆue
;

641  
NO_VALUE_FOUND
;

642 
	}
}

650 
PUBLIC
 
HTSåóm
 * 
	$HTC⁄ã¡CodögSèck
 (
HTEncodög
 
ícodög
,

651 
HTSåóm
 * 
èrgë
,

652 
HTReque°
 * 
ªque°
,

653 * 
∑øm
,

654 
BOOL
 
ícode
)

656 
HTLi°
 * 
codîs
[2];

657 
HTSåóm
 * 
t›
 = 
èrgë
;

658 
HTCodög
 * 
¥es
 = 
NULL
;

659 
HTCodög
 * 
be°_m©ch
 = 
NULL
;

660 
be°_quÆôy
 = -1e30;

661 
˙t
;

662 i‡(!
ícodög
 || !
ªque°
) {

663 
	`HTTRACE
(
CORE_TRACE
, "Codings... Nothingápplied...\n");

664  
èrgë
 ?Å¨gë : 
	`HTEº‹Såóm
();

666 
codîs
[0] = 
	`HTReque°_ícodög
(
ªque°
);

667 
codîs
[1] = 
HTC⁄ã¡Codîs
;

668 
	`HTTRACE
(
CORE_TRACE
, "C-E......... Lookög f‹ `%s\'\n" 
_
 
	`HTAtom_«me
(
ícodög
));

669 
˙t
=0; cnt < 2; cnt++) {

670 
HTLi°
 * 
cur
 = 
codîs
[
˙t
];

671 (
¥es
 = (
HTCodög
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

672 i‡((
¥es
->
ícodög
 =ícodög || 
	`HTMIMEM©ch
(pres->encoding,Éncoding)) &&

673 
¥es
->
quÆôy
 > 
be°_quÆôy
) {

674 
be°_m©ch
 = 
¥es
;

675 
be°_quÆôy
 = 
¥es
->
quÆôy
;

680 i‡(
be°_m©ch
) {

681 
	`HTTRACE
(
CORE_TRACE
, "C-E......... Found `%s\'\n" 
_
 
	`HTAtom_«me
(
be°_m©ch
->
ícodög
));

682 i‡(
ícode
) {

683 i‡(
be°_m©ch
->
ícodî
)

684 
t›
 = (*
be°_m©ch
->
ícodî
)(
ªque°
, 
∑øm
, 
ícodög
,Åop);

686 i‡(
be°_m©ch
->
decodî
)

687 
t›
 = (*
be°_m©ch
->
decodî
)(
ªque°
, 
∑øm
, 
ícodög
,Åop);

689 } i‡(!
	`HTF‹m©_isUnôyC⁄ã¡
(
ícodög
)) {

696 i‡(
ícode
) {

697 
	`HTTRACE
(
CORE_TRACE
, "C-E......... NOT FOUND - can'tÉncode stream!\n");

699 
	`HTTRACE
(
CORE_TRACE
, "C-E......... NOT FOUND -Érror!\n");

700 
t›
 = 
	`HTBœckHﬁe
();

703  
t›
;

704 
	}
}

710 
PUBLIC
 
HTSåóm
 * 
	$HTC⁄ã¡EncodögSèck
 (
HTLi°
 * 
ícodögs
,

711 
HTSåóm
 * 
èrgë
,

712 
HTReque°
 * 
ªque°
,

713 * 
∑øm
)

715 i‡(
ícodögs
) {

716 
HTLi°
 * 
cur
 = 
ícodögs
;

717 
HTEncodög
 
¥es
;

718 
HTSåóm
 * 
t›
 = 
èrgë
;

719 (
¥es
 = (
HTEncodög
Ë
	`HTLi°_√xtObje˘
(
cur
))) {

720 
t›
 = 
	`HTC⁄ã¡CodögSèck
(
¥es
,Å›, 
ªque°
, 
∑øm
, 
YES
);

721 i‡(
t›
 =
	`HTBœckHﬁe
()) ;

723  
t›
;

725  
	`HTEº‹Såóm
();

726 
	}
}

734 
PUBLIC
 
HTSåóm
 * 
	$HTC⁄ã¡DecodögSèck
 (
HTLi°
 * 
ícodögs
,

735 
HTSåóm
 * 
èrgë
,

736 
HTReque°
 * 
ªque°
,

737 * 
∑øm
)

739 i‡(
ícodögs
) {

740 
HTEncodög
 
¥es
;

741 
˙t
 = 
	`HTLi°_cou¡
(
ícodögs
);

742 
HTSåóm
 * 
t›
 = 
èrgë
;

743 
˙t
 > 0) {

744 
¥es
 = (
HTEncodög
Ë
	`HTLi°_obje˘At
(
ícodögs
, --
˙t
);

745 
t›
 = 
	`HTC⁄ã¡CodögSèck
(
¥es
,Å›, 
ªque°
, 
∑øm
, 
NO
);

746 i‡(
t›
 =
	`HTBœckHﬁe
()) ;

748  
t›
;

750  
	`HTEº‹Såóm
();

751 
	}
}

759 
PUBLIC
 
HTSåóm
 * 
	$HTTøns„rCodögSèck
 (
HTEncodög
 
ícodög
,

760 
HTSåóm
 * 
èrgë
,

761 
HTReque°
 * 
ªque°
,

762 * 
∑øm
,

763 
BOOL
 
ícode
)

765 
HTLi°
 * 
codîs
[2];

766 
HTSåóm
 * 
t›
 = 
èrgë
;

767 
HTCodög
 * 
¥es
 = 
NULL
;

768 
˙t
;

769 i‡(!
ícodög
 || !
ªque°
) {

770 
	`HTTRACE
(
CORE_TRACE
, "Codings... Nothingápplied...\n");

771  
èrgë
 ?Å¨gë : 
	`HTEº‹Såóm
();

773 
codîs
[0] = 
	`HTReque°_å™s„r
(
ªque°
);

774 
codîs
[1] = 
HTTøns„rCodîs
;

775 
	`HTTRACE
(
CORE_TRACE
, "C-E......... Lookög f‹ `%s\'\n" 
_
 
	`HTAtom_«me
(
ícodög
));

776 
˙t
=0; cnt < 2; cnt++) {

777 
HTLi°
 * 
cur
 = 
codîs
[
˙t
];

778 (
¥es
 = (
HTCodög
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

779 i‡(
¥es
->
ícodög
 =ícodög || 
	`HTMIMEM©ch
(pres->encoding,Éncoding)) {

780 
	`HTTRACE
(
CORE_TRACE
, "C-E......... Found...\n");

781 i‡(
ícode
) {

782 i‡(
¥es
->
ícodî
)

783 
t›
 = (*
¥es
->
ícodî
)(
ªque°
, 
∑øm
, 
ícodög
,Åop);

785 } i‡(
¥es
->
decodî
) {

786 
t›
 = (*
¥es
->
decodî
)(
ªque°
, 
∑øm
, 
ícodög
,Åop);

798 i‡(!
	`HTF‹m©_isUnôyC⁄ã¡
(
ícodög
Ë&& 
èrgë
==
t›
) {

799 i‡(
ícode
) {

800 
	`HTTRACE
(
CORE_TRACE
, "C-E......... NOT FOUND - can'tÉncode stream!\n");

802 
	`HTTRACE
(
CORE_TRACE
, "C-E......... NOT FOUND -Érror!\n");

803 
t›
 = 
	`HTBœckHﬁe
();

806  
t›
;

807 
	}
}

813 
PUBLIC
 
HTSåóm
 * 
	$HTTøns„rEncodögSèck
 (
HTLi°
 * 
ícodögs
,

814 
HTSåóm
 * 
èrgë
,

815 
HTReque°
 * 
ªque°
,

816 * 
∑øm
)

818 i‡(
ícodögs
) {

819 
HTLi°
 * 
cur
 = 
ícodögs
;

820 
HTEncodög
 
¥es
;

821 
HTSåóm
 * 
t›
 = 
èrgë
;

822 (
¥es
 = (
HTEncodög
Ë
	`HTLi°_√xtObje˘
(
cur
))) {

823 
t›
 = 
	`HTTøns„rCodögSèck
(
¥es
,Å›, 
ªque°
, 
∑øm
, 
YES
);

824 i‡(
t›
 =
	`HTBœckHﬁe
()) ;

826  
t›
;

828  
	`HTEº‹Såóm
();

829 
	}
}

837 
PUBLIC
 
HTSåóm
 * 
	$HTTøns„rDecodögSèck
 (
HTLi°
 * 
ícodögs
,

838 
HTSåóm
 * 
èrgë
,

839 
HTReque°
 * 
ªque°
,

840 * 
∑øm
)

842 i‡(
ícodögs
) {

843 
HTEncodög
 
¥es
;

844 
˙t
 = 
	`HTLi°_cou¡
(
ícodögs
);

845 
HTSåóm
 * 
t›
 = 
èrgë
;

846 
˙t
 > 0) {

847 
¥es
 = (
HTEncodög
Ë
	`HTLi°_obje˘At
(
ícodögs
, --
˙t
);

848 
t›
 = 
	`HTTøns„rCodögSèck
(
¥es
,Å›, 
ªque°
, 
∑øm
, 
NO
);

849 i‡(
t›
 =
	`HTBœckHﬁe
()) ;

851  
t›
;

853  
	`HTEº‹Såóm
();

854 
	}
}

862 
PUBLIC
 
HTSåóm
 * 
	$HTC⁄ã¡Tøns„rCodögSèck
 (
HTEncodög
 
ícodög
,

863 
HTSåóm
 * 
èrgë
,

864 
HTReque°
 * 
ªque°
,

865 * 
∑øm
,

866 
BOOL
 
ícode
)

868 
HTLi°
 * 
codîs
[2];

869 
HTSåóm
 * 
t›
 = 
èrgë
;

870 
HTCodög
 * 
¥es
 = 
NULL
;

871 
˙t
;

872 i‡(!
ícodög
 || !
ªque°
) {

873 
	`HTTRACE
(
CORE_TRACE
, "C-T-E..... Nothingápplied...\n");

874  
èrgë
 ?Å¨gë : 
	`HTEº‹Såóm
();

880 
codîs
[0] = 
	`HTReque°_å™s„r
(
ªque°
);

881 
codîs
[1] = 
HTTøns„rCodîs
;

882 
	`HTTRACE
(
CORE_TRACE
, "C-T-E....... Lookög f‹ %s\n" 
_
 
	`HTAtom_«me
(
ícodög
));

883 
˙t
=0; cnt < 2; cnt++) {

884 
HTLi°
 * 
cur
 = 
codîs
[
˙t
];

885 (
¥es
 = (
HTCodög
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

886 i‡(
¥es
->
ícodög
 ==Éncoding) {

887 
	`HTTRACE
(
CORE_TRACE
, "C-T-E....... Found...\n");

888 i‡(
ícode
) {

889 i‡(
¥es
->
ícodî
)

890 
t›
 = (*
¥es
->
ícodî
)(
ªque°
, 
∑øm
, 
ícodög
,Åop);

892 } i‡(
¥es
->
decodî
) {

893 
t›
 = (*
¥es
->
decodî
)(
ªque°
, 
∑øm
, 
ícodög
,Åop);

905 i‡(!
	`HTF‹m©_isUnôyTøns„r
(
ícodög
Ë&& 
èrgë
==
t›
) {

906 i‡(
ícode
) {

907 
	`HTTRACE
(
CORE_TRACE
, "C-T-E....... NOT FOUND -ÑemovingÉncoding!\n");

908 
	`HTAnch‹_£tC⁄ã¡Tøns„rEncodög
(
	`HTReque°_™ch‹
(
ªque°
), 
NULL
);

910 
	`HTTRACE
(
CORE_TRACE
, "C-T-E....... NOT FOUND -Érror!\n");

911 
t›
 = 
	`HTBœckHﬁe
();

914  
t›
;

915 
	}
}

	@Library/src/HTFormat.h

70 #i‚de‡
HTFORMAT_H


71 
	#HTFORMAT_H


	)

73 
	~"HTUtûs.h
"

74 
	~"HTSåóm.h
"

75 
	~"HTAtom.h
"

76 
	~"HTLi°.h
"

77 
	~"HTAnch‹.h
"

78 
	~"HTReq.h
"

101 
	#WWW_INTERNAL
 
	`HTAtom_f‹
("www/*"Ë

	)

109 
	#WWW_RAW
 
	`HTAtom_f‹
("www/void"Ë

	)

120 
	#WWW_SOURCE
 
	`HTAtom_f‹
("*/*")

	)

133 
	#WWW_PRESENT
 
	`HTAtom_f‹
("www/¥e£¡")

	)

142 
	#WWW_DEBUG
 
	`HTAtom_f‹
("www/debug")

	)

150 
	#WWW_UNKNOWN
 
	`HTAtom_f‹
("www/unknown")

	)

159 
	#WWW_CACHE
 
	`HTAtom_f‹
("www/ˇche")

	)

160 
	#WWW_CACHE_APPEND
 
	`HTAtom_f‹
("www/ˇche-≠≥nd")

	)

173 
	#WWW_HTML
 
	`HTAtom_f‹
("ãxt/html")

	)

174 
	#WWW_PLAINTEXT
 
	`HTAtom_f‹
("ãxt/∂aö")

	)

175 
	#WWW_FORM
 
	`HTAtom_f‹
("≠∂iˇti⁄/x-www-f‹m-uæícoded")

	)

177 
	#WWW_MIME
 
	`HTAtom_f‹
("mesßge/rfc822")

	)

178 
	#WWW_MIME_HEAD
 
	`HTAtom_f‹
("mesßge/x-rfc822-hód")

	)

179 
	#WWW_MIME_FOOT
 
	`HTAtom_f‹
("mesßge/x-rfc822-foŸ")

	)

180 
	#WWW_MIME_PART
 
	`HTAtom_f‹
("mesßge/x-rfc822-∑πül")

	)

181 
	#WWW_MIME_CONT
 
	`HTAtom_f‹
("mesßge/x-rfc822-c⁄t")

	)

182 
	#WWW_MIME_UPGRADE
 
	`HTAtom_f‹
("mesßge/x-rfc822-upgøde")

	)

184 
	#WWW_MIME_COPYHEADERS
 
	`HTAtom_f‹
("www/x-rfc822-hódîs")

	)

186 
	#WWW_AUDIO
 
	`HTAtom_f‹
("audio/basic")

	)

188 
	#WWW_VIDEO
 
	`HTAtom_f‹
("video/m≥g")

	)

190 
	#WWW_GIF
 
	`HTAtom_f‹
("image/gif")

	)

191 
	#WWW_JPEG
 
	`HTAtom_f‹
("image/j≥g")

	)

192 
	#WWW_TIFF
 
	`HTAtom_f‹
("image/tiff")

	)

193 
	#WWW_PNG
 
	`HTAtom_f‹
("image/≤g")

	)

195 
	#WWW_BINARY
 
	`HTAtom_f‹
("≠∂iˇti⁄/o˘ë-°ªam")

	)

196 
	#WWW_POSTSCRIPT
 
	`HTAtom_f‹
("≠∂iˇti⁄/po°s¸ùt")

	)

197 
	#WWW_RICHTEXT
 
	`HTAtom_f‹
("≠∂iˇti⁄/πf")

	)

205 
	#WWW_GOPHER_MENU
 
	`HTAtom_f‹
("ãxt/x-g›hî")

	)

206 
	#WWW_CSO_SEARCH
 
	`HTAtom_f‹
("ãxt/x-cso")

	)

208 
	#WWW_FTP_LNST
 
	`HTAtom_f‹
("ãxt/x-·p- °")

	)

209 
	#WWW_FTP_LIST
 
	`HTAtom_f‹
("ãxt/x-·p-li°")

	)

211 
	#WWW_NNTP_LIST
 
	`HTAtom_f‹
("ãxt/x-¬ç-li°")

	)

212 
	#WWW_NNTP_OVER
 
	`HTAtom_f‹
("ãxt/x-¬ç-ovî")

	)

213 
	#WWW_NNTP_HEAD
 
	`HTAtom_f‹
("ãxt/x-¬ç-hód")

	)

215 
	#WWW_HTTP
 
	`HTAtom_f‹
("ãxt/x-hâp")

	)

222 
	#WWW_RULES
 
	`HTAtom_f‹
("≠∂iˇti⁄/x-www-ruÀs")

	)

267 
HTSåóm
 * 
	tHTC⁄vîãr
 (
	tHTReque°
 * 
	tªque°
,

268 * 
	t∑øm
,

269 
	tHTF‹m©
 
	töput_f‹m©
,

270 
	tHTF‹m©
 
	touçut_f‹m©
,

271 
	tHTSåóm
 * 
	touçut_°ªam
);

273 
HTC⁄vîsi⁄_add
 (
HTLi°
 * 
c⁄vîsi⁄s
,

274 c⁄° * 
ªp_ö
,

275 c⁄° * 
ªp_out
,

276 
HTC⁄vîãr
 * 
c⁄vîãr
,

277 
quÆôy
,

278 
£cs
,

279 
£cs_≥r_byã
);

281 
HTC⁄vîsi⁄_dñëeAŒ
 (
HTLi°
 * 
li°
);

301 
HTPª£¡©i⁄_£tC⁄vîãr
 (
HTC⁄vîãr
 * 
pc⁄v
);

302 
HTC⁄vîãr
 * 
HTPª£¡©i⁄_c⁄vîãr
 ();

309 
HTPª£¡©i⁄_add
 (
HTLi°
 * 
c⁄vîsi⁄s
,

310 c⁄° * 
ª¥e£¡©i⁄
,

311 c⁄° * 
comm™d
,

312 c⁄° * 
ã°_comm™d
,

313 
quÆôy
,

314 
£cs
,

315 
£cs_≥r_byã
);

317 
HTPª£¡©i⁄_dñëeAŒ
 (
HTLi°
 * 
li°
);

328 
HTC⁄vîãr
 
HTThroughLöe
;

329 
HTC⁄vîãr
 
HTBœckHﬁeC⁄vîãr
;

330 
HTC⁄vîãr
 
HTSaveC⁄vîãr
;

369 
HTSåóm
 * 
	tHTCodî
 (
	tHTReque°
 * 
	tªque°
,

370 * 
	t∑øm
,

371 
	tHTEncodög
 
	tcodög
,

372 
	tHTSåóm
 * 
	tèrgë
);

387 
HTCodî
 
HTIdítôyCodög
;

398 
_HTCodög
 
	tHTCodög
;

410 
	#WWW_CODING_7BIT
 
	`HTAtom_f‹
("7bô")

	)

411 
	#WWW_CODING_8BIT
 
	`HTAtom_f‹
("8bô")

	)

412 
	#WWW_CODING_BINARY
 
	`HTAtom_f‹
("bö¨y")

	)

413 
	#WWW_CODING_IDENTITY
 
	`HTAtom_f‹
("idítôy")

	)

415 
	#WWW_CODING_BASE64
 
	`HTAtom_f‹
("ba£64")

	)

416 
	#WWW_CODING_MACBINHEX
 
	`HTAtom_f‹
("macböhex")

	)

417 
	#WWW_CODING_CHUNKED
 
	`HTAtom_f‹
("chunked")

	)

419 
	#WWW_CODING_COMPRESS
 
	`HTAtom_f‹
("com¥ess")

	)

420 
	#WWW_CODING_GZIP
 
	`HTAtom_f‹
("gzù")

	)

421 
	#WWW_CODING_DEFLATE
 
	`HTAtom_f‹
("deÊ©e")

	)

436 
BOOL
 
HTCodög_add
 (
HTLi°
 * 
li°
,

437 c⁄° * 
ícodög
,

438 
HTCodî
 * 
ícodî
,

439 
HTCodî
 * 
decodî
,

440 
quÆôy
);

442 
HTCodög_dñëeAŒ
 (
HTLi°
 * 
li°
);

444 c⁄° * 
HTCodög_«me
 (
HTCodög
 * 
me
);

446 
HTCodög_quÆôy
 (
HTCodög
 * 
me
);

461 
HTCh¨£t_add
 (
HTLi°
 * 
li°
, c⁄° * 
ch¨£t
, 
quÆôy
);

465 
	s_HTAc˚±Node
 {

466 
HTAtom
 * 
	m©om
;

467 
	mquÆôy
;

468 } 
	tHTAc˚±Node
;

473 
HTCh¨£t_dñëeAŒ
 (
HTLi°
 * 
li°
);

489 
HTL™guage_add
 (
HTLi°
 * 
li°
, c⁄° * 
œng
, 
quÆôy
);

490 
HTL™guage_dñëeAŒ
 (
HTLi°
 * 
li°
);

510 
HTF‹m©_£tC⁄vîsi⁄
 (
HTLi°
 * 
li°
);

511 
HTLi°
 * 
HTF‹m©_c⁄vîsi⁄
 ();

513 
HTF‹m©_addC⁄vîsi⁄
 (c⁄° * 
öput_f‹m©
,

514 c⁄° * 
ouçut_f‹m©
,

515 
HTC⁄vîãr
 * 
c⁄vîãr
,

516 
quÆôy
,

517 
£cs
,

518 
£cs_≥r_byã
);

525 
HTF‹m©_£tC⁄ã¡Codög
 (
HTLi°
 * 
li°
);

526 
HTLi°
 * 
HTF‹m©_c⁄ã¡Codög
 ();

528 
BOOL
 
HTF‹m©_addCodög
 ( * 
ícodög
,

529 
HTCodî
 * 
ícodî
,

530 
HTCodî
 * 
decodî
,

531 
quÆôy
);

539 
	#HTF‹m©_isUnôyC⁄ã¡
(
me
) \

540 ((
me
)==
NULL
 || \

541 (
me
)==
WWW_CODING_BINARY
 || (me)==
WWW_CODING_IDENTITY
 || \

542 (
me
)==
WWW_CODING_7BIT
 || (me)==
WWW_CODING_8BIT
)

	)

549 
HTF‹m©_£tTøns„rCodög
 (
HTLi°
 * 
li°
);

550 
HTLi°
 * 
HTF‹m©_å™s„rCodög
 ();

552 
BOOL
 
HTF‹m©_addTøns„rCodög
 ( * 
ícodög
,

553 
HTCodî
 * 
ícodî
,

554 
HTCodî
 * 
decodî
,

555 
quÆôy
);

564 
	#HTF‹m©_isUnôyTøns„r
(
me
) \

565 ((
me
)==
NULL
 || \

566 (
me
)==
WWW_CODING_BINARY
 || (me)==
WWW_CODING_IDENTITY
 || \

567 (
me
)==
WWW_CODING_7BIT
 || (me)==
WWW_CODING_8BIT
)

	)

574 
HTF‹m©_£tL™guage
 (
HTLi°
 * 
li°
);

575 
HTLi°
 * 
HTF‹m©_œnguage
 ();

582 
HTF‹m©_£tCh¨£t
 (
HTLi°
 * 
li°
);

583 
HTLi°
 * 
HTF‹m©_ch¨£t
 ();

592 
HTF‹m©_dñëeAŒ
 ();

608 
HTSåóm
 * 
HTSåómSèck
 (
HTF‹m©
 
ªp_ö
,

609 
HTF‹m©
 
ªp_out
,

610 
HTSåóm
 * 
ouçut_°ªam
,

611 
HTReque°
 * 
ªque°
,

612 
BOOL
 
guess
);

622 
HTSèckVÆue
 (
HTLi°
 * 
c⁄vîsi⁄s
,

623 
HTF‹m©
 
f‹m©_ö
,

624 
HTF‹m©
 
f‹m©_out
,

625 
öôül_vÆue
,

626 
Àngth
);

645 
HTSåóm
 * 
HTC⁄ã¡CodögSèck
 (
HTEncodög
 
codög
,

646 
HTSåóm
 * 
èrgë
,

647 
HTReque°
 * 
ªque°
,

648 * 
∑øm
,

649 
BOOL
 
ícodög
);

657 
HTSåóm
 * 
HTC⁄ã¡EncodögSèck
 (
HTLi°
 * 
ícodögs
,

658 
HTSåóm
 * 
èrgë
,

659 
HTReque°
 * 
ªque°
,

660 * 
∑øm
);

670 
HTSåóm
 * 
HTC⁄ã¡DecodögSèck
 (
HTLi°
 * 
ícodögs
,

671 
HTSåóm
 * 
èrgë
,

672 
HTReque°
 * 
ªque°
,

673 * 
∑øm
);

692 
HTSåóm
 * 
HTTøns„rCodögSèck
 (
HTEncodög
 
codög
,

693 
HTSåóm
 * 
èrgë
,

694 
HTReque°
 * 
ªque°
,

695 * 
∑øm
,

696 
BOOL
 
ícodög
);

704 
HTSåóm
 * 
HTTøns„rEncodögSèck
 (
HTLi°
 * 
ícodögs
,

705 
HTSåóm
 * 
èrgë
,

706 
HTReque°
 * 
ªque°
,

707 * 
∑øm
);

717 
HTSåóm
 * 
HTTøns„rDecodögSèck
 (
HTLi°
 * 
ícodögs
,

718 
HTSåóm
 * 
èrgë
,

719 
HTReque°
 * 
ªque°
,

720 * 
∑øm
);

732 
HTSåóm
 * 
HTC⁄ã¡Tøns„rCodögSèck
 (
HTEncodög
 
ícodög
,

733 
HTSåóm
 * 
èrgë
,

734 
HTReque°
 * 
ªque°
,

735 * 
∑øm
,

736 
BOOL
 
ícode
);

745 
	s_HTPª£¡©i⁄
 {

746 
HTF‹m©
 
	mªp
;

747 
HTF‹m©
 
	mªp_out
;

748 
HTC⁄vîãr
 *
	mc⁄vîãr
;

749 * 
	mcomm™d
;

750 * 
	mã°_comm™d
;

751 
	mquÆôy
;

752 
	m£cs
;

753 
	m£cs_≥r_byã
;

754 } 
	tHTPª£¡©i⁄
;

	@Library/src/HTGopher.c

21 
	~"wwwsys.h
"

22 
	~"WWWUtû.h
"

23 
	~"WWWC‹e.h
"

24 
	~"WWWHTML.h
"

25 
	~"WWWDú.h
"

26 
	~"WWWTøns.h
"

27 
	~"HTNëM™.h
"

28 
	~"HTG›hî.h
"

31 #i‚de‡
GOPHER_PORT


32 
	#GOPHER_PORT
 70

	)

36 
	#PUTC
(
c
Ë(*
èrgë
->
iß
->
put_ch¨a˘î
)—¨gë, c)

	)

37 
	#PUTS
(
s
Ë(*
èrgë
->
iß
->
put_°rög
)—¨gë, s)

	)

38 
	#START
(
e
Ë(*
èrgë
->
iß
->
°¨t_ñemít
)—¨gë,É, 0, 0)

	)

39 
	#END
(
e
Ë(*
èrgë
->
iß
->
íd_ñemít
)—¨gë,É)

	)

42 
	e_HTG›hîTy≥
 {

43 
	mGT_TEXT
 = '0',

44 
	mGT_MENU
 = '1',

45 
	mGT_CSO
 = '2',

46 
	mGT_ERROR
 = '3',

47 
	mGT_MACBINHEX
 = '4',

48 
	mGT_PCBINHEX
 = '5',

49 
	mGT_UUENCODED
 = '6',

50 
	mGT_INDEX
 = '7',

51 
	mGT_TELNET
 = '8',

52 
	mGT_BINARY
 = '9',

53 
	mGT_GIF
 = 'g',

54 
	mGT_HTML
 = 'h',

55 
	mGT_INFO
 = 'i',

56 
	mGT_SOUND
 = 's',

57 
	mGT_WWW
 = 'w',

58 
	mGT_IMAGE
 = 'I',

59 
	mGT_TN3270
 = 'T',

60 
	mGT_DUPLICATE
 = '+',

61 
	mGT_PLUS_IMAGE
 = ':',

62 
	mGT_PLUS_MOVIE
 = ';',

63 
	mGT_PLUS_SOUND
 = '<',

64 
	mGT_EOF
 = '.'

65 } 
	tHTG›hîTy≥
;

68 
	e_G›hîSèã
 {

69 
	mGOPHER_ERROR
 = -3,

70 
	mGOPHER_NO_DATA
 = -2,

71 
	mGOPHER_GOT_DATA
 = -1,

72 
	mGOPHER_BEGIN
 = 0,

73 
	mGOPHER_NEED_CONNECTION
,

74 
	mGOPHER_NEED_REQUEST
,

75 
	mGOPHER_NEED_RESPONSE


76 } 
	tG›hîSèã
;

79 
	s_g›hî_öfo
 {

80 
HTG›hîTy≥
 
	mty≥
;

81 
G›hîSèã
 
	m°©e
;

82 * 
	mcmd
;

83 
HTNë
 * 
	m√t
;

84 } 
	tg›hî_öfo
;

86 
	#MAX_GOPHER_LINE
 256

	)

88 
	s_HTSåu˘uªd
 {

89 c⁄° 
HTSåu˘uªdCœss
 * 
	miß
;

92 
	s_HTSåóm
 {

93 c⁄° 
HTSåómCœss
 * 
	miß
;

94 
HTSåu˘uªd
 * 
	mèrgë
;

95 
HTReque°
 * 
	mªque°
;

96 
HTEOLSèã
 
	m°©e
;

97 * 
	muæ
;

98 
BOOL
 
	m¥e
;

99 
BOOL
 
	mjunk
;

100 
BOOL
 
	mCSO
;

101 
	mcso_ªc
[10];

102 
	mbuf„r
[
MAX_GOPHER_LINE
+1];

103 
	mbuÊí
;

106 
	s_HTI≈utSåóm
 {

107 c⁄° 
HTI≈utSåómCœss
 * 
	miß
;

110 
PRIVATE
 
HTDúShow
 
	gdú_show
 = 
HT_DS_ICON
;

119 
PRIVATE
 
HTIc⁄Node
 *
	$G›hîIc⁄
 (
HTG›hîTy≥
 
ty≥
)

121 
HTF‹m©
 
c⁄ã¡_ty≥
 = 
NULL
;

122 
HTEncodög
 
c⁄ã¡_ícodög
 = 
NULL
;

123 
HTFûeMode
 
mode
 = 
HT_IS_FILE
;

124 
ty≥
) {

125 
GT_MENU
:

126 
mode
 = 
HT_IS_DIR
;

127 
GT_TEXT
:

128 
c⁄ã¡_ty≥
 = 
	`HTAtom_f‹
("text/void");

130 
GT_IMAGE
:

131 
GT_PLUS_IMAGE
:

132 
GT_GIF
:

133 
c⁄ã¡_ty≥
 = 
	`HTAtom_f‹
("image/void");

135 
GT_WWW
:

136 
GT_HTML
:

137 
c⁄ã¡_ty≥
 = 
	`HTAtom_f‹
("text/void");

139 
GT_SOUND
:

140 
GT_PLUS_SOUND
:

141 
c⁄ã¡_ty≥
 = 
	`HTAtom_f‹
("audio/void");

143 
GT_PLUS_MOVIE
:

144 
c⁄ã¡_ty≥
 = 
	`HTAtom_f‹
("video/void");

146 
GT_INDEX
:

147 
c⁄ã¡_ty≥
 = 
	`HTAtom_f‹
("application/x-gopher-index");

149 
GT_CSO
:

150 
c⁄ã¡_ty≥
 = 
	`HTAtom_f‹
("application/x-gopher-cso");

152 
GT_TELNET
:

153 
c⁄ã¡_ty≥
 = 
	`HTAtom_f‹
("application/x-gopher-telnet");

155 
GT_TN3270
:

156 
c⁄ã¡_ty≥
 = 
	`HTAtom_f‹
("application/x-gopher-tn3270");

158 
GT_DUPLICATE
:

159 
c⁄ã¡_ty≥
 = 
	`HTAtom_f‹
("application/x-gopher-duplicate");

161 
GT_ERROR
:

162 
c⁄ã¡_ty≥
 = 
	`HTAtom_f‹
("www/unknown");

164 
GT_BINARY
:

165 
c⁄ã¡_ty≥
 = 
WWW_BINARY
;

168 
c⁄ã¡_ty≥
 = 
	`HTAtom_f‹
("www/unknown");

171  
	`HTIc⁄_föd
(
mode
, 
c⁄ã¡_ty≥
, 
c⁄ã¡_ícodög
);

172 
	}
}

182 
PRIVATE
 
BOOL
 
	$G›hîTôÀ
 (
HTSåóm
 *
me
)

184 
HTSåu˘uªd
 *
èrgë
 = 
me
->target;

185 *
°r
 = 
NULL
;

186 
	`SåAŒocC›y
(
°r
, 
me
->
CSO
 ? "CSO Search " : "GopherMenu");

188 
	`START
(
HTML_HTML
);

189 
	`START
(
HTML_HEAD
);

190 
	`START
(
HTML_TITLE
);

191 i‡(
me
->
CSO
) {

192 *
keyw‹d
 = 
	`°rchr
(
me
->
uæ
, '?');

193 i‡(
keyw‹d
) {

194 
	`SåAŒocC©
(
°r
, "for ");

195 
	`SåAŒocC©
(
°r
, ++
keyw‹d
);

198 
	`PUTS
(
°r
);

199 
	`END
(
HTML_TITLE
);

200 
	`END
(
HTML_HEAD
);

202 
	`START
(
HTML_BODY
);

203 
	`START
(
HTML_H1
);

204 
	`PUTS
(
°r
);

205 
	`END
(
HTML_H1
);

206 
	`HT_FREE
(
°r
);

207  
YES
;

208 
	}
}

214 
PRIVATE
 
BOOL
 
	$G›hîBŸtom
 (
HTSåóm
 *
me
)

216 
HTSåu˘uªd
 *
èrgë
 = 
me
->target;

217 i‡(
me
->
¥e
)

218 
	`END
(
HTML_PRE
);

219 
	`END
(
HTML_BODY
);

220 
	`END
(
HTML_HTML
);

221  
YES
;

222 
	}
}

229 
PRIVATE
 
BOOL
 
	$G›hîMíuLöe
 (
HTSåóm
 *
me
, *
löe
)

231 
HTSåu˘uªd
 *
èrgë
 = 
me
->target;

232 
HTG›hîTy≥
 
gty≥
 = (HTG›hîTy≥Ë*
löe
++;

233 
	`HTTRACE
(
PROT_TRACE
, "HTG›hî.... MíuÜöe: `%s\'\n" 
_
 
löe
);

234 i‡(
gty≥
 =
GT_INFO
) {

235 *
°›
 = 
	`°rchr
(
löe
, '\t');

236 i‡(
°›
) *stop = '\0';

237 
	`PUTS
(
löe
);

238 } i‡(
gty≥
 =
GT_ERROR
) {

239 *
°›
 = 
	`°rchr
(
löe
, '\t');

240 i‡(
°›
) *stop = '\0';

241 
	`PUTS
(
löe
);

242 } i‡((
	`°r°r
(
löe
, "error.host") || strstr(line, "errorhost"))) {

243 *
°›
 = 
	`°rchr
(
löe
, '\t');

244 i‡(
°›
) *stop = '\0';

245 
	`PUTS
(
löe
);

246 } i‡(
gty≥
 =
GT_EOF
) {

247  
NO
;

249 *
«me
 = 
löe
;

250 *
£À˘‹
 = 
	`°rchr
(
«me
, '\t');

251 *
ho°
 = 
NULL
;

252 *
p‹t
 = 
NULL
;

253 i‡(
£À˘‹
) {

254 *
£À˘‹
++ = '\0';

255 i‡((
ho°
 = 
	`°rchr
(
£À˘‹
, '\t'))) {

256 *
ho°
++ = '\0';

257 i‡((
p‹t
 = 
	`°rchr
(
ho°
, '\t'))) {

258 *
junk
;

259 *
p‹t
 = ':';

260 i‡((
junk
 = 
	`°rchr
(
p‹t
, '\t')Ë!
NULL
)

261 *
junk
 = '\0';

262 i‡(*(
p‹t
+1) == '0' && !*(port+2))

263 *
p‹t
 = '\0';

267 i‡(!
me
->
¥e
) {

268 
	`START
(
HTML_PRE
);

269 
me
->
¥e
 = 
YES
;

271 i‡(
dú_show
 & 
HT_DS_ICON
) {

272 
HTIc⁄Node
 *
ic⁄
 = 
	`G›hîIc⁄
(
gty≥
);

273 i‡(
ic⁄
) {

274 * 
Æt
 = 
	`HTIc⁄_Æã∫©ive
(
ic⁄
, 
YES
);

275 
	`HTMLPutImg
(
èrgë
, 
	`HTIc⁄_uæ
(
ic⁄
), 
Æt
, 
NULL
);

276 
	`HT_FREE
(
Æt
);

277 
	`PUTC
(' ');

280 i‡(
gty≥
 =
GT_WWW
) {

281 *
esˇ≥d
 = 
NULL
;

282 
esˇ≥d
 = 
	`HTEsˇ≥
(
£À˘‹
, 
URL_PATH
);

283 
	`HTSèπAnch‹
(
èrgë
, 
NULL
, 
esˇ≥d
);

284 
	`PUTS
(
«me
);

285 
	`END
(
HTML_A
);

286 
	`HT_FREE
(
esˇ≥d
);

287 } i‡(
p‹t
) {

288 *
esˇ≥d
 = 
NULL
;

289 *
addªss
 = 
NULL
;

290 
addr_Àn
;

293 i‡(
£À˘‹
 && *selector) {

294 
esˇ≥d
 = 
	`HTEsˇ≥
(
£À˘‹
, 
URL_PATH
);

295 
addr_Àn
 = 15 + 
	`°æí
(
esˇ≥d
Ë+ såÀn(
ho°
) + 1;

297 
addr_Àn
 = 15 + 
	`°æí
(
ho°
) + 1;

299 i‡((
addªss
 = (*Ë
	`HT_MALLOC
(
addr_Àn
)Ë=
NULL
)

300 
	`HT_OUTOFMEM
("GopherMenuLine");

301 *
addªss
 = '\0';

303 i‡(
gty≥
 =
GT_TELNET
) {

304 i‡(
esˇ≥d
)

305 
	`•rötf
(
addªss
, "ã ë://%s@%s/", 
esˇ≥d
, 
ho°
);

307 
	`•rötf
(
addªss
, "ã ë://%s/", 
ho°
);

308 } i‡(
gty≥
 =
GT_TN3270
) {

309 i‡(
esˇ≥d
)

310 
	`•rötf
(
addªss
, "ä3270://%s@%s/", 
esˇ≥d
, 
ho°
);

312 
	`•rötf
(
addªss
, "ä3270://%s/", 
ho°
);

314 i‡(
esˇ≥d
)

315 
	`•rötf
(
addªss
, "//%s/%c%s", 
ho°
, 
gty≥
, 
esˇ≥d
);

317 
	`•rötf
(
addªss
, "//%s/%c", 
ho°
, 
gty≥
);

320 
	`HTSèπAnch‹
(
èrgë
, 
NULL
, 
addªss
);

321 
	`PUTS
(
«me
);

322 
	`END
(
HTML_A
);

323 
	`HT_FREE
(
addªss
);

324 
	`HT_FREE
(
esˇ≥d
);

325 
	`PUTC
('\n');

327 
	`HTTRACE
(
PROT_TRACE
, "HTG›hî.... Bad míu iãm, `%s\'\n" 
_
 
löe
);

330  
YES
;

331 
	}
}

338 
PRIVATE
 
BOOL
 
	$G›hîCSOLöe
 (
HTSåóm
 *
me
, *
löe
)

340 
HTSåu˘uªd
 *
èrgë
 = 
me
->target;

341 i‡(*
löe
 == '1') {

342 *
°¨t
 = 
	`°rchr
(
löe
, ':');

343 i‡(
°¨t
Ë°¨t++; °¨t=
löe
;

344 
	`PUTS
(
°¨t
);

345 } i‡(*
löe
 == '2') {

346  
NO
;

347 } i‡(*
löe
 == '5') {

348 *
°¨t
 = 
	`°rchr
(
löe
, ':');

349 i‡(
°¨t
Ë°¨t++; °¨t=
löe
;

350 
	`PUTS
(
°¨t
);

351 } i‡(*
löe
 == '-') {

359 *
code
;

360 *
fõld
;

361 i‡((
code
 = 
	`°rchr
(
löe
, ':')Ë&& (
fõld
 = strchr(++code, ':'))) {

362 
BOOL
 
√wªc
 = 
YES
;

363 *
fõld
++ = '\0';

364 i‡(!*
me
->
cso_ªc
) {

365 
	`START
(
HTML_DL
);

366 } i‡(
	`°rcmp
(
me
->
cso_ªc
, 
code
)) {

367 
	`START
(
HTML_B
);

369 
√wªc
 = 
NO
;

370 
	`START
(
HTML_DT
);

379 *
vÆue
 = 
	`°rchr
(
fõld
, ':');

380 i‡(!
vÆue
)

381 
vÆue
 = "Empty value";

383 *
vÆue
++ = '\0';

385 *
°rù
 = 
	`HTSåù
(
fõld
);

386 
	`PUTS
(
°rù
);

387 
	`START
(
HTML_DD
);

388 
°rù
 = 
	`HTSåù
(
vÆue
);

389 i‡(
√wªc
) {

390 
	`PUTS
(
°rù
);

391 
	`END
(
HTML_B
);

393 
	`PUTS
(
°rù
);

397 
	`°r˝y
(
me
->
cso_ªc
, 
code
);

401 *
°¨t
 = 
	`°rchr
(
löe
, ':');

402 i‡(
°¨t
Ë°¨t++; °¨t=
löe
;

403 
	`PUTS
(
°¨t
);

405  
YES
;

406 
	}
}

411 
PRIVATE
 
	$G›hîMíu_put_block
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
)

413 
l
-- > 0) {

414 i‡(
me
->
°©e
 =
EOL_FCR
) {

415 i‡(*
b
 =
LF
 && 
me
->
buÊí
) {

416 i‡(!
me
->
junk
) {

417 
BOOL
 
c⁄t
;

418 *(
me
->
buf„r
+me->
buÊí
) = '\0';

419 
c⁄t
 = 
me
->
CSO
 ? 
	`G›hîCSOLöe
(me, me->
buf„r
) :

420 
	`G›hîMíuLöe
(
me
, me->
buf„r
);

421 i‡(
c⁄t
 =
NO
Ë 
HT_LOADED
;

423 
me
->
junk
 = 
NO
;

425 
me
->
buÊí
 = 0;

426 
me
->
°©e
 = 
EOL_BEGIN
;

427 } i‡(*
b
 =
CR
) {

428 
me
->
°©e
 = 
EOL_FCR
;

429 } i‡(*
b
 =
LF
 && 
me
->
buÊí
) {

430 i‡(!
me
->
junk
) {

431 
BOOL
 
c⁄t
;

432 *(
me
->
buf„r
+me->
buÊí
) = '\0';

433 
c⁄t
 = 
me
->
CSO
 ? 
	`G›hîCSOLöe
(me, me->
buf„r
) :

434 
	`G›hîMíuLöe
(
me
, me->
buf„r
);

435 i‡(
c⁄t
 =
NO
Ë 
HT_LOADED
;

437 
me
->
junk
 = 
NO
;

438 
me
->
buÊí
 = 0;

439 
me
->
°©e
 = 
EOL_BEGIN
;

441 *(
me
->
buf„r
+me->
buÊí
++Ë*
b
;

442 i‡(
me
->
buÊí
 >
MAX_GOPHER_LINE
) {

443 
	`HTTRACE
(
PROT_TRACE
, "Gopher...... LineÅooÜong - ignored\n");

444 
me
->
buÊí
 = 0;

445 
me
->
junk
 = 
YES
;

448 
b
++;

450  
HT_OK
;

451 
	}
}

453 
PRIVATE
 
	$G›hîMíu_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

455  
	`G›hîMíu_put_block
(
me
, 
s
, (Ë
	`°æí
(s));

456 
	}
}

458 
PRIVATE
 
	$G›hîMíu_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

460  
	`G›hîMíu_put_block
(
me
, &
c
, 1);

461 
	}
}

463 
PRIVATE
 
	$G›hîMíu_Êush
 (
HTSåóm
 * 
me
)

465  (*
me
->
èrgë
->
iß
->
Êush
)(me->target);

466 
	}
}

468 
PRIVATE
 
	$G›hîMíu_‰ì
 (
HTSåóm
 * 
me
)

470 
°©us
 = 
HT_OK
;

471 
	`G›hîBŸtom
(
me
);

472 i‡((
°©us
 = (*
me
->
èrgë
->
iß
->
_‰ì
)(me->èrgë)Ë=
HT_WOULD_BLOCK
)

473  
HT_WOULD_BLOCK
;

474 
	`HT_FREE
(
me
);

475  
HT_OK
;

476 
	}
}

478 
PRIVATE
 
	$G›hîMíu_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

480 (*
me
->
èrgë
->
iß
->
ab‹t
)(me->èrgë, 
e
);

481 
	`HT_FREE
(
me
);

482 
	`HTTRACE
(
PROT_TRACE
, "Gopher...... ABORTING...\n");

483  
HT_ERROR
;

484 
	}
}

489 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gG›hîMíuCœss
 =

492 
G›hîMíu_Êush
,

493 
G›hîMíu_‰ì
,

494 
G›hîMíu_ab‹t
,

495 
G›hîMíu_put_ch¨a˘î
,

496 
G›hîMíu_put_°rög
,

497 
G›hîMíu_put_block


503 
PRIVATE
 
HTSåóm
 * 
	$G›hîMíu_√w
 (
HTReque°
 * 
ªque°
, *
uæ
, 
BOOL
 
CSO
)

505 
HTSåóm
 * 
me
;

506 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

507 
	`HT_OUTOFMEM
("GopherMenu_new");

508 
me
->
iß
 = &
G›hîMíuCœss
;

509 
me
->
èrgë
 = 
	`HTMLGíî©‹
(
ªque°
, 
NULL
, 
WWW_HTML
,

510 
	`HTReque°_ouçutF‹m©
(
ªque°
),

511 
	`HTReque°_ouçutSåóm
(
ªque°
));

512 
	`HTAnch‹_£tF‹m©
(
	`HTReque°_™ch‹
(
ªque°
), 
WWW_HTML
);

513 
me
->
ªque°
 =Ñequest;

514 
me
->
°©e
 = 
EOL_BEGIN
;

515 
me
->
uæ
 = url;

516 
me
->
CSO
 = CSO;

517 
	`G›hîTôÀ
(
me
);

518  
me
;

519 
	}
}

530 
PRIVATE
 
BOOL
 
	$G›hîCÀ™up
 (
HTReque°
 * 
ªque°
, 
°©us
)

532 
HTNë
 * 
√t
 = 
	`HTReque°_√t
(
ªque°
);

533 
g›hî_öfo
 * 
g›hî
 = (g›hî_öfÿ*Ë
	`HTNë_c⁄ãxt
(
√t
);

534 
HTSåóm
 * 
öput
 = 
	`HTReque°_öputSåóm
(
ªque°
);

537 i‡(
öput
) {

538 i‡(
°©us
 =
HT_INTERRUPTED
)

539 (*
öput
->
iß
->
ab‹t
)(öput, 
NULL
);

541 (*
öput
->
iß
->
_‰ì
)(input);

545 
	`HTNë_dñëe
(
√t
, 
°©us
);

546 i‡(
g›hî
) {

547 
	`HT_FREE
(
g›hî
->
cmd
);

548 
	`HT_FREE
(
g›hî
);

550  
YES
;

551 
	}
}

557 
PRIVATE
 
	$di•œy_ödex
 (
HTReque°
 * 
ªque°
)

559 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

560 
HTSåu˘uªd
 *
èrgë
 = 
	`HTMLGíî©‹
(
ªque°
, 
NULL
, 
WWW_HTML
,

561 
	`HTReque°_ouçutF‹m©
(
ªque°
),

562 
	`HTReque°_ouçutSåóm
(
ªque°
));

565 
	`HTAnch‹_£tF‹m©
(
™ch‹
, 
WWW_HTML
);

566 
	`HTAnch‹_£tTôÀ
(
™ch‹
, "Searchable Gopher Index");

569 
	`START
(
HTML_HTML
);

570 
	`START
(
HTML_HEAD
);

571 
	`START
(
HTML_TITLE
);

572 
	`PUTS
("Searchable Gopher Index");

573 
	`END
(
HTML_TITLE
);

574 
	`END
(
HTML_HEAD
);

575 
	`START
(
HTML_BODY
);

577 
	`START
(
HTML_H1
);

578 
	`PUTS
("Searchable Gopher Index");

579 
	`END
(
HTML_H1
);

580 
	`START
(
HTML_ISINDEX
);

581 
	`END
(
HTML_BODY
);

582 
	`END
(
HTML_HTML
);

583 (*
èrgë
->
iß
->
_‰ì
)(target);

584 
	}
}

591 
PRIVATE
 
	$di•œy_cso
 (
HTReque°
 * 
ªque°
)

593 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

594 
HTSåu˘uªd
 *
èrgë
 = 
	`HTMLGíî©‹
(
ªque°
, 
NULL
, 
WWW_HTML
,

595 
	`HTReque°_ouçutF‹m©
(
ªque°
),

596 
	`HTReque°_ouçutSåóm
(
ªque°
));

599 
	`HTAnch‹_£tF‹m©
(
™ch‹
, 
WWW_HTML
);

600 
	`HTAnch‹_£tTôÀ
(
™ch‹
, "Searchable SCO Index");

603 
	`START
(
HTML_HTML
);

604 
	`START
(
HTML_HEAD
);

605 
	`START
(
HTML_TITLE
);

606 
	`PUTS
("Searchable Index ofá CSO Name Server");

607 
	`END
(
HTML_TITLE
);

608 
	`END
(
HTML_HEAD
);

609 
	`START
(
HTML_BODY
);

611 
	`START
(
HTML_H1
);

612 
	`PUTS
("Searchable Index ofá CSO Name Server");

613 
	`END
(
HTML_H1
);

614 
	`PUTS
("A CSO Name Server usuallyÖrovides directory informationáboutÖeople.");

615 
	`START
(
HTML_ISINDEX
);

616 
	`END
(
HTML_BODY
);

617 
	`END
(
HTML_HTML
);

618 (*
èrgë
->
iß
->
_‰ì
)(target);

619 
	}
}

631 
PRIVATE
 
G›hîEvít
 (
SOCKET
 
soc
, * 
pVoid
, 
HTEvítTy≥
 
ty≥
);

633 
PUBLIC
 
	$HTLﬂdG›hî
 (
SOCKET
 
soc
, 
HTReque°
 * 
ªque°
)

635 
g›hî_öfo
 * 
g›hî
;

636 
HTNë
 * 
√t
 = 
	`HTReque°_√t
(
ªque°
);

637 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

638 * 
uæ
 = 
	`HTAnch‹_physiˇl
(
™ch‹
);

645 
	`HTTRACE
(
PROT_TRACE
, "G›hî...... Lookög f‹ `%s\'\n" 
_
 
uæ
);

646 i‡((
g›hî
 = (
g›hî_öfo
 *Ë
	`HT_CALLOC
(1, (g›hî_öfo))Ë=
NULL
)

647 
	`HT_OUTOFMEM
("HTLoadGopher");

648 
g›hî
->
ty≥
 = 
GT_MENU
;

649 
g›hî
->
°©e
 = 
GOPHER_BEGIN
;

650 
g›hî
->
√t
 =Çet;

651 
	`HTNë_£tC⁄ãxt
(
√t
, 
g›hî
);

652 
	`HTNë_£tEvítCÆlback
(
√t
, 
G›hîEvít
);

653 
	`HTNë_£tEvítP¨am
(
√t
, 
g›hî
);

655  
	`G›hîEvít
(
soc
, 
g›hî
, 
HTEvít_BEGIN
);

656 
	}
}

658 
PRIVATE
 
	$G›hîEvít
 (
SOCKET
 
soc
, * 
pVoid
, 
HTEvítTy≥
 
ty≥
)

660 
g›hî_öfo
 * 
g›hî
 = (g›hî_öfÿ*)
pVoid
;

661 
°©us
 = 
HT_ERROR
;

662 
HTNë
 * 
√t
 = 
g›hî
->net;

663 
HTReque°
 * 
ªque°
 = 
	`HTNë_ªque°
(
√t
);

664 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

665 
HTHo°
 * 
ho°
 = 
	`HTNë_ho°
(
√t
);

666 * 
uæ
 = 
	`HTAnch‹_physiˇl
(
™ch‹
);

668 i‡(
ty≥
 =
HTEvít_CLOSE
) {

669 
	`G›hîCÀ™up
(
ªque°
, 
HT_INTERRUPTED
);

670  
HT_OK
;

672 
g›hî
 = (
g›hî_öfo
 *Ë
	`HTNë_c⁄ãxt
(
√t
);

676 
g›hî
->
°©e
) {

678 
GOPHER_BEGIN
:

680 *
∑th
 = 
	`HTP¨£
(
uæ
, "", 
PARSE_PATH
);

681 *
£À˘‹
 = 
∑th
;

682 *
quîy
 = 
NULL
;

683 *
£∑øt‹
 = 
NULL
;

684 i‡(*
£À˘‹
Ë
g›hî
->
ty≥
 = (
HTG›hîTy≥
) *selector++;

685 i‡(
g›hî
->
ty≥
 =
GT_INDEX
) {

686 
	`HTAnch‹_£tIndex
(
™ch‹
);

687 
quîy
 = 
	`°rchr
(
£À˘‹
, '?');

690 i‡(!
quîy
 || !*(query+1)) {

691 
	`di•œy_ödex
(
ªque°
);

692 
g›hî
->
°©e
 = 
GOPHER_GOT_DATA
;

693 
	`HT_FREE
(
∑th
);

696 *
quîy
++ = 0;

697 
£∑øt‹
 = "\t";

699 } i‡(
g›hî
->
ty≥
 =
GT_CSO
) {

700 
	`HTAnch‹_£tIndex
(
™ch‹
);

701 
quîy
 = 
	`°rchr
(
£À˘‹
, '?');

704 i‡(!
quîy
 || !*(query+1)) {

705 
	`di•œy_cso
(
ªque°
);

706 
g›hî
->
°©e
 = 
GOPHER_GOT_DATA
;

707 
	`HT_FREE
(
∑th
);

710 *
quîy
++ = 0;

711 *
£À˘‹
 = 0;

712 
£∑øt‹
 = "query ";

718 
¸lf
[3];

719 
	`SåAŒocC›y
(
g›hî
->
cmd
, 
£À˘‹
);

720 i‡(
quîy
) {

721 *
p
;

722 
p
=
quîy
; *p;Ö++)

723 i‡(*
p
 == '+') *p = ' ';

724 
	`SåAŒocC©
(
g›hî
->
cmd
, 
£∑øt‹
);

725 
	`SåAŒocC©
(
g›hî
->
cmd
, 
quîy
);

727 
	`HTUnEsˇ≥
(
g›hî
->
cmd
);

728 
	`HTCÀ™Tñ√tSåög
(
g›hî
->
cmd
);

729 *
¸lf
 = 
CR
;

730 *(
¸lf
+1Ë
LF
;

731 *(
¸lf
+2) = '\0';

732 
	`SåAŒocC©
(
g›hî
->
cmd
, 
¸lf
);

734 
	`HT_FREE
(
∑th
);

735 
g›hî
->
°©e
 = 
GOPHER_NEED_CONNECTION
;

739 
GOPHER_NEED_CONNECTION
:

740 
°©us
 = 
	`HTHo°_c⁄√˘
(
ho°
, 
√t
, 
uæ
);

741 
ho°
 = 
	`HTNë_ho°
(
√t
);

742 i‡(
°©us
 =
HT_OK
) {

748 
HTHo°
 * 
ho°
 = 
	`HTNë_ho°
(
√t
);

749 * 
s_˛ass
 = 
	`HTHo°_˛ass
(
ho°
);

750 i‡(
s_˛ass
 && 
	`°rˇ£comp
(s_class, "gopher")) {

751 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_CLASS
,

752 
NULL
, 0, "HTLoadGopher");

753 
g›hî
->
°©e
 = 
GOPHER_ERROR
;

756 
	`HTHo°_£tCœss
(
ho°
, "gopher");

765 i‡(
g›hî
->
ty≥
 =
GT_MENU
 || g›hî->ty≥ =
GT_INDEX
)

766 
√t
->
ªadSåóm
 = 
	`G›hîMíu_√w
(
ªque°
, 
uæ
, 
NO
);

767 i‡(
g›hî
->
ty≥
 =
GT_CSO
)

768 
√t
->
ªadSåóm
 = 
	`G›hîMíu_√w
(
ªque°
, 
uæ
, 
YES
);

770 
√t
->
ªadSåóm
 = 
	`HTSåómSèck
(
WWW_UNKNOWN
,

771 
	`HTReque°_ouçutF‹m©
(
ªque°
),

772 
	`HTReque°_ouçutSåóm
(
ªque°
),

773 
ªque°
, 
NO
);

774 
	`HTReque°_£tOuçutC⁄√˘ed
(
ªque°
, 
YES
);

782 
HTOuçutSåóm
 * 
ouçut
 = 
	`HTNë_gëOuçut
(
√t
, 
NULL
, 0);

783 
	`HTReque°_£tI≈utSåóm
(
ªque°
, (
HTSåóm
 *Ë
ouçut
);

785 
g›hî
->
°©e
 = 
GOPHER_NEED_REQUEST
;

787 } i‡(
°©us
 =
HT_WOULD_BLOCK
)

788  
HT_OK
;

790 
g›hî
->
°©e
 = 
GOPHER_ERROR
;

793 
GOPHER_NEED_REQUEST
:

794 
	`HTTRACE
(
PROT_TRACE
, "G›hî Tx... `%s\'" 
_
 
g›hî
->
cmd
);

796 
HTSåóm
 * 
öput
 = 
	`HTReque°_öputSåóm
(
ªque°
);

797 
°©us
 = (*
öput
->
iß
->
put_block
)

798 (
öput
, 
g›hî
->
cmd
, 
	`°æí
(gopher->cmd));

799 i‡(
°©us
 =
HT_WOULD_BLOCK
)

800  
HT_OK
;

801 i‡(
°©us
 =
HT_ERROR
)

802 
g›hî
->
°©e
 = 
GOPHER_ERROR
;

804 
g›hî
->
°©e
 = 
GOPHER_NEED_RESPONSE
;

808 
GOPHER_NEED_RESPONSE
:

809 
°©us
 = 
	`HTHo°_ªad
(
√t
->
ho°
,Çet);

810 i‡(
°©us
 =
HT_WOULD_BLOCK
)

811  
HT_OK
;

812 i‡(
°©us
 =
HT_LOADED
 || sètu†=
HT_CLOSED
)

813 
g›hî
->
°©e
 = 
GOPHER_GOT_DATA
;

815 
g›hî
->
°©e
 = 
GOPHER_ERROR
;

818 
GOPHER_GOT_DATA
:

819 
	`G›hîCÀ™up
(
ªque°
, 
HT_LOADED
);

820  
HT_OK
;

823 
GOPHER_NO_DATA
:

824 
	`G›hîCÀ™up
(
ªque°
, 
HT_NO_DATA
);

825  
HT_OK
;

828 
GOPHER_ERROR
:

829 
	`G›hîCÀ™up
(
ªque°
, 
HT_ERROR
);

830  
HT_OK
;

834 
	}
}

	@Library/src/HTGopher.h

27 #i‚de‡
HTGOPHER_H


28 
	#HTGOPHER_H


	)

30 
	~"HTPrŸ.h
"

32 
HTPrŸCÆlback
 
HTLﬂdG›hî
;

	@Library/src/HTGuess.c

18 
	~"wwwsys.h
"

19 
	~"WWWUtû.h
"

20 
	~"WWWLib.h
"

21 
	~"WWWFûe.h
"

22 
	~"HTGuess.h
"

24 
	#SAMPLE_SIZE
 200

	)

30 
	s_HTSåóm
 {

31 c⁄° 
HTSåómCœss
 * 
	miß
;

33 
HTReque°
 * 
	mªque°
;

34 
HTRe•⁄£
 * 
	mª•⁄£
;

35 
HTF‹m©
 
	mouçut_f‹m©
;

36 
HTSåóm
 * 
	mouçut_°ªam
;

37 
HTSåóm
 * 
	mèrgë
;

39 
BOOL
 
	må™•¨ít
;

40 
	m˙t
;

41 
	mãxt_˙t
;

42 
	mlf_˙t
;

43 
	m¸_˙t
;

44 
	mpg_˙t
;

45 
	m˘æ_˙t
;

46 
	mhigh_˙t
;

47 * 
	mwrôe_±r
;

48 
	mbuf„r
[ 
SAMPLE_SIZE
 + 1 ];

51 
	#PUT_CHAR
(
c
Ë(*
me
->
èrgë
->
iß
->
put_ch¨a˘î
)(me->èrgë,(c))

	)

52 
	#PUT_STRING
(
s
Ë(*
me
->
èrgë
->
iß
->
put_°rög
)(me->èrgë,(s))

	)

53 
	#PUT_BLOCK
(
b
,
l
Ë(*
me
->
èrgë
->
iß
->
put_block
)(me->èrgë,(b),÷))

	)

57 
PRIVATE
 
BOOL
 
	$is_html
 (* 
buf
)

59 * 
p
 = 
	`°rchr
(
buf
,'<');

61 i‡(
p
 && (!
	`°∫ˇ£comp
(p, "<HTML>", 6) ||

62 !
	`°∫ˇ£comp
(
p
, "<!DOCTYPE HTML", 13) ||

63 !
	`°∫ˇ£comp
(
p
, "<HEAD", 5) ||

64 !
	`°∫ˇ£comp
(
p
, "<TITLE>", 7) ||

65 !
	`°∫ˇ£comp
(
p
, "<BODY>", 6) ||

66 !
	`°∫ˇ£comp
(
p
, "<PLAINTEXT>", 11) ||

67 (
p
[0]=='<' && 
	`TOUPPER
(p[1]) == 'H' &&Ö[3]=='>')))

68  
YES
;

70  
NO
;

71 
	}
}

73 
PRIVATE
 
	$HTGuess_Êush
 (
HTSåóm
 * 
me
)

75 i‡(!
me
->
å™•¨ít
) {

76 
HTRe•⁄£
 * 
ª•⁄£
 = 
me
->response;

82 i‡(
me
->
˙t
) {

83 
	`HTTRACE
(
STREAM_TRACE
, "GUESSING.... Resu… o‡c⁄ã¡á«lysis: Text=%d%% Newlöes=%d%% Cål=%d%% High=%d%%\n" 
_


84 ()(100*
me
->
ãxt_˙t
/me->
˙t
 + 0.5Ë
_


85 ()(100*
me
->
lf_˙t
 /me->
˙t
 + 0.5Ë
_


86 ()(100*
me
->
˘æ_˙t
/me->
˙t
 + 0.5Ë
_


87 ()(100*
me
->
high_˙t
/me->
˙t
 + 0.5));

90 i‡(!
me
->
˘æ_˙t
 ||

91 
me
->
ãxt_˙t
 + me->
lf_˙t
 >16 * (me->
˘æ_˙t
 + me->
high_˙t
)) {

92 *
±r
;

95 *
me
->
wrôe_±r
 = 0;

97 i‡(
me
->
high_˙t
 > 0)

98 
	`HTRe•⁄£_£tC⁄ã¡Tøns„rEncodög
(
ª•⁄£
, 
WWW_CODING_8BIT
);

100 
	`HTRe•⁄£_£tC⁄ã¡Tøns„rEncodög
(
ª•⁄£
, 
WWW_CODING_7BIT
);

102 i‡(
	`is_html
(
me
->
buf„r
))

103 
	`HTRe•⁄£_£tF‹m©
(
ª•⁄£
, 
	`HTAtom_f‹
("text/html"));

105 i‡(!
	`°∫cmp
(
me
->
buf„r
, "%!", 2))

106 
	`HTRe•⁄£_£tF‹m©
(
ª•⁄£
, 
	`HTAtom_f‹
("application/postscript"));

108 i‡(
	`°r°r
(
me
->
buf„r
, "#define") &&

109 
	`°r°r
(
me
->
buf„r
, "_width") &&

110 
	`°r°r
(
me
->
buf„r
, "_bits"))

111 
	`HTRe•⁄£_£tF‹m©
(
ª•⁄£
, 
	`HTAtom_f‹
("image/x-xbitmap"));

113 i‡((
±r
 = 
	`°r°r
(
me
->
buf„r
, "c⁄vîãd wôh BöHex"))!=
NULL
)

114 
	`HTRe•⁄£_£tC⁄ã¡Tøns„rEncodög
(
ª•⁄£
, 
WWW_CODING_MACBINHEX
);

116 i‡(!
	`°∫cmp
(
me
->
buf„r
, "begin ", 6))

117 
	`HTRe•⁄£_£tC⁄ã¡Tøns„rEncodög
(
ª•⁄£
, 
WWW_CODING_BASE64
);

120 
	`HTRe•⁄£_£tF‹m©
(
ª•⁄£
, 
WWW_PLAINTEXT
);

123 i‡(!
	`°∫cmp
(
me
->
buf„r
, "GIF", 3))

124 
	`HTRe•⁄£_£tF‹m©
(
ª•⁄£
, 
WWW_GIF
);

126 i‡(!
	`°∫cmp
(
me
->
buf„r
, "\377\330\377\340", 4))

127 
	`HTRe•⁄£_£tF‹m©
(
ª•⁄£
, 
WWW_JPEG
);

129 i‡(!
	`°rcmp
(
me
->
buf„r
, "MM"))

130 
	`HTRe•⁄£_£tF‹m©
(
ª•⁄£
, 
WWW_TIFF
);

132 i‡(!
	`°∫cmp
(
me
->
buf„r
, "\211PNG\r\n\032\n", 8))

133 
	`HTRe•⁄£_£tF‹m©
(
ª•⁄£
, 
WWW_PNG
);

135 i‡(!
	`°∫cmp
(
me
->
buf„r
, ".snd", 4))

136 
	`HTRe•⁄£_£tF‹m©
(
ª•⁄£
, 
WWW_AUDIO
);

138 i‡(!
	`°∫cmp
(
me
->
buf„r
, "\037\235", 2))

139 
	`HTRe•⁄£_addEncodög
(
ª•⁄£
, 
WWW_CODING_COMPRESS
);

141 i‡(!
	`°∫cmp
(
me
->
buf„r
, "\037\213", 2))

142 
	`HTRe•⁄£_addEncodög
(
ª•⁄£
, 
WWW_CODING_GZIP
);

145 
	`HTRe•⁄£_£tF‹m©
(
ª•⁄£
, 
WWW_BINARY
);

153 i‡(
	`HTRe•⁄£_f‹m©
(
ª•⁄£
Ë=
WWW_UNKNOWN
) {

154 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
me
->
ªque°
);

155 * 
addr
 = 
	`HTAnch‹_physiˇl
(
™ch‹
);

156 
	`HTTRACE
(
STREAM_TRACE
, "GUESSING.... Hmm -ÅryingÜocal bindings\n");

157 
	`HTBöd_gëRe•⁄£Bödögs
 (
ª•⁄£
, 
addr
);

163 i‡(
	`HTRe•⁄£_f‹m©
(
ª•⁄£
Ë=
WWW_UNKNOWN
) {

164 
	`HTTRACE
(
STREAM_TRACE
, "GUESSING.... That's it - I'm giving up!\n");

165 
	`HTRe•⁄£_£tF‹m©
(
ª•⁄£
, 
WWW_BINARY
);

168 
	`HTTRACE
(
STREAM_TRACE
, "Gues£d..... C⁄ã¡-Ty≥ `%s\'\n" 
_
 
	`HTAtom_«me
(
	`HTRe•⁄£_f‹m©
(
ª•⁄£
)));

173 i‡((
me
->
èrgë
 = 
	`HTSåómSèck
(
	`HTRe•⁄£_f‹m©
(
ª•⁄£
),

174 
me
->
ouçut_f‹m©
, me->
ouçut_°ªam
,

175 
me
->
ªque°
, 
NO
)Ë=
NULL
) {

176 
	`HTTRACE
(
STREAM_TRACE
, "HTGuess..... Can't convert mediaÅype\n");

177 
me
->
èrgë
 = 
	`HTEº‹Såóm
();

179 
me
->
å™•¨ít
 = 
YES
;

180  
	`PUT_BLOCK
(
me
->
buf„r
, me->
˙t
);

182  
HT_OK
;

183 
	}
}

186 
PRIVATE
 
	$HTGuess_put_block
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
)

188 !
me
->
å™•¨ít
 && 
l
-- > 0) {

189 
°©us
;

190 i‡(
me
->
èrgë
) {

191 i‡((
°©us
 = 
	`HTGuess_Êush
(
me
)Ë!
HT_OK
)

192  
°©us
;

194 
me
->
˙t
++;

195 i‡(*
b
 =
LF
)

196 
me
->
lf_˙t
++;

197 i‡(*
b
 =
CR
)

198 
me
->
¸_˙t
++;

199 i‡(*
b
 == 12)

200 
me
->
pg_˙t
++;

201 i‡(*
b
 =='\t')

202 
me
->
ãxt_˙t
++;

203 i‡(()*
b
 < 32)

204 
me
->
˘æ_˙t
++;

205 i‡(()*
b
 < 128)

206 
me
->
ãxt_˙t
++;

208 
me
->
high_˙t
++;

209 *
me
->
wrôe_±r
++ = *
b
++;

210 i‡(
me
->
˙t
 >
SAMPLE_SIZE
) {

211 i‡((
°©us
 = 
	`HTGuess_Êush
(
me
)Ë!
HT_OK
)

212  
°©us
;

216 i‡(
l
 > 0)

217  
	`PUT_BLOCK
(
b
, 
l
);

218  
HT_OK
;

219 
	}
}

221 
PRIVATE
 
	$HTGuess_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

223  
	`HTGuess_put_block
(
me
, &
c
, 1);

224 
	}
}

226 
PRIVATE
 
	$HTGuess_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

228  
	`HTGuess_put_block
(
me
, 
s
, (Ë
	`°æí
(s));

229 
	}
}

231 
PRIVATE
 
	$HTGuess_‰ì
 (
HTSåóm
 * 
me
)

233 
°©us
;

234 i‡(!
me
->
å™•¨ít
 && (
°©us
 = 
	`HTGuess_Êush
(me)Ë!
HT_OK
)

235  
°©us
;

237 
me
->
å™•¨ít
 = 
YES
;

238 i‡((
°©us
 = (*
me
->
èrgë
->
iß
->
_‰ì
)(me->èrgë)Ë!
HT_OK
)

239  
°©us
;

240 
	`HT_FREE
(
me
);

241  
HT_OK
;

242 
	}
}

244 
PRIVATE
 
	$HTGuess_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

246 i‡(
me
->
èrgë
Ë(*me->èrgë->
iß
->
ab‹t
)(me->èrgë, 
e
);

247 
	`HT_FREE
(
me
);

248  
HT_ERROR
;

249 
	}
}

255 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTGuessCœss
 =

258 
HTGuess_Êush
,

259 
HTGuess_‰ì
,

260 
HTGuess_ab‹t
,

261 
HTGuess_put_ch¨a˘î
,

262 
HTGuess_put_°rög
,

263 
HTGuess_put_block


266 
PUBLIC
 
HTSåóm
 * 
	$HTGuess_√w
 (
HTReque°
 * 
ªque°
,

267 * 
∑øm
,

268 
HTF‹m©
 
öput_f‹m©
,

269 
HTF‹m©
 
ouçut_f‹m©
,

270 
HTSåóm
 * 
ouçut_°ªam
)

272 
HTSåóm
 * 
me
;

273 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1,(HTSåóm))Ë=
NULL
)

274 
	`HT_OUTOFMEM
("HTGuess_new");

275 
me
->
iß
 = &
HTGuessCœss
;

276 
me
->
ªque°
 =Ñequest;

277 
me
->
ª•⁄£
 = 
	`HTReque°_ª•⁄£
(
ªque°
);

278 
me
->
ouçut_f‹m©
 = output_format;

279 
me
->
ouçut_°ªam
 = output_stream;

280 
me
->
wrôe_±r
 = me->
buf„r
;

281  
me
;

282 
	}
}

	@Library/src/HTGuess.h

32 #i‚de‡
HTGUESS_H


33 
	#HTGUESS_H


	)

35 
	~"HTSåóm.h
"

36 
	~"HTF‹m©.h
"

38 
HTC⁄vîãr
 
HTGuess_√w
;

	@Library/src/HTHInit.c

12 
	~"wwwsys.h
"

13 
	~"WWWUtû.h
"

14 
	~"WWWC‹e.h
"

15 
	~"HTHInô.h
"

23 
PUBLIC
 
	$HTMLInô
 (
HTLi°
 * 
c
)

29 
	`HTC⁄vîsi⁄_add
(
c
,"ãxt/html", "www/¥e£¡", 
HTMLPª£¡
, 1.0, 0.0, 0.0);

30 
	`HTC⁄vîsi⁄_add
(
c
,"ãxt/∂aö", "www/¥e£¡", 
HTPœöPª£¡
, 1.0, 0.0, 0.0);

31 
	`HTC⁄vîsi⁄_add
(
c
,"ãxt/html", "ãxt/x-c", 
HTMLToC
, 0.5, 0.0, 0.0);

32 
	`HTC⁄vîsi⁄_add
(
c
,"ãxt/html", "ãxt/∂aö", 
HTMLToPœö
, 0.5, 0.0, 0.0);

33 
	`HTC⁄vîsi⁄_add
(
c
,"ãxt/html", "ãxt/œãx", 
HTMLToTeX
, 1.0, 0.0, 0.0);

34 
	}
}

	@Library/src/HTHInit.h

38 #i‚de‡
HTHINIT_H


39 
	#HTHINIT_H


	)

40 
	~"WWWLib.h
"

52 
	~"HTML.h
"

53 
	~"HTPœö.h
"

55 
	~"HTTeXGí.h
"

56 
	~"HTMLGí.h
"

58 
HTMLInô
 (
HTLi°
 * 
c⁄vîsi⁄s
);

	@Library/src/HTHash.c

12 
	~"wwwsys.h
"

13 
	~"HTUtûs.h
"

14 
	~"HTSåög.h
"

15 
	~"HTHash.h
"

25 
PUBLIC
 
HTHashèbÀ
 * 
	$HTHashèbÀ_√w
 (
size
)

27 
HTHashèbÀ
 *
√wHashèbÀ
;

28 
c
 = 
size
 > 0 ? sizê: 
HT_L_HASH_SIZE
;

29 i‡((
√wHashèbÀ
 = (
HTHashèbÀ
 *Ë
	`HT_CALLOC
(1,  (HTHashèbÀ))Ë=
NULL
)

30 
	`HT_OUTOFMEM
("HTHashtable_new");

32 if((
√wHashèbÀ
->
èbÀ
 = (**Ë
	`HT_CALLOC
(
c
,  (*))Ë=
NULL
)

33 
	`HT_OUTOFMEM
("HTHashtable_new");

35 
√wHashèbÀ
->
cou¡
 = 0;

36 
√wHashèbÀ
->
size
 = 
c
;

37  
√wHashèbÀ
;

38 
	}
}

40 
PUBLIC
 
BOOL
 
	$HTHashèbÀ_dñëe
 (
HTHashèbÀ
 *
me
)

42 i‡(
me
) {

43 
i
;

44 
i
 = 0; i< 
me
->
size
; i++) {

45 
HTLi°
 * 
l
 = (HTLi° *)
me
->
èbÀ
[
i
];

46 i‡(
l
) {

47 
HTLi°
 *
cur
 = 
l
;

48 
keynode
 *
kn
;

49 (
kn
 = (
keynode
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

50 
	`HT_FREE
(
kn
->
key
);

51 
	`HT_FREE
(
kn
);

53 
	`HTLi°_dñëe
(
l
);

56 
	`HT_FREE
(
me
->
èbÀ
);

57 
	`HT_FREE
(
me
);

58  
YES
;

60  
NO
;

61 
	}
}

63 
PRIVATE
 
	$hash_numbî
 (c⁄° *
key
, 
size
)

65 
hash
 = 0;

67 i‡(
key
) {

68 c⁄° * 
±r
 = 
key
;

69 ; *
±r
;Ötr++)

70 
hash
 = (Ë((hash*3 + (*(*)
±r
)Ë% 
size
);

72  
hash
;

73 
	}
}

81 
PUBLIC
 
BOOL
 
	$HTHashèbÀ_addObje˘
 (
HTHashèbÀ
 *
me
, c⁄° *
key
,

82 *
√wObje˘
)

84 if(
me
) {

85 
size
 = 
me
->size;

86 
i
 = 
	`hash_numbî
(
key
,
size
);

87 
HTLi°
 *
l
 = (HTLi° *)
me
->
èbÀ
[
i
];

88 
keynode
 *
kn
;

89 if(!
l
)

90 
l
 = 
me
->
èbÀ
[
i
] = 
	`HTLi°_√w
();

91 i‡((
kn
 = (
keynode
 *Ë
	`HT_CALLOC
(1,  (keynode))Ë=
NULL
)

92 
	`HT_OUTOFMEM
("HTHashtable_addObject");

93 
	`SåAŒocC›y
(
kn
->
key
,key);

94 
kn
->
obje˘
 = 
√wObje˘
;

95 
	`HTLi°_addObje˘
(
l
,
kn
);

96 
me
->
cou¡
++;

97  
YES
;

99  
NO
;

100 
	}
}

108 
PUBLIC
 
BOOL
 
	$HTHashèbÀ_ªmoveObje˘
 (
HTHashèbÀ
 *
me
, c⁄° *
key
)

110 if(
me
) {

111 
size
 = 
me
->size;

112 
i
 = 
	`hash_numbî
(
key
,
size
);

113 
HTLi°
 *
l
 = (HTLi° *)
me
->
èbÀ
[
i
];

114 if(
l
) {

115 
HTLi°
 *
cur
 = 
l
;

116 
keynode
 *
kn
;

117 (
kn
 = (
keynode
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

118 if(!
	`°rcmp
(
key
,
kn
->key)) {

119 
	`HTLi°_ªmoveObje˘
(
l
,
kn
);

120 
me
->
cou¡
--;

121  
YES
;

126  
NO
;

127 
	}
}

135 
PUBLIC
 *
	$HTHashèbÀ_obje˘
 (
HTHashèbÀ
 * 
me
, c⁄° *
key
)

137 if(
me
) {

138 
size
 = 
me
->size;

139 
i
 = 
	`hash_numbî
(
key
,
size
);

140 
HTLi°
 * 
l
 = (HTLi° *)
me
->
èbÀ
[
i
];

141 i‡(
l
) {

142 
HTLi°
 *
cur
 = 
l
;

143 
keynode
 *
kn
;

144 (
kn
 = (
keynode
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

145 if(!
	`°rcmp
(
key
,
kn
->key))

146  
kn
->
obje˘
;

150  
NULL
;

151 
	}
}

159 
PUBLIC
 
	$HTHashèbÀ_cou¡
 (
HTHashèbÀ
 *
me
)

161 if(
me
)

162  
me
->
cou¡
;

164 
	}
}

172 
PUBLIC
 
BOOL
 
HTHashèbÀ_wÆk
 (
HTHashèbÀ
 *
me
,

173 (*
wÆkFunc
)(
HTHashèbÀ
 *,*, *))

175 if(
me
) {

176 
i
, 
j
;

177 
i
 = 0; i< 
me
->
size
; i++) {

178 
HTLi°
 *
l
 = (HTLi° *)
me
->
èbÀ
[
i
];

179 if(
l
) {

180 
HTLi°
 *
cur
 = 
l
;

181 
keynode
 *
kn
, *
√xtkn
;

182 
kn
 = (
keynode
 *)
	`HTLi°_√xtObje˘
(
cur
); kn; k¿
√xtkn
) {

183 
j
 = 
	`wÆkFunc
(
me
, 
kn
->
key
, kn->
obje˘
);

184 if(
j
 == 0)

185  
YES
;

186 
√xtkn
 = (
keynode
 *)
	`HTLi°_√xtObje˘
(
cur
);

187 i‡(
j
 < 0) {

188 
	`HTLi°_ªmoveObje˘
(
l
, 
kn
);

189 
me
->
cou¡
--;

194  
YES
;

196  
NO
;

197 
	}
}

205 
PUBLIC
 
HTAºay
 * 
	$HTHashèbÀ_keys
 (
HTHashèbÀ
 *
me
)

207 if(
me
) {

208 
HTAºay
 *
keys
 = 
	`HTAºay_√w
(
me
->
cou¡
);

209 
i
;

211 
i
 = 0; i< 
me
->
size
; i++) {

212 
HTLi°
 * 
l
 = (HTLi° *)
me
->
èbÀ
[
i
];

213 i‡(
l
) {

214 
HTLi°
 *
cur
 = 
l
;

215 
keynode
 *
kn
;

216 (
kn
 = (
keynode
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

217 * 
nkey
 = 
NULL
;

218 
	`SåAŒocC›y
(
nkey
,
kn
->
key
);

219 
	`HTAºay_addObje˘
(
keys
,
nkey
);

223  
keys
;

225  
NULL
;

226 
	}
}

234 
PUBLIC
 
	$HTHashèbÀ_¥öt
 (
HTHashèbÀ
 *
me
)

236 
HTAºay
 *
keys
 = 
	`HTHashèbÀ_keys
(
me
);

237 
i
;

238 
	`HTPröt
("Prötög Hash TabÀ o‡sizê%d\n", 
	`HTAºay_size
(
keys
));

239 
i
 = 0; i< 
	`HTAºay_size
(
keys
); i++) {

240 
	`HTPröt
("Key %d %s\n",
i
,
	`HTAºay_d©a
(
keys
)[i]);

242 
i
 = 0; i< 
	`HTAºay_size
(
keys
); i++) {

243 
	`HT_FREE
(
	`HTAºay_d©a
(
keys
)[
i
]);

245 
	`HTAºay_dñëe
(
keys
);

246 
	}
}

	@Library/src/HTHash.h

19 #i‚de‡
HTHASH_H


20 
	#HTHASH_H


	)

22 
	~"HTLi°.h
"

24 
_HTHashèbÀ
 
	tHTHashèbÀ
;

26 
	s_HTHashèbÀ
 {

27 **
	mèbÀ
;

28 
	mcou¡
;

29 
	msize
;

32 
_keynode
 
	tkeynode
;

34 
	s_keynode
 {

35 *
	mkey
;

36 *
	mobje˘
;

47 
HTHashèbÀ
 * 
HTHashèbÀ_√w
 (
size
);

49 
BOOL
 
HTHashèbÀ_dñëe
 (
HTHashèbÀ
 *
me
);

57 
BOOL
 
HTHashèbÀ_addObje˘
 (
HTHashèbÀ
 *
me
, c⁄° *
key
, *
√wObje˘
);

65 
BOOL
 
HTHashèbÀ_ªmoveObje˘
 (
HTHashèbÀ
 *
me
, c⁄° *
key
);

73 * 
HTHashèbÀ_obje˘
 (
HTHashèbÀ
 * 
me
, c⁄° *
key
);

81 
HTHashèbÀ_cou¡
 (
HTHashèbÀ
 *
me
);

100 
BOOL
 
HTHashèbÀ_wÆk
 (
HTHashèbÀ
 *
me
, (*
wÆkFunc
)(HTHashtable *, *, *));

108 
HTAºay
 * 
	`HTHashèbÀ_keys
 (
HTHashèbÀ
 *
me
);

116 
	`HTHashèbÀ_¥öt
 (
HTHashèbÀ
 *
me
);

	@Library/src/HTHeader.c

13 
	~"wwwsys.h
"

14 
	~"HTUtûs.h
"

15 
	~"HTSåög.h
"

16 
	~"HTP¨£.h
"

17 
	~"HTSåög.h
"

18 
	~"HTReq.h
"

19 
	~"HTHódî.h
"

20 
	~"HTMIMPrs.h
"

22 
HTMIMEP¨£Së
 * 
	gP¨£Së
 = 
NULL
;

23 
PRIVATE
 
HTLi°
 * 
	gHTGíî©‹s
 = 
NULL
;

30 
PUBLIC
 
BOOL
 
	$HTGíî©‹_add
 (
HTLi°
 * 
gís
, 
HTPo°CÆlback
 * 
ˇŒback
)

32  
ˇŒback
 ? 
	`HTLi°_addObje˘
(
gís
, (*ËˇŒbackË: 
NO
;

33 
	}
}

38 
PUBLIC
 
BOOL
 
	$HTGíî©‹_dñëe
 (
HTLi°
 * 
gís
, 
HTPo°CÆlback
 * 
ˇŒback
)

40  
ˇŒback
 ? 
	`HTLi°_ªmoveObje˘
(
gís
, (*ËˇŒbackË: 
NO
;

41 
	}
}

46 
PUBLIC
 
BOOL
 
	$HTGíî©‹_dñëeAŒ
 (
HTLi°
 * 
gís
)

48  
	`HTLi°_dñëe
(
gís
);

49 
	}
}

58 
PUBLIC
 
	$HTHódî_£tMIMEP¨£Së
 (
HTMIMEP¨£Së
 * 
li°
)

60 
P¨£Së
 = 
li°
;

61 
	}
}

63 
PUBLIC
 
HTMIMEP¨£Së
 * 
	$HTHódî_MIMEP¨£Së
 ()

65  
P¨£Së
;

66 
	}
}

68 
PUBLIC
 
BOOL
 
	$HTHódî_addP¨£r
 (c⁄° * 
tokí
, 
BOOL
 
ˇ£_£nsôive
,

69 
HTP¨£rCÆlback
 * 
ˇŒback
)

71 i‡(!
P¨£Së
ËP¨£Së = 
	`HTMIMEP¨£Së_√w
(
MIME_HASH_SIZE
);

72  (
	`HTMIMEP¨£Së_add
(
P¨£Së
, 
tokí
, 
ˇ£_£nsôive
, 
ˇŒback
Ë!
NULL
);

73 
	}
}

75 
PUBLIC
 
BOOL
 
	$HTHódî_addRegexP¨£r
 (c⁄° * 
tokí
, 
BOOL
 
ˇ£_£nsôive
,

76 
HTP¨£rCÆlback
 * 
ˇŒback
)

78 i‡(!
P¨£Së
ËP¨£Së = 
	`HTMIMEP¨£Së_√w
(
MIME_HASH_SIZE
);

79  (
	`HTMIMEP¨£Së_addRegex
(
P¨£Së
, 
tokí
, 
ˇ£_£nsôive
, 
ˇŒback
Ë!
NULL
);

80 
	}
}

82 
PUBLIC
 
BOOL
 
	$HTHódî_dñëeP¨£r
 (c⁄° * 
tokí
)

84  
	`HTMIMEP¨£Së_dñëe
(
P¨£Së
, 
tokí
);

85 
	}
}

90 
PUBLIC
 
	$HTHódî_£tGíî©‹
 (
HTLi°
 * 
li°
)

92 
HTGíî©‹s
 = 
li°
;

93 
	}
}

95 
PUBLIC
 
HTLi°
 * 
	$HTHódî_gíî©‹
 ()

97  
HTGíî©‹s
;

98 
	}
}

100 
PUBLIC
 
BOOL
 
	$HTHódî_addGíî©‹
 (
HTPo°CÆlback
 * 
ˇŒback
)

102 i‡(!
HTGíî©‹s
ËHTGíî©‹†
	`HTLi°_√w
();

103  
	`HTGíî©‹_add
(
HTGíî©‹s
, 
ˇŒback
);

104 
	}
}

106 
PUBLIC
 
BOOL
 
	$HTHódî_dñëeGíî©‹
 (
HTPo°CÆlback
 * 
ˇŒback
)

108 i‡(!
HTGíî©‹s
Ë 
NO
;

109  
	`HTGíî©‹_dñëe
(
HTGíî©‹s
, 
ˇŒback
);

110 
	}
}

115 
PUBLIC
 
	$HTHódî_dñëeAŒ
 ()

117 
	`HTMIMEP¨£Së_dñëeAŒ
(
P¨£Së
);

118 i‡(
HTGíî©‹s
) {

119 
	`HTGíî©‹_dñëeAŒ
(
HTGíî©‹s
);

120 
HTGíî©‹s
 = 
NULL
;

122 
	}
}

	@Library/src/HTHeader.h

30 #i‚de‡
HTHEADER_H


31 
	#HTHEADER_H


	)

33 
	~"HTRe•⁄£.h
"

34 
	~"HTSåóm.h
"

44 
	tHTP¨£rCÆlback
 (
	tHTReque°
 * 
	tªque°
, 
	tHTRe•⁄£
 * 
	tª•⁄£
,

45 * 
	ttokí
, * 
	tvÆue
);

68 
BOOL
 
HTGíî©‹_add
 (
HTLi°
 * 
gís
, 
HTPo°CÆlback
 * 
ˇŒback
);

69 
BOOL
 
HTGíî©‹_dñëe
 (
HTLi°
 * 
gís
, 
HTPo°CÆlback
 * 
ˇŒback
);

70 
BOOL
 
HTGíî©‹_dñëeAŒ
 (
HTLi°
 * 
gís
);

85 
	#MIME_HASH_SIZE
 
HT_L_HASH_SIZE


	)

87 
HTHódî_£tMIMEP¨£Së
 (
HTMIMEP¨£Së
 * 
li°
);

88 
HTMIMEP¨£Së
 * 
HTHódî_MIMEP¨£Së
 ();

89 
BOOL
 
HTHódî_addP¨£r
 (c⁄° * 
tokí
, BOOL 
ˇ£_£nsôive
,

90 
HTP¨£rCÆlback
 * 
ˇŒback
);

91 
BOOL
 
HTHódî_addRegexP¨£r
 (c⁄° * 
tokí
, BOOL 
ˇ£_£nsôive
,

92 
HTP¨£rCÆlback
 * 
ˇŒback
);

93 
BOOL
 
HTHódî_dñëeP¨£r
 (c⁄° * 
tokí
);

101 
HTHódî_£tGíî©‹
 (
HTLi°
 * 
li°
);

102 
BOOL
 
HTHódî_addGíî©‹
 (
HTPo°CÆlback
 * 
ˇŒback
);

103 
BOOL
 
HTHódî_dñëeGíî©‹
 (
HTPo°CÆlback
 * 
ˇŒback
);

104 
HTLi°
 * 
HTHódî_gíî©‹
 ();

112 
HTHódî_dñëeAŒ
 ();

	@Library/src/HTHist.c

14 
	~"wwwsys.h
"

15 
	~"HTUtûs.h
"

16 
	~"HTAnch‹.h
"

17 
	~"HTHi°.h
"

19 
	s_HTHi°‹y
 {

20 
HTLi°
 * 
	mÆi°
;

21 
	mpos
;

33 
PUBLIC
 
HTHi°‹y
 *
	$HTHi°‹y_√w
 ()

35 
HTHi°‹y
 *
ñemít
;

36 i‡((
ñemít
 = (
HTHi°‹y
 *Ë
	`HT_CALLOC
(1, ((HTHi°‹y)))Ë=
NULL
)

37 
	`HT_OUTOFMEM
("HTHistory_new");

38 
ñemít
->
Æi°
 = 
	`HTLi°_√w
();

39  
ñemít
;

40 
	}
}

47 
PUBLIC
 
BOOL
 
	$HTHi°‹y_dñëe
 (
HTHi°‹y
 * 
hi°
)

49 i‡(
hi°
) {

50 
	`HTLi°_dñëe
(
hi°
->
Æi°
);

51 
	`HT_FREE
(
hi°
);

52  
YES
;

54  
NO
;

55 
	}
}

63 
PUBLIC
 
BOOL
 
	$HTHi°‹y_ªc‹d
 (
HTHi°‹y
 * 
hi°
, 
HTAnch‹
 * 
cur
)

65  (
hi°
 && 
cur
 && 
	`HTLi°_addObje˘
(hi°->
Æi°
, curË&& hi°->
pos
++);

66 
	}
}

76 
PUBLIC
 
BOOL
 
	$HTHi°‹y_ª∂a˚
 (
HTHi°‹y
 * 
hi°
, 
HTAnch‹
 * 
cur
)

78 i‡(
hi°
 && 
cur
) {

79 
	`HTHi°‹y_ªmoveFrom
(
hi°
, hi°->
pos
);

80 
	`HTHi°‹y_ªc‹d
(
hi°
, 
cur
);

82  
NO
;

83 
	}
}

90 
PUBLIC
 
BOOL
 
	$HTHi°‹y_ªmoveLa°
 (
HTHi°‹y
 * 
hi°
)

92  (
hi°
 && 
	`HTLi°_ªmoveLa°Obje˘
(hi°->
Æi°
Ë&& hi°->
pos
--);

93 
	}
}

101 
PUBLIC
 
BOOL
 
	$HTHi°‹y_ªmoveFrom
 (
HTHi°‹y
 * 
hi°
, 
pos
)

103 i‡(
hi°
 && 
pos
>=0) {

104 
˙t
 = 
	`HTLi°_cou¡
(
hi°
->
Æi°
Ë- 
pos
;

105 
˙t
-->0 && 
	`HTLi°_ªmoveLa°Obje˘
(
hi°
->
Æi°
));

106 i‡(
hi°
->
pos
 >Öos)

107 
hi°
->
pos
 =Öos;

108  
YES
;

110  
NO
;

111 
	}
}

117 
PUBLIC
 
	$HTHi°‹y_cou¡
 (
HTHi°‹y
 * 
hi°
)

119  (
hi°
 ? 
	`HTLi°_cou¡
(hi°->
Æi°
) : -1);

120 
	}
}

126 
PUBLIC
 
	$HTHi°‹y_posôi⁄
 (
HTHi°‹y
 * 
hi°
)

128  (
hi°
 ? hi°->
pos
 : -1);

129 
	}
}

141 
PUBLIC
 
HTAnch‹
 * 
	$HTHi°‹y_ªˇŒ
 (
HTHi°‹y
 * 
hi°
, 
pos
)

143 
HTAnch‹
 *
cur
 = 
NULL
;

144 i‡(
hi°
 && 
pos
 > 0) {

145 
Àn
 = 
	`HTLi°_cou¡
(
hi°
->
Æi°
);

146 i‡((
cur
 = (
HTAnch‹
 *Ë
	`HTLi°_obje˘At
(
hi°
->
Æi°
, 
Àn
-
pos
))) {

147 i‡(
cur
 !
	`HTLi°_œ°Obje˘
 (
hi°
->
Æi°
)) {

148 
	`HTHi°‹y_ªc‹d
(
hi°
, 
cur
);

150 
hi°
->
pos
 =Öos;

153  
cur
;

154 
	}
}

162 
PUBLIC
 
HTAnch‹
 * 
	$HTHi°‹y_föd
 (
HTHi°‹y
 * 
hi°
, 
pos
)

164 
HTAnch‹
 *
cur
 = 
NULL
;

165 i‡(
hi°
 && 
pos
 > 0) {

166 i‡((
cur
 = (
HTAnch‹
 *)

167 (
	`HTLi°_obje˘At
(
hi°
->
Æi°
, 
	`HTLi°_cou¡
(hi°->Æi°)-
pos
))))

168 
hi°
->
pos
 =Öos;

170  
cur
;

171 
	}
}

178 
PUBLIC
 
HTAnch‹
 * 
	$HTHi°‹y_li°
 (
HTHi°‹y
 * 
hi°
, 
pos
)

180  (
hi°
 ? (
HTAnch‹
 *)

181 (
	`HTLi°_obje˘At
(
hi°
->
Æi°
, 
	`HTLi°_cou¡
(hi°->Æi°)-
pos
)) :

182 
NULL
);

183 
	}
}

189 
PUBLIC
 
BOOL
 
	$HTHi°‹y_ˇnBackåack
 (
HTHi°‹y
 * 
hi°
)

191  ((
hi°
 && hi°->
pos
 > 1Ë? 
YES
 : 
NO
);

192 
	}
}

202 
PUBLIC
 
HTAnch‹
 * 
	$HTHi°‹y_backåack
 (
HTHi°‹y
 * 
hi°
)

204 i‡(
	`HTHi°‹y_ˇnBackåack
(
hi°
)) {

205 
	`HTHi°‹y_ªmoveLa°
(
hi°
);

206  (
HTAnch‹
 *Ë
	`HTLi°_œ°Obje˘
(
hi°
->
Æi°
);

208  
NULL
;

209 
	}
}

219 
PUBLIC
 
HTAnch‹
 * 
	$HTHi°‹y_back
 (
HTHi°‹y
 * 
hi°
)

221 i‡(
	`HTHi°‹y_ˇnBackåack
(
hi°
)) {

222 
pos
 = 
	`HTLi°_cou¡
(
hi°
->
Æi°
) - (--hist->pos);

223  ((
HTAnch‹
 *Ë
	`HTLi°_obje˘At
(
hi°
->
Æi°
, 
pos
));

225  
NULL
;

226 
	}
}

232 
PUBLIC
 
BOOL
 
	$HTHi°‹y_ˇnF‹w¨d
 (
HTHi°‹y
 * 
hi°
)

234  ((
hi°
 && hi°->
pos
 < 
	`HTLi°_cou¡
(hi°->
Æi°
)Ë? 
YES
 : 
NO
);

235 
	}
}

242 
PUBLIC
 
HTAnch‹
 * 
	$HTHi°‹y_f‹w¨d
 (
HTHi°‹y
 * 
hi°
)

244 i‡(
	`HTHi°‹y_ˇnF‹w¨d
(
hi°
)) {

245 
pos
 = 
	`HTLi°_cou¡
(
hi°
->
Æi°
) - (++hist->pos);

246  ((
HTAnch‹
 *Ë
	`HTLi°_obje˘At
(
hi°
->
Æi°
, 
pos
));

248  
NULL
;

249 
	}
}

	@Library/src/HTHist.h

34 #i‚de‡
HTHISTORY_H


35 
	#HTHISTORY_H


	)

37 
	~"HTAnch‹.h
"

50 
_HTHi°‹y
 
	tHTHi°‹y
;

52 
HTHi°‹y
 *
HTHi°‹y_√w
 ();

53 
BOOL
 
HTHi°‹y_dñëe
 (
HTHi°‹y
 *
ﬁd
);

66 
BOOL
 
HTHi°‹y_ªc‹d
 (
HTHi°‹y
 *
hi°
, 
HTAnch‹
 *
cur
);

82 
BOOL
 
HTHi°‹y_ª∂a˚
 (
HTHi°‹y
 *
hi°
, 
HTAnch‹
 *
cur
);

92 
BOOL
 
HTHi°‹y_ªmoveLa°
 (
HTHi°‹y
 *
hi°
);

103 
BOOL
 
HTHi°‹y_ªmoveFrom
 (
HTHi°‹y
 *
hi°
, 
pos
);

113 
HTHi°‹y_cou¡
 (
HTHi°‹y
 *
hi°
);

123 
HTHi°‹y_posôi⁄
 (
HTHi°‹y
 *
hi°
);

136 
HTAnch‹
 * 
HTHi°‹y_ªˇŒ
 (
HTHi°‹y
 *
hi°
, 
pos
);

148 
HTAnch‹
 * 
HTHi°‹y_föd
 (
HTHi°‹y
 *
hi°
, 
pos
);

159 
HTAnch‹
 * 
HTHi°‹y_li°
 (
HTHi°‹y
 *
hi°
, 
pos
);

171 
BOOL
 
HTHi°‹y_ˇnBackåack
 (
HTHi°‹y
 *
hi°
);

184 
HTAnch‹
 * 
HTHi°‹y_backåack
 (
HTHi°‹y
 *
hi°
);

197 
HTAnch‹
 * 
HTHi°‹y_back
 (
HTHi°‹y
 *
hi°
);

207 
BOOL
 
HTHi°‹y_ˇnF‹w¨d
 (
HTHi°‹y
 *
hi°
);

217 
HTAnch‹
 * 
HTHi°‹y_f‹w¨d
 (
HTHi°‹y
 *
hi°
);

	@Library/src/HTHome.c

29 
	~"WWWLib.h
"

30 
	~"HTHome.h
"

44 
PUBLIC
 * 
	$HTGëCuºítDúe˘‹yURL
 ()

46 
wd
[
HT_MAX_PATH
+2];

48 #ifde‡
HAVE_GETCWD


49 * 
ªsu…
 = (*Ë
	`gëcwd
(
wd
, (wd));

51 #ifde‡
HAVE_GETWD


52 * 
ªsu…
 = (*Ë
	`gëwd
(
wd
);

55 * 
ªsu…
 = 
NULL
;

58 i‡(
ªsu…
) {

59 *(
wd
+
HT_MAX_PATH
) = '\0';

60 i‡(*(
wd
+
	`°æí
(wd)-1Ë!'/'Ë
	`°rˇt
(wd, "/");

62  
ªsu…
 ? 
	`HTLoˇlToWWW
‘esu…, 
NULL
) : NULL;

63 
	}
}

82 
PUBLIC
 
HTP¨ítAnch‹
 * 
	$HTHomeAnch‹
 ()

84 * 
my_home_documít
 = 
NULL
;

85 * 
home
 = (*Ë
	`gëív
(
LOGICAL_DEFAULT
);

86 * 
ªf
;

87 
HTP¨ítAnch‹
 * 
™ch‹
;

90 i‡(
home
) {

91 
	`SåAŒocC›y
(
my_home_documít
, 
home
);

92 } i‡(
	`HTLib_£cuª
()) {

93 
FILE
 * 
Â
 = 
	`f›í
(
REMOTE_POINTER
, "r");

94 * 
°©us
;

95 i‡(
Â
) {

96 i‡((
my_home_documít
 = (*Ë
	`HT_MALLOC
(
HT_MAX_PATH
)Ë=
NULL
)

97 
	`HT_OUTOFMEM
("my_home_document ");

98 
°©us
 = 
	`fgës
(
my_home_documít
, 
HT_MAX_PATH
, 
Â
);

99 i‡(!
°©us
) {

100 
	`HT_FREE
(
my_home_documít
);

101 
my_home_documít
 = 
NULL
;

103 
	`f˛o£
(
Â
);

105 i‡(!
my_home_documít
Ë
	`SåAŒocC›y
(my_home_documít, 
REMOTE_ADDRESS
);

108 i‡(!
my_home_documít
) {

109 
FILE
 * 
Â
 = 
NULL
;

110 * 
home
 = (*Ë
	`gëív
("HOME");

111 i‡(
home
) {

112 i‡((
my_home_documít
 = (*Ë
	`HT_MALLOC
(
	`°æí
(
home
)+1+ såÀn(
PERSONAL_DEFAULT
)+1)Ë=
NULL
)

113 
	`HT_OUTOFMEM
("HTLocalName");

114 
	`•rötf
(
my_home_documít
, "%s/%s", 
home
, 
PERSONAL_DEFAULT
);

115 
Â
 = 
	`f›í
(
my_home_documít
, "r");

118 i‡(!
Â
) {

119 
	`SåAŒocC›y
(
my_home_documít
, 
LOCAL_DEFAULT_FILE
);

120 
Â
 = 
	`f›í
(
my_home_documít
, "r");

122 i‡(
Â
) {

123 
	`f˛o£
(
Â
);

125 
	`HTTRACE
(
APP_TRACE
, "HomêAnch‹. Nÿloˇ»homêdocumíàö ~/%†‹ %s\n" 
_


126 
PERSONAL_DEFAULT
 
_
 
LOCAL_DEFAULT_FILE
);

127 
	`HT_FREE
(
my_home_documít
);

128 
my_home_documít
 = 
NULL
;

132 
ªf
 = 
	`HTP¨£
(
my_home_documít
 ? my_home_document :

133 
	`HTLib_£cuª
(Ë? 
REMOTE_ADDRESS
 : 
LAST_RESORT
, "file:",

134 
PARSE_ACCESS
|
PARSE_HOST
|
PARSE_PATH
|
PARSE_PUNCTUATION
);

135 i‡(
my_home_documít
) {

136 
	`HTTRACE
(
APP_TRACE
, "HomêAnch‹. `%s\' u£d f‹ cu°om homê∑gêas\n`%s\'\n" 
_


137 
my_home_documít
 
_
 
ªf
);

138 
	`HT_FREE
(
my_home_documít
);

140 
™ch‹
 = (
HTP¨ítAnch‹
*Ë
	`HTAnch‹_födAddªss
(
ªf
);

141 
	`HT_FREE
(
ªf
);

142  
™ch‹
;

143 
	}
}

148 
PUBLIC
 
HTP¨ítAnch‹
 * 
	$HTTmpAnch‹
 (
HTU£rProfûe
 * 
up
)

150 
off£t
 = 0;

151 
HTP¨ítAnch‹
 * 
hça
 = 
NULL
;

152 
time_t
 
t
 = 
	`time
(
NULL
);

153 * 
tmpfûe
 = 
	`HTGëTmpFûeName
(
	`HTU£rProfûe_tmp
(
up
));

154 * 
tmpuæ
 = 
	`HTP¨£
(
tmpfûe
, "fûe:", 
PARSE_ALL
);

155 i‡(
tmpfûe
 && 
tmpuæ
 && 
t
 >= 0) {

156 * 
ªsu…
;

157 i‡(!(
ªsu…
 = (*Ë
	`HT_MALLOC
(
	`°æí
(
tmpuæ
)+20)))

158 
	`HT_OUTOFMEM
("HTTmpAnchor");

159 #ifde‡
HAVE_LONG_TIME_T


160 
	`•rötf
(
ªsu…
, "%s.%ld.%d", 
tmpuæ
, 
t
, 
off£t
++);

162 
	`•rötf
(
ªsu…
, "%s.%d.%d", 
tmpuæ
, 
t
, 
off£t
++);

164 
	`HTTRACE
(
APP_TRACE
, "Tm∞Anch‹.. WôhÜoˇti⁄ `%s\'\n" 
_
 
ªsu…
);

165 
hça
 = 
	`HTAnch‹_∑ª¡
(
	`HTAnch‹_födAddªss
(
ªsu…
));

166 
	`HT_FREE
(
ªsu…
);

168 
	`HT_FREE
(
tmpfûe
);

169 
	`HT_FREE
(
tmpuæ
);

170  
hça
;

171 
	}
}

179 
PUBLIC
 
BOOL
 
	$HTP¨£F‹mI≈ut
 (
HTAssocLi°
 * 
li°
, c⁄° * 
°r
)

181 i‡(
li°
 && 
°r
) {

182 * 
me
 = 
NULL
;

183 * 
«me
 = 
NULL
;

184 * 
vÆue
 = 
NULL
;

185 
	`SåAŒocC›y
(
me
, 
°r
);

186 
vÆue
 = 
	`°rchr
(
me
, '=');

187 i‡(
vÆue
)

188 *
vÆue
++ = '\0';

190 
vÆue
 = "";

191 
«me
 = 
	`HTSåù
(
me
);

194 i‡(
«me
) {

195 * 
esˇ≥d_«me
 = 
	`HTEsˇ≥
(
«me
, 
URL_XALPHAS
);

196 * 
esˇ≥d_vÆue
 = 
	`HTEsˇ≥
(
vÆue
, 
URL_XALPHAS
);

197 
	`HTTRACE
(
APP_TRACE
, "F‹m d©a... AddögÇamê`%s\' wôh vÆuê`%s\'Åÿ%p\n" 
_


198 
esˇ≥d_«me
 
_
 
esˇ≥d_vÆue
 _ 
li°
);

199 
	`HTAssocLi°_addObje˘
(
li°
, 
esˇ≥d_«me
, 
esˇ≥d_vÆue
);

200 
	`HT_FREE
(
esˇ≥d_«me
);

201 
	`HT_FREE
(
esˇ≥d_vÆue
);

203 
	`HT_FREE
(
me
);

204  
YES
;

206  
NO
;

207 
	}
}

215 
PUBLIC
 
	$HTSëTø˚MesßgeMask
 (c⁄° * 
sh‹äames
)

217 #i‡
	`deföed
(
HTDEBUG
Ë&& deföed(
WWWTRACE
)

218 
WWWTRACE
 = 0;

219 i‡(
sh‹äames
 && *shortnames) {

220 * 
±r
 = (*Ë
sh‹äames
;

221 ; *
±r
;Ötr++) {

222 *
±r
) {

223 'a': 
WWWTRACE
 |
SHOW_ANCHOR_TRACE
; ;

224 'b': 
WWWTRACE
 |
SHOW_BIND_TRACE
; ;

225 'c': 
WWWTRACE
 |
SHOW_CACHE_TRACE
; ;

226 'e': 
WWWTRACE
 |
SHOW_MUX_TRACE
; ;

227 'f': 
WWWTRACE
 |
SHOW_UTIL_TRACE
; ;

228 'g': 
WWWTRACE
 |
SHOW_SGML_TRACE
; ;

229 'h': 
WWWTRACE
 |
SHOW_AUTH_TRACE
; ;

230 'i': 
WWWTRACE
 |
SHOW_PICS_TRACE
; ;

231 'l': 
WWWTRACE
 |
SHOW_APP_TRACE
; ;

232 'm': 
WWWTRACE
 |
SHOW_MEM_TRACE
; ;

233 'o': 
WWWTRACE
 |
SHOW_CORE_TRACE
; ;

234 'p': 
WWWTRACE
 |
SHOW_PROTOCOL_TRACE
; ;

235 'q': 
WWWTRACE
 |
SHOW_SQL_TRACE
; ;

236 's': 
WWWTRACE
 |
SHOW_STREAM_TRACE
; ;

237 't': 
WWWTRACE
 |
SHOW_THREAD_TRACE
; ;

238 'u': 
WWWTRACE
 |
SHOW_URI_TRACE
; ;

239 'x': 
WWWTRACE
 |
SHOW_XML_TRACE
; ;

240 '*': 
WWWTRACE
 |
SHOW_ALL_TRACE
; ;

242 i‡(
WWWTRACE
Ë
	`HTTRACE
(
APP_TRACE
, "Trace....... Badárgument\n");

245 i‡(!
WWWTRACE
ËWWWTRACE = 
SHOW_ALL_TRACE
;

247 
WWWTRACE
 = 
SHOW_ALL_TRACE
;

249  
WWWTRACE
;

253 
	}
}

	@Library/src/HTHome.h

30 #i‚de‡
HTHOME_H


31 
	#HTHOME_H


	)

32 
	~"WWWLib.h
"

43 
	#LOGICAL_DEFAULT
 "WWW_HOME"

	)

45 #i‚de‡
PERSONAL_DEFAULT


46 
	#PERSONAL_DEFAULT
 "WWW/deÁu….html"

	)

50 #i‚de‡
LAST_RESORT


51 
	#LAST_RESORT
 "hâp://www.w3.‹g/"

	)

65 #i‚de‡
REMOTE_POINTER


66 
	#REMOTE_POINTER
 "/ëc/www-ªmŸe.uæ"

	)

70 #i‚de‡
REMOTE_ADDRESS


71 
	#REMOTE_ADDRESS
 "hâp://www.w3.‹g/"

	)

74 #i‚de‡
LOCAL_DEFAULT_FILE


75 
	#LOCAL_DEFAULT_FILE
 "/u§/loˇl/lib/WWW/deÁu….html"

	)

89 
HTP¨ítAnch‹
 * 
HTHomeAnch‹
 ();

106 
HTP¨ítAnch‹
 * 
HTTmpAnch‹
 (
HTU£rProfûe
 * 
up
);

120 
	#HTFödRñ©edName
 
HTGëCuºítDúe˘‹yURL


	)

121 * 
HTGëCuºítDúe˘‹yURL
 ();

138 
BOOL
 
HTP¨£F‹mI≈ut
 (
HTAssocLi°
 * 
li°
, c⁄° * 
°r
);

222 
HTSëTø˚MesßgeMask
 (c⁄° * 
sh‹äames
);

	@Library/src/HTHost.c

16 
	~"wwwsys.h
"

17 
	~"WWWUtû.h
"

18 
	~"HTP¨£.h
"

19 
	~"HTAÀπ.h
"

20 
	~"HTEº‹.h
"

21 
	~"HTNëM™.h
"

22 
	~"HTTøns.h
"

23 
	~"HTTPUtû.h
"

24 
	~"HTTCP.h
"

25 
	~"HTHo°.h
"

26 
	~"HTH°M™.h
"

28 
	#HOST_OBJECT_TTL
 43200L

	)

30 
	#TCP_IDLE_PASSIVE
 120L

	)

31 
	#TCP_IDLE_ACTIVE
 60000L

	)

33 
	#MAX_PIPES
 50

	)

34 
	#MAX_HOST_RECOVER
 1

	)

35 
	#DEFAULT_DELAY
 30

	)

37 
	s_HTI≈utSåóm
 {

38 c⁄° 
HTI≈utSåómCœss
 * 
	miß
;

41 
PRIVATE
 
Ho°Evít
(
SOCKET
 
soc
, * 
pVoid
, 
HTEvítTy≥
 
ty≥
);

44 
PRIVATE
 
time_t
 
	gHo°Timeout
 = 
HOST_OBJECT_TTL
;

45 
PRIVATE
 
time_t
 
	gHTPassiveTimeout
 = 
TCP_IDLE_PASSIVE
;

46 
PRIVATE
 
ms_t
 
	gHTA˘iveTimeout
 = 
TCP_IDLE_ACTIVE
;

48 
PRIVATE
 
HTLi°
 ** 
	gHo°TabÀ
 = 
NULL
;

49 
PRIVATE
 
HTLi°
 * 
	gPídHo°
 = 
NULL
;

53 
PRIVATE
 
HTHo°_A˘iv©eReque°CÆlback
 * 
	gA˘iv©eReqCBF
 = 
NULL
;

54 
PRIVATE
 
HTHo°_A˘iv©eReque°
 (
HTNë
 *
√t
);

55 
PRIVATE
 
BOOL
 
	gDoPídögReqLaunch
 = 
YES
;

58 
PRIVATE
 
	gEvítTimeout
 = -1;

60 
PRIVATE
 
ms_t
 
	gWrôeDñay
 = 
DEFAULT_DELAY
;

62 
PRIVATE
 
	gMaxPùñöedReque°s
 = 
MAX_PIPES
;

66 
PRIVATE
 
	$‰ì_obje˘
 (
HTHo°
 * 
me
)

68 i‡(
me
) {

69 
i
;

70 
	`HT_FREE
(
me
->
ho°«me
);

71 
	`HT_FREE
(
me
->
ty≥
);

72 
	`HT_FREE
(
me
->
£rvî
);

73 
	`HT_FREE
(
me
->
u£r_agít
);

74 
	`HT_FREE
(
me
->
ønge_unôs
);

77 i‡(
me
->
ch™√l
) {

78 
	`HTCh™√l_dñëe
(
me
->
ch™√l
, 
HT_OK
);

79 
me
->
ch™√l
 = 
NULL
;

83 
i
 = 0; i < 
HTEvít_TYPES
; i++)

84 
	`HTEvít_dñëe
(
me
->
evíts
[
i
]);

87 i‡(
me
->
timî
Ë
	`HTTimî_dñëe
(me->timer);

90 
	`HTLi°_dñëe
(
me
->
pùñöe
);

91 
	`HTLi°_dñëe
(
me
->
≥ndög
);

92 
	`HT_FREE
(
me
);

94 
	}
}

96 
PRIVATE
 
BOOL
 
	$dñëe_obje˘
 (
HTLi°
 * 
li°
, 
HTHo°
 * 
me
)

98 
	`HTTRACE
(
CORE_TRACE
, "Ho° info... obje˘ %∞‰omÜi° %p\n" 
_
 
me
 _ 
li°
);

99 
	`HTLi°_ªmoveObje˘
(
li°
, (*Ë
me
);

100 
	`‰ì_obje˘
(
me
);

101  
YES
;

102 
	}
}

104 
PRIVATE
 
BOOL
 
	$isLa°InPùe
 (
HTHo°
 * 
ho°
, 
HTNë
 * 
√t
)

106  
	`HTLi°_œ°Obje˘
(
ho°
->
pùñöe
Ë=
√t
;

107 
	}
}

109 
PRIVATE
 
BOOL
 
	$kûlPùñöe
 (
HTHo°
 * 
ho°
, 
HTEvítTy≥
 
ty≥
)

111 i‡(
ho°
) {

112 
pùed
 = 
	`HTLi°_cou¡
(
ho°
->
pùñöe
);

113 
≥ndög
 = 
	`HTLi°_cou¡
(
ho°
->pending);

114 
˙t
;

116 
	`HTTRACE
(
CORE_TRACE
, "Ho° kûl... Pùñöêduêtÿ%†evít\n" 
_
 
	`HTEvít_ty≥2°r
(
ty≥
));

119 
˙t
=0; c¡<
≥ndög
; cnt++) {

120 
HTNë
 * 
√t
 = 
	`HTLi°_ªmoveLa°Obje˘
(
ho°
->
≥ndög
);

121 i‡(
√t
) {

122 
	`HTTRACE
(
CORE_TRACE
, "Ho° kûl... Tîmö©ögÇë obje˘ %∞‰omÖídög queue\n" 
_
 
√t
);

123 
√t
->
ªgi°îedF‹
 = 0;

124 (*
√t
->
evít
.
cbf
)(
	`HTCh™√l_sockë
(
ho°
->
ch™√l
),Çë->evít.
∑øm
, 
ty≥
);

125 i‡(
ho°
->
lock
 =
√t
Ëho°->lock = 
NULL
;

130 i‡(
pùed
 >= 1) {

135 
˙t
=0; c¡<
pùed
; cnt++) {

136 
HTNë
 * 
√t
 = 
	`HTLi°_fú°Obje˘
(
ho°
->
pùñöe
);

137 i‡(
√t
) {

138 
	`HTTRACE
(
CORE_TRACE
, "Ho° kûl... Tîmö©ögÇë obje˘ %∞‰omÖùêlöe\n" 
_
 
√t
);

139 
√t
->
ªgi°îedF‹
 = 0;

140 (*
√t
->
evít
.
cbf
)(
	`HTCh™√l_sockë
(
ho°
->
ch™√l
),Çë->evít.
∑øm
, 
ty≥
);

144  
YES
;

146  
NO
;

147 
	}
}

153 
PRIVATE
 
	$IdÀTimeoutEvít
 (
HTTimî
 * 
timî
, * 
∑øm
, 
HTEvítTy≥
 
ty≥
)

155 
HTHo°
 * 
ho°
 = (HTHo° *Ë
∑øm
;

156 
SOCKET
 
sockfd
 = 
	`HTCh™√l_sockë
(
ho°
->
ch™√l
);

158 
	`HTTimî_dñëe
(
timî
);

159 
ho°
->
timî
 = 
NULL
;

161  
	`Ho°Evít
 (
sockfd
, 
ho°
, 
HTEvít_CLOSE
);

162 
	}
}

170 
PRIVATE
 
	$Ho°Evít
 (
SOCKET
 
soc
, * 
pVoid
, 
HTEvítTy≥
 
ty≥
)

172 
HTHo°
 * 
ho°
 = (HTHo° *)
pVoid
;

174 i‡(
ty≥
 =
HTEvít_READ
 ||Åy≥ =
HTEvít_CLOSE
 ||Åy≥ =
HTEvít_ACCEPT
) {

175 
HTNë
 * 
èrgëNë
;

179 
ªt
;

185 i‡(
	`HTCh™√l_sockë
(
ho°
->
ch™√l
Ë!
soc
 && 
ty≥
 !
HTEvít_ACCEPT
 && !ho°->
li°íög
) {

186 
	`HTTRACE
(
CORE_TRACE
, "Ho° Evít.. wûd sockë %dÅy≥ = %†ªÆ sockë i†%d\n" 
_
 
soc
 _

187 
ty≥
 =
HTEvít_CLOSE
 ? "Evít_Clo£" : "Evít_Ród" 
_


188 
	`HTCh™√l_sockë
(
ho°
->
ch™√l
));

189  
HT_OK
;

192 
èrgëNë
 = (
HTNë
 *)
	`HTLi°_fú°Obje˘
(
ho°
->
pùñöe
);

193 i‡(
èrgëNë
) {

194 
	`HTTRACE
(
CORE_TRACE
, "Ho° Evít.. READÖas£dÅÿ`%s\'\n" 
_


195 
	`HTAnch‹_physiˇl
(
	`HTReque°_™ch‹
(
	`HTNë_ªque°
(
èrgëNë
))));

196 i‡((
ªt
 = (*
èrgëNë
->
evít
.
cbf
)(
	`HTCh™√l_sockë
(
ho°
->
ch™√l
),

197 
èrgëNë
->
evít
.
∑øm
, 
ty≥
)Ë!
HT_OK
)

198  
ªt
;

200 i‡(
èrgëNë
 =
NULL
 && 
ho°
->
ªmaöögRód
 > 0) {

201 
	`HTTRACE
(
CORE_TRACE
, "Ho°Evít... Eº‹: %d byã†À·ÅÿªadándÇowhîêtÿpuàthem\n" 
_


202 
ho°
->
ªmaöögRód
);

203 
ho°
->
ªmaöögRód
 = 0;

209 } 
ho°
->
ªmaöögRód
 > 0);

212 i‡(
èrgëNë
)

213  
HT_OK
;

216 
	`HTTRACE
(
CORE_TRACE
, "Ho° Evít.. ho° %∞`%s\' clo£d c⁄√˘i⁄.\n" 
_


217 
ho°
 
_
 ho°->
ho°«me
);

221 
buf
[256];

222 
ªt
;

223 
	`mem£t
(
buf
, '\0', (buf));

224 i‡(
	`HTCh™√l_sockë
(
ho°
->
ch™√l
Ë!
INVSOC
) {

225 (
ªt
 = 
	`NETREAD
(
	`HTCh™√l_sockë
(
ho°
->
ch™√l
), 
buf
, (buf)-1)) > 0) {

226 
	`HTTRACE
(
CORE_TRACE
, "Ho° Evít.. Ho° %∞`%s\' had %dÉxå™eou†byãs: `%s\'\n" 
_


227 
ho°
 
_
 ho°->
ho°«me
 _ 
ªt
 _ 
buf
);

228 
	`mem£t
(
buf
, '\0', (buf));

232 
	`HTHo°_˛órCh™√l
(
ho°
, 
HT_OK
);

233  
HT_OK
;

235 } i‡(
ty≥
 =
HTEvít_WRITE
 ||Åy≥ =
HTEvít_CONNECT
) {

236 
HTNë
 * 
èrgëNë
 = (HTNë *)
	`HTLi°_œ°Obje˘
(
ho°
->
pùñöe
);

237 i‡(
èrgëNë
) {

238 
	`HTTRACE
(
CORE_TRACE
, "Ho° Evít.. WRITEÖas£dÅÿ`%s\'\n" 
_


239 
	`HTAnch‹_physiˇl
(
	`HTReque°_™ch‹
(
	`HTNë_ªque°
(
èrgëNë
))));

240  (*
èrgëNë
->
evít
.
cbf
)(
	`HTCh™√l_sockë
(
ho°
->
ch™√l
),Å¨gëNë->evít.
∑øm
, 
ty≥
);

242 
	`HTTRACE
(
CORE_TRACE
, "Ho° EvíàHo° %∞(`%s\'Ëdi•©ched wôhÉvíà%†buàd€¢'àhavê®èrgë - %dÑeque°†made, %dÑeque°†öÖùe, %dÖídög\n" 
_


243 
ho°
 
_


244 
ho°
 ? ho°->
ho°«me
 : "<nuŒ>" 
_


245 
	`HTEvít_ty≥2°r
(
ty≥
Ë
_


246 
ho°
 ? ho°->
ªqsMade
 : -1 
_


247 
	`HTLi°_cou¡
(
ho°
->
pùñöe
Ë
_


248 
	`HTLi°_cou¡
(
ho°
->
≥ndög
));

250 
	`HTDEBUGBREAK
("Ho° Evít.. Ho° %∞(`%s\'Ëdi•©ched wôhÉvíà%d\n" 
_


251 
ho°
 
_
 ho° ? ho°->
ho°«me
 : "<nuŒ>" _ 
ty≥
);

252  
HT_ERROR
;

254  
HT_OK
;

256 } i‡(
ty≥
 =
HTEvít_TIMEOUT
) {

257 
	`kûlPùñöe
(
ho°
, 
HTEvít_TIMEOUT
);

259 
	`HTTRACE
(
CORE_TRACE
, "D⁄'àknow howÅÿh™dÀ OOB d©®‰om `%s\'?\n" 
_


260 
ho°
->
ho°«me
);

262  
HT_OK
;

263 
	}
}

276 
PUBLIC
 
HTHo°
 * 
	$HTHo°_√w
 (* 
ho°
, 
u_sh‹t
 
u_p‹t
)

278 
HTLi°
 * 
li°
 = 
NULL
;

279 
HTHo°
 * 
¥es
 = 
NULL
;

280 
hash
 = 0;

281 i‡(!
ho°
) {

282 
	`HTTRACE
(
CORE_TRACE
, "Host info... Badárgument\n");

283  
NULL
;

288 *
±r
;

289 
±r
=
ho°
; *ptr;Ötr++)

290 
hash
 = (Ë((hash * 3 + (*(*Ë
±r
)Ë% 
HOST_HASH_SIZE
);

291 i‡(!
Ho°TabÀ
) {

292 i‡((
Ho°TabÀ
 = (
HTLi°
 **Ë
	`HT_CALLOC
(
HOST_HASH_SIZE
,

293 (
HTLi°
 *))Ë=
NULL
)

294 
	`HT_OUTOFMEM
("HTHost_find");

296 i‡(!
Ho°TabÀ
[
hash
]ËHo°TabÀ[hash] = 
	`HTLi°_√w
();

297 
li°
 = 
Ho°TabÀ
[
hash
];

302 
HTLi°
 * 
cur
 = 
li°
;

303 (
¥es
 = (
HTHo°
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

304 i‡(!
	`°rcmp
(
¥es
->
ho°«me
, 
ho°
Ë&& 
u_p‹t
 ==Öres->u_port) {

305 i‡(
	`HTHo°_isIdÀ
(
¥es
Ë&& 
	`time
(
NULL
)>¥es->
¡ime
+
Ho°Timeout
){

306 
	`HTTRACE
(
CORE_TRACE
, "Ho° info... CﬁÀ˘ög ho° infÿ%p\n" 
_
 
¥es
);

307 
	`dñëe_obje˘
(
li°
, 
¥es
);

308 
¥es
 = 
NULL
;

316 i‡(
¥es
) {

317 i‡(
¥es
->
ch™√l
) {

323 i‡(
¥es
->
expúes
 > 0) {

324 
time_t
 
t
 = 
	`time
(
NULL
);

325 i‡(
	`HTHo°_isIdÀ
(
¥es
Ë&&Öªs->
expúes
 < 
t
) {

326 
	`HTTRACE
(
CORE_TRACE
, "Ho° info... Pîsi°íàch™√»%∞gŸã¿cﬁd\n" 
_


327 
¥es
->
ch™√l
);

328 
	`HTHo°_˛órCh™√l
(
¥es
, 
HT_OK
);

330 
¥es
->
expúes
 = 
t
 + 
HTPassiveTimeout
;

331 
	`HTTRACE
(
CORE_TRACE
, "Ho° info... REUSING CHANNEL %p\n" 
_
 
¥es
->
ch™√l
);

335 
	`HTTRACE
(
CORE_TRACE
, "Ho° info... Found Ho° %∞wôhÇÿa˘ivêch™√l\n" 
_
 
¥es
);

338 i‡((
¥es
 = (
HTHo°
 *Ë
	`HT_CALLOC
(1, (HTHo°))Ë=
NULL
)

339 
	`HT_OUTOFMEM
("HTHost_add");

340 
¥es
->
hash
 = hash;

341 
	`SåAŒocC›y
(
¥es
->
ho°«me
, 
ho°
);

342 
¥es
->
u_p‹t
 = u_port;

343 
¥es
->
¡ime
 = 
	`time
(
NULL
);

344 
¥es
->
mode
 = 
HT_TP_SINGLE
;

345 
¥es
->
dñay
 = 
WrôeDñay
;

346 
¥es
->
öFlush
 = 
NO
;

348 
i
;

349 
i
 = 0; i < 
HTEvít_TYPES
; i++)

350 
¥es
->
evíts
[
i
]
	`HTEvít_√w
(
Ho°Evít
,Öªs, 
HT_PRIORITY_MAX
, 
EvítTimeout
);

352 
	`HTTRACE
(
CORE_TRACE
, "Ho° info...ádded `%s\' wôh ho° %∞tÿli° %p\n" 
_


353 
ho°
 
_
 
¥es
 _ 
li°
);

354 
	`HTLi°_addObje˘
(
li°
, (*Ë
¥es
);

356  
¥es
;

357 
	}
}

359 
PUBLIC
 
HTHo°
 * 
	$HTHo°_√wWP¨£
 (
HTReque°
 * 
ªque°
, * 
uæ
, 
u_sh‹t
 
u_p‹t
)

361 * 
p‹t
;

362 * 
fuŒho°
 = 
NULL
;

363 * 
∑r£dHo°
 = 
NULL
;

364 
SockA
 * 
sö
;

365 
HTHo°
 * 
me
;

366 * 
¥oxy
 = 
	`HTReque°_¥oxy
(
ªque°
);

368 
fuŒho°
 = 
	`HTP¨£
(
¥oxy
 ?Öroxy : 
uæ
, "", 
PARSE_HOST
);

371 i‡(
fuŒho°
) {

372 * 
©_sign
;

373 i‡((
©_sign
 = 
	`°rchr
(
fuŒho°
, '@')Ë!
NULL
)

374 
∑r£dHo°
 = 
©_sign
+1;

376 
∑r£dHo°
 = 
fuŒho°
;

378 i‡(!
∑r£dHo°
 || !*parsedHost) {

379 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_NO_HOST
,

380 
NULL
, 0, "HTHost_newWParse");

381 
	`HT_FREE
(
fuŒho°
);

382  
NULL
;

386 i‡((
p‹t
 = 
	`°rchr
(
∑r£dHo°
, ':')Ë!
NULL
) {

387 *
p‹t
++ = '\0';

388 i‡(*
p‹t
 && 
	`isdigô
((Ë*p‹t)Ë
u_p‹t
 = (
u_sh‹t
Ë
	`©ﬁ
(port);

390 
	`HTTRACE
(
PROT_TRACE
, "HTHo°Ö¨£ Lookög u∞`%s\' o¿p‹à%u\n" 
_
 
∑r£dHo°
 _ 
u_p‹t
);

393 i‡((
me
 = 
	`HTHo°_√w
(
∑r£dHo°
, 
u_p‹t
)Ë=
NULL
) {

394 
	`HTTRACE
(
PROT_TRACE
, "HTHostÖarse Can't get host info\n");

395 
me
->
t˝°©e
 = 
TCP_ERROR
;

396  
NULL
;

398 
sö
 = &
me
->
sock_addr
;

399 
	`mem£t
((*Ë
sö
, '\0', (
SockA
));

400 #ifde‡
DECNET


401 
sö
->
sdn_Ámûy
 = 
AF_DEC√t
;

402 
√t
->
sock_addr
.
sdn_objnum
 = 
p‹t
 ? ()(
	`°πﬁ
’‹t, (**Ë0, 10)Ë: 
DNP_OBJ
;

404 
sö
->
sö_Ámûy
 = 
AF_INET
;

405 
sö
->
sö_p‹t
 = 
	`ht⁄s
(
u_p‹t
);

407 
	`HT_FREE
(
fuŒho°
);

408  
me
;

409 
	}
}

420 
PUBLIC
 
HTHo°
 * 
	$HTHo°_föd
 (* 
ho°
)

422 
HTLi°
 * 
li°
 = 
NULL
;

423 
HTHo°
 * 
¥es
 = 
NULL
;

424 
	`HTTRACE
(
CORE_TRACE
, "Ho° info... Lookög f‹ `%s\'\n" 
_
 
ho°
 ? host : "<null>");

427 i‡(
ho°
 && 
Ho°TabÀ
) {

428 
hash
 = 0;

429 *
±r
;

430 
±r
=
ho°
; *ptr;Ötr++)

431 
hash
 = (Ë((hash * 3 + (*(*Ë
±r
)Ë% 
HOST_HASH_SIZE
);

432 i‡(!
Ho°TabÀ
[
hash
]Ë 
NULL
;

433 
li°
 = 
Ho°TabÀ
[
hash
];

437 
HTLi°
 * 
cur
 = 
li°
;

438 (
¥es
 = (
HTHo°
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

439 i‡(!
	`°rcmp
(
¥es
->
ho°«me
, 
ho°
)) {

440 i‡(
	`time
(
NULL
Ë> 
¥es
->
¡ime
 + 
Ho°Timeout
) {

441 
	`HTTRACE
(
CORE_TRACE
, "Ho° info... CﬁÀ˘ög ho° %p\n" 
_
 
¥es
);

442 
	`dñëe_obje˘
(
li°
, 
¥es
);

443 
¥es
 = 
NULL
;

445 
	`HTTRACE
(
CORE_TRACE
, "Ho° info... Found `%s\'\n" 
_
 
ho°
);

447  
¥es
;

452  
NULL
;

453 
	}
}

458 
PUBLIC
 
	$HTHo°_dñëeAŒ
 ()

460 
HTLi°
 * 
li°
;

461 
HTHo°
 * 
ho°
;

462 
i
;

464 i‡(!
Ho°TabÀ
)

467 
i
=0; i < 
HOST_HASH_SIZE
; i++) {

468 
li°
 = 
Ho°TabÀ
[
i
];

469 i‡(!
li°
) ;

471 (
ho°
 = (
HTHo°
 *Ë
	`HTLi°_ªmoveFú°Obje˘
(
li°
)Ë!
NULL
)

472 
	`‰ì_obje˘
(
ho°
);

474 
	`HTLi°_dñëe
(
li°
);

477 
	`HT_FREE
(
Ho°TabÀ
);

478 
Ho°TabÀ
 = 
NULL
;

479 
	}
}

484 
PUBLIC
 * 
	$HTHo°_«me
 (
HTHo°
 * 
ho°
)

486  
ho°
 ? ho°->
ho°«me
 : 
NULL
;

487 
	}
}

492 
PUBLIC
 * 
	$HTHo°_˛ass
 (
HTHo°
 * 
ho°
)

494  
ho°
 ? ho°->
ty≥
 : 
NULL
;

495 
	}
}

497 
PUBLIC
 
	$HTHo°_£tCœss
 (
HTHo°
 * 
ho°
, * 
s_˛ass
)

499 i‡(
ho°
 && 
s_˛ass
Ë
	`SåAŒocC›y
(ho°->
ty≥
, s_class);

500 
	}
}

505 
PUBLIC
 
	$HTHo°_vîsi⁄
 (
HTHo°
 *
ho°
)

507  
ho°
 ? ho°->
vîsi⁄
 : 0;

508 
	}
}

510 
PUBLIC
 
	$HTHo°_£tVîsi⁄
 (
HTHo°
 * 
ho°
, 
vîsi⁄
)

512 i‡(
ho°
Ëho°->
vîsi⁄
 = version;

513 
	}
}

518 
PUBLIC
 
BOOL
 
	$HTHo°_£tPîsi°Timeout
 (
time_t
 
timeout
)

520 i‡(
timeout
 > 0) {

521 
HTPassiveTimeout
 = 
timeout
;

522  
YES
;

524  
NO
;

525 
	}
}

527 
PUBLIC
 
time_t
 
	$HTHo°_≥rsi°Timeout
 ()

529  
HTPassiveTimeout
;

530 
	}
}

535 
PUBLIC
 
BOOL
 
	$HTHo°_£tA˘iveTimeout
 (
ms_t
 
timeout
)

537 i‡(
timeout
 > 1000) {

538 
HTA˘iveTimeout
 = 
timeout
;

539  
YES
;

541  
NO
;

542 
	}
}

544 
PUBLIC
 
ms_t
 
	$HTHo°_a˘iveTimeout
 ()

546  
HTA˘iveTimeout
;

547 
	}
}

553 
PUBLIC
 
	$HTHo°_£tPîsi°Expúes
 (
HTHo°
 * 
ho°
, 
time_t
 
expúes
)

555 i‡(
ho°
Ëho°->
expúes
 =Éxpires;

556 
	}
}

558 
PUBLIC
 
time_t
 
	$HTHo°_≥rsi°Expúes
 (
HTHo°
 * 
ho°
)

560  
ho°
 ? ho°->
expúes
 : -1;

561 
	}
}

563 
PUBLIC
 
	$HTHo°_£tReqsPîC⁄√˘i⁄
 (
HTHo°
 * 
ho°
, 
ªqs
)

565 i‡(
ho°
Ëho°->
ªqsPîC⁄√˘i⁄
 = 
ªqs
;

566 
	}
}

568 
PUBLIC
 
	$HTHo°_ªqsPîC⁄√˘i⁄
 (
HTHo°
 * 
ho°
)

570  
ho°
 ? ho°->
ªqsPîC⁄√˘i⁄
 : -1;

571 
	}
}

573 
PUBLIC
 
	$HTHo°_£tReqsMade
 (
HTHo°
 * 
ho°
, 
ªqs
)

575 i‡(
ho°
Ëho°->
ªqsMade
 = 
ªqs
;

576 
	}
}

578 
PUBLIC
 
	$HTHo°_ªqsMade
 (
HTHo°
 * 
ho°
)

580  
ho°
 ? ho°->
ªqsMade
 : -1;

581 
	}
}

586 
PUBLIC
 
HTMëhod
 
	$HTHo°_publicMëhods
 (
HTHo°
 * 
me
)

588  
me
 ? me->
mëhods
 : 
METHOD_INVALID
;

589 
	}
}

591 
PUBLIC
 
	$HTHo°_£tPublicMëhods
 (
HTHo°
 * 
me
, 
HTMëhod
 
mëhod£t
)

593 i‡(
me
Ëme->
mëhods
 = 
mëhod£t
;

594 
	}
}

596 
PUBLIC
 
	$HTHo°_≠≥ndPublicMëhods
 (
HTHo°
 * 
me
, 
HTMëhod
 
mëhod£t
)

598 i‡(
me
Ëme->
mëhods
 |
mëhod£t
;

599 
	}
}

604 
PUBLIC
 * 
	$HTHo°_£rvî
 (
HTHo°
 * 
ho°
)

606  
ho°
 ? ho°->
£rvî
 : 
NULL
;

607 
	}
}

609 
PUBLIC
 
BOOL
 
	$HTHo°_£tSîvî
 (
HTHo°
 * 
ho°
, c⁄° * 
£rvî
)

611 i‡(
ho°
 && 
£rvî
) {

612 
	`SåAŒocC›y
(
ho°
->
£rvî
, server);

613  
YES
;

615  
NO
;

616 
	}
}

621 
PUBLIC
 * 
	$HTHo°_u£rAgít
 (
HTHo°
 * 
ho°
)

623  
ho°
 ? ho°->
u£r_agít
 : 
NULL
;

624 
	}
}

626 
PUBLIC
 
BOOL
 
	$HTHo°_£tU£rAgít
 (
HTHo°
 * 
ho°
, c⁄° * 
u£rAgít
)

628 i‡(
ho°
 && 
u£rAgít
) {

629 
	`SåAŒocC›y
(
ho°
->
u£r_agít
, 
u£rAgít
);

630  
YES
;

632  
NO
;

633 
	}
}

638 
PUBLIC
 * 
	$HTHo°_øngeUnôs
 (
HTHo°
 * 
ho°
)

640  
ho°
 ? ho°->
ønge_unôs
 : 
NULL
;

641 
	}
}

643 
PUBLIC
 
BOOL
 
	$HTHo°_£tR™geUnôs
 (
HTHo°
 * 
ho°
, c⁄° * 
unôs
)

645 i‡(
ho°
 && 
unôs
) {

646 
	`SåAŒocC›y
(
ho°
->
ønge_unôs
, 
unôs
);

647  
YES
;

649  
NO
;

650 
	}
}

658 
PUBLIC
 
BOOL
 
	$HTHo°_isR™geUnôAc˚±abÀ
 (
HTHo°
 * 
ho°
, c⁄° * 
unô
)

660 i‡(
ho°
 && 
unô
) {

662 i‡(
ho°
->
ønge_unôs
) {

663 * 
°¨t
 = 
	`HTSåCa£Så
(
ho°
->
ønge_unôs
, "none");

669 i‡(
°¨t
) {

673  
NO
;

676  
	`°rˇ£comp
(
unô
, "byãs"Ë? 
NO
 : 
YES
;

678  
NO
;

679 
	}
}

687 
PUBLIC
 
BOOL
 
	$HTHo°_£tPîsi°ít
 (
HTHo°
 * 
ho°
,

688 
BOOL
 
≥rsi°ít
,

689 
HTTøn•‹tMode
 
mode
)

691 i‡(!
ho°
Ë 
NO
;

693 i‡(!
≥rsi°ít
) {

701 
ho°
->
≥rsi°ít
 = 
NO
;

702  
	`HTHo°_˛órCh™√l
(
ho°
, 
HT_IGNORE
);

709 
	`HTHo°_£tMode
(
ho°
, 
mode
);

710 i‡(!
ho°
->
≥rsi°ít
) {

711 
SOCKET
 
sockfd
 = 
	`HTCh™√l_sockë
(
ho°
->
ch™√l
);

712 i‡(
sockfd
 !
INVSOC
 && 
	`HTNë_avaûabÀPîsi°ítSockës
() > 0) {

713 
ho°
->
≥rsi°ít
 = 
YES
;

714 
ho°
->
expúes
 = 
	`time
(
NULL
Ë+ 
HTPassiveTimeout
;

715 
	`HTCh™√l_£tHo°
(
ho°
->
ch™√l
, host);

716 
	`HTNë_ö¸ó£Pîsi°ítSockë
();

717 
	`HTTRACE
(
CORE_TRACE
, "Ho° info...ádded ho° %∞a†≥rsi°ít\n" 
_
 
ho°
);

718  
YES
;

720 
	`HTTRACE
(
CORE_TRACE
, "Ho° info...Çÿroom f‹Öîsi°íàsockë %d\n" 
_


721 
sockfd
);

722  
NO
;

725 
	`HTTRACE
(
CORE_TRACE
, "Ho° info... %∞ÆªadyÖîsi°ít\n" 
_
 
ho°
);

726  
YES
;

728  
NO
;

729 
	}
}

734 
PUBLIC
 
BOOL
 
	$HTHo°_isPîsi°ít
 (
HTHo°
 * 
ho°
)

736  
ho°
 && ho°->
≥rsi°ít
;

737 
	}
}

742 
PUBLIC
 
HTCh™√l
 * 
	$HTHo°_ch™√l
 (
HTHo°
 * 
ho°
)

744  
ho°
 ? ho°->
ch™√l
 : 
NULL
;

745 
	}
}

752 
PUBLIC
 
BOOL
 
	$HTHo°_£tClo£NŸifiˇti⁄
 (
HTHo°
 * 
ho°
, 
BOOL
 
mode
)

754 i‡(
ho°
) {

755 
ho°
->
˛o£_nŸifiˇti⁄
 = 
mode
;

756  
YES
;

758  
NO
;

759 
	}
}

761 
PUBLIC
 
BOOL
 
	$HTHo°_˛o£NŸifiˇti⁄
 (
HTHo°
 * 
ho°
)

763  
ho°
 && ho°->
˛o£_nŸifiˇti⁄
;

764 
	}
}

770 
PUBLIC
 
BOOL
 
	$HTHo°_˛órCh™√l
 (
HTHo°
 * 
ho°
, 
°©us
)

772 i‡(
ho°
 && ho°->
ch™√l
) {

773 
	`HTCh™√l_£tHo°
(
ho°
->
ch™√l
, 
NULL
);

775 
	`HTEvít_uƒegi°î
(
	`HTCh™√l_sockë
(
ho°
->
ch™√l
), 
HTEvít_READ
);

776 
	`HTEvít_uƒegi°î
(
	`HTCh™√l_sockë
(
ho°
->
ch™√l
), 
HTEvít_WRITE
);

777 
ho°
->
ªgi°îedF‹
 = 0;

784 
	`HTCh™√l_dñëe
(
ho°
->
ch™√l
, 
°©us
);

785 
ho°
->
expúes
 = 0;

786 
ho°
->
ch™√l
 = 
NULL
;

787 
ho°
->
t˝°©e
 = 
TCP_BEGIN
;

788 
ho°
->
ªqsMade
 = 0;

789 i‡(
	`HTHo°_isPîsi°ít
(
ho°
)) {

790 
	`HTNë_de¸ó£Pîsi°ítSockë
();

791 
ho°
->
≥rsi°ít
 = 
NO
;

793 
ho°
->
˛o£_nŸifiˇti⁄
 = 
NO
;

794 
ho°
->
brokí_pùe
 = 
NO
;

795 
ho°
->
mode
 = 
HT_TP_SINGLE
;

797 
ho°
->
ªcovîed
 = 0;

799 
	`HTTRACE
(
CORE_TRACE
, "Ho° info...Ñemoved ho° %∞a†≥rsi°ít\n" 
_
 
ho°
);

801 i‡(!
	`HTLi°_isEm±y
(
ho°
->
≥ndög
)) {

802 
	`HTTRACE
(
CORE_TRACE
, "Ho° ha†%d obje˘(sË≥ndög -áâem±ögÜaunch\n" 
_
 
	`HTLi°_cou¡
(
ho°
->
≥ndög
));

803 
	`HTHo°_œunchPídög
(
ho°
);

805  
YES
;

807  
NO
;

808 
	}
}

810 
PUBLIC
 
BOOL
 
	$HTHo°_doRecovî
 (
HTHo°
 * 
ho°
)

812  
ho°
 ? ho°->
do_ªcovî
 : 
NO
;

813 
	}
}

819 
PUBLIC
 
BOOL
 
	$HTHo°_ªcovîPùe
 (
HTHo°
 * 
ho°
)

821 i‡(
ho°
) {

822 
pùed
 = 
	`HTLi°_cou¡
(
ho°
->
pùñöe
);

827 i‡(
ho°
->
ªcovîed
 > 
MAX_HOST_RECOVER
) {

828 
	`HTTRACE
(
CORE_TRACE
, "Ho°Ñecovî %∞Æªady %dÅime†-ÇŸ doög ià™ym‹e\n" 
_
 
ho°
 _ ho°->
ªcovîed
);

829  
NO
;

836 i‡(
pùed
 > 0) {

837 
˙t
;

838 
ho°
->
ªcovîed
++;

839 
	`HTTRACE
(
CORE_TRACE
, "Ho°Ñecovî %∞ªcovîed %dÅimes. Movög %d Në obje˘†‰omÖùêlöêtÿ≥ndög queue\n" 
_
 
ho°
 _ ho°->
ªcovîed
 _ 
pùed
);

844 
	`HTEvít_uƒegi°î
(
	`HTCh™√l_sockë
(
ho°
->
ch™√l
), 
HTEvít_READ
);

845 
	`HTEvít_uƒegi°î
(
	`HTCh™√l_sockë
(
ho°
->
ch™√l
), 
HTEvít_WRITE
);

846 
ho°
->
ªgi°îedF‹
 = 0;

851 
ho°
->
mode
 = 
HT_TP_SINGLE
;

856 i‡(!
ho°
->
≥ndög
Ëho°->≥ndög = 
	`HTLi°_√w
();

857 
˙t
=0; c¡<
pùed
; cnt++) {

858 
HTNë
 * 
√t
 = 
	`HTLi°_ªmoveLa°Obje˘
(
ho°
->
pùñöe
);

859 
	`HTTRACE
(
CORE_TRACE
, "Ho°Ñecovî Re£âögÇë obje˘ %p\n" 
_
 
√t
);

860 
√t
->
ªgi°îedF‹
 = 0;

861 (*
√t
->
evít
.
cbf
)(
	`HTCh™√l_sockë
(
ho°
->
ch™√l
),Çë->evít.
∑øm
, 
HTEvít_RESET
);

862 
	`HTLi°_≠≥ndObje˘
(
ho°
->
≥ndög
, 
√t
);

863 
ho°
->
lock
 = 
√t
;

866 
	`HTCh™√l_£tSem≠h‹e
(
ho°
->
ch™√l
, 0);

867 
	`HTHo°_˛órCh™√l
(
ho°
, 
HT_INTERRUPTED
);

868 
ho°
->
do_ªcovî
 = 
NO
;

870  
YES
;

872  
NO
;

873 
	}
}

879 
PUBLIC
 
BOOL
 
	$HTHo°_kûlPùe
 (
HTHo°
 * 
ho°
)

881  
	`kûlPùñöe
(
ho°
, 
HTEvít_CLOSE
);

882 
	}
}

888 
PUBLIC
 
HTTøn•‹tMode
 
	$HTHo°_mode
 (
HTHo°
 * 
ho°
, 
BOOL
 * 
a˘ive
)

890  
ho°
 ? ho°->
mode
 : 
HT_TP_SINGLE
;

891 
	}
}

899 
PUBLIC
 
BOOL
 
	$HTHo°_£tMode
 (
HTHo°
 * 
ho°
, 
HTTøn•‹tMode
 
mode
)

901 i‡(
ho°
) {

905 i‡(
mode
 =
HT_TP_SINGLE
 && 
ho°
->mode > mode) {

906 
pùed
 = 
	`HTLi°_cou¡
(
ho°
->
pùñöe
);

907 i‡(
pùed
 > 0) {

908 
˙t
;

909 
	`HTTRACE
(
CORE_TRACE
, "Ho° info... Movög %d Në obje˘†‰omÖùêlöêtÿ≥ndög queue\n" 
_
 
pùed
);

910 i‡(!
ho°
->
≥ndög
Ëho°->≥ndög = 
	`HTLi°_√w
();

911 
˙t
=0; c¡<
pùed
; cnt++) {

912 
HTNë
 * 
√t
 = 
	`HTLi°_ªmoveLa°Obje˘
(
ho°
->
pùñöe
);

913 
	`HTTRACE
(
CORE_TRACE
, "Ho° info... Re£âögÇë obje˘ %p\n" 
_
 
√t
);

914 (*
√t
->
evít
.
cbf
)(
	`HTCh™√l_sockë
(
ho°
->
ch™√l
),Çë->evít.
∑øm
, 
HTEvít_RESET
);

915 
	`HTLi°_≠≥ndObje˘
(
ho°
->
≥ndög
, 
√t
);

917 
	`HTCh™√l_£tSem≠h‹e
(
ho°
->
ch™√l
, 0);

918 
	`HTHo°_˛órCh™√l
(
ho°
, 
HT_INTERRUPTED
);

926 i‡(
mode
 =
HT_TP_PIPELINE
 && 
ho°
->
ªcovîed
 > 
MAX_HOST_RECOVER
) {

927 
	`HTTRACE
(
PROT_TRACE
, "Ho° info... %∞i†bad f‹Öùñöög sÿwêw⁄'àdÿô!!!\n" 
_


928 
ho°
);

930 
ho°
->
mode
 = mode;

931 
	`HTTRACE
(
PROT_TRACE
, "Ho° info... New modêi†%d f‹ ho° %p\n" 
_
 
ho°
->
mode
 _ host);

934  
NO
;

935 
	}
}

944 
PUBLIC
 
BOOL
 
	$HTHo°_isIdÀ
 (
HTHo°
 * 
ho°
)

946  (
ho°
 && 
	`HTLi°_isEm±y
(ho°->
pùñöe
));

947 
	}
}

949 
PRIVATE
 
BOOL
 
	$_roomInPùe
 (
HTHo°
 * 
ho°
)

951 
cou¡
;

952 i‡(!
ho°
 ||

953 (
ho°
->
ªqsPîC⁄√˘i⁄
 && ho°->
ªqsMade
 >= host->reqsPerConnection) ||

954 
	`HTHo°_˛o£NŸifiˇti⁄
(
ho°
Ë|| ho°->
brokí_pùe
)

955  
NO
;

956 
cou¡
 = 
	`HTLi°_cou¡
(
ho°
->
pùñöe
);

957 
ho°
->
mode
) {

958 
HT_TP_SINGLE
:

959  
cou¡
 <= 0;

960 
HT_TP_PIPELINE
:

961  (
ho°
->
ªcovîed
 < 
MAX_HOST_RECOVER
) ?

962 (
cou¡
 < 
MaxPùñöedReque°s
) : (count <= 0);

963 
HT_TP_INTERLEAVE
:

964  
YES
;

966  
NO
;

967 
	}
}

975 
PUBLIC
 
	$HTHo°_addNë
 (
HTHo°
 * 
ho°
, 
HTNë
 * 
√t
)

977 i‡(
ho°
 && 
√t
) {

978 
°©us
 = 
HT_OK
;

979 
BOOL
 
doô
 = (
ho°
->doô==
√t
);

985 i‡(!
ho°
->
ch™√l
 && 
	`HTNë_avaûabÀSockës
() <= 0) {

988 i‡(!
PídHo°
ËPídHo° = 
	`HTLi°_√w
();

991 i‡(
	`HTLi°_ödexOf
(
PídHo°
, 
ho°
Ë< 0Ë
	`HTLi°_addObje˘
(PendHost, host);

998 i‡(!
ho°
->
≥ndög
Ëho°->≥ndög = 
	`HTLi°_√w
();

999 i‡(
ho°
->
lock
 =
√t
)

1000 
	`HTLi°_≠≥ndObje˘
(
ho°
->
≥ndög
, 
√t
);

1002 
	`HTLi°_addObje˘
(
ho°
->
≥ndög
, 
√t
);

1004 
	`HTTRACE
(
CORE_TRACE
, "Ho° info... Added Në %∞‘eque° %pËa†≥ndög o¿≥ndög Ho° %p, %dÑeque°†made, %dÑeque°†öÖùe, %dÖídög\n" 
_


1005 
√t
 
_
Çë->
ªque°
 _ 
ho°
 _ ho°->
ªqsMade
 _

1006 
	`HTLi°_cou¡
(
ho°
->
pùñöe
Ë
_
 HTLi°_cou¡(ho°->
≥ndög
));

1007  
HT_PENDING
;

1016 i‡(
	`HTLi°_ödexOf
(
ho°
->
pùñöe
, 
√t
) >= 0) {

1017 
	`HTTRACE
(
CORE_TRACE
, "Host info... The Net %p (request %p) isálready inÖipe,"

1018 " %dÑeque°†made, %dÑeque°†öÖùe, %dÖídög\n" 
_


1019 
√t
 
_
Çë->
ªque°
 _ 
ho°
->
ªqsMade
 _

1020 
	`HTLi°_cou¡
(
ho°
->
pùñöe
Ë
_


1021 
	`HTLi°_cou¡
(
ho°
->
≥ndög
));

1022 
	`HTDEBUGBREAK
("Në obje˘ %∞ªgi°îed mu…ùÀÅime†öÖùñöe\n" 
_


1023 
√t
);

1024  
HT_OK
;

1027 i‡(
	`HTLi°_ödexOf
(
ho°
->
≥ndög
, 
√t
) >= 0) {

1028 
	`HTTRACE
(
CORE_TRACE
, "Host info... The Net %p (request %p)álreadyÖending,"

1029 " %dÑeque°†made, %dÑeque°†öÖùe, %dÖídög\n" 
_


1030 
√t
 
_
Çë->
ªque°
 _ 
ho°
->
ªqsMade
 _

1031 
	`HTLi°_cou¡
(
ho°
->
pùñöe
Ë
_


1032 
	`HTLi°_cou¡
(
ho°
->
≥ndög
));

1033 
	`HTDEBUGBREAK
("Në obje˘ %∞ªgi°îed mu…ùÀÅime†öÖídög queue\n" 
_


1034 
√t
);

1036  
HT_PENDING
;

1043 i‡(
	`_roomInPùe
(
ho°
Ë&& (
	`HTLi°_isEm±y
(ho°->
≥ndög
Ë|| 
doô
)) {

1044 i‡(
doô
Ë
ho°
->doô = 
NULL
;

1045 i‡(!
ho°
->
pùñöe
Ëho°->pùñöê
	`HTLi°_√w
();

1046 
	`HTLi°_addObje˘
(
ho°
->
pùñöe
, 
√t
);

1047 
ho°
->
ªqsMade
++;

1048 
	`HTTRACE
(
CORE_TRACE
, "Ho° info... Added Në %∞‘eque° %pËtÿpùê⁄ Ho° %p, %dÑeque°†made, %dÑeque°†öÖùe, %dÖídög\n" 
_


1049 
√t
 
_
Çë->
ªque°
 _ 
ho°
 _ ho°->
ªqsMade
 _

1050 
	`HTLi°_cou¡
(
ho°
->
pùñöe
Ë
_
 HTLi°_cou¡(ho°->
≥ndög
));

1055 i‡(
ho°
->
timî
) {

1056 
	`HTTimî_dñëe
(
ho°
->
timî
);

1057 
ho°
->
timî
 = 
NULL
;

1064 
	`HTHo°_A˘iv©eReque°
 (
√t
);

1067 i‡(!
ho°
->
≥ndög
Ëho°->≥ndög = 
	`HTLi°_√w
();

1068 
	`HTLi°_addObje˘
(
ho°
->
≥ndög
, 
√t
);

1069 
	`HTTRACE
(
CORE_TRACE
, "Ho° info... Added Në %∞‘eque° %pËa†≥ndög o¿Ho° %p, %dÑeque°†made, %dÑeque°†öÖùe, %dÖídög\n" 
_


1070 
√t
 
_
Çë->
ªque°
 _

1071 
ho°
 
_
 ho°->
ªqsMade
 _

1072 
	`HTLi°_cou¡
(
ho°
->
pùñöe
Ë
_
 HTLi°_cou¡(ho°->
≥ndög
));

1073 
°©us
 = 
HT_PENDING
;

1075  
°©us
;

1077  
HT_ERROR
;

1078 
	}
}

1080 
PRIVATE
 
BOOL
 
	$HTHo°_‰ì
 (
HTHo°
 * 
ho°
, 
°©us
)

1082 i‡(
ho°
->
ch™√l
) {

1085 i‡(
	`HTHo°_isPîsi°ít
(
ho°
)) {

1086 
pùed
 = 
	`HTLi°_cou¡
(
ho°
->
pùñöe
);

1087 i‡(
	`HTHo°_˛o£NŸifiˇti⁄
(
ho°
)) {

1088 
	`HTTRACE
(
CORE_TRACE
, "Ho° Obje˘. gŸ clo£ÇŸifüti⁄ o¿sockë %d\n" 
_


1089 
	`HTCh™√l_sockë
(
ho°
->
ch™√l
));

1095 i‡(
pùed
 > 1) {

1096 
ho°
->
ªqsPîC⁄√˘i⁄
 = ho°->
ªqsMade
 - 
pùed
;

1097 
	`HTTRACE
(
CORE_TRACE
, "%dÑeque°†made, %d i¿pùe, max %dÑeque°†¥ c⁄√˘i⁄\n" 
_


1098 
ho°
->
ªqsMade
 
_
 
pùed
 _ ho°->
ªqsPîC⁄√˘i⁄
);

1099 
ho°
->
do_ªcovî
 = 
YES
;

1102 i‡(
	`HTCh™√l_dñëe
(
ho°
->
ch™√l
, 
°©us
)) {

1103 
	`HTTRACE
(
CORE_TRACE
, "Ho° Evít.. cÀ¨ög ch™√»⁄ ho° %∞(%s)\n" 
_
 
ho°
 _ ho°->
ho°«me
);

1104 
ho°
->
ch™√l
 = 
NULL
;

1107 
	`HTCh™√l_£tSem≠h‹e
(
ho°
->
ch™√l
, 0);

1108 
	`HTHo°_˛órCh™√l
(
ho°
, 
°©us
);

1110 } i‡(
pùed
<=1 && 
ho°
->
ªqsMade
==ho°->
ªqsPîC⁄√˘i⁄
) {

1111 
	`HTTRACE
(
CORE_TRACE
, "Ho° Obje˘. closögÖîsi°íàsockë %d\n" 
_


1112 
	`HTCh™√l_sockë
(
ho°
->
ch™√l
));

1118 
	`HTCh™√l_£tSem≠h‹e
(
ho°
->
ch™√l
, 0);

1119 
	`HTHo°_˛órCh™√l
(
ho°
, 
°©us
);

1122 
	`HTTRACE
(
CORE_TRACE
, "Ho° Obje˘. kìpögÖîsi°íàsockë %d\n" 
_


1123 
	`HTCh™√l_sockë
(
ho°
->
ch™√l
));

1124 i‡(
	`HTCh™√l_dñëe
(
ho°
->
ch™√l
, 
°©us
)) {

1125 
	`HTDEBUGBREAK
("Ho° Evít.. Ch™√»u√x≥˘ed dñëed from ho° %∞(%s)\n" 
_
 
ho°
 _ ho°->
ho°«me
);

1126 
ho°
->
ch™√l
 = 
NULL
;

1132 i‡(
pùed
<=1 && 
	`HTLi°_isEm±y
(
ho°
->
≥ndög
Ë&& !ho°->
timî
) {

1133 
ho°
->
timî
 = 
	`HTTimî_√w
(
NULL
, 
IdÀTimeoutEvít
,

1134 
ho°
, 
HTA˘iveTimeout
, 
YES
, 
NO
);

1135 
	`HTTRACE
(
PROT_TRACE
, "Ho°........ Obje˘ %∞goög idÀ...\n" 
_
 
ho°
);

1138  
YES
;

1140 
	`HTTRACE
(
CORE_TRACE
, "Ho° Obje˘. closög sockë %d\n" 
_
 
	`HTCh™√l_sockë
(
ho°
->
ch™√l
));

1141 
	`HTCh™√l_£tSem≠h‹e
(
ho°
->
ch™√l
, 0);

1142 
	`HTHo°_˛órCh™√l
(
ho°
, 
°©us
);

1145  
NO
;

1146 
	}
}

1148 
PUBLIC
 
BOOL
 
	$HTHo°_dñëeNë
 (
HTHo°
 * 
ho°
, 
HTNë
 * 
√t
, 
°©us
)

1150 i‡(
ho°
 && 
√t
) {

1151 
	`HTTRACE
(
CORE_TRACE
, "Ho° info... Removê%∞‰omÖùe\n" 
_
 
√t
);

1154 i‡(
ho°
->
pùñöe
 && 
	`HTLi°_ödexOf
(ho°->pùñöe, 
√t
) >= 0) {

1155 
	`HTHo°_‰ì
(
ho°
, 
°©us
);

1156 
	`HTLi°_ªmoveObje˘AŒ
(
ho°
->
pùñöe
, 
√t
);

1159 
	`HTLi°_ªmoveObje˘AŒ
(
ho°
->
≥ndög
, 
√t
);

1160 
ho°
->
lock
 = 
	`HTLi°_fú°Obje˘
(ho°->
≥ndög
);

1161  
YES
;

1163  
NO
;

1164 
	}
}

1180 
PUBLIC
 
HTNë
 * 
	$HTHo°_√xtPídögNë
 (
HTHo°
 * 
ho°
)

1182 
HTNë
 * 
√t
 = 
NULL
;

1183 i‡(
ho°
 && ho°->
≥ndög
) {

1187 i‡((
√t
 = (
HTNë
 *Ë
	`HTLi°_ªmoveFú°Obje˘
(
ho°
->
≥ndög
)Ë!
NULL
) {

1188 
	`HTTRACE
(
CORE_TRACE
, "Ho° info... P›pög %∞‰omÖídögÇë queuê⁄ ho° %p\n" 
_


1189 
√t
 
_
 
ho°
);

1192 
HTReque°
 * 
ªque°
 = 
	`HTNë_ªque°
(
√t
);

1193 * 
uri
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
	`HTReque°_™ch‹
(
ªque°
));

1194 
	`Ârötf
(
°dîr
, "P›pög '%s'\n", 
uri
);

1197 
ho°
->
doô
 = 
√t
;

1200  
√t
;

1201 
	}
}

1206 
PUBLIC
 
HTHo°
 * 
	$HTHo°_√xtPídögHo°
 ()

1208 
HTHo°
 * 
ho°
 = 
NULL
;

1209 i‡(
PídHo°
) {

1210 i‡((
ho°
 = (
HTHo°
 *Ë
	`HTLi°_ªmoveFú°Obje˘
(
PídHo°
)Ë!
NULL
)

1211 
	`HTTRACE
(
PROT_TRACE
, "Ho° info... P›pög %∞‰omÖídög ho° queue\n" 
_


1212 
ho°
);

1214  
ho°
;

1215 
	}
}

1222 
PUBLIC
 
BOOL
 
	$HTHo°_œunchPídög
 (
HTHo°
 * 
ho°
)

1224 
HTNë
 * 
√t
 = 
NULL
;

1225 i‡(!
ho°
) {

1226 
	`HTTRACE
(
PROT_TRACE
, "Host info... Badárguments\n");

1227  
NO
;

1235 i‡(
ho°
->
mode
 =
HT_TP_PIPELINE
) {

1236 
√t
 = (
HTNë
 *Ë
	`HTLi°_œ°Obje˘
(
ho°
->
pùñöe
);

1237 i‡(
√t
 &&Çë->
ªgi°îedF‹
 =
HTEvít_WRITE
)

1238  
NO
;

1244 i‡(
	`_roomInPùe
(
ho°
Ë&& 
DoPídögReqLaunch
 &&

1245 (
√t
 = 
	`HTHo°_√xtPídögNë
(
ho°
))) {

1246 
	`HTHo°_A˘iv©eReque°
(
√t
);

1247 
	`HTTRACE
(
CORE_TRACE
, "LaunchÖídögÇë obje˘ %∞wôh %dÑeq†öÖùê(%dÑeq†made)\n" 
_


1248 
√t
 
_
 
	`HTLi°_cou¡
(
ho°
->
pùñöe
Ë_ ho°->
ªqsMade
);

1249  
	`HTNë_execuã
(
√t
, 
HTEvít_WRITE
);

1255 i‡(
DoPídögReqLaunch
 && 
	`HTNë_avaûabÀSockës
() > 0) {

1256 
HTHo°
 * 
≥ndög
 = 
	`HTHo°_√xtPídögHo°
();

1257 i‡(
≥ndög
 && (
√t
 = 
	`HTHo°_√xtPídögNë
(pending))) {

1258 i‡(!
≥ndög
->
pùñöe
Ë≥ndög->pùñöê
	`HTLi°_√w
();

1259 
	`HTLi°_addObje˘
(
≥ndög
->
pùñöe
, 
√t
);

1260 
ho°
->
ªqsMade
++;

1261 
	`HTTRACE
(
CORE_TRACE
, "LaunchÖídög ho° obje˘ %p,Çë %∞wôh %dÑeq†öÖùê(%dÑeq†made)\n" 
_


1262 
≥ndög
 
_
 
√t
 _ 
	`HTLi°_cou¡
’ídög->
pùñöe
Ë_Öídög->
ªqsMade
);

1263 
	`HTHo°_A˘iv©eReque°
(
√t
);

1264  
	`HTNë_execuã
(
√t
, 
HTEvít_WRITE
);

1267  
YES
;

1268 
	}
}

1270 
PUBLIC
 
HTNë
 * 
	$HTHo°_fú°Në
 (
HTHo°
 * 
ho°
)

1272  (
HTNë
 *Ë
	`HTLi°_fú°Obje˘
(
ho°
->
pùñöe
);

1273 
	}
}

1275 
PUBLIC
 
	$HTHo°_numbîOfOut°™dögNëObje˘s
 (
HTHo°
 * 
ho°
)

1277  
ho°
 ? 
	`HTLi°_cou¡
(ho°->
pùñöe
) : -1;

1278 
	}
}

1280 
PUBLIC
 
	$HTHo°_numbîOfPídögNëObje˘s
 (
HTHo°
 * 
ho°
)

1282  
ho°
 ? 
	`HTLi°_cou¡
(ho°->
≥ndög
) : -1;

1283 
	}
}

1291 
PUBLIC
 
	$HTHo°_c⁄√˘
 (
HTHo°
 * 
ho°
, 
HTNë
 * 
√t
, * 
uæ
)

1293 
HTReque°
 * 
ªque°
 = 
	`HTNë_ªque°
(
√t
);

1294 
°©us
 = 
HT_OK
;

1295 i‡(!
ho°
) {

1296 
HTPrŸocﬁ
 * 
¥Ÿocﬁ
 = 
	`HTNë_¥Ÿocﬁ
(
√t
);

1297 i‡((
ho°
 = 
	`HTHo°_√wWP¨£
(
ªque°
, 
uæ
, 
	`HTPrŸocﬁ_id
(
¥Ÿocﬁ
))Ë=
NULL
)

1298  
HT_ERROR
;

1305 i‡(!
ho°
->
lock
 && !ho°->
ch™√l
) {

1306 
HTNë
 * 
√xt_≥ndög
 = 
NULL
;

1307 
ho°
->
f‹˚WrôeFlush
 = 
YES
;

1308 
ho°
->
lock
 = (
√xt_≥ndög
 = 
	`HTLi°_fú°Obje˘
(ho°->
≥ndög
)) ?

1309 
√xt_≥ndög
 : 
√t
;

1310 
	`HTTRACE
(
CORE_TRACE
, "Ho° c⁄√˘ GøbbögÜock o¿Ho° %∞wôh %p\n" 
_
 
ho°
 _ ho°->
lock
);

1312 
	`HTNë_£tHo°
(
√t
, 
ho°
);

1315 i‡(!
ho°
->
lock
 || (ho°->lock && ho°->lock =
√t
)) {

1316 
°©us
 = 
	`HTDoC⁄√˘
(
√t
);

1317 i‡(
°©us
 =
HT_PENDING
)

1318  
HT_WOULD_BLOCK
;

1319 i‡(
°©us
 =
HT_WOULD_BLOCK
) {

1320 
ho°
->
lock
 = 
√t
;

1321  
°©us
;

1328 
HTNë
 * 
√xt_≥ndög
 = 
NULL
;

1329 i‡((
√xt_≥ndög
 = 
	`HTLi°_fú°Obje˘
(
ho°
->
≥ndög
))) {

1330 
	`HTTRACE
(
CORE_TRACE
, "Ho° c⁄√˘ Ch™gögÜock o¿Ho° %∞tÿ%p\n" 
_


1331 
ho°
 
_
 
√xt_≥ndög
);

1332 
ho°
->
lock
 = 
√xt_≥ndög
;

1334 
	`HTTRACE
(
CORE_TRACE
, "Ho° c⁄√˘ U∆ockög Ho° %p\n" 
_
 
ho°
);

1335 
ho°
->
lock
 = 
NULL
;

1337  
°©us
;

1340 
	`HTTRACE
(
CORE_TRACE
, "Ho° c⁄√˘ Ho° %∞ÆªadyÜocked wôh %p\n" 
_
 
ho°
 _ ho°->
lock
);

1341 i‡((
°©us
 = 
	`HTHo°_addNë
(
ho°
, 
√t
)Ë=
HT_PENDING
) {

1342  
HT_PENDING
;

1345  
HT_ERROR
;

1346 
	}
}

1348 
PUBLIC
 
	$HTHo°_li°í
 (
HTHo°
 * 
ho°
, 
HTNë
 * 
√t
, * 
uæ
)

1350 
HTReque°
 * 
ªque°
 = 
	`HTNë_ªque°
(
√t
);

1351 
°©us
 = 
HT_OK
;

1352 i‡(!
ho°
) {

1353 
HTPrŸocﬁ
 * 
¥Ÿocﬁ
 = 
	`HTNë_¥Ÿocﬁ
(
√t
);

1354 i‡((
ho°
 = 
	`HTHo°_√wWP¨£
(
ªque°
, 
uæ
, 
	`HTPrŸocﬁ_id
(
¥Ÿocﬁ
))Ë=
NULL
)

1355  
HT_ERROR
;

1362 i‡(!
ho°
->
lock
 && !ho°->
ch™√l
) {

1363 
ho°
->
f‹˚WrôeFlush
 = 
YES
;

1364 
ho°
->
lock
 = 
√t
;

1366 
	`HTNë_£tHo°
(
√t
, 
ho°
);

1373 i‡(!
ho°
->
li°íög
Ëho°->li°íög = 
	`HTNë_√w
(host);

1378 
°©us
 = 
	`HTDoLi°í
(
ho°
->
li°íög
, 
√t
, 
HT_BACKLOG
);

1379 i‡(
°©us
 !
HT_OK
) {

1380 
	`HTTRACE
(
CORE_TRACE
, "Ho°Üi°í. O¿Ho° %∞ªsu…ed i¿%d\n" 
_
 
ho°
 _ 
°©us
);

1381  
°©us
;

1383  
HT_OK
;

1384 
	}
}

1386 
PUBLIC
 
	$HTHo°_ac˚±
 (
HTHo°
 * 
ho°
, 
HTNë
 * 
√t
, * 
uæ
)

1388 
°©us
 = 
HT_OK
;

1389 i‡(!
ho°
 || !ho°->
li°íög
) {

1390 
	`HTTRACE
(
CORE_TRACE
, "Hostáccept. No host object orÇotÜistening onánything\n");

1391  
HT_ERROR
;

1394 i‡(!
ho°
->
lock
 || (ho°->lock && ho°->lock =
√t
)) {

1395 
°©us
 = 
	`HTDoAc˚±
(
ho°
->
li°íög
, 
√t
);

1396 i‡(
°©us
 =
HT_PENDING
)

1397  
HT_WOULD_BLOCK
;

1398 i‡(
°©us
 =
HT_WOULD_BLOCK
) {

1399 
ho°
->
lock
 = 
√t
;

1400  
°©us
;

1407 
HTNë
 * 
√xt_≥ndög
 = 
NULL
;

1408 i‡((
√xt_≥ndög
 = 
	`HTLi°_fú°Obje˘
(
ho°
->
≥ndög
))) {

1409 
	`HTTRACE
(
CORE_TRACE
, "Ho° c⁄√˘ Ch™gögÜock o¿Ho° %∞tÿ%p\n" 
_


1410 
ho°
 
_
 
√xt_≥ndög
);

1411 
ho°
->
lock
 = 
√xt_≥ndög
;

1413 
	`HTTRACE
(
CORE_TRACE
, "Ho° c⁄√˘ U∆ockög Ho° %p\n" 
_
 
ho°
);

1414 
ho°
->
lock
 = 
NULL
;

1416  
°©us
;

1419 
	`HTTRACE
(
CORE_TRACE
, "Ho° c⁄√˘ Ho° %∞ÆªadyÜocked wôh %p\n" 
_
 
ho°
 _ ho°->
lock
);

1420 i‡((
°©us
 = 
	`HTHo°_addNë
(
ho°
, 
√t
)Ë=
HT_PENDING
) {

1421  
HT_PENDING
;

1424  
HT_ERROR
;

1425 
	}
}

1431 
PUBLIC
 
	$HTHo°_ªgi°î
 (
HTHo°
 * 
ho°
, 
HTNë
 * 
√t
, 
HTEvítTy≥
 
ty≥
)

1433 
HTEvít
 *
evít
;

1435 i‡(
ho°
 && 
√t
) {

1437 i‡(
ty≥
 =
HTEvít_CLOSE
) {

1442 
	`HTEvít_uƒegi°î
(
	`HTCh™√l_sockë
(
ho°
->
ch™√l
), 
HTEvít_READ
);

1443 
	`HTEvít_uƒegi°î
(
	`HTCh™√l_sockë
(
ho°
->
ch™√l
), 
HTEvít_WRITE
);

1444 
ho°
->
ªgi°îedF‹
 = 0;

1445  
YES
;

1450 i‡(
	`HTEvít_BITS
(
ty≥
Ë& 
√t
->
ªgi°îedF‹
)

1451  
NO
;

1452 
√t
->
ªgi°îedF‹
 ^
	`HTEvít_BITS
(
ty≥
);

1455 i‡(
ho°
->
ªgi°îedF‹
 & 
	`HTEvít_BITS
(
ty≥
))

1456  
YES
;

1457 
ho°
->
ªgi°îedF‹
 ^
	`HTEvít_BITS
(
ty≥
);

1459 #ifde‡
WWW_WIN_ASYNC


1461 
evít
 = *(
ho°
->
evíts
+
	`HTEvít_INDEX
(
HTEvít_CLOSE
));

1462 
	`HTEvít_ªgi°î
(
	`HTCh™√l_sockë
(
ho°
->
ch™√l
), 
HTEvít_CLOSE
, 
evít
);

1466 
evít
 = *(
ho°
->
evíts
+
	`HTEvít_INDEX
(
ty≥
));

1467 
evít
->
ªque°
 = 
	`HTNë_ªque°
 (
√t
);

1468  
	`HTEvít_ªgi°î
(
	`HTCh™√l_sockë
(
ho°
->
ch™√l
),

1469 
ty≥
, 
evít
);

1472  
YES
;

1474 
	`HTTRACE
(
CORE_TRACE
, "HTHost...... Don'tÑegisterÉvent with badárguments\n");

1475  
NO
;

1476 
	}
}

1478 
PUBLIC
 
	$HTHo°_uƒegi°î
 (
HTHo°
 * 
ho°
, 
HTNë
 * 
√t
, 
HTEvítTy≥
 
ty≥
)

1480 i‡(
ho°
 && 
√t
) {

1483 i‡(!(
	`HTEvít_BITS
(
ty≥
Ë& 
√t
->
ªgi°îedF‹
))

1484  
NO
;

1485 
√t
->
ªgi°îedF‹
 ^
	`HTEvít_BITS
(
ty≥
);

1488 i‡(!(
ho°
->
ªgi°îedF‹
 & 
	`HTEvít_BITS
(
ty≥
)))

1489  
YES
;

1490 
ho°
->
ªgi°îedF‹
 ^
	`HTEvít_BITS
(
ty≥
);

1494 i‡((
ty≥
 =
HTEvít_WRITE
 && 
	`isLa°InPùe
(
ho°
, 
√t
)) ||

1495 
ty≥
 =
HTEvít_CONNECT
)

1497 
	`HTEvít_uƒegi°î
(
	`HTCh™√l_sockë
(
ho°
->
ch™√l
), 
ty≥
);

1498  
YES
;

1500  
NO
;

1501 
	}
}

1506 
PUBLIC
 
BOOL
 
	$HTHo°_£tRemaöögRód
 (
HTHo°
 * 
ho°
, 
size_t
 
ªmaöög
)

1508 i‡(
ho°
 =
NULL
Ë 
NO
;

1509 
ho°
->
ªmaöögRód
 = 
ªmaöög
;

1510 
	`HTTRACE
(
PROT_TRACE
, "Ho°........ %d byã†ªmaöög \n" 
_
 
ªmaöög
);

1511 i‡(
ho°
->
brokí_pùe
 && 
ªmaöög
 == 0) {

1512 
	`HTTRACE
(
PROT_TRACE
, "Host........ Emtied out connection\n");

1514  
YES
;

1515 
	}
}

1517 
PUBLIC
 
size_t
 
	$HTHo°_ªmaöögRód
 (
HTHo°
 * 
ho°
)

1519  
ho°
 ? ho°->
ªmaöögRód
 : -1;

1520 
	}
}

1522 
PUBLIC
 
SockA
 * 
	$HTHo°_gëSockAddr
 (
HTHo°
 * 
ho°
)

1524 i‡(!
ho°
Ë 
NULL
;

1525  &
ho°
->
sock_addr
;

1526 
	}
}

1528 
PUBLIC
 
BOOL
 
	$HTHo°_£tHome
 (
HTHo°
 * 
ho°
, 
home
)

1530 i‡(!
ho°
Ë 
NO
;

1531 
ho°
->
home
 = home;

1532  
YES
;

1533 
	}
}

1535 
PUBLIC
 
	$HTHo°_home
 (
HTHo°
 * 
ho°
)

1537 i‡(!
ho°
)  0;

1538  
ho°
->
home
;

1539 
	}
}

1541 
PUBLIC
 
BOOL
 
	$HTHo°_£tRëry
 (
HTHo°
 * 
ho°
, 
ªåy
)

1543 i‡(!
ho°
Ë 
NO
;

1544 
ho°
->
ªåy
 =Ñetry;

1545  
YES
;

1546 
	}
}

1548 
PUBLIC
 
BOOL
 
	$HTHo°_de¸ó£Rëry
 (
HTHo°
 * 
ho°
)

1550 i‡(!
ho°
Ë 
NO
;

1552 i‡(
ho°
->
ªåy
 > 0) host->retry--;

1553  
YES
;

1555 
	}
}

1557 
PUBLIC
 
	$HTHo°_ªåy
 (
HTHo°
 * 
ho°
)

1559 i‡(!
ho°
)  0;

1560  
ho°
->
ªåy
;

1561 
	}
}

1564 
PRIVATE
 
BOOL
 
	$HTHo°_£tDNS5
 (
HTHo°
 * 
ho°
, 
HTdns
 * 
dns
)

1566 i‡(!
ho°
Ë 
NO
;

1567 
ho°
->
dns
 = dns;

1568  
YES
;

1569 
	}
}

1572 
PUBLIC
 
BOOL
 
	$HTHo°_£tCh™√l
 (
HTHo°
 * 
ho°
, 
HTCh™√l
 * 
ch™√l
)

1574 i‡(!
ho°
Ë 
NO
;

1575 
ho°
->
ch™√l
 = channel;

1576  
YES
;

1577 
	}
}

1579 
PUBLIC
 
HTNë
 * 
	$HTHo°_gëRódNë
(
HTHo°
 * 
ho°
)

1581  
ho°
 ? (
HTNë
 *Ë
	`HTLi°_fú°Obje˘
(ho°->
pùñöe
Ë: 
NULL
;

1582 
	}
}

1584 
PUBLIC
 
HTNë
 * 
	$HTHo°_gëWrôeNë
(
HTHo°
 * 
ho°
)

1586  
ho°
 ? (
HTNë
 *Ë
	`HTLi°_œ°Obje˘
(ho°->
pùñöe
Ë: 
NULL
;

1587 
	}
}

1593 
PUBLIC
 
HTI≈utSåóm
 * 
	$HTHo°_gëI≈ut
 (
HTHo°
 * 
ho°
, 
HTTøn•‹t
 * 
ç
,

1594 * 
∑øm
, 
mode
)

1596 i‡(
ho°
 && ho°->
ch™√l
 && 
ç
) {

1597 
HTCh™√l
 * 
ch
 = 
ho°
->
ch™√l
;

1598 
HTI≈utSåóm
 * 
öput
 = (*
ç
->
öput_√w
)(
ho°
, 
ch
, 
∑øm
, 
mode
);

1599 
	`HTCh™√l_£tI≈ut
(
ch
, 
öput
);

1600  
	`HTCh™√l_gëCh™√lISåóm
(
ch
);

1602 
	`HTTRACE
(
CORE_TRACE
, "Host Object. Can't create input stream\n");

1603  
NULL
;

1604 
	}
}

1606 
PUBLIC
 
HTOuçutSåóm
 * 
	$HTHo°_gëOuçut
 (
HTHo°
 * 
ho°
, 
HTTøn•‹t
 * 
ç
,

1607 * 
∑øm
, 
mode
)

1609 i‡(
ho°
 && ho°->
ch™√l
 && 
ç
) {

1610 
HTCh™√l
 * 
ch
 = 
ho°
->
ch™√l
;

1611 
HTOuçutSåóm
 * 
ouçut
 = (*
ç
->
ouçut_√w
)(
ho°
, 
ch
, 
∑øm
, 
mode
);

1612 
	`HTCh™√l_£tOuçut
(
ch
, 
ouçut
);

1613  
ouçut
;

1615 
	`HTTRACE
(
CORE_TRACE
, "Host Object. Can't create output stream\n");

1616  
NULL
;

1617 
	}
}

1619 
PUBLIC
 
HTOuçutSåóm
 * 
	$HTHo°_ouçut
 (
HTHo°
 * 
ho°
, 
HTNë
 * 
√t
)

1621 i‡(
ho°
 && ho°->
ch™√l
 && 
√t
) {

1622 
HTOuçutSåóm
 * 
ouçut
 = 
	`HTCh™√l_ouçut
(
ho°
->
ch™√l
);

1623  
ouçut
;

1625  
NULL
;

1626 
	}
}

1628 
PUBLIC
 
	$HTHo°_ªad
(
HTHo°
 * 
ho°
, 
HTNë
 * 
√t
)

1630 
HTI≈utSåóm
 * 
öput
 = 
	`HTCh™√l_öput
(
ho°
->
ch™√l
);

1631 i‡(
√t
 !
	`HTHo°_gëRódNë
(
ho°
)) {

1632 
	`HTHo°_ªgi°î
(
ho°
, 
√t
, 
HTEvít_READ
);

1633  
HT_WOULD_BLOCK
;

1642  
öput
 ? (*öput->
iß
->
ªad
)(öputË: 
HT_CLOSED
;

1643 
	}
}

1645 
PUBLIC
 
BOOL
 
	$HTHo°_£tC⁄sumed
(
HTHo°
 * 
ho°
, 
size_t
 
byãs
)

1647 
HTI≈utSåóm
 * 
öput
;

1648 i‡(!
ho°
 || !ho°->
ch™√l
Ë 
NO
;

1649 i‡((
öput
 = 
	`HTCh™√l_öput
(
ho°
->
ch™√l
)Ë=
NULL
)

1650  
NO
;

1651 
	`HTTRACE
(
CORE_TRACE
, "Ho°........Öassög %d byã†a†c⁄sumedÅÿ%p\n" 
_
 
byãs
 _ 
öput
);

1652  (*
öput
->
iß
->
c⁄sumed
)(öput, 
byãs
);

1653 
	}
}

1655 
PUBLIC
 
	$HTHo°_hash
 (
HTHo°
 * 
ho°
)

1657  
ho°
 ? ho°->
hash
 : -1;

1658 
	}
}

1660 
PUBLIC
 
BOOL
 
	$HTHo°_£tWrôeDñay
 (
HTHo°
 * 
ho°
, 
ms_t
 
dñay
)

1662 i‡(
ho°
 && 
dñay
 >= 0) {

1663 
ho°
->
dñay
 = delay;

1664  
YES
;

1666  
NO
;

1667 
	}
}

1669 
PUBLIC
 
ms_t
 
	$HTHo°_wrôeDñay
 (
HTHo°
 * 
ho°
)

1671  
ho°
 ? ho°->
dñay
 : 0;

1672 
	}
}

1674 
PUBLIC
 
	$HTHo°_födWrôeDñay
 (
HTHo°
 * 
ho°
, 
ms_t
 
œ°FlushTime
, 
buffSize
)

1677 
mtu
;

1678 
ªt
 = -1;

1679 
sockë
 = 
	`HTCh™√l_sockë
(
ho°
->
ch™√l
);

1680 #i‚de‡
WWW_MSWINDOWS


1681 
ªt
 = 
	`io˘l
(
sockë
, 666, ()&
mtu
);

1683 i‡((
ªt
 =0 && 
buffSize
 >
mtu
Ë|| 
ho°
->
f‹˚WrôeFlush
)

1685  
ho°
->
dñay
;

1687  
ho°
->
f‹˚WrôeFlush
 ? 0 : ho°->
dñay
;

1689 
	}
}

1691 
PUBLIC
 
BOOL
 
	$HTHo°_£tDeÁu…WrôeDñay
 (
ms_t
 
dñay
)

1693 i‡(
dñay
 >= 0) {

1694 
WrôeDñay
 = 
dñay
;

1695 
	`HTTRACE
(
CORE_TRACE
, "Ho°........ DeÁu… wrôêdñay i†%d ms\n" 
_
 
dñay
);

1696  
YES
;

1698  
NO
;

1699 
	}
}

1701 
PUBLIC
 
ms_t
 
	$HTHo°_deÁu…WrôeDñay
 ()

1703  
WrôeDñay
;

1704 
	}
}

1706 
PUBLIC
 
	$HTHo°_f‹˚Flush
(
HTHo°
 * 
ho°
)

1708 
HTNë
 * 
èrgëNë
 = (HTNë *Ë
	`HTLi°_œ°Obje˘
(
ho°
->
pùñöe
);

1709 
ªt
;

1710 i‡(
èrgëNë
 =
NULL
Ë 
HT_ERROR
;

1716 i‡(
ho°
->
öFlush
) {

1717 
	`HTTRACE
(
CORE_TRACE
, "Ho° Evít.. FLUSHÑeque°ed f‹ `%s\'\n, buàign‹ög iàa†we'ªáÃódyÖro˚ssögá flush i¿thi†ho°" 
_


1718 
	`HTAnch‹_physiˇl
(
	`HTReque°_™ch‹
(
	`HTNë_ªque°
(
èrgëNë
))));

1719  
HT_OK
;

1721 
	`HTTRACE
(
CORE_TRACE
, "Ho° Evít.. FLUSHÖas£dÅÿ`%s\'\n" 
_


1722 
	`HTAnch‹_physiˇl
(
	`HTReque°_™ch‹
(
	`HTNë_ªque°
(
èrgëNë
))));

1723 
ho°
->
f‹˚WrôeFlush
 = 
YES
;

1724 
ho°
->
öFlush
 = 
YES
;

1725 
ªt
 = (*
èrgëNë
->
evít
.
cbf
)(
	`HTCh™√l_sockë
(
ho°
->
ch™√l
),Å¨gëNë->evít.
∑øm
, 
HTEvít_FLUSH
);

1726 
ho°
->
f‹˚WrôeFlush
 = 
NO
;

1727 
ho°
->
öFlush
 = 
NO
;

1728  
ªt
;

1729 
	}
}

1734 
PUBLIC
 
	$HTHo°_£tC⁄ãxt
 (
HTHo°
 * 
me
, * 
c⁄ãxt
)

1736 i‡(
me
Ëme->
c⁄ãxt
 = context;

1737 
	}
}

1739 
PUBLIC
 * 
	$HTHo°_c⁄ãxt
 (
HTHo°
 * 
me
)

1741  
me
 ? me->
c⁄ãxt
 : 
NULL
;

1742 
	}
}

1744 
PUBLIC
 
	$HTHo°_evítTimeout
 ()

1746  
EvítTimeout
;

1747 
	}
}

1749 
PUBLIC
 
	$HTHo°_£tEvítTimeout
 (
mûlis
)

1751 
EvítTimeout
 = 
mûlis
;

1752 
	`HTTRACE
(
CORE_TRACE
, "Ho°........ SëtögÉvíàtimeouàtÿ%d ms\n" 
_
 
mûlis
);

1753 
	}
}

1755 
PUBLIC
 
BOOL
 
	$HTHo°_£tMaxPùñöedReque°s
 (
max
)

1757 i‡(
max
 > 1) {

1758 
MaxPùñöedReque°s
 = 
max
;

1759  
YES
;

1761  
NO
;

1762 
	}
}

1764 
PUBLIC
 
	$HTHo°_maxPùñöedReque°s
 ()

1766  
MaxPùñöedReque°s
;

1767 
	}
}

1769 
PUBLIC
 
	$HTHo°_£tA˘iv©eReque°CÆlback
 (
HTHo°_A˘iv©eReque°CÆlback
 * 
cbf
)

1771 
	`HTTRACE
(
CORE_TRACE
, "HTHo°...... Regi°îög %p\n" 
_
 
cbf
);

1772 
A˘iv©eReqCBF
 = 
cbf
;

1773 
	}
}

1775 
PRIVATE
 
	$HTHo°_A˘iv©eReque°
 (
HTNë
 * 
√t
)

1777 
HTReque°
 * 
ªque°
 = 
NULL
;

1778 i‡(!
A˘iv©eReqCBF
) {

1779 
	`HTTRACE
(
CORE_TRACE
, "HTHost...... No ActivateRequest callback handlerÑegistered\n");

1780  
HT_ERROR
;

1782 
ªque°
 = 
	`HTNë_ªque°
(
√t
);

1783  (*
A˘iv©eReqCBF
)(
ªque°
);

1784 
	}
}

1786 
PUBLIC
 
	$HTHo°_dißbÀ_PídögReqLaunch
 ()

1788 
DoPídögReqLaunch
 = 
NO
;

1789 
	}
}

1791 
PUBLIC
 
	$HTHo°_íabÀ_PídögReqLaunch
 ()

1793 
DoPídögReqLaunch
 = 
YES
;

1794 
	}
}

	@Library/src/HTHost.h

29 #i‚de‡
HTHOST_H


30 
	#HTHOST_H


	)

32 
_HTHo°
 
	tHTHo°
;

33 
	#HOST_HASH_SIZE
 
HT_M_HASH_SIZE


	)

35 
	~"HTCh™∆.h
"

36 
	~"HTReq.h
"

37 
	~"HTEvít.h
"

38 
	~"HTPrŸ.h
"

39 
	~"HTTimî.h
"

65 
HTHo°
 * 
HTHo°_√w
 (* 
ho°
, 
u_sh‹t
 
u_p‹t
);

66 
HTHo°
 * 
HTHo°_√wWP¨£
(
HTReque°
 * 
ªque°
, * 
uæ
, 
u_sh‹t
 
u_p‹t
);

67 
HTHo°_hash
 (
HTHo°
 * 
ho°
);

84 
HTHo°
 * 
HTHo°_föd
 (* 
ho°
);

94 
HTHo°_dñëeAŒ
 ();

106 
BOOL
 
HTHo°_isIdÀ
 (
HTHo°
 * 
ho°
);

124 * 
HTHo°_«me
 (
HTHo°
 * 
ho°
);

141 * 
HTHo°_˛ass
 (
HTHo°
 * 
ho°
);

142 
HTHo°_£tCœss
 (
HTHo°
 * 
ho°
, * 
s_˛ass
);

144 
HTHo°_vîsi⁄
 (
HTHo°
 * 
ho°
);

145 
HTHo°_£tVîsi⁄
 (
HTHo°
 * 
ho°
, 
vîsi⁄
);

155 
HTMëhod
 
HTHo°_publicMëhods
 (
HTHo°
 * 
me
);

156 
HTHo°_£tPublicMëhods
 (
HTHo°
 * 
me
, 
HTMëhod
 
mëhod£t
);

157 
HTHo°_≠≥ndPublicMëhods
 (
HTHo°
 * 
me
, 
HTMëhod
 
mëhod£t
);

167 * 
HTHo°_£rvî
 (
HTHo°
 * 
ho°
);

168 
BOOL
 
HTHo°_£tSîvî
 (
HTHo°
 * 
ho°
, c⁄° * 
£rvî
);

178 * 
HTHo°_u£rAgít
 (
HTHo°
 * 
ho°
);

179 
BOOL
 
HTHo°_£tU£rAgít
 (
HTHo°
 * 
ho°
, c⁄° * 
u£rAgít
);

199 * 
HTHo°_øngeUnôs
 (
HTHo°
 * 
ho°
);

200 
BOOL
 
HTHo°_£tR™geUnôs
 (
HTHo°
 * 
ho°
, c⁄° * 
unôs
);

201 
BOOL
 
HTHo°_isR™geUnôAc˚±abÀ
 (
HTHo°
 * 
ho°
, c⁄° * 
unô
);

212 
HTHo°_£tC⁄ãxt
 (
HTHo°
 * 
me
, * 
c⁄ãxt
);

213 * 
HTHo°_c⁄ãxt
 (
HTHo°
 * 
me
);

227 
HTHo°_addNë
 (
HTHo°
 * 
ho°
, 
HTNë
 * 
√t
);

228 
BOOL
 
HTHo°_dñëeNë
 (
HTHo°
 * 
ho°
, 
HTNë
 * 
√t
, 
°©us
);

230 
HTLi°
 * 
HTHo°_√t
 (
HTHo°
 * 
ho°
);

249 
HTHo°_c⁄√˘
 (
HTHo°
 * 
ho°
, 
HTNë
 * 
√t
, * 
uæ
);

251 
HTHo°_ac˚±
 (
HTHo°
 * 
ho°
, 
HTNë
 * 
√t
, * 
uæ
);

253 
HTHo°_li°í
 (
HTHo°
 * 
ho°
, 
HTNë
 * 
√t
, * 
uæ
);

265 
BOOL
 
HTHo°_£tClo£NŸifiˇti⁄
 (
HTHo°
 * 
ho°
, BOOL 
mode
);

266 
BOOL
 
HTHo°_˛o£NŸifiˇti⁄
 (
HTHo°
 * 
ho°
);

277 
BOOL
 
HTHo°_£tCh™√l
 (
HTHo°
 * 
ho°
, 
HTCh™√l
 * 
ch™√l
);

278 
HTCh™√l
 * 
HTHo°_ch™√l
 (
HTHo°
 * 
ho°
);

289 
BOOL
 
HTHo°_˛órCh™√l
 (
HTHo°
 * 
ho°
, 
°©us
);

305 
HTTøn•‹tMode
 
HTHo°_mode
 (
HTHo°
 * 
ho°
, 
BOOL
 * 
a˘ive
);

306 
BOOL
 
HTHo°_£tMode
 (
HTHo°
 * 
ho°
, 
HTTøn•‹tMode
 
mode
);

327 
HTNë
 * 
HTHo°_√xtPídögNë
 (
HTHo°
 * 
ho°
);

335 
HTHo°
 * 
HTHo°_√xtPídögHo°
 ();

348 
BOOL
 
HTHo°_œunchPídög
 (
HTHo°
 * 
ho°
);

359 
HTHo°_íabÀ_PídögReqLaunch
 ();

360 
HTHo°_dißbÀ_PídögReqLaunch
 ();

375 
BOOL
 
HTHo°_£tPîsi°ít
 (
HTHo°
 * 
ho°
, BOOL 
≥rsi°ít
,

376 
HTTøn•‹tMode
 
mode
);

377 
BOOL
 
HTHo°_isPîsi°ít
 (
HTHo°
 * 
ho°
);

398 
BOOL
 
HTHo°_£tA˘iveTimeout
 (
ms_t
 
timeout
);

399 
ms_t
 
HTHo°_a˘iveTimeout
 ();

406 
time_t
 
HTHo°_≥rsi°Timeout
 ();

407 
BOOL
 
HTHo°_£tPîsi°Timeout
 (
time_t
 
timeout
);

414 
HTHo°_£tPîsi°Expúes
 (
HTHo°
 * 
ho°
, 
time_t
 
expúes
);

415 
time_t
 
HTHo°_≥rsi°Expúes
 (
HTHo°
 * 
ho°
);

429 
HTHo°_£tReqsPîC⁄√˘i⁄
 (
HTHo°
 * 
ho°
, 
ªqs
);

430 
HTHo°_ªqsPîC⁄√˘i⁄
 (
HTHo°
 * 
ho°
);

431 
HTHo°_£tReqsMade
 (
HTHo°
 * 
ho°
, 
ªqs
);

432 
HTHo°_ªqsMade
 (
HTHo°
 * 
ho°
);

447 
HTNë
 * 
HTHo°_fú°Në
 (
HTHo°
 * 
ho°
);

448 
HTNë
 * 
HTHo°_gëRódNë
 (
HTHo°
 * 
ho°
);

449 
HTNë
 * 
HTHo°_gëWrôeNë
 (
HTHo°
 * 
ho°
);

457 
HTI≈utSåóm
 * 
HTHo°_gëI≈ut
 (
HTHo°
 * 
ho°
, 
HTTøn•‹t
 * 
å™•‹t
,

458 * 
∑øm
, 
mode
);

460 
HTOuçutSåóm
 * 
HTHo°_gëOuçut
 (
HTHo°
 * 
ho°
, 
HTTøn•‹t
 * 
ç
,

461 * 
∑øm
, 
mode
);

472 
HTHo°_ªad
(
HTHo°
 * 
ho°
, 
HTNë
 * 
√t
);

474 
BOOL
 
HTHo°_£tC⁄sumed
(
HTHo°
 * 
ho°
, 
size_t
 
byãs
);

475 
BOOL
 
HTHo°_£tRemaöögRód
(
HTHo°
 * 
ho°
, 
size_t
 
ªmaöaög
);

476 
size_t
 
HTHo°_ªmaöögRód
 (
HTHo°
 * 
ho°
);

495 
BOOL
 
HTHo°_£tMaxPùñöedReque°s
 (
max
);

496 
HTHo°_maxPùñöedReque°s
 ();

507 
HTHo°_numbîOfOut°™dögNëObje˘s
 (
HTHo°
 * 
ho°
);

508 
HTHo°_numbîOfPídögNëObje˘s
 (
HTHo°
 * 
ho°
);

523 
BOOL
 
HTHo°_ªcovîPùe
 (
HTHo°
 * 
ho°
);

524 
BOOL
 
HTHo°_doRecovî
 (
HTHo°
 * 
ho°
);

537 
BOOL
 
HTHo°_kûlPùe
 (
HTHo°
 * 
ho°
);

548 
HTHo°_ªgi°î
(
HTHo°
 * 
ho°
, 
HTNë
 * 
√t
, 
HTEvítTy≥
 
ty≥
);

549 
HTHo°_uƒegi°î
(
HTHo°
 * 
ho°
, 
HTNë
 * 
√t
, 
HTEvítTy≥
 
ty≥
);

550 
HTHo°_tickÀFú°Në
(
HTHo°
 * 
ho°
, 
HTEvítTy≥
 
ty≥
);

552 
SockA
 * 
HTHo°_gëSockAddr
(
HTHo°
 * 
ho°
);

565 
HTHo°_evítTimeout
 ();

566 
HTHo°_£tEvítTimeout
 (
mûlis
);

577 
BOOL
 
HTHo°_£tWrôeDñay
 (
HTHo°
 * 
ho°
, 
ms_t
 
dñay
);

578 
ms_t
 
HTHo°_wrôeDñay
 (
HTHo°
 * 
ho°
);

579 
HTHo°_födWrôeDñay
(
HTHo°
 * 
ho°
, 
ms_t
 
œ°FlushTime
, 
buffSize
);

588 
HTHo°_f‹˚Flush
(
HTHo°
 * 
ho°
);

596 
BOOL
 
HTHo°_£tDeÁu…WrôeDñay
 (
ms_t
 
dñay
);

597 
ms_t
 
HTHo°_deÁu…WrôeDñay
 ();

610 
BOOL
 
HTHo°_£tHome
 (
HTHo°
 * 
ho°
, 
home
);

611 
HTHo°_home
 (
HTHo°
 * 
ho°
);

613 
BOOL
 
HTHo°_£tRëry
 (
HTHo°
 * 
ho°
, 
ªåy
);

614 
HTHo°_ªåy
 (
HTHo°
 * 
ho°
);

615 
BOOL
 
HTHo°_de¸ó£Rëry
 (
HTHo°
 * 
ho°
);

626 
	tHTHo°_A˘iv©eReque°CÆlback
 (
	tHTReque°
 * 
	tªque°
);

627 
HTHo°_£tA˘iv©eReque°CÆlback


628 (
HTHo°_A˘iv©eReque°CÆlback
 * 
cbf
);

	@Library/src/HTHstMan.h

25 #i‚de‡
HTHSTMAN_H


26 
	#HTHSTMAN_H


	)

27 
	~"HTHo°.h
"

28 
	~"HTDNS.h
"

29 
	~"HTEvít.h
"

30 
	~"HTPrŸ.h
"

32 
	#PIPE_BUFFER_SIZE
 8192

	)

41 
	e_TCPSèã
 {

42 
	mTCP_DNS_ERROR
 = -3,

43 
	mTCP_ERROR
 = -2,

44 
	mTCP_CONNECTED
 = -1,

45 
	mTCP_BEGIN
 = 0,

46 
	mTCP_CHANNEL
,

47 
	mTCP_DNS
,

48 
	mTCP_NEED_SOCKET
,

49 
	mTCP_NEED_BIND
,

50 
	mTCP_NEED_LISTEN
,

51 
	mTCP_NEED_CONNECT
,

52 
	mTCP_IN_USE


53 } 
	tTCPSèã
;

55 
	s_HTHo°
 {

56 
	mhash
;

59 * 
	mho°«me
;

60 
u_sh‹t
 
	mu_p‹t
;

61 
time_t
 
	m¡ime
;

62 * 
	mty≥
;

63 
	mvîsi⁄
;

64 
HTMëhod
 
	mmëhods
;

65 * 
	m£rvî
;

66 * 
	mu£r_agít
;

67 * 
	mønge_unôs
;

70 
time_t
 
	mexpúes
;

71 
	mªqsPîC⁄√˘i⁄
;

72 
	mªqsMade
;

75 
HTLi°
 * 
	mpùñöe
;

76 
HTLi°
 * 
	m≥ndög
;

77 
HTNë
 * 
	mdoô
;

78 
HTNë
 * 
	mlock
;

79 
HTNë
 * 
	mli°íög
;

80 
BOOL
 
	m≥rsi°ít
;

81 
HTTøn•‹tMode
 
	mmode
;

82 
HTTimî
 * 
	mtimî
;

83 
BOOL
 
	mdo_ªcovî
;

84 
	mªcovîed
;

85 
BOOL
 
	m˛o£_nŸifiˇti⁄
;

86 
BOOL
 
	mbrokí_pùe
;

89 
HTCh™√l
 * 
	mch™√l
;

92 
HTdns
 * 
	mdns
;

93 
TCPSèã
 
	mt˝°©e
;

94 
SockA
 
	msock_addr
;

95 
	mªåy
;

96 
	mhome
;

97 
ms_t
 
	mc⁄√˘time
;

100 
HTEvít
 * 
	mevíts
[
HTEvít_TYPES
];

101 
HTEvítTy≥
 
	mªgi°îedF‹
;

102 
size_t
 
	mªmaöögRód
;

105 
ms_t
 
	mdñay
;

106 * 
	mc⁄ãxt
;

107 
	mf‹˚WrôeFlush
;

108 
	möFlush
;

112 
	#HTHo°_byãsRód
(
me
Ë((meË? (me)->
byãs_ªad
 : -1)

	)

113 
	#HTHo°_byãsWrôãn
(
me
Ë((meË? (me)->
byãs_wrôãn
 : -1)

	)

115 
	#HTHo°_£tByãsRód
(
me
,
l
Ë((meË? (me->
byãs_ªad
=÷)Ë: -1)

	)

116 
	#HTHo°_£tByãsWrôãn
(
me
,
l
Ë((meË? (me->
byãs_wrôãn
=÷)Ë:-1)

	)

117 
	#HTHo°_£tDNS
 (
ho°
, 
dns
Ë((
me
Ë? (me->dns=(dns)Ë:-1)

	)

	@Library/src/HTIOStream.h

30 #i‚de‡
HTIOSTREAM_H


31 
	#HTIOSTREAM_H


	)

33 
_HTI≈utSåóm
 
	tHTI≈utSåóm
;

34 
_HTOuçutSåóm
 
	tHTOuçutSåóm
;

36 
	~"HTLi°.h
"

37 
	~"HTSåóm.h
"

38 
	~"HTCh™∆.h
"

49 
	s_HTI≈utSåómCœss
 {

51 * 
	m«me
;

58 (*
	mÊush
Ë(
HTI≈utSåóm
 * 
	mme
);

69 (*
	m_‰ì
Ë(
HTI≈utSåóm
 * 
	mme
);

80 (*
	mab‹t
Ë(
HTI≈utSåóm
 * 
	mme
, 
HTLi°
 * 
	mîr‹li°
);

88 (*
	mªad
Ë(
HTI≈utSåóm
 * 
	mme
);

96 (*
	m˛o£
Ë(
HTI≈utSåóm
 * 
	mme
);

104 (*
	mc⁄sumed
Ë(
HTI≈utSåóm
 * 
	mme
, 
size_t
 
	mbyãs
);

113 } 
	tHTI≈utSåómCœss
;

126 
	s_HTOuçutSåómCœss
 {

128 * 
	m«me
;

130 (*
	mÊush
Ë(
HTOuçutSåóm
 * 
	mme
);

132 (*
	m_‰ì
Ë(
HTOuçutSåóm
 * 
	mme
);

134 (*
	mab‹t
Ë(
HTOuçutSåóm
 * 
	mme
, 
HTLi°
 * 
	mîr‹li°
);

136 (*
	mput_ch¨a˘î
)(
HTOuçutSåóm
 * 
	mme
, 
	mch
);

138 (*
	mput_°rög
Ë(
HTOuçutSåóm
 * 
	mme
, c⁄° * 
	m°r
);

140 (*
	mput_block
Ë(
HTOuçutSåóm
 * 
	mme
, c⁄° * 
	m°r
, 
	mÀn
);

150 (*
	m˛o£
Ë(
HTOuçutSåóm
 * 
	mme
);

159 } 
	tHTOuçutSåómCœss
;

182 
HTI≈utSåóm
 * 
	tHTI≈ut_√w
 (
	tHTHo°
 * 
	tho°
,

183 
	tHTCh™√l
 * 
	tch
,

184 * 
	t∑øm
,

185 
	tmode
);

193 
HTOuçutSåóm
 * 
	tHTOuçut_√w
 (
	tHTHo°
 * 
	tho°
,

194 
	tHTCh™√l
 * 
	tch
,

195 * 
	t∑øm
,

196 
	tmode
);

204 
HTOuçutSåóm
 * 
	tHTOuçutC⁄vîãr_√w
(

205 
	tHTHo°
 * 
	tho°
,

206 
	tHTCh™√l
 * 
	tch
,

207 * 
	t∑øm
,

208 
	tmode
,

209 
	tHTOuçutSåóm
 * 
	tèrgë
);

	@Library/src/HTIcons.c

18 
	~"wwwsys.h
"

19 
	~"WWWUtû.h
"

20 
	~"WWWC‹e.h
"

21 
	~"HTIc⁄s.h
"

23 
	s_HTIc⁄Node
 {

24 * 
	mic⁄_uæ
;

25 * 
	mic⁄_Æt
;

26 * 
	mty≥_ãm∂
;

30 
PRIVATE
 
HTIc⁄Node
 * 
	gic⁄_unknown
 = 
NULL
;

31 
PRIVATE
 
HTIc⁄Node
 * 
	gic⁄_bœnk
 = 
NULL
;

32 
PRIVATE
 
HTIc⁄Node
 * 
	gic⁄_∑ª¡
 = 
NULL
;

33 
PRIVATE
 
HTIc⁄Node
 * 
	gic⁄_dú
 = 
NULL
;

36 
PRIVATE
 
HTLi°
 * 
	gic⁄s
 = 
NULL
;

37 
PRIVATE
 
	gÆt_Àn
 = 0;

41 
PRIVATE
 
	$Æt_ªsize
 (* 
Æt
)

43 i‡(
Æt
) {

44 
Àn
 = 
	`°æí
(
Æt
);

45 i‡(
Àn
 > 
Æt_Àn
)ált_len =Üen;

47 
	}
}

49 
PRIVATE
 
BOOL
 
	$m©ch
 (* 
ãm∂
,

50 c⁄° * 
a˘uÆ
)

52 * 
c1
 = 
NULL
;

53 * 
c2
 = 
NULL
;

54 * 
¶ash1
;

55 * 
¶ash2
;

57 
	`SåAŒocC›y
(
c1
,
ãm∂
);

58 
	`SåAŒocC›y
(
c2
,
a˘uÆ
);

60 
¶ash1
 = 
	`°rchr
(
c1
,'/');

61 
¶ash2
 = 
	`°rchr
(
c2
,'/');

63 i‡(
¶ash1
 && 
¶ash2
) {

64 *
¶ash1
++ = 0;

65 *
¶ash2
++ = 0;

66  
	`HTSåM©ch
(
c1
,
c2
Ë&& HTSåM©ch(
¶ash1
,
¶ash2
);

68 i‡(!
¶ash1
 && !
¶ash2
)

69  
	`HTSåM©ch
(
c1
,
c2
Ë? 
YES
 : 
NO
;

71  
NO
;

72 
	}
}

75 
PRIVATE
 * 
	$¥efixed
 (c⁄° * 
«me
, c⁄° * 
¥efix
)

77 * 
ªt
 = 
NULL
;

78 i‡(
«me
) {

79 
Àn
 = 
¥efix
 ? 
	`°æí
(prefix) : 0;

80 i‡((
ªt
 = (*Ë
	`HT_MALLOC
(
Àn
 + 
	`°æí
(
«me
Ë+ 2)Ë=
NULL
)

81 
	`HT_OUTOFMEM
("prefixed");

82 i‡(
¥efix
) {

83 
	`°r˝y
(
ªt
, 
¥efix
);

84 i‡(*
¥efix
 &&Öªfix[
Àn
-1] !'/'Ë
	`°rˇt
(
ªt
, "/");

85 
	`°rˇt
(
ªt
, 
«me
);

87 
	`°r˝y
(
ªt
, 
«me
);

89  
ªt
;

90 
	}
}

92 
PUBLIC
 * 
	$HTIc⁄_uæ
 (
HTIc⁄Node
 * 
node
)

94  
node
 ?Çode->
ic⁄_uæ
 : 
NULL
;

95 
	}
}

100 
PUBLIC
 * 
	$HTIc⁄_Æã∫©ive
 (
HTIc⁄Node
 * 
node
, 
BOOL
 
bøckës
)

102 * 
ªt
 = 
NULL
;

103 i‡(
node
) {

104 * 
p
 = 
NULL
;

105 
Àn
 = 
node
->
ic⁄_Æt
 ? 
	`°æí
(node->icon_alt) : 0;

106 i‡((
p
 = 
ªt
 = (*Ë
	`HT_MALLOC
(
Æt_Àn
 + 3)Ë=
NULL
)

107 
	`HT_OUTOFMEM
("HTIcon_alt_string");

108 *
p
++ = 
bøckës
 ? '[' : ' ';

109 i‡(
node
->
ic⁄_Æt
Ë
	`°r˝y
(
p
,Çode->icon_alt);

110 
p
 +
Àn
;

111 
Àn
++ < 
Æt_Àn
Ë*
p
++=' ';

112 *
p
++ = 
bøckës
 ? ']' : ' ';

113 *
p
 = 0;

115  
ªt
;

116 
	}
}

128 
PUBLIC
 
BOOL
 
	$HTIc⁄_add
 (c⁄° * 
uæ
, c⁄° * 
¥efix
,

129 * 
Æt
, * 
ty≥_ãm∂
)

131 i‡(
uæ
 && 
ty≥_ãm∂
) {

132 
HTIc⁄Node
 * 
node
;

133 i‡((
node
 = (
HTIc⁄Node
 *Ë
	`HT_CALLOC
(1,(HTIc⁄Node))Ë=
NULL
)

134 
	`HT_OUTOFMEM
("HTAddIcon");

135 i‡(
uæ
Ë
node
->
ic⁄_uæ
 = 
	`¥efixed
(uæ, 
¥efix
);

136 i‡(
Æt
Ë
	`SåAŒocC›y
(
node
->
ic⁄_Æt
,ált);

137 i‡(
ty≥_ãm∂
Ë
	`SåAŒocC›y
(
node
->type_templ,Åype_templ);

138 i‡(!
ic⁄s
Ëic⁄†
	`HTLi°_√w
();

139 
	`HTLi°_addObje˘
(
ic⁄s
, (*Ë
node
);

140 
	`Æt_ªsize
(
Æt
);

141 
	`HTTRACE
(
PROT_TRACE
, "AddIc⁄..... %†=> SRC=\"%s\" ALT=\"%s\"\n" 
_


142 
ty≥_ãm∂
 
_
 
uæ
 _ 
Æt
 ?ált : "");

143  
YES
;

145  
NO
;

146 
	}
}

152 
PUBLIC
 
BOOL
 
	$HTIc⁄_addUnknown
 (c⁄° * 
uæ
, c⁄° * 
¥efix
,

153 * 
Æt
)

155 i‡((
ic⁄_unknown
 = (
HTIc⁄Node
 *Ë
	`HT_CALLOC
(1,(HTIc⁄Node)))==
NULL
)

156 
	`HT_OUTOFMEM
("HTAddUnknownIcon");

157 i‡(
uæ
Ë
ic⁄_unknown
->
ic⁄_uæ
 = 
	`¥efixed
(uæ, 
¥efix
);

158 i‡(
Æt
Ë
	`SåAŒocC›y
(
ic⁄_unknown
->
ic⁄_Æt
,ált);

159 
	`Æt_ªsize
(
Æt
);

160 
	`HTTRACE
(
PROT_TRACE
, "Ic⁄ádd.... UNKNOWN => SRC=\"%s\" ALT=\"%s\"\n" 
_
 
uæ
 _

161 
Æt
 ?ált : "");

162  
YES
;

163 
	}
}

169 
PUBLIC
 
BOOL
 
	$HTIc⁄_addBœnk
 (c⁄° * 
uæ
, c⁄° * 
¥efix
, * 
Æt
)

171 i‡((
ic⁄_bœnk
 = (
HTIc⁄Node
 *Ë
	`HT_CALLOC
(1,(HTIc⁄Node))Ë=
NULL
)

172 
	`HT_OUTOFMEM
("HTAddBlankIcon");

173 i‡(
uæ
Ë
ic⁄_bœnk
->
ic⁄_uæ
 = 
	`¥efixed
(uæ, 
¥efix
);

174 i‡(
Æt
Ë
	`SåAŒocC›y
(
ic⁄_bœnk
->
ic⁄_Æt
,ált);

175 
	`Æt_ªsize
(
Æt
);

176 
	`HTTRACE
(
PROT_TRACE
, "Ic⁄ádd.... BLANK => SRC=\"%s\" ALT=\"%s\"\n" 
_
 
uæ
 _

177 
Æt
 ?ált : "");

178  
YES
;

179 
	}
}

185 
PUBLIC
 
BOOL
 
	$HTIc⁄_addP¨ít
 (c⁄° * 
uæ
, c⁄° * 
¥efix
, * 
Æt
)

187 i‡((
ic⁄_∑ª¡
 = (
HTIc⁄Node
 *Ë
	`HT_CALLOC
(1,(HTIc⁄Node))Ë=
NULL
)

188 
	`HT_OUTOFMEM
("HTAddBlankIcon");

189 i‡(
uæ
Ë
ic⁄_∑ª¡
->
ic⁄_uæ
 = 
	`¥efixed
(uæ, 
¥efix
);

190 i‡(
Æt
Ë
	`SåAŒocC›y
(
ic⁄_∑ª¡
->
ic⁄_Æt
,ált);

191 
	`Æt_ªsize
(
Æt
);

192 
	`HTTRACE
(
PROT_TRACE
, "Ic⁄ádd.... PARENT => SRC=\"%s\" ALT=\"%s\"\n" 
_
 
uæ
 _

193 
Æt
 ?ált : "");

194  
YES
;

195 
	}
}

201 
PUBLIC
 
BOOL
 
	$HTIc⁄_addDú
 (c⁄° * 
uæ
, c⁄° * 
¥efix
, * 
Æt
)

203 i‡((
ic⁄_dú
 = (
HTIc⁄Node
 *Ë
	`HT_CALLOC
(1,(HTIc⁄Node))Ë=
NULL
)

204 
	`HT_OUTOFMEM
("HTAddBlankIcon");

205 i‡(
uæ
Ë
ic⁄_dú
->
ic⁄_uæ
 = 
	`¥efixed
(uæ, 
¥efix
);

206 i‡(
Æt
Ë
	`SåAŒocC›y
(
ic⁄_dú
->
ic⁄_Æt
,ált);

207 
	`Æt_ªsize
(
Æt
);

208 
	`HTTRACE
(
PROT_TRACE
, "Ic⁄ádd.... DIRECTORY => SRC=\"%s\" ALT=\"%s\"\n" 
_
 
uæ
 _

209 
Æt
 ?ált : "");

210  
YES
;

211 
	}
}

217 
PUBLIC
 
HTIc⁄Node
 * 
	$HTIc⁄_föd
 (
HTFûeMode
 
mode
,

218 
HTF‹m©
 
c⁄ã¡_ty≥
,

219 
HTEncodög
 
c⁄ã¡_ícodög
)

221 i‡(!
ic⁄_unknown
Ëic⁄_unknow¿
ic⁄_bœnk
;

222 i‡(
mode
 =
HT_IS_FILE
) {

223 c⁄° * 
˘
 = 
c⁄ã¡_ty≥
 ? 
	`HTAtom_«me
(c⁄ã¡_ty≥Ë: 
NULL
;

224 c⁄° * 
˚
 = 
c⁄ã¡_ícodög
 ? 
	`HTAtom_«me
(c⁄ã¡_ícodögË: 
NULL
;

225 
HTLi°
 * 
cur
 = 
ic⁄s
;

226 
HTIc⁄Node
 * 
node
;

228 (
node
 = (
HTIc⁄Node
*)
	`HTLi°_√xtObje˘
(
cur
))) {

229 * 
¶ash
 = 
	`°rchr
(
node
->
ty≥_ãm∂
,'/');

230 i‡((
˘
 && 
¶ash
 && 
	`m©ch
(
node
->
ty≥_ãm∂
,ct)) ||

231 (
˚
 && !
¶ash
 && 
	`HTSåM©ch
(
node
->
ty≥_ãm∂
,ce))) {

232  
node
;

235 } i‡(
mode
 =
HT_IS_DIR
) {

236  
ic⁄_dú
 ? ic⁄_dú : 
ic⁄_unknown
;

237 } i‡(
mode
 =
HT_IS_BLANK
) {

238  
ic⁄_bœnk
 ? ic⁄_bœnk : 
ic⁄_unknown
;

239 } i‡(
mode
 =
HT_IS_PARENT
) {

240  
ic⁄_∑ª¡
 ? ic⁄_∑ª¡ : 
ic⁄_unknown
;

242  
ic⁄_unknown
;

243 
	}
}

245 
PRIVATE
 
	$HTIc⁄Node_dñëe
 (
HTIc⁄Node
* 
pNode
)

247 i‡(
pNode
) {

248 
	`HT_FREE
(
pNode
->
ic⁄_uæ
);

249 
	`HT_FREE
(
pNode
->
ic⁄_Æt
);

250 
	`HT_FREE
(
pNode
->
ty≥_ãm∂
);

251 
	`HT_FREE
(
pNode
);

253 
	}
}

259 
PUBLIC
 
	$HTIc⁄_dñëeAŒ
 ()

261 if(
ic⁄s
 !
NULL
) {

262 
HTLi°
 * 
ic⁄Li°
 = 
ic⁄s
;

263 
HTIc⁄Node
 * 
node
;

264 (
node
 = (
HTIc⁄Node
*)
	`HTLi°_ªmoveLa°Obje˘
(
ic⁄Li°
))) {

265 
	`HTIc⁄Node_dñëe
(
node
);

268 
	`HTLi°_dñëe
(
ic⁄s
);

269 
ic⁄s
 = 
NULL
;

271 
	`HTIc⁄Node_dñëe
(
ic⁄_unknown
);

272 
ic⁄_unknown
 = 
NULL
;

273 
	`HTIc⁄Node_dñëe
(
ic⁄_bœnk
);

274 
ic⁄_bœnk
 = 
NULL
;

275 
	`HTIc⁄Node_dñëe
(
ic⁄_∑ª¡
);

276 
ic⁄_∑ª¡
 = 
NULL
;

277 
	`HTIc⁄Node_dñëe
(
ic⁄_dú
);

278 
ic⁄_dú
 = 
NULL
;

279 
	}
}

	@Library/src/HTIcons.h

31 #i‚de‡
HTICONS_H


32 
	#HTICONS_H


	)

34 
	~"WWWLib.h
"

39 
_HTIc⁄Node
 
	tHTIc⁄Node
;

52 
BOOL
 
HTIc⁄_add
 (c⁄° * 
uæ
, c⁄° * 
¥efix
,

53 * 
Æt
, * 
ty≥_ãm∂
);

69 
BOOL
 
HTIc⁄_addUnknown
 (c⁄° * 
uæ
, c⁄° * 
¥efix
,

70 * 
Æt
);

80 
BOOL
 
HTIc⁄_addBœnk
 (c⁄° * 
uæ
, c⁄° * 
¥efix
,

81 * 
Æt
);

91 
BOOL
 
HTIc⁄_addP¨ít
 (c⁄° * 
uæ
, c⁄° * 
¥efix
,

92 * 
Æt
);

101 
BOOL
 
HTIc⁄_addDú
 (c⁄° * 
uæ
, c⁄° * 
¥efix
,

102 * 
Æt
);

113 
	e_HTFûeMode
 {

114 
	mHT_IS_FILE
,

115 
	mHT_IS_DIR
,

116 
	mHT_IS_BLANK
,

117 
	mHT_IS_PARENT


118 } 
	tHTFûeMode
;

121 
HTIc⁄Node
 * 
HTIc⁄_föd
 (
HTFûeMode
 
mode
,

122 
HTF‹m©
 
c⁄ã¡_ty≥
,

123 
HTEncodög
 
c⁄ã¡_ícodög
);

134 * 
HTIc⁄_uæ
 (
HTIc⁄Node
 * 
node
);

145 * 
HTIc⁄_Æã∫©ive
 (
HTIc⁄Node
 * 
node
, 
BOOL
 
bøckës
);

155 
HTIc⁄_dñëeAŒ
 ();

	@Library/src/HTInet.c

14 
	~"wwwsys.h
"

15 
	~"WWWUtû.h
"

16 
	~"HTP¨£.h
"

17 
	~"HTAÀπ.h
"

18 
	~"HTEº‹.h
"

19 
	~"HTNëM™.h
"

20 
	~"HTDNS.h
"

21 
	~"HTI√t.h
"

23 #i‚de‡
DEFAULT_NEWS_HOST


24 
	#DEFAULT_NEWS_HOST
 "√ws"

	)

27 #i‚de‡
SERVER_FILE


28 
	#SERVER_FILE
 "/u§/loˇl/lib/∫/£rvî"

	)

38 
PUBLIC
 * 
	$HTEºnoSåög
 (
îr‹numbî
)

40 * 
msg
 = 
NULL
;

41 #ifde‡
_WINSOCKAPI_


42 i‡((
msg
 = (*Ë
	`HT_MALLOC
(64)Ë=
NULL
)

43 
	`HT_OUTOFMEM
("HTErrnoString");

44 *
msg
 = '\0';

45 
	`•rötf
(
msg
, "WöSockÑï‹ãdÉº‹=%ld", 
	`WSAGëLa°Eº‹
());

47 #ifde‡
HAVE_STRERROR


48 
	`SåAŒocC›y
(
msg
, 
	`°ªº‹
(
îr‹numbî
));

50 #ifde‡
HAVE_SYS_ERRLIST


51 #ifde‡
HAVE_SYS_NERR


52 i‡(
î∫o
 < 
sys_√º
)

53 
	`SåAŒocC›y
(
msg
, 
sys_îæi°
[
î∫o
]);

55 
	`SåAŒocC›y
(
msg
, "UnknownÉrror");

57 
	`SåAŒocC›y
(
msg
, 
sys_îæi°
[
î∫o
]);

60 #ifde‡
VMS


61 i‡((
msg
 = (*Ë
	`HT_MALLOC
(64)Ë=
NULL
)

62 
	`HT_OUTOFMEM
("HTErrnoString");

63 *
msg
 = '\0';

64 
	`•rötf
(
msg
, "UnixÉºno=%ld dec, VMSÉº‹=%lx hex", 
îr‹numbî
,

65 
vaxc$î∫o
);

67 
	`SåAŒocC›y
(
msg
, "ErrorÇumberÇotÅranslated!");

72  
msg
;

73 
	}
}

78 
PUBLIC
 
	$HTI√tSètus
 (
î∫um
, * 
whîe
)

80 #ifde‡
VMS


81 
	`HTTRACE
(
CORE_TRACE
, "Sy°em Eº‹ Unix = %ld dec\n" 
_
 
î∫o
);

82 
	`HTTRACE
(
CORE_TRACE
, "Sy°em Eº‹ VMS = %lx hex\n" 
_
 
vaxc$î∫o
);

83  (-
vaxc$î∫o
);

85 #ifde‡
_WINSOCKAPI_


86 
	`HTTRACE
(
CORE_TRACE
, "Sy°em Eº‹ Unix = %ld dec\n" 
_
 
î∫o
);

87 
	`HTTRACE
(
CORE_TRACE
, "Sy°em Eº‹ WöSockÉº‹=%lx hex\n" 
_


88 
	`WSAGëLa°Eº‹
());

89  (-
î∫um
);

91 #ifde‡
HTDEBUG


92 i‡(
CORE_TRACE
) {

93 * 
îrmsg
 = 
	`HTEºnoSåög
(
î∫um
);

94 
	`HTTRACE
(
CORE_TRACE
, "Sy°em Eº‹ %dá·î cÆ»tÿ%s(ËÁûed\n............ %s\n" 
_


95 
î∫o
 
_
 
whîe
 _ 
îrmsg
);

96 
	`HT_FREE
(
îrmsg
);

99  (-
î∫um
);

102 
	}
}

119 
PUBLIC
 
	$HTC¨döÆ
 (* 
p°©us
,

120 ** 
µ
,

121 
max_vÆue
)

123 
n
=0;

124 i‡–(**
µ
<'0') || (**pp>'9')) {

125 *
p°©us
 = -3;

128 (**
µ
>='0'Ë&& (**µ<='9')Ë
n
 =Ç*10 + *((*pp)++) - '0';

130 i‡(
n
>
max_vÆue
) {

131 *
p°©us
 = -4;

135  
n
;

136 
	}
}

142 #ifde‡
WWWLIB_SIG


147 
	~<sig«l.h
>

149 
PUBLIC
 
	$HTSëSig«l
 ()

155 i‡(
	`sig«l
(
SIGPIPE
, 
SIG_IGN
Ë=
SIG_ERR
) {

156 
	`HTTRACE
(
CORE_TRACE
, "HTSignal.... Can't catch SIGPIPE\n");

158 
	`HTTRACE
(
CORE_TRACE
, "HTSignal.... Ignoring SIGPIPE\n");

160 
	}
}

163 
PUBLIC
 
	$HTSëSig«l
 (Ë{ 
	}
}

178 
PUBLIC
 c⁄° * 
	$HTI√tSåög
 (
SockA
 * 
sö
)

180 #i‚de‡
DECNET


185  
	`öë_¡ﬂ
(
sö
->
sö_addr
);

187 
°rög
[16];

188 
	`•rötf
(
°rög
, "%d.%d.%d.%d",

189 ()*((*)(&
sö
->
sö_addr
)+0),

190 ()*((*)(&
sö
->
sö_addr
)+1),

191 ()*((*)(&
sö
->
sö_addr
)+2),

192 ()*((*)(&
sö
->
sö_addr
)+3));

193  
°rög
;

197 
	}
}

209 
PUBLIC
 
	$HTP¨£I√t
 (
HTHo°
 * 
ho°
, * 
ho°«me
, 
HTReque°
 * 
ªque°
)

211 
°©us
 = 1;

212 
SockA
 *
sö
 = &
ho°
->
sock_addr
;

214 #ifde‡
DECNET


218 
sö
->
sdn_«m
.
n_Àn
 = 
	`mö
(
DN_MAXNAML
, 
	`°æí
(
ho°«me
));

219 
	`°∫˝y
 (
sö
->
sdn_«m
.
n_«me
, 
ho°«me
, sö->sdn_«m.
n_Àn
 + 1);

221 
	`HTTRACE
(
CORE_TRACE
, "DEC√t: P¨£dáddªs†a†obje˘Çumbî %d o¿ho° %.6s...\n" 
_


222 
sö
->
sdn_objnum
 
_
 
ho°«me
);

225 *
°Ωå
 = 
ho°«me
;

226 *
°Ωå
) {

227 i‡(*
°Ωå
 == ':') {

228 *
°Ωå
 = '\0';

231 i‡(!
	`isdigô
((Ë*
°Ωå
) && *strptr != '.')

233 
°Ωå
++;

235 i‡(!*
°Ωå
) {

236 #ifde‡
GUSI


237 
sö
->
sö_addr
 = 
	`öë_addr
(
ho°«me
);

239 
sö
->
sö_addr
.
s_addr
 = 
	`öë_addr
(
ho°«me
);

242 * 
p‹t
 = 
	`°rchr
(
ho°«me
, ':');

243 i‡(
p‹t
) *port = '\0';

244 
°©us
 = 
	`HTGëHo°ByName
(
ho°
, 
ho°«me
, 
ªque°
);

246 #ifde‡
HTDEBUG


247 i‡(
°©us
 > 0)

248 
	`HTTRACE
(
CORE_TRACE
, "P¨£I√t...á†p‹à%d o¿%†wôh %d homes\n" 
_


249 (Ë
	`¡ohs
(
sö
->
sö_p‹t
Ë
_
 
	`HTI√tSåög
(söË_ 
°©us
);

253  
°©us
;

254 
	}
}

265 
PRIVATE
 * 
	$HTGëDomaöName
 ()

267 * 
ho°
 = 
	`HTGëHo°Name
();

268 * 
domaö
;

269 i‡(
ho°
 && *host) {

270 i‡((
domaö
 = 
	`°rchr
(
ho°
, '.')Ë!
NULL
)

271  ++
domaö
;

275  
NULL
;

276 
	}
}

296 
PUBLIC
 * 
	$HTGëHo°Name
 ()

298 * 
ho°«me
 = 
NULL
;

299 
fqdn
 = 0;

300 
«me
[
MAXHOSTNAMELEN
+1];

301 *(
«me
+
MAXHOSTNAMELEN
) = '\0';

303 #i‡
	`deföed
(
HAVE_SYSINFO
Ë&& deföed(
SI_HOSTNAME
)

304 i‡(!
fqdn
 && 
	`sysöfo
(
SI_HOSTNAME
, 
«me
, 
MAXHOSTNAMELEN
) > 0) {

305 * 
dŸ
 = 
	`°rchr
(
«me
, '.');

306 
	`HTTRACE
(
CORE_TRACE
, "Ho°Name.... sysöfÿßy†`%s\'\n" 
_
 
«me
);

307 
	`SåAŒocC›y
(
ho°«me
, 
«me
);

308 
fqdn
 = 
dŸ
 ? 2 : 1;

312 #ifde‡
HAVE_GETHOSTNAME


313 i‡(!
fqdn
 && 
	`gëho°«me
(
«me
, 
MAXHOSTNAMELEN
) == 0) {

314 * 
dŸ
 = 
	`°rchr
(
«me
, '.');

315 
	`HTTRACE
(
CORE_TRACE
, "Ho°Name.... gëho°«mêßy†`%s\'\n" 
_
 
«me
);

316 
	`SåAŒocC›y
(
ho°«me
, 
«me
);

317 
fqdn
 = 
dŸ
 ? 2 : 1;

321 #ifde‡
RESOLV_CONF


324 
FILE
 *
Â
;

325 i‡(
fqdn
==1 && (
Â
 = 
	`f›í
(
RESOLV_CONF
, "r")Ë!
NULL
) {

326 
buf„r
[80];

327 *(
buf„r
+79) = '\0';

328 
	`fgës
(
buf„r
, 79, 
Â
)) {

329 i‡(!
	`°∫ˇ£comp
(
buf„r
, "domain", 6) ||

330 !
	`°∫ˇ£comp
(
buf„r
, "search", 6)) {

331 *
domaö°r
 = 
buf„r
+6;

332 *
íd
;

333 *
domaö°r
 == ' ' || *domainstr == '\t')

334 
domaö°r
++;

335 
íd
 = 
domaö°r
;

336 *
íd
 && !
	`is•a˚
(() *end))

337 
íd
++;

338 *
íd
 = '\0';

339 i‡(*
domaö°r
) {

340 
	`SåAŒocC©
(
ho°«me
, ".");

341 
	`SåAŒocC©
(
ho°«me
, 
domaö°r
);

342 
fqdn
 = 2;

347 
	`f˛o£
(
Â
);

352 #ifde‡
HAVE_GETDOMAINNAME


354 i‡(
fqdn
==1) {

355 i‡(
	`gëdomaö«me
(
«me
, 
MAXHOSTNAMELEN
)) {

356 
	`HTTRACE
(
CORE_TRACE
, "HostName.... Can't get domainÇame\n");

357 
	`SåAŒocC›y
(
ho°«me
, "");

358  
NULL
;

363 i‡(
	`°∫cmp
(
«me
, 
ho°«me
, (Ë
	`°æí
(hostname))) {

364 *
domaö
 = 
	`°rchr
(
«me
, '.');

365 i‡(!
domaö
)

366 
domaö
 = 
«me
;

367 
	`SåAŒocC©
(
ho°«me
, 
domaö
);

372 i‡(
ho°«me
) {

373 *
°Ωå
 = 
ho°«me
;

374 *
°Ωå
) {

375 *
°Ωå
 = 
	`TOLOWER
(*strptr);

376 
°Ωå
++;

378 i‡(*(
ho°«me
+
	`°æí
(hostname)-1) == '.')

379 *(
ho°«me
+
	`°æí
(hostname)-1) = '\0';

380 
	`HTTRACE
(
CORE_TRACE
, "Ho°Name.... FQDN i†`%s\'\n" 
_
 
ho°«me
);

382  
ho°«me
;

383 
	}
}

402 
PUBLIC
 * 
	$HTGëMaûAddªss
 ()

404 #ifde‡
HT_REENTRANT


405 
«me
[
HT_LOGNAME_MAX
];

406 
ªsu…
;

408 #ifde‡
WWW_MSWINDOWS


409 
«me
[256];

410 
bufSize
 = (
«me
);

412 #ifde‡
HAVE_PWD_H


413 
∑sswd
 * 
pw_öfo
 = 
NULL
;

415 * 
logö
 = 
NULL
;

417 #ifde‡
WWW_MSWINDOWS


418 i‡(!
logö
 && 
	`GëU£rName
(
«me
, &
bufSize
Ë!
TRUE
)

419 
	`HTTRACE
(
CORE_TRACE
, "MailAddress. GetUsernameÑeturns NO\n");

422 #ifde‡
HAVE_CUSERID


423 i‡(!
logö
 && (logö = (*Ë
	`cu£rid
(
NULL
)) == NULL)

424 
	`HTTRACE
(
CORE_TRACE
, "MailAddress. cuseridÑeturns NULL\n");

427 #ifde‡
HAVE_GETLOGIN


428 #ifde‡
GETLOGIN_R_RETURNS_POINTER


429 i‡(!
logö
 && (logö = (*Ë
	`gëlogö_r
(
«me
, 
HT_LOGNAME_MAX
)Ë=
NULL
)

430 #ñi‡
	`deföed
(
GETLOGIN_R_RETURNS_INT
)

431 i‡(!
logö
 && (
ªsu…
 = 
	`gëlogö_r
(
«me
, 
HT_LOGNAME_MAX
)) == 0)

433 
logö
 = &
«me
[0];

437 i‡(!
logö
 && (logö = (*Ë
	`gëlogö
()Ë=
NULL
)

439 
	`HTTRACE
(
CORE_TRACE
, "MailAddress. getloginÑeturns NULL\n");

442 #ifde‡
HAVE_PWD_H


443 i‡(!
logö
 && (
pw_öfo
 = 
	`gëpwuid
(
	`gëuid
())Ë!
NULL
)

444 
logö
 = 
pw_öfo
->
pw_«me
;

447 i‡(!
logö
 && (logö = 
	`gëív
("LOGNAME")Ë=
NULL
)

448 
	`HTTRACE
(
CORE_TRACE
, "MailAddress. LOGNAMEÇot found\n");

450 i‡(!
logö
 && (logö = 
	`gëív
("USER")Ë=
NULL
)

451 
	`HTTRACE
(
CORE_TRACE
, "MailAddress. USERÇot found\n");

453 i‡(!
logö
Ëlogö = 
HT_DEFAULT_LOGIN
;

455 i‡(
logö
) {

456 * 
domaö
 = 
NULL
;

457 * 
maûaddªss
 = 
NULL
;

458 
	`SåAŒocC›y
(
maûaddªss
, 
logö
);

459 
	`SåAŒocC©
(
maûaddªss
, "@");

460 i‡((
domaö
 = 
	`HTGëHo°Name
()Ë!
NULL
) {

461 
	`SåAŒocC©
(
maûaddªss
, 
domaö
);

462 
	`HT_FREE
(
domaö
);

464  
maûaddªss
;

466  
NULL
;

467 
	}
}

484 
PUBLIC
 * 
	$HTGëNewsSîvî
 ()

486 * 
√wsho°
 = 
NULL
;

487 
buf„r
[80];

489 #ifde‡
NeXTSãp


490 i‡((
√wsho°
 = 
	`NXGëDeÁu…VÆue
("WorldWideWeb","NewsHost")) == 0)

491 i‡((
√wsho°
 = 
	`NXGëDeÁu…VÆue
("News","NewsHost")) == 0)

492 
√wsho°
 = 
DEFAULT_NEWS_HOST
;

494 i‡((
√wsho°
 = (*Ë
	`gëív
("NNTPSERVER")Ë=
NULL
) {

495 
FILE
 *
Â
 = 
	`f›í
(
SERVER_FILE
, "r");

496 *(
buf„r
+79) = '\0';

497 i‡(
Â
) {

498 i‡(
	`fgës
(
buf„r
, 79, 
Â
)) {

499 *
íd
;

500 
√wsho°
 = 
buf„r
;

501 *
√wsho°
 == ' ' || *newshost == '\t')

502 
√wsho°
++;

503 
íd
 = 
√wsho°
;

504 *
íd
 && !
	`is•a˚
(() *end))

505 
íd
++;

506 *
íd
 = '\0';

508 
	`f˛o£
(
Â
);

514 i‡(!
√wsho°
 || !*√wsho°Ë√wsho° = 
DEFAULT_NEWS_HOST
;

518 * 
ªsu…
 = 
NULL
;

519 
	`SåAŒocC›y
(
ªsu…
, 
√wsho°
);

521 * 
°Ωå
 = 
ªsu…
;

522 *
°Ωå
) {

523 *
°Ωå
 = 
	`TOLOWER
(*strptr);

524 
°Ωå
++;

527  
ªsu…
;

529 
	}
}

535 
PUBLIC
 
time_t
 
	$HTGëTimeZ⁄eOff£t
 ()

537 
time_t
 
HTTimeZ⁄e
 = -1;

538 i‡(
HTTimeZ⁄e
 != -1)  HTTimeZone;

539 #ifde‡
HAVE_TIMEZONE


541 
time_t
 
cur_t
 = 
	`time
(
NULL
);

542 #ifde‡
HT_REENTRANT


543 
tm
 
lo˘ime
;

544 
tm
 *
loˇl
 = (tm *Ë
	`loˇ…ime_r
(&
cur_t
, &
lo˘ime
);

546 
tm
 *
loˇl
 = 
	`loˇ…ime
(&
cur_t
);

548 #ifde‡
HAVE_DAYLIGHT


549 i‡(
daylight
 && 
loˇl
->
tm_isd°
>0) {

551 i‡(
loˇl
->
tm_isd°
>0) {

553 #ifde‡
HAVE_ALTZONE


554 
HTTimeZ⁄e
 = 
Ætz⁄e
;

557 #ifde‡
__CYGWIN__


558 
HTTimeZ⁄e
 = 
_timez⁄e
 - 3600;

560 
HTTimeZ⁄e
 = 
timez⁄e
 - 3600;

564 #ifde‡
__CYGWIN__


565 
HTTimeZ⁄e
 = 
_timez⁄e
;

567 
HTTimeZ⁄e
 = 
timez⁄e
;

570 
HTTimeZ⁄e
 = -HTTimeZone;

571 
	`HTTRACE
(
CORE_TRACE
, "TimeZ⁄e.... GMT + (%02dËhour†(ö˛udög DST)\n" 
_


572 (Ë
HTTimeZ⁄e
/3600);

575 #ifde‡
HAVE_TM_GMTOFF


577 
time_t
 
cur_t
 = 
	`time
(
NULL
);

578 #ifde‡
HT_REENTRANT


579 
tm
 
lo˘ime
;

580 
	`loˇ…ime_r
(&
cur_t
, &
lo˘ime
);

582 
tm
 * 
loˇl
 = 
	`loˇ…ime
(&
cur_t
);

584 
HTTimeZ⁄e
 = 
loˇl
->
tm_gmtoff
;

585 
	`HTTRACE
(
CORE_TRACE
, "TimeZ⁄e.... GMT + (%02dËhour†(ö˛udög DST)\n" 
_


586 ()
loˇl
->
tm_gmtoff
 / 3600);

589 
	`HTTRACE
(
CORE_TRACE
, "TimeZone.... Not defined\n");

592  
HTTimeZ⁄e
;

593 
	}
}

600 
PUBLIC
 * 
	$HTGëTmpFûeName
 (c⁄° * 
abs_dú
)

602 * 
ªsu…
 = 
NULL
;

603 #ifde‡
HAVE_TEMPNAM


604 * 
ívtmpdú
 = 
NULL
;

605 
size_t
 
Àn
 = 0;

606 i‡(
abs_dú
 && *abs_dir) {

607 * 
tmpdú
 = 
	`gëív
("TMPDIR");

608 i‡(
tmpdú
)

609 
Àn
 = 
	`°æí
(
tmpdú
);

610 i‡(
Àn
) {

611 i‡(!(
ívtmpdú
 = (*Ë
	`HT_REALLOC
”nvtmpdú, 
Àn
 + 8)))

612 
	`HT_OUTOFMEM
("HTGetTmpFileName");

613 
	`°r˝y
(
ívtmpdú
, "TMPDIR=");

614 
	`°r˝y
(
ívtmpdú
 + 7, 
tmpdú
);

615 
	`puãnv
("TMPDIR=");

618 #ifde‡
__CYGWIN__


619 
ªsu…
 = 
	`ãm≤am
(
abs_dú
, "");

621 
ªsu…
 = 
	`ãm≤am
(
abs_dú
, 
NULL
);

623 i‡(
Àn
)

624 
	`puãnv
(
ívtmpdú
);

631 * 
off£t
 = 
NULL
;

632 i‡(!(
ªsu…
 = (*Ë
	`HT_MALLOC
((
abs_dú
 ? 
	`°æí
(abs_dir) : 0) +

633 
HT_MAX_TMPNAM
 + 2)))

634 
	`HT_OUTOFMEM
("HTGetTmpFileName");

636 #ifde‡
WWW_MSWINDOWS


637 i‡(
abs_dú
) {

639 i‡(
abs_dú
 && *abs_dú==
DIR_SEPARATOR_CHAR
) {

641 
	`°r˝y
(
ªsu…
, 
abs_dú
);

642 
off£t
 = 
ªsu…
+
	`°æí
(result);

643 i‡(*(
off£t
-1Ë!
DIR_SEPARATOR_CHAR
) *offset++ = DIR_SEPARATOR_CHAR;

645 #ifde‡
HT_REENTRANT


646 
	`tm≤am_r
(
off£t
);

648 
	`tm≤am
(
off£t
);

652 * 
‹ig
 = 
	`°ºchr
(
off£t
, 
DIR_SEPARATOR_CHAR
);

653 * 
de°
 = 
off£t
;

654 i‡(
‹ig
++Ë(*
de°
++ = *orig++));

657 
off£t
 = 
ªsu…
;

658 #ifde‡
HT_REENTRANT


659 
	`tm≤am_r
(
off£t
);

661 
	`tm≤am
(
off£t
);

663 
off£t
 = 
ªsu…
;

666  
ªsu…
;

667 
	}
}

672 
PUBLIC
 
ms_t
 
	$HTGëTimeInMûlis
 ()

674 #ifde‡
WWW_MSWINDOWS


675  
	`GëTickCou¡
();

677 #ifde‡
HAVE_GETTIMEOFDAY


678 
timevÆ
 
ç
;

679 
	`gëtimeofday
(&
ç
, 
NULL
);

680 (
ç
.
tv_£c
 * 1000Ë+ (ç.
tv_u£c
 / 1000);

682 ((
ms_t
) 0);

685 
	}
}

	@Library/src/HTInet.h

27 #i‚de‡
HTINET_H


28 
	#HTINET_H


	)

29 
	~"HTReq.h
"

30 
	~"HTH°M™.h
"

42 * 
HTEºnoSåög
 (
î∫um
);

43 
HTI√tSètus
 (
î∫um
, * 
whîe
);

56 
HTC¨döÆ
 (* 
p°©us
,

57 ** 
µ
,

58 
max_vÆue
);

71 c⁄° * 
HTI√tSåög
 (
sockaddr_ö
 * 
sö
);

83 
HTP¨£I√t
 (
HTHo°
 * 
ho°
, * 
ho°«me
, 
HTReque°
 * 
ªque°
);

93 
time_t
 
HTGëTimeZ⁄eOff£t
 ();

102 
ms_t
 
HTGëTimeInMûlis
 ();

113 * 
HTGëHo°Name
 ();

127 #i‚de‡
HT_DEFAULT_LOGIN


128 
	#HT_DEFAULT_LOGIN
 "libwww"

	)

131 * 
HTGëMaûAddªss
 ();

140 * 
HTGëNewsSîvî
 ();

152 * 
HTGëTmpFûeName
 (c⁄° * 
dú
);

166 #ifde‡
WWWLIB_SIG


167 
HTSëSig«l
 ();

	@Library/src/HTInit.c

15 
	~"wwwsys.h
"

16 
	~"WWWUtû.h
"

17 
	~"WWWC‹e.h
"

19 #ifde‡
HT_MUX


20 
	~"WWWMux.h
"

23 
	~"HTInô.h
"

25 #i‚de‡
W3C_ICONS


26 
	#W3C_ICONS
 "w3c-ic⁄s"

	)

29 
	#ICON_LOCATION
 "/ic⁄s/"

	)

37 
PUBLIC
 
	$HTC⁄vîãrInô
 (
HTLi°
 * 
c
)

43 
	`HTC⁄vîsi⁄_add
(
c
,"*/*", "www/debug", 
HTBœckHﬁeC⁄vîãr
, 1.0, 0.0, 0.0);

50 
	`HTMIME_£tSaveSåóm
 (
HTSaveLoˇŒy
);

56 
	`HTC⁄vîsi⁄_add
(
c
,"mesßge/rfc822", "*/*", 
HTMIMEC⁄vît
, 1.0, 0.0, 0.0);

57 
	`HTC⁄vîsi⁄_add
(
c
,"mesßge/x-rfc822-foŸ", "*/*", 
HTMIMEFoŸî
, 1.0, 0.0, 0.0);

58 
	`HTC⁄vîsi⁄_add
(
c
,"mesßge/x-rfc822-hód", "*/*", 
HTMIMEHódî
, 1.0, 0.0, 0.0);

59 
	`HTC⁄vîsi⁄_add
(
c
,"mesßge/x-rfc822-c⁄t", "*/*", 
HTMIMEC⁄töue
, 1.0, 0.0, 0.0);

60 
	`HTC⁄vîsi⁄_add
(
c
,"mesßge/x-rfc822-upgøde","*/*", 
HTMIMEUpgøde
, 1.0, 0.0, 0.0);

61 
	`HTC⁄vîsi⁄_add
(
c
,"mesßge/x-rfc822-∑πül","*/*", 
HTMIMEP¨tül
, 1.0, 0.0, 0.0);

62 #i‚de‡
NO_CACHE


63 
	`HTC⁄vîsi⁄_add
(
c
,"www/x-rfc822-hódîs","*/*", 
HTCacheC›yHódîs
, 1.0, 0.0, 0.0);

65 
	`HTC⁄vîsi⁄_add
(
c
,"mu…ù¨t/*", "*/*", 
HTBound¨y
, 1.0, 0.0, 0.0);

66 
	`HTC⁄vîsi⁄_add
(
c
,"ãxt/∂aö", "ãxt/html", 
HTPœöToHTML
, 1.0, 0.0, 0.0);

72 
	`HTC⁄vîsi⁄_add
(
c
,"ãxt/x-hâp", "*/*", 
HTTPSètus_√w
, 1.0, 0.0, 0.0);

75 
	`HTC⁄vîsi⁄_add
(
c
,"ãxt/x-g›hî", "www/¥e£¡", 
HTG›hîMíu
, 1.0, 0.0, 0.0);

76 
	`HTC⁄vîsi⁄_add
(
c
,"ãxt/x-cso", "www/¥e£¡", 
HTG›hîCSO
, 1.0, 0.0, 0.0);

77 
	`HTC⁄vîsi⁄_add
(
c
,"ãxt/x-wais-sour˚", "*/*", 
HTWSRCC⁄vît
, 1.0, 0.0, 0.0);

80 
	`HTC⁄vîsi⁄_add
(
c
,"ãxt/x-¬ç-li°", "*/*", 
HTNewsLi°
, 1.0, 0.0, 0.0);

81 
	`HTC⁄vîsi⁄_add
(
c
,"ãxt/x-¬ç-ovî", "*/*", 
HTNewsGroup
, 1.0, 0.0, 0.0);

86 #ifde‡
HT_EXPAT


87 
	`HTC⁄vîsi⁄_add
(
c
, "ãxt/xml", "*/*", 
HTXML_√w
, 1.0, 0.0, 0.0);

88 
	`HTC⁄vîsi⁄_add
(
c
, "≠∂iˇti⁄/xml", "*/*", 
HTXML_√w
, 1.0, 0.0, 0.0);

95 
	`HTC⁄vîsi⁄_add
(
c
,"www/unknown", "*/*", 
HTGuess_√w
, 1.0, 0.0, 0.0);

101 
	`HTC⁄vîsi⁄_add
(
c
,"www/ˇche", "*/*", 
HTCacheWrôî
, 1.0, 0.0, 0.0);

102 
	`HTC⁄vîsi⁄_add
(
c
,"www/ˇche-≠≥nd", "*/*", 
HTCacheAµíd
, 1.0, 0.0, 0.0);

108 
	`HTC⁄vîsi⁄_add
(
c
,"≠∂iˇti⁄/x-www-ruÀs","*/*", 
HTRuÀs
, 1.0, 0.0, 0.0);

114 
	`HTC⁄vîsi⁄_add
(
c
,"*/*", "www/¥e£¡", 
HTSaveC⁄vîãr
, 0.3, 0.0, 0.0);

115 
	}
}

123 
PUBLIC
 
	$HTPª£¡îInô
 (
HTLi°
 * 
c
)

129 
	`HTPª£¡©i⁄_£tC⁄vîãr
(
HTSaveAndExecuã
);

131 #ifde‡
NeXT


132 
	`HTPª£¡©i⁄_add
(
c
,"≠∂iˇti⁄/po°s¸ùt", "›í %s", 
NULL
, 1.0, 2.0, 0.0);

135 
	`HTPª£¡©i⁄_add
(
c
,"image/gif", "›í %s", 
NULL
, 0.3, 2.0, 0.0);

136 
	`HTPª£¡©i⁄_add
(
c
,"image/tiff", "›í %s", 
NULL
, 1.0, 2.0, 0.0);

137 
	`HTPª£¡©i⁄_add
(
c
,"audio/basic", "›í %s", 
NULL
, 1.0, 2.0, 0.0);

138 
	`HTPª£¡©i⁄_add
(
c
,"*/*", "›í %s", 
NULL
, 0.05, 0.0, 0.0);

140 i‡(
	`gëív
("DISPLAY")) {

141 
	`HTPª£¡©i⁄_add
(
c
,"≠∂iˇti⁄/po°s¸ùt", "gho°võw %s", 
NULL
, 1.0, 3.0, 0.0);

142 
	`HTPª£¡©i⁄_add
(
c
,"image/gif", "xv %s", 
NULL
, 1.0, 3.0, 0.0);

143 
	`HTPª£¡©i⁄_add
(
c
,"image/tiff", "xv %s", 
NULL
, 1.0, 3.0, 0.0);

144 
	`HTPª£¡©i⁄_add
(
c
,"image/j≥g", "xv %s", 
NULL
, 1.0, 3.0, 0.0);

145 
	`HTPª£¡©i⁄_add
(
c
,"image/≤g", "xv %s", 
NULL
, 1.0, 3.0, 0.0);

148 
	}
}

157 
PUBLIC
 
	$HTF‹m©Inô
 (
HTLi°
 * 
c
)

159 
	`HTC⁄vîãrInô
(
c
);

160 
	`HTPª£¡îInô
(
c
);

162 
	}
}

168 
PUBLIC
 
	$HTTøns„rEncodîInô
 (
HTLi°
 * 
c
)

170 #ifde‡
HT_ZLIB


171 
	`HTCodög_add
(
c
, "deÊ©e", 
NULL
, 
HTZLib_öÊ©e
, 1.0);

173 
	`HTCodög_add
(
c
, "chunked", 
HTChunkedEncodî
, 
HTChunkedDecodî
, 1.0);

174 
	}
}

180 
PUBLIC
 
	$HTC⁄ã¡EncodîInô
 (
HTLi°
 * 
c
)

182 #ifde‡
HT_ZLIB


183 
	`HTCodög_add
(
c
, "deÊ©e", 
NULL
, 
HTZLib_öÊ©e
, 1.0);

185 
	}
}

193 
PUBLIC
 
	$HTBef‹eInô
 ()

195 
	`HTNë_addBef‹e
(
HTCªdítülsFûãr
, "hâp://*", 
NULL
, 
HT_FILTER_LATE
);

196 
	`HTNë_addBef‹e
(
HTPEP_bef‹eFûãr
, "hâp://*", 
NULL
, 
HT_FILTER_LATE
);

197 
	`HTNë_addBef‹e
(
HTRuÀFûãr
, 
NULL
, NULL, 
HT_FILTER_LATE
);

198 
	`HTNë_addBef‹e
(
HTProxyFûãr
, 
NULL
, NULL, 
HT_FILTER_LATE
);

199 
	}
}

208 
PUBLIC
 
	$HTA·îInô
 ()

210 
	`HTNë_addA·î
(
HTAuthFûãr
, "hâp://*", 
NULL
, 
HT_NO_ACCESS
, 
HT_FILTER_MIDDLE
);

211 
	`HTNë_addA·î
(
HTAuthFûãr
, "hâp://*", 
NULL
, 
HT_REAUTH
, 
HT_FILTER_MIDDLE
);

212 
	`HTNë_addA·î
(
HTPEP_a·îFûãr
, "hâp://*", 
NULL
, 
HT_ALL
, 
HT_FILTER_MIDDLE
);

213 
	`HTNë_addA·î
(
HTRedúe˘Fûãr
, "hâp://*", 
NULL
, 
HT_PERM_REDIRECT
, 
HT_FILTER_MIDDLE
);

214 
	`HTNë_addA·î
(
HTRedúe˘Fûãr
, "hâp://*", 
NULL
, 
HT_FOUND
, 
HT_FILTER_MIDDLE
);

215 
	`HTNë_addA·î
(
HTRedúe˘Fûãr
, "hâp://*", 
NULL
, 
HT_SEE_OTHER
, 
HT_FILTER_MIDDLE
);

216 
	`HTNë_addA·î
(
HTRedúe˘Fûãr
, "hâp://*", 
NULL
, 
HT_TEMP_REDIRECT
, 
HT_FILTER_MIDDLE
);

217 
	`HTNë_addA·î
(
HTAuthInfoFûãr
, "hâp://*", 
NULL
, 
HT_ALL
, 
HT_FILTER_MIDDLE
);

218 
	`HTNë_addA·î
(
HTU£ProxyFûãr
, "hâp://*", 
NULL
, 
HT_USE_PROXY
, 
HT_FILTER_MIDDLE
);

219 
	`HTNë_addA·î
(
HTInfoFûãr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LATE
);

220 
	}
}

226 
PUBLIC
 
	$HTAAInô
 ()

228 
	`HTAA_√wModuÀ
 ("basic", 
HTBasic_gíî©e
, 
HTBasic_∑r£
, 
NULL
,

229 
HTBasic_dñëe
);

230 #ifde‡
HT_MD5


231 
	`HTAA_√wModuÀ
 ("dige°", 
HTDige°_gíî©e
, 
HTDige°_∑r£
,

232 
HTDige°_upd©eInfo
, 
HTDige°_dñëe
);

234 
	}
}

241 
PUBLIC
 
	$HTNëInô
 ()

243 
	`HTBef‹eInô
();

244 
	`HTA·îInô
();

245 
	}
}

253 
PUBLIC
 
	$HTAÀπInô
 ()

255 
	`HTAÀπ_add
(
HTProgªss
, 
HT_A_PROGRESS
);

256 
	`HTAÀπ_add
(
HTEº‹_¥öt
, 
HT_A_MESSAGE
);

257 
	`HTAÀπ_add
(
HTC⁄fúm
, 
HT_A_CONFIRM
);

258 
	`HTAÀπ_add
(
HTProm±
, 
HT_A_PROMPT
);

259 
	`HTAÀπ_add
(
HTProm±Passw‹d
, 
HT_A_SECRET
);

260 
	`HTAÀπ_add
(
HTProm±U£∫ameAndPassw‹d
, 
HT_A_USER_PW
);

261 
	}
}

267 
PUBLIC
 
	$HTTøn•‹tInô
 ()

269 
	`HTTøn•‹t_add
("t˝", 
HT_TP_SINGLE
, 
HTRódî_√w
, 
HTWrôî_√w
);

270 
	`HTTøn•‹t_add
("buf„ªd_t˝", 
HT_TP_SINGLE
, 
HTRódî_√w
, 
HTBuf„rWrôî_√w
);

271 #ifde‡
HT_MUX


272 
	`HTTøn•‹t_add
("mux", 
HT_TP_INTERLEAVE
, 
HTRódî_√w
, 
HTBuf„rWrôî_√w
);

274 #i‚de‡
NO_UNIX_IO


275 
	`HTTøn•‹t_add
("loˇl", 
HT_TP_SINGLE
, 
HTRódî_√w
, 
HTWrôî_√w
);

277 
	`HTTøn•‹t_add
("loˇl", 
HT_TP_SINGLE
, 
HTANSIRódî_√w
, 
HTANSIWrôî_√w
);

279 
	}
}

285 
PUBLIC
 
	$HTPrŸocﬁInô
 ()

287 #i‚de‡
DECNET


288 
	`HTPrŸocﬁ_add
("·p", "t˝", 
FTP_PORT
, 
NO
, 
HTLﬂdFTP
, 
NULL
);

289 
	`HTPrŸocﬁ_add
("¬ç", "t˝", 
NEWS_PORT
, 
NO
, 
HTLﬂdNews
, 
NULL
);

290 
	`HTPrŸocﬁ_add
("√ws", "t˝", 
NEWS_PORT
, 
NO
, 
HTLﬂdNews
, 
NULL
);

291 
	`HTPrŸocﬁ_add
("g›hî", "t˝", 
GOPHER_PORT
, 
NO
, 
HTLﬂdG›hî
, 
NULL
);

292 #ifde‡
HT_DIRECT_WAIS


293 
	`HTPrŸocﬁ_add
("wais", "t˝", 
WAIS_PORT
, 
YES
, 
HTLﬂdWAIS
, 
NULL
);

296 #ifde‡
HT_MUX


297 
	`HTPrŸocﬁ_add
("hâp", "mux", 
HTTP_PORT
, 
NO
, 
HTLﬂdHTTP
, 
NULL
);

299 
	`HTPrŸocﬁ_add
("hâp", "buf„ªd_t˝", 
HTTP_PORT
, 
NO
, 
HTLﬂdHTTP
, 
NULL
);

301 #i‚de‡
NO_UNIX_IO


302 
	`HTPrŸocﬁ_add
("fûe", "loˇl", 0, 
NO
, 
HTLﬂdFûe
, 
NULL
);

303 
	`HTPrŸocﬁ_add
("ˇche", "loˇl", 0, 
NO
, 
HTLﬂdCache
, 
NULL
);

305 
	`HTPrŸocﬁ_add
("fûe", "loˇl", 0, 
YES
, 
HTLﬂdFûe
, 
NULL
);

306 
	`HTPrŸocﬁ_add
("ˇche", "loˇl", 0, 
YES
, 
HTLﬂdCache
, 
NULL
);

308 
	`HTPrŸocﬁ_add
("ã ë", "", 0, 
YES
, 
HTLﬂdTñ√t
, 
NULL
);

309 
	`HTPrŸocﬁ_add
("ä3270", "", 0, 
YES
, 
HTLﬂdTñ√t
, 
NULL
);

310 
	`HTPrŸocﬁ_add
("æogö", "", 0, 
YES
, 
HTLﬂdTñ√t
, 
NULL
);

311 
	}
}

317 
PUBLIC
 
	$HTPrŸocﬁPªem±iveInô
 ()

319 #i‚de‡
DECNET


320 
	`HTPrŸocﬁ_add
("·p", "t˝", 
FTP_PORT
, 
YES
, 
HTLﬂdFTP
, 
NULL
);

321 
	`HTPrŸocﬁ_add
("¬ç", "t˝", 
NEWS_PORT
, 
YES
, 
HTLﬂdNews
, 
NULL
);

322 
	`HTPrŸocﬁ_add
("√ws", "t˝", 
NEWS_PORT
, 
YES
, 
HTLﬂdNews
, 
NULL
);

323 
	`HTPrŸocﬁ_add
("g›hî", "t˝", 
GOPHER_PORT
, 
YES
, 
HTLﬂdG›hî
, 
NULL
);

324 #ifde‡
HT_DIRECT_WAIS


325 
	`HTPrŸocﬁ_add
("wais", "", 
WAIS_PORT
, 
YES
, 
HTLﬂdWAIS
, 
NULL
);

329 
	`HTPrŸocﬁ_add
("hâp", "buf„ªd_t˝", 
HTTP_PORT
, 
YES
, 
HTLﬂdHTTP
, 
NULL
);

330 
	`HTPrŸocﬁ_add
("fûe", "loˇl", 0, 
YES
, 
HTLﬂdFûe
, 
NULL
);

331 
	`HTPrŸocﬁ_add
("ã ë", "", 0, 
YES
, 
HTLﬂdTñ√t
, 
NULL
);

332 
	`HTPrŸocﬁ_add
("ä3270", "", 0, 
YES
, 
HTLﬂdTñ√t
, 
NULL
);

333 
	`HTPrŸocﬁ_add
("æogö", "", 0, 
YES
, 
HTLﬂdTñ√t
, 
NULL
);

334 
	`HTPrŸocﬁ_add
("ˇche","loˇl",0,
YES
,
HTLﬂdCache
, 
NULL
);

335 
	}
}

344 
PUBLIC
 
	$HTIc⁄Inô
 (c⁄° * 
uæ_¥efix
)

346 c⁄° * 
¥efix
 = 
uæ_¥efix
 ? uæ_¥efix : 
ICON_LOCATION
;

348 
	`HTIc⁄_addBœnk
("bœnk.xbm", 
¥efix
, 
NULL
);

349 
	`HTIc⁄_addDú
("dúe˘‹y.xbm", 
¥efix
, "DIR");

350 
	`HTIc⁄_addP¨ít
("back.xbm", 
¥efix
, "UP");

351 
	`HTIc⁄_addUnknown
("unknown.xbm", 
¥efix
, 
NULL
);

353 
	`HTIc⁄_add
("unknown.xbm", 
¥efix
, 
NULL
, "*/*");

354 
	`HTIc⁄_add
("bö¨y.xbm", 
¥efix
, "BIN", "binary");

355 
	`HTIc⁄_add
("unknown.xbm", 
¥efix
, 
NULL
, "www/unknown");

356 
	`HTIc⁄_add
("ãxt.xbm", 
¥efix
, "TXT", "text/*");

357 
	`HTIc⁄_add
("image.xbm", 
¥efix
, "IMG", "image/*");

358 
	`HTIc⁄_add
("movõ.xbm", 
¥efix
, "MOV", "video/*");

359 
	`HTIc⁄_add
("sound.xbm", 
¥efix
, "AU", "audio/*");

360 
	`HTIc⁄_add
("èr.xbm", 
¥efix
, "TAR", "multipart/x-tar");

361 
	`HTIc⁄_add
("èr.xbm", 
¥efix
, "TAR", "multipart/x-gtar");

362 
	`HTIc⁄_add
("com¥es£d.xbm",
¥efix
, "CMP", "x-compress");

363 
	`HTIc⁄_add
("com¥es£d.xbm",
¥efix
, "GZP", "x-gzip");

364 
	`HTIc⁄_add
("ödex.xbm", 
¥efix
, "IDX", "application/x-gopher-index");

365 
	`HTIc⁄_add
("ödex2.xbm", 
¥efix
, "CSO", "application/x-gopher-cso");

366 
	`HTIc⁄_add
("ã ë.xbm", 
¥efix
, "TEL", "application/x-gopher-telnet");

367 
	`HTIc⁄_add
("unknown.xbm", 
¥efix
, "DUP", "application/x-gopher-duplicate");

368 
	`HTIc⁄_add
("unknown.xbm", 
¥efix
, "TN", "application/x-gopher-tn3270");

372 * 
curdú
 = 
	`HTGëCuºítDúe˘‹yURL
();

373 * 
vútuÆ
 = 
	`HTP¨£
(
ICON_LOCATION
, 
curdú
,

374 
PARSE_ACCESS
|
PARSE_HOST
|
PARSE_PATH
|
PARSE_PUNCTUATION
);

375 * 
physiˇl
 = 
NULL
;

376 
	`SåAŒocC©
(
vútuÆ
, "*");

379 * 
°r
 = 
NULL
;

380 i‡((
°r
 = (*Ë
	`HT_MALLOC
(
	`°æí
(
W3C_ICONS
Ë+ 4)Ë=
NULL
)

381 
	`HT_OUTOFMEM
("HTIconInit");

382 
	`°r˝y
(
°r
, 
W3C_ICONS
);

383 i‡(*(
°r
 + 
	`°æí
(°rË- 1Ë!'/'Ë
	`°rˇt
(str, "/");

384 
	`°rˇt
(
°r
, "*");

385 
physiˇl
 = 
	`HTP¨£
(
°r
, 
curdú
,

386 
PARSE_ACCESS
|
PARSE_HOST
|
PARSE_PATH
|
PARSE_PUNCTUATION
);

387 
	`HT_FREE
(
°r
);

389 
	`HTRuÀ_addGlobÆ
(
HT_Pass
, 
vútuÆ
, 
physiˇl
);

390 
	`HT_FREE
(
vútuÆ
);

391 
	`HT_FREE
(
physiˇl
);

392 
	`HT_FREE
(
curdú
);

394 
	}
}

400 
PUBLIC
 
	$HTMIMEInô
 ()

403 * 
°rög
;

404 
HTP¨£rCÆlback
 * 
pH™dÀr
;

405 } 
fixedH™dÀrs
[] = {

406 {"ac˚±", &
HTMIME_ac˚±
},

407 {"ac˚±-ch¨£t", &
HTMIME_ac˚±Ch¨£t
},

408 {"ac˚±-ícodög", &
HTMIME_ac˚±Encodög
},

409 {"ac˚±-œnguage", &
HTMIME_ac˚±L™guage
},

410 {"ac˚±-ønges", &
HTMIME_ac˚±R™ges
},

411 {"auth‹iz©i⁄", 
NULL
},

412 {"ˇche-c⁄åﬁ", &
HTMIME_ˇcheC⁄åﬁ
},

413 {"c⁄√˘i⁄", &
HTMIME_c⁄√˘i⁄
},

414 {"c⁄ã¡-ícodög", &
HTMIME_c⁄ã¡Encodög
},

415 {"c⁄ã¡-Àngth", &
HTMIME_c⁄ã¡Lígth
},

416 {"c⁄ã¡-ønge", &
HTMIME_c⁄ã¡R™ge
},

417 {"c⁄ã¡-å™s„r-ícodög", &
HTMIME_c⁄ã¡Tøns„rEncodög
},

418 {"c⁄ã¡-ty≥", &
HTMIME_c⁄ã¡Ty≥
},

419 {"dige°-MesßgeDige°", &
HTMIME_mesßgeDige°
},

420 {"kìp-Æive", &
HTMIME_kìpAlive
},

421 {"lök", &
HTMIME_lök
},

422 {"loˇti⁄", &
HTMIME_loˇti⁄
},

423 {"max-f‹w¨ds", &
HTMIME_maxF‹w¨ds
},

424 {"mime-vîsi⁄", 
NULL
},

425 {"¥agma", &
HTMIME_¥agma
},

426 {"¥Ÿocﬁ", &
HTMIME_¥Ÿocﬁ
},

427 {"¥Ÿocﬁ-öfo", &
HTMIME_¥ŸocﬁInfo
},

428 {"¥Ÿocﬁ-ªque°", &
HTMIME_¥ŸocﬁReque°
},

429 {"¥oxy-authítiˇã", &
HTMIME_authítiˇã
},

430 {"¥oxy-auth‹iz©i⁄", &
HTMIME_¥oxyAuth‹iz©i⁄
},

431 {"public", &
HTMIME_public
},

432 {"ønge", &
HTMIME_ønge
},

433 {"ª„ªr", &
HTMIME_ª„ªr
},

434 {"ªåy-a·î", &
HTMIME_ªåyA·î
},

435 {"£rvî", &
HTMIME_£rvî
},

436 {"åaûî", &
HTMIME_åaûî
},

437 {"å™s„r-ícodög", &
HTMIME_å™s„rEncodög
},

438 {"upgøde", &
HTMIME_upgøde
},

439 {"u£r-agít", &
HTMIME_u£rAgít
},

440 {"v¨y", &
HTMIME_v¨y
},

441 {"vü", &
HTMIME_vü
},

442 {"w¨nög", &
HTMIME_w¨nög
},

443 {"www-authítiˇã", &
HTMIME_authítiˇã
},

444 {"authítiˇti⁄-öfo", &
HTMIME_authítiˇti⁄Info
},

445 {"¥oxy-authítiˇti⁄-öfo", &
HTMIME_¥oxyAuthítiˇti⁄Info
}

447 
i
;

449 
i
 = 0; i < (
fixedH™dÀrs
)/(fixedHandlers[0]); i++)

450 
	`HTHódî_addP¨£r
(
fixedH™dÀrs
[
i
].
°rög
, 
NO
,

451 
fixedH™dÀrs
[
i
].
pH™dÀr
);

452 
	}
}

	@Library/src/HTInit.h

38 #i‚de‡
HTINIT_H


39 
	#HTINIT_H


	)

40 
	~"WWWLib.h
"

41 
	~"WWWAµ.h
"

51 
	~"WWWTøns.h
"

53 
HTTøn•‹tInô
 ();

65 
	~"WWWHTTP.h
"

66 
	~"WWWFûe.h
"

67 
	~"WWWFTP.h
"

68 
	~"WWWG›he.h
"

69 
	~"WWWTñ¡.h
"

70 
	~"WWWNews.h
"

72 #ifde‡
HT_DIRECT_WAIS


73 
	~"WWWWAIS.h
"

76 #i‚de‡
FTP_PORT


77 
	#FTP_PORT
 21

	)

79 #i‚de‡
NEWS_PORT


80 
	#NEWS_PORT
 119

	)

82 #i‚de‡
GOPHER_PORT


83 
	#GOPHER_PORT
 70

	)

85 #i‚de‡
WAIS_PORT


86 
	#WAIS_PORT
 666

	)

88 #i‚de‡
HTTP_PORT


89 
	#HTTP_PORT
 80

	)

92 
	#HTAc˚ssInô
 
HTPrŸocﬁInô


	)

94 
HTPrŸocﬁInô
 ();

96 
HTPrŸocﬁPªem±iveInô
 ();

109 
	~"WWWMIME.h
"

110 
	~"WWWAµ.h
"

112 
HTMIMEInô
 ();

125 
	~"WWWAµ.h
"

137 
	~"WWWMIME.h
"

138 
	~"WWWHTML.h
"

139 
	~"WWWSåóm.h
"

140 
	~"WWWDú.h
"

141 
	~"WWWCache.h
"

143 #ifde‡
HT_EXPAT


144 
	~"WWWXML.h
"

147 
HTC⁄vîãrInô
 (
HTLi°
 * 
c⁄vîsi⁄s
);

161 
HTPª£¡îInô
 (
HTLi°
 * 
c⁄vîsi⁄s
);

171 
HTF‹m©Inô
 (
HTLi°
 * 
c⁄vîsi⁄s
);

181 
	~"WWWHTTP.h
"

183 
HTTøns„rEncodîInô
 (
HTLi°
 * 
ícodögs
);

193 
	~"WWWZù.h
"

195 
HTC⁄ã¡EncodîInô
 (
HTLi°
 * 
ícodögs
);

214 
	~"WWWAµ.h
"

216 
HTBef‹eInô
 ();

227 
HTA·îInô
 ();

237 
HTNëInô
 ();

250 
HTAAInô
 ();

260 
	~"WWWAµ.h
"

262 
HTAÀπInô
 ();

276 
	~"WWWFûe.h
"

278 
HTIc⁄Inô
 (c⁄° * 
uæ_¥efix
);

	@Library/src/HTLib.c

12 #i‡!
deföed
(
HT_DIRECT_WAIS
Ë&& !deföed(
HT_DEFAULT_WAIS_GATEWAY
)

13 
	#HT_DEFAULT_WAIS_GATEWAY
 "hâp://www.w3.‹g:8001/"

	)

17 
	~"WWWUtû.h
"

18 
	~"HTAnch‹.h
"

19 
	~"HTPrŸ.h
"

20 
	~"HTDNS.h
"

21 
	~"HTUTªe.h
"

22 
	~"HTLib.h
"

24 #i‚de‡
W3C_VERSION


25 
	#W3C_VERSION
 "unknown"

	)

28 #i‚de‡
HT_DEFAULT_USER


29 
	#HT_DEFAULT_USER
 "LIBWWW_GENERIC_USER"

	)

32 
PRIVATE
 * 
	gHTAµName
 = 
NULL
;

33 
PRIVATE
 * 
	gHTAµVîsi⁄
 = 
NULL
;

35 
PRIVATE
 * 
	gHTLibName
 = "libwww";

36 
PRIVATE
 * 
	gHTLibVîsi⁄
 = 
W3C_VERSION
;

38 
PRIVATE
 
BOOL
 
	gHTSecuª
 = 
NO
;

40 
PRIVATE
 
BOOL
 
	göôülized
 = 
NO
;

42 
PRIVATE
 
HTU£rProfûe
 * 
	gU£rProfûe
 = 
NULL
;

49 
PUBLIC
 c⁄° * 
	$HTLib_≠pName
 ()

51  
HTAµName
 ? HTAppName : "UNKNOWN";

52 
	}
}

54 
PUBLIC
 
BOOL
 
	$HTLib_£tAµName
 (c⁄° * 
«me
)

56 i‡(
«me
) {

57 * 
±r
;

58 
	`SåAŒocC›y
(
HTAµName
, 
«me
);

59 
±r
 = 
HTAµName
;

60 *
±r
) {

61 i‡(
	`is•a˚
((Ë*
±r
)) *ptr = '_';

62 
±r
++;

64  
YES
;

66  
NO
;

67 
	}
}

69 
PUBLIC
 c⁄° * 
	$HTLib_≠pVîsi⁄
 ()

71  
HTAµVîsi⁄
 ? HTAppVersion : "0.0";

72 
	}
}

74 
PUBLIC
 
BOOL
 
	$HTLib_£tAµVîsi⁄
 (c⁄° * 
vîsi⁄
)

76 i‡(
vîsi⁄
) {

77 * 
±r
;

78 
	`SåAŒocC›y
(
HTAµVîsi⁄
, 
vîsi⁄
);

79 
±r
 = 
HTAµVîsi⁄
;

80 *
±r
) {

81 i‡(
	`is•a˚
((Ë*
±r
)) *ptr = '_';

82 
±r
++;

84  
YES
;

86  
NO
;

87 
	}
}

92 
PUBLIC
 c⁄° * 
	$HTLib_«me
 ()

94  
HTLibName
 ? HTLibName : "UNKNOWN";

95 
	}
}

97 
PUBLIC
 c⁄° * 
	$HTLib_vîsi⁄
 ()

99  
HTLibVîsi⁄
 ? HTLibVersion : "0.0";

100 
	}
}

105 
PUBLIC
 
HTU£rProfûe
 * 
	$HTLib_u£rProfûe
 ()

107  
U£rProfûe
;

108 
	}
}

110 
PUBLIC
 
BOOL
 
	$HTLib_£tU£rProfûe
 (
HTU£rProfûe
 * 
up
)

112 i‡(
up
) {

113 
U£rProfûe
 = 
up
;

114  
YES
;

116  
NO
;

117 
	}
}

123 
PUBLIC
 
BOOL
 
	$HTLib_£cuª
 ()

125  
HTSecuª
;

126 
	}
}

128 
PUBLIC
 
	$HTLib_£tSecuª
 (
BOOL
 
mode
)

130 
HTSecuª
 = 
mode
;

131 
	}
}

136 
PUBLIC
 
BOOL
 
	$HTLib_isInôülized
 ()

138  
öôülized
;

139 
	}
}

146 
PUBLIC
 
BOOL
 
	$HTLibInô
 (c⁄° * 
AµName
, c⁄° * 
AµVîsi⁄
)

148 
	`HTTRACE
(
CORE_TRACE
, "WWWLibInit.. INITIALIZING LIBRARY OF COMMON CODE\n");

151 
	`HTLib_£tAµName
(
AµName
);

152 
	`HTLib_£tAµVîsi⁄
(
AµVîsi⁄
);

155 #ifde‡
HAVE_TZSET


156 
	`tz£t
();

160 
U£rProfûe
 = 
	`HTU£rProfûe_√w
(
HT_DEFAULT_USER
, 
NULL
);

161 
	`HTU£rProfûe_loˇlize
(
U£rProfûe
);

163 #ifde‡
WWWLIB_SIG


168 
	`HTSëSig«l
();

171 
öôülized
 = 
YES
;

172  
YES
;

173 
	}
}

181 
PUBLIC
 
BOOL
 
	$HTLibTîmö©e
 ()

183 
	`HTTRACE
(
CORE_TRACE
, "WWWLibTerm.. Cleaning up LIBRARY OF COMMON CODE\n");

185 
	`HTNë_kûlAŒ
();

186 
	`HTHo°_dñëeAŒ
();

187 
	`HTCh™√l_dñëeAŒ
();

189 
	`HT_FREE
(
HTAµName
);

190 
	`HT_FREE
(
HTAµVîsi⁄
);

192 
	`HTAtom_dñëeAŒ
();

193 
	`HTDNS_dñëeAŒ
();

194 
	`HTAnch‹_dñëeAŒ
(
NULL
);

196 
	`HTPrŸocﬁ_dñëeAŒ
();

198 
	`HTU£rProfûe_dñëe
(
U£rProfûe
);

200 
	`HTUTªe_dñëeAŒ
();

202 
öôülized
 = 
NO
;

203  
YES
;

204 
	}
}

	@Library/src/HTLib.h

26 #i‚de‡
HTLIB_H


27 
	#HTLIB_H


	)

29 
	~"HTU£r.h
"

40 
BOOL
 
HTLibInô
 (c⁄° * 
AµName
, c⁄° * 
AµVîsi⁄
);

41 
BOOL
 
HTLibTîmö©e
 ();

51 c⁄° * 
HTLib_«me
 ();

52 c⁄° * 
HTLib_vîsi⁄
 ();

61 
BOOL
 
HTLib_isInôülized
 ();

82 c⁄° * 
HTLib_≠pName
 ();

83 
BOOL
 
HTLib_£tAµName
 (c⁄° * 
«me
);

95 c⁄° * 
HTLib_≠pVîsi⁄
 ();

96 
BOOL
 
HTLib_£tAµVîsi⁄
 (c⁄° * 
vîsi⁄
);

108 
BOOL
 
HTLib_£cuª
 ();

109 
HTLib_£tSecuª
 (
BOOL
 
mode
);

122 
HTU£rProfûe
 * 
HTLib_u£rProfûe
 ();

123 
BOOL
 
HTLib_£tU£rProfûe
 (
HTU£rProfûe
 * 
up
);

	@Library/src/HTLink.c

20 
	~"wwwsys.h
"

21 
	~"WWWUtû.h
"

22 
	~"HTF‹m©.h
"

23 
	~"HTP¨£.h
"

24 
	~"HTMëhod.h
"

25 
	~"HTAncM™.h
"

26 
	~"HTLök.h
"

30 
PUBLIC
 
HTLök
 * 
	$HTLök_√w
 ()

32 
HTLök
 * 
lök
;

33 i‡((
lök
 = (
HTLök
 *Ë
	`HT_CALLOC
(1,  (HTLök))Ë=
NULL
)

34 
	`HT_OUTOFMEM
("HTLink_new");

35  
lök
;

36 
	}
}

38 
PUBLIC
 
BOOL
 
	$HTLök_dñëe
 (
HTLök
 * 
me
)

40 
	`HT_FREE
(
me
);

41  
YES
;

42 
	}
}

47 
PUBLIC
 
BOOL
 
	$HTLök_add
 (
HTAnch‹
 * 
sour˚
,

48 
HTAnch‹
 * 
de°ö©i⁄
,

49 
HTLökTy≥
 
ty≥
,

50 
HTMëhod
 
mëhod
)

52 i‡(
sour˚
 && 
de°ö©i⁄
) {

53 
	`HTTRACE
(
ANCH_TRACE
, "Lök cª©e. frománch‹ %∞tÿ%∞wôhÅy≥ %s, mëhod %s\n" 
_


54 (*Ë
sour˚
 
	`_
 (*Ë
de°ö©i⁄
 
_


55 
ty≥
 ? 
	`HTAtom_«me
—y≥Ë: "NONE" 
_


56 
mëhod
 !
METHOD_INVALID
 ? 
	`HTMëhod_«me
(method) : "NONE");

57 i‡(!
sour˚
->
maöLök
.
de°
) {

58 
sour˚
->
maöLök
.
de°
 = 
de°ö©i⁄
;

59 
sour˚
->
maöLök
.
ty≥
 =Åype;

60 
sour˚
->
maöLök
.
mëhod
 = method;

62 
HTLök
 * 
√wLök
 = 
	`HTLök_√w
();

63 
√wLök
->
de°
 = 
de°ö©i⁄
;

64 
√wLök
->
ty≥
 =Åype;

65 
√wLök
->
mëhod
 = method;

66 i‡(!
sour˚
->
löks
Ësour˚->lök†
	`HTLi°_√w
();

67 
	`HTLi°_addObje˘
 (
sour˚
->
löks
, 
√wLök
);

69 i‡(!
de°ö©i⁄
->
∑ª¡
->
sour˚s
)

70 
de°ö©i⁄
->
∑ª¡
->
sour˚s
 = 
	`HTLi°_√w
();

71 
	`HTLi°_addObje˘
 (
de°ö©i⁄
->
∑ª¡
->
sour˚s
, 
sour˚
);

72  
YES
;

74 
	`HTTRACE
(
ANCH_TRACE
, "Link........ Badárgument\n");

75  
NO
;

76 
	}
}

82 
PUBLIC
 
BOOL
 
	$HTLök_ªmove
 (
HTAnch‹
 * 
sour˚
, HTAnch‹ * 
de°ö©i⁄
)

84 i‡(!
sour˚
 || !
de°ö©i⁄
Ë 
NO
;

85 
	`HTTRACE
(
ANCH_TRACE
, "Lök dñëe. frománch‹ %∞tÿ™ch‹ %p\n" 
_


86 (*Ë
sour˚
 
	`_
 (*Ë
de°ö©i⁄
);

89 i‡(
sour˚
->
maöLök
.
de°
 =
de°ö©i⁄
) {

90 
sour˚
->
maöLök
.
de°
 = 
NULL
;

91 
sour˚
->
maöLök
.
ty≥
 = 
NULL
;

92 
sour˚
->
maöLök
.
mëhod
 = 
METHOD_INVALID
;

93 
sour˚
->
maöLök
.
ªsu…
 = 
HT_LINK_INVALID
;

94  
YES
;

98 i‡(
sour˚
->
löks
) {

99 
HTLi°
 *
cur
 = 
sour˚
->
löks
;

100 
HTLök
 *
¥es
;

101 (
¥es
 = (
HTLök
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

102 i‡(
¥es
->
de°
 =
de°ö©i⁄
) {

103 
	`HTLi°_ªmoveObje˘
(
sour˚
->
löks
, 
¥es
);

104 
	`HT_FREE
(
¥es
);

105  
YES
;

109  
NO
;

110 
	}
}

116 
PUBLIC
 
BOOL
 
	$HTLök_ªmoveAŒ
 (
HTAnch‹
 * 
me
)

118 i‡(!
me
Ë 
NO
;

119 
	`HTTRACE
(
ANCH_TRACE
, "Lök dñëe. frománch‹ %p\n" 
	`_
 (*Ë
me
);

122 
me
->
maöLök
.
de°
 = 
NULL
;

123 
me
->
maöLök
.
ty≥
 = 
NULL
;

124 
me
->
maöLök
.
mëhod
 = 
METHOD_INVALID
;

125 
me
->
maöLök
.
ªsu…
 = 
HT_LINK_INVALID
;

128 i‡(
me
->
löks
) {

129 
HTLi°
 *
cur
 = 
me
->
löks
;

130 
HTLök
 *
¥es
;

131 (
¥es
 = (
HTLök
 *Ë
	`HTLi°_√xtObje˘
(
cur
)))

132 
	`HT_FREE
(
¥es
);

133 
	`HTLi°_dñëe
(
me
->
löks
);

134 
me
->
löks
 = 
NULL
;

136  
YES
;

137 
	}
}

144 
PUBLIC
 
BOOL
 
	$HTLök_moveAŒ
 (
HTAnch‹
 * 
§c
, HTAnch‹ * 
de°
)

146 i‡(!
§c
 || !
de°
Ë 
NO
;

147 
	`HTTRACE
(
ANCH_TRACE
, "Lök move...áŒ frománch‹ %∞tÿ™ch‹ %p\n" 
_


148 (*Ë
§c
 
	`_
 (*Ë
de°
);

151 
de°
->
maöLök
.de° = 
§c
->mainLink.dest;

152 
de°
->
maöLök
.
ty≥
 = 
§c
->mainLink.type;

153 
de°
->
maöLök
.
mëhod
 = 
§c
->mainLink.method;

154 
de°
->
maöLök
.
ªsu…
 = 
§c
->mainLink.result;

156 
§c
->
maöLök
.
de°
 = 
NULL
;

157 
§c
->
maöLök
.
ty≥
 = 
NULL
;

158 
§c
->
maöLök
.
mëhod
 = 
METHOD_INVALID
;

159 
§c
->
maöLök
.
ªsu…
 = 
HT_LINK_INVALID
;

162 i‡(
de°
->
löks
) {

163 
HTLi°
 *
cur
 = 
de°
->
löks
;

164 
HTLök
 *
¥es
;

165 (
¥es
 = (
HTLök
 *Ë
	`HTLi°_√xtObje˘
(
cur
)))

166 
	`HT_FREE
(
¥es
);

167 
	`HTLi°_dñëe
(
de°
->
löks
);

169 
de°
->
löks
 = 
§c
->links;

170 
§c
->
löks
 = 
NULL
;

171  
YES
;

172 
	}
}

178 
PUBLIC
 
HTLök
 * 
	$HTLök_föd
 (
HTAnch‹
 * 
§c
, HTAnch‹ * 
de°
)

180 i‡(
§c
 && 
de°
) {

181 i‡(
§c
->
maöLök
.
de°
 == dest)

182  &(
§c
->
maöLök
);

183 i‡(
§c
->
löks
) {

184 
HTLi°
 *
cur
 = 
§c
->
löks
;

185 
HTLök
 *
¥es
;

186 (
¥es
 = (
HTLök
 *Ë
	`HTLi°_√xtObje˘
(
cur
)Ë!
NULL
) {

187 i‡(
¥es
->
de°
 == dest)

188  
¥es
;

192  
NULL
;

193 
	}
}

198 
PUBLIC
 
HTLök
 * 
	$HTLök_födTy≥
 (
HTAnch‹
 * 
me
, 
HTLökTy≥
 
ty≥
)

200 i‡(
me
) {

201 
HTLök
 * 
lök
 = 
	`HTAnch‹_maöLök
(
me
);

202 
HTLi°
 * 
sublöks
 = 
	`HTAnch‹_subLöks
(
me
);

203 i‡(
lök
 &&Üök->
ty≥
==type)

204  
lök
;

205 i‡(
sublöks
) {

206 (
lök
 = (
HTLök
 *Ë
	`HTLi°_√xtObje˘
 (
sublöks
)))

207 i‡(
lök
->
ty≥
 ==Åype) Üink;

210  
NULL
;

211 
	}
}

216 
PUBLIC
 
BOOL
 
	$HTLök_£tDe°ö©i⁄
 (
HTLök
 * 
lök
, 
HTAnch‹
 * 
de°
)

218 i‡(
lök
) {

219 
lök
->
de°
 = dest;

220  
YES
;

222  
NO
;

223 
	}
}

225 
PUBLIC
 
HTAnch‹
 * 
	$HTLök_de°ö©i⁄
 (
HTLök
 * 
lök
)

227  
lök
 ?Üök->
de°
 : 
NULL
;

228 
	}
}

230 
PUBLIC
 
BOOL
 
	$HTLök_£tTy≥
 (
HTLök
 * 
lök
, 
HTLökTy≥
 
ty≥
)

232 i‡(
lök
) {

233 
lök
->
ty≥
 =Åype;

234  
YES
;

236  
NO
;

237 
	}
}

239 
PUBLIC
 
HTLökTy≥
 
	$HTLök_ty≥
 (
HTLök
 * 
lök
)

241  
lök
 ?Üök->
ty≥
 : 
NULL
;

242 
	}
}

249 
PUBLIC
 
BOOL
 
	$HTLök_£tResu…
 (
HTLök
 * 
lök
, 
HTLökResu…
 
ªsu…
)

251 i‡(
lök
) {

252 
lök
->
ªsu…
 =Ñesult;

253  
YES
;

255  
NO
;

256 
	}
}

258 
PUBLIC
 
HTLökResu…
 
	$HTLök_ªsu…
 (
HTLök
 * 
lök
)

260  
lök
 ?Üök->
ªsu…
 : 
HT_LINK_INVALID
;

261 
	}
}

263 
PUBLIC
 
BOOL
 
	$HTLök_£tMëhod
 (
HTLök
 * 
lök
, 
HTMëhod
 
mëhod
)

265 i‡(
lök
) {

266 
lök
->
mëhod
 = method;

267  
YES
;

269  
NO
;

270 
	}
}

272 
PUBLIC
 
HTMëhod
 
	$HTLök_mëhod
 (
HTLök
 * 
lök
)

274  
lök
 ?Üök->
mëhod
 : 
METHOD_INVALID
;

275 
	}
}

	@Library/src/HTLink.h

39 #i‚de‡
HTLINK_H


40 
	#HTLINK_H


	)

42 
_HTLök
 
	tHTLök
;

44 
	~"WWWUtû.h
"

45 
	~"HTMëhod.h
"

46 
	~"HTAnch‹.h
"

55 
HTAtom
 * 
	tHTLökTy≥
;

57 
	e_HTLökResu…
 {

58 
	mHT_LINK_INVALID
 = -1,

59 
	mHT_LINK_NONE
 = 0,

60 
	mHT_LINK_ERROR
,

61 
	mHT_LINK_OK


62 } 
	tHTLökResu…
;

64 
	s_HTLök
 {

65 
HTAnch‹
 * 
	mde°
;

66 
HTLökTy≥
 
	mty≥
;

67 
HTMëhod
 
	mmëhod
;

68 
HTLökResu…
 
	mªsu…
;

71 
HTLök
 * 
HTLök_√w
 ();

78 
BOOL
 
HTLök_dñëe
 (
HTLök
 * 
lök
);

85 
BOOL
 
HTLök_ªmoveAŒ
 (
HTAnch‹
 * 
me
);

93 
	#HT_LR_PERM_REDIRECT
 
	`HTAtom_f‹
("PERMANENT_REDIRECTION")

	)

94 
	#HT_LR_TEMP_REDIRECT
 
	`HTAtom_f‹
("TEMPORARY_REDIRECTION")

	)

95 
	#HT_LR_SEE_OTHER
 
	`HTAtom_f‹
("SEE_OTHER")

	)

108 
BOOL
 
HTLök_add
 (

109 
HTAnch‹
 * 
sour˚
,

110 
HTAnch‹
 * 
de°ö©i⁄
,

111 
HTLökTy≥
 
ty≥
,

112 
HTMëhod
 
mëhod
);

119 
BOOL
 
HTLök_ªmove
 (

120 
HTAnch‹
 * 
sour˚
,

121 
HTAnch‹
 * 
de°ö©i⁄
);

129 
HTLök
 * 
HTLök_föd
 (
HTAnch‹
 * 
sour˚
, HTAnch‹ * 
de°ö©i⁄
);

136 
HTLök
 * 
HTLök_födTy≥
 (
HTAnch‹
 * 
me
, 
HTLökTy≥
 
ty≥
);

148 
BOOL
 
HTLök_£tDe°ö©i⁄
 (
HTLök
 * 
lök
, 
HTAnch‹
 * 
de°
);

149 
HTAnch‹
 * 
HTLök_de°ö©i⁄
 (
HTLök
 * 
lök
);

159 
BOOL
 
HTLök_£tTy≥
 (
HTLök
 * 
lök
, 
HTLökTy≥
 
ty≥
);

160 
HTLökTy≥
 
HTLök_ty≥
 (
HTLök
 * 
lök
);

169 
BOOL
 
HTLök_£tMëhod
 (
HTLök
 * 
lök
, 
HTMëhod
 
mëhod
);

170 
HTMëhod
 
HTLök_mëhod
 (
HTLök
 * 
lök
);

181 
BOOL
 
HTLök_£tResu…
 (
HTLök
 * 
lök
, 
HTLökResu…
 
ªsu…
);

182 
HTLökResu…
 
HTLök_ªsu…
 (
HTLök
 * 
lök
);

	@Library/src/HTList.c

14 
	~"wwwsys.h
"

15 
	~"HTUtûs.h
"

16 
	~"HTLi°.h
"

18 
PUBLIC
 
HTLi°
 * 
	$HTLi°_√w
 ()

20 
HTLi°
 *
√wLi°
;

21 i‡((
√wLi°
 = (
HTLi°
 *Ë
	`HT_CALLOC
(1,  (HTLi°))Ë=
NULL
)

22 
	`HT_OUTOFMEM
("HTList_new");

23 
√wLi°
->
obje˘
 = 
NULL
;

24 
√wLi°
->
√xt
 = 
NULL
;

25  
√wLi°
;

26 
	}
}

28 
PUBLIC
 
BOOL
 
	$HTLi°_dñëe
 (
HTLi°
 * 
me
)

30 i‡(
me
) {

31 
HTLi°
 *
cuºít
;

32 (
cuºít
 = 
me
)) {

33 
me
 = me->
√xt
;

34 
	`HT_FREE
(
cuºít
);

36  
YES
;

38  
NO
;

39 
	}
}

41 
PUBLIC
 
BOOL
 
	$HTLi°_addObje˘
 (
HTLi°
 * 
me
, * 
√wObje˘
)

43 i‡(
me
) {

44 
HTLi°
 *
√wNode
;

45 i‡((
√wNode
 = (
HTLi°
 *Ë
	`HT_CALLOC
(1, (HTLi°))Ë=
NULL
)

46 
	`HT_OUTOFMEM
("HTList_addObject");

47 
√wNode
->
obje˘
 = 
√wObje˘
;

48 
√wNode
->
√xt
 = 
me
->next;

49 
me
->
√xt
 = 
√wNode
;

50  
YES
;

52 
	`HTTRACE
(
CORE_TRACE
, "HTLi°...... C™ÇŸádd obje˘ %∞tÿn⁄exi°ögÜi°\n" 
_


53 
√wObje˘
);

55  
NO
;

56 
	}
}

58 
PUBLIC
 
BOOL
 
	$HTLi°_≠≥ndObje˘
 (
HTLi°
 * 
me
, * 
√wObje˘
)

60 i‡(
me
) {

61 
me
->
√xt
) me = me->next;

62  
	`HTLi°_addObje˘
(
me
, 
√wObje˘
);

64  
NO
;

65 
	}
}

67 
PUBLIC
 
BOOL
 
	$HTLi°_ªmoveObje˘
 (
HTLi°
 * 
me
, * 
ﬁdObje˘
)

69 i‡(
me
) {

70 
HTLi°
 *
¥evious
;

71 
me
->
√xt
) {

72 
¥evious
 = 
me
;

73 
me
 = me->
√xt
;

74 i‡(
me
->
obje˘
 =
ﬁdObje˘
) {

75 
¥evious
->
√xt
 = 
me
->next;

76 
	`HT_FREE
(
me
);

77  
YES
;

81  
NO
;

82 
	}
}

84 
PUBLIC
 
HTLi°
 * 
	$HTLi°_addLi°
 (
HTLi°
 * 
me
, * 
√wObje˘
)

86 i‡(
me
) {

87 
HTLi°
 *
√wNode
;

88 i‡((
√wNode
 = (
HTLi°
 *Ë
	`HT_CALLOC
(1, (HTLi°))Ë=
NULL
)

89 
	`HT_OUTOFMEM
("HTList_addObject");

90 
√wNode
->
obje˘
 = 
√wObje˘
;

91 
√wNode
->
√xt
 = 
me
->next;

92 
me
->
√xt
 = 
√wNode
;

93  
√wNode
;

95 
	`HTTRACE
(
CORE_TRACE
, "HTLi°...... C™ÇŸádd obje˘ %∞tÿn⁄exi°ög Li°\n" 
_
 
√wObje˘
);

97  (
HTLi°
 *Ë
NULL
;

98 
	}
}

100 
PUBLIC
 
HTLi°
 * 
	$HTLi°_≠≥ndLi°
 (
HTLi°
 * 
me
, *
√wObje˘
)

102 i‡(
me
) {

103 
me
->
√xt
)

104 
me
 = me->
√xt
;

105  
	`HTLi°_addLi°
(
me
, 
√wObje˘
);

107  (
HTLi°
 *Ë
NULL
;

108 
	}
}

111 
PUBLIC
 
BOOL
 
	$HTLi°_quickRemoveEÀmít
 (
HTLi°
 * 
me
, HTLi° * 
œ°
)

113 i‡(
me
 && 
œ°
) {

114 
œ°
->
√xt
 = 
me
->next;

115 
	`HT_FREE
(
me
);

116  
YES
;

118  
NO
;

119 
	}
}

121 
PUBLIC
 
BOOL
 
	$HTLi°_ªmoveObje˘AŒ
 (
HTLi°
 * 
me
, * 
ﬁdObje˘
)

123 
BOOL
 
found
 = 
NO
;

125 i‡(
me
)

127 
HTLi°
* 
i
;

129 (
i
 = 
me
->
√xt
))

131 i‡(
i
->
obje˘
 =
ﬁdObje˘
)

133 
me
->
√xt
 = 
i
->next;

134 
	`HT_FREE
(
i
);

135 
found
 = 
YES
;

139 
me
 = 
i
;

144  
found
;

145 
	}
}

147 
PUBLIC
 * 
	$HTLi°_ªmoveLa°Obje˘
 (
HTLi°
 * 
me
)

149 i‡(
me
 && me->
√xt
) {

150 
HTLi°
 *
œ°Node
 = 
me
->
√xt
;

151 * 
œ°Obje˘
 = 
œ°Node
->
obje˘
;

152 
me
->
√xt
 = 
œ°Node
->next;

153 
	`HT_FREE
(
œ°Node
);

154  
œ°Obje˘
;

156  
NULL
;

157 
	}
}

159 
PUBLIC
 * 
	$HTLi°_ªmoveFú°Obje˘
 (
HTLi°
 * 
me
)

161 i‡(
me
 && me->
√xt
) {

162 
HTLi°
 * 
¥evNode
;

163 *
fú°Obje˘
;

164 
me
->
√xt
) {

165 
¥evNode
 = 
me
;

166 
me
 = me->
√xt
;

168 
fú°Obje˘
 = 
me
->
obje˘
;

169 
¥evNode
->
√xt
 = 
NULL
;

170 
	`HT_FREE
(
me
);

171  
fú°Obje˘
;

173  
NULL
;

174 
	}
}

176 
PUBLIC
 * 
	$HTLi°_fú°Obje˘
 (
HTLi°
 * 
me
)

178 i‡(
me
 && me->
√xt
) {

179 
HTLi°
 * 
¥evNode
;

180 
me
->
√xt
) {

181 
¥evNode
 = 
me
;

182 
me
 = me->
√xt
;

184  
me
->
obje˘
;

186  
NULL
;

187 
	}
}

189 
PUBLIC
 
	$HTLi°_cou¡
 (
HTLi°
 * 
me
)

191 
cou¡
 = 0;

192 i‡(
me
)

193 (
me
 = me->
√xt
))

194 
cou¡
++;

195  
cou¡
;

196 
	}
}

198 
PUBLIC
 
	$HTLi°_ödexOf
 (
HTLi°
 * 
me
, * 
obje˘
)

200 i‡(
me
) {

201 
posôi⁄
 = 0;

202 (
me
 = me->
√xt
)) {

203 i‡(
me
->
obje˘
 == object)

204  
posôi⁄
;

205 
posôi⁄
++;

209 
	}
}

211 
PUBLIC
 
	$HTLi°_ödexOfEÀmít
 (
HTLi°
 * 
me
, HTLi° * 
ñemít
)

213 i‡(
me
) {

214 
posôi⁄
 = 0;

215 i‡(
me
 =
ñemít
)

217 (
me
 = me->
√xt
)) {

218 i‡(
me
 =
ñemít
)

219  
posôi⁄
;

220 
posôi⁄
++;

224 
	}
}

226 
PUBLIC
 
HTLi°
 * 
	$HTLi°_ñemítOf
 (
HTLi°
 * 
cur
, * 
obje˘
, HTLi° ** 
pLa°
)

228 
HTLi°
 * 
œ°
 = 
cur
;

229 * 
¥es
;

231 (
¥es
 = 
	`HTLi°_√xtObje˘
(
cur
))) {

232 i‡(
¥es
 =
obje˘
) {

233 i‡(
pLa°
)

234 *
pLa°
 = 
œ°
;

235  
cur
;

237 
œ°
 = 
cur
;

243 i‡(
pLa°
)

244 *
pLa°
 = 
œ°
;

245  
NULL
;

246 
	}
}

248 
PUBLIC
 * 
	$HTLi°_obje˘At
 (
HTLi°
 * 
me
, 
posôi⁄
)

250 i‡(
posôi⁄
 < 0)

251  
NULL
;

252 i‡(
me
) {

253 (
me
 = me->
√xt
)) {

254 i‡(
posôi⁄
 == 0)

255  
me
->
obje˘
;

256 
posôi⁄
--;

259  
NULL
;

260 
	}
}

262 
PUBLIC
 * 
	$HTLi°_ªmoveObje˘At
 (
HTLi°
 * 
me
, 
posôi⁄
)

264 i‡(
posôi⁄
 < 0)

265  
NULL
;

266 i‡(
me
) {

267 
HTLi°
 * 
¥evNode
;

268 
¥evNode
 = 
me
;

269 (
me
 = me->
√xt
)) {

270 i‡(
posôi⁄
 == 0) {

271 
¥evNode
->
√xt
 = 
me
->next;

272  
me
->
obje˘
;

274 
¥evNode
 = 
me
;

275 
posôi⁄
--;

278  
NULL
;

279 
	}
}

285 
PUBLIC
 
BOOL
 
	$HTLi°_ö£πi⁄S‹t
 (
HTLi°
 * 
hód
, 
HTCom∑ªr
 * 
comp
)

287 
HTLi°
 *
èû
, *
q
, *
r
, *
p
;

288 i‡(
hód
 && hód->
√xt
 && 
comp
) {

289 
èû
 = 
hód
->
√xt
;

290 
èû
->
√xt
) {

291 
q
 = 
èû
->
√xt
;

298 i‡(
	`comp
(
q
->
obje˘
, 
hód
->
√xt
->object) >= 0) {

299 
èû
->
√xt
 = 
q
->next;

300 
q
->
√xt
 = 
hód
->next;

301 
hód
->
√xt
 = 
q
;

303 
r
 = 
hód
->
√xt
;

304 
p
 = 
r
->
√xt
;

305 
	`comp
(
q
->
obje˘
, 
p
->object) < 0) {

306 
r
 = 
p
;

307 
p
 = 
r
->
√xt
;

314 i‡(
q
 =
p
)

315 
èû
 = 
q
;

317 
èû
->
√xt
 = 
q
->next;

318 
q
->
√xt
 = 
p
;

319 
r
->
√xt
 = 
q
;

323  
YES
;

325 
	`HTTRACE
(
CORE_TRACE
, "List........ EmptyÜist orÇo sortálgorithm\n");

327  
NO
;

328 
	}
}

	@Library/src/HTList.h

28 #i‚de‡
HTLIST_H


29 
	#HTLIST_H


	)

31 
	~"HTAºay.h
"

33 
_HTLi°
 
	tHTLi°
;

35 
	s_HTLi°
 {

36 * 
	mobje˘
;

37 
HTLi°
 * 
	m√xt
;

48 
HTLi°
 * 
HTLi°_√w
 ();

49 
BOOL
 
HTLi°_dñëe
 (
HTLi°
 *
me
);

59 
BOOL
 
HTLi°_addObje˘
 (
HTLi°
 *
me
, *
√wObje˘
);

67 
BOOL
 
HTLi°_≠≥ndObje˘
 (
HTLi°
 * 
me
, * 
√wObje˘
);

77 
HTLi°
 * 
HTLi°_addLi°
 (HTLi° * 
me
, * 
√wObje˘
);

78 
HTLi°
 * 
HTLi°_≠≥ndLi°
 (HTLi° * 
me
, * 
√wObje˘
);

92 
BOOL
 
HTLi°_ªmoveObje˘
 (
HTLi°
 * 
me
, * 
ﬁdObje˘
);

93 
BOOL
 
HTLi°_quickRemoveEÀmít
 (
HTLi°
 * 
me
, HTLi° * 
œ°
);

94 
BOOL
 
HTLi°_ªmoveObje˘AŒ
 (
HTLi°
 * 
me
, * 
ﬁdObje˘
);

96 * 
HTLi°_ªmoveLa°Obje˘
 (
HTLi°
 * 
me
);

97 * 
HTLi°_ªmoveFú°Obje˘
 (
HTLi°
 * 
me
);

107 
	#HTLi°_isEm±y
(
me
Ë(mê? me->
√xt
 =
NULL
 : 
YES
)

	)

108 
HTLi°_cou¡
 (
HTLi°
 *
me
);

120 
HTLi°_ödexOf
 (
HTLi°
 * 
me
, * 
obje˘
);

121 
HTLi°_ödexOfEÀmít
 (
HTLi°
 * 
me
, HTLi° * 
ñemít
);

122 * 
HTLi°_obje˘At
 (
HTLi°
 * 
me
, 
posôi⁄
);

123 
HTLi°
 * 
HTLi°_ñemítOf
 (HTLi° * 
me
, * 
obje˘
, HTLi° ** 
pLa°
);

124 
	#HTLi°_obje˘Of
(
me
Ë(mê? me->
obje˘
: 
NULL
)

	)

135 
	#HTLi°_œ°Obje˘
(
me
) \

136 ((
me
Ë&& (me)->
√xt
 ? (me)->√xt->
obje˘
 : 
NULL
)

	)

143 * 
HTLi°_fú°Obje˘
 (
HTLi°
 * 
me
);

155 
	#HTLi°_√xtObje˘
(
me
) \

156 ((
me
Ë&& ((meË(me)->
√xt
Ë? (me)->
obje˘
 : 
NULL
)

	)

170 
BOOL
 
HTLi°_ö£πi⁄S‹t
(
HTLi°
 * 
li°
, 
HTCom∑ªr
 * 
comp
);

178 
	#HTLi°_‰ì
(
x
Ë
	`HT_FREE
(x)

	)

	@Library/src/HTLocal.c

13 
	~"wwwsys.h
"

14 
	~"WWWUtû.h
"

15 
	~"WWWC‹e.h
"

16 
	~"HTLoˇl.h
"

29 
PUBLIC
 
	$HTFûeO≥n
 (
HTNë
 * 
√t
, * 
loˇl
, 
HTLoˇlMode
 
mode
)

31 
HTReque°
 * 
ªque°
 = 
	`HTNë_ªque°
(
√t
);

32 
HTHo°
 * 
ho°
 = 
	`HTNë_ho°
(
√t
);

33 #ifde‡
NO_UNIX_IO


34 
FILE
 * 
Â
 = 
NULL
;

36 
SOCKET
 
sockfd
 = 
INVSOC
;

39 #i‚de‡
NO_UNIX_IO


40 
°©us
 = -1;

41 i‡((
sockfd
 = 
	`›í
(
loˇl
, 
mode
)) == -1) {

42 
	`HTReque°_addSy°emEº‹
(
ªque°
, 
ERR_FATAL
, 
î∫o
, 
NO
, "open");

43  
HT_ERROR
;

53 i‡(!
	`HTNë_¥ìm±ive
(
√t
)) {

54 #ifde‡
HAVE_FCNTL


55 i‡((
°©us
 = 
	`f˙é
(
sockfd
, 
F_GETFL
, 0)) != -1) {

56 #ifde‡
O_NONBLOCK


57 
°©us
 |
O_NONBLOCK
;

59 #ifde‡
F_NDELAY


60 
°©us
 |
F_NDELAY
;

63 
°©us
 = 
	`f˙é
(
sockfd
, 
F_SETFL
, status);

66 
	`HTTRACE
(
PROT_TRACE
, "HTFûeO≥n.. `%s\' o≥√d %dá†%sblockög sockë\n" 
_


67 
loˇl
 
_
 
sockfd
 _ 
°©us
 == -1 ? "" : "NON-");

71 #ifde‡
VMS


72 i‡((
Â
 = 
	`f›í
(
loˇl
, 
mode
,"shrıut","shr=upd")Ë=
NULL
) {

73 
	`HTReque°_addSy°emEº‹
(
ªque°
, 
ERR_FATAL
, 
î∫o
, 
NO
, "fopen");

74  
HT_ERROR
;

77 i‡((
Â
 = 
	`f›í
(
loˇl
, 
mode
)Ë=
NULL
) {

78 
	`HTReque°_addSy°emEº‹
(
ªque°
, 
ERR_FATAL
, 
î∫o
, 
NO
, "fopen");

79  
HT_ERROR
;

82 
	`HTTRACE
(
PROT_TRACE
, "HTDoO≥n.... `%s\' o≥√d usög FILE %p\n" 
_
 
loˇl
 _ 
Â
);

89 #ifde‡
NO_UNIX_IO


90 
	`HTHo°_£tCh™√l
(
ho°
, 
	`HTCh™√l_√w
(
INVSOC
, 
Â
, 
YES
));

92 
	`HTHo°_£tCh™√l
(
ho°
, 
	`HTCh™√l_√w
(
sockfd
, 
NULL
, 
YES
));

95 
	`HTHo°_gëI≈ut
(
ho°
, 
	`HTNë_å™•‹t
(
√t
), 
NULL
, 0);

96 
	`HTHo°_gëOuçut
(
ho°
, 
	`HTNë_å™•‹t
(
√t
), 
NULL
, 0);

97  
HT_OK
;

98 
	}
}

109 
PUBLIC
 
	$HTFûeClo£
 (
HTNë
 * 
√t
)

111 
HTHo°
 * 
ho°
 = 
	`HTNë_ho°
(
√t
);

112 
HTCh™√l
 * 
ch
 = 
	`HTHo°_ch™√l
(
ho°
);

113 
°©us
 = -1;

114 i‡(
√t
 && 
ch
) {

115 #ifde‡
NO_UNIX_IO


116 
FILE
 * 
Â
 = 
	`HTCh™√l_fûe
(
ch
);

117 i‡(
Â
) {

118 
	`HTTRACE
(
PROT_TRACE
, "Closög..... ANSI fûê%p\n" 
_
 
Â
);

119 
°©us
 = 
	`f˛o£
(
Â
);

120 
	`HTCh™√l_£tFûe
(
ch
, 
NULL
);

123 
SOCKET
 
sockfd
 = 
	`HTCh™√l_sockë
(
ch
);

124 i‡(
sockfd
 !
INVSOC
) {

125 
	`HTTRACE
(
PROT_TRACE
, "Closög..... fd %d\n" 
_
 
sockfd
);

126 
°©us
 = 
	`NETCLOSE
(
sockfd
);

127 
	`HTCh™√l_£tSockë
(
ch
, 
INVSOC
);

131  
°©us
 < 0 ? 
HT_ERROR
 : 
HT_OK
;

132 
	}
}

	@Library/src/HTLocal.h

26 #i‚de‡
HTLOCAL_H


27 
	#HTLOCAL_H


	)

29 
	~"HTNë.h
"

41 #i‚de‡
NO_UNIX_IO


42 
	tHTLoˇlMode
;

44 
	#HT_FB_RDONLY
 
O_RDONLY


	)

45 
	#HT_FT_RDONLY
 
HT_FB_RDONLY


	)

47 
	#HT_FB_WRONLY
 
O_WRONLY
|
O_CREAT


	)

48 
	#HT_FT_WRONLY
 
HT_FB_WRONLY


	)

50 
	#HT_FB_RDWR
 
O_RDWR


	)

51 
	#HT_FT_RDWR
 
HT_FB_RDWR


	)

53 
	#HT_FB_APPEND
 
O_APPEND


	)

54 
	#HT_FT_APPEND
 
HT_FB_APPEND


	)

57 c⁄° *
	tHTLoˇlMode
;

59 
	#HT_FB_RDONLY
 "rb"

	)

60 
	#HT_FT_RDONLY
 "r"

	)

62 
	#HT_FB_WRONLY
 "wb"

	)

63 
	#HT_FT_WRONLY
 "w"

	)

65 
	#HT_FB_RDWR
 "r+b"

	)

66 
	#HT_FT_RDWR
 "r+"

	)

68 
	#HT_FB_APPEND
 "ab"

	)

69 
	#HT_FT_APPEND
 "a"

	)

84 
HTFûeO≥n
 (
HTNë
 * 
√t
, * 
loˇl
, 
HTLoˇlMode
 
mode
);

96 
HTFûeClo£
 (
HTNë
 * 
√t
);

	@Library/src/HTLog.c

19 
	~"WWWLib.h
"

20 
	~"HTLog.h
"

22 
	s_HTLog
 {

23 
FILE
 * 
	mÂ
;

24 
BOOL
 
	mloˇ…ime
;

25 
	mac˚s£s
;

37 
PUBLIC
 
HTLog
 * 
	$HTLog_›í
 (c⁄° * 
fûíame
, 
BOOL
 
loˇl
, BOOL 
≠≥nd
)

39 
HTLog
 * 
log
;

40 i‡(!
fûíame
 || !*filename) {

41 
	`HTTRACE
(
APP_TRACE
, "Log......... NoÜog file given\n");

42  
NULL
;

45 i‡((
log
 = (
HTLog
 *Ë
	`HT_CALLOC
(1, (HTLog))Ë=
NULL
)

46 
	`HT_OUTOFMEM
("HTLog_open");

48 
	`HTTRACE
(
APP_TRACE
, "Log......... O≥¿log fûê`%s\'\n" 
_
 
fûíame
);

49 
log
->
Â
 = 
	`f›í
(
fûíame
, 
≠≥nd
 ? "a" : "w");

50 i‡(!
log
->
Â
) {

51 
	`HTTRACE
(
APP_TRACE
, "Log......... C™'à›íÜog fûê`%s\'\n" 
_
 
fûíame
);

52 
	`HT_FREE
(
log
);

53  
NULL
;

55 
log
->
loˇ…ime
 = 
loˇl
;

56  
log
;

57 
	}
}

64 
PUBLIC
 
BOOL
 
	$HTLog_˛o£
 (
HTLog
 * 
log
)

66 i‡(
log
 &&Üog->
Â
) {

67 
°©us
;

68 
	`HTTRACE
(
APP_TRACE
, "Log......... ClosögÜog fûê%p\n" 
_
 
log
->
Â
);

69 
°©us
 = 
	`f˛o£
(
log
->
Â
);

70 
	`HT_FREE
(
log
);

71  (
°©us
 !
EOF
);

73  
NO
;

74 
	}
}

76 
PUBLIC
 
	$HTLog_ac˚ssCou¡
 (
HTLog
 * 
log
)

78  
log
 ?Üog->
ac˚s£s
 : -1;

79 
	}
}

91 
PUBLIC
 
BOOL
 
	$HTLog_addCLF
 (
HTLog
 * 
log
, 
HTReque°
 * 
ªque°
, 
°©us
)

93 i‡(
log
 &&Üog->
Â
) {

94 
time_t
 
now
 = 
	`time
(
NULL
);

95 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

96 * 
uri
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
™ch‹
);

97 
	`HTTRACE
(
APP_TRACE
, "Log......... Writing CLFÜog\n");

98 
	`Ârötf
(
log
->
Â
, "localhost - - [%s] %s %s %d %ld\n",

99 
	`HTD©eTimeSå
(&
now
, 
log
->
loˇ…ime
),

100 
	`HTMëhod_«me
(
	`HTReque°_mëhod
(
ªque°
)),

101 
uri
 ? uri : "<null>",

102 
	`abs
(
°©us
),

103 
	`HTAnch‹_Àngth
(
™ch‹
));

104 
	`HT_FREE
(
uri
);

105 
log
->
ac˚s£s
++;

106  (
	`fÊush
(
log
->
Â
Ë!
EOF
);

108  
NO
;

109 
	}
}

119 
PUBLIC
 
BOOL
 
	$HTLog_addRe„ªr
 (
HTLog
 * 
log
, 
HTReque°
 * 
ªque°
, 
°©us
)

121 i‡(
log
 &&Üog->
Â
 && 
ªque°
) {

122 
HTP¨ítAnch‹
 * 
∑ª¡_™ch‹
 = 
	`HTReque°_∑ª¡
(
ªque°
);

123 i‡(
∑ª¡_™ch‹
) {

124 * 
me
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
	`HTReque°_™ch‹
(
ªque°
));

125 * 
∑ª¡
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
∑ª¡_™ch‹
);

126 
	`HTTRACE
(
APP_TRACE
, "Log......... Writing RefererÜog\n");

127 i‡(
me
 && 
∑ª¡
 && *parent) {

128 
	`Ârötf
(
log
->
Â
, "%†-> %s\n", 
∑ª¡
, 
me
);

130 
	`HT_FREE
(
me
);

131 
	`HT_FREE
(
∑ª¡
);

132 
log
->
ac˚s£s
++;

133  (
	`fÊush
(
log
->
Â
Ë!
EOF
);

136  
NO
;

137 
	}
}

142 
PUBLIC
 
BOOL
 
	$HTLog_addLöe
 (
HTLog
 * 
log
, c⁄° * 
löe
)

144 i‡(
log
 &&Üog->
Â
 && 
löe
) {

145 
	`Ârötf
(
log
->
Â
, "%s\n", 
löe
);

146 
log
->
ac˚s£s
++;

147  (
	`fÊush
(
log
->
Â
Ë!
EOF
);

149  
NO
;

150 
	}
}

155 
PUBLIC
 
BOOL
 
	$HTLog_addText
 (
HTLog
 * 
log
, c⁄° * 
fmt
, ...)

157 i‡(
log
 &&Üog->
Â
) {

158 
va_li°
 
pArgs
;

159 
	`va_°¨t
(
pArgs
, 
fmt
);

160 #ifde‡
HAVE_VPRINTF


161 
log
->
ac˚s£s
++;

162 (
	`vÂrötf
(
log
->
Â
, 
fmt
, 
pArgs
));

163 
	`va_íd
(
pArgs
);

165  (
	`fÊush
(
log
->
Â
Ë!
EOF
);

167  
NO
;

168 
	}
}

	@Library/src/HTLog.h

26 #i‚de‡
HTLIBLOG_H


27 
	#HTLIBLOG_H


	)

29 
	~"HTReq.h
"

40 
_HTLog
 
	tHTLog
;

42 
HTLog
 * 
HTLog_›í
 (c⁄° * 
fûíame
, 
BOOL
 
loˇl
, BOOL 
≠≥nd
);

52 
BOOL
 
HTLog_˛o£
 (
HTLog
 * 
log
);

62 
HTLog_ac˚ssCou¡
 (
HTLog
 * 
log
);

73 
BOOL
 
HTLog_addCLF
 (
HTLog
 * 
log
, 
HTReque°
 * 
ªque°
, 
°©us
);

83 
BOOL
 
HTLog_addRe„ªr
 (
HTLog
 * 
log
, 
HTReque°
 * 
ªque°
, 
°©us
);

94 
BOOL
 
HTLog_addLöe
 (
HTLog
 * 
log
, c⁄° * 
löe
);

104 
BOOL
 
HTLog_addText
 (
HTLog
 * 
log
, c⁄° * 
fmt
, ...);

	@Library/src/HTMIME.c

22 
	~"wwwsys.h
"

23 
	~"WWWUtû.h
"

24 
	~"WWWC‹e.h
"

25 
	~"HTReqM™.h
"

26 
	~"HTNëM™.h
"

27 
	~"HTHódî.h
"

28 
	~"HTWWWSå.h
"

30 #i‚de‡
NO_CACHE


31 
	~"HTTì.h
"

32 
	~"HTC⁄Lí.h
"

33 
	~"HTMîge.h
"

34 
	~"WWWCache.h
"

37 
	~"HTMIME.h
"

39 
	e_HTMIMEMode
 {

40 
	mHT_MIME_HEADER
 = 0x1,

41 
	mHT_MIME_FOOTER
 = 0x2,

42 
	mHT_MIME_PARTIAL
 = 0x4,

43 
	mHT_MIME_CONT
 = 0x8,

44 
	mHT_MIME_UPGRADE
 = 0x10

45 } 
	tHTMIMEMode
;

47 
	s_HTSåóm
 {

48 c⁄° 
HTSåómCœss
 * 
	miß
;

49 
HTReque°
 * 
	mªque°
;

50 
HTRe•⁄£
 * 
	mª•⁄£
;

51 
HTNë
 * 
	m√t
;

52 
HTSåóm
 * 
	mèrgë
;

53 
HTC⁄vîãr
 * 
	mßve_°ªam
;

54 
HTF‹m©
 
	mèrgë_f‹m©
;

55 
HTChunk
 * 
	mtokí
;

56 
HTChunk
 * 
	mvÆue
;

57 
	mhash
;

58 
HTEOLSèã
 
	mEOL°©e
;

59 
HTMIMEMode
 
	mmode
;

60 
BOOL
 
	må™•¨ít
;

61 
BOOL
 
	mhaveTokí
;

62 
BOOL
 
	mhasBody
;

65 
PRIVATE
 
HTC⁄vîãr
 * 
	gLoˇlSaveSåóm
 = 
NULL
;

69 
PRIVATE
 
	$pumpD©a
 (
HTSåóm
 * 
me
)

71 
HTReque°
 * 
ªque°
 = 
me
->request;

72 
HTRe•⁄£
 * 
ª•⁄£
 = 
me
->response;

73 
HTF‹m©
 
f‹m©
 = 
	`HTRe•⁄£_f‹m©
(
ª•⁄£
);

74 
HTLi°
 * 
ã
 = 
	`HTRe•⁄£_å™s„r
(
ª•⁄£
);

75 
HTLi°
 * 
˚
 = 
	`HTRe•⁄£_ícodög
(
ª•⁄£
);

76 
Àngth
 = 
	`HTRe•⁄£_Àngth
(
ª•⁄£
);

77 
HTSåóm
 * 
BœckHﬁe
 = 
	`HTBœckHﬁe
();

78 
BOOL
 
ßve°ªam
 = 
NO
;

79 
me
->
å™•¨ít
 = 
YES
;

89 i‡(!(
me
->
mode
 & 
HT_MIME_PARTIAL
) &&

90 
	`HTRe•⁄£_isCachabÀ
(
me
->
ª•⁄£
Ë!
HT_NO_CACHE
)

91 
	`HTAnch‹_upd©e
(
	`HTReque°_™ch‹
(
ªque°
), 
me
->
ª•⁄£
);

97 i‡(
me
->
mode
 & (
HT_MIME_HEADER
 | 
HT_MIME_FOOTER
) ||

98 
	`HTReque°_mëhod
(
ªque°
Ë=
METHOD_HEAD
) {

99 
HTAÀπCÆlback
 * 
cbf
 = 
	`HTAÀπ_föd
(
HT_PROG_DONE
);

100 i‡(
cbf
Ë(*cbf)(
ªque°
, 
HT_PROG_DONE
, 
HT_MSG_NULL
, 
NULL
, NULL, NULL);

101  
HT_LOADED
;

107 i‡(
me
->
mode
 & 
HT_MIME_CONT
)

108  
HT_CONTINUE
;

115 i‡(
me
->
mode
 & 
HT_MIME_UPGRADE
) {

116 
me
->
hasBody
 = 
YES
;

117  
HT_OK
;

126 
HTHo°
 * 
ho°
 = 
	`HTNë_ho°
(
me
->
√t
);

127 i‡(
Àngth
<0 && 
ã
==
NULL
 &&

128 
	`HTHo°_isPîsi°ít
(
ho°
Ë&& !
	`HTHo°_˛o£NŸifiˇti⁄
(host)) {

129 i‡(
f‹m©
 !
WWW_UNKNOWN
) {

130 
	`HTTRACE
(
STREAM_TRACE
, "MIME Parser. BAD -Åhere seemsÅo beá body butÇoÜength. This must beán HTTP/1.0 serverÖretendingÅhat it is HTTP/1.1\n");

131 
	`HTHo°_£tClo£NŸifiˇti⁄
(
ho°
, 
YES
);

133 
HTAÀπCÆlback
 * 
cbf
 = 
	`HTAÀπ_föd
(
HT_PROG_DONE
);

134 i‡(
cbf
Ë(*cbf)(
ªque°
, 
HT_PROG_DONE
, 
HT_MSG_NULL
, 
NULL
, NULL, NULL);

135 
	`HTTRACE
(
STREAM_TRACE
, "MIME Parser. No body inÅhis message\n");

136  
HT_LOADED
;

144 
me
->
hasBody
 = 
YES
;

149 i‡(!(
me
->
mode
 & 
HT_MIME_PARTIAL
) &&

150 (
f‹m©
 !
WWW_UNKNOWN
 || 
Àngth
 > 0 || 
ã
)) {

151 
HTSåóm
 * 
èrgë
;

152 
	`HTTRACE
(
STREAM_TRACE
, "Buûdög.... C-T sèck from %†tÿ%s\n" 
_


153 
	`HTAtom_«me
(
f‹m©
Ë
_


154 
	`HTAtom_«me
(
me
->
èrgë_f‹m©
));

155 i‡((
èrgë
 = 
	`HTSåómSèck
(
f‹m©
, 
me
->
èrgë_f‹m©
,

156 
me
->
èrgë
, 
ªque°
, 
YES
))==
BœckHﬁe
) {

157 i‡(!
ßve°ªam
) {

158 i‡(
me
->
èrgë
Ë(*me->èrgë->
iß
->
ab‹t
)(me->èrgë, 
NULL
);

159 
me
->
èrgë
 = me->
	`ßve_°ªam
(
ªque°
, 
NULL
,

160 
f‹m©
, 
me
->
èrgë_f‹m©
, me->
èrgë
);

161 
ßve°ªam
 = 
YES
;

164 
me
->
èrgë
 =Åarget;

170 
	`HTTRACE
(
STREAM_TRACE
, "Building.... Content-Decoding stack\n");

171 i‡(
˚
) {

172 
HTSåóm
 * 
èrgë
 = 
	`HTC⁄ã¡DecodögSèck
(
˚
, 
me
->èrgë, 
ªque°
, 
NULL
);

173 i‡(
èrgë
 =
BœckHﬁe
) {

174 i‡(!
ßve°ªam
) {

175 i‡(
me
->
èrgë
Ë(*me->èrgë->
iß
->
ab‹t
)(me->èrgë, 
NULL
);

176 
me
->
èrgë
 = me->
	`ßve_°ªam
(
ªque°
, 
NULL
,

177 
f‹m©
, 
me
->
èrgë_f‹m©
, me->
èrgë
);

178 
ßve°ªam
 = 
YES
;

181 
me
->
èrgë
 =Åarget;

191 #i‚de‡
NO_CACHE


192 i‡(
	`HTCacheMode_íabÀd
()) {

193 i‡(
me
->
mode
 & 
HT_MIME_PARTIAL
) {

194 
HTSåóm
 * 
≠≥nd
 = 
	`HTSåómSèck
(
WWW_CACHE_APPEND
,

195 
me
->
èrgë_f‹m©
,

196 
me
->
èrgë
, 
ªque°
, 
NO
);

197 i‡(
≠≥nd
Ë
me
->
èrgë
 = 
	`HTTì
(me->èrgë,áµíd, 
NULL
);

200 i‡(
≠≥nd
Ë
me
->
èrgë
 =áppend;

202 } i‡(
	`HTRe•⁄£_isCachabÀ
(
me
->
ª•⁄£
Ë=
HT_CACHE_ALL
) {

203 
HTSåóm
 * 
ˇche
 = 
	`HTSåómSèck
(
WWW_CACHE
, 
me
->
èrgë_f‹m©
,

204 
me
->
èrgë
, 
ªque°
, 
NO
);

205 i‡(
ˇche
Ë
me
->
èrgë
 = 
	`HTTì
(me->èrgë, cache, 
NULL
);

213 
	`HTTRACE
(
STREAM_TRACE
, "Building.... Transfer-Decoding stack\n");

214 i‡(
ã
) {

215 
HTSåóm
 * 
èrgë
 = 
	`HTTøns„rDecodögSèck
(
ã
, 
me
->èrgë, 
ªque°
, 
NULL
);

216 i‡(
èrgë
 =
BœckHﬁe
) {

217 i‡(!
ßve°ªam
) {

218 i‡(
me
->
èrgë
Ë(*me->èrgë->
iß
->
ab‹t
)(me->èrgë, 
NULL
);

219 
me
->
èrgë
 = me->
	`ßve_°ªam
(
ªque°
, 
NULL
,

220 
f‹m©
, 
me
->
èrgë_f‹m©
, me->
èrgë
);

221 
ßve°ªam
 = 
YES
;

224 
me
->
èrgë
 =Åarget;

231 i‡(!
me
->
èrgë
Ëme->èrgë = 
	`HTBœckHﬁe
();

232  
HT_OK
;

233 
	}
}

239 
PRIVATE
 
	$_di•©chP¨£rs
 (
HTReque°
 * 
ªq
, * 
tokí
, * 
vÆue
)

241 
°©us
;

242 
BOOL
 
found
 = 
NO
;

243 
BOOL
 
loˇl
 = 
NO
;

244 
HTMIMEP¨£Së
 * 
∑r£Së
;

247 
	`HTTRACE
(
STREAM_TRACE
, "MIME hódî. %s: %s\n" 
_


248 
tokí
 ?Åokí : "<nuŒ>" 
_


249 
vÆue
 ? value : "<null>");

250 i‡(!
tokí
Ë 
HT_OK
;

255 i‡((
∑r£Së
 = 
	`HTReque°_MIMEP¨£Së
(
ªq
, &
loˇl
)Ë!
NULL
) {

256 
°©us
 = 
	`HTMIMEP¨£Së_di•©ch
(
∑r£Së
, 
ªq
,

257 
tokí
, 
vÆue
, &
found
);

258 i‡(
found
Ë 
°©us
;

264 i‡(
loˇl
==
NO
 && (
∑r£Së
 = 
	`HTHódî_MIMEP¨£Së
()Ë!
NULL
) {

265 
°©us
 = 
	`HTMIMEP¨£Së_di•©ch
(
∑r£Së
, 
ªq
,

266 
tokí
, 
vÆue
, &
found
);

267 i‡(
found
Ë 
°©us
;

270  
HT_OK
;

271 
	}
}

277 
PRIVATE
 
	$_°ªam2di•©chP¨£rs
 (
HTSåóm
 * 
me
)

279 * 
tokí
 = 
	`HTChunk_d©a
(
me
->token);

280 * 
vÆue
 = 
	`HTChunk_d©a
(
me
->value);

283 
	`HTTRACE
(
STREAM_TRACE
, "MIME hódî. %s: %s\n" 
_


284 
tokí
 ?Åokí : "<nuŒ>" 
_


285 
vÆue
 ? value : "<null>");

286 i‡(!
tokí
Ë 
HT_OK
;

291 
	`HTRe•⁄£_addHódî
(
me
->
ª•⁄£
, 
tokí
, 
vÆue
);

294  (
	`_di•©chP¨£rs
 (
me
->
ªque°
, 
tokí
, 
vÆue
));

295 
	}
}

301 
PRIVATE
 
	$HTMIME_put_block
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
)

303 c⁄° * 
°¨t
 = 
b
;

304 c⁄° * 
íd
 = 
°¨t
;

305 c⁄° * 
vÆue
 = 
	`HTChunk_size
(
me
->vÆueË> 0 ? 
b
 : 
NULL
;

306 
Àngth
 = 
l
;

307 
°©us
;

309 !
me
->
å™•¨ít
) {

310 i‡(
me
->
EOL°©e
 =
EOL_FCR
) {

311 i‡(*
b
 =
CR
)

312 
me
->
EOL°©e
 = 
EOL_END
;

313 i‡(*
b
 =
LF
)

314 
me
->
EOL°©e
 = 
EOL_FLF
;

315 i‡(
	`is•a˚
((Ë*
b
))

316 
me
->
EOL°©e
 = 
EOL_FOLD
;

318 
me
->
EOL°©e
 = 
EOL_LINE
;

319 } i‡(
me
->
EOL°©e
 =
EOL_FLF
) {

320 i‡(*
b
 =
CR
)

321 
me
->
EOL°©e
 = 
EOL_SCR
;

322 i‡(*
b
 =
LF
)

323 
me
->
EOL°©e
 = 
EOL_END
;

324 i‡(
	`is•a˚
((Ë*
b
))

325 
me
->
EOL°©e
 = 
EOL_FOLD
;

327 
me
->
EOL°©e
 = 
EOL_LINE
;

328 } i‡(
me
->
EOL°©e
 =
EOL_SCR
) {

329 i‡(*
b
==
CR
 || *b==
LF
)

330 
me
->
EOL°©e
 = 
EOL_END
;

331 i‡(
	`is•a˚
((Ë*
b
))

332 
me
->
EOL°©e
 = 
EOL_FOLD
;

334 
me
->
EOL°©e
 = 
EOL_LINE
;

335 } i‡(*
b
 =
CR
)

336 
me
->
EOL°©e
 = 
EOL_FCR
;

337 i‡(*
b
 =
LF
)

338 
me
->
EOL°©e
 = 
EOL_FLF
;

340 i‡(!
me
->
haveTokí
) {

341 i‡(*
b
 =':' || 
	`is•a˚
(() *b)) {

342 
	`HTChunk_putb
(
me
->
tokí
, 
°¨t
, 
íd
-start);

343 
	`HTChunk_putc
(
me
->
tokí
, '\0');

344 
me
->
haveTokí
 = 
YES
;

346 
ch
 = *(*Ë
b
;

347 
ch
 = 
	`TOLOWER
(ch);

348 
me
->
hash
 = (me->hash * 3 + 
ch
Ë% 
MIME_HASH_SIZE
;

350 } i‡(
vÆue
 =
NULL
 && *
b
 !':' && !
	`is•a˚
(() *b))

351 
vÆue
 = 
b
;

352 
íd
++;

354 
me
->
EOL°©e
) {

355 
EOL_LINE
:

356 
EOL_END
:

358 
ªt
 = 
HT_ERROR
;

359 
	`HTChunk_putb
(
me
->
vÆue
, vÆue, 
íd
-value);

360 
	`HTChunk_putc
(
me
->
vÆue
, '\0');

361 
ªt
 = 
	`_°ªam2di•©chP¨£rs
(
me
);

362 
	`HTNë_addByãsRód
(
me
->
√t
, 
b
-
°¨t
);

363 
°¨t
=
b
, 
íd
=b;

364 i‡(
me
->
EOL°©e
 =
EOL_END
) {

365 i‡(
ªt
 =
HT_OK
) {

366 
b
++, 
l
--;

367 
ªt
 = 
	`pumpD©a
(
me
);

368 
	`HTNë_addByãsRód
(
me
->
√t
, 1);

369 i‡(
me
->
mode
 & (
HT_MIME_FOOTER
 | 
HT_MIME_CONT
)) {

370 
	`HTHo°_£tC⁄sumed
(
	`HTNë_ho°
(
me
->
√t
), 
Àngth
 - 
l
);

371  
ªt
;

373 
	`HTNë_£tHódîByãsRód
(
me
->
√t
, 
	`HTNë_byãsRód
(me->net));

377 
	`HTChunk_åunˇã
(
me
->
tokí
,0);

378 
	`HTChunk_åunˇã
(
me
->
vÆue
,0);

379 
me
->
haveTokí
 = 
NO
;

380 
me
->
hash
 = 0;

381 
vÆue
 = 
NULL
;

383 
me
->
EOL°©e
 = 
EOL_BEGIN
;

384 i‡(
ªt
 !
HT_OK
 &&Ñë !
HT_LOADED
) Ñet;

387 
EOL_FOLD
:

388 
me
->
EOL°©e
 = 
EOL_BEGIN
;

389 i‡(!
me
->
haveTokí
) {

390 
	`HTChunk_putb
(
me
->
tokí
, 
°¨t
, 
íd
-start);

391 
	`HTChunk_putc
(
me
->
tokí
, '\0');

392 
me
->
haveTokí
 = 
YES
;

393 } i‡(
vÆue
) {

394 
	`HTChunk_putb
(
me
->
vÆue
, vÆue, 
íd
-value);

395 
	`HTChunk_putc
(
me
->
vÆue
, ' ');

397 
°¨t
=
b
, 
íd
=b;

400 
b
++, 
l
--;

401 i‡(!
l
) {

402 
BOOL
 
°›
 = 
NO
;

403 i‡(!
me
->
haveTokí
) {

405 i‡(
íd
-
°¨t
)

406 
	`HTChunk_putb
(
me
->
tokí
, 
°¨t
, 
íd
-start);

408 
°›
 = 
YES
;

409 } i‡(
vÆue
)

410 
	`HTChunk_putb
(
me
->
vÆue
, vÆue, 
íd
-value);

411 
	`HTHo°_£tC⁄sumed
(
	`HTNë_ho°
(
me
->
√t
), 
Àngth
 - 
l
);

412  
°›
 ? 
	`pumpD©a
(
me
Ë: 
HT_OK
;

417 i‡(
Àngth
 !
l
Ë
	`HTHo°_£tC⁄sumed
(
	`HTNë_ho°
(
me
->
√t
),Üength -Ü);

424 i‡(
me
->
hasBody
) {

425 
HTNë
 * 
√t
 = 
me
->net;

427 
˛
 = 
	`HTRe•⁄£_Àngth
(
me
->
ª•⁄£
);

428 i‡(
˛
 >= 0) {

429 
bodyRód
 = 
	`HTNë_byãsRód
(
√t
Ë- 
	`HTNë_hódîByãsRód
(net);

434 i‡(
bodyRód
 + 
l
 >
˛
) {

435 
c⁄sume
 = 
˛
 - 
bodyRód
;

436 i‡((
°©us
 = (*
me
->
èrgë
->
iß
->
put_block
)(me->èrgë, 
b
, 
c⁄sume
)) < 0)

437  
°©us
;

439 
HTAÀπCÆlback
 * 
cbf
 = 
	`HTAÀπ_föd
(
HT_PROG_DONE
);

440 
	`HTNë_addByãsRód
(
√t
, 
c⁄sume
);

441 
	`HTHo°_£tC⁄sumed
(
	`HTNë_ho°
(
√t
), 
c⁄sume
);

442 i‡(
cbf
Ë(*cbf)(
me
->
ªque°
, 
HT_PROG_DONE
, 
HT_MSG_NULL
, 
NULL
, NULL, NULL);

443  
HT_LOADED
;

446 i‡((
°©us
 = (*
me
->
èrgë
->
iß
->
put_block
)(me->èrgë, 
b
, 
l
)) < 0)

447  
°©us
;

448 
	`HTNë_addByãsRód
(
√t
, 
l
);

449 
	`HTHo°_£tC⁄sumed
(
	`HTNë_ho°
(
√t
), 
l
);

450  
°©us
;

453  (*
me
->
èrgë
->
iß
->
put_block
)(me->èrgë, 
b
, 
l
);

455 
HTAÀπCÆlback
 * 
cbf
 = 
	`HTAÀπ_föd
(
HT_PROG_DONE
);

456 i‡(
cbf
Ë(*cbf)(
me
->
ªque°
, 
HT_PROG_DONE
, 
HT_MSG_NULL
, 
NULL
, NULL, NULL);

458  
HT_LOADED
;

459 
	}
}

465 
PRIVATE
 
	$HTMIME_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

467  
	`HTMIME_put_block
(
me
, &
c
, 1);

468 
	}
}

474 
PRIVATE
 
	$HTMIME_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

476  
	`HTMIME_put_block
(
me
, 
s
, (Ë
	`°æí
(s));

477 
	}
}

483 
PRIVATE
 
	$HTMIME_Êush
 (
HTSåóm
 * 
me
)

485  
me
->
èrgë
 ? (*me->èrgë->
iß
->
Êush
)(me->èrgëË: 
HT_OK
;

486 
	}
}

491 
PRIVATE
 
	$HTMIME_‰ì
 (
HTSåóm
 * 
me
)

493 
°©us
 = 
HT_OK
;

494 i‡(!
me
->
å™•¨ít
)

495 i‡(
	`_°ªam2di•©chP¨£rs
(
me
Ë=
HT_OK
)

496 
	`pumpD©a
(
me
);

497 i‡(
me
->
èrgë
) {

498 i‡((
°©us
 = (*
me
->
èrgë
->
iß
->
_‰ì
)(me->èrgë))==
HT_WOULD_BLOCK
)

499  
HT_WOULD_BLOCK
;

501 
	`HTTRACE
(
PROT_TRACE
, "MIME........ FREEING....\n");

502 
	`HTChunk_dñëe
(
me
->
tokí
);

503 
	`HTChunk_dñëe
(
me
->
vÆue
);

504 
	`HT_FREE
(
me
);

505  
°©us
;

506 
	}
}

510 
PRIVATE
 
	$HTMIME_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

512 
°©us
 = 
HT_ERROR
;

513 i‡(
me
->
èrgë
Ë
°©us
 = (*me->èrgë->
iß
->
ab‹t
)(me->èrgë, 
e
);

514 
	`HTTRACE
(
PROT_TRACE
, "MIME........ ABORTING...\n");

515 
	`HTChunk_dñëe
(
me
->
tokí
);

516 
	`HTChunk_dñëe
(
me
->
vÆue
);

517 
	`HT_FREE
(
me
);

518  
°©us
;

519 
	}
}

526 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTMIME
 =

529 
HTMIME_Êush
,

530 
HTMIME_‰ì
,

531 
HTMIME_ab‹t
,

532 
HTMIME_put_ch¨a˘î
,

533 
HTMIME_put_°rög
,

534 
HTMIME_put_block


544 
PUBLIC
 
HTSåóm
* 
	$HTMIMEC⁄vît
 (
HTReque°
 * 
ªque°
,

545 * 
∑øm
,

546 
HTF‹m©
 
öput_f‹m©
,

547 
HTF‹m©
 
ouçut_f‹m©
,

548 
HTSåóm
 * 
ouçut_°ªam
)

550 
HTSåóm
 * 
me
;

551 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (* me))Ë=
NULL
)

552 
	`HT_OUTOFMEM
("HTMIMEConvert");

553 
me
->
iß
 = &
HTMIME
;

554 
me
->
ªque°
 =Ñequest;

555 
me
->
ª•⁄£
 = 
	`HTReque°_ª•⁄£
(
ªque°
);

556 
me
->
√t
 = 
	`HTReque°_√t
(
ªque°
);

557 
me
->
èrgë
 = 
ouçut_°ªam
;

558 
me
->
èrgë_f‹m©
 = 
ouçut_f‹m©
;

559 
me
->
ßve_°ªam
 = 
LoˇlSaveSåóm
 ? LoˇlSaveSåóm : 
HTBœckHﬁeC⁄vîãr
;

560 
me
->
tokí
 = 
	`HTChunk_√w
(256);

561 
me
->
vÆue
 = 
	`HTChunk_√w
(256);

562 
me
->
hash
 = 0;

563 
me
->
EOL°©e
 = 
EOL_BEGIN
;

564 
me
->
haveTokí
 = 
NO
;

565  
me
;

566 
	}
}

575 
PUBLIC
 
HTSåóm
 * 
	$HTMIMEHódî
 (
HTReque°
 * 
ªque°
,

576 * 
∑øm
,

577 
HTF‹m©
 
öput_f‹m©
,

578 
HTF‹m©
 
ouçut_f‹m©
,

579 
HTSåóm
 * 
ouçut_°ªam
)

581 
HTSåóm
 * 
me
 = 
	`HTMIMEC⁄vît
(
ªque°
, 
∑øm
, 
öput_f‹m©
,

582 
ouçut_f‹m©
, 
ouçut_°ªam
);

583 
me
->
mode
 |
HT_MIME_HEADER
;

584  
me
;

585 
	}
}

587 
PUBLIC
 
HTSåóm
 * 
	$HTMIMEC⁄töue
 (
HTReque°
 * 
ªque°
,

588 * 
∑øm
,

589 
HTF‹m©
 
öput_f‹m©
,

590 
HTF‹m©
 
ouçut_f‹m©
,

591 
HTSåóm
 * 
ouçut_°ªam
)

593 
HTSåóm
 * 
me
 = 
	`HTMIMEC⁄vît
(
ªque°
, 
∑øm
, 
öput_f‹m©
,

594 
ouçut_f‹m©
, 
ouçut_°ªam
);

595 
me
->
mode
 |
HT_MIME_CONT
;

596  
me
;

597 
	}
}

599 
PUBLIC
 
HTSåóm
 * 
	$HTMIMEUpgøde
 (
HTReque°
 * 
ªque°
,

600 * 
∑øm
,

601 
HTF‹m©
 
öput_f‹m©
,

602 
HTF‹m©
 
ouçut_f‹m©
,

603 
HTSåóm
 * 
ouçut_°ªam
)

605 
HTSåóm
 * 
me
 = 
	`HTMIMEC⁄vît
(
ªque°
, 
∑øm
, 
öput_f‹m©
,

606 
ouçut_f‹m©
, 
ouçut_°ªam
);

607 
me
->
mode
 |
HT_MIME_UPGRADE
;

608  
me
;

609 
	}
}

615 
PUBLIC
 
HTSåóm
 * 
	$HTMIMEFoŸî
 (
HTReque°
 * 
ªque°
,

616 * 
∑øm
,

617 
HTF‹m©
 
öput_f‹m©
,

618 
HTF‹m©
 
ouçut_f‹m©
,

619 
HTSåóm
 * 
ouçut_°ªam
)

621 
HTSåóm
 * 
me
 = 
	`HTMIMEC⁄vît
(
ªque°
, 
∑øm
, 
öput_f‹m©
,

622 
ouçut_f‹m©
, 
ouçut_°ªam
);

623 
me
->
mode
 |
HT_MIME_FOOTER
;

624  
me
;

625 
	}
}

627 #i‚de‡
NO_CACHE


633 
PRIVATE
 
	$HTCacheLﬂdFûãr
 (
HTReque°
 * 
ªque°
, * 
∑øm
, 
mode
)

635 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

636 * 
deÁu…_«me
;

637 
HTCache
 * 
ˇche
;

639 
deÁu…_«me
 = 
	`HTReque°_deÁu…PutName
 (
ªque°
);

640 
ˇche
 = 
	`HTCache_föd
(
™ch‹
, 
deÁu…_«me
);

642 
	`HTTRACE
(
STREAM_TRACE
, "Cache Load..ÜoadingÖartial cacheÉntry\n");

643 i‡(
ˇche
) {

644 * 
«me
 = 
	`HTCache_«me
(
ˇche
);

645 
	`HTAnch‹_£tPhysiˇl
(
™ch‹
, 
«me
);

646 
	`HTCache_addHô
(
ˇche
);

647 
	`HT_FREE
(
«me
);

649  
HT_OK
;

650 
	}
}

656 
PRIVATE
 
	$HTCacheFlushFûãr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

657 * 
∑øm
, 
mode
)

659 
HTSåóm
 * 
pùe
 = (HTSåóm *Ë
∑øm
;

660 i‡(
pùe
) {

661 
	`HTTRACE
(
STREAM_TRACE
, "Cache Flush. Flushingánd freeing PIPE buffer\n");

662 (*
pùe
->
iß
->
Êush
)(pipe);

666 (*
pùe
->
iß
->
_‰ì
)(pipe);

674 
	`HTReque°_dñëe
(
ªque°
);

675  
HT_ERROR
;

676 
	}
}

689 
PUBLIC
 
HTSåóm
 * 
	$HTMIMEP¨tül
 (
HTReque°
 * 
ªque°
,

690 * 
∑øm
,

691 
HTF‹m©
 
öput_f‹m©
,

692 
HTF‹m©
 
ouçut_f‹m©
,

693 
HTSåóm
 * 
ouçut_°ªam
)

695 #i‚de‡
NO_CACHE


696 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

697 
HTF‹m©
 
f‹m©
 = 
	`HTAnch‹_f‹m©
(
™ch‹
);

698 
HTSåóm
 * 
pùe
 = 
NULL
;

707 
HTSåóm
 * 
mîge
 = 
	`HTMîge
(
	`HTSåómSèck
(
f‹m©
,

708 
ouçut_f‹m©
, 
ouçut_°ªam
,

709 
ªque°
, 
YES
), 2);

715 
HTSåóm
 * 
me
 = 
	`HTMIMEC⁄vît
(
ªque°
, 
∑øm
, 
öput_f‹m©
,

716 
ouçut_f‹m©
, 
ouçut_°ªam
);

717 
me
->
mode
 |
HT_MIME_PARTIAL
;

718 
me
->
èrgë
 = 
mîge
;

726 
HTSåóm
 * 
≠≥nd
 = 
	`HTSåómSèck
(
WWW_CACHE_APPEND
, 
ouçut_f‹m©
,

727 
ouçut_°ªam
, 
ªque°
, 
NO
);

728 i‡(
≠≥nd
Ë
me
->
èrgë
 = 
	`HTTì
(me->èrgë,áµíd, 
NULL
);

736 i‡((
pùe
 = 
	`HTPùeBuf„r
(
me
->
èrgë
, 0))) me->target =Öipe;

743 
HTReque°
 * 
ˇche_ªque°
 = 
	`HTReque°_√w
();

750 
	`HTReque°_£tOuçutF‹m©
(
ˇche_ªque°
, 
WWW_SOURCE
);

751 
	`HTReque°_£tOuçutSåóm
(
ˇche_ªque°
, 
mîge
);

758 
	`HTReque°_£tAnch‹
(
ˇche_ªque°
, (
HTAnch‹
 *Ë
™ch‹
);

759 
	`HTReque°_addBef‹e
(
ˇche_ªque°
, 
HTCacheLﬂdFûãr
, 
NULL
, NULL,

760 
HT_FILTER_FIRST
, 
YES
);

761 
	`HTReque°_addA·î
(
ˇche_ªque°
, 
HTCacheFlushFûãr
, 
NULL
, 
pùe
,

762 
HT_ALL
, 
HT_FILTER_FIRST
, 
YES
);

764 
	`HTTRACE
(
STREAM_TRACE
, "Partial..... Starting cacheÜoad\n");

765 
	`HTLﬂd
(
ˇche_ªque°
, 
NO
);

767  
me
;

769  
NULL
;

771 
	}
}

773 
PUBLIC
 
	$HTMIME_£tSaveSåóm
 (
HTC⁄vîãr
 * 
ßve_°ªam
)

775 
LoˇlSaveSåóm
 = 
ßve_°ªam
;

776 
	}
}

778 
PUBLIC
 
HTC⁄vîãr
 * 
	$HTMIME_ßveSåóm
 ()

780  
LoˇlSaveSåóm
;

781 
	}
}

783 #i‚de‡
NO_CACHE


789 
PRIVATE
 
	$HTMIME_™ch‹2ª•⁄£
 (
HTReque°
 * 
ªq
)

791 * 
tokí
;

792 * 
vÆue
;

793 
HTAssocLi°
 * 
hódî
;

794 
HTAssoc
 * 
¥es
;

795 
HTRe•⁄£
 * 
ªs
;

796 
HTP¨ítAnch‹
 * 
™ch‹
;

798 i‡(!
ªq
)

801 
™ch‹
 = 
	`HTReque°_™ch‹
 (
ªq
);

802 
hódî
 = 
	`HTAnch‹_hódî
 (
™ch‹
);

803 i‡(!
™ch‹
 || !
hódî
)

806 (
¥es
 = (
HTAssoc
 *Ë
	`HTAssocLi°_√xtObje˘
 (
hódî
)))

808 
tokí
 = 
	`HTAssoc_«me
 (
¥es
);

809 
vÆue
 = 
	`HTAssoc_vÆue
 (
¥es
);

810 
	`_di•©chP¨£rs
 (
ªq
, 
tokí
, 
vÆue
);

817 
ªs
 = 
	`HTReque°_ª•⁄£
 (
ªq
);

818 
	`HTRe•⁄£_isCached
 (
ªs
, 
YES
);

819 
	}
}

826 
PUBLIC
 
HTSåóm
 * 
	$HTCacheC›yHódîs
 (
HTReque°
 * 
ªque°
,

827 * 
∑øm
,

828 
HTF‹m©
 
öput_f‹m©
,

829 
HTF‹m©
 
ouçut_f‹m©
,

830 
HTSåóm
 * 
ouçut_°ªam
)

832 
	`HTTRACE
(
STREAM_TRACE
, "Cache Copy Headers.. Copying headers intoÅheÑesponse object\n");

833 
	`HTMIME_™ch‹2ª•⁄£
 (
ªque°
);

834  
HT_OK
;

835 
	}
}

	@Library/src/HTMIME.h

33 #i‚de‡
HTMIME_H


34 
	#HTMIME_H


	)

36 
	~"HTSåóm.h
"

37 
	~"HTF‹m©.h
"

55 
HTMIME_£tSaveSåóm
 (
HTC⁄vîãr
 * 
ßve_°ªam
);

56 
HTC⁄vîãr
 * 
HTMIME_ßveSåóm
 ();

69 
HTC⁄vîãr
 
HTMIMEC⁄vît
;

82 
HTC⁄vîãr
 
HTMIMEHódî
;

92 
HTC⁄vîãr
 
HTMIMEFoŸî
;

104 
HTC⁄vîãr
 
HTMIMEC⁄töue
;

121 
HTC⁄vîãr
 
HTMIMEUpgøde
;

136 
HTC⁄vîãr
 
HTMIMEP¨tül
;

148 #i‚de‡
NO_CACHE


149 
HTC⁄vîãr
 
HTCacheC›yHódîs
;

	@Library/src/HTMIMERq.c

17 
	~"wwwsys.h
"

18 
	~"WWWUtû.h
"

19 
	~"WWWC‹e.h
"

20 
	~"HTAncM™.h
"

21 
	~"HTNëM™.h
"

22 
	~"HTReqM™.h
"

23 
	~"HTHódî.h
"

24 
	~"HTMIMERq.h
"

26 
	#PUTC
(
c
Ë(*
me
->
èrgë
->
iß
->
put_ch¨a˘î
)(me->èrgë, c)

	)

27 
	#PUTS
(
s
Ë(*
me
->
èrgë
->
iß
->
put_°rög
)(me->èrgë, s)

	)

28 
	#PUTBLOCK
(
b
, 
l
Ë(*
me
->
èrgë
->
iß
->
put_block
)(me->èrgë, b,Ü)

	)

30 
	s_HTSåóm
 {

31 c⁄° 
HTSåómCœss
 * 
	miß
;

32 
HTSåóm
 * 
	mèrgë
;

33 
HTReque°
 * 
	mªque°
;

34 
BOOL
 
	mídHódî
;

35 
BOOL
 
	må™•¨ít
;

38 
	#HT_MAX_WAIT
 8

	)

40 
PRIVATE
 
MIMEReque°_put_block
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
);

50 
PRIVATE
 
	$MIMEMakeReque°
 (
HTSåóm
 * 
me
, 
HTReque°
 * 
ªque°
)

52 
¸lf
[3];

53 
löebuf
[256];

54 
HTP¨ítAnch‹
 * 
ítôy
 = 
	`HTReque°_ítôyAnch‹
(
ªque°
);

55 
HTEnHd
 
E¡ôyMask
 = 
	`HTReque°_íHd
(
ªque°
);

56 
BOOL
 
å™s„r_codög
 = 
NO
;

57 *
¸lf
 = 
CR
; *(¸lf+1Ë
LF
; *(crlf+2) = '\0';

59 i‡(
E¡ôyMask
 & 
HT_E_ALLOW
) {

60 
BOOL
 
fú°
 = 
YES
;

61 
˙t
;

62 
HTMëhod
 
mëhod£t
 = 
	`HTAnch‹_Ælow
(
ítôy
);

63 
˙t
=0; c¡<(
HTMëhod
)<<3 ; cnt++) {

64 i‡(
mëhod£t
 & (1<<
˙t
)) {

65 i‡(
fú°
) {

66 
	`PUTS
("Allow: ");

67 
fú°
 = 
NO
;

69 
	`PUTC
(',');

70 
	`PUTS
(
	`HTMëhod_«me
(1<<
˙t
));

73 i‡(!
fú°
Ë
	`PUTBLOCK
(
¸lf
, 2);

75 i‡(
E¡ôyMask
 & 
HT_E_CONTENT_ENCODING
 && 
ítôy
->
c⁄ã¡_ícodög
) {

76 
BOOL
 
fú°
 = 
YES
;

77 
HTLi°
 * 
cur
 = 
ítôy
->
c⁄ã¡_ícodög
;

78 
HTEncodög
 
¥es
;

79 (
¥es
 = (
HTEncodög
Ë
	`HTLi°_√xtObje˘
(
cur
)) &&

80 !
	`HTF‹m©_isUnôyC⁄ã¡
(
¥es
)) {

81 i‡(
fú°
) {

82 
	`PUTS
("Content-Encoding: ");

83 
fú°
 = 
NO
;

85 
	`PUTC
(',');

86 
	`PUTS
(
	`HTAtom_«me
(
¥es
));

88 i‡(!
fú°
Ë
	`PUTBLOCK
(
¸lf
, 2);

90 i‡(
E¡ôyMask
 & 
HT_E_CTE
 && 
ítôy
->
˘e
) {

91 
HTEncodög
 
˘e
 = 
	`HTAnch‹_c⁄ã¡Tøns„rEncodög
(
ítôy
);

92 i‡(!
	`HTF‹m©_isUnôyTøns„r
(
˘e
)) {

93 
	`•rötf
(
löebuf
, "Content-Transfer-Encoding: %s%c%c",

94 
	`HTAtom_«me
(
˘e
), 
CR
, 
LF
);

95 
	`PUTBLOCK
(
löebuf
, (Ë
	`°æí
(linebuf));

98 i‡(
E¡ôyMask
 & 
HT_E_CONTENT_LANGUAGE
 && 
ítôy
->
c⁄ã¡_œnguage
){

99 
BOOL
 
fú°
 = 
YES
;

100 
HTLi°
 * 
cur
 = 
ítôy
->
c⁄ã¡_œnguage
;

101 
HTL™guage
 
¥es
;

102 (
¥es
 = (
HTL™guage
Ë
	`HTLi°_√xtObje˘
(
cur
))) {

103 i‡(
fú°
) {

104 
	`PUTS
("Content-Language: ");

105 
fú°
 = 
NO
;

107 
	`PUTC
(',');

108 
	`PUTS
(
	`HTAtom_«me
(
¥es
));

110 i‡(!
fú°
Ë
	`PUTBLOCK
(
¸lf
, 2);

114 i‡(!
	`HTReque°_å™s„r
(
ªque°
)) {

115 i‡(
E¡ôyMask
 & 
HT_E_CONTENT_LENGTH
) {

116 i‡(
ítôy
->
c⁄ã¡_Àngth
 >= 0) {

117 
	`•rötf
(
löebuf
, "Content-Length: %ld%c%c",

118 
ítôy
->
c⁄ã¡_Àngth
, 
CR
, 
LF
);

119 
	`PUTBLOCK
(
löebuf
, (Ë
	`°æí
(linebuf));

121 
å™s„r_codög
 = 
YES
;

122 
	`•rötf
(
löebuf
, "Transfer-Encoding: %s%c%c",

123 
	`HTAtom_«me
(
WWW_CODING_CHUNKED
), 
CR
, 
LF
);

124 
	`PUTBLOCK
(
löebuf
, (Ë
	`°æí
(linebuf));

128 i‡(
E¡ôyMask
 & 
HT_E_CONTENT_TYPE
 && 
ítôy
->
c⁄ã¡_ty≥
) {

129 
HTF‹m©
 
f‹m©
 = 
ítôy
->
c⁄ã¡_ty≥
 !
WWW_UNKNOWN
 ?

130 
ítôy
->
c⁄ã¡_ty≥
 : 
WWW_BINARY
;

131 
HTAssocLi°
 * 
∑ømëîs
 = 
	`HTAnch‹_f‹m©P¨am
(
ítôy
);

134 
	`PUTS
("Content-Type: ");

135 
	`PUTS
(
	`HTAtom_«me
(
f‹m©
));

138 i‡(
∑ømëîs
) {

139 
HTAssoc
 * 
¥es
;

140 (
¥es
 = (
HTAssoc
 *Ë
	`HTAssocLi°_√xtObje˘
(
∑ømëîs
))) {

141 
	`PUTS
(";");

142 
	`PUTS
(
	`HTAssoc_«me
(
¥es
));

143 
	`PUTS
("=");

144 
	`PUTS
(
	`HTAssoc_vÆue
(
¥es
));

147 
	`PUTBLOCK
(
¸lf
, 2);

149 i‡(
E¡ôyMask
 & 
HT_E_DERIVED_FROM
 && 
ítôy
->
dîived_‰om
) {

150 
	`•rötf
(
löebuf
, "Dîived-From: %s%c%c", 
ítôy
->
dîived_‰om
,

151 
CR
, 
LF
);

152 
	`PUTBLOCK
(
löebuf
, (Ë
	`°æí
(linebuf));

154 i‡(
E¡ôyMask
 & 
HT_E_EXPIRES
) {

155 i‡(
ítôy
->
expúes
 != -1) {

156 
	`•rötf
(
löebuf
, "Expires: %s%c%c",

157 
	`HTD©eTimeSå
(&
ítôy
->
expúes
, 
NO
), 
CR
,
LF
);

158 
	`PUTBLOCK
(
löebuf
, (Ë
	`°æí
(linebuf));

161 i‡(
E¡ôyMask
 & 
HT_E_LAST_MODIFIED
) {

162 i‡(
ítôy
->
œ°_modifõd
 != -1) {

163 
	`•rötf
(
löebuf
, "Last-Modified: %s%c%c",

164 
	`HTD©eTimeSå
(&
ítôy
->
œ°_modifõd
, 
NO
), 
CR
,
LF
);

165 
	`PUTBLOCK
(
löebuf
, (Ë
	`°æí
(linebuf));

168 i‡(
E¡ôyMask
 & 
HT_E_LINK
) {

169 
HTLök
 * 
lök
 = 
	`HTAnch‹_maöLök
((
HTAnch‹
 *Ë
ítôy
);

170 
HTLi°
 * 
sublöks
 = 
	`HTAnch‹_subLöks
((
HTAnch‹
 *Ë
ítôy
);

171 
HTLökTy≥
 
lökty≥
 = 
NULL
;

174 i‡(
lök
 && (
lökty≥
 = 
	`HTLök_ty≥
(link))) {

175 * 
§c
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
	`HTReque°_™ch‹
(
ªque°
));

176 
HTP¨ítAnch‹
 * 
de°
 = 
	`HTAnch‹_∑ª¡
(
	`HTLök_de°ö©i⁄
(
lök
));

177 * 
d°
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
de°
);

178 * 
ªl_d°
 = 
	`HTRñ©ive
(
d°
, 
§c
);

179 i‡(
ªl_d°
) {

180 
	`PUTS
("Link: \"");

181 
	`PUTS
(
ªl_d°
);

182 
	`PUTS
("\"");

183 
	`•rötf
(
löebuf
, ";ªl=\"%s\"", 
	`HTAtom_«me
(
lökty≥
));

184 
	`PUTBLOCK
(
löebuf
, (Ë
	`°æí
(linebuf));

185 
	`HT_FREE
(
ªl_d°
);

186 
	`HT_FREE
(
d°
);

190 i‡(
sublöks
) {

191 
HTLök
 * 
¥es
;

192 (
¥es
 = (
HTLök
 *Ë
	`HTLi°_√xtObje˘
(
sublöks
))) {

193 i‡((
lökty≥
 = 
	`HTLök_ty≥
(
¥es
))) {

194 
de°
 = 
	`HTAnch‹_∑ª¡
(
	`HTLök_de°ö©i⁄
(
¥es
));

195 
d°
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
de°
);

196 
ªl_d°
 = 
	`HTRñ©ive
(
d°
, 
§c
);

197 i‡(
ªl_d°
) {

198 
	`PUTS
(", \"");

199 
	`PUTS
(
ªl_d°
);

200 
	`PUTS
("\"");

201 
	`•rötf
(
löebuf
, ";ªl=\"%s\"", 
	`HTAtom_«me
(
lökty≥
));

202 
	`PUTBLOCK
(
löebuf
, (Ë
	`°æí
(linebuf));

203 
	`HT_FREE
(
ªl_d°
);

204 
	`HT_FREE
(
d°
);

209 
	`PUTBLOCK
(
¸lf
, 2);

210 
	`HT_FREE
(
§c
);

213 i‡(
E¡ôyMask
 & 
HT_E_TITLE
 && 
ítôy
->
tôÀ
) {

214 
	`•rötf
(
löebuf
, "TôÀ: %s%c%c", 
ítôy
->
tôÀ
, 
CR
, 
LF
);

215 
	`PUTBLOCK
(
löebuf
, (Ë
	`°æí
(linebuf));

217 i‡(
E¡ôyMask
 & 
HT_E_URI
) {

220 i‡(
E¡ôyMask
 & 
HT_E_VERSION
 && 
ítôy
->
vîsi⁄
) {

221 
	`•rötf
(
löebuf
, "C⁄ã¡-Vîsi⁄: %s%c%c", 
ítôy
->
vîsi⁄
, 
CR
, 
LF
);

222 
	`PUTBLOCK
(
löebuf
, (Ë
	`°æí
(linebuf));

224 i‡(
me
->
ídHódî
) {

225 
	`•rötf
(
löebuf
, "%c%c", 
CR
, 
LF
);

226 
	`PUTBLOCK
(
löebuf
, (Ë
	`°æí
(linebuf));

238 i‡(
å™s„r_codög
) {

239 
HTSåóm
 * 
èrgë
 = 
	`HTTøns„rCodögSèck
(
WWW_CODING_CHUNKED
,

240 
me
->
èrgë
, 
ªque°
, 
NULL
, 
YES
);

241 
	`HTTRACE
(
STREAM_TRACE
, "Building.... Transfer-Encoding stack\n");

242 i‡(
èrgë
 =
	`HTBœckHﬁe
()) {

243 i‡(
me
->
èrgë
Ë(*me->èrgë->
iß
->
ab‹t
)(me->èrgë, 
NULL
);

244 
me
->
èrgë
 = 
	`HTEº‹Såóm
();

246 
me
->
èrgë
 =Åarget;

257 
HTEncodög
 
˘e
 = 
	`HTAnch‹_c⁄ã¡Tøns„rEncodög
(
ítôy
);

258 i‡(!
	`HTF‹m©_isUnôyTøns„r
(
˘e
)) {

259 
	`HTTRACE
(
STREAM_TRACE
, "Building.... C-T-E stack\n");

260 
me
->
èrgë
 = 
	`HTC⁄ã¡Tøns„rCodögSèck
(
˘e
, me->target,

261 
ªque°
, 
NULL
, 
YES
);

267 
HTLi°
 * 
cc
 = 
	`HTAnch‹_ícodög
(
ítôy
);

268 i‡(
cc
) {

269 
	`HTTRACE
(
STREAM_TRACE
, "Building.... C-E stack\n");

270 
me
->
èrgë
 = 
	`HTC⁄ã¡EncodögSèck
(
cc
, me->èrgë, 
ªque°
, 
NULL
);

275 
	`HTTRACE
(
PROT_TRACE
, "MIME........ Generating Entity Headers\n");

276  
HT_OK
;

277 
	}
}

282 
PRIVATE
 
	$MIMEReque°_Êush
 (
HTSåóm
 * 
me
)

284 
°©us
 = 
	`MIMEReque°_put_block
(
me
, 
NULL
, 0);

285  
°©us
==
HT_OK
 ? (*
me
->
èrgë
->
iß
->
Êush
)(me->target) : status;

286 
	}
}

288 
PRIVATE
 
	$MIMEReque°_put_block
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
)

290 
HTNë
 * 
√t
 = 
	`HTReque°_√t
(
me
->
ªque°
);

291 i‡(!
me
->
å™•¨ít
) {

292 
	`MIMEMakeReque°
(
me
, me->
ªque°
);

293 
me
->
å™•¨ít
 = 
YES
;

298 i‡(
	`HTMëhod_hasE¡ôy
(
	`HTReque°_mëhod
(
me
->
ªque°
))) {

299 
HTHo°
 * 
ho°
 = 
	`HTNë_ho°
(
√t
);

300 * 
˛ass
 = 
	`HTHo°_˛ass
(
ho°
);

301 i‡(
˛ass
 && !
	`°rcmp
(class, "http")) {

302 
	`MIMEReque°_Êush
(
me
);

303 
	`HTNë_£tHódîByãsWrôãn
(
√t
, 
	`HTNë_byãsWrôãn
(net));

304  
HT_PAUSE
;

310 i‡(
b
) {

311 
HTP¨ítAnch‹
 * 
ítôy
 = 
	`HTReque°_ítôyAnch‹
(
me
->
ªque°
);

312 
˛
 = 
	`HTAnch‹_Àngth
(
ítôy
);

313  (
˛
>=0 && 
	`HTNë_byãsWrôãn
(
√t
)-
	`HTNë_hódîByãsWrôãn
(net) >= cl) ?

314 
HT_LOADED
 : 
	`PUTBLOCK
(
b
, 
l
);

316  
HT_OK
;

317 
	}
}

319 
PRIVATE
 
	$MIMEReque°_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

321  
	`MIMEReque°_put_block
(
me
, &
c
, 1);

322 
	}
}

324 
PRIVATE
 
	$MIMEReque°_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

326  
	`MIMEReque°_put_block
(
me
, 
s
, 
	`°æí
(s));

327 
	}
}

332 
PRIVATE
 
	$MIMEReque°_‰ì
 (
HTSåóm
 * 
me
)

334 
°©us
 = 
	`MIMEReque°_Êush
(
me
);

335 i‡(
°©us
 !
HT_WOULD_BLOCK
) {

336 i‡((
°©us
 = (*
me
->
èrgë
->
iß
->
_‰ì
)(me->èrgë)Ë=
HT_WOULD_BLOCK
)

337  
HT_WOULD_BLOCK
;

338 
	`HT_FREE
(
me
);

340  
°©us
;

341 
	}
}

343 
PRIVATE
 
	$MIMEReque°_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

345 i‡(
me
->
èrgë
Ë(*me->èrgë->
iß
->
ab‹t
)(me->èrgë, 
e
);

346 
	`HT_FREE
(
me
);

347 
	`HTTRACE
(
PROT_TRACE
, "MIMERequest. ABORTING...\n");

348  
HT_ERROR
;

349 
	}
}

354 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gMIMEReque°Cœss
 =

357 
MIMEReque°_Êush
,

358 
MIMEReque°_‰ì
,

359 
MIMEReque°_ab‹t
,

360 
MIMEReque°_put_ch¨a˘î
,

361 
MIMEReque°_put_°rög
,

362 
MIMEReque°_put_block


365 
PUBLIC
 
HTSåóm
 * 
	$HTMIMEReque°_√w
 (
HTReque°
 * 
ªque°
, 
HTSåóm
 * 
èrgë
,

366 
BOOL
 
ídHódî
)

368 
HTSåóm
 * 
me
;

369 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

370 
	`HT_OUTOFMEM
("HTMIMERequest_new");

371 
me
->
iß
 = &
MIMEReque°Cœss
;

372 
me
->
èrgë
 =Åarget;

373 
me
->
ªque°
 =Ñequest;

374 
me
->
ídHódî
 =ÉndHeader;

375 
me
->
å™•¨ít
 = 
NO
;

376  
me
;

377 
	}
}

	@Library/src/HTMIMERq.h

28 #i‚de‡
HTMIMERQ_H


29 
	#HTMIMERQ_H


	)

31 
	~"HTSåóm.h
"

32 
	~"HTReq.h
"

44 
HTSåóm
 * 
HTMIMEReque°_√w
 (
HTReque°
 * 
ªque°
, HTSåóm * 
èrgë
,

45 
BOOL
 
ídHódî
);

	@Library/src/HTMIMImp.c

18 
	~"wwwsys.h
"

19 
	~"WWWUtû.h
"

20 
	~"WWWC‹e.h
"

21 
	~"HTHódî.h
"

22 
	~"HTTPUtû.h
"

23 
	~"HTMIMImp.h
"

27 
PUBLIC
 
	$HTMIME_ac˚±
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

28 * 
tokí
, * 
vÆue
)

31  
HT_OK
;

32 
	}
}

34 
PUBLIC
 
	$HTMIME_ac˚±Ch¨£t
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

35 * 
tokí
, * 
vÆue
)

38  
HT_OK
;

39 
	}
}

41 
PUBLIC
 
	$HTMIME_ac˚±Encodög
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

42 * 
tokí
, * 
vÆue
)

45  
HT_OK
;

46 
	}
}

48 
PUBLIC
 
	$HTMIME_ac˚±L™guage
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

49 * 
tokí
, * 
vÆue
)

52  
HT_OK
;

53 
	}
}

55 
PUBLIC
 
	$HTMIME_ac˚±R™ges
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

56 * 
tokí
, * 
vÆue
)

58 i‡(
vÆue
) {

59 
HTNë
 * 
√t
 = 
	`HTReque°_√t
(
ªque°
);

60 
HTHo°
 * 
ho°
 = 
	`HTNë_ho°
(
√t
);

61 
	`HTHo°_£tR™geUnôs
(
ho°
, 
vÆue
);

63  
HT_OK
;

64 
	}
}

66 
PUBLIC
 
	$HTMIME_authítiˇã
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

67 * 
tokí
, * 
vÆue
)

69 * 
scheme
 = 
	`HTNextFõld
(&
vÆue
);

70 i‡(
scheme
) {

71 
	`HTRe•⁄£_addChÆÀnge
(
ª•⁄£
, 
scheme
, 
vÆue
);

72 
	`HTRe•⁄£_£tScheme
(
ª•⁄£
, 
scheme
);

74  
HT_OK
;

75 
	}
}

77 
PUBLIC
 
	$HTMIME_authítiˇti⁄Info
 (
HTReque°
 * 
ªque°
,

78 
HTRe•⁄£
 * 
ª•⁄£
,

79 * 
tokí
, * 
vÆue
)

81 i‡(
tokí
 && 
vÆue
) {

82 
	`HTRe•⁄£_addChÆÀnge
(
ª•⁄£
, 
tokí
, 
vÆue
);

83 
	`HTRe•⁄£_£tScheme
(
ª•⁄£
, "digest");

85  
HT_OK
;

86 
	}
}

88 
PUBLIC
 
	$HTMIME_auth‹iz©i⁄
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

89 * 
tokí
, * 
vÆue
)

92  
HT_OK
;

93 
	}
}

95 
PUBLIC
 
	$HTMIME_ˇcheC⁄åﬁ
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

96 * 
tokí
, * 
vÆue
)

102 * 
«me_vÆ
;

103 (
«me_vÆ
 = 
	`HTNextPaú
(&
vÆue
)Ë!
NULL
) {

104 * 
«me
 = 
	`HTNextFõld
(&
«me_vÆ
);

105 * 
vÆ
 = 
	`HTNextFõld
(&
«me_vÆ
);

106 i‡(
«me
Ë
	`HTRe•⁄£_addCacheC⁄åﬁ
(
ª•⁄£
,Çame, 
vÆ
 ? val : "");

108  
HT_OK
;

109 
	}
}

111 
PUBLIC
 
	$HTMIME_c⁄√˘i⁄
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

112 * 
tokí
, * 
vÆue
)

118 * 
«me_vÆ
;

119 (
«me_vÆ
 = 
	`HTNextPaú
(&
vÆue
)Ë!
NULL
) {

120 * 
«me
 = 
	`HTNextFõld
(&
«me_vÆ
);

121 * 
vÆ
 = 
	`HTNextFõld
(&
«me_vÆ
);

129 i‡(
«me
) {

130 
HTNë
 * 
√t
 = 
	`HTReque°_√t
(
ªque°
);

131 
HTHo°
 * 
ho°
 = 
	`HTNë_ho°
(
√t
);

132 i‡(!
	`°rˇ£comp
(
«me
, "close")) {

133 
	`HTTRACE
(
STREAM_TRACE
, "MIMEParser.. CloseÑeceived...\n");

134 
	`HTHo°_£tClo£NŸifiˇti⁄
(
ho°
, 
YES
);

135 } i‡(!
	`°rˇ£comp
(
«me
, "keep-alive")) {

141 i‡(
	`HTHo°_vîsi⁄
(
ho°
Ë< 
HTTP_11
) {

142 
	`HTNë_£tPîsi°ít
(
√t
, 
YES
, 
HT_TP_SINGLE
);

143 
	`HTTRACE
(
STREAM_TRACE
, "MIMEParser.. HTTP/1.0 Keep Alive\n");

145 
	`HTTRACE
(
STREAM_TRACE
, "MIMEParser.. HTTP/1.0 Keep Alive ignored\n");

147 
	`HTRe•⁄£_addC⁄√˘i⁄
(
ª•⁄£
, 
«me
, 
vÆ
 ? val : "");

150  
HT_OK
;

151 
	}
}

153 
PUBLIC
 
	$HTMIME_c⁄ã¡Encodög
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

154 * 
tokí
, * 
vÆue
)

156 * 
fõld
;

157 (
fõld
 = 
	`HTNextFõld
(&
vÆue
)Ë!
NULL
) {

158 * 
lc
 = 
fõld
;

159 (*
lc
 = 
	`TOLOWER
(*lc)))Üc++;

160 
	`HTRe•⁄£_addEncodög
(
ª•⁄£
, 
	`HTAtom_f‹
(
fõld
));

162  
HT_OK
;

163 
	}
}

165 
PUBLIC
 
	$HTMIME_c⁄ã¡Lígth
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

166 * 
tokí
, * 
vÆue
)

168 * 
fõld
;

169 i‡((
fõld
 = 
	`HTNextFõld
(&
vÆue
)Ë!
NULL
)

170 
	`HTRe•⁄£_£tLígth
(
ª•⁄£
, 
	`©ﬁ
(
fõld
));

171  
HT_OK
;

172 
	}
}

174 
PUBLIC
 
	$HTMIME_c⁄ã¡R™ge
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

175 * 
tokí
, * 
vÆue
)

177 * 
fõld
;

178 i‡((
fõld
 = 
	`HTNextFõld
(&
vÆue
)))

179 
	`HTRe•⁄£_addR™ge
(
ª•⁄£
, 
fõld
, 
vÆue
);

180  
HT_OK
;

181 
	}
}

183 
PUBLIC
 
	$HTMIME_c⁄ã¡Tøns„rEncodög
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

184 * 
tokí
, * 
vÆue
)

186 * 
fõld
;

187 i‡((
fõld
 = 
	`HTNextFõld
(&
vÆue
)Ë!
NULL
) {

188 *
lc
 = 
fõld
;

189 (*
lc
 = 
	`TOLOWER
(*lc)))Üc++;

190 
	`HTRe•⁄£_£tC⁄ã¡Tøns„rEncodög
(
ª•⁄£
, 
	`HTAtom_f‹
(
fõld
));

192  
HT_OK
;

193 
	}
}

195 
PUBLIC
 
	$HTMIME_c⁄ã¡Ty≥
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

196 * 
tokí
, * 
vÆue
)

198 * 
fõld
;

199 i‡((
fõld
 = 
	`HTNextFõld
(&
vÆue
)Ë!
NULL
) {

202 *
lc
 = 
fõld
;

203 (*
lc
 = 
	`TOLOWER
(*lc)))Üc++;

204 
	`HTRe•⁄£_£tF‹m©
(
ª•⁄£
, 
	`HTAtom_f‹
(
fõld
));

208 * 
∑øm
;

209 (
fõld
 = 
	`HTNextFõld
(&
vÆue
)Ë!
NULL
 &&

210 (
∑øm
 = 
	`HTNextFõld
(&
vÆue
)Ë!
NULL
) {

211 
lc
 = 
fõld
;

212 (*
lc
 = 
	`TOLOWER
(*lc)))Üc++;

213 
lc
 = 
∑øm
;

214 (*
lc
 = 
	`TOLOWER
(*lc)))Üc++;

215 
	`HTRe•⁄£_addF‹m©P¨am
(
ª•⁄£
, 
fõld
, 
∑øm
);

219  
HT_OK
;

220 
	}
}

223 
PRIVATE
 
	$HTFödI¡
(* 
hay°ack
, * 
√edÀ
, 
deÊt
)

225 * 
°¨t
 = 
	`°r°r
(
hay°ack
, 
√edÀ
);

226 
vÆue
 = 
deÊt
;

227 i‡(
°¨t
 !
NULL
) {

228 
°¨t
 +
	`°æí
(
√edÀ
);

229 
	`is•a˚
(*
°¨t
) start++;

230 i‡(
	`isdigô
(*
°¨t
)) {

231 * 
íd
 = 
°¨t
 + 1;

232 
ßve
;

233 
	`isdigô
(*
íd
))Énd++;

234 
ßve
 = *
íd
;

235 *
íd
 = 0;

236 
vÆue
 = 
	`©oi
(
°¨t
);

237 *
íd
 = 
ßve
;

240  
vÆue
;

241 
	}
}

244 
PUBLIC
 
	$HTMIME_kìpAlive
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

245 * 
tokí
, * 
vÆue
)

247 * 
«me_vÆ
;

248 
HTNë
 * 
√t
 = 
	`HTReque°_√t
(
ªque°
);

249 
HTHo°
 * 
ho°
 = 
	`HTNë_ho°
(
√t
);

250 (
«me_vÆ
 = 
	`HTNextPaú
(&
vÆue
)Ë!
NULL
) {

251 * 
«me
 = 
	`HTNextFõld
(&
«me_vÆ
);

252 * 
vÆ
 = 
	`HTNextFõld
(&
«me_vÆ
);

253 i‡(!
	`°rˇ£comp
(
«me
, "max"Ë&& 
vÆ
) {

254 
max
 = 
	`©oi
(
vÆ
);

255 
	`HTTRACE
(
STREAM_TRACE
, "MIMEP¨£r.. Max %dÑeque°†¥ c⁄√˘i⁄\n" 
_
 
max
);

256 
	`HTHo°_£tReqsPîC⁄√˘i⁄
(
ho°
, 
max
);

257 } i‡(!
	`°rˇ£comp
(
«me
, "timeout"Ë&& 
vÆ
) {

258 
timeout
 = 
	`©oi
(
vÆ
);

259 
	`HTTRACE
(
STREAM_TRACE
, "MIMEP¨£r.. Timeouàa·î %d secs\n" 
_
 
timeout
);

262  
HT_OK
;

263 
	}
}

265 
PUBLIC
 
	$HTMIME_lök
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

266 * 
tokí
, * 
vÆue
)

268 * 
ñemít
;

269 
HTP¨ítAnch‹
 * 
me
 = 
	`HTReque°_™ch‹
(
ªque°
);

270 (
ñemít
 = 
	`HTNextEÀmít
(&
vÆue
))) {

271 * 
∑øm_∑ú
;

272 * 
uri
 = 
	`HTNextFõld
(&
ñemít
);

273 
HTChûdAnch‹
 * 
chûd_de°
 = 
	`HTAnch‹_födChûdAndLök
(
me
, 
NULL
, 
uri
, NULL);

274 
HTP¨ítAnch‹
 * 
∑ª¡_de°
 =

275 
	`HTAnch‹_∑ª¡
(
	`HTAnch‹_fﬁlowMaöLök
((
HTAnch‹
 *Ë
chûd_de°
));

276 i‡(
∑ª¡_de°
) {

277 (
∑øm_∑ú
 = 
	`HTNextPaú
(&
ñemít
))) {

278 * 
«me
 = 
	`HTNextFõld
(&
∑øm_∑ú
);

279 * 
vÆ
 = 
	`HTNextFõld
(&
∑øm_∑ú
);

280 i‡(
«me
) {

281 i‡(!
	`°rˇ£comp
(
«me
, "ªl"Ë&& 
vÆ
 && *val) {

282 
	`HTTRACE
(
STREAM_TRACE
, "MIMEP¨£r.. Lök f‹w¨dÑñ©i⁄shù `%s\'\n" 
_


283 
vÆ
);

284 
	`HTLök_add
((
HTAnch‹
 *Ë
me
, (HTAnch‹ *Ë
∑ª¡_de°
,

285 (
HTLökTy≥
Ë
	`HTAtom_ˇ£F‹
(
vÆ
),

286 
METHOD_INVALID
);

287 } i‡(!
	`°rˇ£comp
(
«me
, "ªv"Ë&& 
vÆ
 && *val) {

288 
	`HTTRACE
(
STREAM_TRACE
, "MIMEP¨£r.. LökÑevî£Ññ©i⁄shù `%s\'\n" 
_


289 
vÆ
);

290 
	`HTLök_add
((
HTAnch‹
 *Ë
∑ª¡_de°
, (HTAnch‹ *Ë
me
,

291 (
HTLökTy≥
Ë
	`HTAtom_ˇ£F‹
(
vÆ
),

292 
METHOD_INVALID
);

293 } i‡(!
	`°rˇ£comp
(
«me
, "ty≥"Ë&& 
vÆ
 && *val) {

294 
	`HTTRACE
(
STREAM_TRACE
, "MIMEP¨£r.. LökÅy≥ `%s\'\n" 
_
 
vÆ
);

295 i‡(
	`HTAnch‹_f‹m©
(
∑ª¡_de°
Ë=
WWW_UNKNOWN
)

296 
	`HTAnch‹_£tF‹m©
(
∑ª¡_de°
, (
HTF‹m©
Ë
	`HTAtom_ˇ£F‹
(
vÆ
));

298 
	`HTTRACE
(
STREAM_TRACE
, "MIMEP¨£r.. Lök unknow¿`%s\' wôh vÆuê`%s\'\n" 
_


299 
«me
 
_
 
vÆ
 ? val : "<null>");

304  
HT_OK
;

305 
	}
}

307 
PUBLIC
 
	$HTMIME_loˇti⁄
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

308 * 
tokí
, * 
vÆue
)

310 
HTAnch‹
 * 
ªdúe˘i⁄
 = 
NULL
;

311 * 
loˇti⁄
 = 
	`HTSåù
(
vÆue
);

316 i‡(!
	`HTURL_isAbsﬁuã
(
loˇti⁄
)) {

317 * 
ba£
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
	`HTReque°_™ch‹
(
ªque°
));

318 
loˇti⁄
 = 
	`HTP¨£
÷oˇti⁄, 
ba£
, 
PARSE_ALL
);

319 
ªdúe˘i⁄
 = 
	`HTAnch‹_födAddªss
(
loˇti⁄
);

320 
	`HT_FREE
(
ba£
);

321 
	`HT_FREE
(
loˇti⁄
);

323 
ªdúe˘i⁄
 = 
	`HTAnch‹_födAddªss
(
loˇti⁄
);

325 
	`HTRe•⁄£_£tRedúe˘i⁄
(
ª•⁄£
, 
ªdúe˘i⁄
);

326  
HT_OK
;

327 
	}
}

329 
PUBLIC
 
	$HTMIME_maxF‹w¨ds
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

330 * 
tokí
, * 
vÆue
)

333  
HT_OK
;

334 
	}
}

336 
PUBLIC
 
	$HTMIME_mesßgeDige°
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

337 * 
tokí
, * 
vÆue
)

339 
	`HTRe•⁄£_addChÆÀnge
(
ª•⁄£
, "Dige°-MesßgeDige°", 
vÆue
);

340  
HT_OK
;

341 
	}
}

343 
PUBLIC
 
	$HTMIME_¥agma
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

344 * 
tokí
, * 
vÆue
)

350 * 
«me_vÆ
;

351 (
«me_vÆ
 = 
	`HTNextPaú
(&
vÆue
)Ë!
NULL
) {

352 * 
«me
 = 
	`HTNextFõld
(&
«me_vÆ
);

353 i‡(
«me
) {

354 i‡(!
	`°rˇ£comp
(
«me
, "no-cache")) {

355 
	`HTRe•⁄£_£tCachabÀ
(
ª•⁄£
, 
HT_NO_CACHE
);

356 
	`HTTRACE
(
STREAM_TRACE
, "MIMEParser.. No-Cache Pragma\n");

360  
HT_OK
;

361 
	}
}

363 
PUBLIC
 
	$HTMIME_¥Ÿocﬁ
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

364 * 
tokí
, * 
vÆue
)

366 * 
∑øm
 = 
NULL
;

367 * 
¥Ÿocﬁ
 = 
	`HTNextSExp
(&
vÆue
, &
∑øm
);

368 i‡(
¥Ÿocﬁ
) {

369 
	`HTTRACE
(
PROT_TRACE
, "PrŸocﬁ.... Name: `%s\', vÆue: `%s\'\n" 
_


370 
¥Ÿocﬁ
 
_
 
∑øm
);

371 
	`HTRe•⁄£_addPrŸocﬁ
(
ª•⁄£
, 
¥Ÿocﬁ
, 
∑øm
);

373  
HT_OK
;

374 
	}
}

376 
PUBLIC
 
	$HTMIME_¥ŸocﬁInfo
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

377 * 
tokí
, * 
vÆue
)

379 * 
∑øm
 = 
NULL
;

380 * 
öfo
 = 
	`HTNextSExp
(&
vÆue
, &
∑øm
);

381 i‡(
öfo
) {

382 
	`HTTRACE
(
PROT_TRACE
, "PrŸocﬁ.... Info: `%s\', vÆue: `%s\'\n" 
_


383 
öfo
 
_
 
∑øm
);

384 
	`HTRe•⁄£_addPrŸocﬁInfo
(
ª•⁄£
, 
öfo
, 
∑øm
);

386  
HT_OK
;

387 
	}
}

389 
PUBLIC
 
	$HTMIME_¥ŸocﬁReque°
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

390 * 
tokí
, * 
vÆue
)

392 * 
∑øm
 = 
NULL
;

393 * 
¥eq
 = 
	`HTNextSExp
(&
vÆue
, &
∑øm
);

394 i‡(
¥eq
) {

395 
	`HTTRACE
(
PROT_TRACE
, "PrŸocﬁ.... Reque°: `%s\', vÆue: `%s\'\n" 
_


396 
¥eq
 
_
 
∑øm
);

397 
	`HTRe•⁄£_addPrŸocﬁReque°
(
ª•⁄£
, 
¥eq
, 
∑øm
);

399  
HT_OK
;

400 
	}
}

402 
PUBLIC
 
	$HTMIME_¥oxyAuth‹iz©i⁄
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

403 * 
tokí
, * 
vÆue
)

406  
HT_OK
;

407 
	}
}

409 
PUBLIC
 
	$HTMIME_¥oxyAuthítiˇti⁄Info
 (
HTReque°
 * 
ªque°
,

410 
HTRe•⁄£
 * 
ª•⁄£
,

411 * 
tokí
, * 
vÆue
)

415 i‡(
tokí
 && 
vÆue
) {

416 
	`HTRe•⁄£_addChÆÀnge
(
ª•⁄£
, 
tokí
, 
vÆue
);

417 
	`HTRe•⁄£_£tScheme
(
ª•⁄£
, "digest");

419  
HT_OK
;

420 
	}
}

422 
PUBLIC
 
	$HTMIME_public
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

423 * 
tokí
, * 
vÆue
)

425 * 
fõld
;

426 
HTNë
 * 
√t
 = 
	`HTReque°_√t
(
ªque°
);

427 
HTHo°
 * 
ho°
 = 
	`HTNë_ho°
(
√t
);

428 (
fõld
 = 
	`HTNextFõld
(&
vÆue
)Ë!
NULL
) {

429 
HTMëhod
 
√w_mëhod
;

431 i‡((
√w_mëhod
 = 
	`HTMëhod_íum
(
fõld
)Ë!
METHOD_INVALID
)

432 
	`HTHo°_≠≥ndPublicMëhods
(
ho°
, 
√w_mëhod
);

434 
	`HTTRACE
(
STREAM_TRACE
, "MIMEP¨£r.. Publi¯mëhods: %d\n" 
_


435 
	`HTHo°_publicMëhods
(
ho°
));

436  
HT_OK
;

437 
	}
}

439 
PUBLIC
 
	$HTMIME_ønge
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

440 * 
tokí
, * 
vÆue
)

443  
HT_OK
;

444 
	}
}

446 
PUBLIC
 
	$HTMIME_ª„ªr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

447 * 
tokí
, * 
vÆue
)

450  
HT_OK
;

451 
	}
}

453 
PUBLIC
 
	$HTMIME_ªåyA·î
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

454 * 
tokí
, * 
vÆue
)

456 
HTU£rProfûe
 * 
up
 = 
	`HTReque°_u£rProfûe
(
ªque°
);

457 
	`HTRe•⁄£_£tRëryTime
(
ª•⁄£
, 
	`HTP¨£Time
(
vÆue
, 
up
, 
YES
));

458  
HT_OK
;

459 
	}
}

461 
PUBLIC
 
	$HTMIME_£rvî
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

462 * 
tokí
, * 
vÆue
)

464 * 
fõld
;

465 
HTNë
 * 
√t
 = 
	`HTReque°_√t
(
ªque°
);

466 
HTHo°
 * 
ho°
 = 
	`HTNë_ho°
(
√t
);

467 i‡((
fõld
 = 
	`HTNextFõld
(&
vÆue
)Ë!
NULL
)

468 
	`HTHo°_£tSîvî
(
ho°
, 
fõld
);

469  
HT_OK
;

470 
	}
}

472 
PUBLIC
 
	$HTMIME_å™s„rEncodög
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

473 * 
tokí
, * 
vÆue
)

475 * 
fõld
;

476 (
fõld
 = 
	`HTNextFõld
(&
vÆue
)Ë!
NULL
) {

477 * 
lc
 = 
fõld
;

478 (*
lc
 = 
	`TOLOWER
(*lc)))Üc++;

479 
	`HTRe•⁄£_addTøns„r
(
ª•⁄£
, 
	`HTAtom_f‹
(
fõld
));

481  
HT_OK
;

482 
	}
}

485 
PUBLIC
 
	$HTMIME_åaûî
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

486 * 
tokí
, * 
vÆue
)

492 * 
«me_vÆ
;

493 (
«me_vÆ
 = 
	`HTNextPaú
(&
vÆue
)Ë!
NULL
) {

494 * 
«me
 = 
	`HTNextFõld
(&
«me_vÆ
);

495 * 
vÆ
 = 
	`HTNextFõld
(&
«me_vÆ
);

496 i‡(
«me
Ë
	`HTRe•⁄£_addTøûî
(
ª•⁄£
,Çame, 
vÆ
 ? val : "");

498  
HT_OK
;

499 
	}
}

501 
PUBLIC
 
	$HTMIME_upgøde
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

502 * 
tokí
, * 
vÆue
)

505  
HT_OK
;

506 
	}
}

508 
PUBLIC
 
	$HTMIME_u£rAgít
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

509 * 
tokí
, * 
vÆue
)

511 * 
fõld
;

512 
HTNë
 * 
√t
 = 
	`HTReque°_√t
(
ªque°
);

513 
HTHo°
 * 
ho°
 = 
	`HTNë_ho°
(
√t
);

514 i‡((
fõld
 = 
	`HTNextFõld
(&
vÆue
)Ë!
NULL
)

515 
	`HTHo°_£tU£rAgít
(
ho°
, 
fõld
);

516  
HT_OK
;

517 
	}
}

519 
PUBLIC
 
	$HTMIME_v¨y
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

520 * 
tokí
, * 
vÆue
)

526 * 
«me_vÆ
;

527 (
«me_vÆ
 = 
	`HTNextPaú
(&
vÆue
)Ë!
NULL
) {

528 * 
«me
 = 
	`HTNextFõld
(&
«me_vÆ
);

529 * 
vÆ
 = 
	`HTNextFõld
(&
«me_vÆ
);

530 i‡(
«me
Ë
	`HTRe•⁄£_addV¨ü¡
(
ª•⁄£
,Çame, 
vÆ
 ? val : "");

532  
HT_OK
;

533 
	}
}

535 
PUBLIC
 
	$HTMIME_vü
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

536 * 
tokí
, * 
vÆue
)

539  
HT_OK
;

540 
	}
}

542 
PUBLIC
 
	$HTMIME_w¨nög
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

543 * 
tokí
, * 
vÆue
)

545 * 
code°r
 = 
	`HTNextFõld
(&
vÆue
);

546 * 
agít
 = 
	`HTNextFõld
(&
vÆue
);

547 i‡(
code°r
 && 
agít
) {

548 
code
 = 
	`©oi
(
code°r
);

549 
idx
;

550 * 
±r
;

551 i‡(
code
==10Ë
idx
=
HTERR_STALE
; 

552 i‡(
code
==11Ë
idx
=
HTERR_REVALIDATION_FAILED
; 

553 i‡(
code
==12Ë
idx
=
HTERR_DISCONNECTED_CACHE
; 

554 i‡(
code
==13Ë
idx
=
HTERR_HEURISTIC_EXPIRATION
; 

555 i‡(
code
==14Ë
idx
=
HTERR_TRANSFORMED
; 

556 
idx
=
HTERR_CACHE
;

557 i‡((
±r
 = 
	`°rchr
(
agít
, '\r')Ë!
NULL
)

558 *
±r
 = '\0';

559 i‡((
±r
 = 
	`°rchr
(
agít
, '\n')Ë!
NULL
)

560 *
±r
 = '\0';

561 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_WARN
, 
NO
, 
idx
, 
agít
,

562 (Ë
	`°æí
(
agít
), "HTMIME_warning");

564 
	`HTTRACE
(
STREAM_TRACE
, "MIMEParser.. Invalid warning\n");

566  
HT_OK
;

567 
	}
}

	@Library/src/HTMIMImp.h

35 #i‚de‡
HTMIMIMP_H


36 
	#HTMIMIMP_H


	)

38 
	~"HTReq.h
"

39 
	~"HTHódî.h
"

44 
HTP¨£rCÆlback


45 
HTMIME_ac˚±
,

46 
HTMIME_ac˚±Ch¨£t
,

47 
HTMIME_ac˚±Encodög
,

48 
HTMIME_ac˚±L™guage
,

49 
HTMIME_ac˚±R™ges
,

50 
HTMIME_authítiˇã
,

51 
HTMIME_authítiˇti⁄Info
,

52 
HTMIME_auth‹iz©i⁄
,

53 
HTMIME_ˇcheC⁄åﬁ
,

54 
HTMIME_c⁄√˘i⁄
,

55 
HTMIME_c⁄ã¡Encodög
,

56 
HTMIME_c⁄ã¡Lígth
,

57 
HTMIME_c⁄ã¡R™ge
,

58 
HTMIME_c⁄ã¡Tøns„rEncodög
,

59 
HTMIME_c⁄ã¡Ty≥
,

60 
HTMIME_kìpAlive
,

61 
HTMIME_lök
,

62 
HTMIME_loˇti⁄
,

63 
HTMIME_maxF‹w¨ds
,

64 
HTMIME_mesßgeDige°
,

65 
HTMIME_¥agma
,

66 
HTMIME_¥Ÿocﬁ
,

67 
HTMIME_¥ŸocﬁInfo
,

68 
HTMIME_¥ŸocﬁReque°
,

69 
HTMIME_¥oxyAuth‹iz©i⁄
,

70 
HTMIME_¥oxyAuthítiˇti⁄Info
,

71 
HTMIME_public
,

72 
HTMIME_ønge
,

73 
HTMIME_ª„ªr
,

74 
HTMIME_ªåyA·î
,

75 
HTMIME_£rvî
,

76 
HTMIME_åaûî
,

77 
HTMIME_å™s„rEncodög
,

78 
HTMIME_upgøde
,

79 
HTMIME_u£rAgít
,

80 
HTMIME_v¨y
,

81 
HTMIME_vü
,

82 
HTMIME_w¨nög
;

	@Library/src/HTMIMPrs.c

16 
	~"wwwsys.h
"

17 
	~"HTUtûs.h
"

18 
	~"HTSåög.h
"

19 
	~"HTMIMPrs.h
"

21 
	s_HTMIMEP¨£El
{

22 
HTMIMEP¨£El
 * 
	m√xt
;

23 * 
	mtokí
;

24 
BOOL
 
	mˇ£Sísôive
;

25 
HTP¨£rCÆlback
 * 
	mpFunk
;

28 
PRIVATE
 
HTMIMEP¨£El
 * 
	$HTMIMEP¨£El_√w
(
HTMIMEP¨£El
 ** 
pBef‹e
,

29 c⁄° * 
tokí
,

30 
BOOL
 
ˇ£Sísôive
,

31 
HTP¨£rCÆlback
 * 
ˇŒback
)

33 
HTMIMEP¨£El
 * 
ªt
;

34 i‡((
ªt
 = (
HTMIMEP¨£El
 *Ë
	`HT_MALLOC
((HTMIMEP¨£El))Ë=
NULL
)

35 
	`HT_OUTOFMEM
("HTMIMEParseEl");

36 
ªt
->
√xt
 = *
pBef‹e
;

37 *
pBef‹e
 = 
ªt
;

38 i‡((
ªt
->
tokí
 = (*Ë
	`HT_MALLOC
(
	`°æí
—okí)+1)Ë=
NULL
)

39 
	`HT_OUTOFMEM
("token");

40 
	`°r˝y
((*)
ªt
->
tokí
,Åoken);

41 
ªt
->
ˇ£Sísôive
 = caseSensitive;

42 
ªt
->
pFunk
 = 
ˇŒback
;

44  
ªt
;

45 
	}
}

47 
PRIVATE
 
	$HTMIMEP¨£El_dñëe
(
HTMIMEP¨£El
 * 
me
, HTMIMEP¨£E»** 
pBef‹e
)

49 *
pBef‹e
 = 
me
->
√xt
;

50 
	`HT_FREE
(
me
->
tokí
);

51 
	`HT_FREE
(
me
);

52  
HT_OK
;

53 
	}
}

55 
PRIVATE
 
	$HTMIMEP¨£Së_hash
(
HTMIMEP¨£Së
 * 
me
, c⁄° * 
tokí
)

57 
ªt
;

58 c⁄° * 
p
;

60 
p
=
tokí
, 
ªt
=0; *p;Ö++) {

61 
ch
;

62 
ch
 = *(*Ë
p
;

63 
ch
 = 
	`TOLOWER
(ch);

64 
ªt
 = (ªà* 3 +(
ch
)Ë% 
me
->
size
;

66  
ªt
;

67 
	}
}

69 
PUBLIC
 
HTMIMEP¨£Së
 * 
	$HTMIMEP¨£Së_√w
(
hashSize
)

71 
HTMIMEP¨£Së
 * 
me
;

73 i‡((
me
 = (
HTMIMEP¨£Së
 *Ë
	`HT_CALLOC
(1, (HTMIMEP¨£Së))Ë=
NULL
)

74 
	`HT_OUTOFMEM
("HTMIMEParseSet");

75 
me
->
size
 = 
hashSize
;

76  
me
;

77 
	}
}

79 
PUBLIC
 
	$HTMIMEP¨£Së_dñëeAŒ
 (
HTMIMEP¨£Së
 * 
me
)

81 
i
;

82 
HTMIMEP¨£El
 * 
pEl
, * 
√xt
;

84 i‡(
me
 && me->
∑r£rs
) {

85 
i
=0; i<
me
->
size
; i++) {

86 
pEl
 = 
me
->
∑r£rs
[
i
];ÖEl;ÖE»
√xt
) {

87 
√xt
 = 
pEl
->next;

88 
	`HT_FREE
(
pEl
->
tokí
);

89 
	`HT_FREE
(
pEl
);

92 
	`HT_FREE
(
me
->
∑r£rs
);

93 
	`HT_FREE
(
me
);

95  
HT_OK
;

96 
	}
}

98 
PUBLIC
 
HTMIMEP¨£El
 * 
	$HTMIMEP¨£Së_add
 (
HTMIMEP¨£Së
 * 
me
,

99 c⁄° * 
tokí
,

100 
BOOL
 
ˇ£Sísôive
,

101 
HTP¨£rCÆlback
 * 
ˇŒback
)

103 
hash
;

107 i‡(!
me
->
∑r£rs
) {

108 i‡(!
me
->
size
)

109 
me
->
size
 = 
HT_S_HASH_SIZE
;

110 i‡((
me
->
∑r£rs
 = (
HTMIMEP¨£El
 **Ë
	`HT_CALLOC
(me->
size
, (HTMIMEP¨£E»*))Ë=
NULL
)

111 
	`HT_OUTOFMEM
("HTMIMEÖarsers");

113 
hash
 = 
	`HTMIMEP¨£Së_hash
(
me
, 
tokí
);

117  
	`HTMIMEP¨£El_√w
(&
me
->
∑r£rs
[
hash
], 
tokí
,

118 
ˇ£Sísôive
, 
ˇŒback
);

119 
	}
}

122 
PUBLIC
 
HTMIMEP¨£El
 * 
	$HTMIMEP¨£Së_addRegex
 (
HTMIMEP¨£Së
 * 
me
,

123 c⁄° * 
tokí
,

124 
BOOL
 
ˇ£Sísôive
,

125 
HTP¨£rCÆlback
 * 
ˇŒback
)

127  
	`HTMIMEP¨£El_√w
(&
me
->
ªgexP¨£rs
, 
tokí
,

128 
ˇ£Sísôive
, 
ˇŒback
);

129 
	}
}

131 
PUBLIC
 
	$HTMIMEP¨£Së_dñëe
 (
HTMIMEP¨£Së
 * 
me
, c⁄° * 
tokí
)

133 
hash
, 
i
;

134 
HTMIMEP¨£El
 * 
pEl
, ** 
œ°
;

136 
hash
 = 
	`HTMIMEP¨£Së_hash
(
me
, 
tokí
);

138 
pEl
 = 
me
->
∑r£rs
[
hash
];

139 
œ°
 = &
me
->
∑r£rs
[
hash
];

140 
i
 = 0; i < 2; i++) {

141 ; 
pEl
; 
œ°
 = &pEl->
√xt
,ÖEl =ÖEl->next) {

142 i‡((
pEl
->
ˇ£Sísôive
 && !
	`°rcmp
’El->
tokí
,Åoken)) ||

143 (!
pEl
->
ˇ£Sísôive
 && !
	`°rˇ£comp
’El->
tokí
,Åoken))) {

144  
	`HTMIMEP¨£El_dñëe
(
pEl
, 
œ°
);

147 
pEl
 = 
me
->
ªgexP¨£rs
;

148 
œ°
 = &
me
->
ªgexP¨£rs
;

150  
HT_ERROR
;

151 
	}
}

157 
PUBLIC
 
	$HTMIMEP¨£Së_di•©ch
 (
HTMIMEP¨£Së
 * 
me
, 
HTReque°
 * 
ªque°
,

158 * 
tokí
, * 
vÆue
, 
BOOL
 * 
pFound
)

160 
hash
;

161 
HTRe•⁄£
 * 
ª•⁄£
 = 
	`HTReque°_ª•⁄£
(
ªque°
);

162 
HTMIMEP¨£El
 * 
pEl
;

164 i‡(
pFound
Ë*pFound = 
NO
;

170 
hash
 = 
	`HTMIMEP¨£Së_hash
(
me
, 
tokí
);

175 
pEl
 = 
me
->
∑r£rs
[
hash
];ÖEl;ÖE»pEl->
√xt
) {

176 i‡((
pEl
->
ˇ£Sísôive
 && !
	`°rcmp
’El->
tokí
,Åoken)) ||

177 (!
pEl
->
ˇ£Sísôive
 && !
	`°rˇ£comp
’El->
tokí
,Åoken))) {

178 i‡(
pFound
Ë*pFound = 
YES
;

179 i‡(!
pEl
->
pFunk
Ë 
HT_OK
;

180  (*
pEl
->
pFunk
)(
ªque°
, 
ª•⁄£
, 
tokí
, 
vÆue
);

187 
pEl
 = 
me
->
ªgexP¨£rs
;ÖEl;ÖE»pEl->
√xt
) {

188 i‡((
pEl
->
ˇ£Sísôive
 && 
	`HTSåM©ch
’El->
tokí
,Åoken)) ||

189 (!
pEl
->
ˇ£Sísôive
 && 
	`HTSåCa£M©ch
’El->
tokí
,Åoken))) {

190 i‡(
pFound
Ë*pFound = 
YES
;

191 i‡(!
pEl
->
pFunk
Ë 
HT_OK
;

192  (*
pEl
->
pFunk
)(
ªque°
, 
ª•⁄£
, 
tokí
, 
vÆue
);

196  
HT_OK
;

197 
	}
}

	@Library/src/HTMIMPrs.h

29 #i‚de‡
HTMIMPRS_H


30 
	#HTMIMPRS_H


	)

32 
	~"HTHódî.h
"

45 
_HTMIMEP¨£El
 
	tHTMIMEP¨£El
;

47 
	s_HTMIMEP¨£Së
 {

48 
	msize
;

49 
HTMIMEP¨£El
 ** 
	m∑r£rs
;

50 
HTMIMEP¨£El
 * 
	mªgexP¨£rs
;

53 
	#MIMEP¨£Së_NULL
 {0, 
NULL
, NULL}

	)

66 
HTMIMEP¨£Së
 * 
HTMIMEP¨£Së_√w
(
hashSize
);

67 
HTMIMEP¨£Së_dñëeAŒ
 (
HTMIMEP¨£Së
 * 
me
);

80 
HTMIMEP¨£El
 * 
HTMIMEP¨£Së_add
 (
HTMIMEP¨£Së
 * 
me
,

81 c⁄° * 
tokí
,

82 
BOOL
 
ˇ£Sísôive
,

83 
HTP¨£rCÆlback
 * 
ˇŒback
);

84 
HTMIMEP¨£El
 * 
HTMIMEP¨£Së_addRegex
 (
HTMIMEP¨£Së
 * 
me
,

85 c⁄° * 
tokí
,

86 
BOOL
 
ˇ£Sísôive
,

87 
HTP¨£rCÆlback
 * 
ˇŒback
);

88 
HTMIMEP¨£Së_dñëe
 (
HTMIMEP¨£Së
 * 
me
, c⁄° * 
tokí
);

98 
HTMIMEP¨£Së_di•©ch
 (
HTMIMEP¨£Së
 * 
me
, 
HTReque°
 * 
ªque°
,

99 * 
tokí
, * 
vÆue
, 
BOOL
 * 
pFound
);

	@Library/src/HTML.c

17 
	~"wwwsys.h
"

18 
	~"WWWUtû.h
"

19 
	~"WWWC‹e.h
"

20 
	~"WWWHTML.h
"

21 
	~"HTML.h
"

22 
	~"HTextImp.h
"

24 
	#PUTC
(
t
,
c
Ë(*—)->
èrgë
->
iß
->
put_ch¨a˘î
)(—)->èrgë, (c))

	)

25 
	#PUTS
(
t
,
s
Ë(*—)->
èrgë
->
iß
->
put_°rög
)(—)->èrgë, (s))

	)

26 
	#PUTB
(
s
,
b
,
l
Ë(*(
t
)->
èrgë
->
iß
->
put_block
)(—)->èrgë, (b), (l))

	)

27 
	#FLUSH_TARGET
(
t
Ë(*—)->
èrgë
->
iß
->
Êush
)(—)->èrgë)

	)

28 
	#FREE_TARGET
(
t
Ë(*—)->
èrgë
->
iß
->
_‰ì
)(—)->èrgë)

	)

29 
	#ABORT_TARGET
(
t
Ë(*—)->
èrgë
->
iß
->
ab‹t
)(—)->èrgë, 
e
)

	)

31 
	#MAX_NESTING
 40

	)

33 
	s_HTSåóm
 {

34 c⁄° 
HTSåómCœss
 * 
	miß
;

38 
	s_HTSåu˘uªd
 {

39 c⁄° 
HTSåu˘uªdCœss
 * 
	miß
;

40 
HTReque°
 * 
	mªque°
;

41 
HTP¨ítAnch‹
 * 
	mnode_™ch‹
;

42 
HTextImp
 * 
	mãxt
;

43 
HTSåóm
 * 
	mèrgë
;

44 
HTChunk
 * 
	mtôÀ
;

45 
BOOL
 
	mö_w‹d
;

46 
SGML_dtd
 * 
	mdtd
;

47 * 
	mcommít_°¨t
;

48 * 
	mcommít_íd
;

49 
BOOL
 
	m°¨ãd
;

51 
	movîÊow
;

52 * 
	m•
;

53 
	m°ack
[
MAX_NESTING
];

60 * 
	gISO_L©ö1
[
HTML_ENTITIES
] = {

174 
PRIVATE
 ** 
	gCuºítE¡ôyVÆues
 = 
ISO_L©ö1
;

176 
PUBLIC
 
BOOL
 
	$HTMLU£Ch¨a˘îSë
 (
HTMLCh¨a˘îSë
 
i
)

178 i‡(
i
 =
HTML_ISO_LATIN1
) {

179 
CuºítE¡ôyVÆues
 = 
ISO_L©ö1
;

180  
YES
;

182 
	`HTTRACE
(
SGML_TRACE
, "HTML Parser. Doesn't supportÅhis character set\n");

183  
NO
;

185 
	}
}

187 
PRIVATE
 
	$HTML_wrôe
 (
HTSåu˘uªd
 * 
me
, c⁄° * 
b
, 
l
)

189 i‡(!
me
->
°¨ãd
) {

190 
	`HTextImp_buûd
(
me
->
ãxt
, 
HTEXT_BEGIN
);

191 
me
->
°¨ãd
 = 
YES
;

195 
me
->
•
[0]) {

197 
HTML_TITLE
:

198 
	`HTChunk_putb
(
me
->
tôÀ
, 
b
, 
l
);

202 
	`HTextImp_addText
(
me
->
ãxt
, 
b
, 
l
);

204  
HT_OK
;

205 
	}
}

207 
PRIVATE
 
	$HTML_put_ch¨a˘î
 (
HTSåu˘uªd
 * 
me
, 
c
)

209  
	`HTML_wrôe
(
me
, &
c
, ());

210 
	}
}

212 
PRIVATE
 
	$HTML_put_°rög
 (
HTSåu˘uªd
 * 
me
, c⁄° * 
s
)

214  
	`HTML_wrôe
(
me
, 
s
, (Ë
	`°æí
(s));

215 
	}
}

217 
PRIVATE
 
	$HTML_°¨t_ñemít
 (
HTSåu˘uªd
 * 
me
,

218 
ñemít_numbî
,

219 c⁄° 
BOOL
 * 
¥e£¡
,

220 c⁄° ** 
vÆue
)

222 
HTChûdAnch‹
 * 
addªss
 = 
NULL
;

223 i‡(!
me
->
°¨ãd
) {

224 
	`HTextImp_buûd
(
me
->
ãxt
, 
HTEXT_BEGIN
);

225 
me
->
°¨ãd
 = 
YES
;

229 
ñemít_numbî
) {

230 
HTML_A
:

231 i‡(
¥e£¡
[
HTML_A_HREF
] && 
vÆue
[HTML_A_HREF]) {

232 
addªss
 = 
	`HTAnch‹_födChûdAndLök
(

233 
me
->
node_™ch‹
,

234 
¥e£¡
[
HTML_A_NAME
] ? 
vÆue
[HTML_A_NAME] : 
NULL
,

235 
vÆue
[
HTML_A_HREF
],

236 
¥e£¡
[
HTML_A_REL
] && 
vÆue
[HTML_A_REL] ?

237 (
HTLökTy≥
Ë
	`HTAtom_ˇ£F‹
(
vÆue
[
HTML_A_REL
]Ë: 
NULL
);

239 i‡(
¥e£¡
[
HTML_A_TITLE
] && 
vÆue
[HTML_A_TITLE]) {

240 
HTLök
 * 
lök
 = 
	`HTAnch‹_maöLök
((
HTAnch‹
 *Ë
addªss
);

241 
HTP¨ítAnch‹
 * 
de°
 = 
	`HTAnch‹_∑ª¡
(
	`HTLök_de°ö©i⁄
(
lök
));

242 i‡(!
	`HTAnch‹_tôÀ
(
de°
)Ë
	`HTAnch‹_£tTôÀ
(de°, 
vÆue
[
HTML_A_TITLE
]);

244 
	`HTextImp_foundLök
(
me
->
ãxt
, 
ñemít_numbî
, 
HTML_A_HREF
,

245 
addªss
, 
¥e£¡
, 
vÆue
);

246 
	`HTTRACE
(
SGML_TRACE
, "HTML P¨£r. Anch‹ `%s\'\n" 
_
 
vÆue
[
HTML_A_HREF
]);

250 
HTML_AREA
:

251 i‡(
¥e£¡
[
HTML_AREA_HREF
] && 
vÆue
[HTML_AREA_HREF]) {

252 
addªss
 = 
	`HTAnch‹_födChûdAndLök
(
me
->
node_™ch‹
, 
NULL
,

253 
vÆue
[
HTML_AREA_HREF
], 
NULL
);

254 
	`HTextImp_foundLök
(
me
->
ãxt
, 
ñemít_numbî
, 
HTML_AREA_HREF
,

255 
addªss
, 
¥e£¡
, 
vÆue
);

256 
	`HTTRACE
(
SGML_TRACE
, "HTML P¨£r. Imagêm≠áª®`%s\'\n" 
_
 
vÆue
[
HTML_AREA_HREF
]);

260 
HTML_BASE
:

261 i‡(
¥e£¡
[
HTML_BASE_HREF
] && 
vÆue
[HTML_BASE_HREF]) {

262 
	`HTAnch‹_£tBa£
(
me
->
node_™ch‹
, (*Ë
vÆue
[
HTML_BASE_HREF
]);

263 
	`HTTRACE
(
SGML_TRACE
, "HTML P¨£r. New ba£ `%s\'\n" 
_
 
vÆue
[
HTML_BASE_HREF
]);

267 
HTML_BODY
:

268 i‡(
¥e£¡
[
HTML_BODY_BACKGROUND
] && 
vÆue
[HTML_BODY_BACKGROUND]) {

269 
addªss
 = 
	`HTAnch‹_födChûdAndLök
(
me
->
node_™ch‹
, 
NULL
,

270 
vÆue
[
HTML_BODY_BACKGROUND
], 
NULL
);

271 
	`HTextImp_foundLök
(
me
->
ãxt
, 
ñemít_numbî
, 
HTML_BODY_BACKGROUND
,

272 
addªss
, 
¥e£¡
, 
vÆue
);

273 
	`HTTRACE
(
SGML_TRACE
, "HTML P¨£r. Background `%s\'\n" 
_
 
vÆue
[
HTML_BODY_BACKGROUND
]);

277 
HTML_FORM
:

278 i‡(
¥e£¡
[
HTML_FORM_ACTION
] && 
vÆue
[HTML_FORM_ACTION]) {

279 
addªss
 = 
	`HTAnch‹_födChûdAndLök
(
me
->
node_™ch‹
, 
NULL
,

280 
vÆue
[
HTML_FORM_ACTION
], 
NULL
);

281 
	`HTextImp_foundLök
(
me
->
ãxt
, 
ñemít_numbî
, 
HTML_FORM_ACTION
,

282 
addªss
, 
¥e£¡
, 
vÆue
);

286 
HTML_FRAME
:

287 i‡(
¥e£¡
[
HTML_FRAME_SRC
] && 
vÆue
[HTML_FRAME_SRC]) {

288 
addªss
 = 
	`HTAnch‹_födChûdAndLök
(
me
->
node_™ch‹
, 
NULL
,

289 
vÆue
[
HTML_FRAME_SRC
], 
NULL
);

290 
	`HTextImp_foundLök
(
me
->
ãxt
, 
ñemít_numbî
, 
HTML_FRAME_SRC
,

291 
addªss
, 
¥e£¡
, 
vÆue
);

292 
	`HTTRACE
(
SGML_TRACE
, "HTML P¨£r. Fømê`%s\'\n" 
_
 
vÆue
[
HTML_FRAME_SRC
]);

296 
HTML_INPUT
:

297 i‡(
¥e£¡
[
HTML_INPUT_SRC
] && 
vÆue
[HTML_INPUT_SRC]) {

298 
addªss
 = 
	`HTAnch‹_födChûdAndLök
(
me
->
node_™ch‹
, 
NULL
,

299 
vÆue
[
HTML_INPUT_SRC
], 
NULL
);

300 
	`HTextImp_foundLök
(
me
->
ãxt
, 
ñemít_numbî
, 
HTML_INPUT_SRC
,

301 
addªss
, 
¥e£¡
, 
vÆue
);

305 
HTML_IMG
:

306 i‡(
¥e£¡
[
HTML_IMG_SRC
] && 
vÆue
[HTML_IMG_SRC]) {

307 
addªss
 = 
	`HTAnch‹_födChûdAndLök
(
me
->
node_™ch‹
, 
NULL
,

308 
vÆue
[
HTML_IMG_SRC
], 
NULL
);

309 
	`HTextImp_foundLök
(
me
->
ãxt
, 
ñemít_numbî
, 
HTML_IMG_SRC
,

310 
addªss
, 
¥e£¡
, 
vÆue
);

314 
HTML_ISINDEX
:

315 
	`HTAnch‹_£tIndex
(
me
->
node_™ch‹
);

318 
HTML_LINK
:

319 i‡(
¥e£¡
[
HTML_LINK_HREF
] && 
vÆue
[HTML_LINK_HREF]) {

320 
HTP¨ítAnch‹
 * 
de°
 = 
NULL
;

321 
addªss
 = 
	`HTAnch‹_födChûdAndLök
(

322 
me
->
node_™ch‹
,

323 
¥e£¡
[
HTML_A_NAME
] ? 
vÆue
[HTML_A_NAME] : 
NULL
,

324 
¥e£¡
[
HTML_A_HREF
] ? 
vÆue
[HTML_A_HREF] : 
NULL
,

325 
NULL
);

326 
de°
 = 
	`HTAnch‹_∑ª¡
(
	`HTAnch‹_fﬁlowMaöLök
((
HTAnch‹
 *Ë
addªss
));

329 i‡((
¥e£¡
[
HTML_LINK_REL
] && 
vÆue
[HTML_LINK_REL])) {

330 * 
°rvÆ
 = 
NULL
;

331 * 
±r
 = 
NULL
;

332 * 
ªœti⁄
 = 
NULL
;

333 
	`SåAŒocC›y
(
°rvÆ
, 
vÆue
[
HTML_LINK_REL
]);

334 
±r
 = 
°rvÆ
;

335 (
ªœti⁄
 = 
	`HTNextLWSTokí
(&
±r
)Ë!
NULL
) {

336 
	`HTLök_add
((
HTAnch‹
 *Ë
me
->
node_™ch‹
, (HTAnch‹ *Ë
de°
,

337 (
HTLökTy≥
Ë
	`HTAtom_ˇ£F‹
(
ªœti⁄
),

338 
METHOD_INVALID
);

340 
	`HT_FREE
(
°rvÆ
);

344 i‡((
¥e£¡
[
HTML_LINK_REV
] && 
vÆue
[HTML_LINK_REV])) {

345 * 
°rvÆ
 = 
NULL
;

346 * 
±r
 = 
NULL
;

347 * 
ªœti⁄
 = 
NULL
;

348 
	`SåAŒocC›y
(
°rvÆ
, 
vÆue
[
HTML_LINK_REV
]);

349 
±r
 = 
°rvÆ
;

350 (
ªœti⁄
 = 
	`HTNextLWSTokí
(&
±r
)Ë!
NULL
) {

351 
	`HTLök_add
((
HTAnch‹
 *Ë
de°
, (HTAnch‹ *Ë
me
->
node_™ch‹
,

352 (
HTLökTy≥
Ë
	`HTAtom_ˇ£F‹
(
ªœti⁄
),

353 
METHOD_INVALID
);

355 
	`HT_FREE
(
°rvÆ
);

359 i‡(
¥e£¡
[
HTML_LINK_TYPE
] && 
vÆue
[HTML_LINK_TYPE]) {

360 i‡(
	`HTAnch‹_f‹m©
(
de°
Ë=
WWW_UNKNOWN
)

361 
	`HTAnch‹_£tF‹m©
(
de°
,

362 (
HTF‹m©
Ë
	`HTAtom_ˇ£F‹
(
vÆue
[
HTML_LINK_TYPE
]));

366 
	`HTextImp_foundLök
(
me
->
ãxt
, 
ñemít_numbî
, 
HTML_LINK_HREF
,

367 
addªss
, 
¥e£¡
, 
vÆue
);

371 
HTML_META
:

372 i‡(
¥e£¡
[
HTML_META_NAME
] && 
vÆue
[HTML_META_NAME]) {

373 
	`HTAnch‹_addMëa
 (
me
->
node_™ch‹
,

374 
vÆue
[
HTML_META_NAME
],

375 (
¥e£¡
[
HTML_META_CONTENT
] && 
vÆue
[HTML_META_CONTENT]) ?

376 
vÆue
[
HTML_META_CONTENT
] : "");

380 
HTML_OBJECT
:

381 i‡(
¥e£¡
[
HTML_OBJECT_CLASSID
] && 
vÆue
[HTML_OBJECT_CLASSID]) {

382 
addªss
 = 
	`HTAnch‹_födChûdAndLök
(
me
->
node_™ch‹
, 
NULL
,

383 
vÆue
[
HTML_OBJECT_CLASSID
], 
NULL
);

384 
	`HTextImp_foundLök
(
me
->
ãxt
, 
ñemít_numbî
, 
HTML_OBJECT_CLASSID
,

385 
addªss
, 
¥e£¡
, 
vÆue
);

388 i‡(
¥e£¡
[
HTML_OBJECT_CODEBASE
] && 
vÆue
[HTML_OBJECT_CODEBASE]) {

389 
addªss
 = 
	`HTAnch‹_födChûdAndLök
(
me
->
node_™ch‹
, 
NULL
,

390 
vÆue
[
HTML_OBJECT_CODEBASE
], 
NULL
);

391 
	`HTextImp_foundLök
(
me
->
ãxt
, 
ñemít_numbî
, 
HTML_OBJECT_CODEBASE
,

392 
addªss
, 
¥e£¡
, 
vÆue
);

395 i‡(
¥e£¡
[
HTML_OBJECT_DATA
] && 
vÆue
[HTML_OBJECT_DATA]) {

396 
addªss
 = 
	`HTAnch‹_födChûdAndLök
(
me
->
node_™ch‹
, 
NULL
,

397 
vÆue
[
HTML_OBJECT_DATA
], 
NULL
);

398 
	`HTextImp_foundLök
(
me
->
ãxt
, 
ñemít_numbî
, 
HTML_OBJECT_DATA
,

399 
addªss
, 
¥e£¡
, 
vÆue
);

402 i‡(
¥e£¡
[
HTML_OBJECT_ARCHIVE
] && 
vÆue
[HTML_OBJECT_ARCHIVE]) {

403 
addªss
 = 
	`HTAnch‹_födChûdAndLök
(
me
->
node_™ch‹
, 
NULL
,

404 
vÆue
[
HTML_OBJECT_ARCHIVE
], 
NULL
);

405 
	`HTextImp_foundLök
(
me
->
ãxt
, 
ñemít_numbî
, 
HTML_OBJECT_ARCHIVE
,

406 
addªss
, 
¥e£¡
, 
vÆue
);

409 i‡(
¥e£¡
[
HTML_OBJECT_USEMAP
] && 
vÆue
[HTML_OBJECT_USEMAP]) {

410 
addªss
 = 
	`HTAnch‹_födChûdAndLök
(
me
->
node_™ch‹
, 
NULL
,

411 
vÆue
[
HTML_OBJECT_USEMAP
], 
NULL
);

412 
	`HTextImp_foundLök
(
me
->
ãxt
, 
ñemít_numbî
, 
HTML_OBJECT_USEMAP
,

413 
addªss
, 
¥e£¡
, 
vÆue
);

417 
HTML_PRE
:

418 i‡(
me
->
commít_íd
)

419 
	`HTextImp_addText
(
me
->
ãxt
, me->
commít_íd
, 
	`°æí
(me->comment_end));

422 
HTML_TITLE
:

423 
	`HTChunk_åunˇã
(
me
->
tôÀ
,0);

428 i‡(
	`SGML_födTagC⁄ã¡s
(
me
->
dtd
, 
ñemít_numbî
Ë!
SGML_EMPTY
) {

429 i‡(
me
->
•
 =me->
°ack
) {

430 
	`HTTRACE
(
SGML_TRACE
, "HTML P¨£r. MaximumÇe°ög o‡%dÉx˚ded!\n" 
_
 
MAX_NESTING
);

431 
me
->
ovîÊow
++;

434 --(
me
->
•
);

435 
me
->
•
[0] = 
ñemít_numbî
;

439 
	`HTextImp_begöEÀmít
(
me
->
ãxt
, 
ñemít_numbî
, 
¥e£¡
, 
vÆue
);

440 
	}
}

442 
PRIVATE
 
	$HTML_íd_ñemít
 (
HTSåu˘uªd
 * 
me
, 
ñemít_numbî
)

444 i‡(!
me
->
°¨ãd
) {

445 
	`HTextImp_buûd
(
me
->
ãxt
, 
HTEXT_BEGIN
);

446 
me
->
°¨ãd
 = 
YES
;

450 i‡(
me
->
ovîÊow
 > 0) {

451 
me
->
ovîÊow
--;

454 
me
->
•
++;

455 i‡(
me
->
•
 > me->
°ack
 + 
MAX_NESTING
 - 1) {

456 
	`HTTRACE
(
SGML_TRACE
, "HTML Parser. Bottom ofÖarse stackÑeached\n");

457 
me
->
•
 = me->
°ack
 + 
MAX_NESTING
 - 1;

461 
ñemít_numbî
) {

462 
HTML_TITLE
:

463 
	`HTAnch‹_£tTôÀ
(
me
->
node_™ch‹
, 
	`HTChunk_d©a
(me->
tôÀ
));

466 
HTML_PRE
:

467 i‡(
me
->
commít_°¨t
)

468 
	`HTextImp_addText
(
me
->
ãxt
, me->
commít_°¨t
, 
	`°æí
(me->comment_start));

473 
	`HTextImp_ídEÀmít
(
me
->
ãxt
, 
ñemít_numbî
);

474 
	}
}

476 
PRIVATE
 
	$HTML_put_ítôy
 (
HTSåu˘uªd
 * 
me
, 
ítôy_numbî
)

478 i‡(!
me
->
°¨ãd
) {

479 
	`HTextImp_buûd
(
me
->
ãxt
, 
HTEXT_BEGIN
);

480 
me
->
°¨ãd
 = 
YES
;

482 i‡(
ítôy_numbî
>=0 &&É¡ôy_numbî<
HTML_ENTITIES
)

483 
	`HTML_put_°rög
(
me
, *(
CuºítE¡ôyVÆues
+
ítôy_numbî
));

484 
	}
}

486 
PUBLIC
 
	$HTML_Êush
 (
HTSåu˘uªd
 * 
me
)

488 i‡(!
me
->
°¨ãd
) {

489 
	`HTextImp_buûd
(
me
->
ãxt
, 
HTEXT_BEGIN
);

490 
me
->
°¨ãd
 = 
YES
;

492 i‡(
me
->
commít_íd
Ë
	`HTML_put_°rög
(me, me->comment_end);

493  
me
->
èrgë
 ? 
	`FLUSH_TARGET
(meË: 
HT_OK
;

494 
	}
}

496 
PRIVATE
 
	$HTML_u≈¨£dBegöEÀmít
 (
HTSåu˘uªd
 * 
me
, c⁄° * 
b
, 
l
)

498 i‡(!
me
->
°¨ãd
) {

499 
	`HTextImp_buûd
(
me
->
ãxt
, 
HTEXT_BEGIN
);

500 
me
->
°¨ãd
 = 
YES
;

502 
	`HTextImp_u≈¨£dBegöEÀmít
(
me
->
ãxt
, 
b
, 
l
);

503  
HT_OK
;

504 
	}
}

506 
PRIVATE
 
	$HTML_u≈¨£dEndEÀmít
 (
HTSåu˘uªd
 * 
me
, c⁄° * 
b
, 
l
)

508 i‡(!
me
->
°¨ãd
) {

509 
	`HTextImp_buûd
(
me
->
ãxt
, 
HTEXT_BEGIN
);

510 
me
->
°¨ãd
 = 
YES
;

512 
	`HTextImp_u≈¨£dEndEÀmít
(
me
->
ãxt
, 
b
, 
l
);

513  
HT_OK
;

514 
	}
}

516 
PRIVATE
 
	$HTML_u≈¨£dE¡ôy
 (
HTSåu˘uªd
 * 
me
, c⁄° * 
b
, 
l
)

518 i‡(!
me
->
°¨ãd
) {

519 
	`HTextImp_buûd
(
me
->
ãxt
, 
HTEXT_BEGIN
);

520 
me
->
°¨ãd
 = 
YES
;

522 
	`HTextImp_u≈¨£dE¡ôy
(
me
->
ãxt
, 
b
, 
l
);

523  
HT_OK
;

524 
	}
}

526 
PUBLIC
 
	$HTML_‰ì
 (
HTSåu˘uªd
 * 
me
)

528 i‡(!
me
->
°¨ãd
Ë
	`HTextImp_buûd
(me->
ãxt
, 
HTEXT_BEGIN
);

529 i‡(
me
->
commít_íd
Ë
	`HTML_put_°rög
(me, me->comment_end);

530 
	`HTextImp_buûd
(
me
->
ãxt
, 
HTEXT_END
);

531 
	`HTextImp_dñëe
(
me
->
ãxt
);

532 
	`HTChunk_dñëe
(
me
->
tôÀ
);

533 i‡(
me
->
èrgë
Ë
	`FREE_TARGET
(me);

534 
	`HT_FREE
(
me
);

535  
HT_OK
;

536 
	}
}

538 
PRIVATE
 
	$HTML_ab‹t
 (
HTSåu˘uªd
 * 
me
, 
HTLi°
 * 
e
)

540 i‡(!
me
->
°¨ãd
Ë
	`HTextImp_buûd
(me->
ãxt
, 
HTEXT_BEGIN
);

541 
	`HTextImp_buûd
(
me
->
ãxt
, 
HTEXT_ABORT
);

542 
	`HTextImp_dñëe
(
me
->
ãxt
);

543 
	`HTChunk_dñëe
(
me
->
tôÀ
);

544 i‡(
me
->
èrgë
Ë
	`ABORT_TARGET
(me);

545 
	`HT_FREE
(
me
);

546  
HT_ERROR
;

547 
	}
}

552 
PRIVATE
 c⁄° 
HTSåu˘uªdCœss
 
	gHTMLPª£¡©i⁄
 =

555 
HTML_Êush
,

556 
HTML_‰ì
,

557 
HTML_ab‹t
,

558 
HTML_put_ch¨a˘î
,

559 
HTML_put_°rög
,

560 
HTML_wrôe
,

561 
HTML_°¨t_ñemít
,

562 
HTML_íd_ñemít
,

563 
HTML_put_ítôy
,

564 
HTML_u≈¨£dBegöEÀmít
,

565 
HTML_u≈¨£dEndEÀmít
,

566 
HTML_u≈¨£dE¡ôy


575 
PRIVATE
 
HTSåu˘uªd
 * 
	$HTML_√w
 (
HTReque°
 * 
ªque°
,

576 * 
∑øm
,

577 
HTF‹m©
 
öput_f‹m©
,

578 
HTF‹m©
 
ouçut_f‹m©
,

579 
HTSåóm
 * 
ouçut_°ªam
)

581 
HTSåu˘uªd
 * 
me
 = 
NULL
;

582 i‡(
ªque°
) {

583 i‡((
me
 = (
HTSåu˘uªd
 *Ë
	`HT_CALLOC
(1, (HTSåu˘uªd))Ë=
NULL
)

584 
	`HT_OUTOFMEM
("HTML_new");

585 
me
->
iß
 = &
HTMLPª£¡©i⁄
;

586 
me
->
dtd
 = 
	`HTML_dtd
();

587 
me
->
ªque°
 =Ñequest;

588 
me
->
node_™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

589 
me
->
tôÀ
 = 
	`HTChunk_√w
(128);

590 
me
->
commít_°¨t
 = 
NULL
;

591 
me
->
commít_íd
 = 
NULL
;

592 
me
->
èrgë
 = 
ouçut_°ªam
;

593 
me
->
•
 = me->
°ack
 + 
MAX_NESTING
 - 1;

596 
me
->
ãxt
 = 
	`HTextImp_√w
(me->
ªque°
, me->
node_™ch‹
, me->
èrgë
);

598  
me
;

599 
	}
}

606 
PUBLIC
 
HTSåóm
 * 
	$HTMLToPœö
 (
HTReque°
 * 
ªque°
,

607 * 
∑øm
,

608 
HTF‹m©
 
öput_f‹m©
,

609 
HTF‹m©
 
ouçut_f‹m©
,

610 
HTSåóm
 * 
ouçut_°ªam
)

612  
	`SGML_√w
(
	`HTML_dtd
(), 
	`HTML_√w
(

613 
ªque°
, 
NULL
, 
öput_f‹m©
, 
ouçut_f‹m©
, 
ouçut_°ªam
));

614 
	}
}

624 
PUBLIC
 
HTSåóm
 * 
	$HTMLToC
 (
HTReque°
 * 
ªque°
,

625 * 
∑øm
,

626 
HTF‹m©
 
öput_f‹m©
,

627 
HTF‹m©
 
ouçut_f‹m©
,

628 
HTSåóm
 * 
ouçut_°ªam
)

630 i‡(
ouçut_°ªam
) {

631 
HTSåu˘uªd
 * 
html
 = 
NULL
;

632 (*
ouçut_°ªam
->
iß
->
put_°rög
)(output_stream, "/* ");

633 
html
 = 
	`HTML_√w
(
ªque°
, 
NULL
, 
öput_f‹m©
, 
ouçut_f‹m©
, 
ouçut_°ªam
);

634 
html
->
commít_°¨t
 = "\n/* ";

635 
html
->
dtd
 = 
	`HTML_dtd
();

636 
html
->
commít_íd
 = " */\n";

637  
	`SGML_√w
(
	`HTML_dtd
(), 
html
);

639  
	`HTEº‹Såóm
();

640 
	}
}

650 
PUBLIC
 
HTSåóm
 * 
	$HTMLPª£¡
 (
HTReque°
 * 
ªque°
,

651 * 
∑øm
,

652 
HTF‹m©
 
öput_f‹m©
,

653 
HTF‹m©
 
ouçut_f‹m©
,

654 
HTSåóm
 * 
ouçut_°ªam
)

656  
	`SGML_√w
(
	`HTML_dtd
(), 
	`HTML_√w
(

657 
ªque°
, 
NULL
, 
öput_f‹m©
, 
ouçut_f‹m©
, 
ouçut_°ªam
));

658 
	}
}

	@Library/src/HTML.h

29 #i‚de‡
HTML_H


30 
	#HTML_H


	)

32 
	~"HTF‹m©.h
"

33 
	~"HTMLPDTD.h
"

44 
HTC⁄vîãr
 
HTMLToPœö
;

53 
HTC⁄vîãr
 
HTMLToC
;

61 
HTC⁄vîãr
 
HTMLPª£¡
;

71 
	e_HTMLCh¨a˘îSë
 {

72 
	mHTML_ISO_LATIN1
,

73 
	mHTML_NEXT_CHARS
,

74 
	mHTML_PC_CP950


75 } 
	tHTMLCh¨a˘îSë
;

77 
BOOL
 
HTMLU£Ch¨a˘îSë
 (
HTMLCh¨a˘îSë
 
ch¨£t
);

	@Library/src/HTMLGen.c

24 
	~"wwwsys.h
"

25 
	~"HTUtûs.h
"

26 
	~"HTMLPDTD.h
"

27 
	~"HTSåu˘.h
"

28 
	~"HTF‹m©.h
"

29 
	~"HTMLGí.h
"

31 
	#BUFFER_SIZE
 80

	)

32 
	#MAX_CLEANNESS
 10

	)

34 
	#PUT_CHAR
(
c
Ë(*
me
->
èrgë
->
iß
->
put_ch¨a˘î
)(me->èrgë, c)

	)

35 
	#PUT_STR
(
s
Ë(*
me
->
èrgë
->
iß
->
put_°rög
)(me->èrgë, s)

	)

36 
	#PUT_BLOCK
(
s
,
l
Ë(*
me
->
èrgë
->
iß
->
put_block
)(me->èrgë, s,Ü)

	)

39 
	s_HTSåóm
 {

40 c⁄° 
HTSåómCœss
 * 
	miß
;

41 
HTSåóm
 * 
	mèrgë
;

44 
	s_HTSåu˘uªd
 {

45 c⁄° 
HTSåu˘uªdCœss
 * 
	miß
;

46 
HTSåóm
 * 
	mèrgë
;

47 c⁄° 
SGML_dtd
 * 
	mdtd
;

48 
BOOL
 
	m£ví_bô
;

50 
	mbuf„r
[
BUFFER_SIZE
+1];

51 * 
	mwrôe_poöãr
;

52 * 
	mlöe_bªak
 [
MAX_CLEANNESS
+1];

53 
	m˛ó¬ess
;

54 
BOOL
 
	movîÊowed
;

55 
BOOL
 
	mdñëe_löe_bªak_ch¨
[
MAX_CLEANNESS
+1];

56 
	m¥ef‹m©ãd
;

69 
PRIVATE
 
	$Êush_bªaks
 (
HTSåu˘uªd
 * 
me
)

71 
i
;

72 
i
=0; i<
MAX_CLEANNESS
; i++) {

73 
me
->
löe_bªak
[
i
] = 
NULL
;

75 
	}
}

78 
PRIVATE
 
	$HTMLGí_Êush
 (
HTSåu˘uªd
 * 
me
)

80 
	`PUT_BLOCK
(
me
->
buf„r
, me->
wrôe_poöãr
 - me->buffer);

81 
me
->
wrôe_poöãr
 = me->
buf„r
;

82 
	`Êush_bªaks
(
me
);

83 
me
->
˛ó¬ess
 = 0;

84  
HT_OK
;

85 
	}
}

93 
PRIVATE
 
	$Ælow_bªak
 (
HTSåu˘uªd
 * 
me
, 
√w_˛ó¬ess
, 
BOOL
 
dlbc
)

95 
me
->
löe_bªak
[
√w_˛ó¬ess
] =

96 
dlbc
 ? 
me
->
wrôe_poöãr
 - 1

97 : 
me
->
wrôe_poöãr
 ;

98 
me
->
dñëe_löe_bªak_ch¨
[
√w_˛ó¬ess
] = 
dlbc
;

99 i‡(
√w_˛ó¬ess
 >
me
->
˛ó¬ess
)

100 
me
->
˛ó¬ess
 = 
√w_˛ó¬ess
;

101 
	}
}

117 
PRIVATE
 
	gdñims
[] = ",;:.";

118 
PRIVATE
 
	$HTMLGí_ouçut_ch¨a˘î
 (
HTSåu˘uªd
 * 
me
, 
c
)

121 *
me
->
wrôe_poöãr
++ = 
c
;

123 i‡(
c
=='\n') {

124 i‡(
me
->
¥ef‹m©ãd
) {

125 
	`HTMLGí_Êush
(
me
);

126  
HT_OK
;

128 
me
->
wrôe_poöãr
[-1] = 
c
 = ' ';

134 i‡((!
me
->
¥ef‹m©ãd
 && 
c
==' ')) {

135 
√w_˛ó¬ess
 = 1;

136 i‡(
me
->
wrôe_poöãr
 > (me->
buf„r
 + 1)) {

137 * 
p
;

138 
p
 = 
	`°rchr
(
dñims
, 
me
->
wrôe_poöãr
[-2]);

139 i‡(
p
Ë
√w_˛ó¬ess
 =Ö - 
dñims
 + 4;

141 
	`Ælow_bªak
(
me
, 
√w_˛ó¬ess
, 
YES
);

147 i‡(
me
->
wrôe_poöãr
 >me->
buf„r
 + 
BUFFER_SIZE
-1

148 || (
me
->
ovîÊowed
 && me->
˛ó¬ess
)) {

149 i‡(
me
->
˛ó¬ess
) {

150 
löe_bªak_ch¨
 = 
me
->
löe_bªak
[me->
˛ó¬ess
][0];

151 * 
ßved
 = 
me
->
löe_bªak
[me->
˛ó¬ess
];

153 i‡(
me
->
dñëe_löe_bªak_ch¨
[me->
˛ó¬ess
]Ë
ßved
++;

154 
me
->
löe_bªak
[me->
˛ó¬ess
][0] = '\n';

155 
	`PUT_BLOCK
(
me
->
buf„r
, me->
löe_bªak
[me->
˛ó¬ess
]-me->buffer+1);

156 
me
->
löe_bªak
[me->
˛ó¬ess
][0] = 
löe_bªak_ch¨
;

158 * 
p
=
ßved
;

159 *
q
;

160 
q
=
me
->
buf„r
; 
p
 < me->
wrôe_poöãr
; )

161 *
q
++ = *
p
++;

163 
me
->
˛ó¬ess
 = 0;

169 
i
;

170 
i
=0; i <
MAX_CLEANNESS
; i++) {

171 i‡(
me
->
löe_bªak
[
i
] > 
ßved
) {

172 
me
->
löe_bªak
[
i
] = me->line_break[i] -

173 (
ßved
-
me
->
buf„r
);

174 
me
->
˛ó¬ess
 = 
i
;

176 
me
->
löe_bªak
[
i
] = 
NULL
;

181 
me
->
wrôe_poöãr
 = me->wrôe_poöã∏- (
ßved
-me->
buf„r
);

182 
me
->
ovîÊowed
 = 
NO
;

184 
	`PUT_BLOCK
(
me
->
buf„r
, me->
wrôe_poöãr
 - me->buffer);

185 
me
->
wrôe_poöãr
 = me->
buf„r
;

186 
	`Êush_bªaks
(
me
);

187 
me
->
ovîÊowed
 = 
YES
;

190  
HT_OK
;

191 
	}
}

197 
PRIVATE
 
	$HTMLGí_ouçut_°rög
 (
HTSåu˘uªd
 * 
me
, c⁄° * 
s
)

199 *
s
)

200 
	`HTMLGí_ouçut_ch¨a˘î
(
me
, *
s
++);

201  
HT_OK
;

202 
	}
}

215 
PRIVATE
 
	$HTMLGí_put_ch¨a˘î
 (
HTSåu˘uªd
 * 
me
, 
c
)

217 i‡(
c
=='&'Ë
	`HTMLGí_ouçut_°rög
(
me
, "&amp;");

218 i‡(
c
=='<'Ë
	`HTMLGí_ouçut_°rög
(
me
, "&lt;");

219 i‡(
me
->
£ví_bô
 && (()
c
 > 127)) {

220 
ãmp
[8];

221 
	`•rötf
(
ãmp
, "&%d;", 
c
);

222 
	`HTMLGí_ouçut_°rög
(
me
, 
ãmp
);

224 
	`HTMLGí_ouçut_ch¨a˘î
(
me
, 
c
);

225  
HT_OK
;

226 
	}
}

228 
PRIVATE
 
	$HTMLGí_put_°rög
 (
HTSåu˘uªd
 * 
me
, c⁄° * 
s
)

230 *
s
)

231 
	`HTMLGí_put_ch¨a˘î
(
me
, *
s
++);

232  
HT_OK
;

233 
	}
}

235 
PRIVATE
 
	$HTMLGí_wrôe
 (
HTSåu˘uªd
 * 
me
, c⁄° * 
b
, 
l
)

237 
l
-- > 0)

238 
	`HTMLGí_put_ch¨a˘î
(
me
, *
b
++);

239  
HT_OK
;

240 
	}
}

249 
PRIVATE
 
	$HTMLGí_°¨t_ñemít
 (

250 
HTSåu˘uªd
 * 
me
,

251 
ñemít_numbî
,

252 c⁄° 
BOOL
* 
¥e£¡
,

253 c⁄° ** 
vÆue
)

255 
i
;

256 
HTTag
 * 
èg
 = &
me
->
dtd
->
ègs
[
ñemít_numbî
];

259 
was_¥ef‹m©ãd
 = 
me
->
¥ef‹m©ãd
;

260 
me
->
¥ef‹m©ãd
 = 1;

262 
	`HTMLGí_ouçut_ch¨a˘î
(
me
, '<');

263 
	`HTMLGí_ouçut_°rög
(
me
, 
èg
->
«me
);

264 i‡(
¥e£¡
Ë
i
=0; i< 
èg
->
numbî_of_©åibuãs
; i++) {

265 i‡(
¥e£¡
[
i
]) {

266 
	`HTMLGí_ouçut_ch¨a˘î
(
me
, ' ');

267 
	`Ælow_bªak
(
me
, 1, 
YES
);

268 
	`HTMLGí_ouçut_°rög
(
me
, 
èg
->
©åibuãs
[
i
].
«me
);

269 i‡(
vÆue
[
i
]) {

270 
	`HTMLGí_ouçut_°rög
(
me
, "=\"");

271 
	`HTMLGí_ouçut_°rög
(
me
, 
vÆue
[
i
]);

272 
	`HTMLGí_ouçut_ch¨a˘î
(
me
, '"');

276 
me
->
¥ef‹m©ãd
 = 
was_¥ef‹m©ãd
;

279 i‡(
ñemít_numbî
 =
HTML_PRE
)

280 
me
->
¥ef‹m©ãd
++;

282 
	`HTMLGí_ouçut_ch¨a˘î
(
me
, '>');

293 i‡(
ñemít_numbî
 =
HTML_PRE
) {

294 
	`HTMLGí_ouçut_ch¨a˘î
(
me
, '\n');

295 } i‡(!
me
->
¥ef‹m©ãd
 &&

296 
èg
->
c⁄ã¡s
 !
SGML_EMPTY
) {

297 
	`Ælow_bªak
(
me
, 3, 
NO
);

299 
	}
}

309 
PRIVATE
 
	$HTMLGí_íd_ñemít
 (
HTSåu˘uªd
 * 
me
, 
ñemít_numbî
)

311 i‡(
ñemít_numbî
 =
HTML_PRE
) {

312 
	`HTMLGí_ouçut_ch¨a˘î
(
me
, '\n');

313 } i‡(!
me
->
¥ef‹m©ãd
) {

314 
	`Ælow_bªak
(
me
, 1, 
NO
);

316 
	`HTMLGí_ouçut_°rög
(
me
, "</");

317 
	`HTMLGí_ouçut_°rög
(
me
, me->
dtd
->
ègs
[
ñemít_numbî
].
«me
);

318 
	`HTMLGí_ouçut_ch¨a˘î
(
me
, '>');

319 i‡(
ñemít_numbî
 =
HTML_PRE
 && 
me
->
¥ef‹m©ãd
)

320 
me
->
¥ef‹m©ãd
--;

321 
	}
}

329 
PRIVATE
 
	$HTMLGí_put_ítôy
 (
HTSåu˘uªd
 * 
me
, 
ítôy_numbî
)

331 
	`HTMLGí_ouçut_ch¨a˘î
(
me
, '&');

332 
	`HTMLGí_ouçut_°rög
(
me
, me->
dtd
->
ítôy_«mes
[
ítôy_numbî
]);

333 
	`HTMLGí_ouçut_ch¨a˘î
(
me
, ';');

334 
	}
}

340 
PRIVATE
 
	$HTMLGí_‰ì
 (
HTSåu˘uªd
 * 
me
)

342 
	`HTMLGí_Êush
(
me
);

343 
	`PUT_CHAR
('\n');

344 (*
me
->
èrgë
->
iß
->
_‰ì
)(me->target);

345 
	`HT_FREE
(
me
);

346  
HT_OK
;

347 
	}
}

350 
PRIVATE
 
	$PœöToHTML_‰ì
 (
HTSåu˘uªd
 * 
me
)

352 
	`HTMLGí_íd_ñemít
(
me
, 
HTML_PRE
);

353 
	`HTMLGí_íd_ñemít
(
me
, 
HTML_BODY
);

354 
	`HTMLGí_íd_ñemít
(
me
, 
HTML_HTML
);

355 
	`HTMLGí_‰ì
(
me
);

356  
HT_OK
;

357 
	}
}

361 
PRIVATE
 
	$HTMLGí_ab‹t
 (
HTSåu˘uªd
 * 
me
, 
HTLi°
 * 
e
)

363 
	`HTMLGí_‰ì
(
me
);

364  
HT_ERROR
;

365 
	}
}

368 
PRIVATE
 
	$PœöToHTML_ab‹t
 (
HTSåu˘uªd
 * 
me
, 
HTLi°
 * 
e
)

370 
	`PœöToHTML_‰ì
(
me
);

371  
HT_ERROR
;

372 
	}
}

379 
PRIVATE
 c⁄° 
HTSåu˘uªdCœss
 
	gHTMLGíî©i⁄
 =

382 
HTMLGí_Êush
,

383 
HTMLGí_‰ì
,

384 
HTMLGí_ab‹t
,

385 
HTMLGí_put_ch¨a˘î
, 
HTMLGí_put_°rög
, 
HTMLGí_wrôe
,

386 
HTMLGí_°¨t_ñemít
, 
HTMLGí_íd_ñemít
,

387 
HTMLGí_put_ítôy


394 
PUBLIC
 
HTSåu˘uªd
* 
	$HTMLGíî©‹
 (
HTReque°
 * 
ªque°
,

395 * 
∑øm
,

396 
HTF‹m©
 
öput_f‹m©
,

397 
HTF‹m©
 
ouçut_f‹m©
,

398 
HTSåóm
 * 
ouçut_°ªam
)

400 
HTSåu˘uªd
* 
me
;

401 i‡((
me
 = (
HTSåu˘uªd
 *Ë
	`HT_CALLOC
(1, (HTSåu˘uªd))Ë=
NULL
)

402 
	`HT_OUTOFMEM
("HTMLGenerator");

403 
me
->
iß
 = &
HTMLGíî©i⁄
;

404 
me
->
dtd
 = 
	`HTML_dtd
();

405 i‡((
me
->
èrgë
 = 
	`HTSåómSèck
(
WWW_HTML
, 
ouçut_f‹m©
, 
ouçut_°ªam
,

406 
ªque°
, 
YES
)Ë=
NULL
) {

407 
	`HTTRACE
(
STREAM_TRACE
, "HTMLGen..... Can't convertÅo mediaÅype\n");

408 
	`HT_FREE
(
me
);

409 
me
->
èrgë
 = 
	`HTEº‹Såóm
();

411 
me
->
wrôe_poöãr
 = me->
buf„r
;

412 
	`Êush_bªaks
(
me
);

413  
me
;

414 
	}
}

423 
PRIVATE
 c⁄° 
HTSåu˘uªdCœss
 
	gPœöToHTMLC⁄vîsi⁄
 =

426 
HTMLGí_Êush
,

427 
PœöToHTML_‰ì
,

428 
PœöToHTML_ab‹t
,

429 
HTMLGí_put_ch¨a˘î
,

430 
HTMLGí_put_°rög
,

431 
HTMLGí_wrôe
,

432 
NULL
,

433 
NULL
,

434 
NULL


444 
PUBLIC
 
HTSåóm
* 
	$HTPœöToHTML
 (
HTReque°
 * 
ªque°
,

445 * 
∑øm
,

446 
HTF‹m©
 
öput_f‹m©
,

447 
HTF‹m©
 
ouçut_f‹m©
,

448 
HTSåóm
 * 
ouçut_°ªam
)

450 
BOOL
 
¥e£¡
[
MAX_ATTRIBUTES
];

451 c⁄° *
vÆue
[
MAX_ATTRIBUTES
];

452 
HTSåu˘uªd
* 
me
;

453 i‡((
me
 = (
HTSåu˘uªd
 *Ë
	`HT_CALLOC
(1,(*me))Ë=
NULL
)

454 
	`HT_OUTOFMEM
("PlainToHTML");

456 
	`mem£t
((*Ë
¥e£¡
, '\0', 
MAX_ATTRIBUTES
);

457 
	`mem£t
((*Ë
vÆue
, '\0', 
MAX_ATTRIBUTES
*(*));

459 
me
->
iß
 = (
HTSåu˘uªdCœss
*Ë&
PœöToHTMLC⁄vîsi⁄
;

460 
me
->
dtd
 = 
	`HTML_dtd
();

461 
me
->
èrgë
 = 
ouçut_°ªam
;

462 
me
->
wrôe_poöãr
 = me->
buf„r
;

463 
	`Êush_bªaks
(
me
);

465 i‡(
me
->
èrgë
) {

466 
	`HTMLGí_°¨t_ñemít
(
me
, 
HTML_HTML
, 
¥e£¡
, 
vÆue
);

467 
	`HTMLGí_°¨t_ñemít
(
me
, 
HTML_BODY
, 
¥e£¡
, 
vÆue
);

468 
	`HTMLGí_°¨t_ñemít
(
me
, 
HTML_PRE
, 
¥e£¡
, 
vÆue
);

470  (
HTSåóm
*Ë
me
;

471 
	}
}

480 
PUBLIC
 
HTSåóm
* 
	$HTPœöTo7BôHTML
 (
HTReque°
 * 
ªque°
,

481 * 
∑øm
,

482 
HTF‹m©
 
öput_f‹m©
,

483 
HTF‹m©
 
ouçut_f‹m©
,

484 
HTSåóm
 * 
ouçut_°ªam
)

486 
HTSåóm
* 
me
 = 
	`HTPœöToHTML
(
ªque°
,
∑øm
,
öput_f‹m©
,

487 
ouçut_f‹m©
, 
ouçut_°ªam
);

488 ((
HTSåu˘uªd
*)
me
)->
£ví_bô
 = 
YES
;

489  
me
;

490 
	}
}

	@Library/src/HTMLGen.h

28 #i‚de‡
HTMLGEN_H


29 
	#HTMLGEN_H


	)

31 
	~"HTSåu˘.h
"

32 
	~"HTF‹m©.h
"

43 
HTSåu˘uªd
* 
HTMLGíî©‹
 (
HTReque°
 * 
ªque°
,

44 * 
∑øm
,

45 
HTF‹m©
 
öput_f‹m©
,

46 
HTF‹m©
 
ouçut_f‹m©
,

47 
HTSåóm
 * 
ouçut_°ªam
);

50 
HTC⁄vîãr
 
HTPœöToHTML
;

	@Library/src/HTMLPDTD.c

13 
	~"wwwsys.h
"

14 
	~"HTUtûs.h
"

16 
	~"HTMLPDTD.h
"

18 
	s_HTSåu˘uªd
 {

19 
HTSåu˘uªdCœss
 * 
	miß
;

27 
PRIVATE
 c⁄° * 
	gítôõs
[
HTML_ENTITIES
] = {

150 #unde‡
HTML_ATTR


151 
	#HTML_ATTR
(
t
,
a
Ë{ #®}

	)

152 #unde‡
HTML_ATTRIBUTES


153 
	#HTML_ATTRIBUTES
(
t
Ë{ 0 }

	)

159 
PRIVATE
 
HTAâr
 
	gno_©å
[1] =

162 
PRIVATE
 
HTAâr
 
	gbody_©å
[
HTML_BODY_ATTRIBUTES
+1] = {

163 
HTML_ATTR
(
BODY
,
ALINK
),

164 
HTML_ATTR
(
BODY
,
BACKGROUND
),

165 
HTML_ATTR
(
BODY
,
BGCOLOR
),

166 
HTML_ATTR
(
BODY
,
CLASS
),

167 
HTML_ATTR
(
BODY
,
DIR
),

168 
HTML_ATTR
(
BODY
,
ID
),

169 
HTML_ATTR
(
BODY
,
LANG
),

170 
HTML_ATTR
(
BODY
,
LINK
),

171 
HTML_ATTR
(
BODY
,
STYLE
),

172 
HTML_ATTR
(
BODY
,
TEXT
),

173 
HTML_ATTR
(
BODY
,
TITLE
),

174 
HTML_ATTR
(
BODY
,
VLINK
),

175 
HTML_ATTRIBUTES
(
BODY
)

178 
PRIVATE
 
HTAâr
 
	g‰ame_©å
[
HTML_FRAME_ATTRIBUTES
+1] = {

179 
HTML_ATTR
(
FRAME
,
CLASS
),

180 
HTML_ATTR
(
FRAME
,
FRAMEBORDER
),

181 
HTML_ATTR
(
FRAME
,
ID
),

182 
HTML_ATTR
(
FRAME
,
NAME
),

183 
HTML_ATTR
(
FRAME
,
MARGINHEIGHT
),

184 
HTML_ATTR
(
FRAME
,
MARGINWIDTH
),

185 
HTML_ATTR
(
FRAME
,
NORESIZE
),

186 
HTML_ATTR
(
FRAME
,
LONGDESC
),

187 
HTML_ATTR
(
FRAME
,
SCROLLING
),

188 
HTML_ATTR
(
FRAME
,
SRC
),

189 
HTML_ATTR
(
FRAME
,
STYLE
),

190 
HTML_ATTR
(
FRAME
,
TARGET
),

191 
HTML_ATTR
(
FRAME
,
TITLE
),

192 
HTML_ATTRIBUTES
(
FRAME
)

195 
PRIVATE
 
HTAâr
 
	g‰ame£t_©å
[
HTML_FRAMESET_ATTRIBUTES
+1] = {

196 
HTML_ATTR
(
FRAMESET
,
CLASS
),

197 
HTML_ATTR
(
FRAMESET
,
COLS
),

198 
HTML_ATTR
(
FRAMESET
,
ID
),

199 
HTML_ATTR
(
FRAMESET
,
ROWS
),

200 
HTML_ATTR
(
FRAMESET
,
STYLE
),

201 
HTML_ATTR
(
FRAMESET
,
TITLE
),

202 
HTML_ATTRIBUTES
(
FRAMESET
)

205 
PRIVATE
 
HTAâr
 
	ga_©å
[
HTML_A_ATTRIBUTES
+1] = {

206 
HTML_ATTR
(
A
,
ACCESSKEY
),

207 
HTML_ATTR
(
A
,
CHARSET
),

208 
HTML_ATTR
(
A
,
CLASS
),

209 
HTML_ATTR
(
A
,
COORDS
),

210 
HTML_ATTR
(
A
,
DIR
),

211 
HTML_ATTR
(
A
,
HREF
),

212 
HTML_ATTR
(
A
,
HREFLANG
),

213 
HTML_ATTR
(
A
,
ID
),

214 
HTML_ATTR
(
A
,
NAME
),

215 
HTML_ATTR
(
A
,
REL
),

216 
HTML_ATTR
(
A
,
REV
),

217 
HTML_ATTR
(
A
,
SHAPE
),

218 
HTML_ATTR
(
A
,
STYLE
),

219 
HTML_ATTR
(
A
,
TABINDEX
),

220 
HTML_ATTR
(
A
,
TARGET
),

221 
HTML_ATTR
(
A
,
TYPE
),

222 
HTML_ATTR
(
A
,
TITLE
),

223 
HTML_ATTRIBUTES
(
A
)

226 
PRIVATE
 
HTAâr
 
	g≠∂ë_©å
[
HTML_APPLET_ATTRIBUTES
+1] = {

227 
HTML_ATTR
(
APPLET
,
ALIGN
),

228 
HTML_ATTR
(
APPLET
,
ALT
),

229 
HTML_ATTR
(
APPLET
,
ARCHIVE
),

230 
HTML_ATTR
(
APPLET
,
CLASS
),

231 
HTML_ATTR
(
APPLET
,
CODE
),

232 
HTML_ATTR
(
APPLET
,
CODEBASE
),

233 
HTML_ATTR
(
APPLET
,
HEIGHT
),

234 
HTML_ATTR
(
APPLET
,
HSPACE
),

235 
HTML_ATTR
(
APPLET
,
ID
),

236 
HTML_ATTR
(
APPLET
,
NAME
),

237 
HTML_ATTR
(
APPLET
,
OBJECT
),

238 
HTML_ATTR
(
APPLET
,
STYLE
),

239 
HTML_ATTR
(
APPLET
,
TITLE
),

240 
HTML_ATTR
(
APPLET
,
VSPACE
),

241 
HTML_ATTR
(
APPLET
,
WIDTH
),

242 
HTML_ATTRIBUTES
(
APPLET
)

245 
PRIVATE
 
HTAâr
 
	g¨ó_©å
[
HTML_AREA_ATTRIBUTES
+1] = {

246 
HTML_ATTR
(
AREA
,
ACCESSKEY
),

247 
HTML_ATTR
(
AREA
,
ALT
),

248 
HTML_ATTR
(
AREA
,
CLASS
),

249 
HTML_ATTR
(
AREA
,
COORDS
),

250 
HTML_ATTR
(
AREA
,
DIR
),

251 
HTML_ATTR
(
AREA
,
HREF
),

252 
HTML_ATTR
(
AREA
,
ID
),

253 
HTML_ATTR
(
AREA
,
NAME
),

254 
HTML_ATTR
(
AREA
,
NOHREF
),

255 
HTML_ATTR
(
AREA
,
LANG
),

256 
HTML_ATTR
(
AREA
,
SHAPE
),

257 
HTML_ATTR
(
AREA
,
STYLE
),

258 
HTML_ATTR
(
AREA
,
TABINDEX
),

259 
HTML_ATTR
(
AREA
,
TARGET
),

260 
HTML_ATTR
(
AREA
,
TITLE
),

261 
HTML_ATTRIBUTES
(
AREA
)

264 
PRIVATE
 
HTAâr
 
	gba£_©å
[
HTML_BASE_ATTRIBUTES
+1] = {

265 
HTML_ATTR
(
BASE
,
HREF
),

266 
HTML_ATTR
(
BASE
,
TARGET
),

267 
HTML_ATTRIBUTES
(
BASE
)

270 
PRIVATE
 
HTAâr
 
	gbdo_©å
[
HTML_BDO_ATTRIBUTES
+1] = {

271 
HTML_ATTR
(
BDO
,
CLASS
),

272 
HTML_ATTR
(
BDO
,
DIR
),

273 
HTML_ATTR
(
BDO
,
ID
),

274 
HTML_ATTR
(
BDO
,
LANG
),

275 
HTML_ATTR
(
BDO
,
STYLE
),

276 
HTML_ATTR
(
BDO
,
TITLE
),

277 
HTML_ATTRIBUTES
(
BDO
)

280 
PRIVATE
 
HTAâr
 
	gbq_©å
[
HTML_BQ_ATTRIBUTES
+1] = {

281 
HTML_ATTR
(
BQ
,
CITE
),

282 
HTML_ATTR
(
BQ
,
CLASS
),

283 
HTML_ATTR
(
BQ
,
DIR
),

284 
HTML_ATTR
(
BQ
,
ID
),

285 
HTML_ATTR
(
BQ
,
LANG
),

286 
HTML_ATTR
(
BQ
,
STYLE
),

287 
HTML_ATTR
(
BQ
,
TITLE
),

288 
HTML_ATTRIBUTES
(
BQ
)

291 
PRIVATE
 
HTAâr
 
	gbr_©å
[
HTML_BR_ATTRIBUTES
+1] = {

292 
HTML_ATTR
(
BR
,
CLASS
),

293 
HTML_ATTR
(
BR
,
CLEAR
),

294 
HTML_ATTR
(
BR
,
ID
),

295 
HTML_ATTR
(
BR
,
STYLE
),

296 
HTML_ATTR
(
BR
,
TITLE
),

297 
HTML_ATTRIBUTES
(
BR
)

300 
PRIVATE
 
HTAâr
 
	gbuâ⁄_©å
[
HTML_BUTTON_ATTRIBUTES
+1] = {

301 
HTML_ATTR
(
BUTTON
,
ACCESSKEY
),

302 
HTML_ATTR
(
BUTTON
,
CLASS
),

303 
HTML_ATTR
(
BUTTON
,
DIR
),

304 
HTML_ATTR
(
BUTTON
,
DISABLED
),

305 
HTML_ATTR
(
BUTTON
,
ID
),

306 
HTML_ATTR
(
BUTTON
,
LANG
),

307 
HTML_ATTR
(
BUTTON
,
NAME
),

308 
HTML_ATTR
(
BUTTON
,
STYLE
),

309 
HTML_ATTR
(
BUTTON
,
TABINDEX
),

310 
HTML_ATTR
(
BUTTON
,
TITLE
),

311 
HTML_ATTR
(
BUTTON
,
TYPE
),

312 
HTML_ATTR
(
BUTTON
,
VALUE
),

313 
HTML_ATTRIBUTES
(
BUTTON
),

316 
PRIVATE
 
HTAâr
 
	gcﬁ_©å
[
HTML_COL_ATTRIBUTES
+1] = {

317 
HTML_ATTR
(
COL
,
CLASS
),

318 
HTML_ATTR
(
COL
,
DIR
),

319 
HTML_ATTR
(
COL
,
ID
),

320 
HTML_ATTR
(
COL
,
LANG
),

321 
HTML_ATTR
(
COL
,
SPAN
),

322 
HTML_ATTR
(
COL
,
STYLE
),

323 
HTML_ATTR
(
COL
,
TITLE
),

324 
HTML_ATTR
(
COL
,
WIDTH
),

325 
HTML_ATTRIBUTES
(
COL
)

328 
PRIVATE
 
HTAâr
 
	gch™ges_©å
[
HTML_CHANGES_ATTRIBUTES
+1] = {

329 
HTML_ATTR
(
CHANGES
,
CITE
),

330 
HTML_ATTR
(
CHANGES
,
CLASS
),

331 
HTML_ATTR
(
CHANGES
,
DATETIME
),

332 
HTML_ATTR
(
CHANGES
,
DIR
),

333 
HTML_ATTR
(
CHANGES
,
ID
),

334 
HTML_ATTR
(
CHANGES
,
LANG
),

335 
HTML_ATTR
(
CHANGES
,
STYLE
),

336 
HTML_ATTR
(
CHANGES
,
TITLE
),

337 
HTML_ATTRIBUTES
(
CHANGES
)

340 
PRIVATE
 
HTAâr
 
	gf⁄t_©å
[
HTML_FONT_ATTRIBUTES
+1] = {

341 
HTML_ATTR
(
FONT
,
CLASS
),

342 
HTML_ATTR
(
FONT
,
COLOR
),

343 
HTML_ATTR
(
FONT
,
DIR
),

344 
HTML_ATTR
(
FONT
,
FACE
),

345 
HTML_ATTR
(
FONT
,
ID
),

346 
HTML_ATTR
(
FONT
,
LANG
),

347 
HTML_ATTR
(
FONT
,
SIZE
),

348 
HTML_ATTR
(
FONT
,
STYLE
),

349 
HTML_ATTR
(
FONT
,
TITLE
),

350 
HTML_ATTRIBUTES
(
FONT
)

353 
PRIVATE
 
HTAâr
 
	gf‹m_©å
[
HTML_FORM_ATTRIBUTES
+1] = {

354 
HTML_ATTR
(
FORM
,
ACCEPT
),

356 
HTML_ATTR
(
FORM
,
ACTION
),

357 
HTML_ATTR
(
FORM
,
CLASS
),

358 
HTML_ATTR
(
FORM
,
DIR
),

359 
HTML_ATTR
(
FORM
,
ENCTYPE
),

360 
HTML_ATTR
(
FORM
,
ID
),

361 
HTML_ATTR
(
FORM
,
LANG
),

362 
HTML_ATTR
(
FORM
,
METHOD
),

363 
HTML_ATTR
(
FORM
,
STYLE
),

364 
HTML_ATTR
(
FORM
,
TARGET
),

365 
HTML_ATTR
(
FORM
,
TITLE
),

366 
HTML_ATTRIBUTES
(
FORM
)

369 
PRIVATE
 
HTAâr
 
	ggí_©å
[
HTML_GEN_ATTRIBUTES
+1] = {

370 
HTML_ATTR
(
GEN
,
CLASS
),

371 
HTML_ATTR
(
GEN
,
DIR
),

372 
HTML_ATTR
(
GEN
,
ID
),

373 
HTML_ATTR
(
GEN
,
LANG
),

374 
HTML_ATTR
(
GEN
,
STYLE
),

375 
HTML_ATTR
(
GEN
,
TITLE
),

376 
HTML_ATTRIBUTES
(
GEN
)

379 
PRIVATE
 
HTAâr
 
	gblock_©å
[
HTML_BLOCK_ATTRIBUTES
+1] = {

380 
HTML_ATTR
(
BLOCK
,
ALIGN
),

381 
HTML_ATTR
(
BLOCK
,
CLASS
),

382 
HTML_ATTR
(
BLOCK
,
DIR
),

383 
HTML_ATTR
(
BLOCK
,
ID
),

384 
HTML_ATTR
(
BLOCK
,
LANG
),

385 
HTML_ATTR
(
BLOCK
,
STYLE
),

386 
HTML_ATTR
(
BLOCK
,
TITLE
),

387 
HTML_ATTRIBUTES
(
BLOCK
)

390 
PRIVATE
 
HTAâr
 
	ghód_©å
[
HTML_HEAD_ATTRIBUTES
+1] = {

391 
HTML_ATTR
(
HEAD
,
DIR
),

392 
HTML_ATTR
(
HEAD
,
LANG
),

393 
HTML_ATTR
(
HEAD
,
PROFILE
),

394 
HTML_ATTRIBUTES
(
HEAD
)

397 
PRIVATE
 
HTAâr
 
	ghr_©å
[
HTML_HR_ATTRIBUTES
+1] = {

398 
HTML_ATTR
(
HR
,
ALIGN
),

399 
HTML_ATTR
(
HR
,
CLASS
),

400 
HTML_ATTR
(
HR
,
DIR
),

401 
HTML_ATTR
(
HR
,
ID
),

402 
HTML_ATTR
(
HR
,
LANG
),

403 
HTML_ATTR
(
HR
,
NOSHADE
),

404 
HTML_ATTR
(
HR
,
SIZE
),

405 
HTML_ATTR
(
HR
,
STYLE
),

406 
HTML_ATTR
(
HR
,
TITLE
),

407 
HTML_ATTR
(
HR
,
WIDTH
),

408 
HTML_ATTRIBUTES
(
HR
)

411 
PRIVATE
 
HTAâr
 
	ghtml_©å
[
HTML_HTML_ATTRIBUTES
+1] = {

412 
HTML_ATTR
(
HTML
,
DIR
),

413 
HTML_ATTR
(
HTML
,
LANG
),

414 
HTML_ATTR
(
HTML
,
VERSION
),

415 
HTML_ATTRIBUTES
(
HTML
)

418 
PRIVATE
 
HTAâr
 
	gi‰ame_©å
[
HTML_IFRAME_ATTRIBUTES
+1] = {

419 
HTML_ATTR
(
IFRAME
,
ALIGN
),

420 
HTML_ATTR
(
IFRAME
,
CLASS
),

421 
HTML_ATTR
(
IFRAME
,
FRAMEBORDER
),

422 
HTML_ATTR
(
IFRAME
,
HEIGHT
),

423 
HTML_ATTR
(
IFRAME
,
ID
),

424 
HTML_ATTR
(
IFRAME
,
LONGDESC
),

425 
HTML_ATTR
(
IFRAME
,
MARGINHEIGHT
),

426 
HTML_ATTR
(
IFRAME
,
MARGINWIDTH
),

427 
HTML_ATTR
(
IFRAME
,
NAME
),

428 
HTML_ATTR
(
IFRAME
,
SCROLLING
),

429 
HTML_ATTR
(
IFRAME
,
SRC
),

430 
HTML_ATTR
(
IFRAME
,
STYLE
),

431 
HTML_ATTR
(
IFRAME
,
TARGET
),

432 
HTML_ATTR
(
IFRAME
,
TITLE
),

433 
HTML_ATTR
(
IFRAME
,
WIDTH
),

434 
HTML_ATTRIBUTES
(
IFRAME
)

437 
PRIVATE
 
HTAâr
 
	gimg_©å
[
HTML_IMG_ATTRIBUTES
+1] = {

438 
HTML_ATTR
(
IMG
,
ALIGN
),

439 
HTML_ATTR
(
IMG
,
ALT
),

440 
HTML_ATTR
(
IMG
,
BORDER
),

441 
HTML_ATTR
(
IMG
,
CLASS
),

442 
HTML_ATTR
(
IMG
,
DIR
),

443 
HTML_ATTR
(
IMG
,
HEIGHT
),

444 
HTML_ATTR
(
IMG
,
HSPACE
),

445 
HTML_ATTR
(
IMG
,
ID
),

446 
HTML_ATTR
(
IMG
,
ISMAP
),

447 
HTML_ATTR
(
IMG
,
LANG
),

448 
HTML_ATTR
(
IMG
,
LONGDESC
),

449 
HTML_ATTR
(
IMG
,
SRC
),

450 
HTML_ATTR
(
IMG
,
STYLE
),

451 
HTML_ATTR
(
IMG
,
TITLE
),

452 
HTML_ATTR
(
IMG
,
USEMAP
),

453 
HTML_ATTR
(
IMG
,
VSPACE
),

454 
HTML_ATTR
(
IMG
,
WIDTH
),

455 
HTML_ATTRIBUTES
(
IMG
)

458 
PRIVATE
 
HTAâr
 
	göput_©å
[
HTML_INPUT_ATTRIBUTES
+1] = {

459 
HTML_ATTR
(
INPUT
,
ACCEPT
),

460 
HTML_ATTR
(
INPUT
,
ACCESSKEY
),

461 
HTML_ATTR
(
INPUT
,
ALIGN
),

462 
HTML_ATTR
(
INPUT
,
ALT
),

463 
HTML_ATTR
(
INPUT
,
CHECKED
),

464 
HTML_ATTR
(
INPUT
,
CLASS
),

465 
HTML_ATTR
(
INPUT
,
DIR
),

466 
HTML_ATTR
(
INPUT
,
DISABLED
),

467 
HTML_ATTR
(
INPUT
,
ID
),

468 
HTML_ATTR
(
INPUT
,
LANG
),

469 
HTML_ATTR
(
INPUT
,
MAXLENGTH
),

470 
HTML_ATTR
(
INPUT
,
NAME
),

471 
HTML_ATTR
(
INPUT
,
READONLY
),

472 
HTML_ATTR
(
INPUT
,
SIZE
),

473 
HTML_ATTR
(
INPUT
,
SRC
),

474 
HTML_ATTR
(
INPUT
,
STYLE
),

475 
HTML_ATTR
(
INPUT
,
TABINDEX
),

476 
HTML_ATTR
(
INPUT
,
TITLE
),

477 
HTML_ATTR
(
INPUT
,
TYPE
),

478 
HTML_ATTR
(
INPUT
,
USEMAP
),

479 
HTML_ATTR
(
INPUT
,
VALUE
),

480 
HTML_ATTRIBUTES
(
INPUT
)

483 
PRIVATE
 
HTAâr
 
	gisödex_©å
[
HTML_ISINDEX_ATTRIBUTES
+1] = {

484 
HTML_ATTR
(
ISINDEX
,
CLASS
),

485 
HTML_ATTR
(
ISINDEX
,
DIR
),

486 
HTML_ATTR
(
ISINDEX
,
ID
),

487 
HTML_ATTR
(
ISINDEX
,
LANG
),

488 
HTML_ATTR
(
ISINDEX
,
PROMPT
),

489 
HTML_ATTR
(
ISINDEX
,
STYLE
),

490 
HTML_ATTR
(
ISINDEX
,
TITLE
),

491 
HTML_ATTRIBUTES
(
ISINDEX
)

494 
PRIVATE
 
HTAâr
 
	gœbñ_©å
[
HTML_LABEL_ATTRIBUTES
+1] = {

495 
HTML_ATTR
(
LABEL
,
ACCESSKEY
),

496 
HTML_ATTR
(
LABEL
,
CLASS
),

497 
HTML_ATTR
(
LABEL
,
DIR
),

498 
HTML_ATTR
(
LABEL
,
FOR
),

499 
HTML_ATTR
(
LABEL
,
ID
),

500 
HTML_ATTR
(
LABEL
,
LANG
),

501 
HTML_ATTR
(
LABEL
,
STYLE
),

502 
HTML_ATTR
(
LABEL
,
TITLE
),

503 
HTML_ATTRIBUTES
(
LABEL
)

506 
PRIVATE
 
HTAâr
 
	gÀgíd_©å
[
HTML_LEGEND_ATTRIBUTES
+1] = {

507 
HTML_ATTR
(
LEGEND
,
ACCESSKEY
),

508 
HTML_ATTR
(
LEGEND
,
ALIGN
),

509 
HTML_ATTR
(
LEGEND
,
CLASS
),

510 
HTML_ATTR
(
LEGEND
,
DIR
),

511 
HTML_ATTR
(
LEGEND
,
ID
),

512 
HTML_ATTR
(
LEGEND
,
LANG
),

513 
HTML_ATTR
(
LEGEND
,
STYLE
),

514 
HTML_ATTR
(
LEGEND
,
TITLE
),

515 
HTML_ATTRIBUTES
(
LEGEND
)

518 
PRIVATE
 
HTAâr
 
	gli_©å
[
HTML_LI_ATTRIBUTES
+1] = {

519 
HTML_ATTR
(
LI
,
CLASS
),

520 
HTML_ATTR
(
LI
,
COMPACT
),

521 
HTML_ATTR
(
LI
,
DIR
),

522 
HTML_ATTR
(
LI
,
ID
),

523 
HTML_ATTR
(
LI
,
LANG
),

524 
HTML_ATTR
(
LI
,
STYLE
),

525 
HTML_ATTR
(
LI
,
TITLE
),

526 
HTML_ATTR
(
LI
,
TYPE
),

527 
HTML_ATTR
(
LI
,
VALUE
),

528 
HTML_ATTRIBUTES
(
LI
)

531 
PRIVATE
 
HTAâr
 
	glök_©å
[
HTML_LINK_ATTRIBUTES
+1] = {

532 
HTML_ATTR
(
LINK
,
CHARSET
),

533 
HTML_ATTR
(
LINK
,
CLASS
),

534 
HTML_ATTR
(
LINK
,
DIR
),

535 
HTML_ATTR
(
LINK
,
HREF
),

536 
HTML_ATTR
(
LINK
,
HREFLANG
),

537 
HTML_ATTR
(
LINK
,
ID
),

538 
HTML_ATTR
(
LINK
,
LANG
),

539 
HTML_ATTR
(
LINK
,
MEDIA
),

540 
HTML_ATTR
(
LINK
,
REL
),

541 
HTML_ATTR
(
LINK
,
REV
),

542 
HTML_ATTR
(
LINK
,
STYLE
),

543 
HTML_ATTR
(
LINK
,
TARGET
),

544 
HTML_ATTR
(
LINK
,
TITLE
),

545 
HTML_ATTR
(
LINK
,
TYPE
),

546 
HTML_ATTRIBUTES
(
LINK
)

549 
PRIVATE
 
HTAâr
 
	gm≠_©å
[
HTML_MAP_ATTRIBUTES
+1] = {

550 
HTML_ATTR
(
MAP
,
CLASS
),

551 
HTML_ATTR
(
MAP
,
DIR
),

552 
HTML_ATTR
(
MAP
,
ID
),

553 
HTML_ATTR
(
MAP
,
LANG
),

554 
HTML_ATTR
(
MAP
,
NAME
),

555 
HTML_ATTR
(
MAP
,
STYLE
),

556 
HTML_ATTR
(
MAP
,
TITLE
),

557 
HTML_ATTRIBUTES
(
MAP
)

560 
PRIVATE
 
HTAâr
 
	gmëa_©å
[
HTML_META_ATTRIBUTES
+1] = {

561 
HTML_ATTR
(
META
,
CONTENT
),

562 
HTML_ATTR
(
META
,
DIR
),

564 
HTML_ATTR
(
META
,
LANG
),

565 
HTML_ATTR
(
META
,
NAME
),

566 
HTML_ATTR
(
META
,
SCHEME
),

567 
HTML_ATTRIBUTES
(
META
)

570 
PRIVATE
 
HTAâr
 
	g√xtid_©å
[
HTML_NEXTID_ATTRIBUTES
+1] = {

575 
PRIVATE
 
HTAâr
 
	gobje˘_©å
[
HTML_OBJECT_ATTRIBUTES
+1] = {

576 
HTML_ATTR
(
OBJECT
,
ALIGN
),

577 
HTML_ATTR
(
OBJECT
,
ARCHIVE
),

578 
HTML_ATTR
(
OBJECT
,
BORDER
),

579 
HTML_ATTR
(
OBJECT
,
CLASS
),

580 
HTML_ATTR
(
OBJECT
,
CLASSID
),

581 
HTML_ATTR
(
OBJECT
,
CODEBASE
),

582 
HTML_ATTR
(
OBJECT
,
CODETYPE
),

583 
HTML_ATTR
(
OBJECT
,
DATA
),

584 
HTML_ATTR
(
OBJECT
,
DECLARE
),

585 
HTML_ATTR
(
OBJECT
,
DIR
),

586 
HTML_ATTR
(
OBJECT
,
HEIGHT
),

587 
HTML_ATTR
(
OBJECT
,
HSPACE
),

588 
HTML_ATTR
(
OBJECT
,
ID
),

589 
HTML_ATTR
(
OBJECT
,
LANG
),

590 
HTML_ATTR
(
OBJECT
,
NAME
),

591 
HTML_ATTR
(
OBJECT
,
STANDBY
),

592 
HTML_ATTR
(
OBJECT
,
STYLE
),

593 
HTML_ATTR
(
OBJECT
,
TABINDEX
),

594 
HTML_ATTR
(
OBJECT
,
TITLE
),

595 
HTML_ATTR
(
OBJECT
,
TYPE
),

596 
HTML_ATTR
(
OBJECT
,
USEMAP
),

597 
HTML_ATTR
(
OBJECT
,
VSPACE
),

598 
HTML_ATTR
(
OBJECT
,
WIDTH
),

599 
HTML_ATTRIBUTES
(
OBJECT
)

602 
PRIVATE
 
HTAâr
 
	gﬁ_©å
[
HTML_OL_ATTRIBUTES
+1] = {

603 
HTML_ATTR
(
OL
,
CLASS
),

604 
HTML_ATTR
(
OL
,
COMPACT
),

605 
HTML_ATTR
(
OL
,
DIR
),

606 
HTML_ATTR
(
OL
,
ID
),

607 
HTML_ATTR
(
OL
,
LANG
),

608 
HTML_ATTR
(
OL
,
START
),

609 
HTML_ATTR
(
OL
,
STYLE
),

610 
HTML_ATTR
(
OL
,
TITLE
),

611 
HTML_ATTR
(
OL
,
TYPE
),

612 
HTML_ATTRIBUTES
(
OL
)

615 
PRIVATE
 
HTAâr
 
	g›tgroup_©å
[
HTML_OPTGROUP_ATTRIBUTES
+1] = {

616 
HTML_ATTR
(
OPTGROUP
,
CLASS
),

617 
HTML_ATTR
(
OPTGROUP
,
DISABLED
),

618 
HTML_ATTR
(
OPTGROUP
,
DIR
),

619 
HTML_ATTR
(
OPTGROUP
,
ID
),

620 
HTML_ATTR
(
OPTGROUP
,
LABEL
),

621 
HTML_ATTR
(
OPTGROUP
,
LANG
),

622 
HTML_ATTR
(
OPTGROUP
,
STYLE
),

623 
HTML_ATTR
(
OPTGROUP
,
TITLE
),

624 
HTML_ATTRIBUTES
(
OPTGROUP
)

627 
PRIVATE
 
HTAâr
 
	g›ti⁄_©å
[
HTML_OPTION_ATTRIBUTES
+1] = {

628 
HTML_ATTR
(
OPTION
,
CLASS
),

629 
HTML_ATTR
(
OPTION
,
DISABLED
),

630 
HTML_ATTR
(
OPTION
,
DIR
),

631 
HTML_ATTR
(
OPTION
,
ID
),

632 
HTML_ATTR
(
OPTION
,
LABEL
),

633 
HTML_ATTR
(
OPTION
,
LANG
),

634 
HTML_ATTR
(
OPTION
,
SELECTED
),

635 
HTML_ATTR
(
OPTION
,
STYLE
),

636 
HTML_ATTR
(
OPTION
,
TITLE
),

637 
HTML_ATTR
(
OPTION
,
VALUE
),

638 
HTML_ATTRIBUTES
(
OPTION
)

641 
PRIVATE
 
HTAâr
 
	g∑øm_©å
[
HTML_PARAM_ATTRIBUTES
+1] = {

642 
HTML_ATTR
(
PARAM
,
ID
),

643 
HTML_ATTR
(
PARAM
,
NAME
),

644 
HTML_ATTR
(
PARAM
,
TYPE
),

645 
HTML_ATTR
(
PARAM
,
VALUE
),

646 
HTML_ATTR
(
PARAM
,
VALUETYPE
),

647 
HTML_ATTRIBUTES
(
PARAM
)

650 
PRIVATE
 
HTAâr
 
	g¥e_©å
[
HTML_PRE_ATTRIBUTES
+1] = {

651 
HTML_ATTR
(
PRE
,
CLASS
),

652 
HTML_ATTR
(
PRE
,
DIR
),

653 
HTML_ATTR
(
PRE
,
ID
),

654 
HTML_ATTR
(
PRE
,
LANG
),

655 
HTML_ATTR
(
PRE
,
STYLE
),

656 
HTML_ATTR
(
PRE
,
TITLE
),

657 
HTML_ATTR
(
PRE
,
WIDTH
),

658 
HTML_ATTRIBUTES
(
PRE
)

661 
PRIVATE
 
HTAâr
 
	gs¸ùt_©å
[
HTML_SCRIPT_ATTRIBUTES
+1] = {

662 
HTML_ATTR
(
SCRIPT
,
CHARSET
),

663 
HTML_ATTR
(
SCRIPT
,
DEFER
),

664 
HTML_ATTR
(
SCRIPT
,
LANGUAGE
),

665 
HTML_ATTR
(
SCRIPT
,
SRC
),

666 
HTML_ATTR
(
SCRIPT
,
TYPE
),

667 
HTML_ATTRIBUTES
(
SCRIPT
)

670 
PRIVATE
 
HTAâr
 
	g£À˘_©å
[
HTML_SELECT_ATTRIBUTES
+1] = {

671 
HTML_ATTR
(
SELECT
,
CLASS
),

672 
HTML_ATTR
(
SELECT
,
DIR
),

673 
HTML_ATTR
(
SELECT
,
DISABLED
),

674 
HTML_ATTR
(
SELECT
,
ID
),

675 
HTML_ATTR
(
SELECT
,
LANG
),

676 
HTML_ATTR
(
SELECT
,
MULTIPLE
),

677 
HTML_ATTR
(
SELECT
,
NAME
),

678 
HTML_ATTR
(
SELECT
,
SIZE
),

679 
HTML_ATTR
(
SELECT
,
STYLE
),

680 
HTML_ATTR
(
SELECT
,
TABINDEX
),

681 
HTML_ATTR
(
SELECT
,
TITLE
),

682 
HTML_ATTRIBUTES
(
SELECT
)

685 
PRIVATE
 
HTAâr
 
	g°yÀ_©å
[
HTML_STYLE_ATTRIBUTES
+1] = {

686 
HTML_ATTR
(
STYLE
,
DIR
),

687 
HTML_ATTR
(
STYLE
,
LANG
),

688 
HTML_ATTR
(
STYLE
,
MEDIA
),

689 
HTML_ATTR
(
STYLE
,
TITLE
),

690 
HTML_ATTR
(
STYLE
,
TYPE
),

691 
HTML_ATTRIBUTES
(
STYLE
)

694 
PRIVATE
 
HTAâr
 
	gèbÀ_©å
[
HTML_TABLE_ATTRIBUTES
+1] = {

695 
HTML_ATTR
(
TABLE
,
ALIGN
),

696 
HTML_ATTR
(
TABLE
,
BGCOLOR
),

697 
HTML_ATTR
(
TABLE
,
BORDER
),

698 
HTML_ATTR
(
TABLE
,
CELLPADDING
),

699 
HTML_ATTR
(
TABLE
,
CELLSPACING
),

700 
HTML_ATTR
(
TABLE
,
CLASS
),

701 
HTML_ATTR
(
TABLE
,
DIR
),

702 
HTML_ATTR
(
TABLE
,
FRAME
),

703 
HTML_ATTR
(
TABLE
,
ID
),

704 
HTML_ATTR
(
TABLE
,
LANG
),

705 
HTML_ATTR
(
TABLE
,
RULES
),

706 
HTML_ATTR
(
TABLE
,
SUMMARY
),

707 
HTML_ATTR
(
TABLE
,
STYLE
),

708 
HTML_ATTR
(
TABLE
,
TITLE
),

709 
HTML_ATTR
(
TABLE
,
WIDTH
),

710 
HTML_ATTRIBUTES
(
TABLE
)

713 
PRIVATE
 
HTAâr
 
	gãÀ_©å
[
HTML_TELE_ATTRIBUTES
+1] = {

714 
HTML_ATTR
(
TELE
,
ALIGN
),

715 
HTML_ATTR
(
TELE
,
CHAR
),

716 
HTML_ATTR
(
TELE
,
CHAROFF
),

717 
HTML_ATTR
(
TELE
,
CLASS
),

718 
HTML_ATTR
(
TELE
,
DIR
),

719 
HTML_ATTR
(
TELE
,
ID
),

720 
HTML_ATTR
(
TELE
,
LANG
),

721 
HTML_ATTR
(
TELE
,
STYLE
),

722 
HTML_ATTR
(
TELE
,
TITLE
),

723 
HTML_ATTR
(
TELE
,
VALIGN
),

724 
HTML_ATTRIBUTES
(
TELE
)

727 
PRIVATE
 
HTAâr
 
	gtd_©å
[
HTML_TD_ATTRIBUTES
+1] = {

728 
HTML_ATTR
(
TD
,
ABBR
),

729 
HTML_ATTR
(
TD
,
ALIGN
),

730 
HTML_ATTR
(
TD
,
AXIS
),

731 
HTML_ATTR
(
TD
,
BGCOLOR
),

732 
HTML_ATTR
(
TD
,
CHAR
),

733 
HTML_ATTR
(
TD
,
CHAROFF
),

734 
HTML_ATTR
(
TD
,
CLASS
),

735 
HTML_ATTR
(
TD
,
COLSPAN
),

736 
HTML_ATTR
(
TD
,
DIR
),

737 
HTML_ATTR
(
TD
,
ID
),

738 
HTML_ATTR
(
TD
,
HEADERS
),

739 
HTML_ATTR
(
TD
,
HEIGHT
),

740 
HTML_ATTR
(
TD
,
LANG
),

741 
HTML_ATTR
(
TD
,
NOWRAP
),

742 
HTML_ATTR
(
TD
,
ROWSPAN
),

743 
HTML_ATTR
(
TD
,
SCOPE
),

744 
HTML_ATTR
(
TD
,
STYLE
),

745 
HTML_ATTR
(
TD
,
TITLE
),

746 
HTML_ATTR
(
TD
,
VALIGN
),

747 
HTML_ATTR
(
TD
,
WIDTH
),

748 
HTML_ATTRIBUTES
(
TD
)

751 
PRIVATE
 
HTAâr
 
	gãxèªa_©å
[
HTML_TEXTAREA_ATTRIBUTES
+1] = {

752 
HTML_ATTR
(
TEXTAREA
,
CLASS
),

753 
HTML_ATTR
(
TEXTAREA
,
COLS
),

754 
HTML_ATTR
(
TEXTAREA
,
DIR
),

755 
HTML_ATTR
(
TEXTAREA
,
DISABLED
),

756 
HTML_ATTR
(
TEXTAREA
,
ID
),

757 
HTML_ATTR
(
TEXTAREA
,
LANG
),

758 
HTML_ATTR
(
TEXTAREA
,
NAME
),

759 
HTML_ATTR
(
TEXTAREA
,
READONLY
),

760 
HTML_ATTR
(
TEXTAREA
,
ROWS
),

761 
HTML_ATTR
(
TEXTAREA
,
STYLE
),

762 
HTML_ATTR
(
TEXTAREA
,
TABINDEX
),

763 
HTML_ATTR
(
TEXTAREA
,
TITLE
),

764 
HTML_ATTRIBUTES
(
TEXTAREA
)

767 
PRIVATE
 
HTAâr
 
	gtôÀ_©å
[
HTML_TITLE_ATTRIBUTES
+1] = {

768 
HTML_ATTR
(
TITLE
,
DIR
),

769 
HTML_ATTR
(
TITLE
,
LANG
),

770 
HTML_ATTRIBUTES
(
TITLE
)

773 
PRIVATE
 
HTAâr
 
	gul_©å
[
HTML_UL_ATTRIBUTES
+1] = {

774 
HTML_ATTR
(
UL
,
CLASS
),

775 
HTML_ATTR
(
UL
,
COMPACT
),

776 
HTML_ATTR
(
UL
,
DIR
),

777 
HTML_ATTR
(
UL
,
ID
),

778 
HTML_ATTR
(
UL
,
LANG
),

779 
HTML_ATTR
(
UL
,
STYLE
),

780 
HTML_ATTR
(
UL
,
TITLE
),

781 
HTML_ATTR
(
UL
,
TYPE
),

782 
HTML_ATTRIBUTES
(
UL
)

792 
PRIVATE
 
HTTag
 
	gègs
[
HTML_ELEMENTS
] = {

793 { "A" , 
a_©å
, 
HTML_A_ATTRIBUTES
, 
SGML_MIXED
 },

794 { "ABBR" , 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

795 { "ACRONYM" , 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

796 { "ADDRESS" , 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

797 { "APPLET" , 
≠∂ë_©å
, 
HTML_APPLET_ATTRIBUTES
, 
SGML_MIXED
 },

798 { "AREA" , 
¨ó_©å
, 
HTML_AREA_ATTRIBUTES
, 
SGML_EMPTY
 },

799 { "B" , 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

800 { "BASE" , 
ba£_©å
, 
HTML_BASE_ATTRIBUTES
, 
SGML_EMPTY
 },

801 { "BASEFONT", 
f⁄t_©å
, 
HTML_FONT_ATTRIBUTES
, 
SGML_EMPTY
 },

802 { "BDO" , 
bdo_©å
, 
HTML_BDO_ATTRIBUTES
, 
SGML_EMPTY
 },

803 { "BIG" , 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

804 { "BLOCKQUOTE", 
bq_©å
, 
HTML_BQ_ATTRIBUTES
, 
SGML_MIXED
 },

805 { "BODY" , 
body_©å
, 
HTML_BODY_ATTRIBUTES
, 
SGML_MIXED
 },

806 { "BR" , 
br_©å
, 
HTML_BR_ATTRIBUTES
, 
SGML_EMPTY
 },

807 { "BUTTON" , 
buâ⁄_©å
, 
HTML_BUTTON_ATTRIBUTES
, 
SGML_MIXED
 },

808 { "CAPTION" , 
block_©å
, 
HTML_BLOCK_ATTRIBUTES
, 
SGML_MIXED
 },

809 { "CENTER" , 
no_©å
, 0, 
SGML_MIXED
 },

810 { "CITE" , 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

811 { "CODE" , 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

812 { "COL" , 
cﬁ_©å
, 
HTML_COL_ATTRIBUTES
, 
SGML_MIXED
 },

813 { "COLGROUP", 
cﬁ_©å
, 
HTML_COL_ATTRIBUTES
, 
SGML_MIXED
 },

814 { "DD" , 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_EMPTY
 },

815 { "DEL" , 
ch™ges_©å
, 
HTML_CHANGES_ATTRIBUTES
,
SGML_EMPTY
 },

816 { "DFN" , 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

817 { "DIR" , 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

818 { "DIV" , 
block_©å
, 
HTML_BLOCK_ATTRIBUTES
, 
SGML_MIXED
 },

819 { "DL" , 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

820 { "DT" , 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_EMPTY
 },

821 { "EM" , 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

822 { "FIELDSET", 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

823 { "FONT" , 
f⁄t_©å
, 
HTML_FONT_ATTRIBUTES
, 
SGML_MIXED
 },

824 { "FORM" , 
f‹m_©å
, 
HTML_FORM_ATTRIBUTES
, 
SGML_MIXED
 },

825 { "FRAME" , 
‰ame_©å
, 
HTML_FRAME_ATTRIBUTES
, 
SGML_EMPTY
 },

826 { "FRAMESET", 
‰ame£t_©å
,
HTML_FRAMESET_ATTRIBUTES
,
SGML_MIXED
 },

827 { "H1" , 
block_©å
, 
HTML_BLOCK_ATTRIBUTES
, 
SGML_MIXED
 },

828 { "H2" , 
block_©å
, 
HTML_BLOCK_ATTRIBUTES
, 
SGML_MIXED
 },

829 { "H3" , 
block_©å
, 
HTML_BLOCK_ATTRIBUTES
, 
SGML_MIXED
 },

830 { "H4" , 
block_©å
, 
HTML_BLOCK_ATTRIBUTES
, 
SGML_MIXED
 },

831 { "H5" , 
block_©å
, 
HTML_BLOCK_ATTRIBUTES
, 
SGML_MIXED
 },

832 { "H6" , 
block_©å
, 
HTML_BLOCK_ATTRIBUTES
, 
SGML_MIXED
 },

833 { "HEAD" , 
hód_©å
, 
HTML_HEAD_ATTRIBUTES
, 
SGML_MIXED
 },

834 { "HR" , 
hr_©å
, 
HTML_HR_ATTRIBUTES
, 
SGML_EMPTY
 },

835 { "HTML" , 
html_©å
, 
HTML_HTML_ATTRIBUTES
, 
SGML_MIXED
 },

836 { "I" , 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

837 { "IFRAME" , 
i‰ame_©å
, 
HTML_IFRAME_ATTRIBUTES
, 
SGML_MIXED
 },

838 { "IMG" , 
img_©å
, 
HTML_IMG_ATTRIBUTES
, 
SGML_EMPTY
 },

839 { "INPUT" , 
öput_©å
, 
HTML_INPUT_ATTRIBUTES
, 
SGML_EMPTY
 },

840 { "INS" , 
ch™ges_©å
, 
HTML_CHANGES_ATTRIBUTES
,
SGML_MIXED
 },

841 { "ISINDEX" , 
isödex_©å
, 
HTML_ISINDEX_ATTRIBUTES
,
SGML_EMPTY
 },

842 { "KBD" , 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

843 { "LABEL" , 
œbñ_©å
, 
HTML_LABEL_ATTRIBUTES
, 
SGML_MIXED
 },

844 { "LEGEND" , 
Àgíd_©å
, 
HTML_LEGEND_ATTRIBUTES
, 
SGML_MIXED
 },

845 { "LI" , 
li_©å
, 
HTML_LI_ATTRIBUTES
, 
SGML_EMPTY
 },

846 { "LINK" , 
lök_©å
, 
HTML_LINK_ATTRIBUTES
, 
SGML_EMPTY
 },

847 { "MAP" , 
m≠_©å
, 
HTML_MAP_ATTRIBUTES
, 
SGML_MIXED
 },

848 { "MENU" , 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

849 { "META" , 
mëa_©å
, 
HTML_META_ATTRIBUTES
, 
SGML_EMPTY
 },

850 { "NEXTID" , 
√xtid_©å
, 1, 
SGML_EMPTY
 },

851 { "NOFRAMES", 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

852 { "NOSCRIPT", 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

853 { "OBJECT" , 
obje˘_©å
, 
HTML_OBJECT_ATTRIBUTES
, 
SGML_MIXED
 },

854 { "OL" , 
ﬁ_©å
, 
HTML_OL_ATTRIBUTES
, 
SGML_MIXED
 },

855 { "OPTGROUP", 
›tgroup_©å
,
HTML_OPTGROUP_ATTRIBUTES
,
SGML_MIXED
 },

856 { "OPTION" , 
›ti⁄_©å
, 
HTML_OPTION_ATTRIBUTES
, 
SGML_EMPTY
 },

857 { "P" , 
block_©å
, 
HTML_BLOCK_ATTRIBUTES
, 
SGML_EMPTY
 },

858 { "PARAM" , 
∑øm_©å
, 
HTML_PARAM_ATTRIBUTES
, 
SGML_EMPTY
 },

859 { "PRE" , 
¥e_©å
, 
HTML_PRE_ATTRIBUTES
, 
SGML_MIXED
 },

860 { "Q" , 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

861 { "S" , 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

862 { "SAMP" , 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

863 { "SCRIPT" , 
s¸ùt_©å
, 
HTML_SCRIPT_ATTRIBUTES
, 
SGML_MIXED
 },

864 { "SELECT" , 
£À˘_©å
, 
HTML_SELECT_ATTRIBUTES
, 
SGML_MIXED
 },

865 { "SMALL" , 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

866 { "SPAN" , 
block_©å
, 
HTML_BLOCK_ATTRIBUTES
, 
SGML_MIXED
 },

867 { "STRIKE" , 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

868 { "STRONG" , 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

869 { "STYLE" , 
°yÀ_©å
, 
HTML_STYLE_ATTRIBUTES
, 
SGML_MIXED
 },

870 { "SUB" , 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

871 { "SUP" , 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

872 { "TABLE" , 
èbÀ_©å
, 
HTML_TABLE_ATTRIBUTES
, 
SGML_MIXED
 },

873 { "TBODY" , 
ãÀ_©å
, 
HTML_TELE_ATTRIBUTES
, 
SGML_MIXED
 },

874 { "TD" , 
td_©å
, 
HTML_TD_ATTRIBUTES
, 
SGML_EMPTY
 },

875 { "TEXTAREA", 
ãxèªa_©å
,
HTML_TEXTAREA_ATTRIBUTES
,
SGML_MIXED
},

876 { "TFOOT" , 
ãÀ_©å
, 
HTML_TELE_ATTRIBUTES
, 
SGML_MIXED
 },

877 { "TH" , 
td_©å
, 
HTML_TD_ATTRIBUTES
, 
SGML_EMPTY
 },

878 { "THEAD" , 
ãÀ_©å
, 
HTML_TELE_ATTRIBUTES
, 
SGML_MIXED
 },

879 { "TITLE" , 
tôÀ_©å
, 
HTML_TITLE_ATTRIBUTES
, 
SGML_MIXED
 },

880 { "TR" , 
ãÀ_©å
, 
HTML_TELE_ATTRIBUTES
, 
SGML_EMPTY
 },

881 { "TT" , 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

882 { "U" , 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

883 { "UL" , 
ul_©å
, 
HTML_UL_ATTRIBUTES
, 
SGML_MIXED
 },

884 { "VAR" , 
gí_©å
, 
HTML_GEN_ATTRIBUTES
, 
SGML_MIXED
 },

887 
PRIVATE
 
SGML_dtd
 
	gHTMLP_dtd
 = {

888 
ègs
,

889 
HTML_ELEMENTS
,

890 
ítôõs
,

891 (
ítôõs
)/(**)

894 
PRIVATE
 
SGML_dtd
 * 
	gDTD
 = &
HTMLP_dtd
;

896 
PUBLIC
 
SGML_dtd
 * 
	$HTML_dtd
 ()

898  
DTD
;

899 
	}
}

901 
PUBLIC
 
BOOL
 
	$HTML_£tDtd
 (c⁄° 
SGML_dtd
 * 
dtd
)

903 i‡(
dtd
) {

904 
DTD
 = (
SGML_dtd
 *Ë
dtd
;

905  
YES
;

907  
NO
;

908 
	}
}

917 
PUBLIC
 
	$HTSèπAnch‹
 (
HTSåu˘uªd
 * 
obj
,

918 c⁄° * 
«me
,

919 c⁄° * 
hªf
)

921 
BOOL
 
¥e£¡
[
HTML_A_ATTRIBUTES
];

922 c⁄° * 
vÆue
[
HTML_A_ATTRIBUTES
];

925 
i
;

926 
i
=0; i<
HTML_A_ATTRIBUTES
; i++)

927 
¥e£¡
[
i
] = 
NO
;

929 i‡(
«me
) {

930 
¥e£¡
[
HTML_A_NAME
] = 
YES
;

931 
vÆue
[
HTML_A_NAME
] = 
«me
;

933 i‡(
hªf
) {

934 
¥e£¡
[
HTML_A_HREF
] = 
YES
;

935 
vÆue
[
HTML_A_HREF
] = 
hªf
;

938 (*
obj
->
iß
->
°¨t_ñemít
)(obj, 
HTML_A
 , 
¥e£¡
, 
vÆue
);

940 
	}
}

947 
PUBLIC
 
	$HTMLPutImg
 (
HTSåu˘uªd
 * 
obj
,

948 c⁄° * 
§c
,

949 c⁄° * 
Æt
,

950 c⁄° * 
Æign
)

952 
BOOL
 
¥e£¡
[
HTML_IMG_ATTRIBUTES
];

953 c⁄° * 
vÆue
[
HTML_IMG_ATTRIBUTES
];

956 
i
;

957 
i
=0; i<
HTML_IMG_ATTRIBUTES
; i++)

958 
¥e£¡
[
i
] = 
NO
;

960 i‡(
§c
) {

961 
¥e£¡
[
HTML_IMG_SRC
] = 
YES
;

962 
vÆue
[
HTML_IMG_SRC
] = 
§c
;

964 i‡(
Æt
) {

965 
¥e£¡
[
HTML_IMG_ALT
] = 
YES
;

966 
vÆue
[
HTML_IMG_ALT
] = 
Æt
;

968 i‡(
Æign
) {

969 
¥e£¡
[
HTML_IMG_ALIGN
] = 
YES
;

970 
vÆue
[
HTML_IMG_ALIGN
] = 
Æign
;

972 (*
obj
->
iß
->
°¨t_ñemít
)(obj, 
HTML_IMG
 , 
¥e£¡
, 
vÆue
);

974 
	}
}

976 
PUBLIC
 
	$HTNextID
 (
HTSåu˘uªd
 * 
obj
,

977 c⁄° * 
√xt_⁄e
)

979 
BOOL
 
¥e£¡
[
HTML_NEXTID_ATTRIBUTES
];

980 c⁄° * 
vÆue
[
HTML_NEXTID_ATTRIBUTES
];

982 
i
;

983 
i
=0; i<
HTML_NEXTID_ATTRIBUTES
; i++)

984 
¥e£¡
[
i
] = 
NO
;

986 
¥e£¡
[
HTML_NEXTID_N
] = 
YES
;

987 
vÆue
[
HTML_NEXTID_N
] = 
√xt_⁄e
;

989 (*
obj
->
iß
->
°¨t_ñemít
)(obj, 
HTML_NEXTID
 , 
¥e£¡
, 
vÆue
);

991 
	}
}

	@Library/src/HTMLPDTD.h

29 #i‚de‡
HTMLDTD_H


30 
	#HTMLDTD_H


	)

32 
	~"HTSåu˘.h
"

33 
	~"SGML.h
"

44 
	#HTML_ENTITIES
 100

	)

56 
	e_HTMLEÀmít
 {

57 
	mHTML_A
 = 0,

58 
	mHTML_ABBR
,

59 
	mHTML_ACRONYM
,

60 
	mHTML_ADDRESS
,

61 
	mHTML_APPLET
,

62 
	mHTML_AREA
,

63 
	mHTML_B
,

64 
	mHTML_BASE
,

65 
	mHTML_BASEFONT
,

66 
	mHTML_BDO
,

67 
	mHTML_BIG
,

68 
	mHTML_BLOCKQUOTE
,

69 
	mHTML_BODY
,

70 
	mHTML_BR
,

71 
	mHTML_BUTTON
,

72 
	mHTML_CAPTION
,

73 
	mHTML_CENTER
,

74 
	mHTML_CITE
,

75 
	mHTML_CODE
,

76 
	mHTML_COL
,

77 
	mHTML_COLGROUP
,

78 
	mHTML_DD
,

79 
	mHTML_DEL
,

80 
	mHTML_DFN
,

81 
	mHTML_DIR
,

82 
	mHTML_DIV
,

83 
	mHTML_DL
,

84 
	mHTML_DT
,

85 
	mHTML_EM
,

86 
	mHTML_FIELDSET
,

87 
	mHTML_FONT
,

88 
	mHTML_FORM
,

89 
	mHTML_FRAME
,

90 
	mHTML_FRAMESET
,

91 
	mHTML_H1
,

92 
	mHTML_H2
,

93 
	mHTML_H3
,

94 
	mHTML_H4
,

95 
	mHTML_H5
,

96 
	mHTML_H6
,

97 
	mHTML_HEAD
,

98 
	mHTML_HR
,

99 
	mHTML_HTML
,

100 
	mHTML_I
,

101 
	mHTML_IFRAME
,

102 
	mHTML_IMG
,

103 
	mHTML_INPUT
,

104 
	mHTML_INS
,

105 
	mHTML_ISINDEX
,

106 
	mHTML_KBD
,

107 
	mHTML_LABEL
,

108 
	mHTML_LEGEND
,

109 
	mHTML_LI
,

110 
	mHTML_LINK
,

111 
	mHTML_MAP
,

112 
	mHTML_MENU
,

113 
	mHTML_META
,

114 
	mHTML_NEXTID
,

115 
	mHTML_NOFRAMES
,

116 
	mHTML_NOSCRIPT
,

117 
	mHTML_OBJECT
,

118 
	mHTML_OL
,

119 
	mHTML_OPTGROUP
,

120 
	mHTML_OPTION
,

121 
	mHTML_P
,

122 
	mHTML_PARAM
,

123 
	mHTML_PRE
,

124 
	mHTML_Q
,

125 
	mHTML_S
,

126 
	mHTML_SAMP
,

127 
	mHTML_SCRIPT
,

128 
	mHTML_SELECT
,

129 
	mHTML_SMALL
,

130 
	mHTML_SPAN
,

131 
	mHTML_STRIKE
,

132 
	mHTML_STRONG
,

133 
	mHTML_STYLE
,

134 
	mHTML_SUB
,

135 
	mHTML_SUP
,

136 
	mHTML_TABLE
,

137 
	mHTML_TBODY
,

138 
	mHTML_TD
,

139 
	mHTML_TEXTAREA
,

140 
	mHTML_TFOOT
,

141 
	mHTML_TH
,

142 
	mHTML_THEAD
,

143 
	mHTML_TITLE
,

144 
	mHTML_TR
,

145 
	mHTML_TT
,

146 
	mHTML_U
,

147 
	mHTML_UL
,

148 
	mHTML_VAR
,

149 
	mHTML_ELEMENTS


150 } 
	tHTMLEÀmít
;

166 
	#HTML_ATTR
(
t
,
a
Ë
HTML_
##t##
_
##
	)
a

167 
	#HTML_ATTRIBUTES
(
t
Ë
HTML_
##t##
_ATTRIBUTES


	)

175 
	e_HTML_A_Aâribuãs
 {

176 
HTML_ATTR
(
A
,
ACCESSKEY
) = 0,

177 
HTML_ATTR
(
A
,
CHARSET
),

178 
HTML_ATTR
(
A
,
CLASS
),

179 
HTML_ATTR
(
A
,
COORDS
),

180 
HTML_ATTR
(
A
,
DIR
),

181 
HTML_ATTR
(
A
,
HREF
),

182 
HTML_ATTR
(
A
,
HREFLANG
),

183 
HTML_ATTR
(
A
,
ID
),

184 
HTML_ATTR
(
A
,
NAME
),

185 
HTML_ATTR
(
A
,
REL
),

186 
HTML_ATTR
(
A
,
REV
),

187 
HTML_ATTR
(
A
,
SHAPE
),

188 
HTML_ATTR
(
A
,
STYLE
),

189 
HTML_ATTR
(
A
,
TABINDEX
),

190 
HTML_ATTR
(
A
,
TARGET
),

191 
HTML_ATTR
(
A
,
TYPE
),

192 
HTML_ATTR
(
A
,
TITLE
),

193 
HTML_ATTRIBUTES
(
A
)

202 
	e_HTML_APPLET_Aâribuãs
 {

203 
HTML_ATTR
(
APPLET
,
ALIGN
) = 0,

204 
HTML_ATTR
(
APPLET
,
ALT
),

205 
HTML_ATTR
(
APPLET
,
ARCHIVE
),

206 
HTML_ATTR
(
APPLET
,
CLASS
),

207 
HTML_ATTR
(
APPLET
,
CODE
),

208 
HTML_ATTR
(
APPLET
,
CODEBASE
),

209 
HTML_ATTR
(
APPLET
,
HEIGHT
),

210 
HTML_ATTR
(
APPLET
,
HSPACE
),

211 
HTML_ATTR
(
APPLET
,
ID
),

212 
HTML_ATTR
(
APPLET
,
NAME
),

213 
HTML_ATTR
(
APPLET
,
OBJECT
),

214 
HTML_ATTR
(
APPLET
,
STYLE
),

215 
HTML_ATTR
(
APPLET
,
TITLE
),

216 
HTML_ATTR
(
APPLET
,
VSPACE
),

217 
HTML_ATTR
(
APPLET
,
WIDTH
),

218 
HTML_ATTRIBUTES
(
APPLET
)

227 
	e_HTML_AREA_Aâribuãs
 {

228 
HTML_ATTR
(
AREA
,
ACCESSKEY
) = 0,

229 
HTML_ATTR
(
AREA
,
ALT
),

230 
HTML_ATTR
(
AREA
,
CLASS
),

231 
HTML_ATTR
(
AREA
,
COORDS
),

232 
HTML_ATTR
(
AREA
,
DIR
),

233 
HTML_ATTR
(
AREA
,
HREF
),

234 
HTML_ATTR
(
AREA
,
ID
),

235 
HTML_ATTR
(
AREA
,
NAME
),

236 
HTML_ATTR
(
AREA
,
NOHREF
),

237 
HTML_ATTR
(
AREA
,
LANG
),

238 
HTML_ATTR
(
AREA
,
SHAPE
),

239 
HTML_ATTR
(
AREA
,
STYLE
),

240 
HTML_ATTR
(
AREA
,
TABINDEX
),

241 
HTML_ATTR
(
AREA
,
TARGET
),

242 
HTML_ATTR
(
AREA
,
TITLE
),

243 
HTML_ATTRIBUTES
(
AREA
)

253 
	e_HTML_BASE_Aâribuãs
 {

254 
HTML_ATTR
(
BASE
,
HREF
) = 0,

255 
HTML_ATTR
(
BASE
,
TARGET
),

256 
HTML_ATTRIBUTES
(
BASE
)

265 
	e_HTML_BDO_Aâribuãs
 {

266 
HTML_ATTR
(
BDO
,
CLASS
) = 0,

267 
HTML_ATTR
(
BDO
,
DIR
),

268 
HTML_ATTR
(
BDO
,
ID
),

269 
HTML_ATTR
(
BDO
,
LANG
),

270 
HTML_ATTR
(
BDO
,
STYLE
),

271 
HTML_ATTR
(
BDO
,
TITLE
),

272 
HTML_ATTRIBUTES
(
BDO
)

281 
	e_HTML_BQ_Aâribuãs
 {

282 
HTML_ATTR
(
BQ
,
CITE
) = 0,

283 
HTML_ATTR
(
BQ
,
CLASS
),

284 
HTML_ATTR
(
BQ
,
DIR
),

285 
HTML_ATTR
(
BQ
,
ID
),

286 
HTML_ATTR
(
BQ
,
LANG
),

287 
HTML_ATTR
(
BQ
,
STYLE
),

288 
HTML_ATTR
(
BQ
,
TITLE
),

289 
HTML_ATTRIBUTES
(
BQ
)

298 
	e_HTML_BODY_Aâribuãs
 {

299 
HTML_ATTR
(
BODY
,
ALINK
) = 0,

300 
HTML_ATTR
(
BODY
,
BACKGROUND
),

301 
HTML_ATTR
(
BODY
,
BGCOLOR
),

302 
HTML_ATTR
(
BODY
,
CLASS
),

303 
HTML_ATTR
(
BODY
,
DIR
),

304 
HTML_ATTR
(
BODY
,
ID
),

305 
HTML_ATTR
(
BODY
,
LANG
),

306 
HTML_ATTR
(
BODY
,
LINK
),

307 
HTML_ATTR
(
BODY
,
STYLE
),

308 
HTML_ATTR
(
BODY
,
TEXT
),

309 
HTML_ATTR
(
BODY
,
TITLE
),

310 
HTML_ATTR
(
BODY
,
VLINK
),

311 
HTML_ATTRIBUTES
(
BODY
)

320 
	e_HTML_BR_Aâribuãs
 {

321 
HTML_ATTR
(
BR
,
CLASS
) = 0,

322 
HTML_ATTR
(
BR
,
CLEAR
),

323 
HTML_ATTR
(
BR
,
ID
),

324 
HTML_ATTR
(
BR
,
STYLE
),

325 
HTML_ATTR
(
BR
,
TITLE
),

326 
HTML_ATTRIBUTES
(
BR
)

335 
	e_HTML_BUTTON_Aâribuãs
 {

336 
HTML_ATTR
(
BUTTON
,
ACCESSKEY
) = 0,

337 
HTML_ATTR
(
BUTTON
,
CLASS
),

338 
HTML_ATTR
(
BUTTON
,
DIR
),

339 
HTML_ATTR
(
BUTTON
,
DISABLED
),

340 
HTML_ATTR
(
BUTTON
,
ID
),

341 
HTML_ATTR
(
BUTTON
,
LANG
),

342 
HTML_ATTR
(
BUTTON
,
NAME
),

343 
HTML_ATTR
(
BUTTON
,
STYLE
),

344 
HTML_ATTR
(
BUTTON
,
TABINDEX
),

345 
HTML_ATTR
(
BUTTON
,
TITLE
),

346 
HTML_ATTR
(
BUTTON
,
TYPE
),

347 
HTML_ATTR
(
BUTTON
,
VALUE
),

348 
HTML_ATTRIBUTES
(
BUTTON
)

357 
	e_HTML_COL_Aâribuãs
 {

358 
HTML_ATTR
(
COL
,
CLASS
) = 0,

359 
HTML_ATTR
(
COL
,
DIR
),

360 
HTML_ATTR
(
COL
,
ID
),

361 
HTML_ATTR
(
COL
,
LANG
),

362 
HTML_ATTR
(
COL
,
SPAN
),

363 
HTML_ATTR
(
COL
,
STYLE
),

364 
HTML_ATTR
(
COL
,
TITLE
),

365 
HTML_ATTR
(
COL
,
WIDTH
),

366 
HTML_ATTRIBUTES
(
COL
)

375 
	e_HTML_CHANGES_Aâribuãs
 {

376 
HTML_ATTR
(
CHANGES
,
CITE
) = 0,

377 
HTML_ATTR
(
CHANGES
,
CLASS
),

378 
HTML_ATTR
(
CHANGES
,
DATETIME
),

379 
HTML_ATTR
(
CHANGES
,
DIR
),

380 
HTML_ATTR
(
CHANGES
,
ID
),

381 
HTML_ATTR
(
CHANGES
,
LANG
),

382 
HTML_ATTR
(
CHANGES
,
STYLE
),

383 
HTML_ATTR
(
CHANGES
,
TITLE
),

384 
HTML_ATTRIBUTES
(
CHANGES
)

393 
	e_HTML_FONT_Aâribuãs
 {

394 
HTML_ATTR
(
FONT
,
CLASS
) = 0,

395 
HTML_ATTR
(
FONT
,
COLOR
),

396 
HTML_ATTR
(
FONT
,
DIR
),

397 
HTML_ATTR
(
FONT
,
FACE
),

398 
HTML_ATTR
(
FONT
,
ID
),

399 
HTML_ATTR
(
FONT
,
LANG
),

400 
HTML_ATTR
(
FONT
,
SIZE
),

401 
HTML_ATTR
(
FONT
,
STYLE
),

402 
HTML_ATTR
(
FONT
,
TITLE
),

403 
HTML_ATTRIBUTES
(
FONT
)

412 
	e_HTML_FORM_Aâribuãs
 {

413 
HTML_ATTR
(
FORM
,
ACCEPT
) = 0,

414 
HTML_ATTR
(
FORM
,
ACCEPT_CHARSET
),

415 
HTML_ATTR
(
FORM
,
ACTION
),

416 
HTML_ATTR
(
FORM
,
CLASS
),

417 
HTML_ATTR
(
FORM
,
DIR
),

418 
HTML_ATTR
(
FORM
,
ENCTYPE
),

419 
HTML_ATTR
(
FORM
,
ID
),

420 
HTML_ATTR
(
FORM
,
LANG
),

421 
HTML_ATTR
(
FORM
,
METHOD
),

422 
HTML_ATTR
(
FORM
,
STYLE
),

423 
HTML_ATTR
(
FORM
,
TARGET
),

424 
HTML_ATTR
(
FORM
,
TITLE
),

425 
HTML_ATTRIBUTES
(
FORM
)

434 
	e_HTML_FRAME_Aâribuãs
 {

435 
HTML_ATTR
(
FRAME
,
CLASS
) = 0,

436 
HTML_ATTR
(
FRAME
,
FRAMEBORDER
),

437 
HTML_ATTR
(
FRAME
,
ID
),

438 
HTML_ATTR
(
FRAME
,
NAME
),

439 
HTML_ATTR
(
FRAME
,
MARGINHEIGHT
),

440 
HTML_ATTR
(
FRAME
,
MARGINWIDTH
),

441 
HTML_ATTR
(
FRAME
,
NORESIZE
),

442 
HTML_ATTR
(
FRAME
,
LONGDESC
),

443 
HTML_ATTR
(
FRAME
,
SCROLLING
),

444 
HTML_ATTR
(
FRAME
,
SRC
),

445 
HTML_ATTR
(
FRAME
,
STYLE
),

446 
HTML_ATTR
(
FRAME
,
TARGET
),

447 
HTML_ATTR
(
FRAME
,
TITLE
),

448 
HTML_ATTRIBUTES
(
FRAME
)

457 
	e_HTML_FRAMESET_Aâribuãs
 {

458 
HTML_ATTR
(
FRAMESET
,
CLASS
) = 0,

459 
HTML_ATTR
(
FRAMESET
,
COLS
),

460 
HTML_ATTR
(
FRAMESET
,
ID
),

461 
HTML_ATTR
(
FRAMESET
,
ROWS
),

462 
HTML_ATTR
(
FRAMESET
,
STYLE
),

463 
HTML_ATTR
(
FRAMESET
,
TITLE
),

464 
HTML_ATTRIBUTES
(
FRAMESET
)

473 
	e_HTML_GEN_Aâribuãs
 {

474 
HTML_ATTR
(
GEN
,
CLASS
) = 0,

475 
HTML_ATTR
(
GEN
,
DIR
),

476 
HTML_ATTR
(
GEN
,
ID
),

477 
HTML_ATTR
(
GEN
,
LANG
),

478 
HTML_ATTR
(
GEN
,
STYLE
),

479 
HTML_ATTR
(
GEN
,
TITLE
),

480 
HTML_ATTRIBUTES
(
GEN
)

489 
	e_HTML_BLOCK_Aâribuãs
 {

490 
HTML_ATTR
(
BLOCK
,
ALIGN
) = 0,

491 
HTML_ATTR
(
BLOCK
,
CLASS
),

492 
HTML_ATTR
(
BLOCK
,
DIR
),

493 
HTML_ATTR
(
BLOCK
,
ID
),

494 
HTML_ATTR
(
BLOCK
,
LANG
),

495 
HTML_ATTR
(
BLOCK
,
STYLE
),

496 
HTML_ATTR
(
BLOCK
,
TITLE
),

497 
HTML_ATTRIBUTES
(
BLOCK
)

506 
	e_HTML_HEAD_Aâribuãs
 {

507 
HTML_ATTR
(
HEAD
,
DIR
) = 0,

508 
HTML_ATTR
(
HEAD
,
LANG
),

509 
HTML_ATTR
(
HEAD
,
PROFILE
),

510 
HTML_ATTRIBUTES
(
HEAD
)

519 
	e_HTML_HR_Aâribuãs
 {

520 
HTML_ATTR
(
HR
,
ALIGN
) = 0,

521 
HTML_ATTR
(
HR
,
CLASS
),

522 
HTML_ATTR
(
HR
,
DIR
),

523 
HTML_ATTR
(
HR
,
ID
),

524 
HTML_ATTR
(
HR
,
LANG
),

525 
HTML_ATTR
(
HR
,
NOSHADE
),

526 
HTML_ATTR
(
HR
,
SIZE
),

527 
HTML_ATTR
(
HR
,
STYLE
),

528 
HTML_ATTR
(
HR
,
TITLE
),

529 
HTML_ATTR
(
HR
,
WIDTH
),

530 
HTML_ATTRIBUTES
(
HR
)

539 
	e_HTML_HTML_Aâribuãs
 {

540 
HTML_ATTR
(
HTML
,
DIR
) = 0,

541 
HTML_ATTR
(
HTML
,
LANG
),

542 
HTML_ATTR
(
HTML
,
VERSION
),

543 
HTML_ATTRIBUTES
(
HTML
)

552 
	e_HTML_IFRAME_Aâribuãs
 {

553 
HTML_ATTR
(
IFRAME
,
ALIGN
) = 0,

554 
HTML_ATTR
(
IFRAME
,
CLASS
),

555 
HTML_ATTR
(
IFRAME
,
FRAMEBORDER
),

556 
HTML_ATTR
(
IFRAME
,
HEIGHT
),

557 
HTML_ATTR
(
IFRAME
,
ID
),

558 
HTML_ATTR
(
IFRAME
,
LONGDESC
),

559 
HTML_ATTR
(
IFRAME
,
MARGINHEIGHT
),

560 
HTML_ATTR
(
IFRAME
,
MARGINWIDTH
),

561 
HTML_ATTR
(
IFRAME
,
NAME
),

562 
HTML_ATTR
(
IFRAME
,
SCROLLING
),

563 
HTML_ATTR
(
IFRAME
,
SRC
),

564 
HTML_ATTR
(
IFRAME
,
STYLE
),

565 
HTML_ATTR
(
IFRAME
,
TARGET
),

566 
HTML_ATTR
(
IFRAME
,
TITLE
),

567 
HTML_ATTR
(
IFRAME
,
WIDTH
),

568 
HTML_ATTRIBUTES
(
IFRAME
)

577 
	e_HTML_IMG_Aâribuãs
 {

578 
HTML_ATTR
(
IMG
,
ALIGN
) = 0,

579 
HTML_ATTR
(
IMG
,
ALT
),

580 
HTML_ATTR
(
IMG
,
BORDER
),

581 
HTML_ATTR
(
IMG
,
CLASS
),

582 
HTML_ATTR
(
IMG
,
DIR
),

583 
HTML_ATTR
(
IMG
,
HEIGHT
),

584 
HTML_ATTR
(
IMG
,
HSPACE
),

585 
HTML_ATTR
(
IMG
,
ID
),

586 
HTML_ATTR
(
IMG
,
ISMAP
),

587 
HTML_ATTR
(
IMG
,
LANG
),

588 
HTML_ATTR
(
IMG
,
LONGDESC
),

589 
HTML_ATTR
(
IMG
,
SRC
),

590 
HTML_ATTR
(
IMG
,
STYLE
),

591 
HTML_ATTR
(
IMG
,
TITLE
),

592 
HTML_ATTR
(
IMG
,
USEMAP
),

593 
HTML_ATTR
(
IMG
,
VSPACE
),

594 
HTML_ATTR
(
IMG
,
WIDTH
),

595 
HTML_ATTRIBUTES
(
IMG
)

604 
	e_HTML_INPUT_Aâribuãs
 {

605 
HTML_ATTR
(
INPUT
,
ACCEPT
) = 0,

606 
HTML_ATTR
(
INPUT
,
ACCESSKEY
),

607 
HTML_ATTR
(
INPUT
,
ALIGN
),

608 
HTML_ATTR
(
INPUT
,
ALT
),

609 
HTML_ATTR
(
INPUT
,
CHECKED
),

610 
HTML_ATTR
(
INPUT
,
CLASS
),

611 
HTML_ATTR
(
INPUT
,
DIR
),

612 
HTML_ATTR
(
INPUT
,
DISABLED
),

613 
HTML_ATTR
(
INPUT
,
ID
),

614 
HTML_ATTR
(
INPUT
,
LANG
),

615 
HTML_ATTR
(
INPUT
,
MAXLENGTH
),

616 
HTML_ATTR
(
INPUT
,
NAME
),

617 
HTML_ATTR
(
INPUT
,
READONLY
),

618 
HTML_ATTR
(
INPUT
,
SIZE
),

619 
HTML_ATTR
(
INPUT
,
SRC
),

620 
HTML_ATTR
(
INPUT
,
STYLE
),

621 
HTML_ATTR
(
INPUT
,
TABINDEX
),

622 
HTML_ATTR
(
INPUT
,
TITLE
),

623 
HTML_ATTR
(
INPUT
,
TYPE
),

624 
HTML_ATTR
(
INPUT
,
USEMAP
),

625 
HTML_ATTR
(
INPUT
,
VALUE
),

626 
HTML_ATTRIBUTES
(
INPUT
)

634 
	e_HTML_ISINDEX_Aâribuãs
 {

635 
HTML_ATTR
(
ISINDEX
,
CLASS
) = 0,

636 
HTML_ATTR
(
ISINDEX
,
DIR
),

637 
HTML_ATTR
(
ISINDEX
,
ID
),

638 
HTML_ATTR
(
ISINDEX
,
LANG
),

639 
HTML_ATTR
(
ISINDEX
,
PROMPT
),

640 
HTML_ATTR
(
ISINDEX
,
STYLE
),

641 
HTML_ATTR
(
ISINDEX
,
TITLE
),

642 
HTML_ATTRIBUTES
(
ISINDEX
)

650 
	e_HTML_LABEL_Aâribuãs
 {

651 
HTML_ATTR
(
LABEL
,
ACCESSKEY
) = 0,

652 
HTML_ATTR
(
LABEL
,
CLASS
),

653 
HTML_ATTR
(
LABEL
,
DIR
),

654 
HTML_ATTR
(
LABEL
,
FOR
),

655 
HTML_ATTR
(
LABEL
,
ID
),

656 
HTML_ATTR
(
LABEL
,
LANG
),

657 
HTML_ATTR
(
LABEL
,
STYLE
),

658 
HTML_ATTR
(
LABEL
,
TITLE
),

659 
HTML_ATTRIBUTES
(
LABEL
)

667 
	e_HTML_LEGEND_Aâribuãs
 {

668 
HTML_ATTR
(
LEGEND
,
ACCESSKEY
) = 0,

669 
HTML_ATTR
(
LEGEND
,
ALIGN
),

670 
HTML_ATTR
(
LEGEND
,
CLASS
),

671 
HTML_ATTR
(
LEGEND
,
DIR
),

672 
HTML_ATTR
(
LEGEND
,
ID
),

673 
HTML_ATTR
(
LEGEND
,
LANG
),

674 
HTML_ATTR
(
LEGEND
,
STYLE
),

675 
HTML_ATTR
(
LEGEND
,
TITLE
),

676 
HTML_ATTRIBUTES
(
LEGEND
)

685 
	e_HTML_LI_Aâribuãs
 {

686 
HTML_ATTR
(
LI
,
CLASS
) = 0,

687 
HTML_ATTR
(
LI
,
COMPACT
),

688 
HTML_ATTR
(
LI
,
DIR
),

689 
HTML_ATTR
(
LI
,
ID
),

690 
HTML_ATTR
(
LI
,
LANG
),

691 
HTML_ATTR
(
LI
,
STYLE
),

692 
HTML_ATTR
(
LI
,
TITLE
),

693 
HTML_ATTR
(
LI
,
TYPE
),

694 
HTML_ATTR
(
LI
,
VALUE
),

695 
HTML_ATTRIBUTES
(
LI
)

704 
	e_HTML_LINK_Aâribuãs
 {

705 
HTML_ATTR
(
LINK
,
CHARSET
) = 0,

706 
HTML_ATTR
(
LINK
,
CLASS
),

707 
HTML_ATTR
(
LINK
,
DIR
),

708 
HTML_ATTR
(
LINK
,
HREF
),

709 
HTML_ATTR
(
LINK
,
HREFLANG
),

710 
HTML_ATTR
(
LINK
,
ID
),

711 
HTML_ATTR
(
LINK
,
LANG
),

712 
HTML_ATTR
(
LINK
,
MEDIA
),

713 
HTML_ATTR
(
LINK
,
REL
),

714 
HTML_ATTR
(
LINK
,
REV
),

715 
HTML_ATTR
(
LINK
,
STYLE
),

716 
HTML_ATTR
(
LINK
,
TARGET
),

717 
HTML_ATTR
(
LINK
,
TITLE
),

718 
HTML_ATTR
(
LINK
,
TYPE
),

719 
HTML_ATTRIBUTES
(
LINK
)

728 
	e_HTML_MAP_Aâribuãs
 {

729 
HTML_ATTR
(
MAP
,
CLASS
) = 0,

730 
HTML_ATTR
(
MAP
,
DIR
),

731 
HTML_ATTR
(
MAP
,
ID
),

732 
HTML_ATTR
(
MAP
,
LANG
),

733 
HTML_ATTR
(
MAP
,
NAME
),

734 
HTML_ATTR
(
MAP
,
STYLE
),

735 
HTML_ATTR
(
MAP
,
TITLE
),

736 
HTML_ATTRIBUTES
(
MAP
)

745 
	e_HTML_META_Aâribuãs
 {

746 
HTML_ATTR
(
META
,
CONTENT
) = 0,

747 
HTML_ATTR
(
META
,
DIR
),

748 
HTML_ATTR
(
META
,
HTTP_EQUIV
),

749 
HTML_ATTR
(
META
,
LANG
),

750 
HTML_ATTR
(
META
,
NAME
),

751 
HTML_ATTR
(
META
,
SCHEME
),

752 
HTML_ATTRIBUTES
(
META
)

761 
	#HTML_NEXTID_ATTRIBUTES
 1

	)

762 
	#HTML_NEXTID_N
 0

	)

770 
	e_HTML_OBJECT_Aâribuãs
 {

771 
HTML_ATTR
(
OBJECT
,
ALIGN
) = 0,

772 
HTML_ATTR
(
OBJECT
,
ARCHIVE
),

773 
HTML_ATTR
(
OBJECT
,
BORDER
),

774 
HTML_ATTR
(
OBJECT
,
CLASS
),

775 
HTML_ATTR
(
OBJECT
,
CLASSID
),

776 
HTML_ATTR
(
OBJECT
,
CODEBASE
),

777 
HTML_ATTR
(
OBJECT
,
CODETYPE
),

778 
HTML_ATTR
(
OBJECT
,
DATA
),

779 
HTML_ATTR
(
OBJECT
,
DECLARE
),

780 
HTML_ATTR
(
OBJECT
,
DIR
),

781 
HTML_ATTR
(
OBJECT
,
HEIGHT
),

782 
HTML_ATTR
(
OBJECT
,
HSPACE
),

783 
HTML_ATTR
(
OBJECT
,
ID
),

784 
HTML_ATTR
(
OBJECT
,
LANG
),

785 
HTML_ATTR
(
OBJECT
,
NAME
),

786 
HTML_ATTR
(
OBJECT
,
STANDBY
),

787 
HTML_ATTR
(
OBJECT
,
STYLE
),

788 
HTML_ATTR
(
OBJECT
,
TABINDEX
),

789 
HTML_ATTR
(
OBJECT
,
TITLE
),

790 
HTML_ATTR
(
OBJECT
,
TYPE
),

791 
HTML_ATTR
(
OBJECT
,
USEMAP
),

792 
HTML_ATTR
(
OBJECT
,
VSPACE
),

793 
HTML_ATTR
(
OBJECT
,
WIDTH
),

794 
HTML_ATTRIBUTES
(
OBJECT
)

803 
	e_HTML_OL_Aâribuãs
 {

804 
HTML_ATTR
(
OL
,
CLASS
) = 0,

805 
HTML_ATTR
(
OL
,
COMPACT
),

806 
HTML_ATTR
(
OL
,
DIR
),

807 
HTML_ATTR
(
OL
,
ID
),

808 
HTML_ATTR
(
OL
,
LANG
),

809 
HTML_ATTR
(
OL
,
START
),

810 
HTML_ATTR
(
OL
,
STYLE
),

811 
HTML_ATTR
(
OL
,
TITLE
),

812 
HTML_ATTR
(
OL
,
TYPE
),

813 
HTML_ATTRIBUTES
(
OL
)

822 
	e_HTML_OPTGROUP_Aâribuãs
 {

823 
HTML_ATTR
(
OPTGROUP
,
CLASS
) = 0,

824 
HTML_ATTR
(
OPTGROUP
,
DISABLED
),

825 
HTML_ATTR
(
OPTGROUP
,
DIR
),

826 
HTML_ATTR
(
OPTGROUP
,
ID
),

827 
HTML_ATTR
(
OPTGROUP
,
LABEL
),

828 
HTML_ATTR
(
OPTGROUP
,
LANG
),

829 
HTML_ATTR
(
OPTGROUP
,
STYLE
),

830 
HTML_ATTR
(
OPTGROUP
,
TITLE
),

831 
HTML_ATTRIBUTES
(
OPTGROUP
)

840 
	e_HTML_OPTION_Aâribuãs
 {

841 
HTML_ATTR
(
OPTION
,
CLASS
) = 0,

842 
HTML_ATTR
(
OPTION
,
DISABLED
),

843 
HTML_ATTR
(
OPTION
,
DIR
),

844 
HTML_ATTR
(
OPTION
,
ID
),

845 
HTML_ATTR
(
OPTION
,
LABEL
),

846 
HTML_ATTR
(
OPTION
,
LANG
),

847 
HTML_ATTR
(
OPTION
,
SELECTED
),

848 
HTML_ATTR
(
OPTION
,
STYLE
),

849 
HTML_ATTR
(
OPTION
,
TITLE
),

850 
HTML_ATTR
(
OPTION
,
VALUE
),

851 
HTML_ATTRIBUTES
(
OPTION
)

860 
	e_HTML_PARAM_Aâribuãs
 {

861 
HTML_ATTR
(
PARAM
,
ID
) = 0,

862 
HTML_ATTR
(
PARAM
,
NAME
),

863 
HTML_ATTR
(
PARAM
,
TYPE
),

864 
HTML_ATTR
(
PARAM
,
VALUE
),

865 
HTML_ATTR
(
PARAM
,
VALUETYPE
),

866 
HTML_ATTRIBUTES
(
PARAM
)

875 
	e_HTML_PRE_Aâribuãs
 {

876 
HTML_ATTR
(
PRE
,
CLASS
) = 0,

877 
HTML_ATTR
(
PRE
,
DIR
),

878 
HTML_ATTR
(
PRE
,
ID
),

879 
HTML_ATTR
(
PRE
,
LANG
),

880 
HTML_ATTR
(
PRE
,
STYLE
),

881 
HTML_ATTR
(
PRE
,
TITLE
),

882 
HTML_ATTR
(
PRE
,
WIDTH
),

883 
HTML_ATTRIBUTES
(
PRE
)

892 
	e_HTML_SCRIPT_Aâribuãs
 {

893 
HTML_ATTR
(
SCRIPT
,
CHARSET
) = 0,

894 
HTML_ATTR
(
SCRIPT
,
DEFER
),

895 
HTML_ATTR
(
SCRIPT
,
LANGUAGE
),

896 
HTML_ATTR
(
SCRIPT
,
SRC
),

897 
HTML_ATTR
(
SCRIPT
,
TYPE
),

898 
HTML_ATTRIBUTES
(
SCRIPT
)

907 
	e_HTML_SELECT_Aâribuãs
 {

908 
HTML_ATTR
(
SELECT
,
CLASS
) = 0,

909 
HTML_ATTR
(
SELECT
,
DIR
),

910 
HTML_ATTR
(
SELECT
,
DISABLED
),

911 
HTML_ATTR
(
SELECT
,
ID
),

912 
HTML_ATTR
(
SELECT
,
LANG
),

913 
HTML_ATTR
(
SELECT
,
MULTIPLE
),

914 
HTML_ATTR
(
SELECT
,
NAME
),

915 
HTML_ATTR
(
SELECT
,
SIZE
),

916 
HTML_ATTR
(
SELECT
,
STYLE
),

917 
HTML_ATTR
(
SELECT
,
TABINDEX
),

918 
HTML_ATTR
(
SELECT
,
TITLE
),

919 
HTML_ATTRIBUTES
(
SELECT
)

928 
	e_HTML_STYLE_Aâribuãs
 {

929 
HTML_ATTR
(
STYLE
,
DIR
) = 0,

930 
HTML_ATTR
(
STYLE
,
LANG
),

931 
HTML_ATTR
(
STYLE
,
MEDIA
),

932 
HTML_ATTR
(
STYLE
,
TITLE
),

933 
HTML_ATTR
(
STYLE
,
TYPE
),

934 
HTML_ATTRIBUTES
(
STYLE
)

943 
	e_HTML_TABLE_Aâribuãs
 {

944 
HTML_ATTR
(
TABLE
,
ALIGN
) = 0,

945 
HTML_ATTR
(
TABLE
,
BGCOLOR
),

946 
HTML_ATTR
(
TABLE
,
BORDER
),

947 
HTML_ATTR
(
TABLE
,
CELLPADDING
),

948 
HTML_ATTR
(
TABLE
,
CELLSPACING
),

949 
HTML_ATTR
(
TABLE
,
CLASS
),

950 
HTML_ATTR
(
TABLE
,
DIR
),

951 
HTML_ATTR
(
TABLE
,
FRAME
),

952 
HTML_ATTR
(
TABLE
,
ID
),

953 
HTML_ATTR
(
TABLE
,
LANG
),

954 
HTML_ATTR
(
TABLE
,
RULES
),

955 
HTML_ATTR
(
TABLE
,
SUMMARY
),

956 
HTML_ATTR
(
TABLE
,
STYLE
),

957 
HTML_ATTR
(
TABLE
,
TITLE
),

958 
HTML_ATTR
(
TABLE
,
WIDTH
),

959 
HTML_ATTRIBUTES
(
TABLE
)

968 
	e_HTML_TELE_Aâribuãs
 {

969 
HTML_ATTR
(
TELE
,
ALIGN
) = 0,

970 
HTML_ATTR
(
TELE
,
CHAR
),

971 
HTML_ATTR
(
TELE
,
CHAROFF
),

972 
HTML_ATTR
(
TELE
,
CLASS
),

973 
HTML_ATTR
(
TELE
,
DIR
),

974 
HTML_ATTR
(
TELE
,
ID
),

975 
HTML_ATTR
(
TELE
,
LANG
),

976 
HTML_ATTR
(
TELE
,
STYLE
),

977 
HTML_ATTR
(
TELE
,
TITLE
),

978 
HTML_ATTR
(
TELE
,
VALIGN
),

979 
HTML_ATTRIBUTES
(
TELE
)

988 
	e_HTML_TD_Aâribuãs
 {

989 
HTML_ATTR
(
TD
,
ABBR
) = 0,

990 
HTML_ATTR
(
TD
,
ALIGN
),

991 
HTML_ATTR
(
TD
,
AXIS
),

992 
HTML_ATTR
(
TD
,
BGCOLOR
),

993 
HTML_ATTR
(
TD
,
CHAR
),

994 
HTML_ATTR
(
TD
,
CHAROFF
),

995 
HTML_ATTR
(
TD
,
CLASS
),

996 
HTML_ATTR
(
TD
,
COLSPAN
),

997 
HTML_ATTR
(
TD
,
DIR
),

998 
HTML_ATTR
(
TD
,
ID
),

999 
HTML_ATTR
(
TD
,
HEADERS
),

1000 
HTML_ATTR
(
TD
,
HEIGHT
),

1001 
HTML_ATTR
(
TD
,
LANG
),

1002 
HTML_ATTR
(
TD
,
NOWRAP
),

1003 
HTML_ATTR
(
TD
,
ROWSPAN
),

1004 
HTML_ATTR
(
TD
,
SCOPE
),

1005 
HTML_ATTR
(
TD
,
STYLE
),

1006 
HTML_ATTR
(
TD
,
TITLE
),

1007 
HTML_ATTR
(
TD
,
VALIGN
),

1008 
HTML_ATTR
(
TD
,
WIDTH
),

1009 
HTML_ATTRIBUTES
(
TD
)

1018 
	e_HTML_TEXTAREA_Aâribuãs
 {

1019 
HTML_ATTR
(
TEXTAREA
,
CLASS
) = 0,

1020 
HTML_ATTR
(
TEXTAREA
,
COLS
),

1021 
HTML_ATTR
(
TEXTAREA
,
DIR
),

1022 
HTML_ATTR
(
TEXTAREA
,
DISABLED
),

1023 
HTML_ATTR
(
TEXTAREA
,
ID
),

1024 
HTML_ATTR
(
TEXTAREA
,
LANG
),

1025 
HTML_ATTR
(
TEXTAREA
,
NAME
),

1026 
HTML_ATTR
(
TEXTAREA
,
READONLY
),

1027 
HTML_ATTR
(
TEXTAREA
,
ROWS
),

1028 
HTML_ATTR
(
TEXTAREA
,
STYLE
),

1029 
HTML_ATTR
(
TEXTAREA
,
TABINDEX
),

1030 
HTML_ATTR
(
TEXTAREA
,
TITLE
),

1031 
HTML_ATTRIBUTES
(
TEXTAREA
)

1040 
	e_HTML_TITLE_Aâribuãs
 {

1041 
HTML_ATTR
(
TITLE
,
DIR
) = 0,

1042 
HTML_ATTR
(
TITLE
,
LANG
),

1043 
HTML_ATTRIBUTES
(
TITLE
)

1052 
	e_HTML_UL_Aâribuãs
 {

1053 
HTML_ATTR
(
UL
,
CLASS
) = 0,

1054 
HTML_ATTR
(
UL
,
COMPACT
),

1055 
HTML_ATTR
(
UL
,
DIR
),

1056 
HTML_ATTR
(
UL
,
ID
),

1057 
HTML_ATTR
(
UL
,
LANG
),

1058 
HTML_ATTR
(
UL
,
STYLE
),

1059 
HTML_ATTR
(
UL
,
TITLE
),

1060 
HTML_ATTR
(
UL
,
TYPE
),

1061 
HTML_ATTRIBUTES
(
UL
)

1070 
SGML_dtd
 * 
HTML_dtd
 ();

1071 
BOOL
 
HTML_£tDtd
 (c⁄° 
SGML_dtd
 * 
dtd
);

1085 
HTSèπAnch‹
 (

1086 
HTSåu˘uªd
 * 
èrgë°ªam
,

1087 c⁄° * 
«me
,

1088 c⁄° * 
hªf
);

1098 
HTMLPutImg
 (
HTSåu˘uªd
 *
obj
,

1099 c⁄° *
§c
,

1100 c⁄° *
Æt
,

1101 c⁄° *
Æign
);

1113 
HTNextID
 (
HTSåu˘uªd
 * 
èrgëSåóm
, c⁄° * 
s
);

	@Library/src/HTMemLog.c

12 
	~"wwwsys.h
"

13 
	~"HTUtûs.h
"

14 
	~"HTI√t.h
"

15 
	~"HTMemLog.h
"

16 
	~"HTTimî.h
"

18 #ifde‡
O_SYNC


19 
	#OPEN_FLAGS
 
O_WRONLY
|
O_CREAT
|
O_TRUNC
|
O_SYNC


	)

21 
	#OPEN_FLAGS
 
O_WRONLY
|
O_CREAT
|
O_TRUNC


	)

24 #ifde‡
HTDEBUG


26 #ifde‡
USE_SYSLOG


27 
	#PRINT_BUFF_SIZE
 8200

	)

29 
	#PRINT_BUFF_SIZE
 200

	)

32 
PRIVATE
 
size_t
 
	gLogBuffSize
 = 1024;

33 
PRIVATE
 
	gLogFd
 = 2;

34 
PRIVATE
 c⁄° * 
	gLogName
 = 
NULL
;

35 
PRIVATE
 * 
	gLogBuff
 = 
NULL
;

36 
PRIVATE
 
size_t
 
	gLogLí
 = 0;

37 
PRIVATE
 
BOOL
 
	gKìpO≥n
 = 
YES
;

38 
PRIVATE
 
HTTimî
 * 
	gTimî
 = 
NULL
;

40 #ifde‡
USE_EXCLUDES


41 °ru˘ {* 
	m°r
; 
	mÀn
;} 
	tSåIndexIndex
;

43 
PRIVATE
 
SåIndexIndex
 
	gEx˛udes
[] = {{"HTReader_read", 13}, {"HTWriter_write", 14}, {"HTEventList_loop", 16}};

45 
PRIVATE
 
	$SåIndex
 (* 
°r
, 
SåIndexIndex
 
ñemít
[], 
ñemíts
)

47 
i
;

48 
i
 = 0; i < 
ñemíts
; i++)

49 i‡(!
	`°∫cmp
(
ñemít
[
i
].
°r
, så,ÉÀmít[i].
Àn
))

50  
i
 + 1;

52 
	}
}

55 
PRIVATE
 
	$MemLogTimeout
 (
HTTimî
 * 
timî
, * 
∑øm
, 
HTEvítTy≥
 
ty≥
)

57 
ªt
;

58 
	`HTTRACE
(
CORE_TRACE
, "MemLog...... flushing onÅimeout\n");

59 
ªt
 = 
	`HTMemLog_Êush
();

60  
ªt
;

61 
	}
}

63 
PRIVATE
 
ms_t
 
	$HTMemLog_addTime
()

65 
buff
[20];

66 
ms_t
 
ms
 = 
	`HTGëTimeInMûlis
();

67 
Àn
 = 
	`•rötf
(
buff
, "%lu", 
ms
);

68 
	`HTMemLog_add
(
buff
, 
Àn
);

69  
ms
;

70 
	}
}

76 
PUBLIC
 
	$HTMemLog_›í
 (* 
logName
, 
size_t
 
size
, 
BOOL
 
kìpO≥n
)

78 #ifde‡
HTDEBUG


79 #ifde‡
USE_SYSLOG


80 
	`›ílog
(
LogName
, 
LOG_NDELAY
, 
LOG_USER
);

82 
LogName
 = 
logName
;

83 
KìpO≥n
 = 
kìpO≥n
;

84 i‡((
LogFd
 = 
	`›í
(
LogName
, 
OPEN_FLAGS
, 0666)) == -1)

85  
HT_ERROR
;

86 i‡(!
KìpO≥n
)

87 
	`˛o£
(
LogFd
);

88 
LogBuffSize
 = 
size
;

89 i‡((
LogBuff
 = (*Ë
	`HT_MALLOC
(
size
)Ë=
NULL
)

90 
	`HT_OUTOFMEM
("HTMemLog_open");

91 
LogLí
 = 0;

93 
	`HTTø˚D©a_£tCÆlback
(
HTMemLog_ˇŒback
);

94 
Timî
 = 
	`HTTimî_√w
(
NULL
, 
MemLogTimeout
, NULL, 10000, 
YES
, YES);

96  
HT_OK
;

97 
	}
}

99 
PUBLIC
 
	$HTMemLog_Êush
()

101 #ifde‡
HTDEBUG


102 i‡(
LogLí
) {

103 i‡(!
KìpO≥n
)

104 i‡((
LogFd
 = 
	`›í
(
LogName
, 
O_WRONLY
|
O_CREAT
|
O_APPEND
, 0666)) == -1)

105  
HT_ERROR
;

106 
	`wrôe
(
LogFd
, 
LogBuff
, 
LogLí
);

107 
LogLí
 = 0;

109 i‡(!
KìpO≥n
Ë
	`˛o£
(
LogFd
);

111  
HT_OK
;

112 
	}
}

114 
PUBLIC
 
	$HTMemLog_add
(* 
buf
, 
size_t
 
Àn
)

116 #ifde‡
HTDEBUG


117 i‡(
LogBuff
) {

121 
Àn
 + 
LogLí
 > 
LogBuffSize
) {

122 
size_t
 
toWrôe
 = 
LogBuffSize
-
LogLí
;

123 
	`mem˝y
(
LogBuff
+
LogLí
, 
buf
, 
toWrôe
);

124 
LogLí
 = 
LogBuffSize
;

125 
	`HTMemLog_Êush
();

126 
buf
 +
toWrôe
;

127 
Àn
 -
toWrôe
;

129 
	`mem˝y
(
LogBuff
+
LogLí
, 
buf
, 
Àn
);

130 
LogLí
 +
Àn
;

131  
HT_OK
;

133  
HT_ERROR
;

135  
HT_OK
;

137 
	}
}

139 
PUBLIC
 
	$HTMemLog_˛o£
 ()

141 #ifde‡
HTDEBUG


142 #ifde‡
USE_SYSLOG


143 
	`˛o£log
();

145 
	`HTMemLog_Êush
();

146 i‡(
LogFd
 > 2Ë
	`˛o£
(LogFd);

147 i‡(
LogBuff
 !
NULL
Ë
	`HT_FREE
(LogBuff);

150 
	}
}

153 
PUBLIC
 
	$HTMemLog_ˇŒback
 (* 
d©a
, 
size_t
 
Àn
, * 
fmt
, 
va_li°
 
pArgs
)

155 #ifde‡
HTDEBUG


156 
buff
[
PRINT_BUFF_SIZE
];

157 
ªt
;

158 #ifde‡
USE_EXCLUDES


159 i‡(
	`SåIndex
(
fmt
, 
Ex˛udes
, (Excludes)/(Excludes[0])))

162 #ifde‡
USE_SYSLOG


163 
ªt
 = 
	`v•rötf
(
buff
, 
fmt
, 
pArgs
);

164 
	`sy¶og
(
LOG_DEBUG
, "%s\n", 
buff
);

165 i‡(
Àn
 > 8192)

166 
Àn
 = 8192;

167 
	`°∫˝y
(
buff
, 
d©a
, 
Àn
);

168 
buff
[
Àn
] = 0;

169 
	`sy¶og
(
LOG_DEBUG
, "%s\n", 
buff
);

171 
	`HTMemLog_addTime
();

172 #ifde‡
HAVE_LONG_SIZE_T


173 
ªt
 = 
	`•rötf
(
buff
, " %ld ", 
Àn
);

175 
ªt
 = 
	`•rötf
(
buff
, " %d ", 
Àn
);

177 
	`HTMemLog_add
(
buff
, 
ªt
);

179 i‡(
fmt
) {

180 
ªt
 = 
	`v•rötf
(
buff
, 
fmt
, 
pArgs
);

181 
	`HTMemLog_add
(
buff
, 
ªt
);

183 
	`HTMemLog_add
("\n", 1);

185 
	`HTMemLog_add
(
d©a
, 
Àn
);

186 
	`HTMemLog_add
("\n", 1);

188  
ªt
;

192 
	}
}

	@Library/src/HTMemLog.h

28 #i‚de‡
HTMEMLOG_H


29 
	#HTMEMLOG_H


	)

39 
HTMemLog_›í
 (* 
logName
, 
size_t
 
size
, 
BOOL
 
kìpO≥n
);

40 
HTMemLog_add
 (* 
buf
, 
size_t
 
Àn
);

41 
HTMemLog_Êush
 ();

42 
HTMemLog_˛o£
 ();

43 
HTTø˚D©aCÆlback
 
HTMemLog_ˇŒback
;

	@Library/src/HTMemory.c

13 
	~"wwwsys.h
"

14 
	~"HTUtûs.h
"

15 
	~"HTLi°.h
"

16 
	~"HTMem‹y.h
"

18 
PRIVATE
 
HTLi°
 * 
	gHTMemCÆl
 = 
NULL
;

19 
PRIVATE
 
HTMem‹y_exôCÆlback
 * 
	gPExô
 = 
NULL
;

20 
PRIVATE
 
size_t
 
	gLa°AŒocSize
 = 0;

30 
PUBLIC
 
BOOL
 
	$HTMem‹yCÆl_add
 (
HTMem‹yCÆlback
 * 
cbf
)

32 
	`HTTRACE
(
MEM_TRACE
, "Mem Add..... CÆlback %p\n" 
	`_
 (*Ë
cbf
);

33 i‡(!
HTMemCÆl
ËHTMemCÆ»
	`HTLi°_√w
();

34  
cbf
 ? 
	`HTLi°_addObje˘
(
HTMemCÆl
, (*ËcbfË: 
NO
;

35 
	}
}

41 
PUBLIC
 
BOOL
 
	$HTMem‹yCÆl_dñëe
 (
HTMem‹yCÆlback
 * 
cbf
)

43 
	`HTTRACE
(
MEM_TRACE
, "Mem Dñëe.. CÆlback %p\n" 
	`_
 (*Ë
cbf
);

44  (
HTMemCÆl
 && 
cbf
Ë? 
	`HTLi°_ªmoveObje˘
(HTMemCÆl,(*)cbfË: 
NO
;

45 
	}
}

51 
PUBLIC
 
BOOL
 
	$HTMem‹yCÆl_dñëeAŒ
 ()

53 
	`HTTRACE
(
MEM_TRACE
, "Mem Delete.. All Callback functions\n");

54 i‡(
HTMemCÆl
) {

55 
	`HTLi°_dñëe
(
HTMemCÆl
);

56 
HTMemCÆl
 = 
NULL
;

57  
YES
;

59  
NO
;

60 
	}
}

65 
PUBLIC
 * 
	$HTMem‹y_mÆloc
 (
size_t
 
size
)

67 * 
±r
;

68 
±r
 = 
	`mÆloc
(
La°AŒocSize
 = 
size
);

69 i‡(
±r
 !
NULL
) Ötr;

70 i‡(
HTMemCÆl
) {

71 
HTMem‹yCÆlback
 * 
¥es
;

72 (
¥es
 = (
HTMem‹yCÆlback
 *Ë
	`HTLi°_√xtObje˘
(
HTMemCÆl
))) {

73 
	`HTTRACE
(
MEM_TRACE
, "Mem CÆlög. %∞(sizê%d)\n" 
	`_
 (*)
¥es
 
_
 
size
);

74 (*
¥es
)(
size
);

75 i‡((
±r
 = 
	`mÆloc
(
size
)Ë!
NULL
) Ötr;

78 
	`HTTRACE
(
MEM_TRACE
, "Mem‹y.... Couldn'àÆloˇã %d byãs\n" 
_
 
size
);

79  
NULL
;

80 
	}
}

85 
PUBLIC
 * 
	$HTMem‹y_ˇŒoc
 (
size_t
 
nobj
, size_à
size
)

87 * 
±r
;

88 
±r
 = 
	`ˇŒoc
(
nobj
, 
La°AŒocSize
 = 
size
);

89 i‡(
±r
 !
NULL
) Ötr;

90 i‡(
HTMemCÆl
) {

91 
HTMem‹yCÆlback
 * 
¥es
;

92 
size_t
 
tŸÆ
 = 
size
 * 
nobj
;

93 (
¥es
 = (
HTMem‹yCÆlback
 *Ë
	`HTLi°_√xtObje˘
(
HTMemCÆl
))) {

94 
	`HTTRACE
(
MEM_TRACE
, "Mem CÆlög. %∞(sizê%d)\n" 
_


95 (*Ë
¥es
 
_
 
tŸÆ
);

96 (*
¥es
)(
tŸÆ
);

97 i‡((
±r
 = 
	`ˇŒoc
(
nobj
, 
size
)Ë!
NULL
) Ötr;

100 
	`HTTRACE
(
MEM_TRACE
, "Mem‹y...... Couldn'àÆloˇã %d obje˘†o‡sizê%d\n" 
_


101 
nobj
 
_
 
size
);

102  
NULL
;

103 
	}
}

108 
PUBLIC
 * 
	$HTMem‹y_ªÆloc
 (* 
p
, 
size_t
 
size
)

110 * 
±r
;

111 
±r
 = 
	`ªÆloc
(
p
, 
La°AŒocSize
 = 
size
);

112 i‡(
±r
 !
NULL
) Ötr;

113 i‡(
HTMemCÆl
) {

114 
HTMem‹yCÆlback
 * 
¥es
;

115 (
¥es
 = (
HTMem‹yCÆlback
 *Ë
	`HTLi°_√xtObje˘
(
HTMemCÆl
))) {

116 
	`HTTRACE
(
MEM_TRACE
, "Mem CÆlög. %∞(sizê%d)\n" 
	`_
 (*)
¥es
 
_
 
size
);

117 (*
¥es
)(
size
);

118 i‡((
±r
 = 
	`ªÆloc
(
p
, 
size
)Ë!
NULL
) Ötr;

121 
	`HTTRACE
(
MEM_TRACE
, "Mem‹y...... Couldn'àªÆloˇã %d byãs\n" 
_
 
size
);

122  
NULL
;

123 
	}
}

128 
PUBLIC
 
	$HTMem‹y_‰ì
 (* 
±r
)

130 i‡(
±r
) {

131 
	`HTTRACE
(
MEM_TRACE
, "Mem‹y Fªe. %p\n" 
_
 
±r
);

132 
	`‰ì
(
±r
);

134 
	}
}

142 
PUBLIC
 
	$HTMem‹y_£tExô
 (
HTMem‹y_exôCÆlback
 * 
pExô
)

144 
PExô
 = 
pExô
;

145 
	}
}

151 
PUBLIC
 
HTMem‹y_exôCÆlback
 * 
	$HTMem‹y_exô
 ()

153  
PExô
;

154 
	}
}

160 
PUBLIC
 
	$HTMem‹y_outofmem
 (* 
«me
, * 
fûe
, 
löe
)

162 i‡(
PExô
)

163 (*
PExô
)(
«me
, 
fûe
, 
löe
);

164 
	`HTTRACE
(
ALL_TRACE
, "%s:%ld faûedáŒoˇti⁄ f‹ \"%s\" (%ld byãs).\nProgømáb‹ãd.\n" 
_


165 
fûe
 
_
 
löe
 _ 
«me
 _ 
La°AŒocSize
);

166 
	`ab‹t
();

167 
	}
}

	@Library/src/HTMemory.h

45 #i‚de‡
HTMEMORY_H


46 
	#HTMEMORY_H


	)

48 
	~"HTUtûs.h
"

60 * 
HTMem‹y_mÆloc
(
size_t
 
size
);

61 * 
HTMem‹y_ˇŒoc
(
size_t
 
cou¡
, size_à
size
);

62 * 
HTMem‹y_ªÆloc
(* 
±r
, 
size_t
 
size
);

63 
HTMem‹y_‰ì
(* 
±r
);

76 
	#HT_MALLOC
(
size
Ë
	`HTMem‹y_mÆloc
((size))

	)

77 
	#HT_CALLOC
(
cou¡
, 
size
Ë
	`HTMem‹y_ˇŒoc
((cou¡), (size))

	)

78 
	#HT_REALLOC
(
±r
, 
size
Ë
	`HTMem‹y_ªÆloc
(’å), (size))

	)

79 
	#HT_FREE
(
poöãr
Ë{
	`HTMem‹y_‰ì
(’oöãr));(’oöãr))=
NULL
;}

	)

104 
	tHTMem‹yCÆlback
(
	tsize_t
 
	tsize
);

106 
BOOL
 
HTMem‹yCÆl_add
 (
HTMem‹yCÆlback
 * 
cbf
);

117 
BOOL
 
HTMem‹yCÆl_dñëe
 (
HTMem‹yCÆlback
 * 
cbf
);

118 
BOOL
 
HTMem‹yCÆl_dñëeAŒ
 ();

137 
	tHTMem‹y_exôCÆlback
(*
	t«me
, *
	tfûe
, 
	tlöe
);

139 
HTMem‹y_£tExô
(
HTMem‹y_exôCÆlback
 * 
pExô
);

140 
HTMem‹y_exôCÆlback
 * 
HTMem‹y_exô
();

153 
	#outofmem
(
fûe
, 
«me
Ë
	`HT_OUTOFMEM
“ame)

	)

154 
	#HT_OUTOFMEM
(
«me
Ë
	`HTMem‹y_outofmem
(“ame), 
__FILE__
, 
__LINE__
)

	)

156 
HTMem‹y_outofmem
(* 
«me
, * 
fûe
, 
löe
);

	@Library/src/HTMerge.c

18 
	~"wwwsys.h
"

19 
	~"WWWUtû.h
"

20 
	~"HTMîge.h
"

22 
	s_HTSåóm
 {

23 c⁄° 
HTSåómCœss
 * 
	miß
;

24 
HTSåóm
 * 
	mèrgë
;

25 
	m„eds
;

28 
PRIVATE
 
	$HTMîge_putCh¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

30  (
me
->
„eds
 > 0) ?

31 (*
me
->
èrgë
->
iß
->
put_ch¨a˘î
)(me->èrgë, 
c
Ë: 
HT_OK
;

32 
	}
}

34 
PRIVATE
 
	$HTMîge_putSåög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

36  (
me
->
„eds
 > 0) ?

37 (*
me
->
èrgë
->
iß
->
put_°rög
)(me->èrgë, 
s
Ë: 
HT_OK
;

38 
	}
}

40 
PRIVATE
 
	$HTMîge_putBlock
 (
HTSåóm
 * 
me
, c⁄° * 
s
, 
l
)

42  (
me
->
„eds
 > 0) ?

43 (*
me
->
èrgë
->
iß
->
put_block
)(me->èrgë, 
s
, 
l
Ë: 
HT_OK
;

44 
	}
}

46 
PRIVATE
 
	$HTMîge_Êush
 (
HTSåóm
 * 
me
)

48  (
me
->
„eds
 > 0) ?

49 (*
me
->
èrgë
->
iß
->
Êush
)(me->èrgëË: 
HT_OK
;

50 
	}
}

56 
PRIVATE
 
	$HTMîge_‰ì
 (
HTSåóm
 * 
me
)

58 i‡(
me
) {

59 
	`HTTRACE
(
STREAM_TRACE
, "MîgêFªe.. CÆÀd wôh %d fìds\n" 
_
 
me
->
„eds
);

60 i‡(--
me
->
„eds
 <= 0) {

61 (*
me
->
èrgë
->
iß
->
_‰ì
)(me->target);

62 
	`HT_FREE
(
me
);

64  
HT_OK
;

66  
HT_ERROR
;

67 
	}
}

69 
PRIVATE
 
	$HTMîge_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

71 i‡(
me
) {

72 
	`HTTRACE
(
STREAM_TRACE
, "MîgêAb‹t. CÆÀd wôh %d fìds\n" 
_
 
me
->
„eds
);

73 i‡(--
me
->
„eds
 <= 0) {

74 (*
me
->
èrgë
->
iß
->
ab‹t
)(me->èrgë, 
e
);

75 
	`HT_FREE
(
me
);

78  
HT_ERROR
;

79 
	}
}

81 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTMîgeCœss
 =

84 
HTMîge_Êush
,

85 
HTMîge_‰ì
,

86 
HTMîge_ab‹t
,

87 
HTMîge_putCh¨a˘î
,

88 
HTMîge_putSåög
,

89 
HTMîge_putBlock


92 
PUBLIC
 
HTSåóm
 * 
	$HTMîge
 (
HTSåóm
 * 
èrgë
, 
„eds
)

94 
HTSåóm
 * 
me
;

95 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (*me))Ë=
NULL
)

96 
	`HT_OUTOFMEM
("HTMerge");

97 
me
->
iß
 = &
HTMîgeCœss
;

98 
me
->
èrgë
 =Å¨gë ?Å¨gë : 
	`HTBœckHﬁe
();

99 
me
->
„eds
 = feeds >= 1 ? feeds : 1;

100 
	`HTTRACE
(
STREAM_TRACE
, "Mîge....... Cª©ed såóm %p\n" 
_
 
me
);

101  
me
;

102 
	}
}

	@Library/src/HTMerge.h

30 #i‚de‡
_HTMERGE_H


31 
	#_HTMERGE_H


	)

33 
	~"HTSåóm.h
"

35 
HTSåóm
 * 
HTMîge
 (HTSåóm * 
èrgë
, 
„eds
);

	@Library/src/HTMethod.c

19 
	~"wwwsys.h
"

20 
	~"HTUtûs.h
"

21 
	~"HTSåög.h
"

22 
	~"HTMëhod.h
"

24 
PRIVATE
 *
	gmëhod_«mes
[] =

37 #ifde‡
HT_DAV


47 #ifde‡
HT_EXT


48 
NULL
,

49 
NULL
,

50 
NULL
,

51 
NULL
,

52 
NULL
,

53 
NULL
,

54 
NULL
,

57 
NULL


61 #ifde‡
HT_EXT


65 
PRIVATE
 
BOOL
 
	gHTEXT_E¡ôyMëhods
 [] = {

66 
NO
,

67 
NO
,

68 
NO
,

69 
NO
,

70 
NO
,

71 
NO
,

72 
NO


82 
PUBLIC
 
HTMëhod
 
	$HTMëhod_íum
 (c⁄° * 
«me
)

84 i‡(
«me
) {

85 i‡(!
	`°rˇ£comp
(
«me
, *(
mëhod_«mes
+1)))

86  
METHOD_GET
;

87 i‡(!
	`°rˇ£comp
(
«me
, *(
mëhod_«mes
+2)))

88  
METHOD_HEAD
;

89 i‡(!
	`°rˇ£comp
(
«me
, *(
mëhod_«mes
+3)))

90  
METHOD_POST
;

91 i‡(!
	`°rˇ£comp
(
«me
, *(
mëhod_«mes
+4)))

92  
METHOD_PUT
;

93 i‡(!
	`°rˇ£comp
(
«me
, *(
mëhod_«mes
+5)))

94  
METHOD_PATCH
;

95 i‡(!
	`°rˇ£comp
(
«me
, *(
mëhod_«mes
+6)))

96  
METHOD_DELETE
;

97 i‡(!
	`°rˇ£comp
(
«me
, *(
mëhod_«mes
+7)))

98  
METHOD_TRACE
;

99 i‡(!
	`°rˇ£comp
(
«me
, *(
mëhod_«mes
+8)))

100  
METHOD_OPTIONS
;

101 i‡(!
	`°rˇ£comp
(
«me
, *(
mëhod_«mes
+9)))

102  
METHOD_LINK
;

103 i‡(!
	`°rˇ£comp
(
«me
, *(
mëhod_«mes
+10)))

104  
METHOD_UNLINK
;

105 #ifde‡
HT_DAV


106 i‡(!
	`°rˇ£comp
(
«me
, *(
mëhod_«mes
+11)))

107  
METHOD_LOCK
;

108 i‡(!
	`°rˇ£comp
(
«me
, *(
mëhod_«mes
+12)))

109  
METHOD_UNLOCK
;

111 i‡(!
	`°rˇ£comp
(
«me
, *(
mëhod_«mes
+13)))

112  
METHOD_PROPFIND
;

113 i‡(!
	`°rˇ£comp
(
«me
, *(
mëhod_«mes
+14)))

114  
METHOD_PROPPATCH
;

115 i‡(!
	`°rˇ£comp
(
«me
, *(
mëhod_«mes
+15)))

116  
METHOD_MKCOL
;

117 i‡(!
	`°rˇ£comp
(
«me
, *(
mëhod_«mes
+16)))

118  
METHOD_COPY
;

119 i‡(!
	`°rˇ£comp
(
«me
, *(
mëhod_«mes
+17)))

120  
METHOD_MOVE
;

123 #ifde‡
HT_EXT


125 i‡–*(
mëhod_«mes
+18Ë&& !
	`°rˇ£comp
(
«me
, *(method_names+18)))

126  
METHOD_EXT_0
;

127 i‡–*(
mëhod_«mes
+19Ë&& !
	`°rˇ£comp
(
«me
, *(method_names+19)))

128  
METHOD_EXT_1
;

129 i‡–*(
mëhod_«mes
+20Ë&& !
	`°rˇ£comp
(
«me
, *(method_names+20)))

130  
METHOD_EXT_2
;

131 i‡–*(
mëhod_«mes
+21Ë&& !
	`°rˇ£comp
(
«me
, *(method_names+21)))

132  
METHOD_EXT_3
;

133 i‡–*(
mëhod_«mes
+22Ë&& !
	`°rˇ£comp
(
«me
, *(method_names+22)))

134  
METHOD_EXT_4
;

135 i‡–*(
mëhod_«mes
+23Ë&& !
	`°rˇ£comp
(
«me
, *(method_names+23)))

136  
METHOD_EXT_5
;

137 i‡–*(
mëhod_«mes
+24Ë&& !
	`°rˇ£comp
(
«me
, *(method_names+24)))

138  
METHOD_EXT_6
;

141  
METHOD_INVALID
;

142 
	}
}

150 
PUBLIC
 c⁄° * 
	$HTMëhod_«me
 (
HTMëhod
 
mëhod
)

152 i‡(
mëhod
 & 
METHOD_GET
)

153  *(
mëhod_«mes
+1);

154 i‡(
mëhod
 =
METHOD_HEAD
)

155  *(
mëhod_«mes
+2);

156 i‡(
mëhod
 =
METHOD_POST
)

157  *(
mëhod_«mes
+3);

158 i‡(
mëhod
 =
METHOD_PUT
)

159  *(
mëhod_«mes
+4);

160 i‡(
mëhod
 =
METHOD_PATCH
)

161  *(
mëhod_«mes
+5);

162 i‡(
mëhod
 =
METHOD_DELETE
)

163  *(
mëhod_«mes
+6);

164 i‡(
mëhod
 =
METHOD_TRACE
)

165  *(
mëhod_«mes
+7);

166 i‡(
mëhod
 =
METHOD_OPTIONS
)

167  *(
mëhod_«mes
+8);

168 i‡(
mëhod
 =
METHOD_LINK
)

169  *(
mëhod_«mes
+9);

170 i‡(
mëhod
 =
METHOD_UNLINK
)

171  *(
mëhod_«mes
+10);

173 #ifde‡
HT_DAV


174 i‡(
mëhod
 =
METHOD_LOCK
)

175  *(
mëhod_«mes
+11);

176 i‡(
mëhod
 =
METHOD_UNLOCK
)

177  *(
mëhod_«mes
+12);

178 i‡(
mëhod
 =
METHOD_PROPFIND
)

179  *(
mëhod_«mes
+13);

180 i‡(
mëhod
 =
METHOD_PROPPATCH
)

181  *(
mëhod_«mes
+14);

182 i‡(
mëhod
 =
METHOD_MKCOL
)

183  *(
mëhod_«mes
+15);

184 i‡(
mëhod
 =
METHOD_COPY
)

185  *(
mëhod_«mes
+16);

186 i‡(
mëhod
 =
METHOD_MOVE
)

187  *(
mëhod_«mes
+17);

190 #ifde‡
HT_EXT


191 i‡(
mëhod
 =
METHOD_EXT_0
 && (*(
mëhod_«mes
+18)))

192  *(
mëhod_«mes
+18);

193 i‡(
mëhod
 =
METHOD_EXT_1
 && (*(
mëhod_«mes
+19)))

194  *(
mëhod_«mes
+19);

195 i‡(
mëhod
 =
METHOD_EXT_2
 && (*(
mëhod_«mes
+20)))

196  *(
mëhod_«mes
+20);

197 i‡(
mëhod
 =
METHOD_EXT_3
 && ((*
mëhod_«mes
+21)))

198  *(
mëhod_«mes
+21);

199 i‡(
mëhod
 =
METHOD_EXT_4
 && ((*
mëhod_«mes
+22)))

200  *(
mëhod_«mes
+22);

201 i‡(
mëhod
 =
METHOD_EXT_5
 && ((*
mëhod_«mes
+23)))

202  *(
mëhod_«mes
+23);

203 i‡(
mëhod
 =
METHOD_EXT_6
 && ((*
mëhod_«mes
+24)))

204  *(
mëhod_«mes
+24);

208  *
mëhod_«mes
;

209 
	}
}

215 
PUBLIC
 
BOOL
 
	$HTMëhod_hasE¡ôy
 (
HTMëhod
 
me
) {

216 i‡(
me
) {

218 i‡(
me
 & (
METHOD_PUT
 | 
METHOD_POST
)Ë 
YES
;

220 #ifde‡
HT_DAV


222 i‡(
me
 & (
METHOD_LOCK
 | 
METHOD_PROPFIND
 | 
METHOD_PROPPATCH
 |

223 
METHOD_COPY
 | 
METHOD_MOVE
)Ë 
YES
;

226 #ifde‡
HT_EXT


228 
	`HTTRACE
 (
PROT_TRACE
, "HTMethod.... HasÅhisÉxtension methodá body?\n");

229 i‡(
me
 =
METHOD_EXT_0
Ë 
HTEXT_E¡ôyMëhods
[0];

230 i‡(
me
 =
METHOD_EXT_1
Ë 
HTEXT_E¡ôyMëhods
[1];

231 i‡(
me
 =
METHOD_EXT_2
Ë 
HTEXT_E¡ôyMëhods
[2];

232 i‡(
me
 =
METHOD_EXT_3
Ë 
HTEXT_E¡ôyMëhods
[3];

233 i‡(
me
 =
METHOD_EXT_4
Ë 
HTEXT_E¡ôyMëhods
[4];

234 i‡(
me
 =
METHOD_EXT_5
Ë 
HTEXT_E¡ôyMëhods
[5];

235 i‡(
me
 =
METHOD_EXT_6
Ë 
HTEXT_E¡ôyMëhods
[6];

236  (
NO
);

239  (
NO
);

240 
	}
}

259 
PUBLIC
 
BOOL
 
	$HTMëhod_£tExãnsi⁄Mëhod
 (
HTMëhod
 
mëhod
, c⁄° * 
«me
, 
BOOL
 
hasE¡ôy
) {

260 #ifde‡
HT_EXT


261 i‡(
«me
 && *name) {

262 i‡(
mëhod
 =
METHOD_EXT_0
) {

263 
	`SåAŒocC›y
 ((*)(*(
mëhod_«mes
+18)), 
«me
);

264 
HTEXT_E¡ôyMëhods
[0] = 
hasE¡ôy
;

266 i‡(
mëhod
 =
METHOD_EXT_1
) {

267 
	`SåAŒocC›y
 ((*)(*(
mëhod_«mes
+19)), 
«me
);

268 
HTEXT_E¡ôyMëhods
[1] = 
hasE¡ôy
;

270 i‡(
mëhod
 =
METHOD_EXT_2
) {

271 
	`SåAŒocC›y
 ((*)(*(
mëhod_«mes
+20)), 
«me
);

272 
HTEXT_E¡ôyMëhods
[2] = 
hasE¡ôy
;

274 i‡(
mëhod
 =
METHOD_EXT_3
) {

275 
	`SåAŒocC›y
 ((*)(*(
mëhod_«mes
+21)), 
«me
);

276 
HTEXT_E¡ôyMëhods
[3] = 
hasE¡ôy
;

278 i‡(
mëhod
 =
METHOD_EXT_4
) {

279 
	`SåAŒocC›y
 ((*)(*(
mëhod_«mes
+22)), 
«me
);

280 
HTEXT_E¡ôyMëhods
[4] = 
hasE¡ôy
;

282 i‡(
mëhod
 =
METHOD_EXT_5
) {

283 
	`SåAŒocC›y
 ((*)(*(
mëhod_«mes
+23)), 
«me
);

284 
HTEXT_E¡ôyMëhods
[5] = 
hasE¡ôy
;

286 i‡(
mëhod
 =
METHOD_EXT_6
) {

287 
	`SåAŒocC›y
 ((*)(*(
mëhod_«mes
+24)), 
«me
);

288 
HTEXT_E¡ôyMëhods
[6] = 
hasE¡ôy
;

290  
NO
;

291  
YES
;

295  
NO
;

296 
	}
}

302 
PUBLIC
 
BOOL
 
	$HTMëhod_dñëeExãnsi⁄Mëhod
 (
HTMëhod
 
mëhod
) {

303 #ifde‡
HT_EXT


304 *
±r
 = 
NULL
;

306 i‡–(
mëhod
 =
METHOD_EXT_0
Ë&& (*(
mëhod_«mes
+18)) ) {

307 
±r
 = (*Ë(*(
mëhod_«mes
+18));

308 (*(
mëhod_«mes
+18)Ë
NULL
;

310 i‡–(
mëhod
 =
METHOD_EXT_1
Ë&& (*(
mëhod_«mes
+19)) ) {

311 
±r
 = (*Ë(*(
mëhod_«mes
+19));

312 (*(
mëhod_«mes
+19)Ë
NULL
;

314 i‡–(
mëhod
 =
METHOD_EXT_2
Ë&& (*(
mëhod_«mes
+20)) ) {

315 
±r
 = (*Ë(*(
mëhod_«mes
+20));

316 (*(
mëhod_«mes
+20)Ë
NULL
;

318 i‡–(
mëhod
 =
METHOD_EXT_3
Ë&& (*(
mëhod_«mes
+21)) ) {

319 
±r
 = (*Ë(*(
mëhod_«mes
+21));

320 (*(
mëhod_«mes
+21)Ë
NULL
;

322 i‡–(
mëhod
 =
METHOD_EXT_4
Ë&& (*(
mëhod_«mes
+22)) ) {

323 
±r
 = (*Ë(*(
mëhod_«mes
+22));

324 (*(
mëhod_«mes
+22)Ë
NULL
;

326 i‡–(
mëhod
 =
METHOD_EXT_5
Ë&& (*(
mëhod_«mes
+23)) ) {

327 
±r
 = (*Ë(*(
mëhod_«mes
+23));

328 (*(
mëhod_«mes
+23)Ë
NULL
;

330 i‡–(
mëhod
 =
METHOD_EXT_6
Ë&& (*(
mëhod_«mes
+24)) ) {

331 
±r
 = (*Ë(*(
mëhod_«mes
+24));

332 (*(
mëhod_«mes
+24)Ë
NULL
;

335 i‡(
±r
) {

336 
	`HT_FREE
(
±r
);

337  
YES
;

342  
NO
;

343 
	}
}

	@Library/src/HTMethod.h

31 #i‚de‡
HTMETHOD_H


32 
	#HTMETHOD_H


	)

41 
	mMETHOD_INVALID
 = 0x0,

42 
	mMETHOD_GET
 = 0x1,

43 
	mMETHOD_HEAD
 = 0x2,

44 
	mMETHOD_POST
 = 0x4,

45 
	mMETHOD_PUT
 = 0x8,

46 
	mMETHOD_PATCH
 = 0x10,

47 
	mMETHOD_DELETE
 = 0x20,

48 
	mMETHOD_TRACE
 = 0x40,

49 
	mMETHOD_OPTIONS
 = 0x80,

50 
	mMETHOD_LINK
 = 0x100,

52 #ifde‡
HT_DAV


53 
	mMETHOD_LOCK
 = 0x400,

54 
	mMETHOD_UNLOCK
 = 0x800,

56 
	mMETHOD_PROPFIND
 = 0x1000,

57 
	mMETHOD_PROPPATCH
 = 0x2000,

58 
	mMETHOD_MKCOL
 = 0x4000,

59 
	mMETHOD_COPY
 = 0x8000,

60 
	mMETHOD_MOVE
 = 0x10000,

63 #ifde‡
HT_EXT


64 
	mMETHOD_EXT_0
 = 0x20000,

65 
	mMETHOD_EXT_1
 = 0x40000,

66 
	mMETHOD_EXT_2
 = 0x80000,

67 
	mMETHOD_EXT_3
 = 0x100000,

68 
	mMETHOD_EXT_4
 = 0x200000,

69 
	mMETHOD_EXT_5
 = 0x400000,

70 
	mMETHOD_EXT_6
 = 0x800000,

73 
	mMETHOD_UNLINK
 = 0x200

74 } 
	tHTMëhod
;

84 
HTMëhod
 
HTMëhod_íum
 (c⁄° * 
«me
);

94 c⁄° * 
HTMëhod_«me
 (
HTMëhod
 
mëhod
);

104 
	#HTMëhod_isSa„
(
me
Ë((meË& (
METHOD_GET
|
METHOD_HEAD
))

	)

116 
	#HTMëhod_addMëa
(
me
Ë((meË& (
METHOD_TRACE
 | 
METHOD_OPTIONS
))

	)

132 
BOOL
 
HTMëhod_hasE¡ôy
(
HTMëhod
 
me
);

148 
BOOL
 
HTMëhod_£tExãnsi⁄Mëhod
 (
HTMëhod
 
mëhod
, c⁄° * 
«me
, BOOL 
hasE¡ôy
);

149 
BOOL
 
HTMëhod_dñëeExãnsi⁄Mëhod
 (
HTMëhod
 
mëhod
);

	@Library/src/HTMulpar.h

23 #i‚de‡
HTMULPAR_H


24 
	#HTMULPAR_H


	)

26 
	~"HTSåóm.h
"

27 
	~"HTLi°.h
"

41 
_HTMu…ù¨t
 
	tHTMu…ù¨t
;

43 
	s_HTMu…ù¨tCœss
 {

45 * 
	m«me
;

47 (*
	mÊush
Ë(
HTMu…ù¨t
 * 
	mme
);

49 (*
	m_‰ì
Ë(
HTMu…ù¨t
 * 
	mme
);

51 (*
	mab‹t
Ë(
HTMu…ù¨t
 * 
	mme
, 
HTLi°
 * 
	mîr‹li°
);

53 (*
	mput_ch¨a˘î
)(
HTMu…ù¨t
 * 
	mme
, 
	mch
);

55 (*
	mput_°rög
Ë(
HTMu…ù¨t
 * 
	mme
, c⁄° * 
	m°r
);

57 (*
	mput_block
Ë(
HTMu…ù¨t
 * 
	mme
, c⁄° * 
	m°r
, 
	mÀn
);

68 (*
	mbegö_∑π
Ë(
HTMu…ù¨t
 * 
	mme
, c⁄° * 
	mbound¨y
);

70 (*
	míd_∑π
Ë(
HTMu…ù¨t
 * 
	mme
);

72 (*
	m¥ómbÀ
Ë(
HTMu…ù¨t
 * 
	mme
, c⁄° * 
	m¥e
);

74 (*
	mïûogue
Ë(
HTMu…ù¨t
 * 
	mme
, c⁄° * 
	mïi
);

76 } 
	tHTMu…ù¨tCœss
;

	@Library/src/HTMulti.c

14 
	~"wwwsys.h
"

15 
	~"WWWUtû.h
"

16 
	~"WWWC‹e.h
"

17 
	~"HTMu…i.h
"

18 
	~"HTBöd.h
"

19 
	~"HTFûe.h
"

21 
	#MULTI_SUFFIX
 ".mu…i"

	)

22 
	#MAX_SUFF
 15

	)

23 
	#VARIANTS
 4

	)

25 
	s_HTC⁄ã¡Des¸ùti⁄
 {

26 * 
	mfûíame
;

27 
HTF‹m©
 
	mc⁄ã¡_ty≥
;

28 
HTL™guage
 
	mc⁄ã¡_œnguage
;

29 
HTEncodög
 
	mc⁄ã¡_ícodög
;

30 
HTEncodög
 
	mc⁄ã¡_å™s„r
;

31 
	mc⁄ã¡_Àngth
;

32 
	mquÆôy
;

33 } 
	tHTC⁄ã¡Des¸ùti⁄
;

35 
PRIVATE
 
HTLi°
 * 
	gwñcome_«mes
 = 
NULL
;

42 
PRIVATE
 
	$V¨ü¡S‹t
 (c⁄° * 
a
, c⁄° * 
b
)

44 
HTC⁄ã¡Des¸ùti⁄
 * 
Ø
 = *(HTC⁄ã¡Des¸ùti⁄ **Ë
a
;

45 
HTC⁄ã¡Des¸ùti⁄
 * 
bb
 = *(HTC⁄ã¡Des¸ùti⁄ **Ë
b
;

46 i‡(
Ø
 && 
bb
Ë (Ø->
quÆôy
 > bb->quality) ? -1 : 1;

47  
bb
 - 
Ø
;

48 
	}
}

53 
PRIVATE
 
BOOL
 
	$œng_m©ch
 (
HTAtom
 * 
tm∂©e
, HTAtom * 
a˘uÆ
)

55 c⁄° *
t
, *
a
;

56 *
°
, *
ß
;

57 
BOOL
 
m©ch
 = 
NO
;

59 i‡(
tm∂©e
 && 
a˘uÆ
 &&

60 (
t
 = 
	`HTAtom_«me
(
tm∂©e
)Ë&& (
a
 = HTAtom_«me(
a˘uÆ
))) {

61 
°
 = 
	`°rchr
(
t
, '_');

62 
ß
 = 
	`°rchr
(
a
, '_');

63 i‡((
°
 !
NULL
Ë&& (
ß
 != NULL)) {

64 i‡(!
	`°rˇ£comp
(
t
, 
a
))

65 
m©ch
 = 
YES
;

67 
m©ch
 = 
NO
;

70 i‡(
°
 !
NULL
) *st = 0;

71 i‡(
ß
 !
NULL
) *sa = 0;

72 i‡(!
	`°rˇ£comp
(
t
, 
a
))

73 
m©ch
 = 
YES
;

75 
m©ch
 = 
NO
;

76 i‡(
°
 !
NULL
) *st = '_';

77 i‡(
ß
 !
NULL
) *sa = '_';

80  
m©ch
;

81 
	}
}

83 
PRIVATE
 
	$ty≥_vÆue
 (
HTAtom
 * 
c⁄ã¡_ty≥
, 
HTLi°
 * 
ac˚±ed
)

85 i‡(!
c⁄ã¡_ty≥
)  (1.0);

86 i‡(
ac˚±ed
) {

87 
HTLi°
 * 
cur
 = 
ac˚±ed
;

88 
HTPª£¡©i⁄
 * 
¥es
;

89 
HTPª£¡©i⁄
 * 
wûd
 = 
NULL
;

90 (
¥es
 = (
HTPª£¡©i⁄
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

91 i‡(
¥es
->
ªp
 =
c⁄ã¡_ty≥
)

92  
¥es
->
quÆôy
;

93 i‡(
	`HTMIMEM©ch
(
¥es
->
ªp
, 
c⁄ã¡_ty≥
))

94 
wûd
 = 
¥es
;

96 i‡(
wûd
Ë wûd->
quÆôy
;

100 
	}
}

102 
PRIVATE
 
	$œng_vÆue
 (
HTAtom
 * 
œnguage
, 
HTLi°
 * 
ac˚±ed
)

104 i‡(!
œnguage
)  (1.0);

105 i‡(
ac˚±ed
) {

106 
HTLi°
 * 
cur
 = 
ac˚±ed
;

107 
HTAc˚±Node
 * 
node
;

108 
HTAc˚±Node
 * 
wûd
 = 
NULL
;

109 (
node
 = (
HTAc˚±Node
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

110 i‡(
node
->
©om
 =
œnguage
)

111  
node
->
quÆôy
;

118 i‡(
	`œng_m©ch
(
node
->
©om
, 
œnguage
))

119 
wûd
 = 
node
;

121 i‡(
wûd
Ë wûd->
quÆôy
;

125 
	}
}

127 
PRIVATE
 
	$ícodög_vÆue
 (
HTAtom
 * 
ícodög
, 
HTLi°
 * 
ac˚±ed
)

129 i‡(!
ícodög
)  (1.0);

130 i‡(
ac˚±ed
) {

131 
HTLi°
 * 
cur
 = 
ac˚±ed
;

132 
HTAc˚±Node
 * 
node
;

133 
HTAc˚±Node
 * 
wûd
 = 
NULL
;

134 c⁄° * 
e
 = 
	`HTAtom_«me
(
ícodög
);

135 i‡(!
	`°rcmp
(
e
, "7bit") || !strcmp(e, "8bit") || !strcmp(e, "binary"))

137 (
node
 = (
HTAc˚±Node
*)
	`HTLi°_√xtObje˘
(
cur
))) {

138 i‡(
node
->
©om
 =
ícodög
)

139  
node
->
quÆôy
;

140 i‡(
	`HTMIMEM©ch
(
node
->
©om
, 
ícodög
))

141 
wûd
 = 
node
;

143 i‡(
wûd
Ë wûd->
quÆôy
;

147 
	}
}

149 
PRIVATE
 
BOOL
 
	$HTR™k
 (
HTReque°
 * 
ªque°
, 
HTAºay
 * 
v¨ü¡s
)

151 
HTC⁄ã¡Des¸ùti⁄
 * 
cd
;

152 ** 
d©a
;

153 i‡(!
v¨ü¡s
) {

154 
	`HTTRACE
(
PROT_TRACE
, "Ranking..... No variants\n");

155  
NO
;

161 
cd
 = (
HTC⁄ã¡Des¸ùti⁄
 *Ë
	`HTAºay_fú°Obje˘
(
v¨ü¡s
, 
d©a
);

162 
cd
) {

163 
˘q_loˇl
 = 
	`ty≥_vÆue
(
cd
->
c⁄ã¡_ty≥
, 
	`HTReque°_c⁄vîsi⁄
(
ªque°
));

164 
˘q_globÆ
 = 
	`ty≥_vÆue
(
cd
->
c⁄ã¡_ty≥
, 
	`HTF‹m©_c⁄vîsi⁄
());

165 
˛q_loˇl
 = 
	`œng_vÆue
(
cd
->
c⁄ã¡_œnguage
, 
	`HTReque°_œnguage
(
ªque°
));

166 
˛q_globÆ
 = 
	`œng_vÆue
(
cd
->
c⁄ã¡_œnguage
, 
	`HTF‹m©_œnguage
());

167 
˚q_loˇl
 = 
	`ícodög_vÆue
(
cd
->
c⁄ã¡_ícodög
, 
	`HTReque°_ícodög
(
ªque°
));

168 
˚q_globÆ
 = 
	`ícodög_vÆue
(
cd
->
c⁄ã¡_ícodög
, 
	`HTF‹m©_c⁄ã¡Codög
());

169 
	`HTTRACE
(
PROT_TRACE
, "QuÆôõs... C⁄ã¡Åy≥: %.3f, C⁄ã¡Ü™guage: %.3f, C⁄ã¡Éncodög: %.3f\n" 
_


170 
	`HTMAX
(
˘q_loˇl
, 
˘q_globÆ
Ë
_


171 
	`HTMAX
(
˛q_loˇl
, 
˛q_globÆ
Ë
_


172 
	`HTMAX
(
˚q_loˇl
, 
˚q_globÆ
));

173 
cd
->
quÆôy
 *(
	`HTMAX
(
˘q_loˇl
, 
˘q_globÆ
) *

174 
	`HTMAX
(
˛q_loˇl
, 
˛q_globÆ
) *

175 
	`HTMAX
(
˚q_loˇl
, 
˚q_globÆ
));

176 
cd
 = (
HTC⁄ã¡Des¸ùti⁄
 *Ë
	`HTAºay_√xtObje˘
(
v¨ü¡s
, 
d©a
);

180 
	`HTAºay_s‹t
(
v¨ü¡s
, 
V¨ü¡S‹t
);

183 #ifde‡
HTDEBUG


184 i‡(
PROT_TRACE
) {

185 
˙t
 = 1;

186 
cd
 = (
HTC⁄ã¡Des¸ùti⁄
 *Ë
	`HTAºay_fú°Obje˘
(
v¨ü¡s
, 
d©a
);

187 
	`HTTRACE
(
PROT_TRACE
, "Ranking.....\n");

188 
	`HTTRACE
(
PROT_TRACE
, "RANK QUALITY CONTENT-TYPE LANGUAGE ENCODING FILE\n");

189 
cd
) {

190 
	`HTTRACE
(
PROT_TRACE
, "%d. %.4‡ %-20.20†%-8.8†%-10.10†%s\n" 
_


191 
˙t
++ 
_


192 
cd
->
quÆôy
 
_


193 
cd
->
c⁄ã¡_ty≥
 ? 
	`HTAtom_«me
(cd->c⁄ã¡_ty≥Ë: "-" 
_


194 
cd
->
c⁄ã¡_œnguage
?
	`HTAtom_«me
(cd->c⁄ã¡_œnguage):"-" 
_


195 
cd
->
c⁄ã¡_ícodög
?
	`HTAtom_«me
(cd->c⁄ã¡_ícodög):"-" 
_


196 
cd
->
fûíame
 ? cd->filename :"-");

197 
cd
 = (
HTC⁄ã¡Des¸ùti⁄
 *Ë
	`HTAºay_√xtObje˘
(
v¨ü¡s
, 
d©a
);

201  
YES
;

202 
	}
}

210 
PRIVATE
 
	$HTS∂ôFûíame
 (* 
s_°r
, ** 
s_¨r
)

212 c⁄° *
dñimôîs
 = 
	`HTBöd_dñimôîs
();

213 * 
°¨t
 = 
s_°r
;

214 * 
íd
;

215 
ßve
;

216 
i
;

218 i‡(!
s_°r
 || !
s_¨r
)  0;

220 
i
=0; i < 
MAX_SUFF
 && *
°¨t
; i++) {

221 
íd
=
°¨t
+1; *íd && !
	`°rchr
(
dñimôîs
, *end);Énd++);

222 
ßve
 = *
íd
;

223 *
íd
 = 0;

224 
	`SåAŒocC›y
(
s_¨r
[
i
], 
°¨t
);

225 *
íd
 = 
ßve
;

226 
°¨t
 = 
íd
;

228 
	`HT_FREE
(
s_¨r
[
i
]);

229  
i
;

230 
	}
}

236 
PUBLIC
 
	$HTAddWñcome
 (* 
«me
)

238 i‡(
«me
) {

239 * 
myc›y
 = 
NULL
;

240 
	`SåAŒocC›y
(
myc›y
,
«me
);

242 i‡(!
wñcome_«mes
)

243 
wñcome_«mes
 = 
	`HTLi°_√w
();

244 
	`HTLi°_addObje˘
(
wñcome_«mes
, (*)
myc›y
);

246 
	}
}

249 #ifde‡
HAVE_READDIR


256 
PRIVATE
 
BOOL
 
	$mu…i_m©ch
 (** 
ªquúed
, 
m
, ** 
a˘uÆ
, 
n
)

258 
c
;

259 
i
,
j
;

261 #ifde‡
VMS


262 
c
=0; c<
m
 && c<
n
 && !
	`°rˇ£comp
(
ªquúed
[c], 
a˘uÆ
[c]); c++);

264 
c
=0; c<
m
 && c<
n
 && !
	`°rcmp
(
ªquúed
[c], 
a˘uÆ
[c]); c++);

267 i‡(!
c
Ë 
NO
;

269 
i
=
c
; i<
m
; i++) {

270 
BOOL
 
found
 = 
NO
;

271 
j
=
c
; j<
n
; j++) {

272 #ifde‡
VMS


273 i‡(!
	`°rˇ£comp
(
ªquúed
[
i
], 
a˘uÆ
[
j
])) {

275 i‡(!
	`°rcmp
(
ªquúed
[
i
], 
a˘uÆ
[
j
])) {

277 
found
 = 
YES
;

281 i‡(!
found
Ë 
NO
;

283  
YES
;

284 
	}
}

298 
PRIVATE
 
HTAºay
 * 
	$dú_m©ches
 (* 
∑th
)

300 * 
ªquúed
[
MAX_SUFF
+1];

301 * 
a˘uÆ
[
MAX_SUFF
+1];

302 
m
,
n
;

303 * 
dú«me
 = 
NULL
;

304 * 
ba£«me
 = 
NULL
;

305 
ba£Àn
;

306 * 
mu…i
 = 
NULL
;

307 
DIR
 * 
dp
;

308 
dúít
 * 
dúbuf
;

309 
HTAºay
 * 
m©ches
 = 
NULL
;

310 #ifde‡
HT_REENTRANT


311 
dúít
 
ªsu…
;

314 i‡(!
∑th
Ë 
NULL
;

316 
	`SåAŒocC›y
(
dú«me
, 
∑th
);

317 
ba£«me
 = (
	`°ºchr
(
dú«me
, '/'));

318 i‡(!
ba£«me
)

319 
dú_m©ch_Áûed
;

320 *
ba£«me
++ = 0;

322 
mu…i
 = 
	`°ºchr
(
ba£«me
, 
MULTI_SUFFIX
[0]);

323 i‡(
mu…i
 && !
	`°rˇ£comp
(mu…i, 
MULTI_SUFFIX
))

324 *
mu…i
 = 0;

325 
ba£Àn
 = 
	`°æí
(
ba£«me
);

327 
m
 = 
	`HTS∂ôFûíame
(
ba£«me
, 
ªquúed
);

329 
dp
 = 
	`›ídú
(
dú«me
);

330 i‡(!
dp
) {

331 
	`HTTRACE
(
PROT_TRACE
, "W¨nög..... C™'à›í dúe˘‹y %s\n" 
_
 
dú«me
);

332 
dú_m©ch_Áûed
;

335 
m©ches
 = 
	`HTAºay_√w
(
VARIANTS
);

336 #ifde‡
HAVE_READDIR_R_2


337 (
dúbuf
 = (
dúít
 *Ë
	`ªaddú_r
(
dp
, &
ªsu…
))) {

338 #ñi‡
	`deföed
(
HAVE_READDIR_R_3
)

339 
	`ªaddú_r
(
dp
, &
ªsu…
, &
dúbuf
) == 0) {

341 (
dúbuf
 = 
	`ªaddú
(
dp
))) {

343 i‡(!
dúbuf
->
d_öo
) ;

344 i‡(!
	`°rcmp
(
dúbuf
->
d_«me
,".") ||

345 !
	`°rcmp
(
dúbuf
->
d_«me
,"..") ||

346 !
	`°rcmp
(
dúbuf
->
d_«me
, 
DEFAULT_DIR_FILE
))

352 i‡((Ë
	`°æí
(
dúbuf
->
d_«me
Ë>
ba£Àn
) {

353 
n
 = 
	`HTS∂ôFûíame
(
dúbuf
->
d_«me
, 
a˘uÆ
);

354 i‡(
	`mu…i_m©ch
(
ªquúed
, 
m
, 
a˘uÆ
, 
n
)) {

355 
HTC⁄ã¡Des¸ùti⁄
 * 
cd
;

356 i‡((
cd
 = (
HTC⁄ã¡Des¸ùti⁄
 *)

357 
	`HT_CALLOC
(1, (
HTC⁄ã¡Des¸ùti⁄
))Ë=
NULL
)

358 
	`HT_OUTOFMEM
("dir_matches");

359 i‡(
	`HTBöd_gëF‹m©
(
dúbuf
->
d_«me
,

360 &
cd
->
c⁄ã¡_ty≥
,

361 &
cd
->
c⁄ã¡_ícodög
,

362 &
cd
->
c⁄ã¡_å™s„r
,

363 &
cd
->
c⁄ã¡_œnguage
,

364 &
cd
->
quÆôy
)) {

365 i‡(
cd
->
c⁄ã¡_ty≥
) {

366 i‡((
cd
->
fûíame
 = (*Ë
	`HT_MALLOC
(
	`°æí
(
dú«me
Ë+ 2 + såÀn(
dúbuf
->
d_«me
))Ë=
NULL
)

367 
	`HT_OUTOFMEM
("dir_matches");

368 
	`•rötf
(
cd
->
fûíame
, "%s/%s", 
dú«me
, 
dúbuf
->
d_«me
);

369 
	`HTAºay_addObje˘
(
m©ches
, (*Ë
cd
);

371 
	`HT_FREE
(
cd
);

374 
	`HT_FREE
(
cd
);

379 
	`˛o£dú
(
dp
);

381 
dú_m©ch_Áûed
:

382 
	`HT_FREE
(
dú«me
);

383  
m©ches
;

384 
	}
}

399 
PRIVATE
 * 
	$HTGëBe°
 (
HTReque°
 * 
ªq
, * 
∑th
)

401 
HTAºay
 * 
v¨ü¡s
 = 
NULL
;

402 * 
ª¥e£¡©i⁄
 = 
NULL
;

404 i‡(!
∑th
 || !*∑thË 
NULL
;

406 i‡((
v¨ü¡s
 = 
	`dú_m©ches
(
∑th
)Ë=
NULL
) {

407 
	`HTTRACE
(
PROT_TRACE
, "Nÿm©ches.. f‹ \"%s\"\n" 
_
 
∑th
);

408  
NULL
;

411 #ifde‡
HTDEBUG


412 i‡(
PROT_TRACE
) {

413 ** 
d©a
;

414 
HTC⁄ã¡Des¸ùti⁄
 * 
cd
 = 
	`HTAºay_fú°Obje˘
(
v¨ü¡s
, 
d©a
);

415 
	`HTTRACE
(
PROT_TRACE
, "Mu…i....... Possibûôõ†f‹ \"%s\"\n" 
_
 
∑th
);

416 
	`HTTRACE
(
PROT_TRACE
, " QUALITY CONTENT-TYPE LANGUAGE ENCODING FILE\n");

417 
cd
) {

418 
	`HTTRACE
(
PROT_TRACE
, " %.4‡ %-20.20†%-8.8†%-10.10†%s\n" 
_


419 
cd
->
quÆôy
 
_


420 
cd
->
c⁄ã¡_ty≥
 ?
	`HTAtom_«me
(cd->c⁄ã¡_ty≥Ë:"-\t" 
_


421 
cd
->
c⁄ã¡_œnguage
?
	`HTAtom_«me
(cd->c⁄ã¡_œnguage):"-" 
_


422 
cd
->
c⁄ã¡_ícodög
?
	`HTAtom_«me
(cd->c⁄ã¡_ícodög):"-" 
_


423 
cd
->
fûíame
 ?cd->filename :"-");

424 
cd
 = (
HTC⁄ã¡Des¸ùti⁄
 *Ë
	`HTAºay_√xtObje˘
(
v¨ü¡s
, 
d©a
);

432 i‡(
	`HTR™k
(
ªq
, 
v¨ü¡s
)) {

433 ** 
d©a
;

434 
HTC⁄ã¡Des¸ùti⁄
 * 
cd
 = 
	`HTAºay_fú°Obje˘
(
v¨ü¡s
, 
d©a
);

435 
cd
) {

436 i‡(
cd
->
fûíame
) {

437 i‡(
	`ac˚ss
(
cd
->
fûíame
, 
R_OK
) != -1)

438 
	`SåAŒocC›y
(
ª¥e£¡©i⁄
, 
cd
->
fûíame
);

439 
	`HTTRACE
(
PROT_TRACE
, "Mu…i....... `%s\' i†nŸÑódabÀ\n" 
_


440 
cd
->
fûíame
);

442 
	`HT_FREE
(
cd
->
fûíame
);

443 
	`HT_FREE
(
cd
);

444 
cd
 = (
HTC⁄ã¡Des¸ùti⁄
 *Ë
	`HTAºay_√xtObje˘
(
v¨ü¡s
, 
d©a
);

447 
	`HTAºay_dñëe
(
v¨ü¡s
);

448  
ª¥e£¡©i⁄
;

449 
	}
}

453 
PRIVATE
 
	$wñcome_vÆue
 (* 
«me
)

455 
HTLi°
 * 
cur
 = 
wñcome_«mes
;

456 * 
wñcome
;

457 
v
 = 0;

459 (
wñcome
 = (*)
	`HTLi°_√xtObje˘
(
cur
))) {

460 
v
++;

461 i‡(!
	`°rcmp
(
wñcome
,
«me
)Ë 
v
;

464 
	}
}

468 
PRIVATE
 * 
	$gë_be°_wñcome
 (* 
∑th
)

470 * 
be°_wñcome
 = 
NULL
;

471 
be°_vÆue
 = 0;

472 
DIR
 * 
dp
;

473 
dúít
 * 
dúbuf
;

474 * 
œ°
 = 
	`°ºchr
(
∑th
, '/');

476 i‡(!
wñcome_«mes
) {

477 
	`HTAddWñcome
("Welcome.html");

478 
	`HTAddWñcome
("welcome.html");

480 
	`HTAddWñcome
("Index.html");

482 
	`HTAddWñcome
("index.html");

485 i‡(
œ°
 &&Üa°!=
∑th
) *last = 0;

486 
dp
 = 
	`›ídú
(
∑th
);

487 i‡(
œ°
 &&Üa°!=
∑th
) *last='/';

488 i‡(!
dp
) {

489 
	`HTTRACE
(
PROT_TRACE
, "W¨nög..... C™'à›í dúe˘‹y %s\n" 
_
 
∑th
);

490  
NULL
;

492 (
dúbuf
 = 
	`ªaddú
(
dp
))) {

493 i‡(!
dúbuf
->
d_öo
 ||

494 !
	`°rcmp
(
dúbuf
->
d_«me
,".") ||

495 !
	`°rcmp
(
dúbuf
->
d_«me
,"..") ||

496 !
	`°rcmp
(
dúbuf
->
d_«me
, 
DEFAULT_DIR_FILE
))

499 
v
 = 
	`wñcome_vÆue
(
dúbuf
->
d_«me
);

500 i‡(
v
 > 
be°_vÆue
) {

501 
be°_vÆue
 = 
v
;

502 
	`SåAŒocC›y
(
be°_wñcome
, 
dúbuf
->
d_«me
);

506 
	`˛o£dú
(
dp
);

508 i‡(
be°_wñcome
) {

509 * 
wñcome
;

510 i‡((
wñcome
 = (*Ë
	`HT_MALLOC
(
	`°æí
(
∑th
Ë+ såÀn(
be°_wñcome
)+2)Ë=
NULL
)

511 
	`HT_OUTOFMEM
("get_best_welcome");

512 
	`•rötf
(
wñcome
, "%s%s%s", 
∑th
, 
œ°
 ? "" : "/", 
be°_wñcome
);

513 
	`HT_FREE
(
be°_wñcome
);

514 
	`HTTRACE
(
PROT_TRACE
, "Wñcome..... \"%s\"\n" 
_
 
wñcome
);

515  
wñcome
;

517  
NULL
;

518 
	}
}

540 
PUBLIC
 * 
	$HTMu…i
 (
HTReque°
 * 
ªq
,

541 * 
∑th
,

542 
°©
 * 
°©_öfo
)

544 * 
√w_∑th
 = 
NULL
;

545 
°©_°©us
 = -1;

547 i‡(!
ªq
 || !
∑th
 || !*∑th || !
°©_öfo
)

548  
NULL
;

550 #ifde‡
HAVE_READDIR


551 i‡(*(
∑th
+
	`°æí
(path)-1) == '/') {

552 
√w_∑th
 = 
	`gë_be°_wñcome
(
∑th
);

553 i‡(
√w_∑th
Ë
∑th
 =Çew_path;

555 * 
mu…i
 = 
	`°ºchr
(
∑th
, 
MULTI_SUFFIX
[0]);

556 i‡(
mu…i
 && !
	`°rˇ£comp
(mu…i, 
MULTI_SUFFIX
)) {

557 
	`HTTRACE
(
PROT_TRACE
, "Mu…i....... by %†suffix\n" 
_
 
MULTI_SUFFIX
);

558 i‡(!(
√w_∑th
 = 
	`HTGëBe°
(
ªq
, 
∑th
))) {

559 
	`HTTRACE
(
PROT_TRACE
, "Multi....... failed -- giving up\n");

560  
NULL
;

562 
∑th
 = 
√w_∑th
;

564 
°©_°©us
 = 
	`HT_STAT
(
∑th
, 
°©_öfo
);

565 i‡(
°©_°©us
 == -1) {

566 
	`HTTRACE
(
PROT_TRACE
, "AutoMu…i... c™'à°© \"%s\"”ºnÿ%d)\n" 
_


567 
∑th
 
_
 
î∫o
);

568 i‡(!(
√w_∑th
 = 
	`HTGëBe°
(
ªq
, 
∑th
))) {

569 
	`HTTRACE
(
PROT_TRACE
, "AutoMulti... failed -- giving up\n");

570  
NULL
;

572 
∑th
 = 
√w_∑th
;

578 i‡(
°©_°©us
 == -1)

579 
°©_°©us
 = 
	`HT_STAT
(
∑th
, 
°©_öfo
);

580 i‡(
°©_°©us
 == -1) {

581 
	`HTTRACE
(
PROT_TRACE
, "SèàÁûs.. o¿\"%s\" -- givög u∞”ºnÿ%d)\n" 
_


582 
∑th
 
_
 
î∫o
);

583  
NULL
;

585 i‡(!
√w_∑th
) {

586 
	`SåAŒocC›y
(
√w_∑th
, 
∑th
);

587  
√w_∑th
;

589  
∑th
;

591 
	}
}

	@Library/src/HTMulti.h

34 #i‚de‡
HTMULTI_H


35 
	#HTMULTI_H


	)

37 
	~"HTReq.h
"

49 
HTAddWñcome
 (* 
wñcome_«me
);

60 * 
HTMu…i
 (
HTReque°
 * 
ªq
,

61 * 
∑th
,

62 
°©
 * 
°©_öfo
);

	@Library/src/HTMuxCh.c

18 
	~"wwwsys.h
"

19 
	~"WWWUtû.h
"

20 
	~"WWWC‹e.h
"

21 
	~"WWWTøns.h
"

22 
	~"WWWSåóm.h
"

23 
	~"HTMuxTx.h
"

24 
	~"HTMuxHódî.h
"

25 
	~"HTDemux.h
"

26 
	~"HTMuxCh.h
"

28 
	#MAX_SESSIONS
 0xFF

	)

30 
	#SID_BASE
 2

	)

31 
	#RECEIVER_OFFSET
 0

	)

32 
	#SENDER_OFFSET
 1

	)

34 
	s_HTSåóm
 {

35 c⁄° 
HTSåómCœss
 * 
	miß
;

39 
	s_HTOuçutSåóm
 {

40 c⁄° 
HTOuçutSåómCœss
 * 
	miß
;

44 
	#PUTBLOCK
(
b
,
l
Ë(*
me
->
iß
->
put_block
)(me,(b),÷))

	)

46 
	s_HTMuxPrŸocﬁ
 {

47 
HTAtom
 * 
	m«me
;

48 
HTPrŸocﬁId
 
	mpid
;

51 
	s_HTMuxSessi⁄
 {

52 
HTMuxSessi⁄Id
 
	msid
;

53 
HTPrŸocﬁId
 
	mpid
;

54 
HTNë
 * 
	m√t
;

57 
HTMuxClo£
 
	m˛o£
;

58 
	m¸edô
;

59 
	m‰agmít
;

60 
	mªad
;

63 
HTSåóm
 * 
	mbuf„r
;

64 
BOOL
 
	mbuf„rög
;

67 
	s_HTMuxCh™√l
 {

68 
	mhash
;

69 
HTHo°
 * 
	mho°
;

70 
	mmax_sid
;

71 
HTNë
 * 
	m√t
;

72 
HTLi°
 * 
	m¥Ÿocﬁs
;

73 
HTMuxSessi⁄
 * 
	m£ssi⁄s
[
MAX_SESSIONS
];

76 
PRIVATE
 
HTLi°
 ** 
	gmuxchs
 = 
NULL
;

80 
PRIVATE
 
HTMuxSessi⁄
 * 
	$£ssi⁄_√w
 ()

82 
HTMuxSessi⁄
 * 
me
;

83 i‡((
me
 = (
HTMuxSessi⁄
 *Ë
	`HT_CALLOC
(1, (HTMuxSessi⁄))Ë=
NULL
)

84 
	`HT_OUTOFMEM
("HTMuxSession_new");

85 
me
->
¸edô
 = 
DEFAULT_CREDIT
;

86  
me
;

87 
	}
}

89 
PRIVATE
 
BOOL
 
	$£ssi⁄_dñëe
 (
HTMuxSessi⁄
 * 
£ssi⁄
)

91 i‡(
£ssi⁄
) {

92 
	`HT_FREE
(
£ssi⁄
);

93  
YES
;

95  
NO
;

96 
	}
}

98 
PUBLIC
 
HTMuxSessi⁄
 * 
	$HTMuxSessi⁄_ªgi°î
 (
HTMuxCh™√l
 * 
muxch
,

99 
HTMuxSessi⁄Id
 
sid
, 
HTPrŸocﬁId
 
pid
)

101 i‡(
muxch
) {

102 
HTMuxSessi⁄
 * 
£ssi⁄
 = 
muxch
->
£ssi⁄s
[
sid
];

103 i‡(
£ssi⁄
 =
NULL
) {

104 
£ssi⁄
 = 
	`£ssi⁄_√w
();

105 
£ssi⁄
->
sid
 = sid;

106 
£ssi⁄
->
pid
 =Öid;

107 
muxch
->
£ssi⁄s
[
sid
] = 
£ssi⁄
;

108 
	`HTTRACE
(
MUX_TRACE
, "Mux Ch™√l. Regi°îed sessi⁄ %d o¿ch™√»%p\n" 
_


109 
sid
 
_
 
muxch
);

111  
£ssi⁄
;

113 
	`HTTRACE
(
MUX_TRACE
, "Mux Channel. Can'tÑegisterÇew session\n");

114  
NULL
;

115 
	}
}

117 
PUBLIC
 
HTMuxSessi⁄Id
 
	$HTMuxSessi⁄_ac˚±
 (
HTMuxCh™√l
 * 
muxch
, 
HTNë
 * 
√t
,

118 
HTPrŸocﬁId
 
pid
)

120 i‡(
muxch
 && 
√t
) {

121 
HTMuxSessi⁄
 * 
£ssi⁄
;

122 
HTMuxSessi⁄Id
 
sid
 = 
SID_BASE
 + 
RECEIVER_OFFSET
;

123 ; 
sid
<
MAX_SESSIONS
; sid+=2) {

124 i‡((
£ssi⁄
 = 
muxch
->
£ssi⁄s
[
sid
]) &&

125 
£ssi⁄
->
√t
 =
NULL
 && sessi⁄->
pid
 ==Öid) {

126 
	`HTTRACE
(
MUX_TRACE
, "Mux Ch™√l. Ac˚±ög sessi⁄ %d o¿ch™√»%p\n" 
_


127 
sid
 
_
 
muxch
);

128  
sid
;

132 
	`HTTRACE
(
MUX_TRACE
, "Mux Channel. Can'tácceptÇew session\n");

133  
INVSID
;

134 
	}
}

136 
PUBLIC
 
HTMuxSessi⁄Id
 
	$HTMuxSessi⁄_c⁄√˘
 (
HTMuxCh™√l
 * 
muxch
, 
HTNë
 * 
√t
,

137 
HTPrŸocﬁId
 
pid
)

139 i‡(
muxch
 && 
√t
) {

140 
HTMuxSessi⁄Id
 
sid
 = 
SID_BASE
 + 
SENDER_OFFSET
;

141 ; 
sid
<
MAX_SESSIONS
; sid+=2) {

142 i‡(
muxch
->
£ssi⁄s
[
sid
] =
NULL
) {

143 
HTMuxSessi⁄
 * 
£ssi⁄
 = 
	`£ssi⁄_√w
();

144 
£ssi⁄
->
sid
 = sid;

145 
£ssi⁄
->
pid
 =Öid;

146 
£ssi⁄
->
√t
 =Çet;

147 
muxch
->
£ssi⁄s
[
sid
] = 
£ssi⁄
;

148 
	`HTTRACE
(
MUX_TRACE
, "Mux Ch™√l. Cª©ög sessi⁄ %d o¿ch™√»%p\n" 
_


149 
sid
 
_
 
muxch
);

150  
sid
;

154 
	`HTTRACE
(
MUX_TRACE
, "Mux Channel. Can't createÇew session\n");

155  
INVSID
;

156 
	}
}

158 
PUBLIC
 
	$HTMuxSessi⁄_˛o£
 (
HTMuxCh™√l
 * 
muxch
, 
HTMuxSessi⁄Id
 
sid
)

160 i‡(
muxch
) {

161 
HTMuxSessi⁄
 * 
£ssi⁄
 = 
muxch
->
£ssi⁄s
[
sid
];

162 
	`HTMuxSessi⁄_£tClo£
(
muxch
, 
£ssi⁄
, 
MUX_S_END_WRITE
);

163  
YES
;

165  
NO
;

166 
	}
}

168 
PUBLIC
 
HTMuxSessi⁄Id
 
	$HTMuxSessi⁄_id
 (
HTMuxSessi⁄
 * 
£ssi⁄
)

170  
£ssi⁄
 ? sessi⁄->
sid
 : 
INVSID
;

171 
	}
}

173 
PUBLIC
 
HTPrŸocﬁId
 
	$HTMuxSessi⁄_pid
 (
HTMuxSessi⁄
 * 
£ssi⁄
)

175  
£ssi⁄
 ? sessi⁄->
pid
 : 
INVPID
;

176 
	}
}

178 
PUBLIC
 
HTNë
 * 
	$HTMuxSessi⁄_√t
 (
HTMuxSessi⁄
 * 
£ssi⁄
)

180  
£ssi⁄
 ? sessi⁄->
√t
 : 
NULL
;

181 
	}
}

183 
PUBLIC
 
BOOL
 
	$HTMuxSessi⁄_£tClo£
 (
HTMuxCh™√l
 * 
muxch
,

184 
HTMuxSessi⁄
 * 
£ssi⁄
, 
HTMuxClo£
 
˛o£
)

186 i‡(
muxch
 && 
£ssi⁄
) {

187 
£ssi⁄
->
˛o£
 |= close;

193 i‡(
£ssi⁄
->
˛o£
 =
MUX_S_END
) {

194 
	`HTTRACE
(
MUX_TRACE
, "Mux Ch™√l. Closög sessi⁄ %d o¿ch™√»%p\n" 
_


195 
£ssi⁄
->
sid
 
_
 
muxch
);

196 
muxch
->
£ssi⁄s
[
£ssi⁄
->
sid
] = 
NULL
;

197 
	`£ssi⁄_dñëe
(
£ssi⁄
);

199  
YES
;

201  
NO
;

202 
	}
}

204 
PUBLIC
 
	$HTMuxSessi⁄_¸edô
 (
HTMuxSessi⁄
 * 
£ssi⁄
)

206  
£ssi⁄
 ? sessi⁄->
¸edô
 : -1;

207 
	}
}

209 
PUBLIC
 
BOOL
 
	$HTMuxSessi⁄_£tCªdô
 (
HTMuxCh™√l
 * 
muxch
,

210 
HTMuxSessi⁄Id
 
sid
, 
¸edô
)

212 
HTMuxSessi⁄
 * 
£ssi⁄
;

213 i‡(
muxch
 && (
£ssi⁄
 = muxch->
£ssi⁄s
[
sid
])) {

214 
£ssi⁄
->
¸edô
 = credit;

215  
YES
;

217  
NO
;

218 
	}
}

220 
PUBLIC
 
	$HTMuxSessi⁄_‰agmít
 (
HTMuxSessi⁄
 * 
£ssi⁄
)

222  
£ssi⁄
 ? sessi⁄->
‰agmít
 : -1;

223 
	}
}

225 
PUBLIC
 
BOOL
 
	$HTMuxSessi⁄_£tFøgmít
 (
HTMuxCh™√l
 * 
muxch
,

226 
HTMuxSessi⁄Id
 
sid
, 
‰agmít
)

228 
HTMuxSessi⁄
 * 
£ssi⁄
;

229 i‡(
muxch
 && (
£ssi⁄
 = muxch->
£ssi⁄s
[
sid
])) {

230 
£ssi⁄
->
‰agmít
 = fragment;

231  
YES
;

233  
NO
;

234 
	}
}

243 
PUBLIC
 
	$HTMuxSessi⁄_di•o£D©a
 (
HTMuxSessi⁄
 * 
me
, c⁄° * 
buf
, 
Àn
)

245 
	`HTTRACE
(
MUX_TRACE
, "Mux Ch™√l. Wrôög %d byã†tÿ£ssi⁄ %p\n" 
_
 
Àn
 _ 
me
);

254 i‡(
me
) {

255 
HTNë
 * 
√t
;

256 
HTSåóm
 * 
sök
;

257 
°©us
;

258 i‡((
√t
 = 
me
->√tË&& (
sök
 = 
	`HTNë_ªadSåóm
(net))) {

264 i‡(
me
->
buf„r
 && me->
buf„rög
) {

265 i‡((*
me
->
buf„r
->
iß
->
Êush
)(me->buf„rË=
HT_OK
) {

266 
	`HTTRACE
(
MUX_TRACE
, "Mux Channel. Flushed buffered data\n");

267 
me
->
buf„rög
 = 
NO
;

268 } i‡((*
me
->
buf„r
->
iß
->
put_block
)(me->buf„r, 
buf
, 
Àn
) >= 0) {

269 
	`HTTRACE
(
MUX_TRACE
, "Mux Channel. Bufferáccepted data\n");

272 
	`HTTRACE
(
MUX_TRACE
, "Mux Channel. Can't buffer data\n");

281 i‡((
°©us
 = (*
sök
->
iß
->
put_block
)(sök, 
buf
, 
Àn
)) >= 0) {

282 
	`HTTRACE
(
MUX_TRACE
, "Mux Ch™√l. SåómÑëu∫ed %d\n" 
_
 
°©us
);

288 i‡(
°©us
 =
HT_LOADED
) {

289 
	`HTNë_execuã
 (
√t
, 
HTEvít_END
);

297 
me
->
ªad
 +
Àn
;

298 i‡(
me
->
ªad
 >
DEFAULT_CREDIT
 / 2) {

299 
me
->
ªad
 = 0;

310 i‡(!
me
->
buf„r
) {

311 
me
->
buf„r
 = 
	`HTPùeBuf„r
(
sök
, 
DEFAULT_CREDIT
);

312 
me
->
buf„rög
 = 
YES
;

314 
°©us
 = (*
me
->
buf„r
->
iß
->
put_block
)(me->buf„r, 
buf
, 
Àn
);

315 i‡(
°©us
 >= 0) {

316 
	`HTTRACE
(
MUX_TRACE
, "Mux Channel. Bufferáccepted data\n");

319 
	`HTTRACE
(
MUX_TRACE
, "Mux Ch™√l. Buf„∏ªtu∫ed %d\n" 
_
 
°©us
);

322 
	}
}

326 
PRIVATE
 
BOOL
 
	$ch™√l_dñëe
 (
HTMuxCh™√l
 * 
ch
)

328 i‡(
ch
) {

329 
	`HT_FREE
(
ch
);

330  
YES
;

332  
NO
;

333 
	}
}

335 
PUBLIC
 
HTMuxCh™√l
 * 
	$HTMuxCh™√l_√w
 (
HTHo°
 * 
ho°
)

337 i‡(
ho°
) {

338 
HTMuxCh™√l
 * 
me
 = 
NULL
;

341 i‡((
me
 = (
HTMuxCh™√l
 *Ë
	`HT_CALLOC
(1, (HTMuxCh™√l))Ë=
NULL
)

342 
	`HT_OUTOFMEM
("HTMuxChannel_new");

343 
me
->
hash
 = 
	`HTHo°_hash
(
ho°
);

344 
me
->
ho°
 = host;

349 
	`HTHo°_£tMode
(
ho°
, 
HT_TP_INTERLEAVE
);

355 
me
->
√t
 = 
	`HTNë_√w
(
NULL
);

356 
	`HTNë_£tRódSåóm
(
me
->
√t
, 
	`HTDemux_√w
(
ho°
, me));

359 i‡(!
muxchs
) {

360 i‡((
muxchs
=(
HTLi°
 **Ë
	`HT_CALLOC
(
HOST_HASH_SIZE
, (HTLi° *))Ë=
NULL
)

361 
	`HT_OUTOFMEM
("HTMuxChannel_new");

363 i‡(!
muxchs
[
me
->
hash
]Ëmuxchs[me->hash] = 
	`HTLi°_√w
();

364 
	`HTLi°_addObje˘
(
muxchs
[
me
->
hash
], (*) me);

365 
	`HTTRACE
(
MUX_TRACE
, "Mux Ch™√l. %∞¸óãd wôh hash %d\n" 
_
 
me
 _ me->
hash
);

366  
me
;

368  
NULL
;

369 
	}
}

371 
PUBLIC
 
HTMuxCh™√l
 * 
	$HTMuxCh™√l_föd
 (
HTHo°
 * 
ho°
)

373 i‡(
muxchs
) {

374 
hash
 = 
	`HTHo°_hash
(
ho°
);

375 
HTLi°
 * 
li°
 = 
muxchs
[
hash
];

376 i‡(
li°
) {

377 
HTMuxCh™√l
 * 
¥es
 = 
NULL
;

378 (
¥es
 = (
HTMuxCh™√l
 *Ë
	`HTLi°_√xtObje˘
(
li°
)))

379 i‡(
¥es
->
ho°
 == host) Öres;

382  
NULL
;

383 
	}
}

385 
PUBLIC
 
BOOL
 
	$HTMuxCh™√l_dñëe
 (
HTMuxCh™√l
 * 
me
)

387 i‡(
me
) {

388 
HTLi°
 * 
li°
 = 
NULL
;

389 
	`HTTRACE
(
MUX_TRACE
, "Mux Ch™√l. Dñëög %p\n" 
_
 
me
);

390 i‡(
muxchs
 && (
li°
 = muxchs[
me
->
hash
])) {

391 
	`HTLi°_ªmoveObje˘
(
li°
, (*Ë
me
);

392 
	`ch™√l_dñëe
(
me
);

393  
YES
;

396  
NO
;

397 
	}
}

399 
PUBLIC
 
BOOL
 
	$HTMuxCh™√l_dñëeAŒ
 ()

401 i‡(
muxchs
) {

402 
HTLi°
 * 
cur
;

403 
˙t
;

404 
˙t
=0; c¡<
HOST_HASH_SIZE
; cnt++) {

405 i‡((
cur
 = 
muxchs
[
˙t
])) {

406 
HTMuxCh™√l
 * 
¥es
;

407 (
¥es
 = (
HTMuxCh™√l
 *Ë
	`HTLi°_√xtObje˘
(
cur
)))

408 
	`ch™√l_dñëe
(
¥es
);

410 
	`HTLi°_dñëe
(
muxchs
[
˙t
]);

412 
	`HT_FREE
(
muxchs
);

414  
YES
;

415 
	}
}

417 
PUBLIC
 
HTNë
 * 
	$HTMuxCh™√l_√t
 (
HTMuxCh™√l
 * 
me
)

419  
me
 ? me->
√t
 : 
NULL
;

420 
	}
}

422 
PUBLIC
 
HTMuxSessi⁄
 * 
	$HTMuxCh™√l_födSessi⁄
 (
HTMuxCh™√l
 * 
me
, 
HTMuxSessi⁄Id
 
sid
)

424  (
me
Ë? me->
£ssi⁄s
[
sid
] : 
NULL
;

425 
	}
}

428 
PRIVATE
 
HTMuxSessi⁄
 * 
	$HTMuxCh™√l_födSessi⁄FromNë
 (
HTMuxCh™√l
 * 
me
, 
HTNë
 * 
√t
)

430 i‡(
me
 && 
√t
) {

431 
˙t
 = 0;

432 
HTMuxSessi⁄
 **
£ssi⁄
 = 
me
->
£ssi⁄s
;

433 
˙t
<
MAX_SESSIONS
) {

434 i‡(**
£ssi⁄
->
√t
 ==Çet)  *session;

435 
£ssi⁄
++, 
˙t
++;

438  
NULL
;

439 
	}
}

442 
PUBLIC
 
HTHo°
 * 
	$HTMuxCh™√l_ho°
 (
HTMuxCh™√l
 * 
muxch
)

444  
muxch
 ? muxch->
ho°
 : 
NULL
;

445 
	}
}

447 
PUBLIC
 
	$HTMuxCh™√l_£ndC⁄åﬁ
 (
HTMuxCh™√l
 * 
muxch
, 
HTMuxSessi⁄Id
 
sid
,

448 
HTMuxHódî
 
›code
, 
vÆue
,

449 c⁄° * 
∑øm
, 
∑øm_size
)

451 i‡(
muxch
 && muxch->
ho°
) {

452 
HTOuçutSåóm
 * 
me
 = 
	`HTCh™√l_ouçut
(
	`HTHo°_ch™√l
(
muxch
->
ho°
));

453 
HTMuxHódî
 
hódî
[2];

454 
›code
) {

455 
MUX_STRING
:

456 i‡(
∑øm
 && 
∑øm_size
) {

457 
hódî
[0] = 
	`HT_WORDSWAP
(
MUX_CONTROL
 | 
MUX_LONG_LENGTH
 | 
	`MUX_SET_LEN
(
vÆue
));

458 
hódî
[1] = 
	`HT_WORDSWAP
(
∑øm_size
);

459 
	`PUTBLOCK
((c⁄° *Ë
hódî
, 8);

460 
	`PUTBLOCK
((c⁄° *Ë
∑øm
, 
	`MUX_LONG_ALIGN
(
∑øm_size
));

463 
MUX_STACK
:

464 i‡(
∑øm
 && 
∑øm_size
) {

465 
hódî
[0] = 
	`HT_WORDSWAP
(
MUX_CONTROL
 | 
MUX_LONG_LENGTH
 | 
	`MUX_SET_LEN
(
vÆue
));

466 
hódî
[1] = 
	`HT_WORDSWAP
(
∑øm_size
);

467 
	`PUTBLOCK
((c⁄° *Ë
hódî
, 8);

468 
	`PUTBLOCK
((c⁄° *Ë
∑øm
, 
	`MUX_LONG_ALIGN
(
∑øm_size
));

471 
MUX_FRAGMENT
:

472 
hódî
[0] = 
	`HT_WORDSWAP
(
MUX_CONTROL
 | 
	`MUX_SET_SID
(
sid
Ë| 
	`MUX_SET_LEN
(
vÆue
));

473 
	`PUTBLOCK
((c⁄° *Ë
hódî
, 4);

475 
MUX_CREDIT
:

476 
hódî
[0] = 
	`HT_WORDSWAP
(
MUX_CONTROL
 | 
MUX_LONG_LENGTH
 | 
	`MUX_SET_SID
(
sid
));

477 
hódî
[1] = 
	`HT_WORDSWAP
(
vÆue
);

478 
	`PUTBLOCK
((c⁄° *Ë
hódî
, 8);

481 
	`HTTRACE
(
MUX_TRACE
, "Mux Ch™√l. UNKNOWN OPCODE %d\n" 
_
 
›code
);

482  
HT_ERROR
;

487  (*
me
->
iß
->
Êush
)(me);

489  
HT_OK
;

492  
HT_ERROR
;

493 
	}
}

497 
PUBLIC
 
BOOL
 
	$HTMuxPrŸocﬁ_add
 (
HTMuxCh™√l
 * 
muxch
,

498 
HTPrŸocﬁId
 
pid
, c⁄° * 
¥Ÿocﬁ
)

500 i‡(
muxch
 && 
¥Ÿocﬁ
) {

501 
HTMuxPrŸocﬁ
 * 
ms
;

502 i‡((
ms
 = (
HTMuxPrŸocﬁ
 *Ë
	`HT_CALLOC
(1, (HTMuxPrŸocﬁ))Ë=
NULL
)

503 
	`HT_OUTOFMEM
("HTMuxProtocol_new");

504 
ms
->
«me
 = 
	`HTAtom_ˇ£F‹
(
¥Ÿocﬁ
);

505 
ms
->
pid
 =Öid;

506 i‡(!
muxch
->
¥Ÿocﬁs
Ëmuxch->¥Ÿocﬁ†
	`HTLi°_√w
();

507  
	`HTLi°_addObje˘
(
muxch
->
¥Ÿocﬁs
, 
ms
);

509  
NO
;

510 
	}
}

512 
PUBLIC
 
BOOL
 
	$HTMuxPrŸocﬁ_dñëe
 (
HTMuxCh™√l
 * 
muxch
, 
HTPrŸocﬁId
 
pid
)

514 i‡(
muxch
 && muxch->
¥Ÿocﬁs
) {

515 
HTLi°
 * 
cur
 = 
muxch
->
¥Ÿocﬁs
;

516 
HTMuxPrŸocﬁ
 * 
¥es
;

517 (
¥es
 = (
HTMuxPrŸocﬁ
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

518 i‡(
¥es
->
pid
 ==Öid) {

519 
	`HTLi°_ªmoveObje˘
(
muxch
->
¥Ÿocﬁs
, 
¥es
);

520 
	`HT_FREE
(
¥es
);

521  
YES
;

525  
NO
;

526 
	}
}

	@Library/src/HTMuxCh.h

27 #i‚de‡
HTMUXCHANNEL_H


28 
	#HTMUXCHANNEL_H


	)

30 
_HTMuxCh™√l
 
	tHTMuxCh™√l
;

31 
_HTMuxSessi⁄
 
	tHTMuxSessi⁄
;

32 
_HTMuxPrŸocﬁ
 
	tHTMuxPrŸocﬁ
;

34 
	tHTMuxSessi⁄Id
;

36 
	~"HTMuxHódî.h
"

37 
	~"HTCh™∆.h
"

38 
	~"HTHo°.h
"

40 
	#INVSID
 0

	)

41 
	#INVPID
 0

	)

49 
HTMuxCh™√l
 * 
HTMuxCh™√l_√w
 (
HTHo°
 * 
ho°
);

51 
HTMuxCh™√l
 * 
HTMuxCh™√l_föd
 (
HTHo°
 * 
ho°
);

53 
BOOL
 
HTMuxCh™√l_dñëe
 (
HTMuxCh™√l
 * 
me
);

55 
BOOL
 
HTMuxCh™√l_dñëeAŒ
 ();

57 
HTNë
 * 
HTMuxCh™√l_√t
 (
HTMuxCh™√l
 * 
me
);

59 
HTMuxSessi⁄
 * 
HTMuxCh™√l_födSessi⁄
 (
HTMuxCh™√l
 * 
me
, 
HTMuxSessi⁄Id
 
sid
);

61 
HTMuxSessi⁄
 * 
HTMuxCh™√l_födSessi⁄FromNë
 (
HTMuxCh™√l
 * 
me
,

62 
HTNë
 * 
√t
);

64 
HTHo°
 * 
HTMuxCh™√l_ho°
 (
HTMuxCh™√l
 * 
muxch
);

66 
HTMuxCh™√l_£ndC⁄åﬁ
 (
HTMuxCh™√l
 * 
muxch
, 
HTMuxSessi⁄Id
 
sid
,

67 
HTMuxHódî
 
›code
, 
vÆue
,

68 c⁄° * 
∑øm
, 
∑øm_size
);

77 
	e_HTMuxClo£
 {

78 
	mMUX_S_END_READ
 = 0x1,

79 
	mMUX_S_END_WRITE
 = 0x2,

80 
	mMUX_S_END
 = 0x3

81 } 
	tHTMuxClo£
;

83 
HTMuxSessi⁄Id
 
HTMuxSessi⁄_ac˚±
 (
HTMuxCh™√l
 * 
muxch
, 
HTNë
 * 
√t
,

84 
HTPrŸocﬁId
 
pid
);

86 
HTMuxSessi⁄Id
 
HTMuxSessi⁄_c⁄√˘
 (
HTMuxCh™√l
 * 
muxch
, 
HTNë
 * 
√t
,

87 
HTPrŸocﬁId
 
pid
);

89 
HTMuxSessi⁄_˛o£
 (
HTMuxCh™√l
 * 
muxch
, 
HTMuxSessi⁄Id
 
sid
);

91 
HTMuxSessi⁄
 * 
HTMuxSessi⁄_ªgi°î
 (
HTMuxCh™√l
 * 
muxch
,

92 
HTMuxSessi⁄Id
 
sid
,

93 
HTPrŸocﬁId
 
pid
);

95 
HTMuxSessi⁄Id
 
HTMuxSessi⁄_id
 (
HTMuxSessi⁄
 * 
£ssi⁄
);

97 
HTPrŸocﬁId
 
HTMuxSessi⁄_pid
 (
HTMuxSessi⁄
 * 
£ssi⁄
);

99 
HTNë
 * 
HTMuxSessi⁄_√t
 (
HTMuxSessi⁄
 * 
£ssi⁄
);

101 
BOOL
 
HTMuxSessi⁄_£tClo£
 (
HTMuxCh™√l
 * 
muxch
,

102 
HTMuxSessi⁄
 * 
£ssi⁄
, 
HTMuxClo£
 
˛o£
);

104 
HTMuxSessi⁄_¸edô
 (
HTMuxSessi⁄
 * 
£ssi⁄
);

106 
BOOL
 
HTMuxSessi⁄_£tCªdô
 (
HTMuxCh™√l
 * 
muxch
,

107 
HTMuxSessi⁄Id
 
sid
, 
¸edô
);

109 
HTMuxSessi⁄_‰agmít
 (
HTMuxSessi⁄
 * 
£ssi⁄
);

111 
BOOL
 
HTMuxSessi⁄_£tFøgmít
 (
HTMuxCh™√l
 * 
muxch
,

112 
HTMuxSessi⁄Id
 
sid
, 
‰agmít
);

114 
HTMuxSessi⁄_di•o£D©a
 (
HTMuxSessi⁄
 * 
me
,

115 c⁄° * 
buf
, 
Àn
);

123 
BOOL
 
HTMuxPrŸocﬁ_add
 (
HTMuxCh™√l
 * 
muxch
,

124 
HTPrŸocﬁId
 
pid
, c⁄° * 
¥Ÿocﬁ
);

126 
BOOL
 
HTMuxPrŸocﬁ_dñëe
 (
HTMuxCh™√l
 * 
muxch
, 
HTPrŸocﬁId
 
pid
);

	@Library/src/HTMuxHeader.h

25 #i‚de‡
HTMUXHEADER_H


26 
	#HTMUXHEADER_H


	)

36 #ifde‡
WORDS_BIGENDIAN


37 
	#HT_WORDSWAP
(
a
) ( ((a) << 24) | \

38 (((
a
) << 8) & 0x00ff0000) | \

39 (((
a
) >> 8) & 0x0000ff00) | \

40 (()(
a
Ë>> 24Ë)

	)

42 
	#HT_WORDSWAP
(
a
Ë(◊))

	)

53 
	tHTMuxHódî
;

61 
	#MUX_LONG_LENGTH
 0x80000000

	)

62 
	#MUX_CONTROL
 0x40000000

	)

70 
	#MUX_FLAGS
 0x3C000000

	)

71 
	#MUX_SYN
 0x20000000

	)

72 
	#MUX_FIN
 0x10000000

	)

73 
	#MUX_RST
 0x08000000

	)

74 
	#MUX_PUSH
 0x04000000

	)

82 
	#MUX_OPCODES
 0x3C000000

	)

83 
	#MUX_STRING
 0x00000000

	)

84 
	#MUX_STACK
 0x04000000

	)

85 
	#MUX_FRAGMENT
 0x08000000

	)

86 
	#MUX_CREDIT
 0x0C000000

	)

94 
	#MUX_SESSION
 0x03FC0000

	)

95 
	#MUX_LENGTH
 0x0003FFFF

	)

103 
	#MUX_SET_SID
(
sid
Ë((sidË<< 18)

	)

104 
	#MUX_SET_LEN
(
Àn
Ë(÷í))

	)

105 
	#MUX_SET_PID
 
MUX_SET_LEN


	)

106 
	#MUX_SET_OPCODE
(
›
Ë((›Ë<< 26)

	)

108 
	#MUX_GET_SID
(
sid
Ë(((sidË& 
MUX_SESSION
Ë>> 18)

	)

109 
	#MUX_GET_LEN
(
Àn
Ë(÷íË& 
MUX_LENGTH
)

	)

110 
	#MUX_GET_PID
 
MUX_GET_LEN


	)

111 
	#MUX_GET_OPCODE
(
›
Ë((›Ë& 
MUX_OPCODES
 >> 26)

	)

122 
	#LONG_LENGTH
 0

	)

123 
	#MUX_IS_LONG
(
hdr
Ë((hdrË& 
MUX_LONG_LENGTH
)

	)

125 
	#MUX_ALIGN
(
Àn
Ë(÷íË+ ((4-÷í)%4Ë% 4))

	)

126 
	#MUX_LONG_ALIGN
(
Àn
Ë(÷íË+ ((8-÷í)%8Ë% 8))

	)

136 
	#DEFAULT_CREDIT
 4096

	)

	@Library/src/HTMuxTx.c

18 
	~"wwwsys.h
"

19 
	~"WWWUtû.h
"

20 
	~"WWWC‹e.h
"

21 
	~"WWWTøns.h
"

22 
	~"HTMuxHódî.h
"

23 
	~"HTMuxCh.h
"

24 
	~"HTMuxTx.h
"

26 
	s_HTOuçutSåóm
 {

27 c⁄° 
HTOuçutSåómCœss
 * 
	miß
;

28 
HTOuçutSåóm
 * 
	mèrgë
;

29 
HTCh™√l
 * 
	mch
;

30 
	msize
;

31 
	mbb
;

32 * 
	mblock
;

33 * 
	mªad
;

34 * 
	md©a
;

37 
	#PUTBLOCK
(
b
,
l
Ë(*
me
->
èrgë
->
iß
->
put_block
)(me->èrgë,(b),÷))

	)

41 
PRIVATE
 
	$HTMuxBuf„r_wrôe
 (
HTOuçutSåóm
 *
me
, c⁄° *
buf
, 
Àn
)

43 
°©us
;

45 i‡(
me
->
bb
 > 0) {

46 
Àn
 -(
me
->
block
 - 
buf
);

47 i‡((
°©us
 = 
	`PUTBLOCK
(
me
->
block
, me->
bb
)Ë!
HT_OK
)  status;

48 
me
->
block
 +me->
bb
;

49 
Àn
 -
me
->
bb
;

50 
me
->
bb
 = 0;

52 
avaûabÀ
 = 
me
->
d©a
 + me->
size
 - me->
ªad
;

55 i‡(
Àn
 <
avaûabÀ
) {

56 
	`mem˝y
(
me
->
ªad
, 
buf
, 
Àn
);

57 
me
->
ªad
 +
Àn
;

58  
HT_OK
;

62 i‡(
me
->
ªad
 > me->
d©a
) {

63 
	`mem˝y
(
me
->
ªad
, 
buf
, 
avaûabÀ
);

64 
me
->
block
 = (*Ë
buf
+
avaûabÀ
;

65 i‡((
°©us
 = 
	`PUTBLOCK
(
me
->
d©a
, me->
size
))!=
HT_OK
)  status;

69 i‡(!
me
->
block
)

70 
me
->
block
 = (*Ë
buf
;

72 
Àn
 -(
me
->
block
 - 
buf
);

74 
me
->
bb
 = 
Àn
 -Üí%me->
size
;

75 i‡((
°©us
 = 
	`PUTBLOCK
(
me
->
block
, me->
bb
)Ë!
HT_OK
)  status;

76 
me
->
block
 +me->
bb
;

77 
Àn
 -
me
->
bb
;

78 
me
->
bb
 = 0;

82 i‡(
Àn
 > 0) {

83 
	`mem˝y
(
me
->
d©a
, me->
block
, 
Àn
);

84 
me
->
ªad
 = me->
d©a
 + 
Àn
;

86 
me
->
ªad
 = me->
d©a
;

87 
me
->
block
 = 
NULL
;

88  
HT_OK
;

89 
	}
}

91 
PRIVATE
 
	$HTMuxBuf„r_put_ch¨a˘î
 (
HTOuçutSåóm
 * 
me
, 
c
)

93  
	`HTMuxBuf„r_wrôe
(
me
, &
c
, 1);

94 
	}
}

96 
PRIVATE
 
	$HTMuxBuf„r_put_°rög
 (
HTOuçutSåóm
 * 
me
, c⁄° * 
s
)

98  
	`HTMuxBuf„r_wrôe
(
me
, 
s
, (Ë
	`°æí
(s));

99 
	}
}

101 
PRIVATE
 
	$HTMuxBuf„r_Êush
 (
HTOuçutSåóm
 * 
me
)

103 
°©us
 = 
HT_OK
;

104 i‡(
me
->
ªad
 > me->
d©a
) {

105 i‡((
°©us
 = 
	`PUTBLOCK
(
me
->
d©a
, me->
ªad
 - me->d©a))==
HT_WOULD_BLOCK
)

106  
HT_WOULD_BLOCK
;

107 
me
->
ªad
 = me->
d©a
;

108 
me
->
block
 = 
NULL
;

110  
°©us
;

111 
	}
}

113 
PRIVATE
 
	$HTMuxBuf„r_‰ì
 (
HTOuçutSåóm
 * 
me
)

116  
	`HTMuxBuf„r_Êush
(
me
);

118  
HT_OK
;

120 
	}
}

122 
PRIVATE
 
	$HTMuxBuf„r_ab‹t
 (
HTOuçutSåóm
 * 
me
, 
HTLi°
 * 
e
)

124 i‡(
me
->
èrgë
Ë(*me->èrgë->
iß
->
ab‹t
)(me->èrgë, 
e
);

125 
	`HTTRACE
(
PROT_TRACE
, "MUX Tx...... ABORTING...\n");

126  
HT_ERROR
;

127 
	}
}

135 
PRIVATE
 
	$HTMuxBuf„r_˛o£
 (
HTOuçutSåóm
 * 
me
)

137 i‡(
me
) {

138 
	`HTMuxBuf„r_Êush
(
me
);

139 i‡(
me
->
èrgë
Ë(*me->èrgë->
iß
->
˛o£
)(me->target);

140 
	`HT_FREE
(
me
->
d©a
);

141 
	`HT_FREE
(
me
);

143  
HT_OK
;

144 
	}
}

146 
PRIVATE
 c⁄° 
HTOuçutSåómCœss
 
	gHTMuxBuf„r
 =

149 
HTMuxBuf„r_Êush
,

150 
HTMuxBuf„r_‰ì
,

151 
HTMuxBuf„r_ab‹t
,

152 
HTMuxBuf„r_put_ch¨a˘î
,

153 
HTMuxBuf„r_put_°rög
,

154 
HTMuxBuf„r_wrôe
,

155 
HTMuxBuf„r_˛o£


158 
PUBLIC
 
HTOuçutSåóm
 * 
	$HTMuxBuf„r_√w
 (
HTHo°
 * 
ho°
, 
HTCh™√l
 * 
ch
,

159 * 
∑øm
, 
bufsize
)

161 i‡(
ho°
 && 
ch
) {

162 
HTOuçutSåóm
 * 
me
 = 
	`HTCh™√l_ouçut
(
ch
);

163 i‡(
me
 =
NULL
) {

164 i‡(
bufsize
 <0Ëbufsizê
MUX_BUFFER_SIZE
;

165 i‡((
me
 = (
HTOuçutSåóm
 *Ë
	`HT_CALLOC
(1, (HTOuçutSåóm))Ë=
NULL
 ||

166 (
me
->
d©a
 = (*Ë
	`HT_MALLOC
(
bufsize
)Ë=
NULL
)

167 
	`HT_OUTOFMEM
("HTMuxBuffer_new");

168 
me
->
iß
 = &
HTMuxBuf„r
;

169 
me
->
èrgë
 = 
	`HTWrôî_√w
(
ho°
, 
ch
, 
∑øm
, 0);

170 
me
->
ch
 = ch;

171 
me
->
size
 = 
bufsize
;

172 
me
->
ªad
 = me->
d©a
;

174  
me
;

176  
NULL
;

177 
	}
}

	@Library/src/HTMuxTx.h

32 #i‚de‡
HTMUXWRITE_H


33 
	#HTMUXWRITE_H


	)

39 
	#MUX_BUFFER_SIZE
 2048

	)

41 
HTOuçut_√w
 
HTMuxBuf„r_√w
;

	@Library/src/HTNDir.c

19 
	~"wwwsys.h
"

20 
	~"WWWUtû.h
"

21 
	~"WWWC‹e.h
"

22 
	~"WWWHTML.h
"

23 
	~"HTNews.h
"

24 
	~"HTNewsLs.h
"

25 
	~"HTNDú.h
"

28 
	#PUTC
(
c
Ë(*
èrgë
->
iß
->
put_ch¨a˘î
)—¨gë, c)

	)

29 
	#PUTS
(
s
Ë(*
èrgë
->
iß
->
put_°rög
)—¨gë, s)

	)

30 
	#START
(
e
Ë(*
èrgë
->
iß
->
°¨t_ñemít
)—¨gë,É, 0, 0)

	)

31 
	#END
(
e
Ë(*
èrgë
->
iß
->
íd_ñemít
)—¨gë,É)

	)

32 
	#FREE_TARGET
 (*
èrgë
->
iß
->
_‰ì
)—¨gë)

	)

34 
	#DEFAULT_MAXW
 80

	)

37 
	s_HTSåu˘uªd
 {

38 c⁄° 
HTSåu˘uªdCœss
 * 
	miß
;

42 
	s_HTNewsNode
 {

43 
	mödex
;

44 * 
	m«me
;

45 * 
	msubje˘
;

46 * 
	m‰om
;

47 
time_t
 
	md©e
;

48 
	mªfs
;

49 
BOOL
 
	mis_tm∂©e
;

52 
HTLi°
* 
	mªfNames
;

53 
HTLi°
* 
	mªfObje˘s
;

54 
HTNewsNode
 * 
	mªfP¨ít
;

55 
HTNewsNode
 * 
	mœ°Chûd
;

56 
BOOL
 
	mshow
;

57 
BOOL
 
	mÁke
;

58 
	mªfChûdªn
;

59 
	mªfLevñ
;

60 
	mmöRefIndex
;

61 
	mmaxRefIndex
;

62 
time_t
 
	mmöRefD©e
;

63 
time_t
 
	mmaxRefD©e
;

66 
	s_HTNewsDú
 {

67 
HTSåu˘uªd
 * 
	mèrgë
;

68 
HTReque°
 * 
	mªque°
;

69 
HTNewsDúKey
 
	mkey
;

70 * 
	m«me
;

71 * 
	mtm∂©e
;

72 
HTNewsNode
 * 
	mtm∂©e_node
;

73 
	mœ°Levñ
;

74 
HTAºay
 * 
	m¨øy
;

75 
HTAºay
 * 
	mˇche
;

78 
PRIVATE
 
	gMaxLöeW
 = 
DEFAULT_MAXW
;

81 
PRIVATE
 
HTNewsDú_addLevñTags
 (
HTNewsDú
* 
dú
, 
Àvñ
);

82 
PRIVATE
 
HTNewsNode
* 
HTNewsDú_addFakeEÀmít
 (
HTNewsDú
* 
dú
, * 
subje˘
,

83 * 
«me
);

84 
PRIVATE
 
HTNewsNode
* 
HTNewsDú_födNodeNamed
 (
HTNewsDú
* 
dú
, * 
«me
);

86 
	#FNWS_ANY
 0x0000

	)

88 
	#FNWS_MIN
 0x0001

	)

89 
	#FNWS_MAX
 0x0002

	)

91 
	#FNWS_ONLYFAKE
 0x0010

	)

92 
	#FNWS_NOTFAKE
 0x0020

	)

94 
	#FNWS_NOTORPHAN
 0x0040

	)

95 
PRIVATE
 
HTNewsNode
* 
HTNewsDú_födNodeWôhSubje˘
 (
HTNewsDú
* 
dú
,

96 * 
subje˘
, 
which
, 
HTNewsNode
* 
avoidNode
);

103 
PRIVATE
 
HTNewsNode
 * 
	$HTNewsNode_√w
 (
ödex
, * 
subje˘
, * 
‰om
,

104 
time_t
 
d©e
, * 
«me
,

105 
ªfs
, 
HTLi°
 * 
ªfNames
)

107 
HTNewsNode
 * 
node
;

108 i‡((
node
 = (
HTNewsNode
 *Ë
	`HT_CALLOC
(1, (HTNewsNode))Ë=
NULL
)

109 
	`HT_OUTOFMEM
("HTNewsNode_new");

110 i‡(
«me
Ë
	`SåAŒocC›y
(
node
->name,Çame);

111 i‡(
subje˘
) {

112 
	`SåAŒocC›y
(
node
->
subje˘
, subject);

113 
node
->
subje˘
 = 
	`HTSåù
(node->subject);

115 i‡(
‰om
Ë
	`SåAŒocC›y
(
node
->from, from);

116 
node
->
ödex
 = index;

117 
node
->
d©e
 = date;

118 
node
->
ªfs
 =Ñefs;

119 
node
->
ªfNames
 =ÑefNames;

120 
node
->
show
 = (
«me
 !
NULL
);

121 
node
->
Áke
 = (
«me
 =
NULL
);

122 
node
->
möRefIndex
 = 
ödex
;

123 
node
->
maxRefIndex
 = 
ödex
;

124 
node
->
möRefD©e
 = 
d©e
;

125 
node
->
maxRefD©e
 = 
d©e
;

126  
node
;

127 
	}
}

129 
PRIVATE
 
BOOL
 
	$HTNewsNode_dñëe
 (
HTNewsNode
 * 
node
, 
BOOL
 
ˇche
)

131 i‡(
node
) {

132 i‡(!
ˇche
 || 
node
->
is_tm∂©e
Ë
	`HT_FREE
“ode->
«me
);

133 
	`HT_FREE
(
node
->
subje˘
);

134 
	`HT_FREE
(
node
->
‰om
);

135 i‡(
node
->
ªfNames
) {

136 
HTLi°
 * 
cur
 = 
node
->
ªfNames
;

137 * 
¥es
;

138 (
¥es
 = (*Ë
	`HTLi°_√xtObje˘
(
cur
))Ë
	`HT_FREE
(pres);

139 
	`HTLi°_dñëe
(
node
->
ªfNames
);

141 i‡(
node
->
ªfObje˘s
Ë
	`HTLi°_dñëe
(node->refObjects);

142 
	`HT_FREE
(
node
);

143  
YES
;

145  
NO
;

146 
	}
}

149 
PRIVATE
 
BOOL
 
	$HTNewsNode_isAn˚°‹
 (
HTNewsNode
* 
node
, HTNewsNode* 
ª„ªd
)

151 
HTNewsNode
* 
p
;

152 
p
 = 
ª„ªd
;Ö;Ö =Ö->
ªfP¨ít
)

153 i‡(
p
 =
node
Ë 
YES
;

154  
NO
;

155 
	}
}

158 
PRIVATE
 
BOOL
 
	$HTNewsNode_lökRef
 (
HTNewsNode
* 
node
, HTNewsNode* 
ª„ªr
)

160 i‡(
node
 && 
ª„ªr
) {

161 
node
->
ªfChûdªn
++;

162 
node
->
œ°Chûd
 = 
ª„ªr
;

163 
node
->
möRefIndex
 = (node->minRefIndex != 0 ?

164 
	`HTMIN
(
node
->
möRefIndex
, 
ª„ªr
->
ödex
) :

165 
ª„ªr
->
ödex
);

166 
node
->
maxRefIndex
 = (node->maxRefIndex != 0 ?

167 
	`HTMAX
(
node
->
maxRefIndex
, 
ª„ªr
->
ödex
) :

168 
ª„ªr
->
ödex
);

169 
node
->
möRefD©e
 = (node->minRefDate != 0 ?

170 
	`HTMIN
(
node
->
möRefD©e
, 
ª„ªr
->
d©e
) :

171 
ª„ªr
->
d©e
);

172 
node
->
maxRefD©e
 = (node->maxRefDate != 0 ?

173 
	`HTMAX
(
node
->
maxRefD©e
, 
ª„ªr
->
d©e
) :

174 
ª„ªr
->
d©e
);

175 
ª„ªr
->
ªfP¨ít
 = 
node
;

176  
YES
;

178  
NO
;

179 
	}
}

182 
PRIVATE
 
	$HTNewsNode_ªfLevñ
 (
HTNewsNode
* 
node
)

184 
˙t
 = 0;

185 
HTNewsNode
* 
p
;

186 
p
 = 
node
->
ªfP¨ít
;Ö &&Ö->
show
;Ö =Ö->refParent)

187 
˙t
++;

188  
˙t
;

189 
	}
}

194 
PRIVATE
 
time_t
 
	$HTNewsNode_gëIndex
 (
HTNewsNode
* 
node
, 
BOOL
 
möimÆ
)

196 i‡(
node
->
ödex
 != 0)

197  
node
->
ödex
;

198 i‡(
möimÆ
)

199  
node
->
möRefIndex
;

201  
node
->
maxRefIndex
;

202 
	}
}

207 
PRIVATE
 
time_t
 
	$HTNewsNode_gëD©e
 (
HTNewsNode
* 
node
, 
BOOL
 
möimÆ
)

209 i‡(
node
->
d©e
 != 0)

210  
node
->
d©e
;

211 i‡(
möimÆ
)

212  
node
->
möRefD©e
;

214  
node
->
maxRefD©e
;

215 
	}
}

218 
PRIVATE
 * 
	$UnReSubje˘
 (* 
subje˘
)

220 i‡(
	`°æí
(
subje˘
Ë>3 && 
	`°∫ˇ£comp
(subject, "re:", 3) == 0)

222 * 
p
 = 
subje˘
 + 3;

223 i‡(*
p
 == ' ')Ö ++;

224  
p
;

226  
subje˘
;

227 
	}
}

230 
PRIVATE
 
	$HTNewsNode_£tRefInfo_∑ss1
 (
HTNewsDú
* 
dú
, 
HTNewsNode
* 
node
)

232 
HTLi°
* 
±r
 = 
node
->
ªfNames
;

233 * 
«me
 = 
NULL
;

234 i‡(
node
->
Áke
)

236 i‡(
±r
 !
NULL
)

237 
«me
 = (*Ë
	`HTLi°_√xtObje˘
(
±r
);

238 
±r
 !
NULL
)

240 
HTNewsNode
* 
∑ª¡
;

241 
∑ª¡
 = 
	`HTNewsDú_födNodeNamed
(
dú
, 
«me
);

242 i‡(
∑ª¡
)

244 i‡(!
node
->
ªfObje˘s
Ënode->ªfObje˘†
	`HTLi°_√w
();

245 
	`HTLi°_addObje˘
 (
node
->
ªfObje˘s
, 
∑ª¡
);

247 
«me
 = (*Ë
	`HTLi°_√xtObje˘
(
±r
);

249 
	}
}

252 
PRIVATE
 
	$HTNewsNode_£tRefInfo_∑ss2
 (
HTNewsDú
* 
dú
, 
HTNewsNode
* 
node
)

254 
HTNewsNode
* 
maxP¨ít
 = 
NULL
;

255 
HTLi°
* 
±r
 = 
node
->
ªfObje˘s
;

256 
HTNewsNode
* 
∑ª¡
 = 
NULL
;

257 i‡(
node
->
Áke
)

259 i‡(
±r
 !
NULL
)

260 
∑ª¡
 = (
HTNewsNode
*Ë
	`HTLi°_√xtObje˘
(
±r
);

261 
±r
 !
NULL
)

263 i‡(!
maxP¨ít
 || maxP¨ít->
d©e
 < 
∑ª¡
->date)

264 
maxP¨ít
 = 
∑ª¡
;

265 
∑ª¡
 = (
HTNewsNode
*Ë
	`HTLi°_√xtObje˘
(
±r
);

267 i‡(
maxP¨ít
)

269 i‡(!
	`HTNewsNode_isAn˚°‹
(
node
, 
maxP¨ít
))

270 
	`HTNewsNode_lökRef
 (
maxP¨ít
, 
node
);

274 * 
ªfSubje˘
;

275 
BOOL
 
ª
;

283 
ªfSubje˘
 = 
	`UnReSubje˘
(
node
->
subje˘
);

284 
ª
 = (
	`°rˇ£comp
(
ªfSubje˘
, 
node
->
subje˘
) != 0);

285 i‡(
ª
)

286 
∑ª¡
 = 
	`HTNewsDú_födNodeWôhSubje˘
(
dú
, 
ªfSubje˘
,

287 
FNWS_MIN
 | 
FNWS_NOTFAKE
, 
node
);

288 i‡(!
∑ª¡
 || 
	`HTNewsNode_isAn˚°‹
(
node
,Öarent))

289 
∑ª¡
 = 
	`HTNewsDú_födNodeWôhSubje˘
(
dú
, 
ªfSubje˘
,

290 
FNWS_MIN
 | 
FNWS_ONLYFAKE
, 
node
);

291 i‡(!
∑ª¡
 && 
ª
)

293 
∑ª¡
 = 
	`HTNewsDú_födNodeWôhSubje˘
(
dú
, 
node
->
subje˘
,

294 
FNWS_MIN
 | 
FNWS_ONLYFAKE
, 
node
);

297 i‡(!
∑ª¡
Ë∑ª¡ = 
	`HTNewsDú_addFakeEÀmít
 (
dú
, 
ªfSubje˘
, 
NULL
);

298 i‡(
∑ª¡
) {

299 
	`HTNewsNode_lökRef
 (
∑ª¡
, 
node
);

300 i‡(
∑ª¡
->
ªfChûdªn
 > 1)

301 
∑ª¡
->
show
 = 
YES
;

304 
	}
}

310 
PRIVATE
 
	$HTNewsNode_£tRefInfo_∑ss3
 (
HTNewsDú
* 
dú
, 
HTNewsNode
* 
node
)

312 
HTNewsNode
* 
∑ª¡
 = 
NULL
;

313 * 
ªfSubje˘
;

314 
BOOL
 
ª
;

316 i‡(
node
->
Áke
 ||Çode->
ªfP¨ít
)

325 
ªfSubje˘
 = 
	`UnReSubje˘
(
node
->
subje˘
);

326 
ª
 = (
	`°rˇ£comp
(
ªfSubje˘
, 
node
->
subje˘
) != 0);

327 i‡(
ª
)

328 
∑ª¡
 = 
	`HTNewsDú_födNodeWôhSubje˘
(
dú
, 
ªfSubje˘
,

329 
FNWS_MIN
 | 
FNWS_NOTFAKE
, 
node
);

330 i‡(!
∑ª¡
 || 
	`HTNewsNode_isAn˚°‹
(
node
,Öarent))

331 
∑ª¡
 = 
	`HTNewsDú_födNodeWôhSubje˘
(
dú
, 
ªfSubje˘
,

332 
FNWS_MIN
 | 
FNWS_ONLYFAKE
, 
node
);

333 i‡(!
∑ª¡
 && 
ª
)

335 
∑ª¡
 = 
	`HTNewsDú_födNodeWôhSubje˘
(
dú
, 
node
->
subje˘
,

336 
FNWS_MIN
 | 
FNWS_ONLYFAKE
, 
node
);

339 i‡(!
∑ª¡
Ë∑ª¡ = 
	`HTNewsDú_addFakeEÀmít
 (
dú
, 
ªfSubje˘
, 
NULL
);

340 i‡(
∑ª¡
) {

341 
	`HTNewsNode_lökRef
 (
∑ª¡
, 
node
);

342 i‡(
∑ª¡
->
ªfChûdªn
 > 1)

343 
∑ª¡
->
show
 = 
YES
;

345 
	}
}

347 
PRIVATE
 
	$HTNewsNode_£tRefInfo_∑ss3
 (
HTNewsDú
* 
dú
, 
HTNewsNode
* 
node
)

349 i‡(!
node
->
Áke
)

350 
node
->
ªfLevñ
 = 
	`HTNewsNode_ªfLevñ
(node);

351 
	}
}

355 
PRIVATE
 
	$HTNewsNode_com∑ªRefThªad
 (
HTNewsNode
* 
node1
, HTNewsNode* 
node2
)

357 
Àvñ1
 = 
node1
->
ªfLevñ
;

358 
Àvñ2
 = 
node2
->
ªfLevñ
;

359 
Àvñ
 = 
	`HTMAX
(
Àvñ1
, 
Àvñ2
);

360 
i
;

361 
HTNewsNode
* 
∑ª¡1
;

362 
HTNewsNode
* 
∑ª¡2
;

363 
diff
 = 0;

364 
i
 = 
Àvñ
; i >= 0; i--)

366 
∑ª¡1
 = (
i
 < 
Àvñ1
 ?Ö¨ít1->
ªfP¨ít
 : 
node1
);

367 
∑ª¡2
 = (
i
 < 
Àvñ2
 ?Ö¨ít2->
ªfP¨ít
 : 
node2
);

368 i‡(
∑ª¡1
 =
∑ª¡2
)

369  
diff
;

372 
time_t
 
d©e1
 = (
i
 > 
Àvñ1
 ? 0 : 
	`HTNewsNode_gëD©e
(
∑ª¡1
, 
YES
));

373 
time_t
 
d©e2
 = (
i
 > 
Àvñ2
 ? 0 : 
	`HTNewsNode_gëD©e
(
∑ª¡2
, 
YES
));

374 
diff
 = 
d©e1
 - 
d©e2
;

375 i‡(
diff
 == 0)

377 
idx1
 = (
i
 > 
Àvñ1
 ? 0 : 
	`HTNewsNode_gëIndex
(
∑ª¡1
, 
YES
));

378 
idx2
 = (
i
 > 
Àvñ2
 ? 0 : 
	`HTNewsNode_gëIndex
(
∑ª¡2
, 
YES
));

379 
diff
 = 
idx1
 - 
idx2
;

383  
diff
;

384 
	}
}

390 
PRIVATE
 
BOOL
 
	$HTNewsNode_¥öt
 (
HTNewsDú
 * 
dú
, 
HTNewsNode
 * 
node
)

392 i‡(
node
 &&Çode->
show
) {

393 
HTSåu˘uªd
 *
èrgë
 = 
dú
->target;

394 * 
esˇ≥d
;

396 
	`HTNewsDú_addLevñTags
 (
dú
, 
node
->
ªfLevñ
);

397 
	`START
(
HTML_LI
);

401 i‡(!
node
->
Áke
 &&Çode->
«me
 &&Çode->
subje˘
) {

402 
esˇ≥d
 = 
	`HTEsˇ≥
(
node
->
«me
, 
URL_XPALPHAS
);

403 
	`HTSèπAnch‹
(
èrgë
, 
NULL
, 
esˇ≥d
);

405 i‡(
node
->
subje˘
Ë
	`PUTS
(node->subject);

406 i‡(!
node
->
Áke
 &&Çode->
«me
 &&Çode->
subje˘
) {

407 
	`END
(
HTML_A
);

408 
	`HT_FREE
(
esˇ≥d
);

412 i‡(
node
->
‰om
) {

413 
	`PUTS
 (" by ");

414 
	`PUTS
(
node
->
‰om
);

418 i‡(
node
->
«me
 && 
	`°ºchr
(node->name, '*')) {

419 
buf
[16];

420 
	`•rötf
 (
buf
, " (%d groups)", 
node
->
ªfChûdªn
);

421 
	`PUTS
 (
buf
);

424  
YES
;

425 
	}
}

437 
PUBLIC
 
BOOL
 
	$HTNewsDú_£tWidth
 (
max_width
)

439 
MaxLöeW
 = (
max_width
 > 0Ë? max_width : 
DEFAULT_MAXW
;

440  
YES
;

441 
	}
}

448 
PUBLIC
 
HTNewsDú
 * 
	$HTNewsDú_√w
 (
HTReque°
 * 
ªque°
, c⁄° * 
tôÀ
,

449 
HTNewsDúKey
 
key
, 
BOOL
 
ˇche
)

451 
HTNewsDú
 *
dú
;

452 i‡(!
ªque°
Ë 
NULL
;

455 i‡((
dú
 = (
HTNewsDú
 *Ë
	`HT_CALLOC
(1,  (HTNewsDú))Ë=
NULL
)

456 
	`HT_OUTOFMEM
("HTNewsDir_new");

457 
dú
->
èrgë
 = 
	`HTMLGíî©‹
(
ªque°
, 
NULL
, 
WWW_HTML
,

458 
	`HTReque°_ouçutF‹m©
(
ªque°
),

459 
	`HTReque°_ouçutSåóm
(
ªque°
));

460 
	`HTAnch‹_£tF‹m©
(
	`HTReque°_™ch‹
(
ªque°
), 
WWW_HTML
);

461 
dú
->
ªque°
 =Ñequest;

462 
dú
->
key
 = key;

463 
dú
->
œ°Levñ
 = -1;

467 * 
uæ
 = 
	`HTAnch‹_physiˇl
(
	`HTReque°_™ch‹
(
ªque°
));

468 * 
p
 = 
uæ
+
	`°æí
(url);

469 
p
 > 
uæ
 &&Ö[-1] != ':' &&Ö[-1] != '/' &&Ö[-1] != '\\')

470 
p
--;

471 
	`SåAŒocC›y
 (
dú
->
«me
, 
p
);

474 i‡(
key
 !
HT_NDK_NONE
) {

475 
tŸÆ
 = 
	`HTNews_maxAπi˛es
();

476 
dú
->
¨øy
 = 
	`HTAºay_√w
(
tŸÆ
 > 0 ?Åotal : 128);

480 i‡(
ˇche
) {

481 
tŸÆ
 = 
	`HTNews_maxAπi˛es
();

482 
dú
->
ˇche
 = 
	`HTAºay_√w
(
tŸÆ
 > 0 ?Åotal : 128);

487 
HTSåu˘uªd
 *
èrgë
 = 
dú
->target;

488 c⁄° *
msg
 = 
tôÀ
 ?Åitle : "News Listing";

489 
	`START
(
HTML_HTML
);

490 
	`START
(
HTML_HEAD
);

491 
	`START
(
HTML_TITLE
);

492 
	`PUTS
(
msg
);

493 
	`END
(
HTML_TITLE
);

494 
	`END
(
HTML_HEAD
);

495 
	`START
(
HTML_BODY
);

496 
	`START
(
HTML_H1
);

497 
	`PUTS
(
msg
);

498 
	`END
(
HTML_H1
);

500  
dú
;

501 
	}
}

512 
PUBLIC
 
HTNewsNode
* 
	$HTNewsDú_addEÀmít
 (
HTNewsDú
 * 
dú
, 
ödex
,

513 * 
subje˘
, * 
‰om
,

514 
time_t
 
d©e
, * 
«me
,

515 
ªfs
, 
HTLi°
 * 
ªfNames
)

517 i‡(
dú
 && 
«me
) {

518 
HTNewsNode
 * 
node
 = 
	`HTNewsNode_√w
(
ödex
, 
subje˘
, 
‰om
,

519 
d©e
, 
«me
, 
ªfs
, 
ªfNames
);

520 i‡(
dú
->
key
 =
HT_NDK_NONE
) {

521 
	`HTNewsNode_¥öt
(
dú
, 
node
);

522 
	`HTNewsNode_dñëe
(
node
, (
dú
->
ˇche
!=
NULL
));

524 
	`HTAºay_addObje˘
(
dú
->
¨øy
, (*Ë
node
);

525  
node
;

527  
NULL
;

528 
	}
}

531 
PRIVATE
 
HTNewsNode
* 
	$HTNewsDú_addFakeEÀmít
 (
HTNewsDú
 * 
dú
,

532 * 
subje˘
, * 
«me
)

534 
HTNewsNode
 * 
node
 =

535 
	`HTNewsDú_addEÀmít
(
dú
, 0, 
subje˘
, 
NULL
, 0, 
«me
, 0, NULL);

536 i‡(
node
) {

537 
node
->
show
 = 
NO
;

538 
node
->
Áke
 = 
YES
;

540  
node
;

541 
	}
}

544 
PUBLIC
 
HTNewsNode
 * 
	$HTNewsDú_addGroupEÀmít
 (
HTNewsDú
 * 
dú
, * 
group
,

545 
BOOL
 
tm∂©e
)

547 
HTNewsNode
 * 
node
 = 
NULL
;

548 i‡(
dú
 && 
group
) {

549 i‡(
	`HTNewsDú_bñ⁄gsToSë
(
dú
, 
group
))

550 
node
=
	`HTNewsDú_addEÀmít
 (
dú
, 0, 
group
, 
NULL
, 0, group, 0, NULL);

553 i‡(
dú
->
ˇche
 && !
tm∂©e
) {

554 * 
«me
 = 
node
 ?Çode->«mê: 
NULL
;

555 i‡(!
«me
Ë
	`SåAŒocC›y
“ame, 
group
);

556 
	`HTAºay_addObje˘
(
dú
->
ˇche
, 
«me
);

559  
node
;

560 
	}
}

563 
PUBLIC
 
BOOL
 
	$HTNewsDú_bñ⁄gsToSë
 (
HTNewsDú
* 
dú
, * 
group
)

565 * 
p
;

566 i‡(!
dú
->
«me
 || !*(dir->name))

567  
YES
;

568 
p
 = 
	`°ºchr
(
dú
->
«me
, '*');

569 i‡(!
p
)

570  
	`°rˇ£comp
(
group
, 
dú
->
«me
) == 0;

573 
Àn
 = 
p
 - 
dú
->
«me
;

574  
	`°∫ˇ£comp
(
group
, 
dú
->
«me
, 
Àn
) == 0;

576 
	}
}

580 
PRIVATE
 
	$HTNewsDú_addLevñTags
 (
HTNewsDú
* 
dú
, 
Àvñ
)

582 
HTSåu˘uªd
 *
èrgë
 = 
dú
->target;

583 
i
 = 
Àvñ
;

584 
i
 > 
dú
->
œ°Levñ
)

586 
	`START
(
HTML_UL
);

587 
i
--;

589 
i
 < 
dú
->
œ°Levñ
)

591 
	`END
(
HTML_UL
);

592 
i
++;

594 
dú
->
œ°Levñ
 = 
Àvñ
;

595 
	}
}

598 
PRIVATE
 
HTNewsNode
* 
	$HTNewsDú_födNodeNamed
 (
HTNewsDú
* 
dú
, * 
«me
)

600 
i
;

601 
i
 = 0; i < 
	`HTAºay_size
(
dú
->
¨øy
); i++)

603 
HTNewsNode
* 
node
 = (HTNewsNode*)(
	`HTAºay_d©a
(
dú
->
¨øy
)[
i
]);

604 i‡(
node
->
«me
 && 
	`°rˇ£comp
(node->name,Çame) == 0)

605  
node
;

607  
NULL
;

608 
	}
}

611 
PRIVATE
 
HTNewsNode
* 
	$HTNewsDú_födNodeWôhSubje˘
 (
HTNewsDú
* 
dú
,

612 * 
subje˘
, 
which
, 
HTNewsNode
* 
avoidNode
)

614 
i
;

615 
whichD©e
 = (
which
 & 
FNWS_MIN
 ? -1 : (which & 
FNWS_MAX
 ? 1 : 0));

616 
HTNewsNode
* 
foundNode
 = 
NULL
;

617 
i
 = 0; i < 
	`HTAºay_size
(
dú
->
¨øy
); i++)

619 
HTNewsNode
* 
node
 = (HTNewsNode*)(
	`HTAºay_d©a
(
dú
->
¨øy
)[
i
]);

620 i‡(!(
which
 & 
FNWS_ONLYFAKE
 && !
node
->
Áke
) &&

621 !(
which
 & 
FNWS_NOTFAKE
 && 
node
->
Áke
) &&

622 !(
which
 & 
FNWS_NOTORPHAN
 && !
node
->
Áke
 && !node->
ªfNames
) &&

623 
node
 !
avoidNode
 &&Çode->
subje˘
 &&

624 
	`°rˇ£comp
(
node
->
subje˘
, subject) == 0)

626 i‡(
which
 =
FNWS_ANY
)

627  
node
;

628 i‡(!
foundNode
 || (
node
->
d©e
 != 0 &&

629 (
node
->
d©e
 - 
foundNode
->d©eË* ()
whichD©e
 > 0))

630 
foundNode
 = 
node
;

633  
foundNode
;

634 
	}
}

637 
PRIVATE
 
	$HTNewsDú_£tRefInfo
 (
HTNewsDú
* 
dú
)

641 
size
 = 
	`HTAºay_size
(
dú
->
¨øy
);

642 
i
;

643 
i
 = 0; i < 
size
; i++)

644 
	`HTNewsNode_£tRefInfo_∑ss1
 (
dú
, (
HTNewsNode
*)(
	`HTAºay_d©a
(dú->
¨øy
)[
i
]));

645 
i
 = 0; i < 
size
; i++)

646 
	`HTNewsNode_£tRefInfo_∑ss2
 (
dú
, (
HTNewsNode
*)(
	`HTAºay_d©a
(dú->
¨øy
)[
i
]));

647 
i
 = 0; i < 
size
; i++)

648 
	`HTNewsNode_£tRefInfo_∑ss3
 (
dú
, (
HTNewsNode
*)(
	`HTAºay_d©a
(dú->
¨øy
)[
i
]));

649 
	}
}

651 
PRIVATE
 
	$make_ãm∂©e
 (
HTNewsDú
 * 
dú
, 
HTNewsNode
 * 
node
)

653 
	`HT_FREE
(
dú
->
tm∂©e
);

654 i‡((
dú
->
tm∂©e
 = (*Ë
	`HT_MALLOC
(
	`°æí
(
node
->
«me
Ë+ 3)Ë=
NULL
)

655 
	`HT_OUTOFMEM
("HTNewsNode_setGroupInfo");

657 * 
p1
 = 
dú
->
«me
;

658 * 
p2
 = 
dú
->
tm∂©e
;

659 
	`°r˝y
(
p2
, 
node
->
«me
);

660 *
p1
 && *
p2
 && *p1 == *p2)Ö1++,Ö2++;

661 *
p2
 && *p2 != '.')Ö2++;

662 i‡(*
p2
) {

663 
	`°r˝y
(
p2
, ".*");

664 
dú
->
tm∂©e_node
=
	`HTNewsDú_addGroupEÀmít
(dú, dú->
tm∂©e
,
YES
);

665 
dú
->
tm∂©e_node
->
is_tm∂©e
 = 
YES
;

667 
	`HT_FREE
(
dú
->
tm∂©e
);

668 
dú
->
tm∂©e_node
 = 
node
;

670 
dú
->
tm∂©e_node
->
show
 = 
YES
;

672 
	}
}

679 
PRIVATE
 
	$HTNewsDú_£tGroupInfo
 (
HTNewsDú
 * 
dú
)

681 
HTAºay
 * 
¨øy
 = 
dú
->array;

682 
HTNewsNode
 * 
node
;

683 
cur_size
 = 
	`HTAºay_size
(
¨øy
);

684 
˙t
;

690 
˙t
=0; c¡<
cur_size
; cnt++) {

691 
node
 = (
HTNewsNode
 *Ë
	`HTAºay_d©a
(
¨øy
)[
˙t
];

696 i‡(!
dú
->
tm∂©e
Ë
	`make_ãm∂©e
(dú, 
node
);

703 i‡(
dú
->
tm∂©e
) {

704 i‡(
	`HTSåCa£M©ch
(
dú
->
tm∂©e
, 
node
->
«me
Ë=
NULL
) {

705 
	`make_ãm∂©e
(
dú
, 
node
);

707 
HTNewsNode
 * 
tmp_node
 = 
dú
->
tm∂©e_node
;

710 i‡(
tmp_node
->
œ°Chûd
) {

711 
tmp_node
->
œ°Chûd
->
show
 = 
NO
;

712 
node
->
show
 = 
NO
;

715 
	`HTNewsNode_lökRef
(
dú
->
tm∂©e_node
, 
node
);

718 
	}
}

720 
PRIVATE
 
	$NDúIndexS‹t
 (c⁄° *
a
, c⁄° *
b
)

722 
Ø
 = (*((
HTNewsNode
 **)
a
))->
ödex
;

723 
bb
 = (*((
HTNewsNode
 **)
b
))->
ödex
;

724  
Ø
-
bb
;

725 
	}
}

727 
PRIVATE
 
	$NDúSubje˘S‹t
 (c⁄° *
a
, c⁄° *
b
)

729 *
Ø
 = (*((
HTNewsNode
 **)
a
))->
subje˘
;

730 *
bb
 = (*((
HTNewsNode
 **)
b
))->
subje˘
;

731  
	`°rˇ£comp
(
Ø
?Ø:"", 
bb
?bb:"");

732 
	}
}

734 
PRIVATE
 
	$NDúFromS‹t
 (c⁄° *
a
, c⁄° *
b
)

736 *
Ø
 = (*((
HTNewsNode
 **)
a
))->
‰om
;

737 *
bb
 = (*((
HTNewsNode
 **)
b
))->
‰om
;

738  
	`°rˇ£comp
(
Ø
?Ø:"", 
bb
?bb:"");

739 
	}
}

741 
PRIVATE
 
	$NDúD©eS‹t
 (c⁄° *
a
, c⁄° *
b
)

743 
time_t
 
Ø
 = (*((
HTNewsNode
 **)
a
))->
d©e
;

744 
time_t
 
bb
 = (*((
HTNewsNode
 **)
b
))->
d©e
;

745  
bb
-
Ø
;

746 
	}
}

748 
PRIVATE
 
	$NDúGroupS‹t
 (c⁄° *
a
, c⁄° *
b
)

750 *
Ø
 = (*((
HTNewsNode
 **)
a
))->
«me
;

751 *
bb
 = (*((
HTNewsNode
 **)
b
))->
«me
;

752 *
Ø
 && *
bb
 && 
	`TOLOWER
(*aa)==TOLOWER(*bb))áa++, bb++;

753  (*
Ø
=='.' && *
bb
) ? -1 : (*aa && *bb=='.') ?

754 1 : 
	`TOLOWER
(*
Ø
)-TOLOWER(*
bb
);

755 
	}
}

758 
PRIVATE
 
	$NDúRefThªadS‹t
 (c⁄° * 
a
, c⁄° * 
b
)

760 
HTNewsNode
* 
Ø
 = *((HTNewsNode**)
a
);

761 
HTNewsNode
* 
bb
 = *((HTNewsNode**)
b
);

762  
	`HTNewsNode_com∑ªRefThªad
(
Ø
,
bb
);

763 
	}
}

770 
PUBLIC
 
BOOL
 
	$HTNewsDú_‰ì
 (
HTNewsDú
 * 
dú
)

772 i‡(!
dú
Ë 
NO
;

773 i‡(
dú
->
key
 !
HT_NDK_NONE
) {

774 
HTAºay
 * 
¨øy
 = 
dú
->array;

775 
HTAºay
 * 
ˇche
 = 
NULL
;

776 
HTCom∑ªr
 * 
comp
 = 
NULL
;

782 i‡(
dú
->
key
 =
HT_NDK_INDEX
)

783 
comp
 = 
NDúIndexS‹t
;

784 i‡(
dú
->
key
 =
HT_NDK_DATE
)

785 
comp
 = 
NDúD©eS‹t
;

786 i‡(
dú
->
key
 =
HT_NDK_SUBJECT
)

787 
comp
 = 
NDúSubje˘S‹t
;

788 i‡(
dú
->
key
 =
HT_NDK_FROM
)

789 
comp
 = 
NDúFromS‹t
;

790 i‡(
dú
->
key
 =
HT_NDK_GROUP
) {

791 
comp
 = 
NDúGroupS‹t
;

792 } i‡(
dú
->
key
 =
HT_NDK_REFTHREAD
) {

793 
	`HTNewsDú_£tRefInfo
 (
dú
);

794 
comp
 = 
NDúRefThªadS‹t
;

796 
	`HTTRACE
(
STREAM_TRACE
, "NewsListing. Invalid sortkey\n");

797  
NO
;

804 
	`HTAºay_s‹t
(
¨øy
, 
comp
);

811 i‡(
dú
->
key
 =
HT_NDK_GROUP
) {

812 
	`HTNewsDú_£tGroupInfo
(
dú
);

813 
	`HTAºay_s‹t
(
¨øy
, 
comp
);

821 ** 
d©a
;

822 
HTNewsNode
 *
node
 = (HTNewsNodê*Ë
	`HTAºay_fú°Obje˘
(
¨øy
, 
d©a
);

823 
node
) {

824 
	`HTNewsNode_¥öt
(
dú
, 
node
);

830 i‡(
dú
->
key
 =
HT_NDK_GROUP
 && !
node
->
is_tm∂©e
)

831 
	`HTAºay_addObje˘
(
ˇche
, 
node
->
«me
);

833 
	`HTNewsNode_dñëe
(
node
, (
dú
->
ˇche
!=
NULL
));

834 
node
 = (
HTNewsNode
 *Ë
	`HTAºay_√xtObje˘
(
¨øy
, 
d©a
);

836 
	`HTAºay_dñëe
(
¨øy
);

840 i‡(
dú
->
ˇche
Ë
	`HTNewsCache_a·î
(dú->
ªque°
, 
NULL
, dir->cache, 0);

845 
HTSåu˘uªd
 *
èrgë
 = 
dú
->target;

847 
	`HTNewsDú_addLevñTags
 (
dú
, -1);

848 
	`START
(
HTML_HR
);

849 
	`END
(
HTML_BODY
);

850 
	`END
(
HTML_HTML
);

851 
FREE_TARGET
;

855 
	`HT_FREE
(
dú
->
«me
);

856 
	`HT_FREE
(
dú
->
tm∂©e
);

857 
	`HT_FREE
(
dú
);

858  
YES
;

859 
	}
}

	@Library/src/HTNDir.h

28 #i‚de‡
HTNDIR_H


29 
	#HTNDIR_H


	)

30 
	~"HTReq.h
"

40 
	e_HTNewsDúKey
 {

41 
	mHT_NDK_NONE
 = 0,

42 
	mHT_NDK_INDEX
 = 1,

43 
	mHT_NDK_DATE
 = 2,

44 
	mHT_NDK_SUBJECT
 = 3,

45 
	mHT_NDK_FROM
 = 4,

46 
	mHT_NDK_GROUP
 = 5,

47 
	mHT_NDK_REFTHREAD
 = 6

48 } 
	tHTNewsDúKey
;

66 
_HTNewsDú
 
	tHTNewsDú
;

67 
HTNewsDú
 * 
HTNewsDú_√w
 (
HTReque°
 * 
ªque°
, c⁄° * 
tôÀ
,

68 
HTNewsDúKey
 
key
, 
BOOL
 
ˇche
);

79 
_HTNewsNode
 
	tHTNewsNode
;

80 
HTNewsNode
 * 
HTNewsDú_addEÀmít
 (
HTNewsDú
 * 
dú
, 
ödex
,

81 * 
subje˘
,

82 * 
‰om
, 
time_t
 
d©e
,

83 * 
«me
,

84 
ªfs
, 
HTLi°
 * 
ªfNames
);

85 
HTNewsNode
 * 
HTNewsDú_addGroupEÀmít
 (
HTNewsDú
 * 
dú
, * 
group
,

86 
BOOL
 
tm∂©e
);

96 
BOOL
 
HTNewsDú_bñ⁄gsToSë
 (
HTNewsDú
* 
dú
, * 
group
);

107 
BOOL
 
HTNewsDú_‰ì
 (
HTNewsDú
 * 
dú
);

	@Library/src/HTNet.c

18 
	~"wwwsys.h
"

21 
	~"WWWUtû.h
"

22 
	~"HTPrŸ.h
"

23 
	~"HTEº‹.h
"

24 
	~"HTAÀπ.h
"

25 
	~"HTP¨£.h
"

26 
	~"HTTøns.h
"

27 
	~"HTHo°.h
"

28 
	~"HTReq.h
"

29 
	~"HTEvít.h
"

30 
	~"HTSåóm.h
"

31 
	~"HTH°M™.h
"

32 
	~"HTIOSåóm.h
"

33 
	~"HTNëM™.h
"

35 #i‚de‡
HT_MAX_SOCKETS


36 
	#HT_MAX_SOCKETS
 25

	)

39 
	s_Bef‹eFûãr
 {

40 
HTNëBef‹e
 * 
	mbef‹e
;

41 * 
	mtm∂©e
;

42 
	m‹dî
;

43 * 
	m∑øm
;

44 } 
	tBef‹eFûãr
;

46 
	s_A·îFûãr
 {

47 
HTNëA·î
 * 
	ma·î
;

48 * 
	mtm∂©e
;

49 
	m‹dî
;

50 * 
	m∑øm
;

51 
	m°©us
;

52 } 
	tA·îFûãr
;

54 
	s_HTSåóm
 {

55 c⁄° 
HTSåómCœss
 * 
	miß
;

59 
	s_HTI≈utSåóm
 {

60 c⁄° 
HTI≈utSåómCœss
 * 
	miß
;

64 
	s_HTFûãrEvít
 {

65 
HTReque°
 * 
	mªque°
;

66 
	m°©us
;

67 
HTTimî
 * 
	mtimî
;

68 } 
	tHTFûãrEvít
;

70 
PRIVATE
 
HTLi°
 * 
	gHTBef‹e
 = 
NULL
;

71 
PRIVATE
 
HTLi°
 * 
	gHTA·î
 = 
NULL
;

73 
PRIVATE
 
	gMaxA˘ive
 = 
HT_MAX_SOCKETS
;

74 
PRIVATE
 
	gA˘ive
 = 0;

75 
PRIVATE
 
	gPîsi°ít
 = 0;

77 
PRIVATE
 
HTLi°
 ** 
	gNëTabÀ
 = 
NULL
;

78 
PRIVATE
 
	gHTNëCou¡
 = 0;

84 
PRIVATE
 
	$HTBef‹eOrdî
 (c⁄° * 
a
, c⁄° * 
b
)

86  ((
Bef‹eFûãr
 *Ë
b
)->
‹dî
 - ((Bef‹eFûã∏*Ë
a
)->order;

87 
	}
}

89 
PRIVATE
 
	$HTA·îOrdî
 (c⁄° * 
a
, c⁄° * 
b
)

91  ((
A·îFûãr
 *Ë
b
)->
‹dî
 - ((A·îFûã∏*Ë
a
)->order;

92 
	}
}

94 
PRIVATE
 
	$check_‹dî
 (
HTFûãrOrdî
 
‹dî
)

96  (
‹dî
<
HT_FILTER_FIRST
) ? HT_FILTER_FIRST :

97 (
‹dî
>
HT_FILTER_LAST
) ? HT_FILTER_LAST : order;

98 
	}
}

105 
PUBLIC
 
BOOL
 
	$HTNëCÆl_addBef‹e
 (
HTLi°
 * 
li°
, 
HTNëBef‹e
 * 
bef‹e
,

106 c⁄° * 
tm∂©e
, * 
∑øm
,

107 
HTFûãrOrdî
 
‹dî
)

109 i‡(
li°
 && 
bef‹e
) {

110 
Bef‹eFûãr
 * 
me
;

111 i‡((
me
 = (
Bef‹eFûãr
 *Ë
	`HT_CALLOC
(1, (Bef‹eFûãr)))==
NULL
)

112 
	`HT_OUTOFMEM
("HTNetCall_addBefore");

113 
me
->
bef‹e
 = before;

114 i‡(
tm∂©e
Ë
	`SåAŒocC›y
(
me
->tmplate,Åmplate);

115 
me
->
‹dî
 = 
	`check_‹dî
(order);

116 
me
->
∑øm
 =Öaram;

117 
	`HTTRACE
(
CORE_TRACE
, "Në Bef‹e.. Add %∞wôh ordî %dÅm∂©ê`%s\' c⁄ãxà%p\n" 
_


118 
bef‹e
 
_
 
me
->
‹dî
 _ 
tm∂©e
 ?Åm∂©ê: "<nuŒ>" _ 
∑øm
);

119  (
	`HTLi°_addObje˘
(
li°
, 
me
) &&

120 
	`HTLi°_ö£πi⁄S‹t
(
li°
, 
HTBef‹eOrdî
));

122  
NO
;

123 
	}
}

128 
PUBLIC
 
BOOL
 
	$HTNëCÆl_dñëeBef‹e
 (
HTLi°
 * 
li°
, 
HTNëBef‹e
 * 
bef‹e
)

130 
	`HTTRACE
(
CORE_TRACE
, "Në Bef‹e.. Dñëê%p\n" 
_
 
bef‹e
);

131 i‡(
li°
 && 
bef‹e
) {

132 
HTLi°
 * 
cur
 = 
li°
;

133 
Bef‹eFûãr
 * 
¥es
;

134 (
¥es
 = (
Bef‹eFûãr
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

135 i‡(
¥es
->
bef‹e
 == before) {

136 
	`HTLi°_ªmoveObje˘
(
li°
, (*Ë
¥es
);

137 
	`HT_FREE
(
¥es
->
tm∂©e
);

138 
	`HT_FREE
(
¥es
);

139 
cur
 = 
li°
;

143  
NO
;

144 
	}
}

149 
PUBLIC
 
BOOL
 
	$HTNëCÆl_dñëeBef‹eAŒ
 (
HTLi°
 * 
li°
)

151 
	`HTTRACE
(
CORE_TRACE
, "Net Before. Delete All filters\n");

152 i‡(
li°
) {

153 
HTLi°
 * 
cur
 = 
li°
;

154 
Bef‹eFûãr
 * 
¥es
;

155 (
¥es
 = (
Bef‹eFûãr
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

156 
	`HT_FREE
(
¥es
->
tm∂©e
);

157 
	`HT_FREE
(
¥es
);

159 
	`HTLi°_dñëe
(
li°
);

160  
YES
;

162  
NO
;

163 
	}
}

171 
PUBLIC
 
	$HTNëCÆl_execuãBef‹e
 (
HTLi°
 * 
li°
, 
HTReque°
 * 
ªque°
)

173 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

174 * 
uæ
 = 
	`HTAnch‹_physiˇl
(
™ch‹
);

175 * 
addr
 = 
uæ
 ? uæ : 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
™ch‹
);

176 
ªt
 = 
HT_OK
;

177 
mode
 = 0;

178 i‡(
li°
 && 
ªque°
 && 
addr
) {

179 
Bef‹eFûãr
 * 
¥es
;

180 (
¥es
 = (
Bef‹eFûãr
 *Ë
	`HTLi°_√xtObje˘
(
li°
))) {

181 i‡(!
¥es
->
tm∂©e
 ||

182 (
¥es
->
tm∂©e
 && 
	`HTSåM©ch
’ªs->tm∂©e, 
addr
))) {

183 
	`HTTRACE
(
CORE_TRACE
, "Në Bef‹e.. cÆlög %∞‘eque° %p, c⁄ãxà%p)\n" 
_


184 
¥es
->
bef‹e
 
_


185 
ªque°
 
_
 
¥es
->
∑øm
);

186 
ªt
 = (*
¥es
->
bef‹e
)(
ªque°
,Öªs->
∑øm
, 
mode
);

187 i‡(
ªt
 !
HT_OK
) ;

193 i‡((
uæ
 = 
	`HTAnch‹_physiˇl
(
™ch‹
))Ë
addr
 = url;

197 i‡(!
uæ
Ë
	`HT_FREE
(
addr
);

198  
ªt
;

199 
	}
}

206 
PUBLIC
 
BOOL
 
	$HTNëCÆl_addA·î
 (
HTLi°
 * 
li°
, 
HTNëA·î
 * 
a·î
,

207 c⁄° * 
tm∂©e
, * 
∑øm
,

208 
°©us
, 
HTFûãrOrdî
 
‹dî
)

210 i‡(
li°
 && 
a·î
) {

211 
A·îFûãr
 * 
me
;

212 i‡((
me
 = (
A·îFûãr
 *Ë
	`HT_CALLOC
(1, (A·îFûãr)))==
NULL
)

213 
	`HT_OUTOFMEM
("HTNetCall_addAfter");

214 
me
->
a·î
 =áfter;

215 i‡(
tm∂©e
Ë
	`SåAŒocC›y
(
me
->tmplate,Åmplate);

216 
me
->
‹dî
 = 
	`check_‹dî
(order);

217 
me
->
∑øm
 =Öaram;

218 
me
->
°©us
 = status;

219 
	`HTTRACE
(
CORE_TRACE
, "Në A·î... Add %∞wôh ordî %dÅm∂©ê`%s\' codê%d c⁄ãxà%p\n" 
_


220 
a·î
 
_
 
me
->
‹dî
 _ 
tm∂©e
 ?Åm∂©ê: "<nuŒ>" _ 
°©us
 _ 
∑øm
);

221  (
	`HTLi°_addObje˘
(
li°
, 
me
) &&

222 
	`HTLi°_ö£πi⁄S‹t
(
li°
, 
HTA·îOrdî
));

224  
NO
;

225 
	}
}

230 
PUBLIC
 
BOOL
 
	$HTNëCÆl_dñëeA·î
 (
HTLi°
 * 
li°
, 
HTNëA·î
 * 
a·î
)

232 
	`HTTRACE
(
CORE_TRACE
, "Në A·î... Dñëê%p\n" 
_
 
a·î
);

233 i‡(
li°
 && 
a·î
) {

234 
HTLi°
 * 
cur
 = 
li°
;

235 
A·îFûãr
 * 
¥es
;

236 (
¥es
 = (
A·îFûãr
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

237 i‡(
¥es
->
a·î
 ==áfter) {

238 
	`HTLi°_ªmoveObje˘
(
li°
, (*Ë
¥es
);

239 
	`HT_FREE
(
¥es
->
tm∂©e
);

240 
	`HT_FREE
(
¥es
);

241 
cur
 = 
li°
;

245  
NO
;

246 
	}
}

251 
PUBLIC
 
BOOL
 
	$HTNëCÆl_dñëeA·îSètus
 (
HTLi°
 * 
li°
, 
°©us
)

253 
	`HTTRACE
(
CORE_TRACE
, "Në A·î... DñëêÆ»wôh sètu†%d\n" 
_
 
°©us
);

254 i‡(
li°
) {

255 
HTLi°
 * 
cur
 = 
li°
;

256 
A·îFûãr
 * 
¥es
;

257 (
¥es
 = (
A·îFûãr
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

258 i‡(
¥es
->
°©us
 == status) {

259 
	`HTLi°_ªmoveObje˘
(
li°
, (*Ë
¥es
);

260 
	`HT_FREE
(
¥es
->
tm∂©e
);

261 
	`HT_FREE
(
¥es
);

262 
cur
 = 
li°
;

265  
YES
;

267  
NO
;

268 
	}
}

273 
PUBLIC
 
BOOL
 
	$HTNëCÆl_dñëeA·îAŒ
 (
HTLi°
 * 
li°
)

275 
	`HTTRACE
(
CORE_TRACE
, "Net After. Delete All filters\n");

276 i‡(
li°
) {

277 
HTLi°
 * 
cur
 = 
li°
;

278 
A·îFûãr
 * 
¥es
;

279 (
¥es
 = (
A·îFûãr
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

280 
	`HT_FREE
(
¥es
->
tm∂©e
);

281 
	`HT_FREE
(
¥es
);

283 
	`HTLi°_dñëe
(
li°
);

284  
YES
;

286  
NO
;

287 
	}
}

296 
PUBLIC
 
	$HTNëCÆl_execuãA·î
 (
HTLi°
 * 
li°
, 
HTReque°
 * 
ªque°
,

297 
°©us
)

299 
ªt
 = 
HT_OK
;

300 i‡(
°©us
 !
HT_IGNORE
) {

301 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

302 * 
uæ
 = 
	`HTAnch‹_physiˇl
(
™ch‹
);

303 * 
addr
 = 
uæ
 ? uæ : 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
™ch‹
);

304 
HTRe•⁄£
 * 
ª•⁄£
 = 
	`HTReque°_ª•⁄£
(
ªque°
);

305 i‡(
li°
 && 
ªque°
 && 
addr
) {

306 
A·îFûãr
 * 
¥es
;

307 (
¥es
 = (
A·îFûãr
 *Ë
	`HTLi°_√xtObje˘
(
li°
))) {

308 i‡((
¥es
->
°©us
 =°©u†||Öªs->°©u†=
HT_ALL
) &&

309 (!
¥es
->
tm∂©e
 ||

310 (
¥es
->
tm∂©e
 && 
	`HTSåM©ch
’ªs->tm∂©e, 
addr
)))) {

311 
	`HTTRACE
(
CORE_TRACE
, "Në A·î... cÆlög %∞‘eque° %p,Ñe•⁄£ %p, sètu†%d, c⁄ãxà%p)\n" 
_


312 
¥es
->
a·î
 
_
 
ªque°
 _ 
ª•⁄£
 _

313 
°©us
 
_
 
¥es
->
∑øm
);

314 
ªt
 = (*
¥es
->
a·î
)(
ªque°
, 
ª•⁄£
,Öªs->
∑øm
, 
°©us
);

315 i‡(
ªt
 !
HT_OK
) ;

321 i‡((
uæ
 = 
	`HTAnch‹_physiˇl
(
™ch‹
))Ë
addr
 = url;

325 i‡(!
uæ
Ë
	`HT_FREE
(
addr
);

327  
ªt
;

328 
	}
}

338 
PUBLIC
 
BOOL
 
	$HTNë_£tBef‹e
 (
HTLi°
 *
li°
)

340 
HTBef‹e
 = 
li°
;

341  
YES
;

342 
	}
}

344 
PUBLIC
 
HTLi°
 * 
	$HTNë_bef‹e
 ()

346  
HTBef‹e
;

347 
	}
}

349 
PUBLIC
 
BOOL
 
	$HTNë_addBef‹e
 (
HTNëBef‹e
 * 
bef‹e
, c⁄° * 
tm∂©e
,

350 * 
∑øm
, 
HTFûãrOrdî
 
‹dî
)

352 i‡(!
HTBef‹e
ËHTBef‹ê
	`HTLi°_√w
();

353  
	`HTNëCÆl_addBef‹e
(
HTBef‹e
, 
bef‹e
, 
tm∂©e
, 
∑øm
, 
‹dî
);

354 
	}
}

356 
PUBLIC
 
BOOL
 
	$HTNë_dñëeBef‹e
 (
HTNëBef‹e
 * 
cbf
)

358  
	`HTNëCÆl_dñëeBef‹e
(
HTBef‹e
, 
cbf
);

359 
	}
}

364 
PUBLIC
 
	$HTNë_execuãBef‹eAŒ
 (
HTReque°
 * 
ªque°
)

366 
ªt
;

367 
BOOL
 
ovîride
 = 
NO
;

368 
HTLi°
 * 
bef‹es
;

369 i‡((
bef‹es
 = 
	`HTReque°_bef‹e
(
ªque°
, &
ovîride
))) {

370 i‡((
ªt
 = 
	`HTNëCÆl_execuãBef‹e
(
bef‹es
, 
ªque°
)Ë!
HT_OK
)

371  
ªt
;

373  
ovîride
 ? 
HT_OK
 : 
	`HTNëCÆl_execuãBef‹e
(
HTBef‹e
, 
ªque°
);

374 
	}
}

380 
PUBLIC
 
BOOL
 
	$HTNë_£tA·î
 (
HTLi°
 *
li°
)

382 
HTA·î
 = 
li°
;

383  
YES
;

384 
	}
}

386 
PUBLIC
 
HTLi°
 * 
	$HTNë_a·î
 ()

388  
HTA·î
;

389 
	}
}

391 
PUBLIC
 
BOOL
 
	$HTNë_addA·î
 (
HTNëA·î
 * 
a·î
, c⁄° * 
tm∂©e
,

392 * 
∑øm
, 
°©us
, 
HTFûãrOrdî
 
‹dî
)

394 i‡(!
HTA·î
ËHTA·î = 
	`HTLi°_√w
();

395  
	`HTNëCÆl_addA·î
(
HTA·î
, 
a·î
, 
tm∂©e
, 
∑øm
, 
°©us
, 
‹dî
);

396 
	}
}

398 
PUBLIC
 
BOOL
 
	$HTNë_dñëeA·î
 (
HTNëA·î
 * 
cbf
)

400  
	`HTNëCÆl_dñëeA·î
(
HTA·î
, 
cbf
);

401 
	}
}

403 
PUBLIC
 
BOOL
 
	$HTNë_dñëeA·îSètus
 (
°©us
)

405  
	`HTNëCÆl_dñëeA·îSètus
(
HTA·î
, 
°©us
);

406 
	}
}

411 
PUBLIC
 
	$HTNë_execuãA·îAŒ
 (
HTReque°
 * 
ªque°
, 
°©us
)

413 
ªt
;

414 
BOOL
 
ovîride
 = 
NO
;

415 
HTLi°
 * 
a·îs
;

416 i‡((
a·îs
 = 
	`HTReque°_a·î
(
ªque°
, &
ovîride
))) {

417 i‡((
ªt
 = 
	`HTNëCÆl_execuãA·î
(
a·îs
, 
ªque°
, 
°©us
)Ë!
HT_OK
)

418  
ªt
;

420  
ovîride
 ? 
HT_OK
 : 
	`HTNëCÆl_execuãA·î
(
HTA·î
, 
ªque°
, 
°©us
);

421 
	}
}

427 
PUBLIC
 
	$HTNë_maxSockë
 ()

429  
MaxA˘ive
;

430 
	}
}

432 
PUBLIC
 
BOOL
 
	$HTNë_£tMaxSockë
 (
√wmax
)

434 i‡(
√wmax
 > 0) {

435 
MaxA˘ive
 = 
√wmax
;

436  
YES
;

438  
NO
;

439 
	}
}

441 
PUBLIC
 
	$HTNë_ö¸ó£Sockë
 ()

443 
A˘ive
++;

444 
	`HTTRACE
(
CORE_TRACE
, "Në M™agî. In¸ósögá˘ivêsockë†tÿ%d, %dÖîsi°íàsockës\n" 
_


445 
A˘ive
 
_
 
Pîsi°ít
);

446 
	}
}

448 
PUBLIC
 
	$HTNë_de¸ó£Sockë
 ()

450 i‡(--
A˘ive
 < 0) Active = 0;

451 
	`HTTRACE
(
CORE_TRACE
, "Në M™agî. De¸ósögá˘ivêsockë†tÿ%d, %dÖîsi°íàsockës\n" 
_


452 
A˘ive
 
_
 
Pîsi°ít
);

453 
	}
}

455 
PUBLIC
 
	$HTNë_avaûabÀSockës
 ()

457 
avaûabÀ
 = 
MaxA˘ive
 - 
A˘ive
;

458  
avaûabÀ
 > 0 ?ávailable : 0;

459 
	}
}

461 
PUBLIC
 
	$HTNë_ö¸ó£Pîsi°ítSockë
 ()

463 
Pîsi°ít
++;

464 
	`HTTRACE
(
CORE_TRACE
, "Në M™agî. %dá˘ivêsockës, in¸ósögÖîsi°íàsockë†tÿ%d\n" 
_


465 
A˘ive
 
_
 
Pîsi°ít
);

466 
	}
}

468 
PUBLIC
 
	$HTNë_de¸ó£Pîsi°ítSockë
 ()

470 i‡(--
Pîsi°ít
 < 0) Persistent = 0;

471 
	`HTTRACE
(
CORE_TRACE
, "Në M™agî. %dá˘ivêsockës, de¸ósögÖîsi°íàsockë†tÿ%d\n" 
_


472 
A˘ive
 
_
 
Pîsi°ít
);

473 
	}
}

475 
PUBLIC
 
	$HTNë_avaûabÀPîsi°ítSockës
 ()

477 
avaûabÀ
 = 
MaxA˘ive
 - 2 - 
Pîsi°ít
;

478  
avaûabÀ
 > 0 ?ávailable : 0;

479 
	}
}

484 
PUBLIC
 
BOOL
 
	$HTNë_isIdÀ
 ()

486  (
HTNëCou¡
 > 0);

487 
	}
}

489 
PUBLIC
 
BOOL
 
	$HTNë_isEm±y
 ()

491  (
HTNëCou¡
 <= 0);

492 
	}
}

494 
PUBLIC
 
	$HTNë_cou¡
 ()

496  
HTNëCou¡
;

497 
	}
}

503 
PRIVATE
 
	$A·îFûãrEvít
 (
HTTimî
 * 
timî
, * 
∑øm
, 
HTEvítTy≥
 
ty≥
)

505 
HTFûãrEvít
 * 
„
 = (HTFûãrEvíà*Ë
∑øm
;

506 i‡(
„
) {

507 
HTReque°
 * 
ªque°
 = 
„
->request;

508 
°©us
 = 
„
->status;

509 i‡(
timî
 !
„
->timer)

510 
	`HTDEBUGBREAK
("NëÅimî. %∞nŸ i¿sync\n" 
_
 
timî
);

511 
	`HTTRACE
(
CORE_TRACE
, "HTNë....... C⁄töuög cÆlög AFTER fûãr†%∞wôhÅimî %p\n" 
_


512 
„
 
_
 
timî
);

515 
	`HT_FREE
(
„
);

518  
	`HTNë_execuãA·îAŒ
(
ªque°
, 
°©us
);

520  
HT_ERROR
;

521 
	}
}

523 
PRIVATE
 
BOOL
 
	$¸óãA·îFûãrEvít
 (
HTReque°
 * 
ªque°
, 
°©us
)

525 
HTFûãrEvít
 * 
me
 = 
NULL
;

526 i‡((
me
 = (
HTFûãrEvít
 *Ë
	`HT_CALLOC
(1, (HTFûãrEvít))Ë=
NULL
)

527 
	`HT_OUTOFMEM
("createAfterFilterEvent");

528 
me
->
ªque°
 =Ñequest;

529 
me
->
°©us
 = status;

530 
me
->
timî
 = 
	`HTTimî_√w
(
NULL
, 
A·îFûãrEvít
, me, 1, 
YES
, 
NO
);

531  
YES
;

532 
	}
}

534 
PRIVATE
 
HTNë
 * 
	$¸óã_obje˘
 ()

536 
√t_hash
 = 0;

537 
HTNë
 * 
me
 = 
NULL
;

540 i‡((
me
 = (
HTNë
 *Ë
	`HT_CALLOC
(1, (HTNë))Ë=
NULL
)

541 
	`HT_OUTOFMEM
("HTNet_new");

542 
me
->
hash
 = 
√t_hash
++ % 
HT_XL_HASH_SIZE
;

545 i‡(!
NëTabÀ
) {

546 i‡((
NëTabÀ
 = (
HTLi°
 **Ë
	`HT_CALLOC
(
HT_XL_HASH_SIZE
, (HTLi° *))Ë=
NULL
)

547 
	`HT_OUTOFMEM
("create_object");

549 i‡(!
NëTabÀ
[
me
->
hash
]ËNëTabÀ[me->hash] = 
	`HTLi°_√w
();

550 
	`HTLi°_addObje˘
(
NëTabÀ
[
me
->
hash
], (*) me);

551 
HTNëCou¡
++;

552 
	`HTTRACE
(
CORE_TRACE
, "Në Obje˘.. %∞¸óãd wôh hash %d\n" 
_
 
me
 _ me->
hash
);

553  
me
;

554 
	}
}

562 
PUBLIC
 
HTNë
 * 
	$HTNë_dup
 (
HTNë
 * 
§c
)

564 i‡(
§c
) {

565 
HTNë
 * 
me
;

566 
hash
;

567 i‡((
me
 = 
	`¸óã_obje˘
()Ë=
NULL
)  NULL;

568 
hash
 = 
me
->hash;

569 
	`HTTRACE
(
CORE_TRACE
, "Në Obje˘.. Du∂iˇãd %p\n" 
_
 
§c
);

570 
	`mem˝y
((*Ë
me
, 
§c
, (
HTNë
));

571 
me
->
hash
 = hash;

572  
me
;

574  
NULL
;

575 
	}
}

577 
PUBLIC
 
BOOL
 
	$HTNë_execuã
 (
HTNë
 * 
√t
, 
HTEvítTy≥
 
ty≥
)

579 i‡(
√t
 &&Çë->
evít
.
cbf
 &&Çë->
ªque°
) {

580 
	`HTTRACE
(
CORE_TRACE
, "Në Obje˘.. %∞ˇŒög %∞wôhÉvíàty≥ %dánd c⁄ãxà%p\n" 
_


581 
√t
 
_
Çë->
evít
.
cbf
 _ 
ty≥
 _Çë->evít.
∑øm
);

582 (*(
√t
->
evít
.
cbf
))(
	`HTNë_sockë
“ë),Çë->evít.
∑øm
, 
ty≥
);

583  
YES
;

585  
NO
;

586 
	}
}

591 
PUBLIC
 
BOOL
 
	$HTNë_°¨t
 (
HTNë
 * 
√t
)

593 i‡(
√t
 &&Çë->
evít
.
cbf
 &&Çë->
ªque°
) {

594 
	`HTTRACE
(
CORE_TRACE
, "Në Obje˘.. Launchög %p\n" 
_
 
√t
);

595 (*(
√t
->
evít
.
cbf
))(
	`HTNë_sockë
“ë),Çë->evít.
∑øm
, 
HTEvít_BEGIN
);

596  
YES
;

598  
NO
;

599 
	}
}

609 
PUBLIC
 
HTNë
 * 
	$HTNë_√w
 (
HTHo°
 * 
ho°
)

611 i‡(
ho°
) {

612 
HTNë
 * 
me
;

613 
	`HTTRACE
(
CORE_TRACE
, "Në Obje˘.. Cª©ögÜi°í obje˘ f‹ ho° %p\n" 
_
 
ho°
);

614 
me
 = 
	`¸óã_obje˘
();

615 
me
->
ho°
 = host;

616  
me
;

618  
NULL
;

619 
	}
}

627 
PUBLIC
 
BOOL
 
	$HTNë_√wSîvî
 (
HTReque°
 * 
ªque°
)

629 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

630 
HTNë
 * 
me
 = 
NULL
;

631 
HTPrŸocﬁ
 * 
¥Ÿocﬁ
;

632 
HTTøn•‹t
 * 
ç
 = 
NULL
;

633 * 
physiˇl
 = 
NULL
;

634 
°©us
;

635 
HTPrŸCÆlback
 * 
cbf
;

637 i‡(!
ªque°
Ë 
NO
;

644 i‡((
°©us
 = 
	`HTNë_execuãBef‹eAŒ
(
ªque°
)Ë!
HT_OK
) {

652 i‡(
	`HTEvít_isCÆlbacksRegi°îed
(Ë&& !
	`HTReque°_¥ìm±ive
(
ªque°
))

653 
	`¸óãA·îFûãrEvít
(
ªque°
, 
°©us
);

655 
	`HTNë_execuãA·îAŒ
(
ªque°
, 
°©us
);

656  
YES
;

663 i‡(!(
physiˇl
 = 
	`HTAnch‹_physiˇl
(
™ch‹
))) {

664 * 
addr
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
™ch‹
);

665 
	`HTTRACE
(
CORE_TRACE
, "Net Object.. Using defaultáddress\n");

666 
	`HTAnch‹_£tPhysiˇl
(
™ch‹
, 
addr
);

667 
physiˇl
 = 
	`HTAnch‹_physiˇl
(
™ch‹
);

668 
	`HT_FREE
(
addr
);

673 * 
ac˚ss
 = 
	`HTP¨£
(
physiˇl
, "", 
PARSE_ACCESS
);

674 i‡((
¥Ÿocﬁ
 = 
	`HTPrŸocﬁ_föd
(
ªque°
, 
ac˚ss
)Ë=
NULL
) {

675 
	`HTTRACE
(
CORE_TRACE
, "Në Obje˘.. NO PROTOCOL Obje˘ found f‹ URI schemê`%s\'\n" 
_
 
ac˚ss
);

676 
	`HT_FREE
(
ac˚ss
);

677  
NO
;

679 i‡(!(
cbf
 = 
	`HTPrŸocﬁ_£rvî
(
¥Ÿocﬁ
))) {

680 
	`HTTRACE
(
CORE_TRACE
, "Në Obje˘.. NO SERVER HANDLER f‹ URI schemê`%s\'\n" 
_
 
ac˚ss
);

681 
	`HT_FREE
(
ac˚ss
);

682 
	`HT_FREE
(
me
);

683  
NO
;

685 
	`HT_FREE
(
ac˚ss
);

689 i‡((
ç
 = 
	`HTTøn•‹t_föd
(
ªque°
, 
	`HTPrŸocﬁ_å™•‹t
(
¥Ÿocﬁ
))Ë=
NULL
) {

690 
	`HTTRACE
(
CORE_TRACE
, "Në Obje˘.. NO TRANSPORT found f‹ÖrŸocﬁ `%s\'\n" 
_
 
	`HTPrŸocﬁ_«me
(
¥Ÿocﬁ
));

691  
NO
;

695 i‡((
me
 = 
	`¸óã_obje˘
()Ë=
NULL
Ë 
NO
;

696 
me
->
¥ìm±ive
 = (
	`HTPrŸocﬁ_¥ìm±ive
(
¥Ÿocﬁ
Ë|| 
	`HTReque°_¥ìm±ive
(
ªque°
));

697 
	`HTNë_£tEvítPri‹ôy
(
me
, 
	`HTReque°_¥i‹ôy
(
ªque°
));

698 
me
->
¥Ÿocﬁ
 =Örotocol;

699 
me
->
å™•‹t
 = 
ç
;

700 
me
->
ªque°
 =Ñequest;

701 
	`HTReque°_£tNë
(
ªque°
, 
me
);

704 
	`HTTRACE
(
CORE_TRACE
, "Në Obje˘.. sèπög SERVERÑeque° %∞™dÇë obje˘ %p\n" 
_
 
ªque°
 _ 
me
);

705 (*(
cbf
))(
INVSOC
, 
ªque°
);

706  
YES
;

707 
	}
}

717 
PUBLIC
 
BOOL
 
	$HTNë_√wClõ¡
 (
HTReque°
 * 
ªque°
)

719 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

720 
HTNë
 * 
me
 = 
NULL
;

721 
HTPrŸocﬁ
 * 
¥Ÿocﬁ
 = 
NULL
;

722 
HTTøn•‹t
 * 
ç
 = 
NULL
;

723 * 
physiˇl
 = 
NULL
;

724 
°©us
;

725 
HTPrŸCÆlback
 * 
cbf
;

727 i‡(!
ªque°
Ë 
NO
;

734 i‡((
°©us
 = 
	`HTNë_execuãBef‹eAŒ
(
ªque°
)Ë!
HT_OK
) {

742 i‡(
	`HTEvít_isCÆlbacksRegi°îed
(Ë&& !
	`HTReque°_¥ìm±ive
(
ªque°
))

743 
	`¸óãA·îFûãrEvít
(
ªque°
, 
°©us
);

745 
	`HTNë_execuãA·îAŒ
(
ªque°
, 
°©us
);

746  
YES
;

753 i‡(!(
physiˇl
 = 
	`HTAnch‹_physiˇl
(
™ch‹
))) {

754 * 
addr
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
™ch‹
);

755 
	`HTTRACE
(
CORE_TRACE
, "Net Object.. Using defaultáddress\n");

756 
	`HTAnch‹_£tPhysiˇl
(
™ch‹
, 
addr
);

757 
physiˇl
 = 
	`HTAnch‹_physiˇl
(
™ch‹
);

758 
	`HT_FREE
(
addr
);

763 * 
¥oxy
 = 
	`HTReque°_¥oxy
(
ªque°
);

764 * 
ac˚ss
 = 
	`HTP¨£
(
¥oxy
 ?Öroxy : 
physiˇl
, "", 
PARSE_ACCESS
);

765 i‡((
¥Ÿocﬁ
 = 
	`HTPrŸocﬁ_föd
(
ªque°
, 
ac˚ss
)Ë=
NULL
) {

766 
	`HTTRACE
(
CORE_TRACE
, "Në Obje˘.. NO PROTOCOL Obje˘ found f‹ URI schemê`%s\'\n" 
_
 
ac˚ss
);

767 
	`HT_FREE
(
ac˚ss
);

768  
NO
;

770 i‡(!(
cbf
 = 
	`HTPrŸocﬁ_˛õ¡
(
¥Ÿocﬁ
))) {

771 
	`HTTRACE
(
CORE_TRACE
, "Në Obje˘.. NO CLIENT HANDLER f‹ URI schemê`%s\'\n" 
_
 
ac˚ss
);

772 
	`HT_FREE
(
ac˚ss
);

773 
	`HT_FREE
(
me
);

774  
NO
;

776 
	`HT_FREE
(
ac˚ss
);

780 
ç
 = 
	`HTTøn•‹t_föd
(
ªque°
, 
	`HTPrŸocﬁ_å™•‹t
(
¥Ÿocﬁ
));

781 i‡(
ç
 =
NULL
) {

782 
	`HTTRACE
(
CORE_TRACE
, "Në Obje˘.. NO TRANSPORT found f‹ÖrŸocﬁ `%s\'\n" 
_
 
	`HTPrŸocﬁ_«me
(
¥Ÿocﬁ
));

783  
NO
;

787 i‡((
me
 = 
	`¸óã_obje˘
()Ë=
NULL
Ë 
NO
;

788 
me
->
¥ìm±ive
 = (
	`HTPrŸocﬁ_¥ìm±ive
(
¥Ÿocﬁ
Ë|| 
	`HTReque°_¥ìm±ive
(
ªque°
));

790 
me
->
¥i‹ôy
 = 
	`HTReque°_¥i‹ôy
(
ªque°
);

792 
	`HTNë_£tEvítPri‹ôy
(
me
, 
	`HTReque°_¥i‹ôy
(
ªque°
));

793 
me
->
¥Ÿocﬁ
 =Örotocol;

794 
me
->
å™•‹t
 = 
ç
;

795 
me
->
ªque°
 =Ñequest;

796 
	`HTReque°_£tNë
(
ªque°
, 
me
);

799 
	`HTReque°_addRëry
(
ªque°
);

806 
	`HTTRACE
(
CORE_TRACE
, "Në Obje˘.. sèπögÑeque° %∞‘ëry=%dËwôhÇë obje˘ %p\n" 
_


807 
ªque°
 
_
 
	`HTReque°_ªåys
‘eque°Ë_ 
me
);

808 (*(
cbf
))(
INVSOC
, 
ªque°
);

809  
YES
;

810 
	}
}

817 
PRIVATE
 
BOOL
 
	$check_≥ndög
 (
HTNë
 * 
√t
)

819 
	`HTTRACE
(
CORE_TRACE
, "Net Object.. Check forÖending Net objects\n");

820 i‡(
√t
) {

827 
	`HTHo°_œunchPídög
(
√t
->
ho°
);

829  
YES
;

831  
NO
;

832 
	}
}

834 
PRIVATE
 
BOOL
 
	$‰ì_√t
 (
HTNë
 * 
√t
)

836 
	`HTTRACE
(
CORE_TRACE
, "Në Obje˘.. Fªeög obje˘ %p\n" 
_
 
√t
);

837 i‡(
√t
) {

838 i‡(
√t
 =
	`HTReque°_√t
“ë->
ªque°
)Ë
	`HTReque°_£tNë
“ë->ªque°, 
NULL
);

839 
	`HT_FREE
(
√t
);

840  
YES
;

842  
NO
;

843 
	}
}

849 
PRIVATE
 
BOOL
 
	$uƒegi°î_√t
 (
HTNë
 * 
√t
)

851 i‡(
√t
 && 
NëTabÀ
) {

852 
HTLi°
 * 
li°
 = 
NëTabÀ
[
√t
->
hash
];

853 i‡(
li°
) {

854 
	`HTLi°_ªmoveObje˘
(
li°
, (*Ë
√t
);

855 
	`check_≥ndög
(
√t
);

856 
HTNëCou¡
--;

857  
YES
;

860  
NO
;

861 
	}
}

866 
PUBLIC
 
BOOL
 
	$HTNë_˛ór
 (
HTNë
 * 
√t
)

868 i‡(
√t
) {

869 
√t
->
ho°
->
ch™√l
 = 
NULL
;

870 
√t
->
ªadSåóm
 = 
NULL
;

871 
√t
->
byãsRód
 = 0;

872 
√t
->
hódîByãsRód
 = 0;

873 
√t
->
byãsWrôãn
 = 0;

874 
√t
->
hódîByãsWrôãn
 = 0;

875  
YES
;

877  
NO
;

878 
	}
}

891 
PUBLIC
 
BOOL
 
	$HTNë_dñëe
 (
HTNë
 * 
√t
, 
°©us
)

893 
	`HTTRACE
(
CORE_TRACE
, "Në Obje˘.. Dñëê%∞™d cÆ»AFTER fûãrs\n" 
_
 
√t
);

894 i‡(
√t
) {

895 
HTReque°
 * 
ªque°
 = 
√t
->request;

902 i‡(
√t
->
ho°
) {

903 
	`HTHo°_uƒegi°î
 (
√t
->
ho°
,Çë, 
HTEvít_READ
);

904 
	`HTHo°_uƒegi°î
 (
√t
->
ho°
,Çë, 
HTEvít_WRITE
);

905 i‡(
°©us
 =
HT_RECOVER_PIPE
) {

906 
	`HTNë_˛ór
(
√t
);

907 
	`HTTRACE
(
CORE_TRACE
, "Në Obje˘.. Re°¨tögÑeque° %∞‘ëry=%dËwôhÇë obje˘ %p\n" 
_


908 
ªque°
 
_
 
	`HTReque°_ªåys
‘eque°Ë_ 
√t
);

909  
YES
;

911 
	`HTHo°_dñëeNë
(
√t
->
ho°
,Çë, 
°©us
);

912 i‡(
	`HTHo°_doRecovî
(
√t
->
ho°
)Ë
	`HTHo°_ªcovîPùe
(net->host);

916 
	`uƒegi°î_√t
(
√t
);

917 
	`‰ì_√t
(
√t
);

920 i‡(
°©us
 !
HT_IGNORE
Ë
	`HTNë_execuãA·îAŒ
(
ªque°
, status);

928  
YES
;

930  
NO
;

931 
	}
}

933 
PUBLIC
 
BOOL
 
	$HTNë_dñëeDup
 (
HTNë
 * 
dup
)

935  
dup
 ? (
	`uƒegi°î_√t
(dupË&& 
	`‰ì_√t
(dup)Ë: 
NO
;

936 
	}
}

943 
PUBLIC
 
BOOL
 
	$HTNë_dñëeAŒ
 ()

945 
	`HTTRACE
(
CORE_TRACE
, "Net Object.. Removeáll Net objects, NO filters\n");

946 i‡(
NëTabÀ
) {

947 
HTLi°
 * 
cur
 = 
NULL
;

948 
HTNë
 * 
¥es
 = 
NULL
;

949 
˙t
;

950 
˙t
=0; c¡<
HT_XL_HASH_SIZE
; cnt++) {

951 i‡((
cur
 = 
NëTabÀ
[
˙t
])) {

952 (
¥es
 = (
HTNë
 *Ë
	`HTLi°_√xtObje˘
(
cur
)Ë!
NULL
) {

953 
	`check_≥ndög
(
¥es
);

954 
	`‰ì_√t
(
¥es
);

957 
	`HTLi°_dñëe
(
NëTabÀ
[
˙t
]);

959 
	`HT_FREE
(
NëTabÀ
);

960 
HTNëCou¡
 = 0;

961  
YES
;

963  
NO
;

964 
	}
}

971 
PUBLIC
 
BOOL
 
	$HTNë_kûlPùe
 (
HTNë
 * 
√t
)

973  (
√t
 &&Çë->
ho°
Ë? 
	`HTHo°_kûlPùe
“ë->ho°Ë: 
NO
;

974 
	}
}

983 
PUBLIC
 
BOOL
 
	$HTNë_kûl
 (
HTNë
 * 
√t
)

985 i‡(
√t
) {

986 
HTAÀπCÆlback
 * 
cbf
 = 
	`HTAÀπ_föd
(
HT_PROG_INTERRUPT
);

987 i‡(
cbf
Ë(*cbf)(
√t
->
ªque°
, 
HT_PROG_INTERRUPT
, 
HT_MSG_NULL
, 
NULL
, NULL, NULL);

988 
	`HTTRACE
(
CORE_TRACE
, "Në Obje˘.. Kûlög %p\n" 
_
 
√t
);

989 i‡(
√t
->
evít
.
cbf
) {

990 (*(
√t
->
evít
.
cbf
))(
	`HTNë_sockë
“ë),Çë->evít.
∑øm
, 
HTEvít_CLOSE
);

991  
YES
;

993  
	`uƒegi°î_√t
(
√t
Ë&& 
	`‰ì_√t
(net);

995 
	`HTTRACE
(
CORE_TRACE
, "Net Object.. No objectÅo kill\n");

996  
NO
;

997 
	}
}

1006 
PUBLIC
 
BOOL
 
	$HTNë_kûlAŒ
 ()

1008 
	`HTTRACE
(
CORE_TRACE
, "Net Object.. Kill ALL Net objects!!!\n");

1009 i‡(
NëTabÀ
) {

1010 
HTLi°
 * 
cur
 = 
NULL
;

1011 
HTNë
 * 
¥es
 = 
NULL
;

1012 
˙t
;

1013 
˙t
=0; c¡<
HT_XL_HASH_SIZE
; cnt++) {

1014 i‡((
cur
 = 
NëTabÀ
[
˙t
])) {

1015 (
¥es
 = (
HTNë
 *Ë
	`HTLi°_œ°Obje˘
(
cur
)Ë!
NULL
) {

1016 
	`HTNë_kûl
(
¥es
);

1017 
cur
 = 
NëTabÀ
[
˙t
];

1021  
YES
;

1023 
	`HTTRACE
(
CORE_TRACE
, "Net Object.. No objectsÅo kill\n");

1024  
NO
;

1025 
	}
}

1035 
PUBLIC
 
HTPri‹ôy
 
	$HTNë_¥i‹ôy
 (
HTNë
 * 
√t
)

1037  (
√t
 ?Çë->
evít
.
¥i‹ôy
 : 
HT_PRIORITY_INV
);

1038 
	}
}

1045 
PUBLIC
 
BOOL
 
	$HTNë_£tPri‹ôy
 (
HTNë
 * 
√t
, 
HTPri‹ôy
 
¥i‹ôy
)

1047 i‡(
√t
) {

1048 
√t
->
evít
.
¥i‹ôy
 =Öriority;

1049  
YES
;

1051  
NO
;

1052 
	}
}

1059 
PUBLIC
 
BOOL
 
	$HTNë_≥rsi°ít
 (
HTNë
 * 
√t
)

1061  (
√t
 && 
	`HTHo°_isPîsi°ít
“ë->
ho°
));

1062 
	}
}

1069 
PUBLIC
 
BOOL
 
	$HTNë_£tPîsi°ít
 (
HTNë
 * 
√t
,

1070 
BOOL
 
≥rsi°ít
,

1071 
HTTøn•‹tMode
 
mode
)

1073 i‡(
√t
) {

1074 
BOOL
 
ªsu…
 = 
	`HTHo°_£tPîsi°ít
(
√t
->
ho°
, 
≥rsi°ít
, 
mode
);

1075 
	`HTTRACE
(
CORE_TRACE
, "Në Obje˘.. Pîsi°íàc⁄√˘i⁄ së %†%s\n" 
_


1076 
≥rsi°ít
 ? "ON" : "OFF" 
_


1077 
ªsu…
 ? "succeeded" : "failed");

1078  
ªsu…
;

1080  
NO
;

1081 
	}
}

1086 
PUBLIC
 
BOOL
 
	$HTNë_£tC⁄ãxt
 (
HTNë
 * 
√t
, * 
c⁄ãxt
)

1088 i‡(
√t
) {

1089 
√t
->
c⁄ãxt
 = context;

1090  
YES
;

1092  
NO
;

1093 
	}
}

1095 
PUBLIC
 * 
	$HTNë_c⁄ãxt
 (
HTNë
 * 
√t
)

1097  
√t
 ?Çë->
c⁄ãxt
 : 
NULL
;

1098 
	}
}

1103 
PUBLIC
 
BOOL
 
	$HTNë_£tSockë
 (
HTNë
 * 
√t
, 
SOCKET
 
sockfd
)

1105 i‡(
√t
 &&Çë->
ho°
 &&Çë->ho°->
ch™√l
) {

1106 
	`HTCh™√l_£tSockë
(
√t
->
ho°
->
ch™√l
, 
sockfd
);

1107  
YES
;

1109  
NO
;

1110 
	}
}

1112 
PUBLIC
 
SOCKET
 
	$HTNë_sockë
 (
HTNë
 * 
√t
)

1114  (
√t
 &&Çë->
ho°
 &&Çë->ho°->
ch™√l
 ? 
	`HTCh™√l_sockë
“ë->ho°->ch™√lË: 
INVSOC
);

1115 
	}
}

1120 
PUBLIC
 
BOOL
 
	$HTNë_£tReque°
 (
HTNë
 * 
√t
, 
HTReque°
 * 
ªque°
)

1122 i‡(
√t
 && 
ªque°
) {

1123 
√t
->
ªque°
 =Ñequest;

1124  
YES
;

1126  
NO
;

1127 
	}
}

1129 
PUBLIC
 
HTReque°
 * 
	$HTNë_ªque°
 (
HTNë
 * 
√t
)

1131  (
√t
 ?Çë->
ªque°
 : 
NULL
);

1132 
	}
}

1137 
PUBLIC
 
BOOL
 
	$HTNë_£tCh™√l
 (
HTNë
 * 
√t
, 
HTCh™√l
 * 
ch™√l
)

1139  (
√t
 && 
ch™√l
Ë? 
	`HTHo°_£tCh™√l
“ë->
ho°
, ch™√lË: 
NO
;

1140 
	}
}

1142 
PUBLIC
 
HTCh™√l
 * 
	$HTNë_ch™√l
 (
HTNë
 * 
√t
)

1144  
√t
 ? 
	`HTHo°_ch™√l
“ë->
ho°
Ë: 
NULL
;

1145 
	}
}

1150 
PUBLIC
 
BOOL
 
	$HTNë_£tHo°
 (
HTNë
 * 
√t
, 
HTHo°
 * 
ho°
)

1152 i‡(
√t
 && 
ho°
) {

1153 
√t
->
ho°
 = host;

1154  
YES
;

1156  
NO
;

1157 
	}
}

1159 
PUBLIC
 
HTHo°
 * 
	$HTNë_ho°
 (
HTNë
 * 
√t
)

1161  (
√t
 ?Çë->
ho°
 : 
NULL
);

1162 
	}
}

1167 
PUBLIC
 
BOOL
 
	$HTNë_£tDns
 (
HTNë
 * 
√t
, 
HTdns
 * 
dns
)

1169 i‡(
√t
 && 
dns
) {

1170 
√t
->
ho°
->
dns
 = dns;

1171  
YES
;

1173  
NO
;

1174 
	}
}

1176 
PUBLIC
 
HTdns
 * 
	$HTNë_dns
 (
HTNë
 * 
√t
)

1178  (
√t
 ?Çë->
ho°
->
dns
 : 
NULL
);

1179 
	}
}

1181 
PUBLIC
 
BOOL
 
	$HTNë_£tPrŸocﬁ
 (
HTNë
 * 
√t
, 
HTPrŸocﬁ
 * 
¥Ÿocﬁ
)

1183 i‡(
√t
 && 
¥Ÿocﬁ
) {

1184 
√t
->
¥Ÿocﬁ
 =Örotocol;

1185  
YES
;

1187  
NO
;

1188 
	}
}

1190 
PUBLIC
 
HTPrŸocﬁ
 * 
	$HTNë_¥Ÿocﬁ
 (
HTNë
 * 
√t
)

1192  (
√t
 ?Çë->
¥Ÿocﬁ
 : 
NULL
);

1193 
	}
}

1195 
PUBLIC
 
BOOL
 
	$HTNë_£tTøn•‹t
 (
HTNë
 * 
√t
, 
HTTøn•‹t
 * 
ç
)

1197 i‡(
√t
 && 
ç
) {

1198 
√t
->
å™•‹t
 = 
ç
;

1199  
YES
;

1201  
NO
;

1202 
	}
}

1204 
PUBLIC
 
HTTøn•‹t
 * 
	$HTNë_å™•‹t
 (
HTNë
 * 
√t
)

1206  (
√t
 ?Çë->
å™•‹t
 : 
NULL
);

1207 
	}
}

1209 
PUBLIC
 
BOOL
 
	$HTNë_¥ìm±ive
 (
HTNë
 * 
√t
)

1211  (
√t
 ?Çë->
¥ìm±ive
 : 
NO
);

1212 
	}
}

1218 
PUBLIC
 
HTOuçutSåóm
 * 
	$HTNë_gëOuçut
 (
HTNë
 * 
me
, * 
∑øm
, 
mode
)

1220 i‡(
me
 && me->
ho°
 && me->ho°->
ch™√l
 && me->
å™•‹t
) {

1221 
HTTøn•‹t
 * 
ç
 = 
me
->
å™•‹t
;

1222 
HTCh™√l
 * 
ch
 = 
me
->
ho°
->
ch™√l
;

1223 
HTOuçutSåóm
 * 
ouçut
 = (*
ç
->
ouçut_√w
)(
me
->
ho°
, 
ch
, 
∑øm
, 
mode
);

1224 
	`HTCh™√l_£tOuçut
(
ch
, 
ouçut
);

1225  
ouçut
;

1227 
	`HTTRACE
(
CORE_TRACE
, "Host Object.. Can't create output stream\n");

1228  
NULL
;

1229 
	}
}

1231 
PUBLIC
 
HTEvít
 * 
	$HTNë_evít
 (
HTNë
 * 
√t
)

1233  
√t
 ? &√t->
evít
 : 
NULL
;

1234 
	}
}

1236 
PUBLIC
 
BOOL
 
	$HTNë_£tEvítP¨am
 (
HTNë
 * 
√t
, * 
evítP¨am
)

1238 i‡(
√t
Ë 
	`HTEvít_£tP¨am
(&√t->
evít
, 
evítP¨am
);

1239  
NO
;

1240 
	}
}

1242 
PUBLIC
 * 
	$HTNë_evítP¨am
 (
HTNë
 * 
√t
)

1244  
√t
 ?Çë->
evít
.
∑øm
 : 
NULL
;

1245 
	}
}

1247 
PUBLIC
 
BOOL
 
	$HTNë_£tEvítCÆlback
(
HTNë
 * 
√t
, 
HTEvítCÆlback
 * 
cbf
)

1249 i‡(
√t
Ë 
	`HTEvít_£tCÆlback
(&√t->
evít
, 
cbf
);

1250  
NO
;

1251 
	}
}

1253 
PUBLIC
 
HTEvítCÆlback
 * 
	$HTNë_evítCÆlback
(
HTNë
 * 
√t
)

1255  
√t
->
evít
.
cbf
;

1256 
	}
}

1258 
PUBLIC
 
BOOL
 
	$HTNë_£tEvítPri‹ôy
(
HTNë
 * 
√t
, 
HTPri‹ôy
 
¥i‹ôy
)

1260 i‡(
√t
Ë 
	`HTEvít_£tPri‹ôy
(&√t->
evít
, 
¥i‹ôy
);

1261  
NO
;

1262 
	}
}

1264 
PUBLIC
 
HTPri‹ôy
 
	$HTNë_evítPri‹ôy
(
HTNë
 * 
√t
)

1266  
√t
->
evít
.
¥i‹ôy
;

1267 
	}
}

1269 
PUBLIC
 
HTSåóm
 * 
	$HTNë_ªadSåóm
(
HTNë
 * 
√t
)

1271 i‡(!
√t
Ë 
NULL
;

1272  
√t
->
ªadSåóm
;

1273 
	}
}

1275 
PUBLIC
 
BOOL
 
	$HTNë_£tRódSåóm
 (
HTNë
 * 
√t
, 
HTSåóm
 * 
°ªam
)

1277 i‡(
√t
) {

1278 
√t
->
ªadSåóm
 = 
°ªam
;

1279  
YES
;

1281  
NO
;

1282 
	}
}

1289 
PUBLIC
 
BOOL
 
	$HTNë_£tRawByãsCou¡
 (
HTNë
 * 
√t
, 
BOOL
 
mode
)

1291 i‡(
√t
) {

1292 
√t
->
cou¡RawByãs
 = 
mode
;

1293  
YES
;

1295  
NO
;

1296 
	}
}

1298 
PUBLIC
 
BOOL
 
	$HTNë_øwByãsCou¡
 (
HTNë
 * 
√t
)

1300  (
√t
 &&Çë->
cou¡RawByãs
);

1301 
	}
}

	@Library/src/HTNet.h

42 #i‚de‡
HTNET_H


43 
	#HTNET_H


	)

52 
_HTNë
 
	tHTNë
;

54 
	~"HTEvít.h
"

55 
	~"HTReq.h
"

56 
	~"HTRe•⁄£.h
"

57 
	~"HTTøns.h
"

58 
	~"HTHo°.h
"

59 
	~"HTPrŸ.h
"

60 
	~"HTCh™∆.h
"

61 
	~"HTDNS.h
"

91 
	e_HTFûãrOrdî
 {

92 
	mHT_FILTER_FIRST
 = 0x0,

93 
	mHT_FILTER_EARLY
 = 0x3FFF,

94 
	mHT_FILTER_MIDDLE
 = 0x7FFF,

95 
	mHT_FILTER_LATE
 = 0xBFFE,

96 
	mHT_FILTER_LAST
 = 0xFFFF

97 } 
	tHTFûãrOrdî
;

127 
	tHTNëBef‹e
 (
	tHTReque°
 * 
	tªque°
, * 
	t∑øm
, 
	tmode
);

136 
BOOL
 
HTNëCÆl_addBef‹e
 (
HTLi°
 * 
li°
, 
HTNëBef‹e
 * 
bef‹e
,

137 c⁄° * 
tm∂©e
, * 
∑øm
,

138 
HTFûãrOrdî
 
‹dî
);

146 
BOOL
 
HTNëCÆl_dñëeBef‹e
 (
HTLi°
 * 
li°
, 
HTNëBef‹e
 * 
bef‹e
);

153 
BOOL
 
HTNëCÆl_dñëeBef‹eAŒ
 (
HTLi°
 * 
li°
);

163 
HTNëCÆl_execuãBef‹e
 (
HTLi°
 * 
li°
, 
HTReque°
 * 
ªque°
);

222 
	tHTNëA·î
 (
	tHTReque°
 * 
	tªque°
, 
	tHTRe•⁄£
 * 
	tª•⁄£
,

223 * 
	t∑øm
, 
	t°©us
);

232 
BOOL
 
HTNëCÆl_addA·î
 (
HTLi°
 * 
li°
, 
HTNëA·î
 * 
a·î
,

233 c⁄° * 
tm∂©e
, * 
∑øm
,

234 
°©us
, 
HTFûãrOrdî
 
‹dî
);

242 
BOOL
 
HTNëCÆl_dñëeA·î
 (
HTLi°
 * 
li°
, 
HTNëA·î
 * 
a·î
);

243 
BOOL
 
HTNëCÆl_dñëeA·îSètus
 (
HTLi°
 * 
li°
, 
°©us
);

250 
BOOL
 
HTNëCÆl_dñëeA·îAŒ
 (
HTLi°
 * 
li°
);

261 
HTNëCÆl_execuãA·î
 (
HTLi°
 * 
li°
, 
HTReque°
 * 
ªque°
,

262 
°©us
);

279 
BOOL
 
HTNë_£tBef‹e
 (
HTLi°
 * 
li°
);

281 
HTLi°
 * 
HTNë_bef‹e
 ();

283 
BOOL
 
HTNë_addBef‹e
 (
HTNëBef‹e
 * 
bef‹e
, c⁄° * 
tm∂©e
,

284 * 
∑øm
, 
HTFûãrOrdî
 
‹dî
);

286 
BOOL
 
HTNë_dñëeBef‹e
 (
HTNëBef‹e
 * 
bef‹e
);

293 
HTNë_execuãBef‹eAŒ
 (
HTReque°
 * 
ªque°
);

303 
BOOL
 
HTNë_£tA·î
 (
HTLi°
 * 
li°
);

305 
HTLi°
 * 
HTNë_a·î
 ();

307 
BOOL
 
HTNë_addA·î
 (
HTNëA·î
 * 
a·î
, c⁄° * 
tm∂©e
,

308 * 
∑øm
, 
°©us
,

309 
HTFûãrOrdî
 
‹dî
);

311 
BOOL
 
HTNë_dñëeA·î
 (
HTNëA·î
 * 
a·î
);

313 
BOOL
 
HTNë_dñëeA·îSètus
 (
°©us
);

320 
HTNë_execuãA·îAŒ
 (
HTReque°
 * 
ªque°
, 
°©us
);

343 
BOOL
 
HTNë_£tMaxSockë
 (
√wmax
);

344 
HTNë_maxSockë
 ();

352 
HTNë_ö¸ó£Sockë
 ();

353 
HTNë_de¸ó£Sockë
 ();

355 
HTNë_avaûabÀSockës
 ();

363 
HTNë_ö¸ó£Pîsi°ítSockë
 ();

364 
HTNë_de¸ó£Pîsi°ítSockë
 ();

366 
HTNë_avaûabÀPîsi°ítSockës
 ();

377 
BOOL
 
HTNë_isIdÀ
 ();

388 
HTLi°
 *
HTNë_a˘iveQueue
 ();

389 
BOOL
 
HTNë_idÀ
 ();

411 
BOOL
 
HTNë_idÀ
 ();

421 
BOOL
 
HTNë_isEm±y
 ();

422 
HTNë_cou¡
 ();

433 
HTLi°
 *
HTNë_≥ndögQueue
 ();

455 
BOOL
 
HTNë_√wClõ¡
 (
HTReque°
 * 
ªque°
);

464 
BOOL
 
HTNë_√wSîvî
 (
HTReque°
 * 
ªque°
);

471 
HTNë
 * 
HTNë_√w
 (
HTHo°
 * 
ho°
);

482 
HTNë
 * 
HTNë_dup
 (HTNë * 
§c
);

483 
BOOL
 
HTNë_dñëeDup
 (
HTNë
 * 
dup
);

492 
BOOL
 
HTNë_°¨t
 (
HTNë
 * 
√t
);

503 
BOOL
 
HTNë_execuã
 (
HTNë
 * 
√t
, 
HTEvítTy≥
 
ty≥
);

505 
HTEvít
 * 
HTNë_evít
 (
HTNë
 * 
√t
);

506 
BOOL
 
HTNë_£tEvítP¨am
 (
HTNë
 * 
√t
, * 
evítP¨am
);

507 * 
HTNë_evítP¨am
 (
HTNë
 * 
√t
);

508 
BOOL
 
HTNë_£tEvítCÆlback
(
HTNë
 * 
√t
, 
HTEvítCÆlback
 * 
cbf
);

509 
HTEvítCÆlback
 * 
HTNë_evítCÆlback
(
HTNë
 * 
√t
);

524 
BOOL
 
HTNë_dñëe
 (
HTNë
 * 
me
, 
°©us
);

535 
BOOL
 
HTNë_dñëeAŒ
 ();

549 
BOOL
 
HTNë_waô
 (
HTNë
 *
√t
);

565 
HTPri‹ôy
 
HTNë_¥i‹ôy
 (
HTNë
 * 
√t
);

566 
BOOL
 
HTNë_£tPri‹ôy
 (
HTNë
 * 
√t
, 
HTPri‹ôy
 
¥i‹ôy
);

578 
BOOL
 
HTNë_≥rsi°ít
 (
HTNë
 * 
√t
);

586 
BOOL
 
HTNë_£tPîsi°ít
 (
HTNë
 * 
√t
,

587 
BOOL
 
≥rsi°ít
,

588 
HTTøn•‹tMode
 
mode
);

603 
BOOL
 
HTNë_kûlPùe
 (
HTNë
 * 
√t
);

617 
BOOL
 
HTNë_kûl
 (
HTNë
 * 
me
);

630 
BOOL
 
HTNë_kûlAŒ
 ();

645 
HTI≈utSåóm
 * 
HTNë_gëI≈ut
 (
HTNë
 * 
√t
, 
HTSåóm
 * 
èrgë
,

646 * 
∑øm
, 
mode
);

648 
HTOuçutSåóm
 * 
HTNë_gëOuçut
 (
HTNë
 * 
me
, * 
∑øm
, 
mode
);

661 
BOOL
 
HTNë_£tC⁄ãxt
 (
HTNë
 * 
√t
, * 
c⁄ãxt
);

662 * 
HTNë_c⁄ãxt
 (
HTNë
 * 
√t
);

670 
BOOL
 
HTNë_£tSockë
 (
HTNë
 * 
√t
, 
SOCKET
 
sockfd
);

671 
SOCKET
 
HTNë_sockë
 (
HTNë
 * 
√t
);

686 
BOOL
 
HTNë_¥ìm±ive
 (
HTNë
 * 
√t
);

697 
BOOL
 
HTNë_£tReque°
 (
HTNë
 * 
√t
, 
HTReque°
 * 
ªque°
);

698 
HTReque°
 * 
HTNë_ªque°
 (
HTNë
 * 
√t
);

706 
BOOL
 
HTNë_£tPrŸocﬁ
 (
HTNë
 * 
√t
, 
HTPrŸocﬁ
 * 
¥Ÿocﬁ
);

707 
HTPrŸocﬁ
 * 
HTNë_¥Ÿocﬁ
 (
HTNë
 * 
√t
);

718 
BOOL
 
HTNë_£tTøn•‹t
 (
HTNë
 * 
√t
, 
HTTøn•‹t
 * 
ç
);

719 
HTTøn•‹t
 * 
HTNë_å™•‹t
 (
HTNë
 * 
√t
);

727 
BOOL
 
HTNë_£tCh™√l
 (
HTNë
 * 
√t
, 
HTCh™√l
 * 
ch™√l
);

728 
HTCh™√l
 * 
HTNë_ch™√l
 (
HTNë
 * 
√t
);

736 
BOOL
 
HTNë_£tHo°
 (
HTNë
 * 
√t
, 
HTHo°
 * 
ho°
);

737 
HTHo°
 * 
HTNë_ho°
 (
HTNë
 * 
√t
);

748 
BOOL
 
HTNë_£tDns
 (
HTNë
 * 
√t
, 
HTdns
 * 
dns
);

749 
HTdns
 * 
HTNë_dns
 (
HTNë
 * 
√t
);

757 
HTSåóm
 * 
HTNë_ªadSåóm
(
HTNë
 * 
√t
);

758 
BOOL
 
HTNë_£tRódSåóm
 (
HTNë
 * 
√t
, 
HTSåóm
 * 
°ªam
);

770 
BOOL
 
HTNë_£tRawByãsCou¡
 (
HTNë
 * 
√t
, BOOL 
mode
);

771 
BOOL
 
HTNë_øwByãsCou¡
 (
HTNë
 * 
√t
);

	@Library/src/HTNetMan.h

26 #i‚de‡
HTNETMAN_H


27 
	#HTNETMAN_H


	)

28 
	~"HTNë.h
"

29 
	~"HTDNS.h
"

30 
	~"HTEvít.h
"

31 
	~"HTPrŸ.h
"

40 
	s_HTNë
 {

41 
	mhash
;

44 
HTReque°
 * 
	mªque°
;

45 
HTHo°
 * 
	mho°
;

46 
HTPrŸocﬁ
 * 
	m¥Ÿocﬁ
;

47 
HTTøn•‹t
 * 
	må™•‹t
;

48 
	m£ssi⁄
;

51 
BOOL
 
	mcou¡RawByãs
;

52 
	mbyãsRód
;

53 
	mhódîByãsRód
;

54 
	mbyãsWrôãn
;

55 
	mhódîByãsWrôãn
;

58 
	mªåy
;

59 
	mhome
;

62 
time_t
 
	mc⁄√˘time
;

63 
BOOL
 
	m¥ìm±ive
;

65 
HTEvít
 
	mevít
;

66 
HTSåóm
 * 
	mªadSåóm
;

69 * 
	mc⁄ãxt
;

72 
HTEvítTy≥
 
	mªgi°îedF‹
;

75 
SOCKET
 
HTNë_sockë
(
HTNë
 * 
me
);

87 
	#HTNë_£tByãsRód
(
me
,
l
Ë((meË? (me->
byãsRód
=÷)Ë: -1)

	)

88 
	#HTNë_byãsRód
(
me
Ë((meË? (me)->
byãsRód
 : -1)

	)

89 
	#HTNë_addByãsRód
(
me
,
l
Ë((meË? (me->
byãsRód
+=÷)Ë: -1)

	)

97 
	#HTNë_£tHódîByãsRód
(
me
,
l
Ë((meË? (me->
hódîByãsRód
=÷)Ë:-1)

	)

98 
	#HTNë_hódîByãsRód
(
me
Ë((meË? (me)->
hódîByãsRód
 : -1)

	)

99 
	#HTNë_addHódîByãsRód
(
me
,
l
Ë((meË? (me->
hódîByãsRód
+=÷)Ë: -1)

	)

110 
	#HTNë_£tByãsWrôãn
(
me
,
l
Ë((meË? (me->
byãsWrôãn
=÷)Ë:-1)

	)

111 
	#HTNë_byãsWrôãn
(
me
Ë((meË? (me)->
byãsWrôãn
 : -1)

	)

112 
	#HTNë_addByãsWrôãn
(
me
,
l
Ë((meË? (me->
byãsWrôãn
+=÷)Ë: -1)

	)

120 
	#HTNë_£tHódîByãsWrôãn
(
me
,
l
Ë((meË? (me->
hódîByãsWrôãn
=÷)Ë:-1)

	)

121 
	#HTNë_hódîByãsWrôãn
(
me
) ((me) ? \

122 ((
me
)->
hódîByãsWrôãn
==0 ? \

123 
	`HTNë_byãsWrôãn
(
me
) : \

124 (
me
)->
hódîByãsWrôãn
Ë: -1)

	)

125 
	#HTNë_addHódîByãsWrôãn
(
me
,
l
Ë((meË? (me->
hódîByãsWrôãn
+=÷)Ë: -1)

	)

133 
BOOL
 
HTNë_£tEvítP¨am
(
HTNë
 * 
√t
, * 
evítP¨am
);

134 * 
HTNë_evítP¨am
(
HTNë
 * 
√t
);

135 
BOOL
 
HTNë_£tEvítCÆlback
(
HTNë
 * 
√t
, 
HTEvítCÆlback
 * 
cbf
);

136 
HTEvítCÆlback
 * 
HTNë_evítCÆlback
(
HTNë
 * 
√t
);

137 
BOOL
 
HTNë_£tEvítPri‹ôy
(
HTNë
 * 
√t
, 
HTPri‹ôy
 
¥i‹ôy
);

138 
HTPri‹ôy
 
HTNë_evítPri‹ôy
(
HTNë
 * 
√t
);

	@Library/src/HTNetTxt.c

17 
	~"wwwsys.h
"

18 
	~"HTUtûs.h
"

19 
	~"HTSåög.h
"

20 
	~"HTSåóm.h
"

21 
	~"HTNëTxt.h
"

24 
	s_HTSåóm
 {

25 c⁄° 
HTSåómCœss
 * 
	miß
;

26 
HTSåóm
 * 
	mèrgë
;

27 c⁄° * 
	m°¨t
;

28 
BOOL
 
	mhad_¸
;

31 
	#PUTC
(
c
Ë(*
me
->
èrgë
->
iß
->
put_ch¨a˘î
)(me->èrgë, c)

	)

32 
	#PUTBLOCK
(
b
, 
l
Ë(*
me
->
èrgë
->
iß
->
put_block
)(me->èrgë, b,Ü)

	)

44 
PRIVATE
 
	$NëToText_put_block
 (
HTSåóm
 * 
me
, c⁄° * 
s
, 
l
)

46 
°©us
;

47 i‡(!
me
->
°¨t
)

48 
me
->
°¨t
 = 
s
;

50 
l
 -(
me
->
°¨t
 - 
s
);

51 
s
 = 
me
->
°¨t
;

53 
l
-- > 0) {

54 i‡(
me
->
had_¸
 && *
s
 =
LF
) {

55 i‡(
s
 > 
me
->
°¨t
+1) {

56 i‡((
°©us
 = 
	`PUTBLOCK
(
me
->
°¨t
, 
s
 - me->°¨t-1)Ë!
HT_OK
)

57  
°©us
;

59 
me
->
°¨t
 = 
s
+1;

60 i‡((
°©us
 = 
	`PUTC
('\n')Ë!
HT_OK
)

61  
°©us
;

63 
me
->
had_¸
 = (*
s
++ =
CR
);

65 i‡(
me
->
°¨t
 < 
s
 && (
°©us
 = 
	`PUTBLOCK
(me->°¨t, s-me->°¨t)Ë!
HT_OK
)

66  
°©us
;

67 
me
->
°¨t
 = 
NULL
;

68  
HT_OK
;

69 
	}
}

71 
PRIVATE
 
	$NëToText_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

73  
	`NëToText_put_block
(
me
, &
c
, 1);

74 
	}
}

76 
PRIVATE
 
	$NëToText_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

78  
	`NëToText_put_block
(
me
, 
s
, (Ë
	`°æí
(s));

79 
	}
}

81 
PRIVATE
 
	$Në_Êush
 (
HTSåóm
 * 
me
)

83  
me
->
èrgë
 ? (*me->èrgë->
iß
->
Êush
)(me->èrgëË: 
HT_OK
;

84 
	}
}

86 
PRIVATE
 
	$Në_‰ì
 (
HTSåóm
 * 
me
)

88 
°©us
 = 
HT_OK
;

89 i‡(
me
->
èrgë
) {

90 i‡((
°©us
 = (*
me
->
èrgë
->
iß
->
_‰ì
)(me->èrgë)Ë=
HT_WOULD_BLOCK
)

91  
HT_WOULD_BLOCK
;

93 
	`HT_FREE
(
me
);

94  
°©us
;

95 
	}
}

97 
PRIVATE
 
	$Në_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

99 i‡(
me
->
èrgë
)

100 (*
me
->
èrgë
->
iß
->
ab‹t
)(me->èrgë, 
e
);

101 
	`HT_FREE
(
me
);

102  
HT_ERROR
;

103 
	}
}

105 
PRIVATE
 
HTSåómCœss
 
	gNëToTextCœss
 = {

107 
Në_Êush
,

108 
Në_‰ì
,

109 
Në_ab‹t
,

110 
NëToText_put_ch¨a˘î
,

111 
NëToText_put_°rög
,

112 
NëToText_put_block


115 
PUBLIC
 
HTSåóm
 * 
	$HTNëToText
 (
HTSåóm
 * 
èrgë
)

117 
HTSåóm
* 
me
;

118 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

119 
	`HT_OUTOFMEM
("NetToText");

120 
me
->
iß
 = &
NëToTextCœss
;

121 
me
->
had_¸
 = 
NO
;

122 
me
->
èrgë
 =Åarget;

123  
me
;

124 
	}
}

133 
PRIVATE
 
	$TextToNë_put_block
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
Àn
)

135 
°©us
;

137 c⁄° *
limô
 = 
b
+
Àn
;

139 i‡(!
me
->
°¨t
)

140 
me
->
°¨t
 = 
b
;

142 
Àn
 -(
me
->
°¨t
 - 
b
);

143 
b
 = 
me
->
°¨t
;

145 
Àn
-- > 0) {

146 i‡(
me
->
had_¸
 && *
b
 =
LF
) {

147 i‡(
b
 > 
me
->
°¨t
+1) {

148 i‡((
°©us
 = 
	`PUTBLOCK
(
me
->
°¨t
, 
b
 - me->°¨t-1)Ë!
HT_OK
)

149  
°©us
;

151 
me
->
°¨t
 = 
b
+1;

152 i‡((
°©us
 = 
	`PUTC
('\n')Ë!
HT_OK
)

153  
°©us
;

155 
me
->
had_¸
 = (*
b
++ =
CR
);

157 i‡(
me
->
°¨t
 < 
b
 && (
°©us
 = 
	`PUTBLOCK
(me->°¨t, b-me->°¨t)Ë!
HT_OK
)

158  
°©us
;

159 
me
->
°¨t
 = 
NULL
;

160  
HT_OK
;

161 
	}
}

163 
PRIVATE
 
	$TextToNë_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

165  
	`TextToNë_put_block
(
me
, &
c
, 1);

166 
	}
}

168 
PRIVATE
 
	$TextToNë_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

170  
	`TextToNë_put_block
(
me
, 
s
, (Ë
	`°æí
(s));

171 
	}
}

173 
PRIVATE
 
HTSåómCœss
 
	gTextToNëCœss
 = {

175 
Në_Êush
,

176 
Në_‰ì
,

177 
Në_ab‹t
,

178 
TextToNë_put_ch¨a˘î
,

179 
TextToNë_put_°rög
,

180 
TextToNë_put_block


183 
PUBLIC
 
HTSåóm
 * 
	$HTTextToNë
 (
HTSåóm
 * 
èrgë
)

185 
HTSåóm
* 
me
;

186 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

187 
	`HT_OUTOFMEM
("TextToNet");

188 
me
->
iß
 = &
TextToNëCœss
;

189 
me
->
had_¸
 = 
NO
;

190 
me
->
èrgë
 =Åarget;

191  
me
;

192 
	}
}

	@Library/src/HTNetTxt.h

30 #i‚de‡
HTNETTXT_H


31 
	#HTNETTXT_H


	)

33 
HTSåóm
 * 
HTNëToText
 (HTSåóm * 
èrgë
);

	@Library/src/HTNews.c

18 
	~"wwwsys.h
"

19 
	~"WWWUtû.h
"

20 
	~"WWWC‹e.h
"

21 
	~"WWWSåóm.h
"

22 
	~"WWWTøns.h
"

23 
	~"HTReqM™.h
"

24 
	~"HTNewsRq.h
"

25 
	~"HTNewsLs.h
"

26 
	~"HTNews.h
"

29 #i‚de‡
NEWS_LIST_FILE


30 
	#NEWS_LIST_FILE
 ".www_√ws"

	)

33 
	#MAX_NEWS_ARTICLES
 0

	)

35 
	#PUTBLOCK
(
b
, 
l
Ë(*
me
->
èrgë
->
iß
->
put_block
Ë(me->èrgë, b,Ü)

	)

36 
	#ABORT_TARGET
 (*
me
->
èrgë
->
iß
->
ab‹t
Ë(me->èrgë, 
e
)

	)

39 
	e_HTNewsSèã
 {

40 
	mNEWS_ERROR
 = -3,

41 
	mNEWS_SUCCESS
 = -2,

42 
	mNEWS_NO_DATA
 = -1,

43 
	mNEWS_BEGIN
 = 0,

44 
	mNEWS_SEEK_CACHE
,

45 
	mNEWS_NEED_CONNECTION
,

46 
	mNEWS_NEED_GREETING
,

47 
	mNEWS_NEED_SWITCH
,

48 
	mNEWS_NEED_ARTICLE
,

49 #i‡
HT_LISTGROUP


50 
	mNEWS_NEED_LGRP
,

52 
	mNEWS_NEED_LIST
,

53 
	mNEWS_NEED_GROUP
,

54 
	mNEWS_NEED_XOVER
,

55 
	mNEWS_NEED_HEAD
,

56 
	mNEWS_NEED_POST
,

57 
	mNEWS_NEED_BODY


58 } 
	tHTNewsSèã
;

60 
	s_√ws_öfo
 {

61 
HTChunk
 * 
	mcmd
;

62 
	mªpcode
;

63 * 
	mª∂y
;

64 
HTNewsSèã
 
	m°©e
;

65 
HTF‹m©
 
	mf‹m©
;

66 * 
	m«me
;

67 
BOOL
 
	m£¡
;

68 
	mfú°
;

69 
	mœ°
;

70 
	mtŸÆ
;

71 
	mcuºít
;

72 
HTNë
 * 
	m√t
;

73 } 
	t√ws_öfo
;

76 
	s_HTSåóm
 {

77 c⁄° 
HTSåómCœss
 * 
	miß
;

78 
HTSåóm
 * 
	mèrgë
;

79 
HTReque°
 * 
	mªque°
;

80 
√ws_öfo
 * 
	m√ws
;

81 
HTEOLSèã
 
	mEOL°©e
;

82 
BOOL
 
	m£mi_å™s
;

83 
BOOL
 
	mjunk
;

84 
	mbuf„r
[
MAX_NEWS_LINE
+1];

85 
	mbuÊí
;

86 
HTHo°
 * 
	mho°
;

89 
	s_HTI≈utSåóm
 {

90 c⁄° 
HTI≈utSåómCœss
 * 
	miß
;

93 
PRIVATE
 
	gMaxAπ
 = 
MAX_NEWS_ARTICLES
;

105 
PRIVATE
 
	$SˇnRe•⁄£
 (
HTSåóm
 * 
me
)

107 
√ws_öfo
 *
√ws
 = 
me
->news;

108 *(
me
->
buf„r
+me->
buÊí
) = '\0';

109 i‡(
	`isdigô
((Ë*(
me
->
buf„r
))Ë
	`ssˇnf
(me->buf„r, "%d", &
√ws
->
ªpcode
);

110 
me
->
buÊí
 = 0;

111 
√ws
->
ª∂y
 = 
me
->
buf„r
+4;

112 
	`HTTRACE
(
PROT_TRACE
, "New†Rx..... `%s\'\n" 
_
 
√ws
->
ª∂y
);

115 i‡(
me
->
√ws
->
f‹m©
 &&Çews->
ªpcode
/100 == 2) {

116 
HTReque°
 *
ªq
 = 
me
->
ªque°
;

117 
me
->
èrgë
 = 
	`HTSåómSèck
(me->
√ws
->
f‹m©
, 
ªq
->
ouçut_f‹m©
,

118 
ªq
->
ouçut_°ªam
,Ñeq, 
NO
);

119 
me
->
£mi_å™s
 = 
YES
;

120 i‡(!
me
->
èrgë
Ë 
HT_ERROR
;

121 } i‡(
√ws
->
ªpcode
/100 == 4) {

122 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_NOT_FOUND
,

123 
√ws
->
ª∂y
, 
	`°æí
(news->reply), "ScanResponse");

125  
HT_LOADED
;

126 
	}
}

132 
PRIVATE
 
	$HTNewsSètus_put_block
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
)

134 
°©us
;

135 
	`HTHo°_£tC⁄sumed
(
me
->
ho°
, 
l
);

136 !
me
->
£mi_å™s
 && 
l
-- > 0) {

137 i‡(
me
->
EOL°©e
 =
EOL_FCR
) {

138 i‡(*
b
 =
LF
) {

139 i‡(
me
->
junk
Ëme->junk = 
NO
;

140 
me
->
EOL°©e
 = 
EOL_BEGIN
;

141 i‡((
°©us
 = 
	`SˇnRe•⁄£
(
me
)Ë!
HT_LOADED
)  status;

143 } i‡(*
b
 =
CR
) {

144 
me
->
EOL°©e
 = 
EOL_FCR
;

145 } i‡(*
b
 =
LF
) {

146 i‡(
me
->
junk
Ëme->junk = 
NO
;

147 
me
->
EOL°©e
 = 
EOL_BEGIN
;

148 i‡((
°©us
 = 
	`SˇnRe•⁄£
(
me
)Ë!
HT_LOADED
)  status;

150 *(
me
->
buf„r
+me->
buÊí
++Ë*
b
;

151 i‡(
me
->
buÊí
 >
MAX_NEWS_LINE
) {

152 
	`HTTRACE
(
PROT_TRACE
, "News Status. LineÅooÜong - chopped\n");

153 
me
->
junk
 = 
YES
;

154 i‡((
°©us
 = 
	`SˇnRe•⁄£
(
me
)Ë!
HT_LOADED
)  status;

157 
b
++;

164 i‡(
l
 > 0) {

165 
ª°
 = 
l
;

166 c⁄° *
±r
 = 
b
;

167 
ª°
-- > 0) {

168 i‡(*
±r
 =
CR
) {

169 
me
->
EOL°©e
 = me->EOL°©e==
EOL_DOT
 ? 
EOL_SCR
 : 
EOL_FCR
;

170 } i‡(*
±r
 == '.') {

171 
me
->
EOL°©e
 = me->EOL°©e==
EOL_FLF
 ? 
EOL_DOT
 : 
EOL_BEGIN
;

172 } i‡(*
±r
 =
LF
) {

173 
me
->
EOL°©e
 = me->EOL°©e>
EOL_DOT
 ? 
EOL_SLF
 : 
EOL_FLF
;

175 
me
->
EOL°©e
 = 
EOL_BEGIN
;

176 
±r
++;

178 i‡(
me
->
EOL°©e
 =
EOL_SLF
) {

179 
°©us
 = 
	`PUTBLOCK
(
b
, 
l
-5);

180  
°©us
 !
HT_OK
 ? sètu†: 
HT_LOADED
;

182 
°©us
 = 
	`PUTBLOCK
(
b
, 
l
);

183  
°©us
;

186  
HT_LOADED
;

187 
	}
}

189 
PRIVATE
 
	$HTNewsSètus_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
ch
)

191  
	`HTNewsSètus_put_block
(
me
, &
ch
, 1);

192 
	}
}

194 
PRIVATE
 
	$HTNewsSètus_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
°r
)

196  
	`HTNewsSètus_put_block
(
me
, 
°r
, (Ë
	`°æí
(str));

197 
	}
}

199 
PRIVATE
 
	$HTNewsSètus_Êush
 (
HTSåóm
 * 
me
)

201  
me
->
èrgë
 ? (*me->èrgë->
iß
->
Êush
)(me->èrgëË: 
HT_OK
;

202 
	}
}

204 
PRIVATE
 
	$HTNewsSètus_‰ì
 (
HTSåóm
 * 
me
)

206 
°©us
 = 
HT_OK
;

207 i‡(
me
->
èrgë
) {

208 i‡((
°©us
 = (*
me
->
èrgë
->
iß
->
_‰ì
)(me->èrgë)Ë=
HT_WOULD_BLOCK
)

209  
HT_WOULD_BLOCK
;

211 
	`HT_FREE
(
me
);

212  
°©us
;

213 
	}
}

215 
PRIVATE
 
	$HTNewsSètus_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

217 i‡(
me
->
èrgë
)

218 
ABORT_TARGET
;

219 
	`HT_FREE
(
me
);

220 
	`HTTRACE
(
PROT_TRACE
, "NewsStatus.. ABORTING...\n");

221  
HT_ERROR
;

222 
	}
}

224 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTNewsSètusCœss
 =

227 
HTNewsSètus_Êush
,

228 
HTNewsSètus_‰ì
,

229 
HTNewsSètus_ab‹t
,

230 
HTNewsSètus_put_ch¨a˘î
,

231 
HTNewsSètus_put_°rög
,

232 
HTNewsSètus_put_block


235 
PRIVATE
 
HTSåóm
 * 
	$HTNewsSètus_√w
 (
HTReque°
 * 
ªque°
, 
√ws_öfo
 * 
√ws
,

236 
HTHo°
 * 
ho°
)

238 
HTSåóm
 *
me
;

239 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

240 
	`HT_OUTOFMEM
("HTNewsStatus_new");

241 
me
->
iß
 = &
HTNewsSètusCœss
;

242 
me
->
ªque°
 =Ñequest;

243 
me
->
√ws
 =Çews;

244 
me
->
EOL°©e
 = 
EOL_BEGIN
;

245 
me
->
ho°
 = host;

246  
me
;

247 
	}
}

257 
PUBLIC
 
BOOL
 
	$HTNews_£tMaxAπi˛es
 (
√w_max
)

259 i‡(
√w_max
 >= 0) {

260 
MaxAπ
 = 
√w_max
;

261  
YES
;

263  
NO
;

264 
	}
}

269 
PUBLIC
 
	$HTNews_maxAπi˛es
 ()

271  
MaxAπ
;

272 
	}
}

279 
PRIVATE
 
	$HTNewsCÀ™up
 (
HTReque°
 * 
ªq
, 
°©us
)

281 
HTNë
 * 
√t
 = 
	`HTReque°_√t
(
ªq
);

282 
√ws_öfo
 *
√ws
 = (√ws_öfÿ*Ë
	`HTNë_c⁄ãxt
(
√t
);

283 
HTSåóm
 * 
öput
 = 
	`HTReque°_öputSåóm
(
ªq
);

286 i‡(!
	`HTReque°_isDe°ö©i⁄
(
ªq
))

287 
	`HTReque°_ªmoveDe°ö©i⁄
(
ªq
);

288 i‡(
öput
) {

289 i‡(
°©us
 =
HT_INTERRUPTED
)

290 (*
öput
->
iß
->
ab‹t
)(öput, 
NULL
);

292 (*
öput
->
iß
->
_‰ì
)(input);

293 
	`HTReque°_£tI≈utSåóm
(
ªq
, 
NULL
);

297 
	`HTNë_dñëe
(
√t
, 
°©us
);

298 i‡(
√ws
) {

299 
	`HT_FREE
(
√ws
->
«me
);

300 
	`HTChunk_dñëe
(
√ws
->
cmd
);

301 
	`HT_FREE
(
√ws
);

303  
YES
;

304 
	}
}

306 
PRIVATE
 
	$SídComm™d
 (
HTReque°
 *
ªque°
, 
√ws_öfo
 *
√ws
,

307 *
tokí
, *
∑rs
)

309 
HTSåóm
 * 
öput
 = 
	`HTReque°_öputSåóm
(
ªque°
);

310 
Àn
 = 
	`°æí
(
tokí
Ë+ (
∑rs
 ? strlen(pars)+1:0) + 2;

311 
	`HTChunk_£tSize
(
√ws
->
cmd
, 
Àn
);

312 i‡(
∑rs
 && *pars)

313 
	`•rötf
(
	`HTChunk_d©a
(
√ws
->
cmd
), "%†%s%c%c", 
tokí
, 
∑rs
, 
CR
, 
LF
);

315 
	`•rötf
(
	`HTChunk_d©a
(
√ws
->
cmd
), "%s%c%c", 
tokí
, 
CR
, 
LF
);

316 
	`HTTRACE
(
PROT_TRACE
, "New†Tx..... %s" 
_
 
	`HTChunk_d©a
(
√ws
->
cmd
));

317  (*
öput
->
iß
->
put_block
)(öput, 
	`HTChunk_d©a
(
√ws
->
cmd
), 
Àn
);

318 
	}
}

334 
PRIVATE
 
NewsEvít
 (
SOCKET
 
soc
, * 
pVoid
, 
HTEvítTy≥
 
ty≥
);

336 
PUBLIC
 
	$HTLﬂdNews
 (
SOCKET
 
soc
, 
HTReque°
 * 
ªque°
)

338 
√ws_öfo
 *
√ws
;

339 
HTP¨ítAnch‹
 *
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

340 
HTNë
 * 
√t
 = 
	`HTReque°_√t
(
ªque°
);

341 * 
uæ
 = 
	`HTAnch‹_physiˇl
(
™ch‹
);

343 
	`HTTRACE
(
PROT_TRACE
, "NNTP........ Lookög f‹ `%s\'\n" 
_
 
uæ
);

344 i‡((
√ws
 = (
√ws_öfo
 *Ë
	`HT_CALLOC
(1, “ews_öfo))Ë=
NULL
)

345 
	`HT_OUTOFMEM
("HTLoadNews");

346 
√ws
->
cmd
 = 
	`HTChunk_√w
(128);

347 
√ws
->
°©e
 = 
NEWS_BEGIN
;

348 
√ws
->
√t
 =Çet;

349 
	`HTNë_£tC⁄ãxt
(
√t
, 
√ws
);

350 
	`HTNë_£tEvítCÆlback
(
√t
, 
NewsEvít
);

351 
	`HTNë_£tEvítP¨am
(
√t
, 
√ws
);

353  
	`NewsEvít
(
soc
, 
√ws
, 
HTEvít_BEGIN
);

354 
	}
}

356 
PRIVATE
 
	$NewsEvít
 (
SOCKET
 
soc
, * 
pVoid
, 
HTEvítTy≥
 
ty≥
)

358 
√ws_öfo
 *
√ws
 = (√ws_öfÿ*)
pVoid
;

359 
°©us
 = 
HT_ERROR
;

360 
HTNë
 * 
√t
 = 
√ws
->net;

361 
HTReque°
 * 
ªque°
 = 
	`HTNë_ªque°
(
√t
);

362 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

363 * 
uæ
 = 
	`HTAnch‹_physiˇl
(
™ch‹
);

364 
HTHo°
 * 
ho°
 = 
	`HTNë_ho°
(
√t
);

371 i‡(
ty≥
 =
HTEvít_CLOSE
) {

372 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_INTERRUPTED
,

373 
NULL
, 0, "HTLoadHTTP");

374 
	`HTNewsCÀ™up
(
ªque°
, 
HT_INTERRUPTED
);

375  
HT_OK
;

377 
√ws
 = (
√ws_öfo
 *Ë
	`HTNë_c⁄ãxt
(
√t
);

381 
√ws
->
°©e
) {

382 
NEWS_BEGIN
:

383 
√ws
->
°©e
 = (!
	`°rchr
(
uæ
, '@') && strchr(url, '*')) ?

384 
NEWS_SEEK_CACHE
 : 
NEWS_NEED_CONNECTION
;

387 
NEWS_SEEK_CACHE
:

388 i‡(
	`HTNewsCache_bef‹e
(
ªque°
, 
NULL
, 0Ë=
HT_LOADED
)

389 
√ws
->
°©e
 = 
NEWS_SUCCESS
;

391 
√ws
->
°©e
 = 
NEWS_NEED_CONNECTION
;

394 
NEWS_NEED_CONNECTION
:

395 i‡(!
	`°∫ˇ£comp
(
uæ
, "news:", 5)) {

396 
HTU£rProfûe
 * 
up
 = 
	`HTReque°_u£rProfûe
(
ªque°
);

397 * 
√wsho°
 = 
	`HTU£rProfûe_√ws
(
up
);

398 
	`SåAŒocC›y
(
√ws
->
«me
, 
uæ
+5);

399 i‡(
√wsho°
) {

400 *
√wshack
 = 
NULL
;

401 
	`SåAŒocC›y
(
√wshack
, "news://");

402 
	`SåAŒocC©
(
√wshack
, 
√wsho°
);

403 
°©us
 = 
	`HTHo°_c⁄√˘
(
ho°
, 
√t
, (*Ë
√wshack
);

404 
ho°
 = 
	`HTNë_ho°
(
√t
);

405 
	`HT_FREE
(
√wshack
);

407 
√ws
->
°©e
 = 
NEWS_ERROR
;

408 } i‡(!
	`°∫ˇ£comp
(
uæ
, "nntp:", 5)) {

409 
√ws
->
«me
 = 
	`HTP¨£
(
uæ
, "", 
PARSE_PATH
);

410 
°©us
 = 
	`HTHo°_c⁄√˘
(
ho°
, 
√t
, 
uæ
);

411 
ho°
 = 
	`HTNë_ho°
(
√t
);

413 
	`HTTRACE
(
PROT_TRACE
, "News........ Huh?");

414 
√ws
->
°©e
 = 
NEWS_ERROR
;

416 i‡(
°©us
 =
HT_OK
) {

417 
BOOL
 
gªëög
 = 
NO
;

420 i‡(!
	`HTNë_≥rsi°ít
(
√t
)) {

421 
	`HTNë_£tPîsi°ít
(
√t
, 
YES
, 
HT_TP_SINGLE
);

422 
gªëög
 = 
YES
;

430 
HTHo°
 * 
ho°
 = 
	`HTNë_ho°
(
√t
);

431 * 
s_˛ass
 = 
	`HTHo°_˛ass
(
ho°
);

432 i‡(
s_˛ass
 && 
	`°rˇ£comp
(s_class, "nntp")) {

433 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_CLASS
,

434 
NULL
, 0, "HTLoadNews");

435 
√ws
->
°©e
 = 
NEWS_ERROR
;

438 
	`HTHo°_£tCœss
(
ho°
, "nntp");

447 
HTSåóm
 * 
r°ªam
 = 
	`HTNewsSètus_√w
(
ªque°
, 
√ws
, 
ho°
);

448 
	`HTNë_£tRódSåóm
(
√t
, 
r°ªam
);

449 
	`HTReque°_£tOuçutC⁄√˘ed
(
ªque°
, 
YES
);

457 
HTOuçutSåóm
 * 
ouçut
 = 
	`HTNë_gëOuçut
(
√t
, 
NULL
, 0);

458 
	`HTReque°_£tI≈utSåóm
(
ªque°
, (
HTSåóm
 *Ë
ouçut
);

461 
√ws
->
°©e
 = 
gªëög
 ? 
NEWS_NEED_GREETING
 : 
NEWS_NEED_SWITCH
;

463 } i‡(
°©us
 =
HT_WOULD_BLOCK
 || sètu†=
HT_PENDING
)

464  
HT_OK
;

466 
√ws
->
°©e
 = 
NEWS_ERROR
;

469 
NEWS_NEED_GREETING
:

470 
°©us
 = 
	`HTHo°_ªad
(
	`HTNë_ho°
(
√t
),Çet);

471 i‡(
°©us
 =
HT_WOULD_BLOCK
)

472  
HT_OK
;

473 i‡(
°©us
 =
HT_LOADED
) {

474 i‡(
√ws
->
ªpcode
/100 == 2)

475 
√ws
->
°©e
 = 
NEWS_NEED_SWITCH
;

477 
√ws
->
°©e
 = 
NEWS_ERROR
;

479 
√ws
->
°©e
 = 
NEWS_ERROR
;

482 
NEWS_NEED_SWITCH
:

484 
HTMëhod
 
mëhod
 = 
	`HTReque°_mëhod
(
ªque°
);

491 i‡(
mëhod
 =
METHOD_GET
) {

492 i‡(
	`°rchr
(
uæ
, '@')) {

493 i‡(*(
√ws
->
«me
) != '<') {

494 *
√w¨t
;

495 i‡((
√w¨t
 = (*Ë
	`HT_MALLOC
(
	`°æí
(
√ws
->
«me
)+3)Ë=
NULL
)

496 
	`HT_OUTOFMEM
("HTLoadNews");

497 
	`•rötf
(
√w¨t
, "<%s>", 
√ws
->
«me
);

498 
	`HT_FREE
(
√ws
->
«me
);

499 
√ws
->
«me
 = 
√w¨t
;

501 
√ws
->
°©e
 = 
NEWS_NEED_ARTICLE
;

502 } i‡(
	`°rchr
(
uæ
, '*'))

503 
√ws
->
°©e
 = 
NEWS_NEED_LIST
;

505 
√ws
->
°©e
 = 
NEWS_NEED_GROUP
;

506 } i‡(
mëhod
 =
METHOD_POST
)

507 
√ws
->
°©e
 = 
NEWS_NEED_POST
;

509 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
,

510 
HTERR_NOT_IMPLEMENTED
,
NULL
, 0,"HTLoadNews");

511 
√ws
->
°©e
 = 
NEWS_ERROR
;

513 
	`HTUnEsˇ≥
(
√ws
->
«me
);

514 
	`HTCÀ™Tñ√tSåög
(
√ws
->
«me
);

518 
NEWS_NEED_ARTICLE
:

519 i‡(!
√ws
->
£¡
) {

520 
°©us
 = 
	`SídComm™d
(
ªque°
, 
√ws
, "ARTICLE",Çews->
«me
);

521 i‡(
°©us
 =
HT_WOULD_BLOCK
)

522  
HT_OK
;

523 i‡(
°©us
 =
HT_ERROR
)

524 
√ws
->
°©e
 = 
NEWS_ERROR
;

525 
√ws
->
f‹m©
 = 
WWW_MIME
;

532 
	`HTAnch‹_£tF‹m©
(
™ch‹
, 
WWW_PLAINTEXT
);

533 
√ws
->
£¡
 = 
YES
;

535 
°©us
 = 
	`HTHo°_ªad
(
	`HTNë_ho°
(
√t
),Çet);

536 i‡(
°©us
 =
HT_WOULD_BLOCK
)

537  
HT_OK
;

538 i‡(
°©us
 =
HT_OK
)

539 
√ws
->
°©e
 = 
NEWS_NEED_BODY
;

540 i‡(
°©us
 =
HT_LOADED
) {

541 
√ws
->
°©e
 = (√ws->
ªpcode
/100 == 2) ?

542 
NEWS_SUCCESS
 : 
NEWS_ERROR
;

544 
√ws
->
°©e
 = 
NEWS_ERROR
;

545 
√ws
->
£¡
 = 
NO
;

549 #i‡
HT_LISTGROUP


550 
NEWS_NEED_LGRP
:

551 i‡(!
√ws
->
£¡
) {

552 
°©us
 = 
	`SídComm™d
(
ªque°
, 
√ws
, "LIST", "NEWSGROUPS");

553 i‡(
°©us
 =
HT_WOULD_BLOCK
)

554  
HT_OK
;

555 i‡(
°©us
 =
HT_ERROR
)

556 
√ws
->
°©e
 = 
NEWS_ERROR
;

557 
√ws
->
f‹m©
 = 
WWW_NNTP_LIST
;

558 
√ws
->
£¡
 = 
YES
;

560 
°©us
 = 
	`HTHo°_ªad
(
	`HTNë_ho°
(
√t
),Çet);

561 i‡(
°©us
 =
HT_WOULD_BLOCK
)

562  
HT_OK
;

563 i‡(
°©us
 =
HT_OK
)

564 
√ws
->
°©e
 = 
NEWS_NEED_BODY
;

565 i‡(
°©us
 =
HT_LOADED
) {

566 
√ws
->
°©e
 = (√ws->
ªpcode
/100 == 2) ?

567 
NEWS_SUCCESS
 : 
NEWS_NEED_LIST
;

569 
√ws
->
°©e
 = 
NEWS_ERROR
;

570 
√ws
->
£¡
 = 
NO
;

575 
NEWS_NEED_LIST
:

576 i‡(!
√ws
->
£¡
) {

577 
°©us
 = 
	`SídComm™d
(
ªque°
, 
√ws
, "LIST", 
NULL
);

578 i‡(
°©us
 =
HT_WOULD_BLOCK
)

579  
HT_OK
;

580 i‡(
°©us
 =
HT_ERROR
)

581 
√ws
->
°©e
 = 
NEWS_ERROR
;

582 
√ws
->
f‹m©
 = 
WWW_NNTP_LIST
;

583 
√ws
->
£¡
 = 
YES
;

585 
°©us
 = 
	`HTHo°_ªad
(
	`HTNë_ho°
(
√t
),Çet);

586 i‡(
°©us
 =
HT_WOULD_BLOCK
)

587  
HT_OK
;

588 i‡(
°©us
 =
HT_OK
)

589 
√ws
->
°©e
 = 
NEWS_NEED_BODY
;

590 i‡(
°©us
 =
HT_LOADED
) {

591 
√ws
->
°©e
 = (√ws->
ªpcode
/100 == 2) ?

592 
NEWS_SUCCESS
 : 
NEWS_ERROR
;

594 
√ws
->
°©e
 = 
NEWS_ERROR
;

595 
√ws
->
£¡
 = 
NO
;

599 
NEWS_NEED_GROUP
:

600 i‡(!
√ws
->
£¡
) {

601 
°©us
 = 
	`SídComm™d
(
ªque°
, 
√ws
, "GROUP",Çews->
«me
);

602 i‡(
°©us
 =
HT_WOULD_BLOCK
)

603  
HT_OK
;

604 i‡(
°©us
 =
HT_ERROR
)

605 
√ws
->
°©e
 = 
NEWS_ERROR
;

606 
√ws
->
£¡
 = 
YES
;

608 
°©us
 = 
	`HTHo°_ªad
(
	`HTNë_ho°
(
√t
),Çet);

609 i‡(
°©us
 =
HT_WOULD_BLOCK
)

610  
HT_OK
;

611 i‡(
°©us
 =
HT_LOADED
) {

612 i‡(
√ws
->
ªpcode
/100 == 2) {

613 i‡(
	`ssˇnf
(
√ws
->
ª∂y
, "%d%d%d", &√ws->
tŸÆ
,

614 &
√ws
->
fú°
, &√ws->
œ°
) == 3) {

615 i‡(
MaxAπ
 && 
√ws
->
tŸÆ
>MaxArt)

616 
√ws
->
œ°
 =Çews->
fú°
-
MaxAπ
;

617 
√ws
->
cuºít
 =Çews->
fú°
;

620 i‡(
√ws
->
fú°
 =√ws->
œ°
) {

621 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
,

622 
HTERR_NO_CONTENT
,

623 
NULL
, 0, "HTLoadNews");

624 
√ws
->
°©e
 = 
NEWS_NO_DATA
;

627 
√ws
->
°©e
 = 
NEWS_NEED_XOVER
;

629 
√ws
->
°©e
 = 
NEWS_ERROR
;

631 
√ws
->
°©e
 = 
NEWS_ERROR
;

633 
√ws
->
°©e
 = 
NEWS_ERROR
;

634 
√ws
->
£¡
 = 
NO
;

638 
NEWS_NEED_XOVER
:

639 i‡(!
√ws
->
£¡
) {

640 
buf
[20];

641 
	`•rötf
(
buf
, "%d-%d", 
√ws
->
fú°
,Çews->
œ°
);

642 
°©us
 = 
	`SídComm™d
(
ªque°
, 
√ws
, "XOVER", 
buf
);

643 i‡(
°©us
 =
HT_WOULD_BLOCK
)

644  
HT_OK
;

645 i‡(
°©us
 =
HT_ERROR
)

646 
√ws
->
°©e
 = 
NEWS_ERROR
;

647 
√ws
->
f‹m©
 = 
WWW_NNTP_OVER
;

648 
√ws
->
£¡
 = 
YES
;

650 
°©us
 = 
	`HTHo°_ªad
(
	`HTNë_ho°
(
√t
),Çet);

651 i‡(
°©us
 =
HT_WOULD_BLOCK
)

652  
HT_OK
;

653 i‡(
°©us
 =
HT_OK
)

654 
√ws
->
°©e
 = 
NEWS_NEED_BODY
;

655 i‡(
°©us
 =
HT_LOADED
) {

656 i‡(
√ws
->
ªpcode
/100 == 2)

657 
√ws
->
°©e
 = 
NEWS_SUCCESS
;

659 
√ws
->
f‹m©
 = 
WWW_NNTP_HEAD
;

660 
√ws
->
°©e
 = 
NEWS_NEED_HEAD
;

663 
√ws
->
°©e
 = 
NEWS_ERROR
;

664 
√ws
->
£¡
 = 
NO
;

668 
NEWS_NEED_HEAD
:

669 i‡(!
√ws
->
£¡
) {

670 
buf
[10];

671 
	`•rötf
(
buf
, "%d", 
√ws
->
cuºít
++);

672 
°©us
 = 
	`SídComm™d
(
ªque°
, 
√ws
, "HEAD", 
buf
);

673 i‡(
°©us
 =
HT_WOULD_BLOCK
)

674  
HT_OK
;

675 i‡(
°©us
 =
HT_ERROR
)

676 
√ws
->
°©e
 = 
NEWS_ERROR
;

677 
√ws
->
£¡
 = 
YES
;

679 
°©us
 = 
	`HTHo°_ªad
(
	`HTNë_ho°
(
√t
),Çet);

680 i‡(
°©us
 =
HT_WOULD_BLOCK
)

681  
HT_OK
;

682 i‡(
°©us
 =
HT_LOADED
) {

683 i‡(
√ws
->
ªpcode
/100 == 2) {

684 i‡(
√ws
->
cuºít
 >Çews->
œ°
)

685 
√ws
->
°©e
 = 
NEWS_SUCCESS
;

687 
√ws
->
°©e
 = 
NEWS_ERROR
;

689 
√ws
->
°©e
 = 
NEWS_ERROR
;

690 
√ws
->
£¡
 = 
NO
;

694 
NEWS_NEED_POST
:

696 
HTSåóm
 * 
ﬁdöput
 = 
	`HTReque°_öputSåóm
(
ªque°
);

697 
HTSåóm
 * 
√wöput
 =

698 
	`HTNewsPo°_√w
(
ªque°
, 
	`HTBuf„r_√w
(
ﬁdöput
,Ñequest,512));

699 
	`HTReque°_£tI≈utSåóm
(
ªque°
, 
√wöput
);

704 
√ws
->
°©e
 = 
NEWS_NEED_BODY
;

707 
NEWS_NEED_BODY
:

708 i‡(
ty≥
 =
HTEvít_WRITE
 ||Åy≥ =
HTEvít_BEGIN
) {

709 i‡(
	`HTReque°_isDe°ö©i⁄
(
ªque°
)) {

710 
HTReque°
 * 
sour˚
 = 
	`HTReque°_sour˚
(
ªque°
);

711 
HTNë
 * 
§˙ë
 = 
	`HTReque°_√t
(
sour˚
);

712 i‡(
§˙ë
) {

713 
	`HTHo°_ªgi°î
(
	`HTNë_ho°
(
§˙ë
), sr˙ë, 
HTEvít_READ
);

714 
	`HTHo°_uƒegi°î
(
	`HTNë_ho°
(
§˙ë
), sr˙ë, 
HTEvít_WRITE
);

716  
HT_OK
;

724 
HTSåóm
 * 
öput
 = 
	`HTReque°_öputSåóm
(
ªque°
);

725 
HTPo°CÆlback
 * 
pcbf
 = 
	`HTReque°_po°CÆlback
(
ªque°
);

726 i‡(
pcbf
) {

727 
°©us
 = 
	`pcbf
(
ªque°
, 
öput
);

728 i‡(
°©us
 =
HT_PAUSE
 || sètu†=
HT_LOADED
)

729 
ty≥
 = 
HTEvít_READ
;

731 
°©us
 = (*
öput
->
iß
->
Êush
)(input);

732 
ty≥
 = 
HTEvít_READ
;

734 i‡(
°©us
 =
HT_WOULD_BLOCK
Ë 
HT_OK
;

736 
°©us
 = 
ªque°
->
Po°CÆlback
 ?

737 
ªque°
->
	`Po°CÆlback
‘eque°,Ñeque°->
öput_°ªam
) :

738 (*
ªque°
->
öput_°ªam
->
iß
->
Êush
)(request->input_stream);

739 i‡(
°©us
 =
HT_WOULD_BLOCK
)

740  
HT_OK
;

742 
ty≥
 = 
HTEvít_READ
;

743 } i‡(
ty≥
 =
HTEvít_READ
) {

744 
°©us
 = 
	`HTHo°_ªad
(
	`HTNë_ho°
(
√t
),Çet);

745 i‡(
°©us
 =
HT_WOULD_BLOCK
)

746  
HT_OK
;

747 i‡(
°©us
 =
HT_LOADED
)

748 
√ws
->
°©e
 = 
NEWS_SUCCESS
;

750 
√ws
->
°©e
 = 
NEWS_ERROR
;

752 
√ws
->
°©e
 = 
NEWS_ERROR
;

756 
NEWS_SUCCESS
:

757 
	`HTNewsCÀ™up
(
ªque°
, 
HT_LOADED
);

758  
HT_OK
;

761 
NEWS_NO_DATA
:

762 
	`HTNewsCÀ™up
(
ªque°
, 
HT_NO_DATA
);

763  
HT_OK
;

766 
NEWS_ERROR
:

767 
	`HTNewsCÀ™up
(
ªque°
, 
HT_NOT_FOUND
);

768  
HT_OK
;

772 
	}
}

	@Library/src/HTNews.h

27 #i‚de‡
HTNEWS_H


28 
	#HTNEWS_H


	)

29 
	~"HTPrŸ.h
"

38 #i‚de‡
NEWS_PORT


39 
	#NEWS_PORT
 119

	)

42 
	#MAX_NEWS_LINE
 4096

	)

44 
HTPrŸCÆlback
 
HTLﬂdNews
;

55 
BOOL
 
HTNews_£tMaxAπi˛es
 (
√w_max
);

56 
HTNews_maxAπi˛es
 ();

	@Library/src/HTNewsLs.c

19 
	~"wwwsys.h
"

20 
	~"WWWUtû.h
"

21 
	~"WWWC‹e.h
"

22 
	~"HTUTªe.h
"

23 
	~"HTNDú.h
"

24 
	~"HTNews.h
"

25 
	~"HTNewsLs.h
"

27 
	#DELIMITER
 '\t'

	)

28 
	#ATSIGN
 '@'

	)

30 
	#NEWS_TREE
 "w3c-√ws"

	)

32 
	s_HTSåóm
 {

33 c⁄° 
HTSåómCœss
 * 
	miß
;

34 
HTReque°
 * 
	mªque°
;

35 
HTEOLSèã
 
	m°©e
;

36 
HTNewsDú
 * 
	mdú
;

37 
BOOL
 
	mgroup
;

38 
BOOL
 
	mjunk
;

39 
	mbuf„r
[
MAX_NEWS_LINE
+1];

40 
	mbuÊí
;

43 
	s_HTNewsCache
 {

44 * 
	mho°
;

45 
HTAºay
 * 
	mˇche
;

46 } 
	tHTNewsCache
;

48 
PRIVATE
 
HTNewsDúKey
 
	gdú_key
 = 
HT_NDK_REFTHREAD
;

49 
PRIVATE
 
HTNewsDúKey
 
	gli°_key
 = 
HT_NDK_GROUP
;

54 
PRIVATE
 * 
	$GëNewsGroupTôÀ
 (
HTReque°
* 
ªque°
)

56 * 
uæ
 = 
	`HTAnch‹_physiˇl
(
	`HTReque°_™ch‹
(
ªque°
));

57 * 
tôÀ
 = 
NULL
;

58 i‡(
	`°ºchr
(
uæ
, '*'))

59 
	`SåAŒocC›y
(
tôÀ
, "Newsgroups: ");

61 
	`SåAŒocC›y
(
tôÀ
, "Newsgroup: ");

62 i‡(!
	`°∫ˇ£comp
(
uæ
, "news:", 5))

63 
	`SåAŒocC©
(
tôÀ
, 
uæ
+5);

65 
	`SåAŒocC©
(
tôÀ
, 
	`HTP¨£
(
uæ
, "", 
PARSE_PATH
));

66  
tôÀ
;

67 
	}
}

69 
PRIVATE
 
BOOL
 
	$P¨£Li°
 (
HTNewsDú
 * 
dú
, * 
löe
)

71 *
±r
 = 
löe
;

72 *
±r
 && !
	`is•a˚
(() *ptr))Ötr++;

73 *
±r
 = '\0';

75  (
	`HTNewsDú_addGroupEÀmít
(
dú
, 
löe
, 
NO
Ë!
NULL
);

76 
	}
}

87 
PRIVATE
 
BOOL
 
	$P¨£Group
 (
HTReque°
 * 
ªque°
, 
HTNewsDú
 *
dú
, * 
löe
)

89 
ödex
;

90 
ªf˙t
=0;

91 
time_t
 
t
=0;

92 *
subje˘
 = 
löe
;

93 *
‰om
;

94 *
d©e
;

95 *
msgid
;

96 *
±r
=
NULL
;

97 
HTLi°
* 
ªÊi°
 = 
NULL
;

98 *
subje˘
 && *subje˘ !
DELIMITER
) subject++;

99 *
subje˘
++ = '\0';

100 
ödex
 = 
	`©oi
(
löe
);

101 
‰om
 = 
subje˘
;

102 *
‰om
 && *‰om !
DELIMITER
) from++;

103 *
‰om
++ = '\0';

104 
d©e
 = 
‰om
;

105 *
d©e
 && *d©ê!
DELIMITER
) {

106 i‡(*
d©e
=='<' || *date=='(') {

107 
±r
 = 
d©e
+1;

108 *
d©e
 = '\0';

110 i‡(*
d©e
=='>' || *date==')') *date = '\0';

111 
d©e
++;

113 *
d©e
++ = '\0';

114 i‡(
	`°rchr
(
‰om
, 
ATSIGN
Ë&& 
±r
) from =Ötr;

115 
msgid
 = 
d©e
;

116 *
msgid
 && *msgid !
DELIMITER
) msgid++;

117 *
msgid
++ = '\0';

118 i‡(*
msgid
=='<') msgid++;

119 
t
 = 
	`HTP¨£Time
(
d©e
, 
	`HTReque°_u£rProfûe
(
ªque°
), 
YES
);

120 
±r
 = 
msgid
;

121 *
±r
 && *±∏!
DELIMITER
) {

122 i‡(*
±r
=='>') *ptr = '\0';

123 
±r
++;

125 *
±r
++ = '\0';

126 
±r
 && *±∏&& !
	`isdigô
(() *ptr)) {

127 * 
ªf°¨t
 = 
±r
;

128 * 
ªfc›y
 = 
NULL
;

129 * 
ªf°›
;

130 *
±r
 && *±∏!
DELIMITER
 && *ptr != ' ')Ötr++;

131 
ªf°›
 = 
±r
 - 1;

132 *
±r
++ = '\0';

133 i‡(
	`°æí
(
ªf°¨t
) > 0)

135 
ªf˙t
++;

136 i‡(*
ªf°¨t
 == '<')Ñefstart++;

137 i‡(*
ªf°›
 == '>') *refstop = '\0';

138 i‡(
ªÊi°
 =
NULL
ËªÊi° = 
	`HTLi°_√w
();

139 
	`SåAŒocC›y
 (
ªfc›y
, 
ªf°¨t
);

140 
	`HTLi°_addObje˘
 (
ªÊi°
, (*Ë
ªfc›y
);

144  (
	`HTNewsDú_addEÀmít
(
dú
, 
ödex
, 
subje˘
, 
‰om
, 
t
, 
msgid
,

145 
ªf˙t
, 
ªÊi°
Ë!
NULL
);

146 
	}
}

152 
PRIVATE
 
HTNewsCache
 * 
	$HTNewsCache_√w
 (c⁄° * 
√wsho°
, 
HTAºay
 * 
¨øy
)

154 i‡(
√wsho°
 && 
¨øy
) {

155 
HTNewsCache
 * 
me
;

156 i‡((
me
 = (
HTNewsCache
 *Ë
	`HT_CALLOC
(1, (HTNewsCache))Ë=
NULL
)

157 
	`HT_OUTOFMEM
("HTNewsCache_new");

158 
	`SåAŒocC›y
(
me
->
ho°
, 
√wsho°
);

159 
me
->
ˇche
 = 
¨øy
;

160  
me
;

162  
NULL
;

163 
	}
}

168 
PRIVATE
 
	$HTNewsCache_dñëe
 (* 
c⁄ãxt
)

170 
HTNewsCache
 * 
me
 = (HTNewsCachê*Ë
c⁄ãxt
;

171 i‡(
me
) {

172 i‡(
me
->
ˇche
) {

173 ** 
d©a
;

174 * 
löe
 = (*Ë
	`HTAºay_fú°Obje˘
(
me
->
ˇche
, 
d©a
);

175 
löe
) {

176 
	`HT_FREE
(
löe
);

177 
löe
 = (*Ë
	`HTAºay_√xtObje˘
(
me
->
ˇche
, 
d©a
);

179 
	`HTAºay_dñëe
(
me
->
ˇche
);

181 
	`HT_FREE
(
me
->
ho°
);

182 
	`HTTRACE
(
PROT_TRACE
, "New†Cache.. Dñëed cachê%p\n" 
_
 
me
);

183 
	`HT_FREE
(
me
);

184  
YES
;

186  
NO
;

187 
	}
}

194 
PRIVATE
 
HTNewsCache
 * 
	$HTNewsCache_föd
 (
HTReque°
 * 
ªque°
, c⁄° * 
uæ
)

196 
HTUTªe
 * 
åì
 = 
NULL
;

197 i‡(
ªque°
 && 
uæ
) {

198 * 
√wsho°
 = 
NULL
;

199 
HTNewsCache
 * 
ñemít
 = 
NULL
;

200 i‡(!
	`°∫ˇ£comp
(
uæ
, "news:", 5)) {

201 
HTU£rProfûe
 * 
up
 = 
	`HTReque°_u£rProfûe
(
ªque°
);

202 
	`SåAŒocC›y
(
√wsho°
, 
	`HTU£rProfûe_√ws
(
up
));

203 } i‡(!
	`°∫ˇ£comp
(
uæ
, "nntp:", 5)) {

204 
√wsho°
 = 
	`HTP¨£
(
uæ
, "", 
PARSE_HOST
);

208 i‡(
√wsho°
) {

209 * 
cﬁ⁄
 = 
	`°rchr
(
√wsho°
, ':');

210 
p‹t
 = 
NEWS_PORT
;

211 i‡(
cﬁ⁄
 ) {

212 *(
cﬁ⁄
++) = '\0';

213 
p‹t
 = 
	`©oi
(
cﬁ⁄
);

215 
åì
 = 
	`HTUTªe_föd
(
NEWS_TREE
, 
√wsho°
, 
p‹t
);

216 
	`HT_FREE
(
√wsho°
);

217 i‡(!
åì
) {

218 
	`HTTRACE
(
PROT_TRACE
, "New†Cache.. Nÿöf‹m©i⁄ f‹ `%s\'\n" 
_
 
uæ
);

219  
NULL
;

223 
ñemít
 = (
HTNewsCache
 *Ë
	`HTUTªe_födNode
(
åì
, "", "/");

224  
ñemít
;

227  
NULL
;

228 
	}
}

230 
PRIVATE
 
BOOL
 
	$HTNewsCache_upd©e
 (
HTReque°
 * 
ªque°
,

231 c⁄° * 
uæ
, 
HTAºay
 * 
¨øy
)

233 
HTUTªe
 * 
åì
 = 
NULL
;

234 i‡(
ªque°
 && 
uæ
) {

235 * 
√wsho°
 = 
NULL
;

236 i‡(!
	`°∫ˇ£comp
(
uæ
, "news:", 5)) {

237 
HTU£rProfûe
 * 
up
 = 
	`HTReque°_u£rProfûe
(
ªque°
);

238 
	`SåAŒocC›y
(
√wsho°
, 
	`HTU£rProfûe_√ws
(
up
));

239 } i‡(!
	`°∫ˇ£comp
(
uæ
, "nntp:", 5)) {

240 
√wsho°
 = 
	`HTP¨£
(
uæ
, "", 
PARSE_HOST
);

247 i‡(
√wsho°
) {

248 * 
cﬁ⁄
 = 
	`°rchr
(
√wsho°
, ':');

249 
p‹t
 = 
NEWS_PORT
;

250 i‡(
cﬁ⁄
 ) {

251 *(
cﬁ⁄
++) = '\0';

252 
p‹t
 = 
	`©oi
(
cﬁ⁄
);

254 
åì
 = 
	`HTUTªe_√w
(
NEWS_TREE
, 
√wsho°
, 
p‹t
, 
HTNewsCache_dñëe
);

255 
	`HT_FREE
(
√wsho°
);

256 i‡(!
åì
) {

257 
	`HTTRACE
(
PROT_TRACE
, "News Cache.. Can't createÅree\n");

258  
NO
;

263 
HTNewsCache
 * 
ñemít
 = 
NULL
;

264 
BOOL
 
°©us
;

265 i‡((
ñemít
=(
HTNewsCache
 *Ë
	`HTUTªe_födNode
(
åì
, "", "/"))){

266 
ñemít
->
ˇche
 = 
¨øy
;

267 
°©us
 = 
YES
;

269 
ñemít
 = 
	`HTNewsCache_√w
(
uæ
, 
¨øy
);

270 
°©us
 = 
	`HTUTªe_addNode
(
åì
, "", "/", 
ñemít
);

272  
°©us
;

276  
NO
;

277 
	}
}

282 
PUBLIC
 
	$HTNewsCache_bef‹e
 (
HTReque°
 * 
ªque°
, * 
c⁄ãxt
, 
mode
)

284 * 
uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
	`HTReque°_™ch‹
(
ªque°
));

285 
HTNewsCache
 * 
ñemít
 = 
	`HTNewsCache_föd
(
ªque°
, 
uæ
);

286 
	`HT_FREE
(
uæ
);

291 i‡(
ñemít
) {

292 * 
tôÀ
 = 
	`GëNewsGroupTôÀ
(
ªque°
);

293 
HTNewsDú
 * 
dú
 = 
	`HTNewsDú_√w
(
ªque°
, 
tôÀ
, 
li°_key
, 
NO
);

294 ** 
d©a
;

295 * 
löe
 = (*Ë
	`HTAºay_fú°Obje˘
(
ñemít
->
ˇche
, 
d©a
);

296 
löe
) {

297 
	`HTNewsDú_addGroupEÀmít
(
dú
, 
löe
, 
NO
);

298 
löe
 = (*Ë
	`HTAºay_√xtObje˘
(
ñemít
->
ˇche
, 
d©a
);

304 
	`HTNewsDú_‰ì
(
dú
);

305 
	`HT_FREE
(
tôÀ
);

306  
HT_LOADED
;

308  
HT_OK
;

309 
	}
}

314 
PUBLIC
 
	$HTNewsCache_a·î
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

315 * 
c⁄ãxt
, 
°©us
)

317 
HTAºay
 * 
¨øy
 = (HTAºay *Ë
c⁄ãxt
;

318 
	`HTTRACE
(
PROT_TRACE
, "News Cache.. AFTER filter\n");

319 i‡(
ªque°
 && 
¨øy
) {

320 * 
uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
	`HTReque°_™ch‹
(
ªque°
));

321 
	`HTNewsCache_upd©e
(
ªque°
, 
uæ
, 
¨øy
);

322 
	`HT_FREE
(
uæ
);

324  
HT_OK
;

325 
	}
}

332 
PRIVATE
 
	$HTNewsLi°_put_block
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
)

334 
l
-- > 0) {

335 i‡(
me
->
°©e
 =
EOL_FCR
) {

336 i‡(*
b
 =
LF
 && 
me
->
buÊí
) {

337 i‡(!
me
->
junk
) {

338 *(
me
->
buf„r
+me->
buÊí
) = '\0';

339 
me
->
group
 ? 
	`P¨£Group
(me->
ªque°
, me->
dú
, me->
buf„r
) :

340 
	`P¨£Li°
(
me
->
dú
, me->
buf„r
);

342 
me
->
junk
 = 
NO
;

344 
me
->
buÊí
 = 0;

345 
me
->
°©e
 = 
EOL_BEGIN
;

346 } i‡(*
b
 =
CR
) {

347 
me
->
°©e
 = 
EOL_FCR
;

348 } i‡(*
b
 =
LF
 && 
me
->
buÊí
) {

349 i‡(!
me
->
junk
) {

350 *(
me
->
buf„r
+me->
buÊí
) = '\0';

351 
me
->
group
 ? 
	`P¨£Group
(me->
ªque°
, me->
dú
, me->
buf„r
) :

352 
	`P¨£Li°
(
me
->
dú
, me->
buf„r
);

354 
me
->
junk
 = 
NO
;

355 
me
->
buÊí
 = 0;

356 
me
->
°©e
 = 
EOL_BEGIN
;

358 *(
me
->
buf„r
+me->
buÊí
++Ë*
b
;

359 i‡(
me
->
buÊí
 >
MAX_NEWS_LINE
) {

360 
	`HTTRACE
(
PROT_TRACE
, "News Dir.... LineÅooÜong - chopped\n");

361 *(
me
->
buf„r
+me->
buÊí
) = '\0';

362 
me
->
group
 ? 
	`P¨£Group
(me->
ªque°
, me->
dú
, me->
buf„r
) :

363 
	`P¨£Li°
(
me
->
dú
, me->
buf„r
);

364 
me
->
buÊí
 = 0;

365 
me
->
junk
 = 
YES
;

368 
b
++;

370  
HT_OK
;

371 
	}
}

373 
PRIVATE
 
	$HTNewsLi°_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
ch
)

375  
	`HTNewsLi°_put_block
(
me
, &
ch
, 1);

376 
	}
}

378 
PRIVATE
 
	$HTNewsLi°_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

380  
	`HTNewsLi°_put_block
(
me
, 
s
, (Ë
	`°æí
(s));

381 
	}
}

383 
PRIVATE
 
	$HTNewsLi°_Êush
 (
HTSåóm
 * 
me
)

385  
HT_OK
;

386 
	}
}

388 
PRIVATE
 
	$HTNewsLi°_‰ì
 (
HTSåóm
 * 
me
)

390 
	`HTNewsLi°_put_ch¨a˘î
 (
me
, '\n');

391 
	`HTNewsDú_‰ì
(
me
->
dú
);

392 
	`HT_FREE
(
me
);

393  
HT_OK
;

394 
	}
}

396 
PRIVATE
 
	$HTNewsLi°_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

398 
	`HTTRACE
(
PROT_TRACE
, "News Dir.... ABORTING...\n");

399 
	`HTNewsLi°_‰ì
(
me
);

400  
HT_ERROR
;

401 
	}
}

403 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTNewsLi°Cœss
 =

406 
HTNewsLi°_Êush
,

407 
HTNewsLi°_‰ì
,

408 
HTNewsLi°_ab‹t
,

409 
HTNewsLi°_put_ch¨a˘î
,

410 
HTNewsLi°_put_°rög
,

411 
HTNewsLi°_put_block


414 
PUBLIC
 
HTSåóm
 *
	$HTNewsLi°
 (
HTReque°
 * 
ªque°
,

415 * 
∑øm
,

416 
HTF‹m©
 
öput_f‹m©
,

417 
HTF‹m©
 
ouçut_f‹m©
,

418 
HTSåóm
 * 
ouçut_°ªam
)

420 
HTSåóm
 *
me
;

421 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

422 
	`HT_OUTOFMEM
("HTNewsList_new");

423 
me
->
iß
 = &
HTNewsLi°Cœss
;

424 
me
->
ªque°
 =Ñequest;

425 
me
->
°©e
 = 
EOL_BEGIN
;

427 * 
tôÀ
 = 
	`GëNewsGroupTôÀ
(
ªque°
);

428 
me
->
dú
 = 
	`HTNewsDú_√w
(
ªque°
, 
tôÀ
, 
li°_key
,
YES
);

429 
	`HT_FREE
(
tôÀ
);

432 i‡(
me
->
dú
 =
NULL
Ë
	`HT_FREE
(me);

433  
me
;

434 
	}
}

436 
PUBLIC
 
HTSåóm
 *
	$HTNewsGroup
 (
HTReque°
 * 
ªque°
,

437 * 
∑øm
,

438 
HTF‹m©
 
öput_f‹m©
,

439 
HTF‹m©
 
ouçut_f‹m©
,

440 
HTSåóm
 * 
ouçut_°ªam
)

442 
HTSåóm
 * 
me
;

443 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

444 
	`HT_OUTOFMEM
("HTNewsList_new");

445 
me
->
iß
 = &
HTNewsLi°Cœss
;

446 
me
->
ªque°
 =Ñequest;

447 
me
->
°©e
 = 
EOL_BEGIN
;

448 
me
->
group
 = 
YES
;

450 * 
tôÀ
 = 
	`GëNewsGroupTôÀ
(
ªque°
);

451 
me
->
dú
 = 
	`HTNewsDú_√w
(
ªque°
, 
tôÀ
, 
dú_key
, 
YES
);

452 
	`HT_FREE
(
tôÀ
);

455 i‡(
me
->
dú
 =
NULL
Ë
	`HT_FREE
(me);

456  
me
;

457 
	}
}

	@Library/src/HTNewsLs.h

27 #i‚de‡
HTNEWSLS_H


28 
	#HTNEWSLS_H


	)

29 
	~"HTSåóm.h
"

30 
	~"HTF‹m©.h
"

31 
	~"HTNë.h
"

33 
HTC⁄vîãr
 
HTNewsLi°
, 
HTNewsGroup
;

44 
HTNëBef‹e
 
	gHTNewsCache_bef‹e
;

45 
HTNëA·î
 
	gHTNewsCache_a·î
;

	@Library/src/HTNewsRq.c

16 
	~"wwwsys.h
"

17 
	~"WWWUtû.h
"

18 
	~"WWWC‹e.h
"

20 
	~"HTReqM™.h
"

21 
	~"HTMIMERq.h
"

22 
	~"HTNewsRq.h
"

24 
	#PUTBLOCK
(
b
, 
l
Ë(*
me
->
èrgë
->
iß
->
put_block
)(me->èrgë, b,Ü)

	)

26 
	s_HTSåóm
 {

27 c⁄° 
HTSåómCœss
 * 
	miß
;

28 
HTSåóm
 * 
	mèrgë
;

29 
HTReque°
 * 
	mªque°
;

30 
SOCKET
 
	msockfd
;

31 
HTChunk
 * 
	mbuf„r
;

32 
	mvîsi⁄
;

33 
BOOL
 
	må™•¨ít
;

47 
PRIVATE
 
BOOL
 
	$NewsPo°_°¨t
 (
HTSåóm
 * 
me
, 
HTReque°
 * 
ªque°
)

49 
löebuf
[128];

50 
HTChunk
 *
hódî
 = 
me
->
buf„r
;

51 
HTU£rProfûe
 * 
up
 = 
	`HTReque°_u£rProfûe
(
ªque°
);

52 c⁄° * 
maûaddªss
 = 
	`HTU£rProfûe_emaû
(
up
);

53 i‡(
maûaddªss
) {

54 
	`•rötf
(
löebuf
, "From: %s%c%c", 
maûaddªss
, 
CR
, 
LF
);

55 
	`HTChunk_puts
(
hódî
, 
löebuf
);

63 
	`HTChunk_puts
(
hódî
, "Newsgroups :");

64 i‡(
	`HTReque°_isDe°ö©i⁄
(
ªque°
)) {

65 
HTReque°
 *
§c_ªq
 = 
	`HTReque°_sour˚
(
ªque°
);

66 
HTP¨ítAnch‹
 *
§c_™ch‹
 = 
	`HTReque°_™ch‹
(
§c_ªq
);

67 
HTLök
 *
lök
 = 
	`HTAnch‹_maöLök
((
HTAnch‹
 *Ë
§c_™ch‹
);

68 
HTAnch‹
 *
de°
 = 
	`HTLök_de°ö©i⁄
(
lök
);

69 
HTMëhod
 
mëhod
 = 
	`HTLök_mëhod
(
lök
);

70 i‡(
lök
 && 
mëhod
 =
METHOD_POST
 &&

71 
	`HTLök_ªsu…
(
lök
Ë=
HT_LINK_NONE
) {

72 *
de°uæ
 = 
	`HTAnch‹_physiˇl
((
HTP¨ítAnch‹
 *Ë
de°
);

73 *
ac˚ss
 = 
	`HTP¨£
(
de°uæ
, "", 
PARSE_ACCESS
);

74 i‡(!
	`°rˇ£comp
(
ac˚ss
, "news") || !strcasecomp(access, "nntp")) {

75 *
√wsgroup
 = 
	`HTP¨£
(
de°uæ
, "", 
PARSE_PATH
);

76 
	`HTUnEsˇ≥
(
√wsgroup
);

77 
	`HTCÀ™Tñ√tSåög
(
√wsgroup
);

78 
	`HTChunk_puts
(
hódî
, 
√wsgroup
);

79 
	`HT_FREE
(
√wsgroup
);

81 
	`HT_FREE
(
ac˚ss
);

87 
	`HTTRACE
(
PROT_TRACE
, "New†Tx..... %s" 
_
 
	`HTChunk_d©a
(
hódî
));

88  
YES
;

89 
	}
}

96 
PRIVATE
 
	$NewsPo°_íd
 (
HTSåóm
 * 
me
)

98 
buf
[6];

99 *
buf
 = 
CR
;

100 *(
buf
+1Ë
LF
;

101 *(
buf
+2) = '.';

102 *(
buf
+3Ë
CR
;

103 *(
buf
+4Ë
LF
;

104 *(
buf
+5) = '\0';

105  
	`PUTBLOCK
(
buf
, 5);

106 
	}
}

108 
PRIVATE
 
	$NewsPo°_put_block
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
)

110 i‡(!
me
->
èrgë
) {

111  
HT_WOULD_BLOCK
;

112 } i‡(
me
->
å™•¨ít
)

113  
b
 ? 
	`PUTBLOCK
(b, 
l
Ë: 
HT_OK
;

115 
°©us
;

116 
	`NewsPo°_°¨t
(
me
, me->
ªque°
);

117 i‡((
°©us
 = 
	`PUTBLOCK
(
	`HTChunk_d©a
(
me
->
buf„r
),

118 
	`HTChunk_size
(
me
->
buf„r
))Ë=
HT_OK
) {

119 
me
->
å™•¨ít
 = 
YES
;

120  
b
 ? 
	`PUTBLOCK
(b, 
l
Ë: 
HT_OK
;

122  
°©us
;

124 
	}
}

126 
PRIVATE
 
	$NewsPo°_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

128  
	`NewsPo°_put_block
(
me
, &
c
, 1);

129 
	}
}

131 
PRIVATE
 
	$NewsPo°_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

133  
	`NewsPo°_put_block
(
me
, 
s
, 
	`°æí
(s));

134 
	}
}

139 
PRIVATE
 
	$NewsPo°_Êush
 (
HTSåóm
 * 
me
)

141  
	`NewsPo°_put_block
(
me
, 
NULL
, 0);

142 
	}
}

147 
PRIVATE
 
	$NewsPo°_‰ì
 (
HTSåóm
 * 
me
)

149 
°©us
;

150 i‡((
°©us
 = 
	`NewsPo°_Êush
(
me
)Ë!
HT_OK
 ||

151 (
°©us
 = 
	`NewsPo°_íd
(
me
)Ë!
HT_OK
 ||

152 (
°©us
 = (*
me
->
èrgë
->
iß
->
_‰ì
)(me->èrgë)Ë!
HT_OK
)

153  
°©us
;

154 
	`HTChunk_dñëe
(
me
->
buf„r
);

155 
	`HT_FREE
(
me
);

156  
°©us
;

157 
	}
}

159 
PRIVATE
 
	$NewsPo°_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

161 i‡(
me
->
èrgë
Ë(*me->èrgë->
iß
->
ab‹t
)(me->èrgë, 
e
);

162 
	`HTChunk_dñëe
(
me
->
buf„r
);

163 
	`HT_FREE
(
me
);

164 
	`HTTRACE
(
PROT_TRACE
, "NewsPost.... ABORTING...\n");

165  
HT_ERROR
;

166 
	}
}

171 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gNewsPo°Cœss
 =

174 
NewsPo°_Êush
,

175 
NewsPo°_‰ì
,

176 
NewsPo°_ab‹t
,

177 
NewsPo°_put_ch¨a˘î
,

178 
NewsPo°_put_°rög
,

179 
NewsPo°_put_block


182 
PUBLIC
 
HTSåóm
 * 
	$HTNewsPo°_√w
 (
HTReque°
 * 
ªque°
, 
HTSåóm
 * 
èrgë
)

184 
HTSåóm
 * 
me
;

185 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

186 
	`HT_OUTOFMEM
("NewsPost_new");

187 
me
->
iß
 = &
NewsPo°Cœss
;

188 
me
->
èrgë
 =Åarget;

189 
me
->
ªque°
 =Ñequest;

190 
me
->
buf„r
 = 
	`HTChunk_√w
(256);

191 
me
->
å™•¨ít
 = 
NO
;

192  
	`HTMIMEReque°_√w
(
ªque°
, 
me
, 
YES
);

193 
	}
}

	@Library/src/HTNewsRq.h

28 #i‚de‡
HTNEWSREQ_H


29 
	#HTNEWSREQ_H


	)

31 
	~"HTSåóm.h
"

32 
	~"HTAc˚ss.h
"

43 
HTSåóm
 * 
HTNewsPo°_√w
 (
HTReque°
 * 
ªque°
, HTSåóm * 
èrgë
);

	@Library/src/HTNoFree.c

13 
	~"wwwsys.h
"

14 
	~"HTUtûs.h
"

15 
	~"HTSåóm.h
"

17 
	s_HTSåóm
 {

18 c⁄° 
HTSåómCœss
 * 
	miß
;

19 
HTSåóm
 * 
	mèrgë
;

24 
PRIVATE
 
	$HTNoFªeSåóm_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

26  (*
me
->
èrgë
->
iß
->
put_ch¨a˘î
)(me->èrgë, 
c
);

27 
	}
}

29 
PRIVATE
 
	$HTNoFªeSåóm_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

31  (*
me
->
èrgë
->
iß
->
put_°rög
)(me->èrgë, 
s
);

32 
	}
}

34 
PRIVATE
 
	$HTNoFªeSåóm_wrôe
 (
HTSåóm
 * 
me
, c⁄° * 
s
, 
l
)

36  (*
me
->
èrgë
->
iß
->
put_block
)(me->èrgë, 
s
, 
l
);

37 
	}
}

39 
PRIVATE
 
	$HTNoFªeSåóm_Êush
 (
HTSåóm
 * 
me
)

41  (*
me
->
èrgë
->
iß
->
Êush
)(me->target);

42 
	}
}

44 
PRIVATE
 
	$HTNoFªeSåóm_‰ì
 (
HTSåóm
 * 
me
)

46  
HT_OK
;

47 
	}
}

49 
PRIVATE
 
	$HTNoFªeSåóm_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

51  
HT_ERROR
;

52 
	}
}

54 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTNoFªeSåómCœss
 =

57 
HTNoFªeSåóm_Êush
,

58 
HTNoFªeSåóm_‰ì
,

59 
HTNoFªeSåóm_ab‹t
,

60 
HTNoFªeSåóm_put_ch¨a˘î
,

61 
HTNoFªeSåóm_put_°rög
,

62 
HTNoFªeSåóm_wrôe


65 
PUBLIC
 
HTSåóm
 * 
	$HTNoFªeSåóm_√w
 (
HTSåóm
 * 
èrgë
)

67 i‡(
èrgë
) {

68 
HTSåóm
 * 
me
;

69 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

70 
	`HT_OUTOFMEM
("HTNoFree");

71 
me
->
iß
 = &
HTNoFªeSåómCœss
;

72 
me
->
èrgë
 =Åarget;

73  
me
;

75  
	`HTEº‹Såóm
();

76 
	}
}

78 
PUBLIC
 
	$HTNoFªeSåóm_dñëe
 (
HTSåóm
 * 
me
)

80 i‡(
me
Ë
	`HT_FREE
(me);

81  
HT_OK
;

82 
	}
}

	@Library/src/HTNoFree.h

30 #i‚de‡
_HTNOFREE_H


31 
	#_HTNOFREE_H


	)

33 
	~"HTSåóm.h
"

35 
HTSåóm
 * 
HTNoFªeSåóm_√w
 (HTSåóm * 
èrgë
);

37 
HTNoFªeSåóm_dñëe
 (
HTSåóm
 * 
me
);

	@Library/src/HTPEP.c

17 
	~"wwwsys.h
"

18 
	~"WWWUtû.h
"

19 
	~"WWWC‹e.h
"

20 
	~"HTPEP.h
"

22 
	#PEP_NAME
 "w3c-≥p"

	)

23 
	#DEFAULT_PORT
 80

	)

25 
	s_HTPEPModuÀ
 {

26 * 
	m«me
;

27 
HTNëBef‹e
 * 
	mbef‹e
;

28 
HTNëA·î
 * 
	ma·î
;

29 
HTUTªe_gc
 * 
	mgc
;

32 
	s_HTPEPEÀmít
 {

33 * 
	m«me
;

34 * 
	mc⁄ãxt
;

35 } 
	tHTPEPEÀmít
;

37 
PRIVATE
 
HTLi°
 ** 
	gHTModuÀs
;

43 
PRIVATE
 
BOOL
 
	$dñëe_moduÀ
 (
HTPEPModuÀ
 * 
moduÀ
)

45 i‡(
moduÀ
) {

46 
	`HT_FREE
(
moduÀ
->
«me
);

47 
	`HT_FREE
(
moduÀ
);

48  
YES
;

50  
NO
;

51 
	}
}

56 
PRIVATE
 
HTPEPModuÀ
 * 
	$föd_moduÀ
 (c⁄° * 
«me
, 
HTLi°
 ** 
hashli°
)

58 
HTPEPModuÀ
 * 
¥es
 = 
NULL
;

59 *
hashli°
 = 
NULL
;

60 i‡(!
«me
) {

61 
	`HTTRACE
(
APP_TRACE
, "PEP Engine.. Badárgument\n");

62  
NULL
;

67 
hash
;

68 c⁄° * 
p
;

69 
p
=
«me
, 
hash
=0; *p;Ö++) {

70 
hash
 = (hash * 3 + *
p
Ë% 
HT_M_HASH_SIZE
;

72 i‡(!
HTModuÀs
) {

73 i‡((
HTModuÀs
 = (
HTLi°
 **Ë
	`HT_CALLOC
(
HT_M_HASH_SIZE
,

74 (
HTLi°
 *))Ë=
NULL
)

75 
	`HT_OUTOFMEM
("find_module");

77 i‡(!
HTModuÀs
[
hash
])

78 
HTModuÀs
[
hash
] = *
hashli°
 = 
	`HTLi°_√w
();

80 *
hashli°
 = 
HTModuÀs
[
hash
];

85 
HTLi°
 * 
cur
 = *
hashli°
;

86 (
¥es
 = (
HTPEPModuÀ
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

87 i‡(!
	`°rcmp
(
¥es
->
«me
,Çame)) Öres;

90  
NULL
;

91 
	}
}

93 
PUBLIC
 
HTPEPModuÀ
 * 
	$HTPEP_√wModuÀ
 (c⁄° * 
«me
,

94 
HTNëBef‹e
 * 
bef‹e
,

95 
HTNëA·î
 * 
a·î
,

96 
HTUTªe_gc
 * 
gc
)

98 i‡(
«me
) {

99 
HTLi°
 * 
hashli°
 = 
NULL
;

100 
HTPEPModuÀ
 * 
¥es
 = 
	`föd_moduÀ
(
«me
, &
hashli°
);

103 i‡(!
¥es
) {

104 i‡(!(
¥es
 = (
HTPEPModuÀ
 *Ë
	`HT_CALLOC
(1, (HTPEPModule))))

105 
	`HT_OUTOFMEM
("HTPEP_newModule");

106 
	`SåAŒocC›y
(
¥es
->
«me
,Çame);

107 
¥es
->
bef‹e
 = before;

108 
¥es
->
a·î
 =áfter;

109 
¥es
->
gc
 = gc;

112 
	`HTLi°_addObje˘
(
hashli°
, (*Ë
¥es
);

113 
	`HTTRACE
(
APP_TRACE
, "PEP Engöe.. Cª©ed moduÀ %p\n" 
_
 
¥es
);

115 
	`HTTRACE
(
APP_TRACE
, "PEP Engöe.. Found moduÀ %p\n" 
_
 
¥es
);

117  
¥es
;

119 
	`HTTRACE
(
APP_TRACE
, "PEP Engine.. Badárgument\n");

120  
NULL
;

122 
	}
}

124 
PUBLIC
 
HTPEPModuÀ
 * 
	$HTPEP_födModuÀ
 (c⁄° * 
«me
)

126 i‡(
«me
) {

127 
HTLi°
 * 
hashli°
 = 
NULL
;

128 
HTPEPModuÀ
 * 
¥es
 = 
	`föd_moduÀ
(
«me
, &
hashli°
);

129 
	`HTTRACE
(
APP_TRACE
, "PEP Engöe.. did %sföd %s\n" 
_
 
¥es
 ? "" : "NOT " _ 
«me
);

130  
¥es
;

132 
	`HTTRACE
(
APP_TRACE
, "PEP Engine.. Badáugument\n");

134  
NULL
;

135 
	}
}

137 
PUBLIC
 
BOOL
 
	$HTPEP_dñëeModuÀ
 (c⁄° * 
«me
)

139 i‡(
«me
) {

140 
HTLi°
 * 
hashli°
 = 
NULL
;

141 
HTPEPModuÀ
 * 
¥es
 = 
	`föd_moduÀ
(
«me
, &
hashli°
);

142 i‡(
¥es
) {

143 
	`HTLi°_ªmoveObje˘
(
hashli°
, 
¥es
);

144 
	`HTTRACE
(
APP_TRACE
, "PEP Engöe.. dñëed %p\n" 
_
 
¥es
);

145 
	`dñëe_moduÀ
(
¥es
);

146  
YES
;

149  
NO
;

150 
	}
}

152 
PUBLIC
 
BOOL
 
	$HTPEP_dñëeAŒModuÀs
 ()

154 i‡(
HTModuÀs
) {

155 
˙t
;

156 
HTLi°
 * 
cur
;

157 
˙t
=0; c¡<
HT_M_HASH_SIZE
; cnt++) {

158 i‡((
cur
 = 
HTModuÀs
[
˙t
])) {

159 
HTPEPModuÀ
 * 
¥es
;

160 (
¥es
 = (
HTPEPModuÀ
 *Ë
	`HTLi°_√xtObje˘
(
cur
)))

161 
	`dñëe_moduÀ
(
¥es
);

163 
	`HTLi°_dñëe
(
HTModuÀs
[
˙t
]);

165 
	`HT_FREE
(
HTModuÀs
);

166  
YES
;

168  
NO
;

169 
	}
}

181 
PRIVATE
 
HTPEPEÀmít
 * 
	$HTPEP_√wEÀmít
 (c⁄° * 
«me
, * 
c⁄ãxt
)

183 i‡(
«me
) {

184 
HTPEPEÀmít
 * 
me
;

185 i‡((
me
 = (
HTPEPEÀmít
 *Ë
	`HT_CALLOC
(1, (HTPEPEÀmít))Ë=
NULL
)

186 
	`HT_OUTOFMEM
("HTPEPElement_new");

187 
	`SåAŒocC›y
(
me
->
«me
,Çame);

188 
me
->
c⁄ãxt
 = context;

189 
	`HTTRACE
(
APP_TRACE
, "PEP Engöe.. Cª©edÉÀmíà%p\n" 
_
 
me
);

190  
me
;

192  
NULL
;

193 
	}
}

195 
PRIVATE
 
BOOL
 
	$HTPEP_dñëeEÀmít
 (
HTPEPEÀmít
 * 
me
)

197 i‡(
me
) {

198 
	`HTTRACE
(
APP_TRACE
, "PEP Engöe.. DñëedÉÀmíà%p\n" 
_
 
me
);

199 
	`HT_FREE
(
me
->
«me
);

200 
	`HT_FREE
(
me
);

201  
YES
;

203  
NO
;

204 
	}
}

210 
PRIVATE
 
HTLi°
 * 
	$HTPEP_√wLi°
 ()

212 
HTLi°
 * 
me
 = 
	`HTLi°_√w
();

213 
	`HTTRACE
(
APP_TRACE
, "PEP Engöe.. Cª©edÜi° %p\n" 
_
 
me
);

214  
me
;

215 
	}
}

217 
PRIVATE
 
	$HTPEP_dñëeLi°
 (* 
c⁄ãxt
)

219 
HTLi°
 * 
li°
 = (HTLi° *Ë
c⁄ãxt
;

220 i‡(
li°
) {

221 
HTPEPEÀmít
 * 
¥es
;

222 (
¥es
 = (
HTPEPEÀmít
 *Ë
	`HTLi°_√xtObje˘
(
li°
)))

223 
	`HTPEP_dñëeEÀmít
(
¥es
);

224 
	`HTTRACE
(
APP_TRACE
, "PEP Engöe.. DñëedÜi° %p\n" 
_
 
li°
);

225 
	`HTLi°_dñëe
(
li°
);

226  
YES
;

228  
NO
;

229 
	}
}

243 
PRIVATE
 
HTLi°
 * 
	$HTPEP_födLi°
 (c⁄° * 
ªÆm
, c⁄° * 
uæ
)

245 
HTUTªe
 * 
åì
;

246 i‡(!
uæ
) {

247 
	`HTTRACE
(
APP_TRACE
, "PEP Engine.. Badárgument\n");

248  
NULL
;

250 
	`HTTRACE
(
APP_TRACE
, "PEP Engöe.. Lookög f‹ infÿ⁄ `%s'\n" 
_
 
uæ
);

254 * 
ho°
 = 
	`HTP¨£
(
uæ
, "", 
PARSE_HOST
);

255 * 
cﬁ⁄
 = 
	`°rchr
(
ho°
, ':');

256 
p‹t
 = 
DEFAULT_PORT
;

257 i‡(
cﬁ⁄
 ) {

258 *(
cﬁ⁄
++) = '\0';

259 
p‹t
 = 
	`©oi
(
cﬁ⁄
);

261 
åì
 = 
	`HTUTªe_föd
(
PEP_NAME
, 
ho°
, 
p‹t
);

262 
	`HT_FREE
(
ho°
);

263 i‡(!
åì
) {

264 
	`HTTRACE
(
APP_TRACE
, "PEP Engine.. No information\n");

265  
NULL
;

271 * 
∑th
 = 
	`HTP¨£
(
uæ
, "", 
PARSE_PATH
);

272 
HTLi°
 * 
li°
 = (HTLi° *Ë
	`HTUTªe_födNode
(
åì
, 
ªÆm
, 
∑th
);

273 
	`HT_FREE
(
∑th
);

274  
li°
;

276  
NULL
;

277 
	}
}

283 
PUBLIC
 
BOOL
 
	$HTPEP_addNode
 (c⁄° * 
¥Ÿocﬁ
,

284 c⁄° * 
ªÆm
, c⁄° * 
uæ
,

285 * 
c⁄ãxt
)

287 
HTUTªe
 * 
åì
 = 
NULL
;

288 
HTPEPModuÀ
 * 
moduÀ
 = 
NULL
;

289 i‡(!
¥Ÿocﬁ
 || !
uæ
) {

290 
	`HTTRACE
(
APP_TRACE
, "PEP Engine.. Badárgument\n");

291  
NO
;

293 
	`HTTRACE
(
APP_TRACE
, "PEP Engöe.. Addög infÿf‹ `%s'\n" 
_
 
uæ
);

296 i‡((
moduÀ
 = 
	`HTPEP_födModuÀ
(
¥Ÿocﬁ
)Ë=
NULL
) {

297 
	`HTTRACE
(
APP_TRACE
, "PEP Engöe.. ModuÀ `%s\'ÇŸÑegi°îed\n" 
_


298 
¥Ÿocﬁ
 ?Örotocol : "<null>");

299  
NO
;

304 * 
ho°
 = 
	`HTP¨£
(
uæ
, "", 
PARSE_HOST
);

305 * 
cﬁ⁄
 = 
	`°rchr
(
ho°
, ':');

306 
p‹t
 = 
DEFAULT_PORT
;

307 i‡(
cﬁ⁄
 ) {

308 *(
cﬁ⁄
++) = '\0';

309 
p‹t
 = 
	`©oi
(
cﬁ⁄
);

311 
åì
 = 
	`HTUTªe_√w
(
PEP_NAME
, 
ho°
, 
p‹t
, 
HTPEP_dñëeLi°
);

312 
	`HT_FREE
(
ho°
);

313 i‡(!
åì
) {

314 
	`HTTRACE
(
APP_TRACE
, "PEP Engine.. Can't createÅree\n");

315  
NO
;

321 * 
∑th
 = 
	`HTP¨£
(
uæ
, "", 
PARSE_PATH
);

322 
HTLi°
 * 
li°
 = 
NULL
;

323 
HTPEPEÀmít
 * 
ñemít
 = 
	`HTPEP_√wEÀmít
(
¥Ÿocﬁ
, 
c⁄ãxt
);

329 i‡((
li°
 = (
HTLi°
 *Ë
	`HTUTªe_födNode
(
åì
, 
ªÆm
, 
∑th
)Ë=
NULL
) {

330 
li°
 = 
	`HTPEP_√wLi°
();

331 
	`HTUTªe_addNode
(
åì
, 
ªÆm
, 
∑th
, 
li°
);

333 
	`HT_FREE
(
∑th
);

336  
	`HTLi°_addObje˘
(
li°
, 
ñemít
);

338 
	}
}

348 
PUBLIC
 
	$HTPEP_bef‹eFûãr
 (
HTReque°
 * 
ªque°
, * 
∑øm
, 
mode
)

350 
ªt
 = 
HT_OK
;

351 * 
uæ
 = 
	`HTAnch‹_physiˇl
(
	`HTReque°_™ch‹
(
ªque°
));

352 c⁄° * 
ªÆm
 = 
	`HTReque°_ªÆm
(
ªque°
);

353 
HTLi°
 * 
li°
 = 
	`HTPEP_födLi°
(
ªÆm
, 
uæ
);

354 i‡(
li°
) {

355 
HTPEPEÀmít
 * 
¥es
;

356 
	`HTTRACE
(
APP_TRACE
, "PEP Engöe.. CÆlög BEFOREÖrŸocﬁ†%p\n" 
_
 
li°
);

357 (
¥es
 = (
HTPEPEÀmít
 *Ë
	`HTLi°_√xtObje˘
(
li°
))) {

358 
HTPEPModuÀ
 * 
moduÀ
 = 
	`HTPEP_födModuÀ
(
¥es
->
«me
);

359 i‡(
moduÀ
) {

360 
ªt
 = (*
moduÀ
->
bef‹e
)(
ªque°
, 
¥es
->
c⁄ãxt
, 
mode
);

361 i‡(
ªt
 !
HT_OK
) ;

365  
HT_OK
;

366 
	}
}

372 
PUBLIC
 
	$HTPEP_a·îFûãr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

373 * 
∑øm
, 
°©us
)

375 
ªt
 = 
HT_OK
;

376 
HTAssocLi°
 * 
¥Ÿocﬁs
 = 
	`HTRe•⁄£_¥Ÿocﬁ
(
ª•⁄£
);

377 i‡(
¥Ÿocﬁs
) {

378 
HTPEPEÀmít
 * 
¥es
;

379 
	`HTTRACE
(
APP_TRACE
, "PEP Engöe.. CÆlög AFTERÖrŸocﬁ†%p\n" 
_
 
¥Ÿocﬁs
);

380 (
¥es
 = (
HTPEPEÀmít
 *Ë
	`HTLi°_√xtObje˘
(
¥Ÿocﬁs
))) {

381 
HTPEPModuÀ
 * 
moduÀ
 = 
	`HTPEP_födModuÀ
(
¥es
->
«me
);

382 i‡(
moduÀ
) {

383 
ªt
 = (*
moduÀ
->
a·î
)(
ªque°
, 
ª•⁄£
, 
¥es
->
c⁄ãxt
, 
°©us
);

384 i‡(
ªt
 !
HT_OK
) ;

388  
HT_OK
;

389 
	}
}

	@Library/src/HTPEP.h

80 #i‚de‡
HTPEP_H


81 
	#HTPEP_H


	)

82 
	~"HTLi°.h
"

83 
	~"HTReq.h
"

84 
	~"HTUTªe.h
"

86 
_HTPEPModuÀ
 
	tHTPEPModuÀ
;

103 
HTPEPModuÀ
 * 
HTPEP_√wModuÀ
(c⁄° * 
¥Ÿocﬁ
,

104 
HTNëBef‹e
 * 
bef‹e
,

105 
HTNëA·î
 * 
a·î
,

106 
HTUTªe_gc
 * 
gc
);

113 
HTPEPModuÀ
 * 
HTPEP_födModuÀ
 (c⁄° * 
¥Ÿocﬁ
);

120 
BOOL
 
HTPEP_dñëeModuÀ
 (c⁄° * 
¥Ÿocﬁ
);

127 
BOOL
 
HTPEP_dñëeAŒModuÀs
 ();

156 
HTPEPModuÀ
 * 
HTPEP_födModuÀ
 (c⁄° * 
«me
);

168 
HTNëBef‹e
 
HTPEP_bef‹eFûãr
;

169 
HTNëA·î
 
HTPEP_a·îFûãr
;

	@Library/src/HTParse.c

14 
	~"wwwsys.h
"

15 
	~"WWWUtû.h
"

16 
	~"HTP¨£.h
"

18 
	s_HTURI
 {

19 * 
	mac˚ss
;

20 * 
	mho°
;

21 * 
	mabsﬁuã
;

22 * 
	mªœtive
;

23 * 
	m‰agmít
;

24 } 
	tHTURI
;

36 
PRIVATE
 
	$sˇn
 (* 
«me
, 
HTURI
 * 
∑πs
)

38 * 
p
;

39 * 
a·î_ac˚ss
 = 
«me
;

40 
	`mem£t
(
∑πs
, '\0', (
HTURI
));

43 i‡((
p
 = 
	`°rchr
(
«me
, '#')Ë!
NULL
) {

44 *
p
++ = '\0';

45 
∑πs
->
‰agmít
 = 
p
;

49 i‡((
p
 = 
	`°rchr
(
«me
, ' ')Ë!
NULL
) *p++ = '\0';

51 
p
=
«me
; *p;Ö++) {

57 i‡(
	`is•a˚
((Ë*
p
)) {

58 *
‹ig
=
p
, *
de°
=p+1;

59 (*
‹ig
++ = *
de°
++));

60 
p
 =Ö-1;

62 i‡(*
p
=='/' || *p=='#' || *p=='?')

64 i‡(*
p
==':') {

65 *
p
 = 0;

66 
∑πs
->
ac˚ss
 = 
a·î_ac˚ss
;

76 
a·î_ac˚ss
 = 
p
+1;

78 i‡(0==
	`°rˇ£comp
("URL", 
∑πs
->
ac˚ss
)) {

79 
∑πs
->
ac˚ss
 = 
NULL
;

84 
p
 = 
a·î_ac˚ss
;

85 i‡(*
p
=='/'){

86 i‡(
p
[1]=='/') {

87 
∑πs
->
ho°
 = 
p
+2;

88 *
p
=0;

89 
p
=
	`°rchr
(
∑πs
->
ho°
,'/');

90 if(
p
) {

91 *
p
=0;

92 
∑πs
->
absﬁuã
 = 
p
+1;

95 
∑πs
->
absﬁuã
 = 
p
+1;

98 
∑πs
->
ªœtive
 = (*
a·î_ac˚ss
) ?áfter_access : 0;

100 
	}
}

118 
PUBLIC
 * 
	$HTP¨£
 (c⁄° *
aName
, c⁄° *
ªœãdName
, 
w™ãd
)

120 * 
ªsu…
 = 0;

121 * 
ªtu∫_vÆue
 = 0;

122 
Àn
;

123 * 
«me
 = 0;

124 * 
ªl
 = 0;

125 * 
p
;

126 * 
ac˚ss
;

127 
HTURI
 
giví
, 
ªœãd
;

129 i‡(!
aName
Ë 
NULL
;

130 i‡(!
ªœãdName
)

131 
ªœãdName
 = "";

134 
Àn
 = 
	`°æí
(
aName
)+°æí(
ªœãdName
)+10;

135 i‡((
ªsu…
=(*Ë
	`HT_MALLOC
(
Àn
)Ë=
NULL
)

136 
	`HT_OUTOFMEM
("parse space");

137 
	`SåAŒocC›y
(
«me
, 
aName
);

138 
	`SåAŒocC›y
(
ªl
, 
ªœãdName
);

140 
	`sˇn
(
«me
, &
giví
);

141 
	`sˇn
(
ªl
, &
ªœãd
);

142 
ªsu…
[0]=0;

143 
ac˚ss
 = 
giví
.ac˚s†? giví.ac˚s†: 
ªœãd
.access;

144 i‡(
w™ãd
 & 
PARSE_ACCESS
)

145 i‡(
ac˚ss
) {

146 
	`°rˇt
(
ªsu…
, 
ac˚ss
);

147 if(
w™ãd
 & 
PARSE_PUNCTUATION
Ë
	`°rˇt
(
ªsu…
, ":");

150 i‡(
giví
.
ac˚ss
 && 
ªœãd
.access)

151 i‡(
	`°rcmp
(
giví
.
ac˚ss
, 
ªœãd
.access)!=0) {

152 
ªœãd
.
ho°
=0;

153 
ªœãd
.
absﬁuã
=0;

154 
ªœãd
.
ªœtive
=0;

155 
ªœãd
.
‰agmít
=0;

158 i‡(
w™ãd
 & 
PARSE_HOST
)

159 if(
giví
.
ho°
 || 
ªœãd
.host) {

160 if(
w™ãd
 & 
PARSE_PUNCTUATION
Ë
	`°rˇt
(
ªsu…
, "//");

161 
	`°rˇt
(
ªsu…
, 
giví
.
ho°
 ? giví.ho° : 
ªœãd
.host);

164 i‡(
giví
.
ho°
 && 
ªœãd
.host)

165 i‡(
	`°rcmp
(
giví
.
ho°
, 
ªœãd
.host)!=0) {

166 
ªœãd
.
absﬁuã
=0;

167 
ªœãd
.
ªœtive
=0;

168 
ªœãd
.
‰agmít
=0;

171 i‡(
w™ãd
 & 
PARSE_PATH
) {

172 if(
giví
.
absﬁuã
) {

173 if(
w™ãd
 & 
PARSE_PUNCTUATION
Ë
	`°rˇt
(
ªsu…
, "/");

174 
	`°rˇt
(
ªsu…
, 
giví
.
absﬁuã
);

175 } if(
ªœãd
.
absﬁuã
) {

176 
	`°rˇt
(
ªsu…
, "/");

177 
	`°rˇt
(
ªsu…
, 
ªœãd
.
absﬁuã
);

178 i‡(
giví
.
ªœtive
) {

179 
p
 = 
	`°rchr
(
ªsu…
, '?');

180 i‡(!
p
Ëp=
ªsu…
+
	`°æí
(result)-1;

181 ; *
p
!='/';Ö--);

182 
p
[1]=0;

183 
	`°rˇt
(
ªsu…
, 
giví
.
ªœtive
);

185 
ªsu…
 = 
	`HTSim∂ify
 (&result);

188 } if(
giví
.
ªœtive
) {

189 
	`°rˇt
(
ªsu…
, 
giví
.
ªœtive
);

190 } if(
ªœãd
.
ªœtive
) {

191 
	`°rˇt
(
ªsu…
, 
ªœãd
.
ªœtive
);

193 
	`°rˇt
(
ªsu…
, "/");

197 i‡(
w™ãd
 & 
PARSE_VIEW
)

198 if(
giví
.
‰agmít
 || 
ªœãd
.fragment) {

199 if(
giví
.
absﬁuã
 && giví.
‰agmít
) {

200 if(
w™ãd
 & 
PARSE_PUNCTUATION
Ë
	`°rˇt
(
ªsu…
, "#");

201 
	`°rˇt
(
ªsu…
, 
giví
.
‰agmít
);

202 } i‡(!(
giví
.
absﬁuã
Ë&& !(giví.
‰agmít
)) {

203 
	`°rˇt
(
ªsu…
, "");

205 if(
w™ãd
 & 
PARSE_PUNCTUATION
Ë
	`°rˇt
(
ªsu…
, "#");

206 
	`°rˇt
(
ªsu…
, 
giví
.
‰agmít
 ? giví.‰agmíà: 
ªœãd
.fragment);

209 
	`HT_FREE
(
ªl
);

210 
	`HT_FREE
(
«me
);

212 
	`SåAŒocC›y
(
ªtu∫_vÆue
, 
ªsu…
);

213 
	`HT_FREE
(
ªsu…
);

214  
ªtu∫_vÆue
;

215 
	}
}

228 
PRIVATE
 * 
	$HTC™⁄
 (** 
fûíame
, * 
ho°
)

230 *
√w«me
 = 
NULL
;

231 *
p‹t
;

232 *
°Ωå
;

233 *
∑th
;

234 *
ac˚ss
 = 
ho°
-3;

236 
ac˚ss
>*
fûíame
 && *(access-1)!='/')

237 
ac˚ss
--;

238 i‡((
∑th
 = 
	`°rchr
(
ho°
, '/')Ë=
NULL
)

239 
∑th
 = 
ho°
 + 
	`°æí
(host);

240 i‡((
°Ωå
 = 
	`°rchr
(
ho°
, '@')Ë!
NULL
 && så±r<
∑th
)

241 
ho°
 = 
°Ωå
;

242 i‡((
p‹t
 = 
	`°rchr
(
ho°
, ':')Ë!
NULL
 &&Ö‹t>
∑th
)

243 
p‹t
 = 
NULL
;

245 
°Ωå
 = 
ho°
;

246 
°Ωå
<
∑th
) {

247 *
°Ωå
 = 
	`TOLOWER
(*strptr);

248 
°Ωå
++;

255 i‡(((
°Ωå
 = 
	`°rchr
(
ho°
, '.')Ë=
NULL
 || så±∏>
∑th
) &&

256 
	`°∫ˇ£comp
(
ho°
, "localhost", 9)) {

257 c⁄° *
domaö
 = 
	`HTGëDomaöName
();

258 i‡(
domaö
 && *domain) {

259 i‡((
√w«me
 = (*Ë
	`HT_CALLOC
(1, 
	`°æí
(*
fûíame
Ë+ såÀn(
domaö
)+2)Ë=
NULL
)

260 
	`HT_OUTOFMEM
("HTCanon");

261 i‡(
p‹t
)

262 
	`°∫˝y
(
√w«me
, *
fûíame
, (Ë(
p‹t
-*filename));

264 
	`°∫˝y
(
√w«me
, *
fûíame
, (Ë(
∑th
-*filename));

265 
	`°rˇt
(
√w«me
, ".");

266 
	`°rˇt
(
√w«me
, 
domaö
);

271 *
dŸ
 = 
p‹t
 ?Ö‹à: 
∑th
;

272 i‡(
dŸ
 > *
fûíame
 && *--dot=='.') {

273 *
‹ig
=
dŸ
, *
de°
=dot+1;

274 (*
‹ig
++ = *
de°
++));

275 i‡(
p‹t
)Öort--;

276 
∑th
--;

280 i‡(
p‹t
) {

281 i‡(!*(
p‹t
+1) || *(port+1)=='/') {

282 i‡(!
√w«me
) {

283 *
‹ig
=
p‹t
, *
de°
=port+1;

284 (*
‹ig
++ = *
de°
++));

286 } i‡((!
	`°∫cmp
(
ac˚ss
, "http", 4) &&

287 (*(
p‹t
+1)=='8'&&*(port+2)=='0'&&(*(port+3)=='/'||!*(port+3)))) ||

288 (!
	`°∫cmp
(
ac˚ss
, "gopher", 6) &&

289 (*(
p‹t
+1)=='7'&&*(port+2)=='0'&&(*(port+3)=='/'||!*(port+3)))) ||

290 (!
	`°∫cmp
(
ac˚ss
, "ftp", 3) &&

291 (*(
p‹t
+1)=='2'&&*(port+2)=='1'&&(*(port+3)=='/'||!*(port+3))))) {

292 i‡(!
√w«me
) {

293 *
‹ig
=
p‹t
, *
de°
=port+3;

294 (*
‹ig
++ = *
de°
++));

295 
∑th
 -= 3;

297 } i‡(
√w«me
)

298 
	`°∫ˇt
(
√w«me
, 
p‹t
, (Ë(
∑th
-port));

301 i‡(
√w«me
) {

302 *
√w∑th
 = 
√w«me
+
	`°æí
(newname);

303 
	`°rˇt
(
√w«me
, 
∑th
);

304 
∑th
 = 
√w∑th
;

305 
	`HT_FREE
(*
fûíame
);

306 *
fûíame
 = 
√w«me
;

308  
∑th
;

309 
	}
}

316 
PUBLIC
 
BOOL
 
	$HTURL_isAbsﬁuã
 (c⁄° * 
uæ
)

318 i‡(
uæ
) {

319 c⁄° * 
±r
 = 
uæ
;

320 *
±r
) {

321 i‡(*
±r
 =':'Ë 
YES
;

322 i‡(*
±r
 == '/' || *ptr == '?' || *ptr == '#') ;

323 
±r
 ++;

326  
NO
;

327 
	}
}

354 
PUBLIC
 *
	$HTSim∂ify
 (** 
uæ
)

356 *
∑th
;

357 *
p
;

358 i‡(!
uæ
 || !*url) {

359 
	`HTTRACE
(
URI_TRACE
, "HTSimplify.. Nothing done\n");

360  *
uæ
;

362 
	`HTTRACE
(
URI_TRACE
, "HTSim∂ify.. `%s\' " 
_
 *
uæ
);

365 i‡((
∑th
 = 
	`°r°r
(*
uæ
, "://")Ë!
NULL
) {

366 *
√w±r
;

367 *
ac˚ss
 = *
uæ
;

368 
ac˚ss
<
∑th
 && (*ac˚ss=
	`TOLOWER
(*access)))áccess++;

369 
∑th
 += 3;

370 (
√w±r
 = 
	`°r°r
(
∑th
, "://")Ë!
NULL
)

371 
∑th
 = 
√w±r
+3;

372 
∑th
 = 
	`HTC™⁄
(
uæ
,Öath);

373 } i‡((
∑th
 = 
	`°r°r
(*
uæ
, ":/")Ë!
NULL
) {

374 
∑th
 += 2;

376 
∑th
 = *
uæ
;

377 i‡(*
∑th
 == '/' && *(path+1)=='/') {

378 
∑th
 += 1;

379 } i‡(!
	`°∫cmp
(
∑th
, "news:", 5)) {

380 *
±r
 = 
	`°rchr
(
∑th
+5, '@');

381 i‡(!
±r
Ë±∏
∑th
+5;

382 *
±r
) {

383 *
±r
 = 
	`TOLOWER
(*ptr);

384 
±r
++;

386 
	`HTTRACE
(
URI_TRACE
, "öto\n............ `%s'\n" 
_
 *
uæ
);

387  *
uæ
;

389 i‡((
p
 = 
∑th
)) {

390 *
íd
;

391 i‡(!((
íd
 = 
	`°rchr
(
∑th
, ';')) || (end = strchr(path, '?')) ||

392 (
íd
 = 
	`°rchr
(
∑th
, '#'))))

393 
íd
 = 
∑th
+
	`°æí
(path);

396 
p
 = 
∑th
;

397 
p
<
íd
) {

398 i‡(*
p
=='/') {

399 i‡(
p
>*
uæ
 && *(p+1)=='.' && (*(p+2)=='/' || !*(p+2))) {

400 *
‹ig
 = 
p
+1;

401 *
de°
 = (*(
p
+2)!='/') ?Ö+2 :Ö+3;

402 (*
‹ig
++ = *
de°
++));

403 
íd
 = 
‹ig
-1;

404 } i‡(*(
p
+1)=='.' && *(p+2)=='.' && (*(p+3)=='/' || !*(p+3))) {

405 *
q
 = 
p
;

406 
q
>
∑th
 && *--q!='/');

407 i‡(
	`°∫cmp
(
q
, "/../", 4)) {

408 *
‹ig
 = 
q
+1;

409 *
de°
 = (*(
p
+3)!='/') ?Ö+3 :Ö+4;

410 (*
‹ig
++ = *
de°
++));

411 
íd
 = 
‹ig
-1;

412 
p
 = 
q
;

414 
p
++;

415 } i‡(*(
p
+1)=='/') {

416 *(
p
+1)=='/') {

417 *
‹ig
=
p
, *
de°
=p+1;

418 (*
‹ig
++ = *
de°
++));

419 
íd
 = 
‹ig
-1;

422 
p
++;

424 
p
++;

431 *
∑th
=='/' && *(path+1)=='.' && *(path+2)=='.' &&

432 (!*(
∑th
+3) || *(path+3)=='/')) {

433 * 
‹ig
 = 
∑th
;

434 * 
de°
 = 
∑th
+3;

435 (*
‹ig
++ = *
de°
++));

437 
	`HTTRACE
(
URI_TRACE
, "öto\n............ `%s'\n" 
_
 *
uæ
);

438  *
uæ
;

439 
	}
}

458 
PUBLIC
 * 
	$HTRñ©ive
 (c⁄° * 
aName
, c⁄° * 
ªœãdName
)

460 * 
ªsu…
 = 0;

461 c⁄° *
p
 = 
aName
;

462 c⁄° *
q
 = 
ªœãdName
;

463 c⁄° * 
a·î_ac˚ss
 = 
NULL
;

464 c⁄° * 
∑th
 = 0;

465 c⁄° * 
œ°_¶ash
 = 0;

466 
¶ashes
 = 0;

468 ;*
p
;Ö++, 
q
++) {

469 i‡(*
p
!=*
q
) ;

470 i‡(*
p
==':'Ëi‡(!
a·î_ac˚ss
)áfter_access =Ö+1;

471 i‡(*
p
=='/') {

472 
œ°_¶ash
 = 
p
;

473 
¶ashes
++;

474 i‡(
¶ashes
==3Ë
∑th
=
p
;

480 i‡(!
a·î_ac˚ss
) {

481 
	`SåAŒocC›y
(
ªsu…
, 
aName
);

482 } i‡(
¶ashes
<3){

483 
	`SåAŒocC›y
(
ªsu…
, 
a·î_ac˚ss
);

485 
Àvñs
= 0;

486 ; *
q
 && *q!='#' && *q!=';' && *q!='?'; q++Ëi‡(*q=='/'Ë
Àvñs
++;

487 i‡((
ªsu…
 = (*Ë
	`HT_MALLOC
(3*
Àvñs
 + 
	`°æí
(
œ°_¶ash
Ë+ 4)Ë=
NULL
)

488 
	`HT_OUTOFMEM
("HTRelative");

489 *
ªsu…
 = '\0';

490 i‡(!
Àvñs
Ë
	`°rˇt
(
ªsu…
, "./");

491 ;
Àvñs
;Üevñs--)
	`°rˇt
(
ªsu…
, "../");

492 
	`°rˇt
(
ªsu…
, 
œ°_¶ash
+1);

493 i‡(!*
ªsu…
Ë
	`°rˇt
(result, "./");

495 
	`HTTRACE
(
URI_TRACE
, "HTRñ©ive.. `%s'Éx¥es£dÑñ©ivêtÿ `%s' i†`%s'\n" 
_


496 
aName
 
_
 
ªœãdName
 _ 
ªsu…
);

499 * 
abs°r
 = 
	`HTP¨£
(
ªsu…
, 
ªœãdName
, 
PARSE_ALL
);

500 
	`HTSim∂ify
(&
abs°r
);

501 
	`HTTRACE
(
URI_TRACE
, "HTRñ©ive.. `%s' madêabsﬁuã ba£d o¿`%s' i†`%s'\n" 
_


502 
ªsu…
 
_
 
ªœãdName
 _ 
abs°r
);

503 i‡(
	`°rcmp
(
abs°r
, 
aName
Ë!0Ë
	`HTTRACE
(
URI_TRACE
, "THEY DIFFER!!!\n");

504 
	`HT_FREE
(
abs°r
);

507  
ªsu…
;

508 
	}
}

524 
PUBLIC
 
BOOL
 
	$HTCÀ™Tñ√tSåög
 (* 
°r
)

526 * 
cur
 = 
°r
;

528 i‡(!
°r
Ë 
NO
;

530 *
cur
) {

531 
a
 = 
	`TOASCII
((Ë*
cur
);

532 i‡(
a
 != 0x9 && (a < 0x20 || (a > 0x7E &&á < 0xA0) ||á > 0xFE)) {

533 
	`HTTRACE
(
URI_TRACE
, "IŒegÆ..... ch¨a˘î i¿URL: \"%s\"\n" 
_
 
°r
);

534 *
cur
 = 0;

535 
	`HTTRACE
(
URI_TRACE
, "Trunˇãd... \"%s\"\n" 
_
 
°r
);

536  
YES
;

538 
cur
++;

540  
NO
;

541 
	}
}

	@Library/src/HTParse.h

35 #i‚de‡
HTPARSE_H


36 
	#HTPARSE_H


	)

38 
	~"HTEsˇ≥.h
"

60 
	#PARSE_ACCESS
 16

	)

61 
	#PARSE_HOST
 8

	)

62 
	#PARSE_PATH
 4

	)

64 
	#PARSE_VIEW
 2

	)

65 
	#PARSE_FRAGMENT
 
PARSE_VIEW


	)

66 
	#PARSE_ANCHOR
 
PARSE_VIEW


	)

68 
	#PARSE_PUNCTUATION
 1

	)

69 
	#PARSE_ALL
 31

	)

80 * 
HTP¨£
 (c⁄° * 
aName
, c⁄° * 
ªœãdName
,

81 
w™ãd
);

105 * 
HTRñ©ive
 (c⁄° * 
aName
, c⁄° *
ªœãdName
);

117 
BOOL
 
HTURL_isAbsﬁuã
 (c⁄° * 
uæ
);

166 *
HTSim∂ify
 (**
fûíame
);

192 
BOOL
 
HTCÀ™Tñ√tSåög
 (* 
°r
);

	@Library/src/HTPlain.c

14 
	~"wwwsys.h
"

15 
	~"HTUtûs.h
"

16 
	~"HTStyÀ.h
"

17 
	~"HTPœö.h
"

18 
	~"HTextImp.h
"

20 
	s_HTSåóm
 {

21 c⁄° 
HTSåómCœss
 * 
	miß
;

22 
HTextImp
 * 
	mãxt
;

27 
PRIVATE
 
	$HTPœö_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

29 
	`HTextImp_addText
(
me
->
ãxt
, &
c
, 1);

30  
HT_OK
;

31 
	}
}

33 
PRIVATE
 
	$HTPœö_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

35 
	`HTextImp_addText
(
me
->
ãxt
, 
s
, 
	`°æí
(s));

36  
HT_OK
;

37 
	}
}

39 
PRIVATE
 
	$HTPœö_wrôe
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
)

41 
	`HTextImp_addText
(
me
->
ãxt
, 
b
, 
l
);

42  
HT_OK
;

43 
	}
}

45 
PRIVATE
 
	$HTPœö_Êush
 (
HTSåóm
 * 
me
)

47  
HT_OK
;

48 
	}
}

50 
PRIVATE
 
	$HTPœö_‰ì
 (
HTSåóm
 * 
me
)

52 i‡(
me
) {

53 
	`HTextImp_buûd
(
me
->
ãxt
, 
HTEXT_END
);

54 
	`HTextImp_dñëe
(
me
->
ãxt
);

55 
	`HT_FREE
(
me
);

57  
HT_OK
;

58 
	}
}

60 
PRIVATE
 
	$HTPœö_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

62 i‡(
me
) {

63 
	`HTextImp_buûd
(
me
->
ãxt
, 
HTEXT_ABORT
);

64 
	`HTextImp_dñëe
(
me
->
ãxt
);

65 
	`HT_FREE
(
me
);

67  
HT_ERROR
;

68 
	}
}

70 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTPœö
 =

73 
HTPœö_Êush
,

74 
HTPœö_‰ì
,

75 
HTPœö_ab‹t
,

76 
HTPœö_put_ch¨a˘î
,

77 
HTPœö_put_°rög
,

78 
HTPœö_wrôe
,

81 
PUBLIC
 
HTSåóm
* 
	$HTPœöPª£¡
 (
HTReque°
 * 
ªque°
,

82 * 
∑øm
,

83 
HTF‹m©
 
öput_f‹m©
,

84 
HTF‹m©
 
ouçut_f‹m©
,

85 
HTSåóm
 * 
ouçut_°ªam
)

87 
HTSåóm
 * 
me
;

88 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

89 
	`HT_OUTOFMEM
("HTPlain_new");

90 
me
->
iß
 = &
HTPœö
;

91 
me
->
ãxt
 = 
	`HTextImp_√w
(
ªque°
, 
	`HTReque°_™ch‹
‘eque°), 
ouçut_°ªam
);

92 
	`HTextImp_buûd
(
me
->
ãxt
, 
HTEXT_BEGIN
);

93  
me
;

94 
	}
}

	@Library/src/HTPlain.h

25 #i‚de‡
HTPLAIN_H


26 
	#HTPLAIN_H


	)

28 
	~"HTF‹m©.h
"

30 
HTC⁄vîãr
 
HTPœöPª£¡
;

	@Library/src/HTProfil.c

12 
	~"wwwsys.h
"

13 
	~"WWWUtû.h
"

14 
	~"WWWC‹e.h
"

15 
	~"WWWCache.h
"

16 
	~"WWWSåóm.h
"

17 
	~"HTInô.h
"

18 
	~"HTProfû.h
"

20 
PRIVATE
 
HTLi°
 * 
	gc⁄vîãrs
 = 
NULL
;

21 
PRIVATE
 
HTLi°
 * 
	gå™s„r_ícodögs
 = 
NULL
;

22 
PRIVATE
 
HTLi°
 * 
	gc⁄ã¡_ícodögs
 = 
NULL
;

23 
PRIVATE
 
BOOL
 
	g¥ìm±ive
 = 
NO
;

27 
PUBLIC
 
	$HTProfûe_dñëe
 ()

29 i‡(!
¥ìm±ive
Ë
	`HTEvítTîmö©e
();

30 i‡(
	`HTLib_isInôülized
()) {

33 
	`HTCacheTîmö©e
();

36 
	`HTF‹m©_dñëeAŒ
();

39 
å™s„r_ícodögs
 = 0;

40 
c⁄ã¡_ícodögs
 = 0;

41 
c⁄vîãrs
 = 0;

44 
	`HTBöd_dñëeAŒ
();

47 
	`HTLibTîmö©e
();

49 
	}
}

51 
PRIVATE
 
	$˛õ¡_¥ofûe
 (c⁄° * 
AµName
, c⁄° * 
AµVîsi⁄
,

52 
BOOL
 
¥ìm±ive
, BOOL 
ˇche
, BOOL 
HTMLP¨£r
)

55 i‡(!
	`HTLib_isInôülized
()Ë
	`HTLibInô
(
AµName
, 
AµVîsi⁄
);

58 
	`HTAÀπInô
();

59 
	`HTAÀπ_£tI¡îa˘ive
(
YES
);

61 i‡(!
c⁄vîãrs
Ëc⁄vîãr†
	`HTLi°_√w
();

62 i‡(!
å™s„r_ícodögs
Ëå™s„r_ícodög†
	`HTLi°_√w
();

63 i‡(!
c⁄ã¡_ícodögs
Ëc⁄ã¡_ícodög†
	`HTLi°_√w
();

66 
	`HTTøn•‹tInô
();

69 i‡(
¥ìm±ive
)

70 
	`HTPrŸocﬁPªem±iveInô
();

72 
	`HTPrŸocﬁInô
();

75 
	`HTBöd_öô
();

78 
	`HTNë_£tMaxSockë
(32);

81 i‡(
ˇche
Ë
	`HTCacheInô
(
NULL
, 20);

84 
	`HTNëInô
();

87 
	`HTAAInô
();

90 
	`HTProxy_gëEnvV¨
();

93 
	`HTC⁄vîãrInô
(
c⁄vîãrs
);

96 i‡(
HTMLP¨£r
Ë
	`HTMLInô
(
c⁄vîãrs
);

99 
	`HTF‹m©_£tC⁄vîsi⁄
(
c⁄vîãrs
);

102 
	`HTTøns„rEncodîInô
(
å™s„r_ícodögs
);

103 
	`HTF‹m©_£tTøns„rCodög
(
å™s„r_ícodögs
);

106 
	`HTC⁄ã¡EncodîInô
(
c⁄ã¡_ícodögs
);

107 i‡(
	`HTLi°_cou¡
(
c⁄ã¡_ícodögs
) > 0)

108 
	`HTF‹m©_£tC⁄ã¡Codög
(
c⁄ã¡_ícodögs
);

110 
	`HTLi°_dñëe
(
c⁄ã¡_ícodögs
);

111 
c⁄ã¡_ícodögs
 = 
NULL
;

115 
	`HTMIMEInô
();

118 
	`HTFûeInô
();

121 
	`HTIc⁄Inô
(
NULL
);

122 
	}
}

124 
PUBLIC
 
	$HTProfûe_√wClõ¡
 (c⁄° * 
AµName
, c⁄° * 
AµVîsi⁄
)

127 
	`˛õ¡_¥ofûe
(
AµName
, 
AµVîsi⁄
, 
NO
, 
YES
, NO);

130 
	`HTEvítInô
();

131 
	}
}

133 
PUBLIC
 
	$HTProfûe_√wHTMLClõ¡
 (c⁄° * 
AµName
, c⁄° * 
AµVîsi⁄
)

136 
	`˛õ¡_¥ofûe
(
AµName
, 
AµVîsi⁄
, 
NO
, 
YES
, YES);

139 
	`HTEvítInô
();

140 
	}
}

142 
PUBLIC
 
	$HTProfûe_√wPªem±iveClõ¡
 (c⁄° * 
AµName
,

143 c⁄° * 
AµVîsi⁄
)

146 
	`˛õ¡_¥ofûe
(
AµName
, 
AµVîsi⁄
, 
YES
, 
NO
, NO);

149 
	`HTEvítInô
();

151 
¥ìm±ive
 = 
YES
;

152 
	}
}

154 
PUBLIC
 
	$HTProfûe_√wNoCacheClõ¡
 (c⁄° * 
AµName
,

155 c⁄° * 
AµVîsi⁄
)

158 
	`˛õ¡_¥ofûe
(
AµName
, 
AµVîsi⁄
, 
NO
, NO, NO);

161 
	`HTEvítInô
();

162 
	}
}

164 
PUBLIC
 
	$HTProfûe_√wHTMLNoCacheClõ¡
 (c⁄° * 
AµName
,

165 c⁄° * 
AµVîsi⁄
)

168 
	`˛õ¡_¥ofûe
(
AµName
, 
AµVîsi⁄
, 
NO
, NO, 
YES
);

171 
	`HTEvítInô
();

172 
	}
}

174 
PRIVATE
 
	$robŸ_¥ofûe
 (c⁄° * 
AµName
, c⁄° * 
AµVîsi⁄
)

177 i‡(!
	`HTLib_isInôülized
()Ë
	`HTLibInô
(
AµName
, 
AµVîsi⁄
);

179 i‡(!
c⁄vîãrs
Ëc⁄vîãr†
	`HTLi°_√w
();

180 i‡(!
å™s„r_ícodögs
Ëå™s„r_ícodög†
	`HTLi°_√w
();

181 i‡(!
c⁄ã¡_ícodögs
Ëc⁄ã¡_ícodög†
	`HTLi°_√w
();

184 
	`HTTøn•‹tInô
();

187 
	`HTPrŸocﬁInô
();

190 
	`HTBöd_öô
();

193 
	`HTNë_£tMaxSockë
(32);

196 
	`HTNë_addBef‹e
(
HTRuÀFûãr
, 
NULL
, NULL, 
HT_FILTER_MIDDLE
);

197 
	`HTNë_addBef‹e
(
HTProxyFûãr
, 
NULL
, NULL, 
HT_FILTER_MIDDLE
);

198 
	`HTNë_addA·î
(
HTInfoFûãr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LATE
);

201 
	`HTProxy_gëEnvV¨
();

204 
	`HTC⁄vîãrInô
(
c⁄vîãrs
);

205 
	`HTMLInô
(
c⁄vîãrs
);

208 
	`HTF‹m©_£tC⁄vîsi⁄
(
c⁄vîãrs
);

211 
	`HTTøns„rEncodîInô
(
å™s„r_ícodögs
);

212 
	`HTF‹m©_£tTøns„rCodög
(
å™s„r_ícodögs
);

215 
	`HTC⁄ã¡EncodîInô
(
c⁄ã¡_ícodögs
);

216 i‡(
	`HTLi°_cou¡
(
c⁄ã¡_ícodögs
) > 0)

217 
	`HTF‹m©_£tC⁄ã¡Codög
(
c⁄ã¡_ícodögs
);

219 
	`HTLi°_dñëe
(
c⁄ã¡_ícodögs
);

220 
c⁄ã¡_ícodögs
 = 
NULL
;

224 
	`HTMIMEInô
();

227 
	`HTFûeInô
();

230 
	`HTIc⁄Inô
(
NULL
);

233 i‡(
	`HTAÀπ_öãø˘ive
()) {

234 
	`HTAÀπ_add
(
HTEº‹_¥öt
, 
HT_A_MESSAGE
);

235 
	`HTAÀπ_add
(
HTC⁄fúm
, 
HT_A_CONFIRM
);

236 
	`HTAÀπ_add
(
HTProm±
, 
HT_A_PROMPT
);

237 
	`HTAÀπ_add
(
HTProm±Passw‹d
, 
HT_A_SECRET
);

238 
	`HTAÀπ_add
(
HTProm±U£∫ameAndPassw‹d
, 
HT_A_USER_PW
);

240 
	`HTAÀπ_£tI¡îa˘ive
(
YES
);

241 
	}
}

243 
PUBLIC
 
	$HTProfûe_√wRobŸ
 (c⁄° * 
AµName
, c⁄° * 
AµVîsi⁄
)

246 
	`HTEvítInô
();

247 
	`robŸ_¥ofûe
(
AµName
, 
AµVîsi⁄
);

250 
	`HTPrŸocﬁInô
();

251 
	}
}

253 
PUBLIC
 
	$HTProfûe_√wPªem±iveRobŸ
 (c⁄° * 
AµName
,

254 c⁄° * 
AµVîsi⁄
)

256 
	`robŸ_¥ofûe
(
AµName
, 
AµVîsi⁄
);

259 
	`HTPrŸocﬁPªem±iveInô
();

262 
¥ìm±ive
 = 
YES
;

263 
	}
}

	@Library/src/HTProfil.h

49 #i‚de‡
HTPROF_H


50 
	#HTPROF_H


	)

51 
	~"WWWLib.h
"

52 
	~"WWWInô.h
"

71 
HTProfûe_√wClõ¡
 (

72 c⁄° * 
AµName
,

73 c⁄° * 
AµVîsi⁄
);

84 
HTProfûe_√wHTMLClõ¡
 (

85 c⁄° * 
AµName
,

86 c⁄° * 
AµVîsi⁄
);

96 
HTProfûe_√wNoCacheClõ¡
 (

97 c⁄° * 
AµName
,

98 c⁄° * 
AµVîsi⁄
);

109 
HTProfûe_√wHTMLNoCacheClõ¡
 (

110 c⁄° * 
AµName
,

111 c⁄° * 
AµVîsi⁄
);

126 
HTProfûe_√wPªem±iveClõ¡
 (

127 c⁄° * 
AµName
,

128 c⁄° * 
AµVîsi⁄
);

141 
HTProfûe_√wRobŸ
 (

142 c⁄° * 
AµName
,

143 c⁄° * 
AµVîsi⁄
);

155 
HTProfûe_√wPªem±iveRobŸ
 (

156 c⁄° * 
AµName
,

157 c⁄° * 
AµVîsi⁄
);

171 
HTProfûe_dñëe
 ();

	@Library/src/HTProt.c

14 
	~"wwwsys.h
"

15 
	~"HTUtûs.h
"

16 
	~"HTSåög.h
"

17 
	~"HTP¨£.h
"

18 
	~"HTSåög.h
"

19 
	~"HTTøns.h
"

20 
	~"HTPrŸ.h
"

23 
	s_HTPrŸocﬁ
 {

24 * 
	m«me
;

25 * 
	må™•‹t
;

26 
HTPrŸocﬁId
 
	mid
;

27 
BOOL
 
	m¥ìm±ive
;

28 
HTPrŸCÆlback
 * 
	m˛õ¡
;

29 
HTPrŸCÆlback
 * 
	m£rvî
;

32 
PRIVATE
 
HTLi°
 * 
	g¥Ÿocﬁs
 = 
NULL
;

41 
PUBLIC
 
BOOL
 
	$HTPrŸocﬁ_add
 (c⁄° * 
«me
,

42 c⁄° * 
å™•‹t
,

43 
HTPrŸocﬁId
 
¥ŸocﬁId
,

44 
BOOL
 
¥ìm±ive
,

45 
HTPrŸCÆlback
 * 
˛õ¡
,

46 
HTPrŸCÆlback
 * 
£rvî
)

48 i‡(
«me
 && (
˛õ¡
 || 
£rvî
)) {

49 
HTPrŸocﬁ
 *
√wPrŸ
;

50 i‡((
√wPrŸ
=(
HTPrŸocﬁ
 *Ë
	`HT_CALLOC
(1, (HTPrŸocﬁ))Ë=
NULL
)

51 
	`HT_OUTOFMEM
("HTProtocol_add");

52 
	`SåAŒocC›y
(
√wPrŸ
->
«me
,Çame);

54 *
±r
 = 
√wPrŸ
->
«me
;

55 (*
±r
 = 
	`TOLOWER
(*ptr)))Ötr++;

57 
	`SåAŒocC›y
(
√wPrŸ
->
å™•‹t
,Åransport);

59 *
±r
 = 
√wPrŸ
->
å™•‹t
;

60 (*
±r
 = 
	`TOLOWER
(*ptr)))Ötr++;

62 
√wPrŸ
->
id
 = 
¥ŸocﬁId
;

63 
√wPrŸ
->
¥ìm±ive
 =Öreemptive;

64 
√wPrŸ
->
˛õ¡
 = client;

65 
√wPrŸ
->
£rvî
 = server;

66 i‡(!
¥Ÿocﬁs
Ë¥Ÿocﬁ†
	`HTLi°_√w
();

67 
	`HTTRACE
(
CORE_TRACE
, "PrŸocﬁ.... Addög `%s'\n" 
_
 
«me
);

68  
	`HTLi°_addObje˘
(
¥Ÿocﬁs
, (*Ë
√wPrŸ
);

70  
NO
;

71 
	}
}

76 
PUBLIC
 
BOOL
 
	$HTPrŸocﬁ_dñëe
 (c⁄° * 
«me
)

78 i‡(
¥Ÿocﬁs
) {

79 
HTLi°
 *
cur
 = 
¥Ÿocﬁs
;

80 
HTPrŸocﬁ
 *
¥es
;

81 (
¥es
 = (
HTPrŸocﬁ
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

82 i‡(!
	`°rcmp
(
¥es
->
«me
,Çame)) {

83 
BOOL
 
°©us
 = 
	`HTLi°_ªmoveObje˘
(
¥Ÿocﬁs
, (*Ë
¥es
);

84 
	`HT_FREE
(
¥es
->
«me
);

85 
	`HT_FREE
(
¥es
->
å™•‹t
);

86 
	`HT_FREE
(
¥es
);

87  
°©us
;

91  
NO
;

92 
	}
}

97 
PUBLIC
 
HTPrŸCÆlback
 * 
	$HTPrŸocﬁ_˛õ¡
 (
HTPrŸocﬁ
 * 
¥Ÿocﬁ
)

99  
¥Ÿocﬁ
 ?ÖrŸocﬁ->
˛õ¡
 : 
NULL
;

100 
	}
}

105 
PUBLIC
 
HTPrŸCÆlback
 * 
	$HTPrŸocﬁ_£rvî
 (
HTPrŸocﬁ
 * 
¥Ÿocﬁ
)

107  
¥Ÿocﬁ
 ?ÖrŸocﬁ->
£rvî
 : 
NULL
;

108 
	}
}

113 
PUBLIC
 
HTPrŸocﬁId
 
	$HTPrŸocﬁ_id
 (
HTPrŸocﬁ
 * 
¥Ÿocﬁ
)

115  
¥Ÿocﬁ
 ?ÖrŸocﬁ->
id
 : 0;

116 
	}
}

121 
PUBLIC
 
BOOL
 
	$HTPrŸocﬁ_¥ìm±ive
 (
HTPrŸocﬁ
 * 
¥Ÿocﬁ
)

123  
¥Ÿocﬁ
 ?ÖrŸocﬁ->
¥ìm±ive
 : 
NO
;

124 
	}
}

130 
PUBLIC
 
BOOL
 
	$HTPrŸocﬁ_dñëeAŒ
 ()

132 i‡(
¥Ÿocﬁs
) {

133 
HTLi°
 *
cur
 = 
¥Ÿocﬁs
;

134 
HTPrŸocﬁ
 *
¥es
;

135 (
¥es
 = (
HTPrŸocﬁ
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

136 
	`HT_FREE
(
¥es
->
«me
);

137 
	`HT_FREE
(
¥es
->
å™•‹t
);

138 
	`HT_FREE
(
¥es
);

140 
	`HTLi°_dñëe
(
¥Ÿocﬁs
);

141 
¥Ÿocﬁs
 = 
NULL
;

142  
YES
;

144  
NO
;

145 
	}
}

151 
PUBLIC
 
HTPrŸocﬁ
 * 
	$HTPrŸocﬁ_föd
 (
HTReque°
 * 
ªque°
, c⁄° * 
ac˚ss
)

153 i‡(
ac˚ss
) {

154 
HTLi°
 * 
cur
 = 
¥Ÿocﬁs
;

155 
HTPrŸocﬁ
 * 
¥es
;

156 i‡(
cur
) {

157 (
¥es
 = (
HTPrŸocﬁ
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

158 i‡(!
	`°rcmp
(
¥es
->
«me
, 
ac˚ss
)) Öres;

161 i‡(
ªque°
)

162 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_CLASS
, (*Ë
ac˚ss
,

163 (Ë
	`°æí
(
ac˚ss
), "HTProtocol_find");

165  
NULL
;

166 
	}
}

171 
PUBLIC
 
BOOL
 
	$HTPrŸocﬁ_£tTøn•‹t
 (
HTPrŸocﬁ
 * 
¥Ÿocﬁ
,

172 c⁄° * 
å™•‹t
)

174 i‡(
¥Ÿocﬁ
 && 
å™•‹t
) {

175 
	`SåAŒocC›y
(
¥Ÿocﬁ
->
å™•‹t
,Åransport);

177 *
±r
 = 
¥Ÿocﬁ
->
å™•‹t
;

178 (*
±r
 = 
	`TOLOWER
(*ptr)))Ötr++;

180  
YES
;

182  
NO
;

183 
	}
}

185 
PUBLIC
 c⁄° * 
	$HTPrŸocﬁ_å™•‹t
 (
HTPrŸocﬁ
 * 
¥Ÿocﬁ
)

187  (
¥Ÿocﬁ
 ?ÖrŸocﬁ->
å™•‹t
 : 
NULL
);

188 
	}
}

190 
PUBLIC
 c⁄° * 
	$HTPrŸocﬁ_«me
 (
HTPrŸocﬁ
 * 
¥Ÿocﬁ
)

192  (
¥Ÿocﬁ
 ?ÖrŸocﬁ->
«me
 : 
NULL
);

193 
	}
}

	@Library/src/HTProt.h

54 #i‚de‡
HTPROT_H


55 
	#HTPROT_H


	)

57 
_HTPrŸocﬁ
 
	tHTPrŸocﬁ
;

58 
u_sh‹t
 
	tHTPrŸocﬁId
;

60 
	~"HTReq.h
"

61 
	~"HTAnch‹.h
"

62 
	~"HTEvít.h
"

63 
	~"HTTøns.h
"

81 
	tHTPrŸCÆlback
 (
	tSOCKET
, 
	tHTReque°
 *);

83 
BOOL
 
HTPrŸocﬁ_add
 (c⁄° * 
«me
,

84 c⁄° * 
å™•‹t
,

85 
HTPrŸocﬁId
 
p‹t
,

86 
BOOL
 
¥ìm±ive
,

87 
HTPrŸCÆlback
 * 
˛õ¡
,

88 
HTPrŸCÆlback
 * 
£rvî
);

96 
BOOL
 
HTPrŸocﬁ_dñëe
 (c⁄° * 
«me
);

103 
BOOL
 
HTPrŸocﬁ_dñëeAŒ
 ();

114 
HTPrŸocﬁ
 * 
HTPrŸocﬁ_föd
 (
HTReque°
 * 
ªque°
, c⁄° * 
ac˚ss
);

122 
HTPrŸCÆlback
 * 
HTPrŸocﬁ_˛õ¡
 (
HTPrŸocﬁ
 * 
¥Ÿocﬁ
);

123 
HTPrŸCÆlback
 * 
HTPrŸocﬁ_£rvî
 (
HTPrŸocﬁ
 * 
¥Ÿocﬁ
);

132 
HTPrŸocﬁId
 
HTPrŸocﬁ_id
 (
HTPrŸocﬁ
 * 
¥Ÿocﬁ
);

140 c⁄° * 
HTPrŸocﬁ_«me
 (
HTPrŸocﬁ
 * 
¥Ÿocﬁ
);

148 
BOOL
 
HTPrŸocﬁ_¥ìm±ive
 (
HTPrŸocﬁ
 * 
¥Ÿocﬁ
);

156 
BOOL
 
HTPrŸocﬁ_£tTøn•‹t
 (
HTPrŸocﬁ
 * 
¥Ÿoccﬁ
,

157 c⁄° * 
å™•‹t
);

158 c⁄° * 
HTPrŸocﬁ_å™•‹t
 (
HTPrŸocﬁ
 * 
¥Ÿocﬁ
);

	@Library/src/HTProxy.c

19 #i‡!
deföed
(
HT_DIRECT_WAIS
Ë&& !deföed(
HT_DEFAULT_WAIS_GATEWAY
)

20 
	#HT_DEFAULT_WAIS_GATEWAY
 "hâp://www.w3.‹g:8001/"

	)

24 
	~"wwwsys.h
"

25 
	~"WWWUtû.h
"

26 
	~"WWWC‹e.h
"

27 
	~"WWWHTTP.h
"

28 
	~"WWWAµ.h
"

29 
	~"HTProxy.h
"

33 
	s_HTProxy
 {

34 * 
	mac˚ss
;

35 * 
	muæ
;

36 #ifde‡
HT_POSIX_REGEX


37 
ªgex_t
 * 
	mªgex
;

39 } 
	tHTProxy
;

41 
	s_HTHo°li°
 {

42 * 
	mac˚ss
;

43 * 
	mho°
;

44 
	mp‹t
;

45 #ifde‡
HT_POSIX_REGEX


46 
ªgex_t
 * 
	mªgex
;

48 } 
	tHTHo°Li°
;

50 
PRIVATE
 
HTLi°
 * 
	g¥oxõs
 = 
NULL
;

51 
PRIVATE
 
HTLi°
 * 
	gg©eways
 = 
NULL
;

52 
PRIVATE
 
HTLi°
 * 
	gn›roxy
 = 
NULL
;

53 
PRIVATE
 
	gn›roxy_is_⁄ly¥oxy
 = 0;

56 
PRIVATE
 
HTLi°
 * 
	g⁄ly¥oxy
 = 
NULL
;

61 #ifde‡
HT_POSIX_REGEX


62 
PRIVATE
 * 
	$gë_ªgex_îr‹
 (
îrcode
, 
ªgex_t
 * 
compûed
)

64 
size_t
 
Àngth
 = 
	`ªgîr‹
 (
îrcode
, 
compûed
, 
NULL
, 0);

65 * 
°r
 = 
NULL
;

66 i‡((
°r
 = (*Ë
	`HT_MALLOC
(
Àngth
+1)Ë=
NULL
)

67 
	`HT_OUTOFMEM
("get_regex_error");

68 (Ë
	`ªgîr‹
 (
îrcode
, 
compûed
, 
°r
, 
Àngth
);

69  
°r
;

70 
	}
}

72 
PRIVATE
 
ªgex_t
 * 
	$gë_ªgex_t
 (c⁄° * 
ªgex_°r
, 
cÊags
)

74 
ªgex_t
 * 
ªgex
 = 
NULL
;

75 i‡(
ªgex_°r
 && *regex_str) {

76 
°©us
;

77 i‡((
ªgex
 = (
ªgex_t
 *Ë
	`HT_CALLOC
(1, ‘egex_t))Ë=
NULL
)

78 
	`HT_OUTOFMEM
("get_regex_t");

79 i‡((
°©us
 = 
	`ªgcomp
(
ªgex
, 
ªgex_°r
, 
cÊags
))) {

80 * 
îr_msg
 = 
	`gë_ªgex_îr‹
(
°©us
, 
ªgex
);

81 
	`HTTRACE
(
PROT_TRACE
, "HTProxy..... Reguœ∏ex¥essi⁄Éº‹: %s\n" 
_
 
îr_msg
);

82 
	`HT_FREE
(
îr_msg
);

83 
	`HT_FREE
(
ªgex
);

86  
ªgex
;

87 
	}
}

93 
PRIVATE
 
BOOL
 
	$add_obje˘
 (
HTLi°
 * 
li°
, c⁄° * 
ac˚ss
, c⁄° * 
uæ
,

94 
BOOL
 
ªgex
, 
ªgex_Êags
)

96 
HTProxy
 *
me
;

97 i‡(!
li°
 || !
ac˚ss
 || !
uæ
 || !*url)

98  
NO
;

99 i‡((
me
 = (
HTProxy
 *Ë
	`HT_CALLOC
(1, (HTProxy))Ë=
NULL
)

100 
	`HT_OUTOFMEM
("add_object");

101 
	`SåAŒocC›y
(
me
->
ac˚ss
,áccess);

103 #ifde‡
HT_POSIX_REGEX


109 i‡(
ªgex
) {

110 
me
->
ªgex
 = 
	`gë_ªgex_t
(
ac˚ss
,

111 
ªgex_Êags
 < 0 ?

112 
W3C_DEFAULT_REGEX_FLAGS
 : 
ªgex_Êags
);

116 *
±r
 = 
me
->
ac˚ss
;

117 (*
±r
 = 
	`TOLOWER
(*ptr)))Ötr++;

120 
me
->
uæ
 = 
	`HTP¨£
(uæ, "", 
PARSE_ACCESS
+
PARSE_HOST
+
PARSE_PUNCTUATION
);

121 i‡(*(
me
->
uæ
+
	`°æí
(me->url)-1) != '/')

122 
	`SåAŒocC©
(
me
->
uæ
, "/");

123 
me
->
uæ
 = 
	`HTSim∂ify
(&me->url);

127 
HTLi°
 *
cur
 = 
li°
;

128 
HTProxy
 *
¥es
;

129 (
¥es
 = (
HTProxy
 *Ë
	`HTLi°_√xtObje˘
(
cur
)Ë!
NULL
) {

130 i‡(!
	`°rcmp
(
¥es
->
ac˚ss
, 
me
->access))

133 i‡(
¥es
) {

134 
	`HTTRACE
(
PROT_TRACE
, "HTProxy.....Ñïœcög f‹ `%s\'ác˚s†%s\n" 
_


135 
me
->
uæ
 
_
 me->
ac˚ss
);

136 
	`HT_FREE
(
¥es
->
ac˚ss
);

137 
	`HT_FREE
(
¥es
->
uæ
);

138 #ifde‡
HT_POSIX_REGEX


139 i‡(
¥es
->
ªgex
Ë
	`ªg‰ì
(pres->regex);

141 
	`HTLi°_ªmoveObje˘
(
li°
, (*Ë
¥es
);

142 
	`HT_FREE
(
¥es
);

144 
	`HTTRACE
(
PROT_TRACE
, "HTProxy.....áddög f‹ `%s\'ác˚s†%s\n" 
_


145 
me
->
uæ
 
_
 me->
ac˚ss
);

146 
	`HTLi°_addObje˘
(
li°
, (*Ë
me
);

148  
YES
;

149 
	}
}

151 
PRIVATE
 
BOOL
 
	$ªmove_ÆlObje˘s
 (
HTLi°
 * 
li°
)

153 i‡(
li°
) {

154 
HTLi°
 *
cur
 = 
li°
;

155 
HTProxy
 *
¥es
;

156 (
¥es
 = (
HTProxy
 *Ë
	`HTLi°_√xtObje˘
(
cur
)Ë!
NULL
) {

157 
	`HT_FREE
(
¥es
->
ac˚ss
);

158 
	`HT_FREE
(
¥es
->
uæ
);

159 #ifde‡
HT_POSIX_REGEX


160 i‡(
¥es
->
ªgex
Ë
	`ªg‰ì
(pres->regex);

162 
	`HT_FREE
(
¥es
);

164  
YES
;

166  
NO
;

167 
	}
}

173 
PRIVATE
 
BOOL
 
	$add_ho°«me
 (
HTLi°
 * 
li°
, c⁄° * 
ho°
,

174 c⁄° * 
ac˚ss
, 
p‹t
,

175 
BOOL
 
ªgex
, 
ªgex_Êags
)

177 
HTHo°Li°
 *
me
;

178 i‡(!
li°
 || !
ho°
 || !*host)

179  
NO
;

180 i‡((
me
 = (
HTHo°Li°
 *Ë
	`HT_CALLOC
(1, (HTHo°Li°))Ë=
NULL
)

181 
	`HT_OUTOFMEM
("add_hostname");

182 #ifde‡
HT_POSIX_REGEX


183 i‡(
ªgex
)

184 
me
->
ªgex
 = 
	`gë_ªgex_t
(
ho°
,

185 
ªgex_Êags
 < 0 ?

186 
W3C_DEFAULT_REGEX_FLAGS
 : 
ªgex_Êags
);

189 i‡(
ac˚ss
) {

190 *
±r
;

191 
	`SåAŒocC›y
(
me
->
ac˚ss
,áccess);

192 
±r
 = 
me
->
ac˚ss
;

193 (*
±r
 = 
	`TOLOWER
(*ptr)))Ötr++;

195 
	`SåAŒocC›y
(
me
->
ho°
, host);

197 *
±r
 = 
me
->
ho°
;

198 (*
±r
 = 
	`TOLOWER
(*ptr)))Ötr++;

200 
me
->
p‹t
 =Öort;

201 
	`HTTRACE
(
PROT_TRACE
, "HTHo°Li°..áddög `%s\'Åÿli°\n" 
_
 
me
->
ho°
);

202 
	`HTLi°_addObje˘
(
li°
, (*Ë
me
);

203  
YES
;

204 
	}
}

206 
PRIVATE
 
BOOL
 
	$ªmove_AŒHo°«mes
 (
HTLi°
 * 
li°
)

208 i‡(
li°
) {

209 
HTLi°
 *
cur
 = 
li°
;

210 
HTHo°Li°
 *
¥es
;

211 (
¥es
 = (
HTHo°Li°
 *Ë
	`HTLi°_√xtObje˘
(
cur
)Ë!
NULL
) {

212 
	`HT_FREE
(
¥es
->
ac˚ss
);

213 
	`HT_FREE
(
¥es
->
ho°
);

214 #ifde‡
HT_POSIX_REGEX


215 i‡(
¥es
->
ªgex
Ë
	`ªg‰ì
(pres->regex);

217 
	`HT_FREE
(
¥es
);

219  
YES
;

221  
NO
;

222 
	}
}

232 
PUBLIC
 
BOOL
 
	$HTProxy_add
 (c⁄° * 
ac˚ss
, c⁄° * 
¥oxy
)

239 i‡(!
¥oxõs
) {

240 
¥oxõs
 = 
	`HTLi°_√w
();

241 
	`HTNë_addBef‹e
(
HTAA_¥oxyBef‹eFûãr
, 
NULL
, NULL,

242 
HT_FILTER_MIDDLE
);

243 
	`HTNë_addA·î
(
HTAuthFûãr
, 
NULL
, NULL,

244 
HT_NO_PROXY_ACCESS
, 
HT_FILTER_MIDDLE
);

245 
	`HTNë_addA·î
(
HTAuthFûãr
, 
NULL
, NULL,

246 
HT_PROXY_REAUTH
, 
HT_FILTER_MIDDLE
);

248  
	`add_obje˘
(
¥oxõs
, 
ac˚ss
, 
¥oxy
, 
NO
, -1);

249 
	}
}

259 
PUBLIC
 
BOOL
 
	$HTProxy_addRegex
 (c⁄° * 
ªgex
,

260 c⁄° * 
¥oxy
,

261 
ªgex_Êags
)

268 i‡(!
¥oxõs
) {

269 
¥oxõs
 = 
	`HTLi°_√w
();

270 
	`HTNë_addBef‹e
(
HTAA_¥oxyBef‹eFûãr
, 
NULL
, NULL,

271 
HT_FILTER_MIDDLE
);

272 
	`HTNë_addA·î
(
HTAuthFûãr
, 
NULL
, NULL,

273 
HT_NO_PROXY_ACCESS
, 
HT_FILTER_MIDDLE
);

274 
	`HTNë_addA·î
(
HTAuthFûãr
, 
NULL
, NULL,

275 
HT_PROXY_REAUTH
, 
HT_FILTER_MIDDLE
);

277 #ifde‡
HT_POSIX_REGEX


278  
	`add_obje˘
(
¥oxõs
, 
ªgex
, 
¥oxy
, 
YES
, 
ªgex_Êags
);

280  
	`add_obje˘
(
¥oxõs
, 
ªgex
, 
¥oxy
, 
NO
, -1);

282 
	}
}

287 
PUBLIC
 
BOOL
 
	$HTProxy_dñëeAŒ
 ()

289 i‡(
	`ªmove_ÆlObje˘s
(
¥oxõs
)) {

290 
	`HTLi°_dñëe
(
¥oxõs
);

297 
	`HTNë_dñëeBef‹e
(
HTAA_¥oxyBef‹eFûãr
);

298 
	`HTNë_dñëeA·îSètus
(
HT_NO_PROXY_ACCESS
);

299 
	`HTNë_dñëeA·îSètus
(
HT_PROXY_REAUTH
);

301 
¥oxõs
 = 
NULL
;

302  
YES
;

304  
NO
;

305 
	}
}

315 
PUBLIC
 
BOOL
 
	$HTG©eway_add
 (c⁄° * 
ac˚ss
, c⁄° * 
g©e
)

317 i‡(!
g©eways
)

318 
g©eways
 = 
	`HTLi°_√w
();

319  
	`add_obje˘
(
g©eways
, 
ac˚ss
, 
g©e
, 
NO
, -1);

320 
	}
}

325 
PUBLIC
 
BOOL
 
	$HTG©eway_dñëeAŒ
 ()

327 i‡(
	`ªmove_ÆlObje˘s
(
g©eways
)) {

328 
	`HTLi°_dñëe
(
g©eways
);

329 
g©eways
 = 
NULL
;

330  
YES
;

332  
NO
;

333 
	}
}

345 
PUBLIC
 
BOOL
 
	$HTNoProxy_add
 (c⁄° * 
ho°
, c⁄° * 
ac˚ss
,

346 
p‹t
)

348 i‡(!
n›roxy
)

349 
n›roxy
 = 
	`HTLi°_√w
();

350  
	`add_ho°«me
(
n›roxy
, 
ho°
, 
ac˚ss
, 
p‹t
, 
NO
, -1);

351 
	}
}

359 
PUBLIC
 
BOOL
 
	$HTNoProxy_addRegex
 (c⁄° * 
ªgex
, 
ªgex_Êags
)

361 i‡(!
n›roxy
)

362 
n›roxy
 = 
	`HTLi°_√w
();

363 #ifde‡
HT_POSIX_REGEX


364  
	`add_ho°«me
(
n›roxy
, 
ªgex
, 
NULL
, 0, 
YES
, 
ªgex_Êags
);

366  
	`add_ho°«me
(
n›roxy
, 
ªgex
, 
NULL
, 0, 
NO
, -1);

368 
	}
}

374 
PUBLIC
 
BOOL
 
	$HTNoProxy_dñëeAŒ
 ()

376 i‡(
	`ªmove_AŒHo°«mes
(
n›roxy
)) {

377 
	`HTLi°_dñëe
(
n›roxy
);

378 
n›roxy
 = 
NULL
;

379  
YES
;

381  
NO
;

382 
	}
}

388 
PUBLIC
 
	$HTProxy_NoProxyIsO∆yProxy
 ()

390  
n›roxy_is_⁄ly¥oxy
;

391 
	}
}

397 
PUBLIC
 
	$HTProxy_£tNoProxyIsO∆yProxy
 (
vÆue
)

399 
n›roxy_is_⁄ly¥oxy
 = 
vÆue
;

400 
	}
}

412 
PUBLIC
 * 
	$HTProxy_föd
 (c⁄° * 
uæ
)

414 * 
ac˚ss
;

415 * 
¥oxy
 = 
NULL
;

416 
no_¥oxy_found
 = 0;

418 i‡(!
uæ
 || !
¥oxõs
)

419  
NULL
;

420 
ac˚ss
 = 
	`HTP¨£
(
uæ
, "", 
PARSE_ACCESS
);

423 i‡(
n›roxy
) {

424 *
ho°
 = 
	`HTP¨£
(
uæ
, "", 
PARSE_HOST
);

425 *
±r
;

426 
p‹t
=0;

427 i‡((
±r
 = 
	`°rchr
(
ho°
, ':')Ë!
NULL
) {

428 *
±r
++ = '\0';

429 i‡(*
±r
Ë
p‹t
 = (Ë
	`©oi
(ptr);

431 i‡(*
ho°
) {

432 
HTLi°
 *
cur
 = 
n›roxy
;

433 
HTHo°Li°
 *
¥es
;

434 (
¥es
 = (
HTHo°Li°
 *Ë
	`HTLi°_√xtObje˘
(
cur
)Ë!
NULL
) {

435 #ifde‡
HT_POSIX_REGEX


436 i‡(
¥es
->
ªgex
) {

437 
BOOL
 
m©ch
 = 
	`ªgexec
(
¥es
->
ªgex
, 
uæ
, 0, 
NULL
, 0Ë? 
NO
 : 
YES
;

438 i‡(
m©ch
) {

439 
	`HTTRACE
(
PROT_TRACE
, "GëProxy.... Nÿ¥oxy dúe˘ivêfound: `%s\'\n" 
_
 
¥es
->
ho°
);

440 
no_¥oxy_found
 = 1;

445 i‡(!
¥es
->
ac˚ss
 ||

446 (
¥es
->
ac˚ss
 && !
	`°rcmp
(pres->access,áccess))) {

447 i‡((
¥es
->
p‹t
 == 0) || (pres->port ==Öort)) {

448 *
≈
 = 
¥es
->
ho°
+
	`°æí
(pres->host);

449 *
hp
 = 
ho°
+
	`°æí
(host);

450 
≈
>=
¥es
->
ho°
 && 
hp
>=host && (*np--==*hp--));

451 i‡(
≈
==
¥es
->
ho°
-1 && (
hp
==host-1 || *hp=='.')) {

452 
	`HTTRACE
(
PROT_TRACE
, "GëProxy.... Nÿ¥oxy dúe˘ivêfound: `%s\'\n" 
_
 
¥es
->
ho°
);

453 
no_¥oxy_found
 = 1;

460 
	`HT_FREE
(
ho°
);

463 i‡((
no_¥oxy_found
 && !
n›roxy_is_⁄ly¥oxy
)

464 || (!
no_¥oxy_found
 && 
n›roxy_is_⁄ly¥oxy
)) {

465 
	`HT_FREE
(
ac˚ss
);

466  
NULL
;

471 
HTLi°
 *
cur
 = 
¥oxõs
;

472 
HTProxy
 *
¥es
;

473 (
¥es
 = (
HTProxy
 *Ë
	`HTLi°_√xtObje˘
(
cur
)Ë!
NULL
) {

474 #ifde‡
HT_POSIX_REGEX


475 i‡(
¥es
->
ªgex
) {

476 
BOOL
 
m©ch
 = 
	`ªgexec
(
¥es
->
ªgex
, 
uæ
, 0, 
NULL
, 0Ë? 
NO
 : 
YES
;

477 i‡(
m©ch
) {

478 
	`SåAŒocC›y
(
¥oxy
, 
¥es
->
uæ
);

479 
	`HTTRACE
(
PROT_TRACE
, "GëProxy.... Found: `%s\'\n" 
_
 
¥es
->
uæ
);

484 i‡(!
	`°rcmp
(
¥es
->
ac˚ss
,áccess)) {

485 
	`SåAŒocC›y
(
¥oxy
, 
¥es
->
uæ
);

486 
	`HTTRACE
(
PROT_TRACE
, "GëProxy.... Found: `%s\'\n" 
_
 
¥es
->
uæ
);

491 
	`HT_FREE
(
ac˚ss
);

492  
¥oxy
;

493 
	}
}

504 
PUBLIC
 * 
	$HTG©eway_föd
 (c⁄° * 
uæ
)

506 * 
ac˚ss
;

507 * 
g©eway
 = 
NULL
;

508 i‡(!
uæ
 || !
g©eways
)

509  
NULL
;

510 
ac˚ss
 = 
	`HTP¨£
(
uæ
, "", 
PARSE_ACCESS
);

514 
HTLi°
 *
cur
 = 
g©eways
;

515 
HTProxy
 *
¥es
;

516 (
¥es
 = (
HTProxy
 *Ë
	`HTLi°_√xtObje˘
(
cur
)Ë!
NULL
) {

517 i‡(!
	`°rcmp
(
¥es
->
ac˚ss
,áccess)) {

518 
	`SåAŒocC›y
(
g©eway
, 
¥es
->
uæ
);

519 
	`HTTRACE
(
PROT_TRACE
, "GëG©eway.. Found: `%s\'\n" 
_
 
¥es
->
uæ
);

524 
	`HT_FREE
(
ac˚ss
);

525  
g©eway
;

526 
	}
}

534 
PUBLIC
 
	$HTProxy_gëEnvV¨
 ()

536 
buf
[80];

537 c⁄° *
ac˚s¶i°
[] = {

543 
NULL


545 c⁄° **
ac˚ss
 = 
ac˚s¶i°
;

546 
	`HTTRACE
(
PROT_TRACE
, "Proxy....... Looking forÉnvironment variables\n");

547 *
ac˚ss
) {

548 
BOOL
 
found
 = 
NO
;

549 *
g©eway
=
NULL
;

550 *
¥oxy
=
NULL
;

553 i‡(
found
 =
NO
) {

554 
	`°r˝y
(
buf
, *
ac˚ss
);

555 
	`°rˇt
(
buf
, "_proxy");

556 i‡((
¥oxy
 = (*Ë
	`gëív
(
buf
)) && *proxy) {

557 
	`HTProxy_add
(*
ac˚ss
, 
¥oxy
);

558 
found
 = 
YES
;

562 i‡(
found
 =
NO
) {

563 * 
up
 = 
buf
;

564 (*
up
 = 
	`TOUPPER
(*up))) up++;

565 i‡((
¥oxy
 = (*Ë
	`gëív
(
buf
)) && *proxy) {

566 
	`HTProxy_add
(*
ac˚ss
, 
¥oxy
);

567 
found
 = 
YES
;

573 i‡(
found
 =
NO
) {

574 
	`°r˝y
(
buf
, "WWW_");

575 
	`°rˇt
(
buf
, *
ac˚ss
);

576 
	`°rˇt
(
buf
, "_GATEWAY");

577 i‡((
g©eway
 = (*Ë
	`gëív
(
buf
)) && *gateway) {

578 
	`HTG©eway_add
(*
ac˚ss
, 
g©eway
);

579 
found
 = 
YES
;

582 ++
ac˚ss
;

587 *
n›roxy
 = 
	`gëív
("no_proxy");

588 i‡(
n›roxy
 && *noproxy) {

589 *
°r
 = 
NULL
;

590 *
°Ωå
;

591 *
«me
;

592 
	`SåAŒocC›y
(
°r
, 
n›roxy
);

593 
°Ωå
 = 
°r
;

594 (
«me
 = 
	`HTNextFõld
(&
°Ωå
)Ë!
NULL
) {

595 *
p‹t°r
 = 
	`°rchr
(
«me
, ':');

596 
p‹t
=0;

597 i‡(
p‹t°r
) {

598 *
p‹t°r
++ = '\0';

599 i‡(*
p‹t°r
Ë
p‹t
 = (Ë
	`©oi
(portstr);

603 
	`HTNoProxy_add
(
«me
, 
NULL
, 
p‹t
);

605 
	`HT_FREE
(
°r
);

608 
	}
}

	@Library/src/HTProxy.h

33 #i‚de‡
HTPROXY_H


34 
	#HTPROXY_H


	)

36 
	~"HTLi°.h
"

50 
BOOL
 
HTProxy_add
 (c⁄° * 
ac˚ss
, c⁄° * 
¥oxy
);

66 
BOOL
 
HTProxy_addRegex
 (c⁄° * 
ªgex
,

67 c⁄° * 
¥oxy
,

68 
ªgex_Êags
);

76 
BOOL
 
HTProxy_dñëeAŒ
 ();

95 
BOOL
 
HTNoProxy_add
 (c⁄° * 
ho°
, c⁄° * 
ac˚ss
,

96 
p‹t
);

114 
BOOL
 
HTNoProxy_addRegex
 (c⁄° * 
ªgex
, 
ªgex_Êags
);

122 
BOOL
 
HTNoProxy_dñëeAŒ
 ();

136 
HTProxy_NoProxyIsO∆yProxy
 ();

137 
HTProxy_£tNoProxyIsO∆yProxy
 (
vÆue
);

150 * 
HTProxy_föd
 (c⁄° * 
uæ
);

164 
BOOL
 
HTG©eway_add
 (c⁄° * 
ac˚ss
, c⁄° * 
g©e
);

165 
BOOL
 
HTG©eway_dñëeAŒ
 ();

180 * 
HTG©eway_föd
 (c⁄° * 
uæ
);

192 
HTProxy_gëEnvV¨
 ();

	@Library/src/HTRDF.c

23 
	~"WWWLib.h
"

24 
	~"WWWInô.h
"

25 
	~"WWWXML.h
"

26 
	~"HTRDF.h
"

28 
	s_HTSåóm
 {

29 c⁄° 
HTSåómCœss
 * 
	miß
;

30 
	m°©e
;

31 
HTReque°
 * 
	mªque°
;

32 
HTSåóm
 * 
	mèrgë
;

33 
HTRDF
 * 
	mrdÂ¨£r
;

36 
	#PUTC
(
t
,
c
Ë(*—)->
èrgë
->
iß
->
put_ch¨a˘î
)(—)->èrgë, (c))

	)

37 
	#PUTS
(
t
,
s
Ë(*—)->
èrgë
->
iß
->
put_°rög
)(—)->èrgë, (s))

	)

39 
	s_HTTrùÀ
 {

40 * 
	mm_sPªdiˇã
;

41 * 
	mm_sSubje˘
;

42 * 
	mm_sObje˘
;

45 
	s_HTEÀmít
 {

46 * 
	mm_sName
;

47 
HTAssocLi°
 * 
	mm_©åibuãs
;

48 
HTLi°
 * 
	mm_chûdªn
;

49 * 
	mm_sID
;

50 * 
	mm_sBagID
;

51 
HTLi°
 * 
	mm_vT¨gës
;

52 
BOOL
 
	mm_bD⁄e
;

53 * 
	mm_sPªfix
;

54 * 
	mm_sC⁄ã¡
;

57 
	s_HTRDFP¨£r
 {

58 
HTLi°
 * 
	mm_«me•a˚Sèck
;

59 
HTLi°
 * 
	mm_ñemítSèck
;

60 
HTLi°
 * 
	mm_lôîÆSèck
;

61 
HTEÀmít
 * 
	mm_roŸ
;

62 
HTLi°
 * 
	mm_åùÀs
;

63 * 
	mm_sSour˚
;

64 
HTLi°
 * 
	mm_vAŒNameS∑˚s
;

66 
BOOL
 
	mm_bCª©eBags
;

67 
BOOL
 
	mm_bFëchSchemas
;

69 
HTLi°
 * 
	mm_∑r£Ty≥Sèck
;

70 
HTLi°
 * 
	mm_∑r£EÀmítSèck
;

71 * 
	mm_sLôîÆ
;

73 
HTLi°
 * 
	mm_vResour˚s
;

74 
HTLi°
 * 
	mm_vResﬁveQueue
;

75 
HTHashèbÀ
 * 
	mm_hIDèbÀ
;

76 
	mm_iReifiˇti⁄Cou¡î
;

78 
HTSåóm
 * 
	mo°ªam
;

80 
HTTrùÀCÆlback_√w
 * 
	m√wTrùÀIn°™˚
;

81 * 
	måùÀC⁄ãxt
;

85 
PRIVATE
 
HTRDFCÆlback_√w
 * 
	gRDFIn°™˚
 = 
NULL
;

86 
PRIVATE
 * 
	gRDFIn°™˚C⁄ãxt
 = 
NULL
;

88 
PRIVATE
 * 
HTRDF_¥o˚ssC⁄èöî
 (
HTRDF
 *
me
, 
HTEÀmít
 *
e
);

89 
PRIVATE
 * 
HTRDF_¥o˚ssPªdiˇã
 (
HTRDF
 *
me
, 
HTEÀmít
 *
¥ediˇã
,

90 
HTEÀmít
 *
des¸ùti⁄
,

91 * 
sT¨gë
,

92 
BOOL
 
ªifiˇã
);

93 
PRIVATE
 
HTRDF_¥o˚ssLi°Iãm
 (
HTRDF
 *
me
,* 
sID
, 
HTEÀmít
 *
li°ôem
,

94 
iCou¡î
);

95 
PRIVATE
 
HTRDF_checkAâribuãs
 (
HTRDF
 *
me
,
HTEÀmít
 *
EÀmít
);

96 
PRIVATE
 
BOOL
 
HTRDF_ex∑ndAâribuãs
 (
HTRDF
 *
me
, 
HTEÀmít
 *
∑ª¡
, HTEÀmíà*
ñe
);

97 
PRIVATE
 * 
HTRDF_ªifiˇã
 (
HTRDF
 *
me
, * 
sPªdiˇã
, * 
sSubje˘
,

98 * 
sObje˘
, * 
sNodeID
);

105 
PRIVATE
 
	$addM¨kupSèπ
 (
HTRDF
 *
rdÂ
, c⁄° *
«me
, c⁄° **
©ts
)

107 
i
=0;

109 i‡(!
rdÂ
 || !
«me
) ;

111 
	`SåAŒocMC©
(&
rdÂ
->
m_sLôîÆ
, "<", 
«me
, 
NULL
);

113 
©ts
[
i
]) {

114 
	`SåAŒocMC©
(&
rdÂ
->
m_sLôîÆ
, " ", 
©ts
[
i
], "=\"",áâs[i+1], "\"", 
NULL
);

115 
i
+=2;

118 
	`SåAŒocC©
(
rdÂ
->
m_sLôîÆ
, ">");

119 
	}
}

125 
PRIVATE
 
	$addM¨kupEnd
 (
HTRDF
 *
rdÂ
, c⁄° *
«me
)

127 i‡(!
rdÂ
 || !
«me
) ;

129 
	`SåAŒocMC©
(&
rdÂ
->
m_sLôîÆ
, "</", 
«me
, ">", 
NULL
);

130 
	}
}

137 
PRIVATE
 
BOOL
 
	$HTLi°_c⁄èös
 (
HTLi°
 *
li°
, * 
s
)

139 
HTLi°
 *
cur
 = 
li°
;

140 * 
cs
 = 
NULL
;

141 (
cs
 = (*Ë
	`HTLi°_√xtObje˘
(
cur
))) {

142 i‡(!
	`°rcmp
(
cs
, 
s
)Ë 
YES
;

144  
NO
;

145 
	}
}

151 
PRIVATE
 * 
	$åim
 (*
s
)

153 *
p
 = 
NULL
, *
t
 = NULL;

154 
Àn
 = 
s
 ? 
	`°æí
(s) : -1;

155 i‡(
s
 && 
Àn
 > 0) {

156 
	`SåAŒocC›y
(
t
, 
s
);

157 
p
 = &(
s
[
Àn
-1]);

158 
p
!=
s
) {

159 i‡(!
	`is•a˚
(()(*
p
)))

161 
p
--;

163 
t
[()(
p
-
s
)+1] = '\0';

164 i‡(
	`is•a˚
((Ë
t
[()(
p
-
s
)]))

165 
t
[()(
p
-
s
)] = '\0';

167  
t
;

168 
	}
}

174 
PUBLIC
 
HTTrùÀ
 * 
	$HTTrùÀ_√w
 (* 
p
, * 
s
, * 
o
)

176 
HTTrùÀ
 * 
me
 = 
NULL
;

177 i‡(
p
 && 
s
 && 
o
) {

178 i‡((
me
 = (
HTTrùÀ
 *Ë
	`HT_CALLOC
(1, (HTTrùÀ))Ë=
NULL
)

179 
	`HT_OUTOFMEM
("HTTriple_new");

180 
	`SåAŒocC›y
(
me
->
m_sPªdiˇã
, 
p
);

181 
	`SåAŒocC›y
(
me
->
m_sSubje˘
, 
s
);

182 
	`SåAŒocC›y
(
me
->
m_sObje˘
, 
o
);

184  
me
;

185 
	}
}

187 
PUBLIC
 
BOOL
 
	$HTTrùÀ_dñëe
 (
HTTrùÀ
 * 
me
)

189 i‡(
me
) {

190 
	`HT_FREE
(
me
->
m_sPªdiˇã
);

191 
	`HT_FREE
(
me
->
m_sSubje˘
);

192 
	`HT_FREE
(
me
->
m_sObje˘
);

193 
	`HT_FREE
(
me
);

194  
YES
;

196  
NO
;

197 
	}
}

199 
PUBLIC
 
	$HTTrùÀ_¥öt
 (
HTTrùÀ
 * 
me
)

201 i‡(
me
)

202 
	`HTPröt
("TRIPLE(%s,%s,%s)\n", 
me
->
m_sPªdiˇã
, me->
m_sSubje˘
,

203 
me
->
m_sObje˘
);

204 
	}
}

206 
PUBLIC
 * 
	$HTTrùÀ_subje˘
 (
HTTrùÀ
 * 
me
)

208  
me
 ? me->
m_sSubje˘
 : 
NULL
;

209 
	}
}

211 
PUBLIC
 * 
	$HTTrùÀ_¥ediˇã
 (
HTTrùÀ
 * 
me
)

213  
me
 ? me->
m_sPªdiˇã
 : 
NULL
;

214 
	}
}

216 
PUBLIC
 * 
	$HTTrùÀ_obje˘
 (
HTTrùÀ
 * 
me
)

218  
me
 ? me->
m_sObje˘
 : 
NULL
;

219 
	}
}

225 
PUBLIC
 
HTEÀmít
 * 
	$HTEÀmít_√w
 (* 
sName
, 
HTAssocLi°
 * 
Æ
)

227 
HTEÀmít
 * 
me
 = 
NULL
;

228 i‡(
sName
) {

229 i‡((
me
 = (
HTEÀmít
 *Ë
	`HT_CALLOC
(1, (HTEÀmít))Ë=
NULL
)

230 
	`HT_OUTOFMEM
("HTElement_new");

231 
	`SåAŒocC›y
(
me
->
m_sName
, 
sName
);

232 
me
->
m_©åibuãs
 = 
Æ
 ?á»: 
	`HTAssocLi°_√w
();

233 
me
->
m_chûdªn
 = 
	`HTLi°_√w
();

235 
me
->
m_vT¨gës
 = 
	`HTLi°_√w
();

236 
me
->
m_bD⁄e
 = 
FALSE
;

238  
me
;

239 
	}
}

245 
PUBLIC
 
HTEÀmít
 * 
	$HTEÀmít_√w2
 (* 
sC⁄ã¡
)

247 
HTEÀmít
 * 
me
 = 
NULL
;

248 i‡(
sC⁄ã¡
) {

249 i‡((
me
 = (
HTEÀmít
 *Ë
	`HT_CALLOC
(1, (HTEÀmít))Ë=
NULL
)

250 
	`HT_OUTOFMEM
("HTElement_new2");

251 
	`SåAŒocMC›y
(&
me
->
m_sName
, "[DATA: ", 
sC⁄ã¡
, "]", 
NULL
);

252 
me
->
m_©åibuãs
 = 
NULL
;

253 
me
->
m_chûdªn
 = 
	`HTLi°_√w
();

255 
me
->
m_vT¨gës
 = 
	`HTLi°_√w
();

256 
me
->
m_bD⁄e
 = 
FALSE
;

257 
	`SåAŒocC›y
(
me
->
m_sC⁄ã¡
, 
sC⁄ã¡
);

259  
me
;

260 
	}
}

262 
PUBLIC
 
BOOL
 
	$HTEÀmít_addD©a
 (
HTEÀmít
 *
me
, * 
sC⁄ã¡
)

264 i‡(
me
 && 
sC⁄ã¡
) {

265 
l
 = 
	`°æí
(
me
->
m_sName
);

266 
	`SåAŒocC©
(
me
->
m_sC⁄ã¡
, 
sC⁄ã¡
);

267 
me
->
m_sName
[
l
-1]='\0';

268 
	`SåAŒocMC©
(&
me
->
m_sName
, 
sC⁄ã¡
, "]", 
NULL
);

269  
YES
;

271  
NO
;

272 
	}
}

274 
PUBLIC
 
BOOL
 
	$HTEÀmít_dñëe
 (
HTEÀmít
 * 
me
)

276 i‡(
me
) {

277 
	`HT_FREE
(
me
->
m_sName
);

278 i‡(
me
->
m_©åibuãs
Ë
	`HTAssocLi°_dñëe
(me->m_attributes);

279 i‡(
me
->
m_chûdªn
Ë
	`HTLi°_dñëe
(me->m_children);

280 
	`HT_FREE
(
me
->
m_sID
);

281 
	`HT_FREE
(
me
->
m_sBagID
);

282 i‡(
me
->
m_vT¨gës
Ë
	`HTLi°_dñëe
(me->m_vTargets);

283 
	`HT_FREE
(
me
->
m_sPªfix
);

284 
	`HT_FREE
(
me
->
m_sC⁄ã¡
);

285 
	`HT_FREE
(
me
);

286  
YES
;

288  
NO
;

289 
	}
}

291 
PUBLIC
 
BOOL
 
	$HTEÀmít_addChûd
 (
HTEÀmít
 * 
me
, HTEÀmíà* 
ñemít
)

293  (
me
 && 
ñemít
Ë? 
	`HTLi°_≠≥ndObje˘
(me->
m_chûdªn
,ÉÀmítË: 
NO
;

294 
	}
}

296 
PUBLIC
 
BOOL
 
	$HTEÀmít_addAâribuã
 (
HTEÀmít
 * 
me
, * 
sName
, * 
sVÆue
)

298  (
me
 && 
sName
 && 
sVÆue
) ?

299 
	`HTAssocLi°_addObje˘
(
me
->
m_©åibuãs
, 
sName
, 
sVÆue
Ë: 
NO
;

300 
	}
}

302 
PUBLIC
 
BOOL
 
	$HTEÀmít_ªmoveAâribuã
 (
HTEÀmít
 * 
me
, * 
sName
)

304  (
me
 && 
sName
Ë? 
	`HTAssocLi°_ªmoveObje˘
(me->
m_©åibuãs
, sNameË: 
NO
;

305 
	}
}

307 
PUBLIC
 * 
	$HTEÀmít_gëAâribuã
 (
HTEÀmít
 * 
me
, * 
sName
)

309  (
me
 && 
sName
Ë? 
	`HTAssocLi°_födObje˘Ca£SísôiveExa˘
(me->
m_©åibuãs
, sNameË: 
NULL
;

310 
	}
}

312 
PUBLIC
 * 
	$HTEÀmít_gëAâribuã2
 (
HTEÀmít
 * 
me
, * 
sName•a˚
, * 
sName
)

314 * 
fVÆue
 = 
NULL
;

315 * 
fName
 = 
NULL
;

316 i‡(
me
 && 
sName•a˚
 && 
sName
) {

317 
	`SåAŒocMC›y
(&
fName
, 
sName•a˚
, 
sName
, 
NULL
);

318 
fVÆue
 = 
	`HTAssocLi°_födObje˘Ca£SísôiveExa˘
(
me
->
m_©åibuãs
, 
fName
);

319 
	`HT_FREE
(
fName
);

321  
fVÆue
;

322 
	}
}

324 
PUBLIC
 
BOOL
 
	$HTEÀmít_addT¨gë
 (
HTEÀmít
 * 
me
, HTEÀmíà* 
ñemít
)

326  (
me
 && 
ñemít
Ë? 
	`HTLi°_addObje˘
(me->
m_vT¨gës
,ÉÀmítË: 
NO
;

327 
	}
}

329 
PUBLIC
 
HTEÀmít
 * 
	$HTEÀmít_èrgë
 (
HTEÀmít
 * 
me
)

331  
me
 ? (
HTEÀmít
 *Ë
	`HTLi°_œ°Obje˘
(me->
m_vT¨gës
Ë: 
NULL
;

332 
	}
}

334 
PUBLIC
 
BOOL
 
	$HTEÀmít_ö°™˚OfD©a
 (
HTEÀmít
 * 
me
)

336  (
me
 && me->
m_sC⁄ã¡
Ë? 
YES
 : 
NO
;

337 
	}
}

347 
PRIVATE
 
	$XML_°¨tEÀmít
 (* 
u£rD©a
,

348 c⁄° 
XML_Ch¨
 * 
«me
, c⁄° XML_Ch¨ ** 
©ts
)

350 
HTRDF
 * 
rdÂ
 = (HTRDF *Ë
u£rD©a
;

351 
HTAssocLi°
 * 
«me•a˚s
 = 
	`HTAssocLi°_√w
();

352 
HTAssocLi°
 * 
√wAL
 = 
	`HTAssocLi°_√w
();

353 
i
 = 0;

363 i‡(
©ts
) {

364 
©ts
[
i
]) {

365 * 
aName
 = (* ) 
©ts
[
i
];

366 i‡(!
	`°rcmp
(
aName
, "xmlns")) {

367 * 
aVÆue
 = (*Ë
©ts
[
i
+1];

368 
Àn
 = 
aVÆue
 ? 
	`°æí
(aValue) : -1;

369 i‡(
Àn
 =0 && !
rdÂ
->
m_sSour˚
)

370 
aVÆue
 = 
rdÂ
->
m_sSour˚
;

371 
	`HTAssocLi°_addObje˘
(
«me•a˚s
, 
aName
, 
aVÆue
);

373 i‡(!
	`HTLi°_c⁄èös
(
rdÂ
->
m_vAŒNameS∑˚s
, 
aVÆue
) &&

374 
	`°∫cmp
(
aVÆue
, 
RDFMS
, 
	`°æí
(RDFMS)) &&

375 
	`°∫cmp
(
aVÆue
, 
RDFSCHEMA
, 
	`°æí
(RDFSCHEMA))) {

376 * 
¬ame
 = 
NULL
;

377 
	`SåAŒocC›y
(
¬ame
, 
aVÆue
);

378 
	`HTLi°_addObje˘
(
rdÂ
->
m_vAŒNameS∑˚s
, 
¬ame
);

382 i‡(
rdÂ
->
m_sSour˚
 &&

383 !
	`°∫cmp
(
aVÆue
, 
rdÂ
->
m_sSour˚
, 
	`°æí
(rdfp->m_sSource))) {

384 * 
¬ame
 = 
NULL
;

385 
	`SåAŒocC›y
(
¬ame
, 
aVÆue
);

386 
	`HTLi°_addObje˘
(
rdÂ
->
m_vAŒNameS∑˚s
, 
¬ame
);

388 } i‡(!
	`°∫cmp
(
aName
, "xmlns:", 6)) {

389 * 
aVÆue
 = (*Ë
©ts
[
i
+1];

390 * 
nName
 = 
NULL
;

391 
Àn
 = 
aVÆue
 ? 
	`°æí
(aValue) : -1;

392 i‡(
Àn
 =0 && !
rdÂ
->
m_sSour˚
)

393 
aVÆue
 = 
rdÂ
->
m_sSour˚
;

394 
	`SåAŒocC›y
(
nName
, &(
aName
[6]));

395 
	`HTAssocLi°_addObje˘
(
«me•a˚s
, 
nName
, 
aVÆue
);

396 
	`HT_FREE
(
nName
);

399 i‡(!
	`HTLi°_c⁄èös
(
rdÂ
->
m_vAŒNameS∑˚s
, 
aVÆue
) &&

400 
	`°∫cmp
(
aVÆue
, 
RDFMS
, 
	`°æí
(RDFMS)) &&

401 
	`°∫cmp
(
aVÆue
, 
RDFSCHEMA
, 
	`°æí
(RDFSCHEMA))) {

402 * 
¬ame
 = 
NULL
;

403 
	`SåAŒocC›y
(
¬ame
, 
aVÆue
);

404 
	`HTLi°_addObje˘
(
rdÂ
->
m_vAŒNameS∑˚s
, 
¬ame
);

408 i‡(
rdÂ
->
m_sSour˚
 &&

409 !
	`°∫cmp
(
aVÆue
, 
rdÂ
->
m_sSour˚
, 
	`°æí
(rdfp->m_sSource))) {

410 * 
¬ame
 = 
NULL
;

411 
	`SåAŒocC›y
(
¬ame
, 
aVÆue
);

412 
	`HTLi°_addObje˘
(
rdÂ
->
m_vAŒNameS∑˚s
, 
¬ame
);

415 
i
+=2;

424 
	`HTLi°_addObje˘
(
rdÂ
->
m_«me•a˚Sèck
, 
«me•a˚s
);

431 * 
sName•a˚
 = 
NULL
;

432 * 
sEÀmítName
 = 
NULL
;

433 * 
sPªfix2
 = 
NULL
;

434 
HTEÀmít
 *
√wEÀmít
 = 
NULL
;

435 *
pödex
 = 
	`°rchr
(
«me
, ':');

436 
ix
 = 
pödex
 ? (Ë’ödex - 
«me
) : -1 ;

437 i‡(
ix
 > 0) {

438 i‡(!(
sPªfix2
 = 
	`HT_MALLOC
(
ix
+1)))

439 
	`HT_OUTOFMEM
("XML_startELement");

440 
	`°∫˝y
(
sPªfix2
, 
«me
, 
ix
);

441 
sPªfix2
[
ix
]='\0';

442 
sName•a˚
 = 
	`HTRDF_«me•a˚
(
rdÂ
, 
sPªfix2
);

443 
	`SåAŒocC›y
(
sEÀmítName
, &(
«me
[
ix
+1]));

444 
	`HT_FREE
(
sPªfix2
);

446 
sName•a˚
 = 
	`HTRDF_«me•a˚
(
rdÂ
, "xmlns");

447 
	`SåAŒocC›y
(
sEÀmítName
, 
«me
);

454 
i
 = 0;

455 i‡(
©ts
) {

456 
©ts
[
i
]) {

457 * 
aName
 = (*Ë
©ts
[
i
];

458 * 
sAâribuãName•a˚
 = 
NULL
;

459 i‡(
	`°∫cmp
(
aName
, "xmlns", 5)) {

460 * 
aVÆue
 = (*Ë
©ts
[
i
+1];

461 * 
sPªfix
 = 
NULL
;

463 
pödex
 = 
	`°rchr
(
aName
, ':');

464 
ix
 = 
pödex
 ? (Ë’ödex - 
aName
) : -1;

465 i‡(
ix
 > 0) {

466 i‡(!(
sPªfix
 = 
	`HT_MALLOC
(
ix
+1)))

467 
	`HT_OUTOFMEM
("XML_startELement");

468 
	`°∫˝y
(
sPªfix
, 
aName
, 
ix
);

469 
sPªfix
[
ix
] = '\0';

470 
sAâribuãName•a˚
 = 
	`HTRDF_«me•a˚
(
rdÂ
, 
sPªfix
);

471 
aName
 = &◊Name[
ix
+1]);

472 
	`HT_FREE
(
sPªfix
);

474 i‡(!
sName•a˚
)

475 
sAâribuãName•a˚
 = 
	`HTRDF_«me•a˚
(
rdÂ
, "xmlns");

477 
	`SåAŒocC›y
(
sAâribuãName•a˚
, 
sName•a˚
);

480 i‡(
	`HTRDF_∑r£LôîÆ
(
rdÂ
)) {

481 i‡(!
sPªfix
) {

482 i‡(!(
sPªfix
 = 
	`HT_MALLOC
(8)))

483 
	`HT_OUTOFMEM
("XML_startELement");

484 
	`•rötf
(
sPªfix
, "gí%d\n", 
i
);

487 * 
fName
 = 
NULL
;

488 
	`SåAŒocMC›y
(&
fName
, 
sPªfix
, ":", 
aVÆue
, 
NULL
);

489 
	`HTAssocLi°_addObje˘
(
√wAL
, 
fName
, 
aVÆue
);

490 
	`HT_FREE
(
fName
);

491 
	`SåAŒocMC›y
(&
fName
, "xm s:", 
sPªfix
, 
NULL
);

492 
	`HTAssocLi°_addObje˘
(
√wAL
, 
fName
, 
sAâribuãName•a˚
);

493 
	`HT_FREE
(
fName
);

496 * 
fName
 = 
NULL
;

497 
	`SåAŒocMC›y
(&
fName
, 
sAâribuãName•a˚
, 
aName
, 
NULL
);

498 
	`HTAssocLi°_addObje˘
(
√wAL
, 
fName
, 
aVÆue
);

499 
	`HT_FREE
(
fName
);

502 
	`HT_FREE
(
sAâribuãName•a˚
);

511 
	`HTRDF_likeRDF
 (
rdÂ
, 
sAâribuãName•a˚
, 
aName
);

515 
i
+=2;

524 i‡(
	`HTRDF_∑r£LôîÆ
(
rdÂ
)) {

525 * 
fName
 = 
NULL
;

527 i‡(!
sPªfix2
) {

528 i‡(
sName•a˚
)

529 
	`HTAssocLi°_addObje˘
(
√wAL
, "xm s:gí", 
sName•a˚
);

530 
	`SåAŒocMC›y
(&
fName
, "gí", 
sEÀmítName
, 
NULL
);

531 
√wEÀmít
 = 
	`HTEÀmít_√w
(
fName
, 
√wAL
);

532 
	`SåAŒocC›y
(
√wEÀmít
->
m_sPªfix
, "gen");

533 
	`HT_FREE
(
fName
);

535 * 
sAâribuãName•a˚
 = 
	`HTRDF_«me•a˚
(
rdÂ
, 
sPªfix2
);

536 i‡(
sAâribuãName•a˚
) {

537 
	`SåAŒocMC›y
(&
fName
, "xm s:", 
sPªfix2
, 
NULL
);

538 
	`HTAssocLi°_addObje˘
(
√wAL
, 
fName
, 
sAâribuãName•a˚
);

539 
	`HT_FREE
(
fName
);

541 
	`SåAŒocMC›y
(&
fName
, 
sPªfix2
, ":", 
sEÀmítName
, 
NULL
);

542 
√wEÀmít
 = 
	`HTEÀmít_√w
(
fName
, 
√wAL
);

543 
	`HT_FREE
(
fName
);

546 * 
fName
 = 
NULL
;

547 
	`SåAŒocMC›y
(&
fName
, 
sName•a˚
, 
sEÀmítName
, 
NULL
);

548 
√wEÀmít
 = 
	`HTEÀmít_√w
(
fName
, 
√wAL
);

549 
	`HT_FREE
(
fName
);

552 
	`HT_FREE
(
sEÀmítName
);

553 
	`HT_FREE
(
sName•a˚
);

554 
	`HTRDF_checkAâribuãs
(
rdÂ
, 
√wEÀmít
);

560 * 
fName
 = 
NULL
;

561 * 
sLôîÆVÆue
 = 
NULL
;

562 
	`SåAŒocMC›y
(&
fName
, 
RDFMS
, "∑r£Ty≥", 
NULL
);

563 
sLôîÆVÆue
 = 
	`HTEÀmít_gëAâribuã
(
√wEÀmít
, 
fName
);

564 
	`HT_FREE
(
fName
);

565 i‡(
sLôîÆVÆue
 && 
	`°rcmp
(sLiteralValue, "Resource")) {

575 
	`HTLi°_addObje˘
(
rdÂ
->
m_∑r£Ty≥Sèck
, 
sLôîÆVÆue
);

576 i‡(!
	`HTLi°_isEm±y
(
rdÂ
->
m_ñemítSèck
)) {

577 
HTEÀmít
 *
e
 = (HTElement *)

578 
	`HTLi°_œ°Obje˘
(
rdÂ
->
m_ñemítSèck
);

579 
	`HTEÀmít_addChûd
(
e
, 
√wEÀmít
);

581 
	`HTLi°_addObje˘
(
rdÂ
->
m_ñemítSèck
, 
√wEÀmít
);

582 
	`HTLi°_addObje˘
(
rdÂ
->
m_∑r£EÀmítSèck
, 
√wEÀmít
);

583 
	`HT_FREE
(
rdÂ
->
m_sLôîÆ
);

584 
	`SåAŒocC›y
(
rdÂ
->
m_sLôîÆ
, "");

588 i‡(
	`HTRDF_∑r£LôîÆ
(
rdÂ
)) {

594 
	`addM¨kupSèπ
 (
rdÂ
, 
«me
, 
©ts
);

597 i‡(!
	`HTLi°_isEm±y
(
rdÂ
->
m_lôîÆSèck
)) {

598 
HTEÀmít
 *
e
 = (HTElement *)

599 
	`HTLi°_œ°Obje˘
(
rdÂ
->
m_lôîÆSèck
);

600 
	`HTEÀmít_addChûd
(
e
, 
√wEÀmít
);

602 
	`HTLi°_addObje˘
(
rdÂ
->
m_lôîÆSèck
, 
√wEÀmít
);

604 
	`HTLi°_addObje˘
(
rdÂ
->
m_ñemítSèck
, 
√wEÀmít
);

611 i‡(!
	`HTLi°_isEm±y
(
rdÂ
->
m_ñemítSèck
)) {

612 
HTEÀmít
 *
e
 = (HTElement *)

613 
	`HTLi°_œ°Obje˘
(
rdÂ
->
m_ñemítSèck
);

614 
	`HTEÀmít_addChûd
(
e
, 
√wEÀmít
);

620 
	`HTLi°_addObje˘
(
rdÂ
->
m_ñemítSèck
, 
√wEÀmít
);

621 i‡(
sLôîÆVÆue
 && !
	`°rcmp
(sLiteralValue, "Resource")) {

622 
	`HTLi°_addObje˘
(
rdÂ
->
m_∑r£Ty≥Sèck
, 
sLôîÆVÆue
);

623 
	`HTLi°_addObje˘
(
rdÂ
->
m_∑r£EÀmítSèck
, 
√wEÀmít
);

624 
	`HT_FREE
(
rdÂ
->
m_sLôîÆ
);

625 
	`SåAŒocC›y
(
rdÂ
->
m_sLôîÆ
, "");

633 * 
fName
 = 
NULL
;

634 
HTEÀmít
 *
desc
 = 
NULL
;

635 
HTAssocLi°
 * 
Æ
 = 
	`HTAssocLi°_√w
 ();

636 
	`SåAŒocMC›y
(&
fName
, 
RDFMS
, "Des¸ùti⁄", 
NULL
);

637 
desc
 = 
	`HTEÀmít_√w
(
fName
, 
Æ
);

638 
	`HT_FREE
(
fName
);

639 i‡(!
	`HTLi°_isEm±y
(
rdÂ
->
m_ñemítSèck
)) {

640 
HTEÀmít
 *
e
 = (HTElement *)

641 
	`HTLi°_œ°Obje˘
(
rdÂ
->
m_ñemítSèck
);

642 
	`HTEÀmít_addChûd
(
e
, 
desc
);

644 
	`HTLi°_addObje˘
(
rdÂ
->
m_ñemítSèck
, 
desc
);

649 
	}
}

655 
PRIVATE
 
	$XML_ídEÀmít
 (* 
u£rD©a
,

656 c⁄° 
XML_Ch¨
 * 
«me
)

658 
HTRDF
 * 
rdÂ
 = (HTRDF *Ë
u£rD©a
;

659 
BOOL
 
bP¨£LôîÆ
 = 
rdÂ
 ? 
	`HTRDF_∑r£LôîÆ
‘dÂË: 
NO
;

660 
HTAssocLi°
 * 
«me•a˚s
 = 
	`HTLi°_ªmoveLa°Obje˘
(
rdÂ
->
m_«me•a˚Sèck
);

661 
rdÂ
->
m_roŸ
 = (
HTEÀmít
 *Ë
	`HTLi°_ªmoveLa°Obje˘
‘dÂ->
m_ñemítSèck
);

662 i‡(
«me•a˚s
Ë
	`HTAssocLi°_dñëe
(namespaces);

664 i‡(
bP¨£LôîÆ
) {

665 
HTEÀmít
 *
≥
 = (HTElement *)

666 
	`HTLi°_œ°Obje˘
(
rdÂ
->
m_∑r£EÀmítSèck
);

667 i‡(
≥
 !
rdÂ
->
m_roŸ
) {

669 
	`addM¨kupEnd
 (
rdÂ
, 
«me
);

671 
HTEÀmít
 *
de
 = 
	`HTEÀmít_√w2
(
rdÂ
->
m_sLôîÆ
);

672 
	`HTEÀmít_addChûd
(
≥
, 
de
);

674 
	`HT_FREE
(
rdÂ
->
m_sLôîÆ
);

675 
	`SåAŒocC›y
(
rdÂ
->
m_sLôîÆ
, "");

676 
	`HTLi°_ªmoveLa°Obje˘
(
rdÂ
->
m_∑r£EÀmítSèck
);

677 
	`HTLi°_ªmoveLa°Obje˘
(
rdÂ
->
m_∑r£Ty≥Sèck
);

679 } i‡(
	`HTRDF_∑r£Resour˚
(
rdÂ
)) {

687 i‡(!
	`HTLi°_isEm±y
(
rdÂ
->
m_ñemítSèck
)) {

688 
HTEÀmít
 *
≥
 = (HTElement *)

689 
	`HTLi°_œ°Obje˘
(
rdÂ
->
m_∑r£EÀmítSèck
);

690 
HTEÀmít
 *
e
 = (HTElement *)

691 
	`HTLi°_œ°Obje˘
(
rdÂ
->
m_ñemítSèck
);

692 i‡(
≥
 =
e
) {

693 
e
 = (
HTEÀmít
 *Ë
	`HTLi°_ªmoveLa°Obje˘
(
rdÂ
->
m_ñemítSèck
);

694 
	`HTLi°_ªmoveLa°Obje˘
(
rdÂ
->
m_∑r£EÀmítSèck
);

695 
	`HTLi°_ªmoveLa°Obje˘
(
rdÂ
->
m_∑r£Ty≥Sèck
);

699 
	}
}

701 
PRIVATE
 
	$XML_ch¨a˘îD©a
 (* 
u£rD©a
,

702 c⁄° 
XML_Ch¨
 * 
s
, 
Àn
)

708 
HTRDF
 * 
rdÂ
 = (HTRDF *Ë
u£rD©a
;

709 
HTEÀmít
 * 
e
 = (HTEÀmíà*Ë
	`HTLi°_œ°Obje˘
(
rdÂ
->
m_ñemítSèck
);

710 * 
t°r
 = 
NULL
;

711 * 
°r
 = 
NULL
;

712 i‡(!(
°r
 = (*Ë
	`HT_MALLOC
(
Àn
+1)))

713 
	`HT_OUTOFMEM
("XML_characterData");

714 
	`°∫˝y
(
°r
, 
s
, 
Àn
);

715 
°r
[
Àn
]='\0';

716 i‡(
	`HTRDF_∑r£LôîÆ
(
rdÂ
)) {

717 
	`SåAŒocC©
(
rdÂ
->
m_sLôîÆ
, 
°r
);

718 
	`HT_FREE
(
°r
);

723 
HTEÀmít
 *
lch
 = (HTEÀmíà*Ë
	`HTLi°_œ°Obje˘
(
e
->
m_chûdªn
);

724 i‡(
lch
 && 
	`HTEÀmít_ö°™˚OfD©a
(lch)) {

725 
	`HTEÀmít_addD©a
(
lch
, 
°r
);

726 
	`HT_FREE
(
°r
);

734 
t°r
 = 
	`åim
(
°r
);

735 i‡(
	`°æí
(
t°r
) > 0) {

736 
HTEÀmít
 * 
de
 = 
	`HTEÀmít_√w2
(
t°r
);

737 
	`HTEÀmít_addChûd
(
e
, 
de
);

739 
	`HT_FREE
(
°r
); HT_FREE(
t°r
);

740 
	}
}

742 
PRIVATE
 
	$XML_¥o˚ssögIn°ru˘i⁄
 (* 
u£rD©a
,

743 c⁄° 
XML_Ch¨
 * 
èrgë
,

744 c⁄° 
XML_Ch¨
 * 
d©a
)

747 
	}
}

764 
PRIVATE
 
	$XML_deÁu…
 (* 
u£rD©a
,

765 c⁄° 
XML_Ch¨
 * 
s
, 
Àn
)

768 
	}
}

776 
PRIVATE
 
	$XML_u≈¨£dE¡ôyDe˛
 (* 
u£rD©a
,

777 c⁄° 
XML_Ch¨
 * 
ítôyName
,

778 c⁄° 
XML_Ch¨
 * 
ba£
,

779 c⁄° 
XML_Ch¨
 * 
sy°emId
,

780 c⁄° 
XML_Ch¨
 * 
publicId
,

781 c⁄° 
XML_Ch¨
 * 
nŸ©i⁄Name
)

784 
	}
}

791 
PRIVATE
 
	$XML_nŸ©i⁄De˛
 (* 
u£rD©a
,

792 c⁄° 
XML_Ch¨
 * 
nŸ©i⁄Name
,

793 c⁄° 
XML_Ch¨
 * 
ba£
,

794 c⁄° 
XML_Ch¨
 * 
sy°emId
,

795 c⁄° 
XML_Ch¨
 * 
publicId
)

798 
	}
}

826 
PRIVATE
 
	$XML_exã∫ÆE¡ôyRef
 (
XML_P¨£r
 
∑r£r
,

827 c⁄° 
XML_Ch¨
 * 
›íE¡ôyNames
,

828 c⁄° 
XML_Ch¨
 * 
ba£
,

829 c⁄° 
XML_Ch¨
 * 
sy°emId
,

830 c⁄° 
XML_Ch¨
 * 
publicId
)

833 
	}
}

847 
PRIVATE
 
	$XML_unknownEncodög
 (* 
ícodögH™dÀrD©a
,

848 c⁄° 
XML_Ch¨
 * 
«me
,

849 
XML_Encodög
 * 
öfo
)

852 
	}
}

858 
PRIVATE
 
	$rdf_£tH™dÀrs
 (
XML_P¨£r
 
me
)

860 
	`XML_SëEÀmítH™dÀr
(
me
, 
XML_°¨tEÀmít
, 
XML_ídEÀmít
);

861 
	`XML_SëCh¨a˘îD©aH™dÀr
(
me
, 
XML_ch¨a˘îD©a
);

862 
	`XML_SëPro˚ssögIn°ru˘i⁄H™dÀr
(
me
, 
XML_¥o˚ssögIn°ru˘i⁄
);

863 
	`XML_SëDeÁu…H™dÀr
(
me
, 
XML_deÁu…
);

864 
	`XML_SëU≈¨£dE¡ôyDe˛H™dÀr
(
me
, 
XML_u≈¨£dE¡ôyDe˛
);

865 
	`XML_SëNŸ©i⁄De˛H™dÀr
(
me
, 
XML_nŸ©i⁄De˛
);

866 
	`XML_SëExã∫ÆE¡ôyRefH™dÀr
(
me
, 
XML_exã∫ÆE¡ôyRef
);

867 
	`XML_SëUnknownEncodögH™dÀr
(
me
, 
XML_unknownEncodög
, 
NULL
);

868 
	}
}

870 
PRIVATE
 
	$rdf_√wIn°™˚
 (
HTSåóm
 * 
me
,

871 
HTReque°
 * 
ªque°
,

872 
HTF‹m©
 
èrgë_f‹m©
,

873 
HTSåóm
 * 
èrgë_°ªam
,

874 
XML_P¨£r
 
xmÕ¨£r
,

875 * 
c⁄ãxt
)

877 i‡(
me
 && 
xmÕ¨£r
) {

878 
	`rdf_£tH™dÀrs
(
xmÕ¨£r
);

879 
	`XML_SëU£rD©a
(
xmÕ¨£r
, 
c⁄ãxt
);

882 i‡(
RDFIn°™˚
)

883 (*
RDFIn°™˚
)(
me
, 
ªque°
, 
èrgë_f‹m©
, 
èrgë_°ªam
, 
c⁄ãxt
, 
RDFIn°™˚C⁄ãxt
);

885 
	}
}

891 
PRIVATE
 
	$visô_ñemít_chûdªn
 (
HTLi°
 *
chûdªn
)

893 
HTEÀmít
 *
chûd
 = 
NULL
;

894 
HTLi°
 *
cur
 = 
chûdªn
;

895 (
chûd
 = (
HTEÀmít
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

896 i‡(!
	`HTLi°_isEm±y
(
chûd
->
m_chûdªn
))

897 
	`visô_ñemít_chûdªn
(
chûd
->
m_chûdªn
);

898 
	`HTEÀmít_dñëe
(
chûd
);

900 
	}
}

902 
PRIVATE
 
	$dñëe_ñemíts
 (
HTRDF
 * 
me
)

904 i‡(
me
 && me->
m_roŸ
) {

905 
HTEÀmít
 *
r
 = 
me
->
m_roŸ
;

906 i‡(!
	`HTLi°_isEm±y
(
r
->
m_chûdªn
))

907 
	`visô_ñemít_chûdªn
(
r
->
m_chûdªn
);

908 
	`HTEÀmít_dñëe
(
r
);

910 
	}
}

912 
PRIVATE
 
	$dñëe_lôîÆ_ñemíts
 (
HTRDF
 * 
me
)

914 i‡(
me
 && me->
m_lôîÆSèck
) {

915 
HTLi°
 *
cur
 = 
me
->
m_lôîÆSèck
;

916 
HTEÀmít
 *
e
 = 
NULL
;

917 (
e
 = (
HTEÀmít
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

918 
	`HTEÀmít_dñëe
(
e
);

920 
	`HTLi°_dñëe
(
me
->
m_lôîÆSèck
);

922 
	}
}

925 
PUBLIC
 
HTRDF
 * 
	$HTRDF_√w
 ()

927 
HTRDF
 * 
me
;

928 i‡((
me
 = (
HTRDF
 *Ë
	`HT_CALLOC
(1, (HTRDF))Ë=
NULL
)

929 
	`HT_OUTOFMEM
("HTRDF_new");

930 
me
->
m_«me•a˚Sèck
 = 
	`HTLi°_√w
();

931 
me
->
m_ñemítSèck
 = 
	`HTLi°_√w
();

932 
me
->
m_lôîÆSèck
 = 
	`HTLi°_√w
();

934 
me
->
m_åùÀs
 = 
	`HTLi°_√w
();

935 
me
->
m_vAŒNameS∑˚s
 = 
	`HTLi°_√w
();

937 
me
->
m_bCª©eBags
 = 
FALSE
;

938 
me
->
m_bFëchSchemas
 = 
FALSE
;

940 
me
->
m_∑r£Ty≥Sèck
 = 
	`HTLi°_√w
();

941 
me
->
m_∑r£EÀmítSèck
 = 
	`HTLi°_√w
();

943 
me
->
m_vResour˚s
 = 
	`HTLi°_√w
();

944 
me
->
m_vResﬁveQueue
 = 
	`HTLi°_√w
();

945 
me
->
m_hIDèbÀ
 = 
	`HTHashèbÀ_√w
(0);

947  
me
;

948 
	}
}

950 
PUBLIC
 
BOOL
 
	$HTRDF_dñëe
 (
HTRDF
 * 
me
)

952 i‡(
me
) {

953 
	`dñëe_ñemíts
(
me
);

954 i‡(
me
->
m_«me•a˚Sèck
) {

955 
HTLi°
 *
cur
 = 
me
->
m_«me•a˚Sèck
;

956 
HTAssocLi°
 *
Æi°
 = 
NULL
;

957 (
Æi°
 = (
HTAssocLi°
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

958 
	`HTAssocLi°_dñëe
(
Æi°
);

960 
	`HTLi°_dñëe
(
me
->
m_«me•a˚Sèck
);

962 i‡(
me
->
m_ñemítSèck
Ë
	`HTLi°_dñëe
(me->m_elementStack);

964 
	`dñëe_lôîÆ_ñemíts
(
me
);

966 
me
->
m_roŸ
 = 
NULL
;

967 i‡(
me
->
m_åùÀs
) {

968 
HTLi°
 *
cur
 = 
me
->
m_åùÀs
;

969 
HTTrùÀ
 *
t
 = 
NULL
;

970 (
t
 = (
HTTrùÀ
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

972 
	`HTTrùÀ_dñëe
(
t
);

974 
	`HTLi°_dñëe
(
me
->
m_åùÀs
);

976 
	`HT_FREE
(
me
->
m_sSour˚
);

977 i‡(
me
->
m_vAŒNameS∑˚s
) {

978 
HTLi°
 *
cur
 = 
me
->
m_vAŒNameS∑˚s
;

979 * 
s
 = 
NULL
;

980 (
s
 = (*Ë
	`HTLi°_√xtObje˘
(
cur
))) {

981 
	`HT_FREE
(
s
);

983 
	`HTLi°_dñëe
(
me
->
m_vAŒNameS∑˚s
);

985 i‡(
me
->
m_∑r£Ty≥Sèck
)

986 
	`HTLi°_dñëe
(
me
->
m_∑r£Ty≥Sèck
);

987 i‡(
me
->
m_∑r£EÀmítSèck
)

988 
	`HTLi°_dñëe
(
me
->
m_∑r£EÀmítSèck
);

989 i‡(
me
->
m_vResour˚s
)

990 
	`HTLi°_dñëe
(
me
->
m_vResour˚s
);

991 i‡(
me
->
m_vResﬁveQueue
)

992 
	`HTLi°_dñëe
(
me
->
m_vResﬁveQueue
);

993 i‡(
me
->
m_hIDèbÀ
)

994 
	`HTHashèbÀ_dñëe
(
me
->
m_hIDèbÀ
);

995 
	`HT_FREE
(
me
->
m_sLôîÆ
);

996 
	`HT_FREE
(
me
);

997  
YES
;

999  
NO
;

1000 
	}
}

1006 
PUBLIC
 
BOOL
 
	$HTRDF_£tSour˚
(
HTRDF
 *
me
, * 
sour˚
)

1008 i‡(
me
 && 
sour˚
) {

1009 
	`SåAŒocC›y
 (
me
->
m_sSour˚
, 
sour˚
);

1010  
YES
;

1012  
NO
;

1013 
	}
}

1019 
PUBLIC
 
BOOL
 
	$HTRDF_ªsﬁve
 (
HTRDF
 * 
me
)

1021 i‡(
me
) {

1022 
HTLi°
 * 
cur
 = 
me
->
m_vResﬁveQueue
;

1023 
HTEÀmít
 *
e
 = 
NULL
;

1024 
HTEÀmít
 *
e2
 = 
NULL
;

1025 (
e
 = (
HTEÀmít
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

1026 * 
sAbout
 = 
	`HTEÀmít_gëAâribuã2
(
e
, 
RDFMS
, "about");

1027 * 
sResour˚
 = 
	`HTEÀmít_gëAâribuã2
(
e
, 
RDFMS
, "resource");

1028 * 
sAboutEach
 = 
	`HTEÀmít_gëAâribuã2
(
e
, 
RDFMS
, "aboutEach");

1029 * 
sAboutEachPªfix
 = 
	`HTEÀmít_gëAâribuã2
(
e
, 
RDFMS
,

1031 i‡(
sAbout
) {

1032 i‡(
sAbout
[0]=='#')

1033 
sAbout
 = &(sAbout[1]);

1034 
e2
 = (
HTEÀmít
 *Ë
	`HTRDF_lookf‹Node
(
me
, 
sAbout
);

1035 i‡(
e2
)

1036 
	`HTEÀmít_addT¨gë
(
e
, 
e2
);

1038 
	`HTPröt
("Uƒesﬁved i¡î«»ª„ªn˚ %s\n", 
sAbout
);

1040 i‡(
sResour˚
) {

1041 i‡(
sResour˚
[0]=='#')

1042 
sResour˚
 = &(sResource[1]);

1043 
e2
 = (
HTEÀmít
 *Ë
	`HTRDF_lookf‹Node
(
me
, 
sResour˚
);

1044 i‡(
e2
)

1045 
	`HTEÀmít_addT¨gë
(
e
, 
e2
);

1048 i‡(
sAboutEach
) {

1049 
sAboutEach
 = &(sAboutEach[1]);

1050 
e2
 = (
HTEÀmít
 *Ë
	`HTRDF_lookf‹Node
(
me
, 
sAboutEach
);

1051 i‡(
e2
)

1052 
	`HTEÀmít_addT¨gë
(
e
, 
e2
);

1054 i‡(
sAboutEachPªfix
) {

1055 
HTLi°
 * 
cuº
 = 
me
->
m_vResour˚s
;

1056 
HTEÀmít
 *
ñe
 = 
NULL
;

1057 (
ñe
 = (
HTEÀmít
 *Ë
	`HTLi°_√xtObje˘
(
cuº
))) {

1058 * 
sA
 = 
	`HTEÀmít_gëAâribuã2
(
ñe
, 
RDFMS
, "about");

1059 i‡(
sA
 &&

1060 !
	`°∫cmp
(
sA
, 
sAboutEachPªfix
, 
	`°æí
(sAboutEachPrefix))) {

1061 
	`HTEÀmít_addT¨gë
(
e
, 
ñe
);

1066 
	`HTLi°_dñëe
(
me
->
m_vResour˚s
);

1067 
me
->
m_vResour˚s
 = 
	`HTLi°_√w
();

1068  
YES
;

1070  
NO
;

1071 
	}
}

1079 
PUBLIC
 
BOOL
 
	$HTRDF_isRDF
(
HTRDF
 * 
me
, 
HTEÀmít
 *
e
)

1081  (
me
 && 
e
 &&É->
m_sName
) ?

1082 (!
	`°∫cmp
(
e
->
m_sName
, 
RDFMS
, 
	`°æí
(RDFMS))Ë: 
NO
;

1083 
	}
}

1085 
PUBLIC
 
BOOL
 
	$HTRDF_isRDFroŸ
 (
HTRDF
 * 
me
, 
HTEÀmít
 *
e
)

1087 i‡(
me
 && 
e
 &&É->
m_sName
) {

1088 
Àn
 = 
	`°æí
(
e
->
m_sName
);

1089 i‡(
Àn
 > 3Ë (
	`HTRDF_isRDF
(
me
, 
e
Ë&& !
	`°rcmp
(&”->
m_sName
[len-3]), "RDF"));

1091  
NO
;

1092 
	}
}

1097 
PUBLIC
 
BOOL
 
	$HTRDF_isDes¸ùti⁄
 (
HTRDF
 *
me
, 
HTEÀmít
 *
e
)

1099 i‡(
me
 && 
e
 &&É->
m_sName
) {

1100 
Àn
 = 
	`°æí
(
e
->
m_sName
);

1101 i‡(
Àn
 > 11Ë (
	`HTRDF_isRDF
(
me
, 
e
Ë&& !
	`°rcmp
(&”->
m_sName
[len-11]), "Description"));

1103  
NO
;

1104 
	}
}

1109 
PUBLIC
 
BOOL
 
	$HTRDF_isLi°Iãm
 (
HTRDF
 *
me
, 
HTEÀmít
 *
e
)

1111 i‡(
me
 && 
e
 &&É->
m_sName
) {

1112 
Àn
 = 
	`°æí
(
e
->
m_sName
);

1113 i‡(
Àn
 > 2)

1114  (
	`HTRDF_isRDF
(
me
, 
e
Ë&& (!
	`°rcmp
(&”->
m_sName
[
Àn
-2]), "li"Ë|| 
	`°rchr
(e->m_sName,'_')));

1116  
NO
;

1117 
	}
}

1122 
PUBLIC
 
BOOL
 
	$HTRDF_isSequí˚
 (
HTRDF
 *
me
, 
HTEÀmít
 *
e
)

1124 i‡(
me
 && 
e
 &&É->
m_sName
) {

1125 
Àn
 = 
	`°æí
(
e
->
m_sName
);

1126 i‡(
Àn
 > 3Ë (
	`HTRDF_isRDF
(
me
, 
e
Ë&& !
	`°rcmp
(&”->
m_sName
[len-3]), "Seq"));

1128  
NO
;

1129 
	}
}

1134 
PUBLIC
 
BOOL
 
	$HTRDF_isA…î«tive
 (
HTRDF
 *
me
, 
HTEÀmít
 *
e
)

1136 i‡(
me
 && 
e
 &&É->
m_sName
) {

1137 
Àn
 = 
	`°æí
(
e
->
m_sName
);

1138 i‡(
Àn
 > 3Ë (
	`HTRDF_isRDF
(
me
, 
e
Ë&& !
	`°rcmp
(&”->
m_sName
[len-3]), "Alt"));

1140  
NO
;

1141 
	}
}

1146 
PUBLIC
 
BOOL
 
	$HTRDF_isBag
 (
HTRDF
 *
me
, 
HTEÀmít
 *
e
)

1148 i‡(
me
 && 
e
 &&É->
m_sName
) {

1149 
Àn
 = 
	`°æí
(
e
->
m_sName
);

1150 i‡(
Àn
 > 3Ë (
	`HTRDF_isRDF
(
me
, 
e
Ë&& !
	`°rcmp
(&”->
m_sName
[len-3]), "Bag"));

1152  
NO
;

1153 
	}
}

1158 
PUBLIC
 
BOOL
 
	$HTRDF_isC⁄èöî
 (
HTRDF
 *
me
, 
HTEÀmít
 *
e
)

1160  (
	`HTRDF_isSequí˚
(
me
, 
e
) ||

1161 
	`HTRDF_isA…î«tive
(
me
, 
e
) ||

1162 
	`HTRDF_isBag
(
me
, 
e
));

1163 
	}
}

1168 
PUBLIC
 
BOOL
 
	$HTRDF_isTy≥dPªdiˇã
(
HTRDF
 *
me
, 
HTEÀmít
 *
e
)

1170 i‡(
me
 && 
e
 &&É->
m_sName
) {

1171 
Àn
 = 
	`°æí
(
e
->
m_sName
);

1172 * 
ç
[] = {"predicate", "subject", "object",

1174 
i
;

1175 i‡(
	`HTRDF_isRDF
(
me
, 
e
)) {

1176 
i
 = 0; i< 7; i++) {

1177 
¡p
 = 
	`°æí
(
ç
[
i
]);

1178 i‡(
Àn
 > 
¡p
) {

1179 i‡(!
	`°rcmp
(&(
e
->
m_sName
[
Àn
-
¡p
]), 
ç
[
i
]))

1180  
YES
;

1183  
NO
;

1185 i‡(
Àn
 > 0Ë 
YES
;

1187  
NO
;

1188 
	}
}

1190 
PRIVATE
 
	$HTRDF_¥o˚ssLi°Iãm
 (
HTRDF
 * 
me
, * 
sID
, 
HTEÀmít
 *
li°ôem
,

1191 
iCou¡î
)

1198 * 
cName
 = 
NULL
;

1199 * 
sResour˚
 = 
	`HTRDF_gëResour˚
(
me
, 
li°ôem
);

1200 
sdig
[20];

1201 
	`•rötf
(
sdig
, "_%d", 
iCou¡î
);

1202 
	`SåAŒocMC›y
(&
cName
, 
RDFMS
, 
sdig
, 
NULL
);

1203 i‡(
sResour˚
) {

1204 
	`HTRDF_addTrùÀ
(
me
, 
cName
, 
sID
, 
sResour˚
);

1206 i‡(!
	`HTLi°_isEm±y
(
li°ôem
->
m_chûdªn
)){

1207 
	`HTPröt
("Listitem withÑesourceáttribute canÇot have childÇodes");

1209 
	`SåAŒocC›y
(
li°ôem
->
m_sID
, 
sResour˚
);

1211 
HTLi°
 *
cur
 = 
li°ôem
->
m_chûdªn
;

1212 
HTEÀmít
 *
n
 = 
NULL
;

1213 (
n
 = (
HTEÀmít
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

1214 i‡(
	`HTEÀmít_ö°™˚OfD©a
(
n
)) {

1215 
	`HTRDF_addTrùÀ
(
me
, 
cName
, 
sID
, 
n
->
m_sC⁄ã¡
);

1216 } i‡(
	`HTRDF_isDes¸ùti⁄
(
me
, 
n
)) {

1217 * 
sNodeID
 = 
	`HTRDF_¥o˚ssDes¸ùti⁄
(
me
, 
n
, 
NO
, 
YES
, NO);

1218 
	`HTRDF_addTrùÀ
(
me
, 
cName
, 
sID
, 
sNodeID
);

1219 
	`SåAŒocC›y
(
li°ôem
->
m_sID
, 
sNodeID
);

1220 } i‡(
	`HTRDF_isLi°Iãm
(
me
, 
n
)) {

1221 
	`HTPröt
("CanÇotÇestÜist item insideÜist item\n");

1222 } i‡(
	`HTRDF_isC⁄èöî
(
me
, 
n
)) {

1223 * 
c
 = 
	`HTRDF_¥o˚ssC⁄èöî
(
me
, 
n
);

1224 
	`HTRDF_addTrùÀ
(
me
, 
cName
, 
sID
, 
n
->
m_sID
);

1225 
	`HT_FREE
(
c
);

1226 } i‡(
	`HTRDF_isTy≥dPªdiˇã
(
me
, 
n
)) {

1227 * 
sNodeID
 = 
	`HTRDF_¥o˚ssTy≥dNode
(
me
, 
n
);

1228 
	`HTRDF_addTrùÀ
(
me
, 
cName
, 
sID
, 
sNodeID
);

1229 
	`HT_FREE
(
sNodeID
);

1233 
	`HT_FREE
(
cName
);

1234 
	}
}

1236 
PRIVATE
 * 
	$HTRDF_¥o˚ssC⁄èöî
(
HTRDF
 *
me
, 
HTEÀmít
 *
n
)

1238 * 
sID
 = 
NULL
;

1239 * 
tName
 = 
NULL
;

1240 * 
aName
 = 
NULL
;

1241 * 
sName
 = 
NULL
;

1242 * 
bName
 = 
NULL
;

1243 
	`SåAŒocMC›y
(&
tName
, 
RDFMS
, "ty≥", 
NULL
);

1244 
	`SåAŒocMC›y
(&
aName
, 
RDFMS
, "A…", 
NULL
);

1245 
	`SåAŒocMC›y
(&
sName
, 
RDFMS
, "Seq", 
NULL
);

1246 
	`SåAŒocMC›y
(&
bName
, 
RDFMS
, "Bag", 
NULL
);

1248 
	`SåAŒocC›y
(
sID
, 
n
->
m_sID
);

1249 i‡(!
sID
)

1250 
sID
 = 
	`HTRDF_√wReifiˇti⁄ID
(
me
);

1254 i‡(!
n
->
m_bD⁄e
) {

1255 i‡(
	`HTRDF_isSequí˚
(
me
, 
n
)) {

1256 
	`HTRDF_addTrùÀ
(
me
, 
tName
, 
sID
, 
sName
);

1257 } i‡(
	`HTRDF_isA…î«tive
(
me
, 
n
)) {

1258 
	`HTRDF_addTrùÀ
(
me
, 
tName
, 
sID
, 
aName
);

1259 } i‡(
	`HTRDF_isBag
(
me
, 
n
)) {

1260 
	`HTRDF_addTrùÀ
(
me
, 
tName
, 
sID
, 
bName
);

1262 
n
->
m_bD⁄e
 = 
YES
;

1264 
	`HTRDF_ex∑ndAâribuãs
(
me
, 
n
,Ç);

1267 
HTLi°
 *
cur
 = 
n
->
m_chûdªn
;

1268 
HTEÀmít
 *
n2
 = 
NULL
;

1269 
iCou¡î
 = 1;

1270 i‡(
	`HTLi°_isEm±y
(
cur
Ë&& 
	`HTRDF_isA…î«tive
(
me
, 
n
))

1271 
	`HTPröt
("An RDF:Alt container must haveátÜeast oneÜist item\n");

1272 (
n2
 = (
HTEÀmít
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

1273 i‡(
	`HTRDF_isLi°Iãm
(
me
, 
n2
)) {

1274 
	`HTRDF_¥o˚ssLi°Iãm
(
me
, 
sID
, 
n2
, 
iCou¡î
);

1275 
iCou¡î
++;

1277 
	`HTPröt
("C™ÇŸÇe° %s, insidêc⁄èöî\n", 
n2
->
m_sName
);

1282 
	`HT_FREE
(
tName
); HT_FREE(
sName
); HT_FREE(
aName
); HT_FREE(
bName
);

1284  
sID
;

1285 
	}
}

1290 
PUBLIC
 * 
	$HTRDF_¥o˚ssTy≥dNode
(
HTRDF
 *
me
, 
HTEÀmít
 *
ty≥dNode
)

1292 * 
sID
 = 
	`HTEÀmít_gëAâribuã2
(
ty≥dNode
, 
RDFMS
, "ID");

1293 * 
sBagID
 = 
	`HTEÀmít_gëAâribuã2
(
ty≥dNode
, 
RDFMS
, "bagID");

1294 * 
sAbout
 = 
	`HTEÀmít_gëAâribuã2
(
ty≥dNode
, 
RDFMS
, "about");

1295 * 
sAboutEach
 = 
	`HTEÀmít_gëAâribuã2
(
ty≥dNode
, 
RDFMS
, "aboutEach");

1298 * 
ªsour˚
 = 
	`HTEÀmít_gëAâribuã2
(
ty≥dNode
, 
RDFMS
, "resource");

1299 * 
iName
 = 
NULL
;

1300 * 
bName
 = 
NULL
;

1301 * 
tName
 = 
NULL
;

1303 * 
sObje˘
 = 
NULL
;

1305 
	`SåAŒocMC›y
(&
iName
, 
RDFMS
, "ID", 
NULL
);

1306 
	`SåAŒocMC›y
(&
bName
, 
RDFMS
, "bagID", 
NULL
);

1307 
	`SåAŒocMC›y
(&
tName
, 
RDFMS
, "ty≥", 
NULL
);

1309 i‡(
ªsour˚
)

1310 
	`HTPröt
("resourceáttributeÇotállowed foráÅypedNode %s\n",

1311 
ty≥dNode
->
m_sName
);

1319 
HTAssoc
 * 
assoc
;

1320 
HTAssocLi°
 *
cur
 = 
ty≥dNode
->
m_©åibuãs
;

1321 * 
sAâribuã
 = 
NULL
;

1322 * 
tVÆue
 = 
NULL
;

1323 * 
sVÆue
 = 
NULL
;

1324 (
assoc
(
HTAssoc
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

1325 
sAâribuã
 = 
	`HTAssoc_«me
(
assoc
);

1326 
sVÆue
 = 
	`HTAssoc_vÆue
(
assoc
);

1327 
tVÆue
 = 
	`åim
(
sVÆue
);

1328 i‡(
	`°∫cmp
(
sAâribuã
, 
RDFMS
, 
	`°æí
(RDFMS)) &&

1329 
	`°∫cmp
(
sAâribuã
, 
XMLSCHEMA
, 
	`°æí
(XMLSCHEMA))) {

1330 i‡(
	`°æí
(
tVÆue
) > 0) {

1331 
HTAssocLi°
 *
√wAL
 = 
	`HTAssocLi°_√w
();

1332 
HTEÀmít
 *
√wPªdiˇã
 = 
	`HTEÀmít_√w
(
sAâribuã
, 
√wAL
);

1333 
HTEÀmít
 *
d
 = 
NULL
;

1334 
	`HTEÀmít_addAâribuã
(
√wPªdiˇã
, 
iName
,

1335 
sAbout
 ? sAbouà: 
sID
);

1336 
	`HTEÀmít_addAâribuã
(
√wPªdiˇã
, 
bName
, 
sBagID
);

1337 
d
 = 
	`HTEÀmít_√w2
(
tVÆue
);

1338 
	`HTEÀmít_addChûd
(
√wPªdiˇã
, 
d
);

1339 
	`HTEÀmít_addChûd
(
ty≥dNode
, 
√wPªdiˇã
);

1342 
	`HT_FREE
(
tVÆue
);

1346 i‡(
sAbout
)

1347 
	`SåAŒocC›y
(
sObje˘
, 
sAbout
);

1348 i‡(
sID
)

1349 
	`SåAŒocC›y
(
sObje˘
, 
sID
);

1351 
sObje˘
 = 
	`HTRDF_√wReifiˇti⁄ID
(
me
);

1352 
	`SåAŒocC›y
(
ty≥dNode
->
m_sID
, 
sObje˘
);

1358 i‡(
sAboutEach
 && !
	`HTLi°_isEm±y
(
ty≥dNode
->
m_vT¨gës
)) {

1359 
HTAssocLi°
 *
√wAL
 = 
	`HTAssocLi°_√w
();

1360 
HTEÀmít
 *
√wPªdiˇã
 = 
	`HTEÀmít_√w
(
tName
, 
√wAL
);

1361 
HTEÀmít
 *
d
 = 
	`HTEÀmít_√w2
(
ty≥dNode
->
m_sName
);

1362 
	`HTEÀmít_addChûd
(
√wPªdiˇã
, 
d
);

1363 
	`HTEÀmít_addChûd
(
ty≥dNode
, 
√wPªdiˇã
);

1365 
	`HTRDF_addTrùÀ
(
me
, 
tName
, 
sObje˘
, 
ty≥dNode
->
m_sName
);

1367 
	`HTRDF_¥o˚ssDes¸ùti⁄
(
me
, 
ty≥dNode
, 
NO
, NO, 
YES
);

1370 
	`HT_FREE
(
iName
); HT_FREE(
bName
); HT_FREE(
tName
);

1372  
sObje˘
;

1373 
	}
}

1380 
PUBLIC
 
BOOL
 
	$HTRDF_¥o˚ssRDF
 (
HTRDF
 *
me
, 
HTEÀmít
 *
e
)

1382 i‡(
me
 && 
e
) {

1383 
HTLi°
 *
cur
 = 
e
->
m_chûdªn
;

1384 
HTEÀmít
 *
ñe
 = 
NULL
;

1385 i‡(
	`HTLi°_isEm±y
(
e
->
m_chûdªn
)) {

1386 
	`HTPröt
("Empty RDF Element\n");

1387  
NO
;

1389 (
ñe
(
HTEÀmít
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

1390 i‡(
	`HTRDF_isDes¸ùti⁄
(
me
, 
ñe
)) {

1391 
	`HTRDF_¥o˚ssDes¸ùti⁄
(
me
, 
ñe
, 
NO
, me->
m_bCª©eBags
,

1392 
me
->
m_bCª©eBags
);

1393 } i‡(
	`HTRDF_isC⁄èöî
(
me
, 
ñe
)) {

1394 * 
c
 = 
	`HTRDF_¥o˚ssC⁄èöî
(
me
, 
ñe
);

1395 
	`HT_FREE
(
c
);

1396 } i‡(
	`HTRDF_isTy≥dPªdiˇã
(
me
, 
ñe
)) {

1397 * 
t
 = 
	`HTRDF_¥o˚ssTy≥dNode
(
me
, 
ñe
);

1398 
	`HT_FREE
(
t
);

1401  
YES
;

1403  
NO
;

1404 
	}
}

1418 
PRIVATE
 * 
	$HTRDF_¥o˚ssPªdiˇã
 (
HTRDF
 * 
me
,

1419 
HTEÀmít
 * 
¥ediˇã
,

1420 
HTEÀmít
 * 
des¸ùti⁄
,

1421 * 
sT¨gë
,

1422 
BOOL
 
ªifiˇã
)

1424 * 
sSèãmítID
 = 
	`HTEÀmít_gëAâribuã2
(
¥ediˇã
, 
RDFMS
, "ID");

1425 * 
nsSèãmítID
 = 
NULL
;

1426 * 
sBagID
 = 
	`HTEÀmít_gëAâribuã2
(
¥ediˇã
, 
RDFMS
, "bagID");

1427 * 
sResour˚
 = 
	`HTRDF_gëResour˚
(
me
, 
¥ediˇã
);

1435 
HTEÀmít
 * 
∂a˚_hﬁdî
 = 
NULL
;

1436 
HTAssocLi°
 * 
√wAL
 = 
	`HTAssocLi°_√w
();

1437 * 
fName
 = 
NULL
;

1438 * 
aName
 = 
NULL
;

1440 
	`SåAŒocMC›y
(&
fName
, 
RDFMS
, "Des¸ùti⁄", 
NULL
);

1441 
∂a˚_hﬁdî
 = 
	`HTEÀmít_√w
(
fName
, 
√wAL
);

1442 
	`HT_FREE
(
fName
);

1444 i‡(
	`HTRDF_ex∑ndAâribuãs
(
me
, 
∂a˚_hﬁdî
, 
¥ediˇã
)) {

1447 i‡(!
	`HTLi°_isEm±y
(
¥ediˇã
->
m_chûdªn
)) {

1448 
	`HTPröt
("%†mu° bê™Ém±yÉÀmíàsö˚ iàu£†¥›Aâ∏gømm¨Örodu˘i⁄", 
¥ediˇã
->
m_sName
);

1449 
	`HTEÀmít_dñëe
(
∂a˚_hﬁdî
);

1450  
NULL
;

1452 
	`SåAŒocMC›y
(&
aName
, 
RDFMS
, "about", 
NULL
);

1455 i‡(
sSèãmítID
) {

1456 
HTEÀmít
 *
d©a
 = 
	`HTEÀmít_√w2
(
sSèãmítID
);

1457 
	`HTEÀmít_addAâribuã
(
∂a˚_hﬁdî
, 
aName
, 
sSèãmítID
);

1460 
	`HTEÀmít_addChûd
(
¥ediˇã
, 
d©a
);

1461 } i‡(
sResour˚
) {

1462 
	`HTEÀmít_addAâribuã
(
∂a˚_hﬁdî
, 
aName
, 
sResour˚
);

1464 
nsSèãmítID
 = 
	`HTRDF_√wReifiˇti⁄ID
(
me
);

1465 
	`HTEÀmít_addAâribuã
(
∂a˚_hﬁdî
, 
aName
, 
nsSèãmítID
);

1466 
	`HT_FREE
(
nsSèãmítID
);

1468 
	`HT_FREE
(
aName
);

1470 i‡(
sBagID
) {

1471 
	`SåAŒocMC›y
(&
fName
, 
RDFMS
, "bagID", 
NULL
);

1472 
	`HTEÀmít_addAâribuã
(
∂a˚_hﬁdî
, 
fName
, 
sBagID
);

1473 
	`HT_FREE
(
fName
);

1474 
	`SåAŒocC›y
(
∂a˚_hﬁdî
->
m_sBagID
, 
sBagID
);

1476 
	`HTRDF_¥o˚ssDes¸ùti⁄
(
me
, 
∂a˚_hﬁdî
, 
NO
, NO, me->
m_bCª©eBags
);

1480 
	`HTEÀmít_dñëe
(
∂a˚_hﬁdî
);

1490 i‡(
sResour˚
 && 
	`HTLi°_isEm±y
(
¥ediˇã
->
m_chûdªn
)) {

1491 i‡(!
	`HTEÀmít_èrgë
(
¥ediˇã
)) {

1492 i‡(
ªifiˇã
) {

1493 
	`HT_FREE
(
nsSèãmítID
);

1494 
nsSèãmítID
 = 
	`HTRDF_ªifiˇã
 (
me
, 
¥ediˇã
->
m_sName
,

1495 
sT¨gë
, 
sResour˚
,

1496 
¥ediˇã
->
m_sID
);

1497 
	`SåAŒocC›y
(
¥ediˇã
->
m_sID
, 
nsSèãmítID
);

1499 
	`HTRDF_addTrùÀ
(
me
, 
¥ediˇã
->
m_sName
, 
sT¨gë
, 
sResour˚
);

1502 
HTEÀmít
 *
èrgë
 = 
	`HTEÀmít_èrgë
(
¥ediˇã
);

1503 i‡(
ªifiˇã
) {

1504 
nsSèãmítID
 = 
	`HTRDF_ªifiˇã
 (
me
, 
¥ediˇã
->
m_sName
,

1505 
sT¨gë
,

1506 
èrgë
->
m_sID
,

1507 
¥ediˇã
->
m_sID
);

1508 
	`SåAŒocC›y
(
¥ediˇã
->
m_sID
, 
nsSèãmítID
);

1510 
	`HTRDF_addTrùÀ
(
me
, 
¥ediˇã
->
m_sName
, 
sT¨gë
, 
èrgë
->
m_sID
);

1513 i‡(
nsSèãmítID
 && 
¥ediˇã
->
m_sID
)

1514 
	`SåAŒocC›y
(
nsSèãmítID
, 
¥ediˇã
->
m_sID
);

1515  
nsSèãmítID
;

1522 i‡(
sResour˚
 && 
	`HTEÀmít_èrgë
(
¥ediˇã
)) {

1523 * 
dSèãmítID
 = 
	`HTRDF_¥o˚ssDes¸ùti⁄
(
me
,

1524 
	`HTEÀmít_èrgë
(
¥ediˇã
),

1525 
YES
, 
NO
, NO);

1526 i‡(
ªifiˇã
) {

1527 
	`HT_FREE
(
nsSèãmítID
);

1528 
nsSèãmítID
 = 
	`HTRDF_ªifiˇã
 (
me
, 
¥ediˇã
->
m_sName
,

1529 
sT¨gë
, 
dSèãmítID
,

1530 
¥ediˇã
->
m_sID
);

1531 
	`SåAŒocC›y
(
¥ediˇã
->
m_sID
, 
nsSèãmítID
);

1533 
	`SåAŒocC›y
(
nsSèãmítID
, 
dSèãmítID
);

1534 
	`HTRDF_addTrùÀ
(
me
, 
¥ediˇã
->
m_sName
, 
sT¨gë
, 
nsSèãmítID
);

1536  
nsSèãmítID
;

1545 
HTLi°
 *
cur
 = 
¥ediˇã
->
m_chûdªn
;

1546 
BOOL
 
bU£dTy≥dNodeProdu˘i⁄
 = 
NO
;

1547 
HTEÀmít
 *
n2
;

1548 i‡(
nsSèãmítID
 && 
sSèãmítID
)

1549 
	`SåAŒocC›y
(
nsSèãmítID
, 
sSèãmítID
);

1550 i‡(
	`HTLi°_isEm±y
(
cur
)) {

1551 i‡(
ªifiˇã
) {

1552 * 
ƒ
 = 
	`HTRDF_√wReifiˇti⁄ID
(
me
);

1553 
	`HT_FREE
(
nsSèãmítID
);

1554 
nsSèãmítID
 = 
	`HTRDF_ªifiˇã
 (
me
, 
¥ediˇã
->
m_sName
,

1555 
sT¨gë
, 
ƒ
,

1556 
¥ediˇã
->
m_sID
);

1557 
	`HT_FREE
(
ƒ
);

1559 * 
ƒ
 = 
	`HTRDF_√wReifiˇti⁄ID
(
me
);

1560 
	`HTRDF_addTrùÀ
(
me
, 
¥ediˇã
->
m_sName
, 
sT¨gë
, 
ƒ
);

1561 
	`HT_FREE
(
ƒ
);

1564 (
n2
(
HTEÀmít
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

1565 i‡(
	`HTRDF_isDes¸ùti⁄
(
me
, 
n2
)) {

1566 
HTEÀmít
 *
d2
 = 
n2
;

1567 * 
dSèãmítID
 =
	`HTRDF_¥o˚ssDes¸ùti⁄
(
me
, 
d2
, 
YES
, 
NO
, NO);

1568 i‡(
d2
->
m_sID
 && 
dSèãmítID
 && d2->m_sID != dStatementID)

1569 
	`SåAŒocC›y
(
d2
->
m_sID
, 
dSèãmítID
);

1571 i‡(
ªifiˇã
) {

1572 
	`HT_FREE
(
nsSèãmítID
);

1573 
nsSèãmítID
 = 
	`HTRDF_ªifiˇã
 (
me
, 
¥ediˇã
->
m_sName
,

1574 
sT¨gë
, 
dSèãmítID
,

1575 
¥ediˇã
->
m_sID
);

1577 
	`SåAŒocC›y
(
nsSèãmítID
, 
dSèãmítID
);

1578 
	`HTRDF_addTrùÀ
(
me
, 
¥ediˇã
->
m_sName
, 
sT¨gë
,

1579 
nsSèãmítID
);

1581 } i‡(
	`HTEÀmít_ö°™˚OfD©a
(
n2
)) {

1582 * 
tVÆue
 = 
NULL
;

1583 * 
sVÆue
 = 
n2
->
m_sC⁄ã¡
;

1589 
tVÆue
 = 
	`åim
(
sVÆue
);

1590 i‡(
tVÆue
 && 
	`°æí
(tValue) > 0) {

1591 i‡(
ªifiˇã
) {

1592 
	`HT_FREE
(
nsSèãmítID
);

1593 
nsSèãmítID
 = 
	`HTRDF_ªifiˇã
 (
me
, 
¥ediˇã
->
m_sName
,

1594 
sT¨gë
, 
tVÆue
,

1595 
¥ediˇã
->
m_sID
);

1596 
	`SåAŒocC›y
(
¥ediˇã
->
m_sID
, 
nsSèãmítID
);

1598 
	`HTRDF_addTrùÀ
(
me
, 
¥ediˇã
->
m_sName
, 
sT¨gë
, 
tVÆue
);

1601 
	`HT_FREE
(
tVÆue
);

1602 } i‡(
	`HTRDF_isC⁄èöî
(
me
, 
n2
)) {

1603 
HTEÀmít
 *
èrgë
 = 
	`HTEÀmít_èrgë
(
des¸ùti⁄
);

1604 * 
aboutT¨gë
 =

1605 
èrgë
 ?

1606 
	`HTEÀmít_gëAâribuã2
(
èrgë
, 
RDFMS
, "about"Ë: 
NULL
;

1607 * 
sCﬁÀ˘i⁄ID
 = 
	`HTRDF_¥o˚ssC⁄èöî
(
me
, 
n2
);

1608 
	`SåAŒocC›y
(
nsSèãmítID
, 
sCﬁÀ˘i⁄ID
);

1610 i‡(
èrgë
) {

1611 i‡(
ªifiˇã
) {

1612 
	`HT_FREE
(
nsSèãmítID
);

1613 
nsSèãmítID
=
	`HTRDF_ªifiˇã
 (
me
, 
¥ediˇã
->
m_sName
,

1614 
aboutT¨gë
,

1615 
sCﬁÀ˘i⁄ID
,

1616 
¥ediˇã
->
m_sID
);

1617 
	`SåAŒocC›y
(
¥ediˇã
->
m_sID
, 
nsSèãmítID
);

1619 
	`HTRDF_addTrùÀ
(
me
, 
¥ediˇã
->
m_sName
, 
aboutT¨gë
,

1620 
sCﬁÀ˘i⁄ID
);

1623 i‡(
ªifiˇã
) {

1624 
	`HT_FREE
(
nsSèãmítID
);

1625 
nsSèãmítID
=
	`HTRDF_ªifiˇã
 (
me
, 
¥ediˇã
->
m_sName
,

1626 
sT¨gë
, 
sCﬁÀ˘i⁄ID
,

1627 
¥ediˇã
->
m_sID
);

1628 
	`SåAŒocC›y
(
¥ediˇã
->
m_sID
, 
nsSèãmítID
);

1630 
	`HTRDF_addTrùÀ
(
me
, 
¥ediˇã
->
m_sName
, 
sT¨gë
,

1631 
sCﬁÀ˘i⁄ID
);

1634 
	`HT_FREE
(
sCﬁÀ˘i⁄ID
);

1635 } i‡(
	`HTRDF_isTy≥dPªdiˇã
(
me
, 
n2
)) {

1636 i‡(
bU£dTy≥dNodeProdu˘i⁄
) {

1637 
	`HTPröt
("O∆y o√Åy≥dNodêÆlowed insidê®¥ediˇã (Exå®ty≥dNode: %†)\n", 
n2
->
m_sName
);

1639 
bU£dTy≥dNodeProdu˘i⁄
 = 
YES
;

1641 
	`HT_FREE
(
nsSèãmítID
);

1642 
nsSèãmítID
 = 
	`HTRDF_¥o˚ssTy≥dNode
(
me
, 
n2
);

1643 
	`HTRDF_addTrùÀ
(
me
, 
¥ediˇã
->
m_sName
, 
sT¨gë
, 
nsSèãmítID
);

1646  
nsSèãmítID
;

1648  
NULL
;

1649 
	}
}

1662 
PUBLIC
 * 
	$HTRDF_¥o˚ssDes¸ùti⁄
 (
HTRDF
 * 
me
,

1663 
HTEÀmít
 * 
des¸ùti⁄
,

1664 
BOOL
 
öPªdiˇã
,

1665 
BOOL
 
ªifiˇã
,

1666 
BOOL
 
¸óãBag
)

1668 
iChûdCou¡
 = 1;

1669 
BOOL
 
bOn˚
 = 
YES
;

1671 * 
sAbout
 = 
	`HTEÀmít_gëAâribuã2
(
des¸ùti⁄
, 
RDFMS
, "about");

1672 * 
sAboutEach
 = 
	`HTEÀmít_gëAâribuã2
(
des¸ùti⁄
, 
RDFMS
, "aboutEach");

1673 * 
sAboutEachPªfix
 = 
	`HTEÀmít_gëAâribuã2
(
des¸ùti⁄
, 
RDFMS
,

1675 * 
sBagid
 = 
	`HTEÀmít_gëAâribuã2
(
des¸ùti⁄
, 
RDFMS
, "bagID");

1676 * 
sID
 = 
	`HTEÀmít_gëAâribuã2
(
des¸ùti⁄
, 
RDFMS
, "ID");

1677 
HTEÀmít
 *
èrgë
 = 
	`HTEÀmít_èrgë
(
des¸ùti⁄
);

1678 
BOOL
 
hasT¨gë
 = 
	`HTLi°_isEm±y
(
des¸ùti⁄
->
m_vT¨gës
Ë? 
NO
 : 
YES
;

1679 
BOOL
 
èrgëIsC⁄èöî
 = 
NO
;

1680 * 
sT¨gëAbout
 = 
NULL
;

1681 * 
sT¨gëBagID
 = 
NULL
;

1682 * 
sT¨gëID
 = 
NULL
;

1683 * 
dName
 = 
NULL
;

1684 * 
aName
 = 
NULL
;

1689 i‡(
des¸ùti⁄
->
m_bD⁄e
Ë des¸ùti⁄->
m_sID
;

1691 
	`SåAŒocMC›y
(&
dName
, 
RDFMS
, "Des¸ùti⁄", 
NULL
);

1692 
	`SåAŒocMC›y
(&
aName
, 
RDFMS
, "about", 
NULL
);

1697 i‡(
hasT¨gë
) {

1698 * 
sT¨gëID2
 = 
	`HTEÀmít_gëAâribuã2
(
èrgë
, 
RDFMS
, "ID");

1699 
sT¨gëAbout
 = 
	`HTEÀmít_gëAâribuã2
(
èrgë
, 
RDFMS
, "about");

1700 
sT¨gëBagID
 = 
	`HTEÀmít_gëAâribuã2
(
èrgë
, 
RDFMS
, "bagID");

1701 i‡(
me
->
m_sSour˚
 && 
sT¨gëID2
) {

1702 
	`SåAŒocMC›y
(&
sT¨gëID
, 
me
->
m_sSour˚
, 
sT¨gëID2
, 
NULL
);

1704 
	`SåAŒocC›y
(
sT¨gëID
, 
sT¨gëID2
);

1711 i‡(
sT¨gëBagID
 && 
sAbout
) {

1712 
èrgëIsC⁄èöî
 = !
	`°rcmp
(&(
sAbout
[1]), 
sT¨gëBagID
);

1714 i‡(
sT¨gëID
 && 
sAbout
 && !
	`°rcmp
(&(sAbout[1]), sTargetID) &&

1715 
	`HTRDF_isC⁄èöî
(
me
, 
èrgë
))

1716 
èrgëIsC⁄èöî
 = 
YES
;

1718 
	`HT_FREE
(
sT¨gëID
);

1725 
	`HTRDF_ex∑ndAâribuãs
(
me
, 
des¸ùti⁄
, description);

1730 i‡(
sAboutEach
 && 
hasT¨gë
) {

1731 i‡(
	`HTRDF_isC⁄èöî
(
me
, 
èrgë
)) {

1732 
HTLi°
 *
cur
 = 
èrgë
->
m_chûdªn
;

1733 
HTEÀmít
 *
ñe
 = 
NULL
;

1734 (
ñe
(
HTEÀmít
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

1735 i‡(
	`HTRDF_isLi°Iãm
(
me
, 
ñe
)) {

1736 * 
sResour˚
 = 
	`HTRDF_gëResour˚
(
me
, 
ñe
);

1737 i‡(
sResour˚
) {

1738 
HTEÀmít
 * 
√wDes¸ùti⁄
 = 
NULL
;

1739 
HTEÀmít
 * 
ñe2
;

1740 
HTLi°
 * 
cur2
 = 
des¸ùti⁄
->
m_chûdªn
;

1745 i‡(
sResour˚
) {

1746 
HTAssocLi°
 *
√wAL
 = 
	`HTAssocLi°_√w
();

1747 
√wDes¸ùti⁄
 = 
	`HTEÀmít_√w
(
dName
, 
√wAL
);

1748 
	`HTEÀmít_addAâribuã
(
√wDes¸ùti⁄
, 
aName
, 
sResour˚
);

1751 (
ñe2
 = (
HTEÀmít
 *Ë
	`HTLi°_√xtObje˘
(
cur2
))){

1752 i‡(
√wDes¸ùti⁄
Ë
	`HTEÀmít_addChûd
“ewDes¸ùti⁄, 
ñe2
);

1755 i‡(
√wDes¸ùti⁄
)

1756 
	`HTRDF_¥o˚ssDes¸ùti⁄
(
me
, 
√wDes¸ùti⁄
, 
NO
, NO, NO);

1759 
	`HTEÀmít_dñëe
(
√wDes¸ùti⁄
);

1768 
HTLi°
 *
cur2
 = 
ñe
->
m_chûdªn
;

1769 
HTEÀmít
 *
ñe2
 = 
NULL
;

1770 (
ñe2
 = (
HTEÀmít
 *Ë
	`HTLi°_√xtObje˘
(
cur2
))) {

1771 
HTAssocLi°
 *
√wAL
 = 
	`HTAssocLi°_√w
();

1772 
HTEÀmít
 *
√wNode
 = 
	`HTEÀmít_√w
(
dName
, 
√wAL
);

1773 
HTLi°
 *
cur3
 = 
des¸ùti⁄
->
m_chûdªn
;

1774 
HTEÀmít
 *
ñe3
 = 
NULL
;

1779 (
ñe3
 = (
HTEÀmít
 *)

1780 
	`HTLi°_√xtObje˘
(
cur3
))) {

1781 
	`HTEÀmít_addChûd
(
√wNode
, 
ñe3
);

1783 
	`HTEÀmít_addT¨gë
(
√wNode
, 
ñe2
);

1784 
	`HTRDF_¥o˚ssDes¸ùti⁄
(
me
, 
√wNode
, 
YES
, 
NO
, NO);

1787 } i‡(
	`HTRDF_isTy≥dPªdiˇã
(
me
, 
ñe
)) {

1788 
HTAssocLi°
 *
√wAL
 = 
	`HTAssocLi°_√w
();

1789 
HTEÀmít
 *
√wNode
 = 
	`HTEÀmít_√w
(
dName
, 
√wAL
);

1790 
HTLi°
 *
cur2
 = 
des¸ùti⁄
->
m_chûdªn
;

1791 
HTEÀmít
 *
ñe2
 = 
NULL
;

1792 (
ñe2
 = (
HTEÀmít
 *Ë
	`HTLi°_√xtObje˘
(
cur2
))) {

1793 
	`HTEÀmít_addChûd
(
√wNode
, 
ñe2
);

1795 
	`HTEÀmít_addT¨gë
(
√wNode
, 
ñe
);

1796 
	`HTRDF_¥o˚ssDes¸ùti⁄
(
me
, 
√wNode
, 
YES
, 
NO
, NO);

1799 } i‡(
	`HTRDF_isDes¸ùti⁄
(
me
, 
èrgë
)) {

1800 
HTLi°
 *
cur
 = 
èrgë
->
m_chûdªn
;

1801 
HTEÀmít
 *
ñe
 = 
NULL
;

1802 (
ñe
 = (
HTEÀmít
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

1803 
HTAssocLi°
 *
√wAL
 = 
	`HTAssocLi°_√w
();

1804 
HTEÀmít
 *
√wNode
 = 
	`HTEÀmít_√w
(
dName
, 
√wAL
);

1805 
HTLi°
 *
cur2
 = 
des¸ùti⁄
->
m_chûdªn
;

1806 
HTEÀmít
 *
ñe2
 = 
NULL
;

1807 (
ñe2
 = (
HTEÀmít
 *Ë
	`HTLi°_√xtObje˘
(
cur2
))) {

1808 
	`HTEÀmít_addChûd
(
√wNode
, 
ñe2
);

1810 
	`HTEÀmít_addT¨gë
(
√wNode
, 
ñe
);

1811 
	`HTRDF_¥o˚ssDes¸ùti⁄
(
me
, 
√wNode
, 
YES
, 
NO
, NO);

1815 
	`HT_FREE
(
dName
);

1816 
	`HT_FREE
(
aName
);

1817  
NULL
;

1823 i‡(
sAboutEachPªfix
) {

1824 i‡(
hasT¨gë
) {

1825 
HTLi°
 *
cur
 = 
des¸ùti⁄
->
m_vT¨gës
;

1826 
HTEÀmít
 *
èrgë
 = 
NULL
;

1827 (
èrgë
 = (
HTEÀmít
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

1828 
HTLi°
 *
cur2
 = 
des¸ùti⁄
->
m_chûdªn
;

1829 
HTEÀmít
 *
ñe2
 = 
NULL
;

1830 
HTEÀmít
 *
√wDes¸ùti⁄
 = 
NULL
;

1831 
HTAssocLi°
 *
√wAL
 = 
	`HTAssocLi°_√w
();

1832 
sT¨gëAbout
 = 
	`HTEÀmít_gëAâribuã2
(
èrgë
, 
RDFMS
, "about");

1833 
√wDes¸ùti⁄
 = 
	`HTEÀmít_√w
(
dName
, 
√wAL
);

1834 
	`HTEÀmít_addAâribuã
(
√wDes¸ùti⁄
, 
aName
, 
sT¨gëAbout
);

1835 (
ñe2
 = (
HTEÀmít
 *Ë
	`HTLi°_√xtObje˘
(
cur2
))) {

1836 
	`HTEÀmít_addChûd
(
√wDes¸ùti⁄
, 
ñe2
);

1838 
	`HTRDF_¥o˚ssDes¸ùti⁄
(
me
, 
√wDes¸ùti⁄
, 
NO
, NO, NO);

1842 
	`HT_FREE
(
dName
);

1843 
	`HT_FREE
(
aName
);

1844  
NULL
;

1850 
HTLi°
 *
cur
 = 
des¸ùti⁄
->
m_chûdªn
;

1851 
HTEÀmít
 *
n
 = 
NULL
;

1852 (
n
 = (
HTEÀmít
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

1853 i‡(
	`HTRDF_isDes¸ùti⁄
(
me
, 
n
))

1854 
	`HTPröt
("CanÇotÇest Description inside Description\n");

1855 i‡(
	`HTRDF_isLi°Iãm
(
me
, 
n
))

1856 
	`HTPröt
("CanÇotÇest List Item inside Description\n");

1857 i‡(
	`HTRDF_isC⁄èöî
(
me
, 
n
))

1858 
	`HTPröt
("CanÇotÇest Container inside Description\n");

1859 i‡(
	`HTRDF_isTy≥dPªdiˇã
(
me
, 
n
)) {

1860 * 
sChûdID
 = 
NULL
;

1861 i‡(
hasT¨gë
 && 
èrgëIsC⁄èöî
) {

1862 
sChûdID
 = 
	`HTRDF_¥o˚ssPªdiˇã
(
me
, 
n
, 
des¸ùti⁄
,

1863 
èrgë
->
m_sBagID
 ?

1864 
èrgë
->
m_sBagID
 :

1865 
èrgë
->
m_sID
, 
NO
);

1866 
	`SåAŒocC›y
(
des¸ùti⁄
->
m_sID
, 
sChûdID
);

1867 
¸óãBag
 = 
NO
;

1868 } i‡(
hasT¨gë
) {

1869 
sChûdID
 = 
	`HTRDF_¥o˚ssPªdiˇã
(
me
, 
n
, 
des¸ùti⁄
,

1870 
èrgë
->
m_sBagID
 ?

1871 
èrgë
->
m_sBagID
 :

1872 
èrgë
->
m_sID
, 
ªifiˇã
);

1873 
	`SåAŒocC›y
(
des¸ùti⁄
->
m_sID
, 
sChûdID
);

1874 } i‡(!
hasT¨gë
 && !
öPªdiˇã
) {

1875 i‡(!
des¸ùti⁄
->
m_sID
) {

1876 * 
ƒ
 = 
	`HTRDF_√wReifiˇti⁄ID
(
me
);

1877 
	`SåAŒocC›y
(
des¸ùti⁄
->
m_sID
, 
ƒ
);

1878 
	`HT_FREE
(
ƒ
);

1880 i‡(!
sAbout
) {

1881 i‡(
sID
)

1882 
sAbout
 = 
sID
;

1884 
sAbout
 = 
des¸ùti⁄
->
m_sID
;

1886 
sChûdID
 = 
	`HTRDF_¥o˚ssPªdiˇã
(
me
, 
n
, 
des¸ùti⁄
,

1887 
sAbout
, 
sBagid
 ?

1888 
YES
 : 
ªifiˇã
);

1890 } i‡(!
hasT¨gë
 && 
öPªdiˇã
) {

1891 i‡(!
sAbout
) {

1892 i‡(
sID
) {

1893 
	`SåAŒocC›y
(
des¸ùti⁄
->
m_sID
, 
sID
);

1894 
sAbout
 = 
sID
;

1896 i‡(!
des¸ùti⁄
->
m_sID
) {

1897 * 
ƒ
 = 
	`HTRDF_√wReifiˇti⁄ID
(
me
);

1898 
	`SåAŒocC›y
(
des¸ùti⁄
->
m_sID
, 
ƒ
);

1899 
	`HT_FREE
(
ƒ
);

1901 
sAbout
 = 
des¸ùti⁄
->
m_sID
;

1904 i‡(
des¸ùti⁄
->
m_sID
 !
sAbout
)

1905 
	`SåAŒocC›y
(
des¸ùti⁄
->
m_sID
, 
sAbout
);

1907 
sChûdID
 = 
	`HTRDF_¥o˚ssPªdiˇã
(
me
, 
n
, 
des¸ùti⁄
, 
sAbout
, 
NO
);

1914 i‡(
sBagid
 || (
me
->
m_bCª©eBags
 && 
¸óãBag
)) {

1915 * 
sName•a˚
 = 
RDFMS
;

1916 i‡(
bOn˚
 && 
sChûdID
) {

1917 * 
tName
 = 
NULL
;

1918 * 
bName
 = 
NULL
;

1919 
bOn˚
 = 
NO
;

1920 i‡(!
des¸ùti⁄
->
m_sBagID
) {

1921 * 
ƒ
 = 
	`HTRDF_√wReifiˇti⁄ID
(
me
);

1922 
	`SåAŒocC›y
(
des¸ùti⁄
->
m_sBagID
, 
ƒ
);

1923 
	`HT_FREE
(
ƒ
);

1925 i‡(!
des¸ùti⁄
->
m_sID
)

1926 
	`SåAŒocC›y
(
des¸ùti⁄
->
m_sID
,

1927 
des¸ùti⁄
->
m_sBagID
);

1928 
	`SåAŒocMC›y
(&
tName
, 
sName•a˚
, "ty≥", 
NULL
);

1929 
	`SåAŒocMC›y
(&
bName
, 
sName•a˚
, "Bag", 
NULL
);

1930 
	`HTRDF_addTrùÀ
(
me
, 
tName
, 
des¸ùti⁄
->
m_sBagID
, 
bName
);

1931 
	`HT_FREE
(
tName
);

1932 
	`HT_FREE
(
bName
);

1935 i‡(
sChûdID
) {

1936 * 
tName
 = 
NULL
;

1937 
si
[20];

1938 
	`•rötf
(
si
, "%d", 
iChûdCou¡
);

1939 
	`SåAŒocMC›y
(&
tName
, 
sName•a˚
, "_", 
si
, 
NULL
);

1940 
	`HTRDF_addTrùÀ
(
me
, 
tName
, 
des¸ùti⁄
->
m_sBagID
, 
sChûdID
);

1941 
iChûdCou¡
++;

1942 
	`HT_FREE
(
tName
);

1945 
	`HT_FREE
(
sChûdID
);

1950 
des¸ùti⁄
->
m_bD⁄e
 = 
YES
;

1952 
	`HT_FREE
(
dName
);

1953 
	`HT_FREE
(
aName
);

1954  (
des¸ùti⁄
->
m_sID
);

1955 
	}
}

1962 
PUBLIC
 
BOOL
 
	$HTRDF_¥o˚ssXML
 (
HTRDF
 *
me
, 
HTEÀmít
 *
ñe
)

1964 i‡(
me
 && 
ñe
) {

1965 i‡(
	`HTRDF_isRDF
(
me
, 
ñe
)) {

1966 i‡(
	`HTRDF_isRDFroŸ
(
me
, 
ñe
)) {

1967 
	`HTRDF_¥o˚ssRDF
(
me
, 
ñe
);

1968 } i‡(
	`HTRDF_isDes¸ùti⁄
(
me
, 
ñe
)) {

1969 
	`HTRDF_¥o˚ssDes¸ùti⁄
(
me
, 
ñe
, 
NO
, me->
m_bCª©eBags
,

1970 
me
->
m_bCª©eBags
);

1973 
HTLi°
 *
cur
 = 
ñe
->
m_chûdªn
;

1974 
HTEÀmít
 *
chûd
 = 
NULL
;

1975 (
chûd
 = (
HTEÀmít
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

1976 
	`HTRDF_¥o˚ssXML
(
me
, 
chûd
);

1982  
YES
;

1984  
NO
;

1985 
	}
}

1991 
PUBLIC
 
HTEÀmít
 * 
	$HTRDF_roŸ
 (
HTRDF
 *
me
)

1993  
me
 ? me->
m_roŸ
 : 
NULL
;

1994 
	}
}

2002 
PUBLIC
 * 
	$HTRDF_«me•a˚
(
HTRDF
 * 
me
, * 
sPªfix
)

2004 * 
nPªfix
 = 
NULL
;

2005 
HTAssocLi°
 * 
ˇli°
;

2006 
HTLi°
 * 
cur
 = 
me
->
m_«me•a˚Sèck
;

2008 i‡(!
sPªfix
)

2009 
	`SåAŒocC›y
(
nPªfix
, "xmlns");

2011 (
ˇli°
 = (
HTAssocLi°
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

2012 * 
sVÆue
 = 
	`HTAssocLi°_födObje˘Ca£SísôiveExa˘
(
ˇli°
, 
sPªfix
);

2013 i‡(
sVÆue
) {

2014 
	`SåAŒocC›y
(
nPªfix
, 
sVÆue
);

2015  
nPªfix
;

2024 i‡(!
	`°rcmp
(
sPªfix
, 
XMLSCHEMA
)) {

2025 
	`SåAŒocC›y
(
nPªfix
, 
sPªfix
);

2026  
nPªfix
;

2027 } i‡(!
	`°rcmp
(
sPªfix
, "xmlns")) {

2028 
	`SåAŒocC›y
(
nPªfix
, "");

2029  
nPªfix
;

2031 
	`HTPröt
("Uƒesﬁved Name•a˚Öªfix %s\n", 
sPªfix
);

2033 
	`SåAŒocC›y
(
nPªfix
, "");

2034  
nPªfix
;

2035 
	}
}

2042 
PUBLIC
 
BOOL
 
	$HTRDF_∑r£LôîÆ
(
HTRDF
 *
me
)

2044 
HTEÀmít
 *
e
 = 
NULL
;

2045 
HTLi°
 *
cur
 = 
me
->
m_ñemítSèck
;

2046 i‡(!
	`HTLi°_isEm±y
(
me
->
m_ñemítSèck
)) {

2047 (
e
 = (
HTEÀmít
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

2048 * 
sP¨£Ty≥
 = 
NULL
;

2049 
sP¨£Ty≥
 = 
	`HTEÀmít_gëAâribuã2
(
e
, 
RDFMS
, "parseType");

2050 i‡(
sP¨£Ty≥
) {

2051 i‡(
	`°rcmp
(
sP¨£Ty≥
, "Resource"))

2052  
YES
;

2056  
NO
;

2057 
	}
}

2064 
PUBLIC
 
BOOL
 
	$HTRDF_∑r£Resour˚
(
HTRDF
 *
me
)

2066 
HTEÀmít
 *
e
 = 
NULL
;

2067 
HTLi°
 *
cur
 = 
me
->
m_ñemítSèck
;

2068 i‡(!
	`HTLi°_isEm±y
(
me
->
m_ñemítSèck
)) {

2069 (
e
 = (
HTEÀmít
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

2070 * 
sP¨£Ty≥
 = 
NULL
;

2071 
sP¨£Ty≥
 = 
	`HTEÀmít_gëAâribuã2
(
e
, 
RDFMS
, "parseType");

2072 i‡(
sP¨£Ty≥
) {

2073 i‡(!
	`°rcmp
(
sP¨£Ty≥
, "Resource"))

2074  
YES
;

2078  
NO
;

2079 
	}
}

2091 
PRIVATE
 
	$HTRDF_checkAâribuãs
(
HTRDF
 *
me
, 
HTEÀmít
 *
e
)

2094 * 
sResour˚
 = 
	`HTEÀmít_gëAâribuã2
(
e
, 
RDFMS
, "resource");

2096 i‡(
sResour˚
 && sResource[0] == '#')

2097 
	`HTRDF_ªsﬁveL©î
(
me
, 
e
);

2100 * 
sAboutEach
 = 
	`HTEÀmít_gëAâribuã2
(
e
, 
RDFMS
, "aboutEach");

2102 i‡(
sAboutEach
 && sAboutEach[0] == '#')

2103 
	`HTRDF_ªsﬁveL©î
(
me
, 
e
);

2106 * 
sAboutEachPªfix
 = 
	`HTEÀmít_gëAâribuã2
(
e
, 
RDFMS
,

2109 i‡(
sAboutEachPªfix
 && sAboutEachPrefix[0] == '#')

2110 
	`HTRDF_ªsﬁveL©î
(
me
, 
e
);

2113 * 
sAbout
 = 
	`HTEÀmít_gëAâribuã2
(
e
, 
RDFMS
, "about");

2114 i‡(
sAbout
) {

2115 i‡(
sAbout
[0] == '#')

2116 
	`HTRDF_ªsﬁveL©î
(
me
, 
e
);

2118 
	`HTRDF_ªgi°îResour˚
(
me
, 
e
);

2123 * 
sBagID
 = 
	`HTEÀmít_gëAâribuã2
(
e
, 
RDFMS
, "bagID");

2125 i‡(
sBagID
) {

2126 
	`HTRDF_ªgi°îID
(
me
, 
sBagID
, 
e
);

2127 
	`SåAŒocC›y
(
e
->
m_sBagID
, 
sBagID
);

2131 * 
sID
 = 
	`HTEÀmít_gëAâribuã2
(
e
, 
RDFMS
, "ID");

2132 i‡(
sID
) {

2133 
	`HTRDF_ªgi°îID
(
me
, 
sID
, 
e
);

2134 
	`SåAŒocC›y
(
e
->
m_sID
, 
sID
);

2137 
	}
}

2142 
PUBLIC
 
	$HTRDF_ªsﬁveL©î
(
HTRDF
 *
me
, 
HTEÀmít
 *
e
)

2144 
	`HTLi°_addObje˘
(
me
->
m_vResﬁveQueue
, 
e
);

2145 
	}
}

2151 
PUBLIC
 
	$HTRDF_ªgi°îID
(
HTRDF
 *
me
, * 
sID
, 
HTEÀmít
 *
e
)

2153 i‡(
	`HTHashèbÀ_obje˘
(
me
->
m_hIDèbÀ
, 
sID
))

2154 
	`HTPröt
("NodêID %†ªdeföed", 
sID
);

2155 
	`HTHashèbÀ_addObje˘
(
me
->
m_hIDèbÀ
, 
sID
, 
e
);

2156 
	}
}

2161 
PUBLIC
 
	$HTRDF_ªgi°îResour˚
(
HTRDF
 *
me
, 
HTEÀmít
 *
e
)

2163 
	`HTLi°_addObje˘
(
me
->
m_vResour˚s
, 
e
);

2164 
	}
}

2171 
PUBLIC
 
HTEÀmít
 *
	$HTRDF_lookf‹Node
(
HTRDF
 *
me
, * 
sID
)

2173 i‡(
sID
)

2174  (
HTEÀmít
 *Ë
	`HTHashèbÀ_obje˘
(
me
->
m_hIDèbÀ
, 
sID
);

2175  
NULL
;

2176 
	}
}

2181 
PUBLIC
 * 
	$HTRDF_gëResour˚
(
HTRDF
 *
me
, 
HTEÀmít
 *
e
)

2183 * 
sResour˚
 = 
	`HTEÀmít_gëAâribuã2
(
e
, 
RDFMS
, "resource");

2184 i‡(
sResour˚
 !
NULL
 && sResource[0] == '\0')

2185 
sResour˚
 = 
me
->
m_sSour˚
;

2186  
sResour˚
;

2187 
	}
}

2195 
PRIVATE
 
BOOL
 
	$HTRDF_ex∑ndAâribuãs
 (
HTRDF
 * 
me
, 
HTEÀmít
 * 
∑ª¡
, HTEÀmíà* 
ñe
)

2197 
BOOL
 
foundAbbªvüti⁄
 = 
NO
;

2198 * 
sAâribuã
 = 
NULL
;

2199 * 
sVÆue
 = 
NULL
;

2200 
HTAssoc
 * 
assoc
;

2201 
HTAssocLi°
 * 
cur
 = 
ñe
->
m_©åibuãs
;

2202 
lxmlschema
 = 
	`°æí
(
XMLSCHEMA
);

2203 
Ãdfms
 = 
	`°æí
(
RDFMS
);

2205 (
assoc
(
HTAssoc
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

2206 
œâ
;

2207 
sAâribuã
 = 
	`HTAssoc_«me
(
assoc
);

2208 
sVÆue
 = 
	`HTAssoc_vÆue
(
assoc
);

2210 
œâ
 = 
	`°æí
(
sAâribuã
);

2211 i‡(!
	`°∫cmp
(
sAâribuã
, 
XMLSCHEMA
, 
lxmlschema
))

2214 i‡(!
	`°∫cmp
(
sAâribuã
, 
RDFMS
, 
Ãdfms
) &&

2215 (
sAâribuã
[
Ãdfms
]!='_') &&

2216 
œâ
 > 5 && 
	`°rcmp
(&(
sAâribuã
[latt-5]), "value") &&

2217 
	`°rcmp
(&(
sAâribuã
[
œâ
-4]), "type"))

2220 i‡(
	`°æí
(
sVÆue
) > 0) {

2221 
HTAssocLi°
 * 
√wAL
 = 
	`HTAssocLi°_√w
();

2222 
HTEÀmít
 * 
√wEÀmít
 = 
	`HTEÀmít_√w
(
sAâribuã
, 
√wAL
);

2223 
HTEÀmít
 * 
√wD©a
 = 
	`HTEÀmít_√w2
(
sVÆue
);

2224 
	`HTEÀmít_addChûd
(
√wEÀmít
, 
√wD©a
);

2225 
	`HTEÀmít_addChûd
(
∑ª¡
, 
√wEÀmít
);

2226 
foundAbbªvüti⁄
 = 
YES
;

2229  
foundAbbªvüti⁄
;

2230 
	}
}

2236 
PUBLIC
 * 
	$HTRDF_√wReifiˇti⁄ID
 (
HTRDF
 *
me
)

2238 * 
nsid
 = 
NULL
;

2239 
n§c
[20];

2240 
me
->
m_iReifiˇti⁄Cou¡î
++;

2241 
	`•rötf
(
n§c
, "%d", 
me
->
m_iReifiˇti⁄Cou¡î
);

2242 i‡(!
me
->
m_sSour˚
) {

2243 
	`SåAŒocMC›y
(&
nsid
, "gíid", 
n§c
, 
NULL
);

2245 
	`SåAŒocMC›y
(&
nsid
, 
me
->
m_sSour˚
, "#gíid", 
n§c
, 
NULL
);

2247  
nsid
;

2248 
	}
}

2255 
PRIVATE
 * 
	$HTRDF_ªifiˇã
(
HTRDF
 *
me
, * 
sPªdiˇã
, * 
sSubje˘
,

2256 * 
sObje˘
, * 
sNodeID
)

2258 * 
sName
 = 
NULL
;

2259 * 
pName
 = 
NULL
;

2260 * 
oName
 = 
NULL
;

2261 * 
tName
 = 
NULL
;

2262 * 
°Name
 = 
NULL
;

2263 * 
tNodeID
 = 
NULL
;

2265 i‡(!
sNodeID
)

2266 
tNodeID
 = 
	`HTRDF_√wReifiˇti⁄ID
(
me
);

2268 
	`SåAŒocC›y
(
tNodeID
, 
sNodeID
);

2270 
	`SåAŒocMC›y
(&
sName
, 
RDFMS
, "subje˘", 
NULL
);

2271 
	`SåAŒocMC›y
(&
pName
, 
RDFMS
, "¥ediˇã", 
NULL
);

2272 
	`SåAŒocMC›y
(&
oName
, 
RDFMS
, "obje˘", 
NULL
);

2273 
	`SåAŒocMC›y
(&
tName
, 
RDFMS
, "ty≥", 
NULL
);

2274 
	`SåAŒocMC›y
(&
°Name
, 
RDFMS
, "Sèãmít", 
NULL
);

2279 
	`HTRDF_addTrùÀ
(
me
, 
sPªdiˇã
, 
sSubje˘
, 
sObje˘
);

2284 i‡(
	`°rcmp
(
sPªdiˇã
, 
sName
Ë&& såcmp(sPªdiˇã, 
pName
) &&

2285 
	`°rcmp
(
sPªdiˇã
, 
oName
Ë&& såcmp(sPªdiˇã, 
tName
)) {

2288 
	`HTRDF_addTrùÀ
(
me
, 
pName
, 
tNodeID
, 
sPªdiˇã
);

2289 
	`HTRDF_addTrùÀ
(
me
, 
sName
, 
tNodeID
, (
sSubje˘
[0]=='\0' ? me->
m_sSour˚
: sSubject));

2290 
	`HTRDF_addTrùÀ
(
me
, 
oName
, 
tNodeID
, 
sObje˘
);

2291 
	`HTRDF_addTrùÀ
(
me
, 
tName
, 
tNodeID
, 
°Name
);

2293 
	`HT_FREE
(
tNodeID
);

2295 
	`HT_FREE
(
sName
);

2296 
	`HT_FREE
(
pName
);

2297 
	`HT_FREE
(
oName
);

2298 
	`HT_FREE
(
tName
);

2299 
	`HT_FREE
(
°Name
);

2301  
tNodeID
;

2302 
	}
}

2308 
PUBLIC
 
	$HTRDF_addTrùÀ
 (
HTRDF
 *
me
, * 
sPªdiˇã
, * 
sSubje˘
,

2309 * 
sObje˘
)

2311 
HTTrùÀ
 *
t
 = 
NULL
;

2317 i‡(!
sPªdiˇã
 || !
sSubje˘
 || !
sObje˘
) {

2318 
	`HTPröt
("Predicate %s when subject %sánd object %s \n",

2319 
sPªdiˇã
 ? sPredicate : "null",

2320 
sSubje˘
 ? sSubject : "null",

2321 
sObje˘
 ? sObject : "null");

2325 i‡(
sSubje˘
[0]=='\0')

2326 
sSubje˘
 = 
me
->
m_sSour˚
;

2328 
t
 = 
	`HTTrùÀ_√w
(
sPªdiˇã
, 
sSubje˘
, 
sObje˘
);

2331 i‡(
me
->
√wTrùÀIn°™˚
 && 
t
Ë(*(me->√wTrùÀIn°™˚))(me,Å, me->
åùÀC⁄ãxt
);

2333 
	`HTLi°_addObje˘
(
me
->
m_åùÀs
, 
t
);

2334 
	}
}

2342 
PUBLIC
 
	$HTRDF_¸óãBags
(
HTRDF
 *
me
, 
BOOL
 
b
)

2344 i‡(
me
)

2345 
me
->
m_bCª©eBags
 = 
b
;

2346 
	}
}

2352 
PUBLIC
 
	$HTRDF_£tOuçutSåóm
(
HTRDF
 *
me
, 
HTSåóm
 *
o°ªam
)

2354 i‡(
me
)

2355 
me
->
o°ªam
 = ostream;

2356 
	}
}

2358 
PUBLIC
 
BOOL
 
	$HTRDF_ªgi°îNewTrùÀCÆlback
 (
HTRDF
 * 
me
, 
HTTrùÀCÆlback_√w
 * 
cbf
, * 
c⁄ãxt
)

2360 i‡(
me
) {

2361 
me
->
√wTrùÀIn°™˚
 = 
cbf
;

2362 
me
->
åùÀC⁄ãxt
 = 
c⁄ãxt
;

2363  
YES
;

2365  
NO
;

2366 
	}
}

2368 
PUBLIC
 
BOOL
 
	$HTRDF_ªgi°îNewP¨£rCÆlback
 (
HTRDFCÆlback_√w
 * 
me
, * 
c⁄ãxt
)

2370 
RDFIn°™˚
 = 
me
;

2371 
RDFIn°™˚C⁄ãxt
 = 
c⁄ãxt
;

2372  
YES
;

2373 
	}
}

2379 
PRIVATE
 
	$gíî©e_åùÀs
(
HTSåóm
 *
me
)

2381 
HTRDF
 *
rdÂ
 = 
me
 ? me->
rdÂ¨£r
 : 
NULL
;

2382 i‡(
rdÂ
) {

2384 
	`HTRDF_ªsﬁve
(
rdÂ
);

2386 
	`HTRDF_¥o˚ssXML
(
rdÂ
, 
	`HTRDF_roŸ
(rdfp));

2388  
HT_OK
;

2390  
HT_ERROR
;

2391 
	}
}

2393 
PRIVATE
 
	$HTRDFTrùÀs_Êush
 (
HTSåóm
 * 
me
)

2395 i‡(
me
->
èrgë
)

2396  (*
me
->
èrgë
->
iß
->
Êush
)(me->target);

2397  
HT_OK
;

2398 
	}
}

2400 
PRIVATE
 
	$HTRDFTrùÀs_‰ì
 (
HTSåóm
 * 
me
)

2402 
°©us
 = 
HT_OK
;

2404 
°©us
 = 
	`gíî©e_åùÀs
(
me
);

2406 
	`HTRDF_dñëe
(
me
->
rdÂ¨£r
);

2408 i‡(
me
->
èrgë
) {

2409 i‡((
°©us
 = (*
me
->
èrgë
->
iß
->
_‰ì
)(me->èrgë)Ë=
HT_WOULD_BLOCK
)

2410  
HT_WOULD_BLOCK
;

2412 
	`HTTRACE
(
XML_TRACE
, "RDF Parser.. FREEING...\n");

2413 
	`HT_FREE
(
me
);

2414  
°©us
;

2415 
	}
}

2417 
PRIVATE
 
	$HTRDFTrùÀs_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

2419 
	`HTTRACE
(
XML_TRACE
, "RDF Parser.. ABORTING...\n");

2420 
	`HTRDF_dñëe
(
me
->
rdÂ¨£r
);

2421 i‡(
me
->
èrgë
)

2422 (*
me
->
èrgë
->
iß
->
ab‹t
)(me->èrgë, 
NULL
);

2423 
	`HT_FREE
(
me
);

2424  
HT_ERROR
;

2425 
	}
}

2427 
PRIVATE
 
	$HTRDFTrùÀs_wrôe
 (
HTSåóm
 * 
me
, c⁄° * 
buf
, 
Àn
)

2429  
HT_OK
;

2430 
	}
}

2432 
PRIVATE
 
	$HTRDFTrùÀs_putCh¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

2434  
	`HTRDFTrùÀs_wrôe
(
me
, &
c
, 1);

2435 
	}
}

2437 
PRIVATE
 
	$HTRDFTrùÀs_putSåög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

2439  
	`HTRDFTrùÀs_wrôe
(
me
, 
s
, (Ë
	`°æí
(s));

2440 
	}
}

2442 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTRDFTrùÀsCœss
 =

2445 
HTRDFTrùÀs_Êush
,

2446 
HTRDFTrùÀs_‰ì
,

2447 
HTRDFTrùÀs_ab‹t
,

2448 
HTRDFTrùÀs_putCh¨a˘î
,

2449 
HTRDFTrùÀs_putSåög
,

2450 
HTRDFTrùÀs_wrôe


2453 
PRIVATE
 
HTSåóm
 * 
	$RDFP¨£r_√w
 (
HTReque°
 * 
ªque°
,

2454 * 
∑øm
,

2455 
HTF‹m©
 
öput_f‹m©
,

2456 
HTF‹m©
 
ouçut_f‹m©
,

2457 
HTSåóm
 * 
ouçut_°ªam
)

2459 
HTSåóm
 * 
me
 = 
NULL
;

2460 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

2461 
	`HT_OUTOFMEM
("HTRDFTriples_new");

2462 
me
->
iß
 = &
HTRDFTrùÀsCœss
;

2463 
me
->
°©e
 = 
HT_OK
;

2464 
me
->
ªque°
 =Ñequest;

2465 
me
->
èrgë
 = 
ouçut_°ªam
 ? ouçut_°ªam : 
	`HTEº‹Såóm
();

2468 i‡((
me
->
rdÂ¨£r
 = 
	`HTRDF_√w
()Ë=
NULL
) {

2469 
	`HT_FREE
(
me
);

2470  
	`HTEº‹Såóm
();

2475 * 
uri
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
	`HTReque°_™ch‹
(
ªque°
));

2476 
	`HTRDF_£tSour˚
(
me
->
rdÂ¨£r
, 
uri
);

2477 
	`HT_FREE
(
uri
);

2481 
	`HTRDF_£tOuçutSåóm
(
me
->
rdÂ¨£r
, me);

2484 
	`HTRDF_¸óãBags
(
me
->
rdÂ¨£r
, 
NO
);

2488 
	`HTXMLCÆlback_ªgi°îNew
(
rdf_√wIn°™˚
, 
me
->
rdÂ¨£r
);

2490 
	`HTTRACE
(
XML_TRACE
, "RDF Parser.. Stream created\n");

2492  
me
;

2493 
	}
}

2495 
PUBLIC
 
HTSåóm
 * 
	$HTRDFP¨£r_√w
 (
HTReque°
 * 
ªque°
,

2496 * 
∑øm
,

2497 
HTF‹m©
 
öput_f‹m©
,

2498 
HTF‹m©
 
ouçut_f‹m©
,

2499 
HTSåóm
 * 
ouçut_°ªam
)

2501  
	`HTXML_√w
(
ªque°
, 
∑øm
, 
öput_f‹m©
, 
ouçut_f‹m©
,

2502 
	`RDFP¨£r_√w
(
ªque°
, 
∑øm
, 
öput_f‹m©
, 
ouçut_f‹m©
, 
ouçut_°ªam
));

2503 
	}
}

2505 
PRIVATE
 
	$åùÀ_√wIn°™˚
 (
HTRDF
 * 
rdÂ
, 
HTTrùÀ
 * 
t
, * 
c⁄ãxt
)

2507 i‡(
rdÂ
 && 
t
) {

2508 
HTSåóm
 *
o°ªam
 = 
rdÂ
->ostream;

2509 i‡(
o°ªam
) {

2510 
	`PUTC
(
o°ªam
,'(');

2511 
	`PUTS
(
o°ªam
, 
t
->
m_sPªdiˇã
);

2512 
	`PUTC
(
o°ªam
,',');

2513 
	`PUTS
(
o°ªam
, 
t
->
m_sSubje˘
);

2514 
	`PUTC
(
o°ªam
,',');

2515 
	`PUTS
(
o°ªam
, 
t
->
m_sObje˘
);

2516 
	`PUTC
(
o°ªam
,')');

2517 
	`PUTC
(
o°ªam
,'\n');

2520 
	}
}

2522 
PUBLIC
 
HTSåóm
 * 
	$HTRDFToTrùÀs
 (
HTReque°
 * 
ªque°
,

2523 * 
∑øm
,

2524 
HTF‹m©
 
öput_f‹m©
,

2525 
HTF‹m©
 
ouçut_f‹m©
,

2526 
HTSåóm
 * 
ouçut_°ªam
)

2528 
HTSåóm
 * 
me
 = 
	`RDFP¨£r_√w
(
ªque°
, 
∑øm
, 
öput_f‹m©
, 
ouçut_f‹m©
, 
ouçut_°ªam
);

2529 
	`HTTRACE
(
XML_TRACE
, "RDF Converter. To Triples\n");

2532 
	`HTRDF_ªgi°îNewTrùÀCÆlback
(
me
->
rdÂ¨£r
, 
åùÀ_√wIn°™˚
, 
NULL
);

2535  
	`HTXML_√w
(
ªque°
, 
∑øm
, 
öput_f‹m©
, 
ouçut_f‹m©
, 
me
);

2536 
	}
}

2566 
PRIVATE
 
BOOL
 
	$öôülize_∑r£rs
(
XML_P¨£r
 *
xmÕ¨£r
, 
HTRDF
 **
rdÂ¨£r
,

2567 
HTSåóm
 **
°ªam
, **
uri
, 
HTTrùÀCÆlback_√w
 * 
√w_åùÀ_ˇŒback
,

2568 *
c⁄ãxt
, c⁄° * 
«me
)

2571 #ifde‡
USE_NS


2572 *
xmÕ¨£r
 = 
	`XML_P¨£rCª©eNS
 (
NULL
, ':');

2574 *
xmÕ¨£r
 = 
	`XML_P¨£rCª©e
 (
NULL
);

2577 i‡(!*
xmÕ¨£r
) {

2578 
	`HTTRACE
(
XML_TRACE
, "RDF_Parser. CouldÇotállocate memory for XMLÖarser.\n");

2579  
NO
;

2583 *
rdÂ¨£r
 = 
	`HTRDF_√w
();

2584 i‡(!*
rdÂ¨£r
) {

2585 
	`XML_P¨£rFªe
(*
xmÕ¨£r
);

2586 
	`HTTRACE
(
XML_TRACE
, "RDF_Parser. CouldÇotállocate memory for RDFÖarser.\n");

2587  
NO
;

2591 *
uri
 = 
	`HTLoˇlToWWW
 (
«me
, "file:");

2592 
	`HTRDF_£tSour˚
(*
rdÂ¨£r
, *
uri
);

2594 
	`HTRDF_¸óãBags
(*
rdÂ¨£r
, 
NO
);

2596 i‡(
√w_åùÀ_ˇŒback
)

2597 
	`HTRDF_ªgi°îNewTrùÀCÆlback
(*
rdÂ¨£r
, 
√w_åùÀ_ˇŒback
, 
c⁄ãxt
);

2599 
	`HTRDF_ªgi°îNewTrùÀCÆlback
(*
rdÂ¨£r
, 
åùÀ_√wIn°™˚
, 
c⁄ãxt
);

2601 
	`rdf_£tH™dÀrs
(*
xmÕ¨£r
);

2602 
	`XML_SëU£rD©a
(*
xmÕ¨£r
, *
rdÂ¨£r
);

2605 i‡((*
°ªam
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
) {

2606 
	`HT_FREE
(*
uri
);

2607 
	`XML_P¨£rFªe
(*
xmÕ¨£r
);

2608 
	`HTRDF_dñëe
(*
rdÂ¨£r
);

2609 
	`HTTRACE
(
XML_TRACE
, "RDF_Parser. CouldÇotállocate memory for HTStream.\n");

2610  
NO
;

2612 (*
°ªam
)->
iß
 = &
HTRDFTrùÀsCœss
;

2613 (*
°ªam
)->
°©e
 = 
HT_OK
;

2614 (*
°ªam
)->
ªque°
 = 
NULL
;

2615 (*
°ªam
)->
èrgë
 = 
NULL
;

2616 (*
°ªam
)->
rdÂ¨£r
 = *rdfparser;

2618  
YES
;

2619 
	}
}

2639 
PUBLIC
 
BOOL
 
	$HTRDF_∑r£Fûe
 (c⁄° *
fûe_«me
,

2640 
HTTrùÀCÆlback_√w
 * 
√w_åùÀ_ˇŒback
, *
c⁄ãxt
)

2642 
buff
[512];

2643 
FILE
 *
Â
;

2644 
XML_P¨£r
 
xmÕ¨£r
;

2645 
HTRDF
 *
rdÂ¨£r
;

2646 
HTSåóm
 * 
°ªam
 = 
NULL
;

2647 *
uri
 = 
NULL
;

2648 
BOOL
 
°©us
;

2651 i‡(!
fûe_«me
) {

2652 
	`HTTRACE
(
XML_TRACE
, "HTRDF_parseFile. file_name is NULL\n");

2653  
NO
;

2657 
Â
 = 
	`f›í
 (
fûe_«me
, "r");

2658 i‡(!
Â
) {

2659 
	`HTTRACE
(
XML_TRACE
, "HTRDF_parseFile. File open failed.");

2660  
NO
;

2664 
°©us
 = 
	`öôülize_∑r£rs
(&
xmÕ¨£r
, &
rdÂ¨£r
, &
°ªam
, &
uri
,

2665 
√w_åùÀ_ˇŒback
, 
c⁄ãxt
, 
fûe_«me
);

2666 i‡(!
°©us
) {

2667 
	`f˛o£
 (
Â
);

2668  
NO
;

2676 
d⁄e
;

2677 
buff_Àn
;

2678 
	`fgës
(
buff
, (buff), 
Â
);

2679 i‡(
	`„º‹
(
Â
)) {

2680 
	`HT_FREE
(
uri
);

2681 
	`f˛o£
 (
Â
);

2682 
	`XML_P¨£rFªe
(
xmÕ¨£r
);

2683 
	`HTRDF_dñëe
(
rdÂ¨£r
);

2684 
	`HT_FREE
(
°ªam
);

2685 
	`HTTRACE
(
XML_TRACE
, "HTRDF_parseFile. ErrorÑeading file.");

2686  
NO
;

2688 
d⁄e
 = 
	`„of
(
Â
);

2689 i‡(
d⁄e
)

2690 
buff_Àn
 = 0;

2692 
buff_Àn
 = 
	`°æí
 (
buff
);

2693 i‡(! 
	`XML_P¨£
(
xmÕ¨£r
, 
buff
, 
buff_Àn
, 
d⁄e
)) {

2694 
	`Ârötf
 (
°dîr
, "ParseÉrrorátÜine %d:\n%s\n",

2695 
	`XML_GëCuºítLöeNumbî
(
xmÕ¨£r
),

2696 
	`XML_Eº‹Såög
(
	`XML_GëEº‹Code
(
xmÕ¨£r
)));

2697 
	`HT_FREE
(
uri
);

2698 
	`f˛o£
(
Â
);

2699 
	`XML_P¨£rFªe
(
xmÕ¨£r
);

2700 
	`HTRDF_dñëe
(
rdÂ¨£r
);

2701 
	`HT_FREE
(
°ªam
);

2702 
	`HTTRACE
(
XML_TRACE
, "HTRDF_parseFile. ParseÉrror.");

2703  
NO
;

2705 i‡(
d⁄e
)

2710 
	`gíî©e_åùÀs
(
°ªam
);

2713 
	`HT_FREE
(
uri
);

2714 
	`f˛o£
 (
Â
);

2715 
	`XML_P¨£rFªe
(
xmÕ¨£r
);

2716 
	`HTRDF_dñëe
(
rdÂ¨£r
);

2717 
	`HT_FREE
(
°ªam
);

2719  
YES
;

2720 
	}
}

2743 
PUBLIC
 
BOOL
 
	$HTRDF_∑r£Buf„r
 (c⁄° *
buf„r
, c⁄° *
buf„r_«me
,

2744 
buf„r_Àn
, 
HTTrùÀCÆlback_√w
 * 
√w_åùÀ_ˇŒback
, *
c⁄ãxt
)

2746 
XML_P¨£r
 
xmÕ¨£r
;

2747 
HTRDF
 *
rdÂ¨£r
;

2748 
HTSåóm
 * 
°ªam
 = 
NULL
;

2749 *
uri
;

2750 
BOOL
 
°©us
;

2753 i‡(!
buf„r
) {

2754 
	`HTTRACE
(
XML_TRACE
, "HTRDF_parseBuffer. buffer is NULL");

2755  
NO
;

2757 i‡(
buf„r_Àn
 <= 0) {

2758 
	`HTTRACE
(
XML_TRACE
, "HTRDF_parseBuffer. buffer_len is <=0");

2759  
NO
;

2761 i‡(!
buf„r_«me
) {

2762 
	`HTTRACE
(
XML_TRACE
, "HTRDF_parseBuffer. buffer_name is NULL");

2763  
NO
;

2766 
°©us
 = 
	`öôülize_∑r£rs
(&
xmÕ¨£r
, &
rdÂ¨£r
, &
°ªam
, &
uri
,

2767 
√w_åùÀ_ˇŒback
, 
c⁄ãxt
, 
buf„r_«me
);

2768 i‡(!
°©us
)

2769  
NO
;

2771 i‡(! 
	`XML_P¨£
(
xmÕ¨£r
, 
buf„r
, 
buf„r_Àn
, 1)) {

2772 
	`Ârötf
(
°dîr
, "ParseÉrrorátÜine %d:\n%s\n",

2773 
	`XML_GëCuºítLöeNumbî
(
xmÕ¨£r
),

2774 
	`XML_Eº‹Såög
(
	`XML_GëEº‹Code
(
xmÕ¨£r
)));

2775 
	`HT_FREE
(
uri
);

2776 
	`XML_P¨£rFªe
(
xmÕ¨£r
);

2777 
	`HTRDF_dñëe
(
rdÂ¨£r
);

2778 
	`HT_FREE
(
°ªam
);

2779 
	`HTTRACE
(
XML_TRACE
, "HTRDF_parseBuffer. ParseÉrror.");

2780  
NO
;

2784 
	`gíî©e_åùÀs
(
°ªam
);

2787 
	`HT_FREE
(
uri
);

2788 
	`XML_P¨£rFªe
(
xmÕ¨£r
);

2789 
	`HTRDF_dñëe
(
rdÂ¨£r
);

2790 
	`HT_FREE
(
°ªam
);

2792  
YES
;

2793 
	}
}

	@Library/src/HTRDF.h

24 #i‚de‡
HTRDF_H


25 
	#HTRDF_H


	)

27 
	~"HTHash.h
"

29 
	#RDFMS
 "hâp://www.w3.‹g/1999/02/22-rdf-sy¡ax-ns#"

	)

30 
	#RDFSCHEMA
 "hâp://www.w3.‹g/TR/WD-rdf-schema#"

	)

31 
	#XMLSCHEMA
 "xml"

	)

39 
_HTTrùÀ
 
	tHTTrùÀ
;

41 
HTTrùÀ
 * 
HTTrùÀ_√w
 (* 
p
, * 
s
, * 
o
);

42 
BOOL
 
HTTrùÀ_dñëe
 (
HTTrùÀ
 * 
me
);

43 
HTTrùÀ_¥öt
 (
HTTrùÀ
 * 
me
);

44 * 
HTTrùÀ_subje˘
 (
HTTrùÀ
 * 
me
);

45 * 
HTTrùÀ_¥ediˇã
 (
HTTrùÀ
 * 
me
);

46 * 
HTTrùÀ_obje˘
 (
HTTrùÀ
 * 
me
);

54 
_HTEÀmít
 
	tHTEÀmít
;

56 
HTEÀmít
 * 
HTEÀmít_√w
 (* 
sName
, 
HTAssocLi°
 * 
Æ
);

57 
HTEÀmít
 * 
HTEÀmít_√w2
 (* 
sC⁄ã¡
);

58 
BOOL
 
HTEÀmít_addD©a
 (
HTEÀmít
 *
me
, * 
sC⁄ã¡
);

59 
BOOL
 
HTEÀmít_dñëe
 (
HTEÀmít
 * 
me
);

60 
BOOL
 
HTEÀmít_addChûd
 (
HTEÀmít
 * 
me
, HTEÀmíà* 
ñemít
);

61 
BOOL
 
HTEÀmít_addAâribuã
 (
HTEÀmít
 * 
me
, * 
sName
, * 
sVÆue
);

62 
BOOL
 
HTEÀmít_ªmoveAâribuã
 (
HTEÀmít
 * 
me
, * 
sName
);

63 * 
HTEÀmít_gëAâribuã
 (
HTEÀmít
 * 
me
, * 
sName
);

64 * 
HTEÀmít_gëAâribuã2
 (
HTEÀmít
 * 
me
, * 
sName•a˚
, * 
sName
);

65 
BOOL
 
HTEÀmít_addT¨gë
 (
HTEÀmít
 * 
me
, HTEÀmíà* 
ñemít
);

66 
HTEÀmít
 * 
HTEÀmít_èrgë
 (HTEÀmíà* 
me
);

67 
BOOL
 
HTEÀmít_ö°™˚OfD©a
 (
HTEÀmít
 * 
me
);

80 
_HTRDFP¨£r
 
	tHTRDF
;

82 
HTRDF
 * 
HTRDF_√w
 ();

83 
BOOL
 
HTRDF_dñëe
 (
HTRDF
 * 
me
);

98 
	tHTRDFCÆlback_√w
 (

99 
	tHTSåóm
 * 
	tme
,

100 
	tHTReque°
 * 
	tªque°
,

101 
	tHTF‹m©
 
	tèrgë_f‹m©
,

102 
	tHTSåóm
 * 
	tèrgë_°ªam
,

103 
	tHTRDF
 * 
	trdÂ¨£r
,

104 * 
	tc⁄ãxt
);

114 
BOOL
 
HTRDF_ªgi°îNewP¨£rCÆlback
 (
HTRDFCÆlback_√w
 *, * 
c⁄ãxt
);

124 
	tHTTrùÀCÆlback_√w
 (

125 
	tHTRDF
 * 
	trdÂ
,

126 
	tHTTrùÀ
 * 
	tt
,

127 * 
	tc⁄ãxt
);

135 
BOOL
 
HTRDF_ªgi°îNewTrùÀCÆlback
 (

136 
HTRDF
 * 
me
,

137 
HTTrùÀCÆlback_√w
 * 
cbf
,

138 * 
c⁄ãxt
);

148 
BOOL
 
HTRDF_£tSour˚
 (
HTRDF
 * 
me
, * 
sour˚
);

159 
BOOL
 
HTRDF_ªsﬁve
(
HTRDF
 *
me
);

170 
BOOL
 
HTRDF_¥o˚ssXML
(
HTRDF
 *
me
, 
HTEÀmít
 *
roŸ
);

180 
HTEÀmít
 * 
HTRDF_roŸ
(
HTRDF
 *
me
);

191 * 
HTRDF_«me•a˚
 (
HTRDF
 * 
me
, * 
sPªfix
);

202 
BOOL
 
HTRDF_∑r£LôîÆ
(
HTRDF
 *
me
);

203 
BOOL
 
HTRDF_∑r£Resour˚
(
HTRDF
 *
me
);

213 
HTRDF_ªsﬁveL©î
(
HTRDF
 *
me
,
HTEÀmít
 *
e
);

224 
HTRDF_ªgi°îID
(
HTRDF
 *
me
, * 
sID
,
HTEÀmít
 *
e
);

235 
HTRDF_ªgi°îResour˚
(
HTRDF
 *
me
,
HTEÀmít
 *
e
);

246 
HTEÀmít
 *
HTRDF_lookf‹Node
(
HTRDF
 *
me
, * 
sID
);

258 
BOOL
 
HTRDF_isRDF
(
HTRDF
 *
me
, 
HTEÀmít
 *
ñe
);

259 
BOOL
 
HTRDF_isRDFroŸ
(
HTRDF
 *
me
, 
HTEÀmít
 *
ñe
);

267 
BOOL
 
HTRDF_isDes¸ùti⁄
(
HTRDF
 *
me
, 
HTEÀmít
 *
ñe
);

277 
BOOL
 
HTRDF_isTy≥dPªdiˇã
(
HTRDF
 *
me
, 
HTEÀmít
 *
e
);

285 
BOOL
 
HTRDF_isC⁄èöî
(
HTRDF
 *
me
, 
HTEÀmít
 *
e
);

293 
BOOL
 
HTRDF_isBag
(
HTRDF
 *
me
, 
HTEÀmít
 *
e
);

301 
BOOL
 
HTRDF_isA…î«tive
(
HTRDF
 *
me
, 
HTEÀmít
 *
e
);

309 
BOOL
 
HTRDF_isSequí˚
(
HTRDF
 *
me
, 
HTEÀmít
 *
e
);

317 
BOOL
 
HTRDF_isLi°Iãm
 (
HTRDF
 *
me
, 
HTEÀmít
 *
e
);

325 
BOOL
 
HTRDF_¥o˚ssRDF
(
HTRDF
 *
me
, 
HTEÀmít
 *
ñe
);

354 * 
HTRDF_¥o˚ssDes¸ùti⁄
 (

355 
HTRDF
 * 
me
,

356 
HTEÀmít
 * 
des¸ùti⁄
,

357 
BOOL
 
öPªdiˇã
,

358 
BOOL
 
ªifiˇã
,

359 
BOOL
 
¸óãBag
);

367 * 
HTRDF_¥o˚ssTy≥dNode
(
HTRDF
 *
me
, 
HTEÀmít
 *
e
);

375 * 
HTRDF_gëResour˚
(
HTRDF
 *
me
,
HTEÀmít
 *
e
);

385 * 
HTRDF_√wReifiˇti⁄ID
 (
HTRDF
 *
me
);

395 
HTRDF_addTrùÀ
 (
HTRDF
 *
me
, * 
sPªdiˇã
, * 
sSubje˘
,

396 * 
sObje˘
);

407 
HTRDF_¸óãBags
 (
HTRDF
 *
me
, 
BOOL
 
b
);

417 
HTRDF_£tOuçutSåóm
 (
HTRDF
 *
me
, 
HTSåóm
 *
o°ªam
);

436 
HTC⁄vîãr
 
HTRDFP¨£r_√w
;

448 
HTC⁄vîãr
 
HTRDFToTrùÀs
;

467 
BOOL
 
HTRDF_∑r£Fûe
 (c⁄° *
fûe_«me
,

468 
HTTrùÀCÆlback_√w
 * 
√w_åùÀ_ˇŒback
,

469 *
c⁄ãxt
);

486 
BOOL
 
HTRDF_∑r£Buf„r
 (c⁄° *
buf„r
,

487 c⁄° *
buf„r_«me
,

488 
buf„r_Àn
,

489 
HTTrùÀCÆlback_√w
 * 
√w_åùÀ_ˇŒback
,

490 *
c⁄ãxt
);

	@Library/src/HTReader.c

13 
	~"wwwsys.h
"

14 
	~"WWWUtû.h
"

15 
	~"WWWC‹e.h
"

16 
	~"HTNëM™.h
"

17 
	~"HTRódî.h
"

19 
	s_HTSåóm
 {

20 c⁄° 
HTSåómCœss
 * 
	miß
;

24 
	s_HTI≈utSåóm
 {

25 c⁄° 
HTI≈utSåómCœss
 * 
	miß
;

26 
HTCh™√l
 * 
	mch
;

27 
HTHo°
 * 
	mho°
;

28 * 
	mwrôe
;

29 * 
	mªad
;

30 
	mb_ªad
;

31 
	md©a
 [
INPUT_BUFFER_SIZE
];

36 
PRIVATE
 
	$HTRódî_Êush
 (
HTI≈utSåóm
 * 
me
)

38 
HTNë
 * 
√t
 = 
	`HTHo°_gëRódNë
(
me
->
ho°
);

39  
√t
 &&Çë->
ªadSåóm
 ? (*√t->ªadSåóm->
iß
->
Êush
)“ë->ªadSåómË: 
HT_OK
;

40 
	}
}

42 
PRIVATE
 
	$HTRódî_‰ì
 (
HTI≈utSåóm
 * 
me
)

44 
HTNë
 * 
√t
 = 
	`HTHo°_gëRódNë
(
me
->
ho°
);

45 i‡(
√t
 &&Çë->
ªadSåóm
) {

46 
°©us
 = (*
√t
->
ªadSåóm
->
iß
->
_‰ì
)(net->readStream);

47 i‡(
°©us
 =
HT_OK
Ë
√t
->
ªadSåóm
 = 
NULL
;

48  
°©us
;

50  
HT_OK
;

51 
	}
}

53 
PRIVATE
 
	$HTRódî_ab‹t
 (
HTI≈utSåóm
 * 
me
, 
HTLi°
 * 
e
)

55 
HTNë
 * 
√t
 = 
	`HTHo°_gëRódNë
(
me
->
ho°
);

56 i‡(
√t
 &&Çë->
ªadSåóm
) {

57 
°©us
 = (*
√t
->
ªadSåóm
->
iß
->
ab‹t
)“ë->ªadSåóm, 
NULL
);

58 i‡(
°©us
 !
HT_IGNORE
Ë
√t
->
ªadSåóm
 = 
NULL
;

60  
HT_ERROR
;

61 
	}
}

63 #ifde‡
FIND_SIGNATURES


80 
PRIVATE
 * 
	$°∫°r
(* 
hay°ack
, *
pLí
, * 
√edÀ
)

82 
found
 = 0;

83 
√ed
 = 
	`°æí
(
√edÀ
);

84 
i
, 
°¨t
;

85 
°¨t
 = 
i
 = 0; i < *
pLí
; i++)

86 i‡(
hay°ack
[
i
] =
√edÀ
[
found
]) {

87 i‡(++
found
 =
√ed
) {

88 
i
 -
√ed
 - 1;

89 *
pLí
 -
i
;

90  
hay°ack
+
i
;

93 
found
 = 0;

95 *
pLí
 = 0;

96  
NULL
;

97 
	}
}

100 
PRIVATE
 
	$HTRódî_ªad
 (
HTI≈utSåóm
 * 
me
)

102 
HTHo°
 * 
ho°
 = 
me
->host;

103 
SOCKET
 
soc
 = 
	`HTCh™√l_sockë
(
me
->
ch
);

104 
HTNë
 * 
√t
 = 
	`HTHo°_gëRódNë
(
ho°
);

105 
HTReque°
 * 
ªque°
 = 
	`HTNë_ªque°
(
√t
);

106 
°©us
;

107 i‡(!
√t
->
ªadSåóm
) {

108 
	`HTTRACE
(
STREAM_TRACE
, "Ród Sockë. Nÿªad såóm f‹Çë obje˘ %p\n" 
_
 
√t
);

109  
HT_ERROR
;

115 i‡(
me
->
wrôe
 >me->
ªad
) {

116 i‡((
me
->
b_ªad
 = 
	`NETREAD
(
soc
, me->
d©a
, 
INPUT_BUFFER_SIZE
)) < 0) {

117 #ifde‡
EAGAIN


118 i‡(
so˚ºno
==
EAGAIN
 || so˚ºno==
EWOULDBLOCK
)

120 i‡(
so˚ºno
==
EWOULDBLOCK
)

123 
	`HTTRACE
(
STREAM_TRACE
, "Ród Sockë. WOULD BLOCK fd %d\n" 
_
 
soc
);

124 
	`HTHo°_ªgi°î
(
ho°
, 
√t
, 
HTEvít_READ
);

125  
HT_WOULD_BLOCK
;

126 #ifde‡
__svr4__


134 } i‡(
so˚ºno
 =
EINTR
) {

137 #ifde‡
EPIPE


138 } i‡(
so˚ºno
 =
EPIPE
) {

139 
	`HTTRACE
(
STREAM_TRACE
, "Ród Sockë. gŸ EPIPE\n" 
_
 
soc
);

140 
sockëClo£d
;

142 #ifde‡
ECONNRESET


143 } i‡(
so˚ºno
 =
ECONNRESET
) {

144 
	`HTTRACE
(
STREAM_TRACE
, "Ród Sockë. gŸ ECONNRESET\n" 
_
 
soc
);

145 
sockëClo£d
;

147 #ifde‡
_WINSOCKAPI_


159 } i‡(
so˚ºno
 =
ECONNABORTED
) {

160 
	`HTTRACE
(
STREAM_TRACE
, "Ród Sockë. gŸ ECONNABORTED\n" 
_
 
soc
);

161 
sockëClo£d
;

162 } i‡(
so˚ºno
 =
ESHUTDOWN
) {

163 
	`HTTRACE
(
STREAM_TRACE
, "Ród Sockë. gŸ ESHUTDOWN\n" 
_
 
soc
);

164 
sockëClo£d
;

168 i‡(
ªque°
)

169 
	`HTReque°_addSy°emEº‹
(
ªque°
, 
ERR_FATAL
, 
so˚ºno
,

170 
NO
, "NETREAD");

171  
HT_ERROR
;

173 } i‡(!
me
->
b_ªad
) {

175 
sockëClo£d
:

176 
	`HTTRACE
(
STREAM_TRACE
, "Ród Sockë. FINÑe˚ived o¿sockë %d\n" 
_
 
soc
);

177 
	`HTHo°_uƒegi°î
(
ho°
, 
√t
, 
HTEvít_READ
);

178 
	`HTHo°_ªgi°î
(
ho°
, 
√t
, 
HTEvít_CLOSE
);

179  
HT_CLOSED
;

183 
	`HTTRACEDATA
(
me
->
d©a
, me->
b_ªad
, "Ródög from sockë %d" 
_
 
soc
);

184 
me
->
wrôe
 = me->
d©a
;

185 
me
->
ªad
 = me->
d©a
 + me->
b_ªad
;

186 #ifde‡
FIND_SIGNATURES


188 * 
±r
 = 
me
->
d©a
;

189 
Àn
 = 
me
->
b_ªad
;

190 (
±r
 = 
	`°∫°r
’å, &
Àn
, "HTTP/1.1 200 OK")Ë!
NULL
) {

191 
	`HTTRACE
(
STREAM_TRACE
, "Ród Sockë. Sig«tuª foundáà0x%x o‡0x%x.\n" 
_
 
±r
 - 
me
->
d©a
 _ me->
b_ªad
);

192 
±r
++;

193 
Àn
--;

197 #ifde‡
NOT_ASCII


199 *
p
 = 
me
->
d©a
;

200 
p
 < 
me
->
ªad
) {

201 *
p
 = 
	`FROMASCII
(*p);

202 
p
++;

207 
	`HTTRACE
(
STREAM_TRACE
, "Ród Sockë. %d byã†ªad from sockë %d\n" 
_


208 
me
->
b_ªad
 
_
 
soc
);

209 i‡(
ªque°
) {

210 
HTAÀπCÆlback
 * 
cbf
 = 
	`HTAÀπ_föd
(
HT_PROG_READ
);

211 i‡(
	`HTNë_øwByãsCou¡
(
√t
))

212 
	`HTNë_addByãsRód
(
√t
, 
me
->
b_ªad
);

213 i‡(
cbf
) {

214 
å
 = 
	`HTNë_byãsRód
(
√t
);

215 (*
cbf
)(
ªque°
, 
HT_PROG_READ
, 
HT_MSG_NULL
, 
NULL
, &
å
, NULL);

221 i‡((
°©us
 = (*
√t
->
ªadSåóm
->
iß
->
put_block
)

222 (
√t
->
ªadSåóm
, 
me
->
wrôe
, me->
b_ªad
)Ë!
HT_OK
) {

223 i‡(
°©us
 =
HT_WOULD_BLOCK
) {

224 
	`HTTRACE
(
STREAM_TRACE
, "Read Socket. Target WOULD BLOCK\n");

225 
	`HTHo°_uƒegi°î
(
ho°
, 
√t
, 
HTEvít_READ
);

226  
HT_WOULD_BLOCK
;

227 } i‡(
°©us
 =
HT_PAUSE
) {

228 
	`HTTRACE
(
STREAM_TRACE
, "Read Socket. Target PAUSED\n");

229 
	`HTHo°_uƒegi°î
(
ho°
, 
√t
, 
HTEvít_READ
);

230  
HT_PAUSE
;

232 } i‡(
°©us
 =
HT_CONTINUE
 || status > 0) {

233 i‡(
°©us
 =
HT_CONTINUE
) {

234 
	`HTTRACE
(
STREAM_TRACE
, "Read Socket. CONTINUE\n");

236 
	`HTTRACE
(
STREAM_TRACE
, "Ród Sockë. T¨gëÑëu∫†%d\n" 
_
 
°©us
);

238  
°©us
;

240 
	`HTTRACE
(
STREAM_TRACE
, "Ród Sockë. T¨gë ERROR %d\n" 
_
 
°©us
);

241  
°©us
;

244 
me
->
wrôe
 = me->
ªad
;

246 
ªmaöög
 = 
	`HTHo°_ªmaöögRód
(
ho°
);

247 i‡(
ªmaöög
 > 0) {

248 
	`HTTRACE
(
STREAM_TRACE
, "Ród Sockë. DIDN'T CONSUME %d BYTES: `%s\'\n" 
_


249 
ªmaöög
 
_
 
me
->
ªad
);

250 
	`HTHo°_£tC⁄sumed
(
ho°
, 
ªmaöög
);

253 } 
√t
->
¥ìm±ive
);

254 
	`HTHo°_ªgi°î
(
ho°
, 
√t
, 
HTEvít_READ
);

255  
HT_WOULD_BLOCK
;

256 
	}
}

264 
PRIVATE
 
	$HTRódî_˛o£
 (
HTI≈utSåóm
 * 
me
)

266 
°©us
 = 
HT_OK
;

267 
HTNë
 * 
√t
 = 
	`HTHo°_gëRódNë
(
me
->
ho°
);

268 i‡(
√t
 &&Çë->
ªadSåóm
) {

269 i‡((
°©us
 = (*
√t
->
ªadSåóm
->
iß
->
_‰ì
)“ë->ªadSåóm))==
HT_WOULD_BLOCK
)

270  
HT_WOULD_BLOCK
;

271 
√t
->
ªadSåóm
 = 
NULL
;

273 
	`HTTRACE
(
STREAM_TRACE
, "SocketÑead. FREEING....\n");

274 
	`HT_FREE
(
me
);

275  
°©us
;

276 
	}
}

278 
PUBLIC
 
	$HTRódî_c⁄sumed
 (
HTI≈utSåóm
 * 
me
, 
size_t
 
byãs
)

280 
me
->
wrôe
 +
byãs
;

281 
me
->
b_ªad
 -
byãs
;

282 
	`HTHo°_£tRemaöögRód
(
me
->
ho°
, me->
b_ªad
);

283  
HT_OK
;

284 
	}
}

286 
PRIVATE
 c⁄° 
HTI≈utSåómCœss
 
	gHTRódî
 =

289 
HTRódî_Êush
,

290 
HTRódî_‰ì
,

291 
HTRódî_ab‹t
,

292 
HTRódî_ªad
,

293 
HTRódî_˛o£
,

294 
HTRódî_c⁄sumed


303 
PUBLIC
 
HTI≈utSåóm
 * 
	$HTRódî_√w
 (
HTHo°
 * 
ho°
, 
HTCh™√l
 * 
ch
,

304 * 
∑øm
, 
mode
)

306 i‡(
ho°
 && 
ch
) {

307 
HTI≈utSåóm
 * 
me
 = 
	`HTCh™√l_öput
(
ch
);

308 i‡(
me
 =
NULL
) {

309 i‡((
me
=(
HTI≈utSåóm
 *Ë
	`HT_CALLOC
(1, (HTI≈utSåóm))Ë=
NULL
)

310 
	`HT_OUTOFMEM
("HTReader_new");

311 
me
->
iß
 = &
HTRódî
;

312 
me
->
ch
 = ch;

313 
me
->
ho°
 = host;

314 
	`HTTRACE
(
STREAM_TRACE
, "Ródî...... Cª©edÑódî såóm %p\n" 
_
 
me
);

316  
me
;

318  
NULL
;

319 
	}
}

	@Library/src/HTReader.h

35 #i‚de‡
HTREADER_H


36 
	#HTREADER_H


	)

38 
	~"HTIOSåóm.h
"

52 
	#INPUT_BUFFER_SIZE
 32*1024

	)

60 
HTI≈ut_√w
 
HTRódî_√w
;

	@Library/src/HTReq.h

63 #i‚de‡
HTREQ_H


64 
	#HTREQ_H


	)

66 
	tHTReque°ID
;

67 
_HTReque°
 
	tHTReque°
;

69 
	~"HTEvít.h
"

70 
	~"HTLi°.h
"

71 
	~"HTAssoc.h
"

72 
	~"HTF‹m©.h
"

73 
	~"HTSåóm.h
"

74 
	~"HTEº‹.h
"

75 
	~"HTNë.h
"

76 
	~"HTU£r.h
"

77 
	~"HTRe•⁄£.h
"

98 
HTReque°
 * 
HTReque°_√w
 ();

110 
BOOL
 
HTReque°_˛ór
 (
HTReque°
 * 
me
);

121 
HTReque°
 * 
HTReque°_dup
 (HTReque° * 
§c
);

134 
HTReque°
 * 
HTReque°_dupI¡î«l
 (HTReque° * 
§c
);

136 
BOOL
 
HTReque°_£tI¡î«l
 (
HTReque°
 * 
ªque°
, BOOL 
mode
);

137 
BOOL
 
HTReque°_öã∫Æ
 (
HTReque°
 * 
ªque°
);

147 
HTReque°_dñëe
 (
HTReque°
 * 
ªque°
);

164 
BOOL
 
HTLﬂd
 (
HTReque°
 * 
ªque°
, BOOL 
ªcursive
);

165 
BOOL
 
HTSîve
(
HTReque°
 * 
ªque°
, BOOL 
ªcursive
);

180 
BOOL
 
HTReque°_kûl
(
HTReque°
 * 
ªque°
);

206 
HTReque°_£tAnch‹
 (
HTReque°
 *
ªque°
, 
HTAnch‹
 *
™ch‹
);

207 
HTP¨ítAnch‹
 * 
HTReque°_™ch‹
 (
HTReque°
 *
ªque°
);

209 
HTChûdAnch‹
 * 
HTReque°_chûdAnch‹
 (
HTReque°
 * 
ªque°
);

222 
BOOL
 
HTReque°_£tU£rProfûe
 (
HTReque°
 * 
ªque°
, 
HTU£rProfûe
 * 
up
);

223 
HTU£rProfûe
 * 
HTReque°_u£rProfûe
 (
HTReque°
 * 
ªque°
);

236 
HTNë
 * 
HTReque°_√t
 (
HTReque°
 * 
ªque°
);

237 
BOOL
 
HTReque°_£tNë
 (
HTReque°
 * 
ªque°
, 
HTNë
 * 
√t
);

253 
HTRe•⁄£
 * 
HTReque°_ª•⁄£
 (
HTReque°
 * 
ªque°
);

254 
BOOL
 
HTReque°_£tRe•⁄£
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
);

274 
HTReque°_£tMëhod
 (
HTReque°
 *
ªque°
, 
HTMëhod
 
mëhod
);

275 
HTMëhod
 
HTReque°_mëhod
 (
HTReque°
 *
ªque°
);

289 
HTPri‹ôy
 
HTReque°_¥i‹ôy
 (
HTReque°
 * 
ªque°
);

290 
BOOL
 
HTReque°_£tPri‹ôy
 (
HTReque°
 * 
ªque°
, 
HTPri‹ôy
 
¥i‹ôy
);

305 
BOOL
 
HTReque°_£tFlush
 (
HTReque°
 * 
me
, BOOL 
mode
);

306 
BOOL
 
HTReque°_Êush
 (
HTReque°
 * 
me
);

319 
HTReque°_f‹˚Flush
 (
HTReque°
 * 
ªque°
);

333 
HTLi°
 * 
HTReque°_îr‹
 (
HTReque°
 * 
ªque°
);

334 
HTReque°_£tEº‹
 (
HTReque°
 * 
ªque°
, 
HTLi°
 * 
li°
);

335 
HTReque°_dñëeAŒEº‹s
 (
HTReque°
 * 
ªque°
);

343 
BOOL
 
HTReque°_addEº‹
 (
HTReque°
 * 
ªque°
,

344 
HTSevîôy
 
£vîôy
,

345 
BOOL
 
ign‹e
,

346 
ñemít
,

347 * 
∑r
,

348 
Àngth
,

349 * 
whîe
);

351 
BOOL
 
HTReque°_addSy°emEº‹
 (
HTReque°
 * 
ªque°
,

352 
HTSevîôy
 
£vîôy
,

353 
îr‹numbî
,

354 
BOOL
 
ign‹e
,

355 * 
sysˇŒ
);

377 
BOOL
 
HTReque°_£tMaxRëry
 (
√wmax
);

378 
HTReque°_maxRëry
 ();

380 
HTReque°_ªåys
 (
HTReque°
 * 
ªque°
);

381 
BOOL
 
HTReque°_doRëry
 (
HTReque°
 *
ªque°
);

382 
BOOL
 
HTReque°_addRëry
 (
HTReque°
 * 
ªque°
);

384 
HTReque°_AAªåys
 (
HTReque°
 * 
ªque°
);

385 
BOOL
 
HTReque°_addAARëry
 (
HTReque°
 * 
ªque°
);

399 
BOOL
 
HTReque°_£tMaxF‹w¨ds
 (
HTReque°
 * 
ªque°
, 
maxf‹w¨ds
);

400 
HTReque°_maxF‹w¨ds
 (
HTReque°
 * 
ªque°
);

415 
HTReque°_£tPªem±ive
 (
HTReque°
 *
ªque°
, 
BOOL
 
mode
);

416 
BOOL
 
HTReque°_¥ìm±ive
 (
HTReque°
 *
ªque°
);

430 
HTReque°_£tNegŸüti⁄
 (
HTReque°
 *
ªque°
, 
BOOL
 
mode
);

431 
BOOL
 
HTReque°_√gŸüti⁄
 (
HTReque°
 *
ªque°
);

445 
	e_HTPªc⁄dôi⁄s
 {

446 
	mHT_NO_MATCH
 = 0,

447 
	mHT_MATCH_THIS
,

448 
	mHT_MATCH_ANY
,

449 
	mHT_DONT_MATCH_THIS
,

450 
	mHT_DONT_MATCH_ANY


451 } 
	tHTPªc⁄dôi⁄s
;

453 
HTReque°_£tPªc⁄dôi⁄s
 (
HTReque°
 * 
me
, 
HTPªc⁄dôi⁄s
 
mode
);

454 
HTPªc⁄dôi⁄s
 
HTReque°_¥ec⁄dôi⁄s
 (
HTReque°
 * 
me
);

465 
_HTMIMEP¨£Së
 
	tHTMIMEP¨£Së
;

466 
HTReque°_£tMIMEP¨£Së
 (
HTReque°
 *
ªque°
,

467 
HTMIMEP¨£Së
 * 
∑r£Së
, 
BOOL
 
loˇl
);

468 
HTMIMEP¨£Së
 * 
HTReque°_MIMEP¨£Së
 (
HTReque°
 *
ªque°
,

469 
BOOL
 * 
pLoˇl
);

491 
	e_HTGnHd
 {

492 
	mHT_G_CC
 = 0x1,

493 
	mHT_G_CONNECTION
 = 0x2,

494 
	mHT_G_DATE
 = 0x4,

495 
	mHT_G_PRAGMA_NO_CACHE
= 0x8,

496 
	mHT_G_FORWARDED
 = 0x10,

497 
	mHT_G_MESSAGE_ID
 = 0x20,

498 
	mHT_G_MIME
 = 0x40,

499 
	mHT_G_TRAILER
 = 0x80,

500 
	mHT_G_TRANSFER
 = 0x100,

501 
	mHT_G_EXTRA_HEADERS
 = 0x200

502 } 
	tHTGnHd
;

504 
	#DEFAULT_GENERAL_HEADERS
 \

505 
HT_G_CONNECTION
 + 
HT_G_CC
 + 
HT_G_TRANSFER
 + 
HT_G_TRAILER
 + \

506 
HT_G_EXTRA_HEADERS


	)

508 
HTReque°_£tGnHd
 (
HTReque°
 *
ªque°
, 
HTGnHd
 
gnhd
);

509 
HTReque°_addGnHd
 (
HTReque°
 *
ªque°
, 
HTGnHd
 
gnhd
);

510 
HTGnHd
 
HTReque°_gnHd
 (
HTReque°
 *
ªque°
);

523 
	e_HTRqHd
 {

524 
	mHT_C_ACCEPT_TYPE
 = 0x1,

525 
	mHT_C_ACCEPT_CHAR
 = 0x2,

526 
	mHT_C_ACCEPT_ENC
 = 0x4,

527 
	mHT_C_ACCEPT_TE
 = 0x8,

528 
	mHT_C_ACCEPT_LAN
 = 0x10,

529 
	mHT_C_AUTH
 = 0x20,

530 
	mHT_C_EXPECT
 = 0x40,

531 
	mHT_C_FROM
 = 0x80,

532 
	mHT_C_HOST
 = 0x100,

533 
	mHT_C_IMS
 = 0x200,

534 
	mHT_C_IF_MATCH
 = 0x400,

535 
	mHT_C_IF_MATCH_ANY
 = 0x800,

536 
	mHT_C_IF_NONE_MATCH
 = 0x1000,

537 
	mHT_C_IF_NONE_MATCH_ANY
=0x2000,

538 
	mHT_C_IF_RANGE
 = 0x4000,

539 
	mHT_C_IF_UNMOD_SINCE
 = 0x8000,

540 
	mHT_C_MAX_FORWARDS
 = 0x10000,

541 
	mHT_C_RANGE
 = 0x20000,

542 
	mHT_C_REFERER
 = 0x40000,

543 
	mHT_C_USER_AGENT
 = 0x80000

544 } 
	tHTRqHd
;

546 
	#DEFAULT_REQUEST_HEADERS
 \

547 
HT_C_ACCEPT_TYPE
 + 
HT_C_ACCEPT_CHAR
 + \

548 
HT_C_ACCEPT_ENC
 + 
HT_C_ACCEPT_TE
 + 
HT_C_ACCEPT_LAN
 + 
HT_C_AUTH
 + \

549 
HT_C_EXPECT
 + 
HT_C_HOST
 + 
HT_C_REFERER
 + 
HT_C_USER_AGENT


	)

551 
HTReque°_£tRqHd
 (
HTReque°
 *
ªque°
, 
HTRqHd
 
rqhd
);

552 
HTReque°_addRqHd
 (
HTReque°
 *
ªque°
, 
HTRqHd
 
rqhd
);

553 
HTRqHd
 
HTReque°_rqHd
 (
HTReque°
 *
ªque°
);

565 
	e_HTRsHd
 {

566 
	mHT_S_AGE
 = 0x1,

567 
	mHT_S_LOCATION
 = 0x2,

568 
	mHT_S_PROXY_AUTH
 = 0x4,

569 
	mHT_S_PUBLIC
 = 0x8,

570 
	mHT_S_RETRY_AFTER
 = 0x10,

571 
	mHT_S_SERVER
 = 0x20,

572 
	mHT_S_VARY
 = 0x40,

573 
	mHT_S_WARNING
 = 0x80,

574 
	mHT_S_WWW_AUTH
 = 0x100,

575 
	mHT_S_TRAILER
 = 0x200

576 } 
	tHTRsHd
;

578 
	#DEFAULT_RESPONSE_HEADERS
 
HT_S_SERVER


	)

580 
HTReque°_£tRsHd
 (
HTReque°
 * 
ªque°
, 
HTRsHd
 
rshd
);

581 
HTReque°_addRsHd
 (
HTReque°
 * 
ªque°
, 
HTRsHd
 
rshd
);

582 
HTRsHd
 
HTReque°_rsHd
 (
HTReque°
 * 
ªque°
);

596 
	e_HTEnHd
 {

597 
	mHT_E_ALLOW
 = 0x1,

598 
	mHT_E_CONTENT_BASE
 = 0x2,

599 
	mHT_E_CONTENT_ENCODING
 = 0x4,

600 
	mHT_E_CONTENT_LANGUAGE
 = 0x8,

601 
	mHT_E_CONTENT_LENGTH
 = 0x10,

602 
	mHT_E_CONTENT_LOCATION
 = 0x20,

603 
	mHT_E_CONTENT_MD5
 = 0x40,

604 
	mHT_E_CONTENT_RANGE
 = 0x80,

605 
	mHT_E_CTE
 = 0x100,

606 
	mHT_E_CONTENT_TYPE
 = 0x200,

607 
	mHT_E_DERIVED_FROM
 = 0x400,

608 
	mHT_E_ETAG
 = 0x800,

609 
	mHT_E_EXPIRES
 = 0x1000,

610 
	mHT_E_LAST_MODIFIED
 = 0x2000,

611 
	mHT_E_LINK
 = 0x4000,

612 
	mHT_E_TITLE
 = 0x8000,

613 
	mHT_E_URI
 = 0x10000,

614 
	mHT_E_VERSION
 = 0x20000

615 } 
	tHTEnHd
;

617 
	#DEFAULT_ENTITY_HEADERS
 0xFFFFFFFF

	)

619 
HTReque°_£tEnHd
 (
HTReque°
 *
ªque°
, 
HTEnHd
 
íhd
);

620 
HTReque°_addEnHd
 (
HTReque°
 *
ªque°
, 
HTEnHd
 
íhd
);

621 
HTEnHd
 
HTReque°_íHd
 (
HTReque°
 *
ªque°
);

650 
BOOL
 
HTReque°_addExåaHódî
 (
HTReque°
 * 
ªque°
,

651 * 
tokí
, * 
vÆue
);

652 
HTAssocLi°
 * 
HTReque°_exåaHódî
 (
HTReque°
 * 
ªque°
);

653 
BOOL
 
HTReque°_dñëeExåaHódîAŒ
 (
HTReque°
 * 
ªque°
);

667 
HTReque°_£tGíî©‹
 (
HTReque°
 *
ªque°
, 
HTLi°
 *
gís
,

668 
BOOL
 
ovîride
);

669 
HTLi°
 * 
HTReque°_gíî©‹
 (
HTReque°
 *
ªque°
, 
BOOL
 *
ovîride
);

711 
HTReque°_£tC⁄vîsi⁄
 (
HTReque°
 *
ªque°
, 
HTLi°
 *
ty≥
, 
BOOL
 
ovîride
);

712 
HTLi°
 * 
HTReque°_c⁄vîsi⁄
 (
HTReque°
 *
ªque°
);

722 
HTReque°_£tEncodög
 (
HTReque°
 *
ªque°
, 
HTLi°
 *
íc
, 
BOOL
 
ovîride
);

723 
HTLi°
 * 
HTReque°_ícodög
 (
HTReque°
 *
ªque°
);

733 
HTReque°_£tTøns„r
 (
HTReque°
 *
ªque°
, 
HTLi°
 *
ã
, 
BOOL
 
ovîride
);

734 
HTLi°
 * 
HTReque°_å™s„r
 (
HTReque°
 *
ªque°
);

745 
HTReque°_£tL™guage
 (
HTReque°
 *
ªque°
, 
HTLi°
 *
œng
, 
BOOL
 
ovîride
);

746 
HTLi°
 * 
HTReque°_œnguage
 (
HTReque°
 *
ªque°
);

756 
HTReque°_£tCh¨£t
 (
HTReque°
 *
ªque°
, 
HTLi°
 *
ch¨£t
, 
BOOL
 
ovîride
);

757 
HTLi°
 * 
HTReque°_ch¨£t
 (
HTReque°
 *
ªque°
);

774 
	e_HTRñﬂd
 {

775 
	mHT_CACHE_OK
 = 0x0,

776 
	mHT_CACHE_FLUSH_MEM
 = 0x1,

777 
	mHT_CACHE_VALIDATE
 = 0x2,

778 
	mHT_CACHE_END_VALIDATE
 = 0x4,

779 
	mHT_CACHE_RANGE_VALIDATE
 = 0x8,

780 
	mHT_CACHE_FLUSH
 = 0x10,

781 
	mHT_CACHE_ERROR
 = 0x20

782 } 
	tHTRñﬂd
;

784 
HTReque°_£tRñﬂdMode
 (
HTReque°
 *
ªque°
, 
HTRñﬂd
 
mode
);

785 
HTRñﬂd
 
HTReque°_ªlﬂdMode
 (
HTReque°
 *
ªque°
);

800 * 
HTReque°_deÁu…PutName
 (
HTReque°
 * 
me
);

801 
BOOL
 
HTReque°_£tDeÁu…PutName
 (
HTReque°
 * 
me
, * 
«me
);

802 
BOOL
 
HTReque°_dñëeDeÁu…PutName
 (
HTReque°
 * 
me
);

816 
BOOL
 
HTReque°_addCacheC⁄åﬁ
 (
HTReque°
 * 
ªque°
,

817 * 
tokí
, *
vÆue
);

818 
BOOL
 
HTReque°_dñëeCacheC⁄åﬁAŒ
 (
HTReque°
 * 
ªque°
);

819 
HTAssocLi°
 * 
HTReque°_ˇcheC⁄åﬁ
 (
HTReque°
 * 
ªque°
);

832 
time_t
 
HTReque°_d©e
 (
HTReque°
 * 
ªque°
);

833 
BOOL
 
HTReque°_£tD©e
 (
HTReque°
 * 
ªque°
, 
time_t
 
d©e
);

846 
BOOL
 
HTReque°_addEx≥˘
 (
HTReque°
 * 
me
,

847 * 
tokí
, * 
vÆue
);

848 
BOOL
 
HTReque°_dñëeEx≥˘
 (
HTReque°
 * 
me
);

849 
HTAssocLi°
 * 
HTReque°_ex≥˘
 (
HTReque°
 * 
me
);

866 
BOOL
 
HTReque°_addR™ge
 (
HTReque°
 * 
ªque°
,

867 * 
unô
, * 
ønge
);

868 
BOOL
 
HTReque°_dñëeR™geAŒ
 (
HTReque°
 * 
ªque°
);

869 
HTAssocLi°
 * 
HTReque°_ønge
 (
HTReque°
 * 
ªque°
);

882 
BOOL
 
HTReque°_addC⁄√˘i⁄
 (
HTReque°
 * 
ªque°
,

883 * 
tokí
, * 
vÆue
);

884 
BOOL
 
HTReque°_dñëeC⁄√˘i⁄
 (
HTReque°
 * 
ªque°
);

885 
HTAssocLi°
 * 
HTReque°_c⁄√˘i⁄
 (
HTReque°
 * 
ªque°
);

900 
BOOL
 
HTReque°_addCªdítüls
 (
HTReque°
 * 
ªque°
,

901 * 
tokí
, * 
vÆue
);

902 
BOOL
 
HTReque°_dñëeCªdítülsAŒ
 (
HTReque°
 * 
ªque°
);

903 
HTAssocLi°
 * 
HTReque°_¸edítüls
 (
HTReque°
 * 
ªque°
);

913 
BOOL
 
HTReque°_£tRólm
 (
HTReque°
 * 
ªque°
, * 
ªÆm
);

914 c⁄° * 
HTReque°_ªÆm
 (
HTReque°
 * 
ªque°
);

915 
BOOL
 
HTReque°_dñëeRólm
 (
HTReque°
 * 
me
);

927 
HTReque°_£tP¨ít
 (
HTReque°
 *
ªque°
, 
HTP¨ítAnch‹
 *
∑ª¡
);

928 
HTP¨ítAnch‹
 * 
HTReque°_∑ª¡
 (
HTReque°
 *
ªque°
);

957 
BOOL
 
HTReque°_addBef‹e
 (
HTReque°
 * 
ªque°
, 
HTNëBef‹e
 * 
fûãr
,

958 c⁄° * 
tm∂©e
, * 
∑øm
,

959 
HTFûãrOrdî
 
‹dî
, 
BOOL
 
ovîride
);

960 
HTLi°
 * 
HTReque°_bef‹e
 (
HTReque°
 * 
ªque°
, 
BOOL
 * 
ovîride
);

970 
BOOL
 
HTReque°_dñëeBef‹e
 (
HTReque°
 * 
ªque°
, 
HTNëBef‹e
 * 
fûãr
);

971 
BOOL
 
HTReque°_dñëeBef‹eAŒ
 (
HTReque°
 * 
ªque°
);

992 
BOOL
 
HTReque°_addA·î
 (
HTReque°
 * 
ªque°
, 
HTNëA·î
 * 
fûãr
,

993 c⁄° * 
tm∂©e
, * 
∑øm
,

994 
°©us
, 
HTFûãrOrdî
 
‹dî
,

995 
BOOL
 
ovîride
);

996 
HTLi°
 * 
HTReque°_a·î
 (
HTReque°
 * 
ªque°
, 
BOOL
 * 
ovîride
);

1007 
BOOL
 
HTReque°_dñëeA·î
 (
HTReque°
 * 
ªque°
, 
HTNëA·î
 * 
fûãr
);

1008 
BOOL
 
HTReque°_dñëeA·îSètus
 (
HTReque°
 * 
ªque°
, 
°©us
);

1009 
BOOL
 
HTReque°_dñëeA·îAŒ
 (
HTReque°
 * 
ªque°
);

1041 
	tHTPo°CÆlback
 (
	tHTReque°
 * 
	tªque°
, 
	tHTSåóm
 * 
	tèrgë
);

1043 
HTReque°_£tPo°CÆlback
 (
HTReque°
 * 
ªque°
, 
HTPo°CÆlback
 * 
cbf
);

1044 
HTPo°CÆlback
 * 
HTReque°_po°CÆlback
 (
HTReque°
 * 
ªque°
);

1054 
BOOL
 
HTReque°_£tE¡ôyAnch‹
 (
HTReque°
 * 
ªque°
, 
HTP¨ítAnch‹
 * 
™ch‹
);

1055 
HTP¨ítAnch‹
 * 
HTReque°_ítôyAnch‹
 (
HTReque°
 * 
ªque°
);

1067 
HTReque°_£tI≈utSåóm
 (
HTReque°
 * 
ªque°
, 
HTSåóm
 * 
öput
);

1068 
HTSåóm
 *
HTReque°_öputSåóm
 (
HTReque°
 * 
ªque°
);

1078 
BOOL
 
HTReque°_isPo°Web
 (
HTReque°
 * 
ªque°
);

1089 
BOOL
 
HTReque°_£tSour˚
 (
HTReque°
 * 
ªque°
, HTReque° * 
sour˚
);

1090 
HTReque°
 * 
HTReque°_sour˚
 (HTReque° * 
ªque°
);

1105 
HTReque°_£tOuçutSåóm
 (
HTReque°
 *
ªque°
, 
HTSåóm
 *
ouçut
);

1106 
HTSåóm
 *
HTReque°_ouçutSåóm
 (
HTReque°
 *
ªque°
);

1119 
HTReque°_£tOuçutF‹m©
 (
HTReque°
 *
ªque°
, 
HTF‹m©
 
f‹m©
);

1120 
HTF‹m©
 
HTReque°_ouçutF‹m©
 (
HTReque°
 *
ªque°
);

1130 
HTReque°_£tOuçutC⁄√˘ed
 (
HTReque°
 * 
ªque°
, 
BOOL
 
mode
);

1131 
BOOL
 
HTReque°_ouçutC⁄√˘ed
 (
HTReque°
 * 
ªque°
);

1145 
HTReque°_£tDebugSåóm
 (
HTReque°
 *
ªque°
, 
HTSåóm
 *
debug
);

1146 
HTSåóm
 *
HTReque°_debugSåóm
 (
HTReque°
 *
ªque°
);

1158 
HTReque°_£tDebugF‹m©
 (
HTReque°
 *
ªque°
, 
HTF‹m©
 
f‹m©
);

1159 
HTF‹m©
 
HTReque°_debugF‹m©
 (
HTReque°
 *
ªque°
);

1172 
	tHTReque°CÆlback
 (
	tHTReque°
 * 
	tªque°
, *
	t∑øm
);

1174 
HTReque°_£tCÆlback
 (
HTReque°
 *
ªque°
, 
HTReque°CÆlback
 *
cb
);

1175 
HTReque°CÆlback
 *
HTReque°_ˇŒback
 (
HTReque°
 *
ªque°
);

1184 
HTReque°_£tC⁄ãxt
 (
HTReque°
 *
ªque°
, *
c⁄ãxt
);

1185 *
HTReque°_c⁄ãxt
 (
HTReque°
 *
ªque°
);

1197 
HTReque°_£tFuŒURI
 (
HTReque°
 *
ªque°
, 
BOOL
 
mode
);

1198 
BOOL
 
HTReque°_fuŒURI
 (
HTReque°
 *
ªque°
);

1213 
BOOL
 
HTReque°_£tProxy
 (
HTReque°
 * 
ªque°
, c⁄° * 
¥oxy
);

1214 * 
HTReque°_¥oxy
 (
HTReque°
 * 
ªque°
);

1215 
BOOL
 
HTReque°_dñëeProxy
 (
HTReque°
 * 
ªque°
);

1248 
BOOL
 
HTReque°_£tMesßgeBody
 (
HTReque°
 * 
ªque°
, c⁄° * 
body
);

1249 
BOOL
 
HTReque°_dñëeMesßgeBody
 (
HTReque°
 * 
ªque°
);

1250 * 
HTReque°_mesßgeBody
 (
HTReque°
 * 
ªque°
);

1252 
BOOL
 
HTReque°_£tMesßgeBodyLígth
 (
HTReque°
 * 
ªque°
, 
Àngth
);

1253 
HTReque°_mesßgeBodyLígth
 (
HTReque°
 * 
ªque°
);

1255 
BOOL
 
HTReque°_£tMesßgeBodyF‹m©
 (
HTReque°
 * 
ªque°
, 
HTF‹m©
 
f‹m©
);

1256 
HTF‹m©
 
HTReque°_mesßgeBodyF‹m©
 (
HTReque°
 * 
ªque°
);

1270 
HTReque°_bodyRód
 (
HTReque°
 * 
ªque°
);

1271 
HTReque°_bodyWrôãn
 (
HTReque°
 * 
ªque°
);

1279 
HTReque°_byãsRód
 (
HTReque°
 * 
ªque°
);

1280 
HTReque°_byãsWrôãn
 (
HTReque°
 * 
ªque°
);

	@Library/src/HTReqMan.c

30 #i‡!
deföed
(
HT_DIRECT_WAIS
Ë&& !deföed(
HT_DEFAULT_WAIS_GATEWAY
)

31 
	#HT_DEFAULT_WAIS_GATEWAY
 "hâp://www.w3.‹g:8001/"

	)

35 
	~"wwwsys.h
"

36 
	~"WWWUtû.h
"

37 
	~"HTP¨£.h
"

38 
	~"HTNoFªe.h
"

39 
	~"HTAÀπ.h
"

40 
	~"HTEº‹.h
"

41 
	~"HTNëM™.h
"

42 
	~"HTEvít.h
"

43 
	~"HTPrŸ.h
"

44 
	~"HTHódî.h
"

45 
	~"HTLib.h
"

46 
	~"HTReqM™.h
"

48 #i‚de‡
HT_MAX_RELOADS


49 
	#HT_MAX_RELOADS
 6

	)

52 
PRIVATE
 
	gHTMaxRëry
 = 
HT_MAX_RELOADS
;

54 
	s_HTSåóm
 {

55 
HTSåómCœss
 * 
	miß
;

63 
PUBLIC
 
HTReque°
 * 
	$HTReque°_√w
 ()

65 
HTReque°
 * 
me
;

66 i‡((
me
 = (
HTReque°
 *Ë
	`HT_CALLOC
(1, (HTReque°))Ë=
NULL
)

67 
	`HT_OUTOFMEM
("HTRequest_new()");

70 
me
->
ªlﬂd
 = 
HT_CACHE_OK
;

73 
me
->
deÁu…_put_«me
 = 
NULL
;

76 
me
->
u£Ωrofûe
 = 
	`HTLib_u£rProfûe
();

79 
me
->
ouçut_f‹m©
 = 
WWW_PRESENT
;

80 
me
->
debug_f‹m©
 = 
WWW_DEBUG
;

83 
me
->
GíMask
 = 
DEFAULT_GENERAL_HEADERS
;

84 
me
->
Reque°Mask
 = 
DEFAULT_REQUEST_HEADERS
;

85 
me
->
Re•⁄£Mask
 = 
DEFAULT_RESPONSE_HEADERS
;

86 
me
->
E¡ôyMask
 = 
DEFAULT_ENTITY_HEADERS
;

89 
me
->
¥i‹ôy
 = 
HT_PRIORITY_MAX
;

92 
me
->
max_f‹w¨ds
 = -1;

95 
me
->
C⁄ã¡NegŸüti⁄
 = 
YES
;

97 #ifde‡
HT_EXT


99 
me
->
mesßgeBody
 = 
NULL
;

100 
me
->
mesßgeBodyLígth
 = -1;

101 
me
->
mesßgeBodyF‹m©
 = 
NULL
;

105 
	`HTTRACE
(
CORE_TRACE
, "Reque°..... Cª©ed %p\n" 
_
 
me
);

107  
me
;

108 
	}
}

116 
PUBLIC
 
BOOL
 
	$HTReque°_˛ór
 (
HTReque°
 * 
me
)

118 i‡(
me
) {

119 
me
->
îr‹_°ack
 = 
NULL
;

120 
me
->
√t
 = 
NULL
;

121 
me
->
ªÆm
 = 
NULL
;

122 
me
->
¸edítüls
 = 
NULL
;

123 
me
->
c⁄√˘ed
 = 
NO
;

124 i‡(
me
->
deÁu…_put_«me
)

125 
	`HTReque°_dñëeDeÁu…PutName
 (
me
);

126 i‡(
me
->
ª•⁄£
) {

127 
	`HTRe•⁄£_dñëe
(
me
->
ª•⁄£
);

128 
me
->
ª•⁄£
 = 
NULL
;

131 #ifde‡
HT_EXT


132 i‡(
me
->
mesßgeBody
)

133 
	`HTReque°_dñëeMesßgeBody
(
me
);

134 
me
->
mesßgeBodyF‹m©
 = 
NULL
;

135 
me
->
mesßgeBodyLígth
 = -1;

138  
YES
;

140  
NO
;

141 
	}
}

148 
PUBLIC
 
HTReque°
 * 
	$HTReque°_dup
 (
HTReque°
 * 
§c
)

150 
HTReque°
 * 
me
;

151 i‡(!
§c
Ë 
NULL
;

152 i‡((
me
 = (
HTReque°
 *Ë
	`HT_MALLOC
((HTReque°))Ë=
NULL
)

153 
	`HT_OUTOFMEM
("HTRequest_dup");

154 
	`mem˝y
(
me
, 
§c
, (
HTReque°
));

155 
	`HTTRACE
(
CORE_TRACE
, "Reque°..... Du∂iˇãd %∞tÿ%p\n" 
_
 
§c
 _ 
me
);

156  
me
;

157 
	}
}

167 
PUBLIC
 
HTReque°
 * 
	$HTReque°_dupI¡î«l
 (
HTReque°
 * 
§c
)

169 
HTReque°
 * 
me
;

170 i‡(!
§c
)  0;

171 i‡((
me
 = (
HTReque°
 *Ë
	`HT_MALLOC
((HTReque°))Ë=
NULL
)

172 
	`HT_OUTOFMEM
("HTRequest_dup");

173 
	`mem˝y
(
me
, 
§c
, (
HTReque°
));

174 
	`HTReque°_˛ór
(
me
);

175  
me
;

176 
	}
}

178 
PUBLIC
 
	$HTReque°_dñëe
 (
HTReque°
 * 
me
)

180 i‡(
me
) {

181 
	`HTTRACE
(
CORE_TRACE
, "Reque°..... Dñëê%p\n" 
_
 
me
);

182 i‡(
me
->
√t
Ë
	`HTNë_£tReque°
(me->√t, 
NULL
);

188 i‡(
me
->
‹ig_ouçut_°ªam
 =me->
‹ig_debug_°ªam
)

190 
me
->
‹ig_debug_°ªam
 = 
NULL
;

194 i‡(
me
->
‹ig_ouçut_°ªam
) {

195 
	`HTTRACE
(
CORE_TRACE
, "Request..... Deleting dangling output stream\n");

196 (*
me
->
‹ig_ouçut_°ªam
->
iß
->
_‰ì
)(me->orig_output_stream);

197 
me
->
‹ig_ouçut_°ªam
 = 
NULL
;

198 
	`HTNoFªeSåóm_dñëe
(
me
->
ouçut_°ªam
);

199 
me
->
ouçut_°ªam
 = 
NULL
;

203 i‡(
me
->
‹ig_debug_°ªam
) {

204 
	`HTTRACE
(
CORE_TRACE
, "Request..... Deleting dangling debug stream\n");

205 (*
me
->
‹ig_debug_°ªam
->
iß
->
_‰ì
)(me->orig_debug_stream);

206 
me
->
‹ig_debug_°ªam
 = 
NULL
;

207 
	`HTNoFªeSåóm_dñëe
(
me
->
debug_°ªam
);

208 
me
->
debug_°ªam
 = 
NULL
;

212 i‡(
me
->
îr‹_°ack
Ë
	`HTEº‹_dñëeAŒ
(me->error_stack);

215 i‡(
me
->
a·îs
Ë
	`HTNëCÆl_dñëeA·îAŒ
(me->afters);

216 i‡(
me
->
bef‹es
Ë
	`HTNëCÆl_dñëeBef‹eAŒ
(me->befores);

219 i‡(
me
->
deÁu…_put_«me
)

220 
	`HTReque°_dñëeDeÁu…PutName
 (
me
);

223 
	`HT_FREE
(
me
->
ªÆm
);

224 i‡(
me
->
¸edítüls
Ë
	`HTAssocLi°_dñëe
(me->credentials);

227 i‡(
me
->
ˇche_c⁄åﬁ
)

228 
	`HTAssocLi°_dñëe
(
me
->
ˇche_c⁄åﬁ
);

231 i‡(
me
->
byã_ønges
Ë
	`HTAssocLi°_dñëe
(me->byte_ranges);

234 i‡(
me
->
c⁄√˘i⁄
Ë
	`HTAssocLi°_dñëe
(me->connection);

237 i‡(
me
->
ex≥˘
Ë
	`HTAssocLi°_dñëe
(me->expect);

240 
	`HT_FREE
(
me
->
¥oxy
);

243 i‡(
me
->
exåa_hódîs
Ë
	`HTAssocLi°_dñëe
(me->extra_headers);

246 i‡(
me
->
›ti⁄Æ
Ë
	`HTAssocLi°_dñëe
(me->optional);

247 i‡(
me
->
m™d©‹y
Ë
	`HTAssocLi°_dñëe
(me->mandatory);

250 i‡(
me
->
ª•⁄£
Ë
	`HTRe•⁄£_dñëe
(me->response);

252 #ifde‡
HT_EXT


253 i‡(
me
->
mesßgeBody
Ë
	`HTReque°_dñëeMesßgeBody
(me);

254 
me
->
mesßgeBodyF‹m©
 = 
NULL
;

255 
me
->
mesßgeBodyLígth
 = -1;

258 
	`HT_FREE
(
me
);

260 
	}
}

265 
PUBLIC
 
BOOL
 
	$HTReque°_kûl
(
HTReque°
 * 
me
)

267  
me
 ? 
	`HTNë_kûl
(me->
√t
Ë: 
NO
;

268 
	}
}

277 
PUBLIC
 
BOOL
 
	$HTReque°_£tI¡î«l
 (
HTReque°
 * 
me
, 
BOOL
 
mode
)

279 i‡(
me
) {

280 
me
->
öã∫Æ
 = 
mode
;

281  
YES
;

283  
NO
;

284 
	}
}

286 
PUBLIC
 
BOOL
 
	$HTReque°_öã∫Æ
 (
HTReque°
 * 
me
)

288  (
me
 ? me->
öã∫Æ
 : 
NO
);

289 
	}
}

294 
PUBLIC
 
BOOL
 
	$HTReque°_£tFlush
 (
HTReque°
 * 
me
, 
BOOL
 
mode
)

296 i‡(
me
) {

297 
me
->
Êush
 = 
mode
;

298  
YES
;

300  
NO
;

301 
	}
}

303 
PUBLIC
 
BOOL
 
	$HTReque°_Êush
 (
HTReque°
 * 
me
)

305  (
me
 ? me->
Êush
 : 
NO
);

306 
	}
}

312 
PUBLIC
 
time_t
 
	$HTReque°_d©e
 (
HTReque°
 * 
me
)

314  
me
 ? me->
d©e
 : -1;

315 
	}
}

317 
PUBLIC
 
BOOL
 
	$HTReque°_£tD©e
 (
HTReque°
 * 
me
, 
time_t
 
d©e
)

319 i‡(
me
) {

320 
me
->
d©e
 = date;

321  
YES
;

323  
NO
;

324 
	}
}

329 
PUBLIC
 
	$HTReque°_£tMëhod
 (
HTReque°
 * 
me
, 
HTMëhod
 
mëhod
)

331 i‡(
me
Ëme->
mëhod
 = method;

332 
	}
}

334 
PUBLIC
 
HTMëhod
 
	$HTReque°_mëhod
 (
HTReque°
 * 
me
)

336  
me
 ? me->
mëhod
 : 
METHOD_INVALID
;

337 
	}
}

343 
PUBLIC
 
BOOL
 
	$HTReque°_£tPri‹ôy
 (
HTReque°
 * 
me
, 
HTPri‹ôy
 
¥i‹ôy
)

345 i‡(
me
) {

346 
me
->
¥i‹ôy
 =Öriority;

347  
YES
;

349  
NO
;

350 
	}
}

352 
PUBLIC
 
HTPri‹ôy
 
	$HTReque°_¥i‹ôy
 (
HTReque°
 * 
me
)

354  (
me
 ? me->
¥i‹ôy
 : 
HT_PRIORITY_INV
);

355 
	}
}

360 
PUBLIC
 
BOOL
 
	$HTReque°_£tU£rProfûe
 (
HTReque°
 * 
me
, 
HTU£rProfûe
 * 
up
)

362 i‡(
me
) {

363 
me
->
u£Ωrofûe
 = 
up
;

364  
YES
;

366  
NO
;

367 
	}
}

369 
PUBLIC
 
HTU£rProfûe
 * 
	$HTReque°_u£rProfûe
 (
HTReque°
 * 
me
)

371  
me
 ? me->
u£Ωrofûe
 : 
NULL
;

372 
	}
}

377 
PUBLIC
 
BOOL
 
	$HTReque°_£tNë
 (
HTReque°
 * 
me
, 
HTNë
 * 
√t
)

379 i‡(
me
) {

380 
me
->
√t
 =Çet;

381  
YES
;

383  
NO
;

384 
	}
}

386 
PUBLIC
 
HTNë
 * 
	$HTReque°_√t
 (
HTReque°
 * 
me
)

388  
me
 ? me->
√t
 : 
NULL
;

389 
	}
}

395 
PUBLIC
 
HTRe•⁄£
 * 
	$HTReque°_ª•⁄£
 (
HTReque°
 * 
me
)

397 i‡(
me
) {

398 i‡(!
me
->
ª•⁄£
)

399 
me
->
ª•⁄£
 = 
	`HTRe•⁄£_√w
();

400  
me
->
ª•⁄£
;

402  
NULL
;

403 
	}
}

405 
PUBLIC
 
BOOL
 
	$HTReque°_£tRe•⁄£
 (
HTReque°
 * 
me
, 
HTRe•⁄£
 * 
ª•⁄£
)

407 i‡(
me
) {

408 i‡(
me
->
ª•⁄£
Ë
	`HTRe•⁄£_dñëe
(me->response);

409 
me
->
ª•⁄£
 =Ñesponse;

410  
YES
;

412  
NO
;

413 
	}
}

419 
PUBLIC
 
HTLi°
 * 
	$HTReque°_îr‹
 (
HTReque°
 * 
me
)

421  
me
 ? me->
îr‹_°ack
 : 
NULL
;

422 
	}
}

424 
PUBLIC
 
	$HTReque°_£tEº‹
 (
HTReque°
 * 
me
, 
HTLi°
 * 
li°
)

426 i‡(
me
Ëme->
îr‹_°ack
 = 
li°
;

427 
	}
}

431 
PUBLIC
 
	$HTReque°_dñëeAŒEº‹s
 (
HTReque°
 * 
ªque°
)

433 
	`HTEº‹_dñëeAŒ
(
ªque°
->
îr‹_°ack
);

434 
	`HTReque°_£tEº‹
(
ªque°
, 
NULL
);

435 
	}
}

438 
PUBLIC
 
BOOL
 
	$HTReque°_addEº‹
 (
HTReque°
 * 
me
,

439 
HTSevîôy
 
£vîôy
,

440 
BOOL
 
ign‹e
,

441 
ñemít
,

442 * 
∑r
,

443 
Àngth
,

444 * 
whîe
)

446 i‡(
me
) {

447 i‡(!
me
->
îr‹_°ack
Ëme->îr‹_°ack = 
	`HTLi°_√w
();

448  
	`HTEº‹_add
(
me
->
îr‹_°ack
, 
£vîôy
, 
ign‹e
, 
ñemít
,

449 
∑r
, 
Àngth
, 
whîe
);

451  
NO
;

452 
	}
}

454 
PUBLIC
 
BOOL
 
	$HTReque°_addSy°emEº‹
 (
HTReque°
 * 
me
,

455 
HTSevîôy
 
£vîôy
,

456 
îr‹numbî
,

457 
BOOL
 
ign‹e
,

458 * 
sysˇŒ
)

460 i‡(
me
) {

461 i‡(!
me
->
îr‹_°ack
Ëme->îr‹_°ack = 
	`HTLi°_√w
();

462  
	`HTEº‹_addSy°em
(
me
->
îr‹_°ack
, 
£vîôy
, 
îr‹numbî
,

463 
ign‹e
, 
sysˇŒ
);

465  
NO
;

466 
	}
}

471 
PUBLIC
 
BOOL
 
	$HTReque°_£tMaxRëry
 (
√wmax
)

473 i‡(
√wmax
 > 0) {

474 
HTMaxRëry
 = 
√wmax
;

475  
YES
;

477  
NO
;

478 
	}
}

480 
PUBLIC
 
	$HTReque°_maxRëry
 ()

482  
HTMaxRëry
;

483 
	}
}

485 
PUBLIC
 
	$HTReque°_ªåys
 (
HTReque°
 * 
me
)

487  
me
 ? me->
ªåys
 : 0;

488 
	}
}

490 
PUBLIC
 
BOOL
 
	$HTReque°_addRëry
 (
HTReque°
 * 
me
)

492  (
me
 && me->
ªåys
++);

493 
	}
}

495 
PUBLIC
 
	$HTReque°_AAªåys
 (
HTReque°
 * 
me
)

497  
me
 ? me->
AAªåys
 : 0;

498 
	}
}

500 
PUBLIC
 
BOOL
 
	$HTReque°_addAARëry
 (
HTReque°
 * 
me
)

502  (
me
 && me->
AAªåys
++);

503 
	}
}

511 
PUBLIC
 
BOOL
 
	$HTReque°_doRëry
 (
HTReque°
 * 
me
)

513  (
me
 && me->
ªåys
 < 
HTMaxRëry
-1);

514 
	}
}

519 
PUBLIC
 
	$HTReque°_£tPªem±ive
 (
HTReque°
 * 
me
, 
BOOL
 
mode
)

521 i‡(
me
Ëme->
¥ìm±ive
 = 
mode
;

522 
	}
}

524 
PUBLIC
 
BOOL
 
	$HTReque°_¥ìm±ive
 (
HTReque°
 * 
me
)

526  
me
 ? me->
¥ìm±ive
 : 
NO
;

527 
	}
}

532 
PUBLIC
 
	$HTReque°_£tNegŸüti⁄
 (
HTReque°
 * 
me
, 
BOOL
 
mode
)

534 i‡(
me
Ëme->
C⁄ã¡NegŸüti⁄
 = 
mode
;

535 
	}
}

537 
PUBLIC
 
BOOL
 
	$HTReque°_√gŸüti⁄
 (
HTReque°
 * 
me
)

539  
me
 ? me->
C⁄ã¡NegŸüti⁄
 : 
NO
;

540 
	}
}

547 
PUBLIC
 
	$HTReque°_£tPªc⁄dôi⁄s
 (
HTReque°
 * 
me
, 
HTPªc⁄dôi⁄s
 
mode
)

549 i‡(
me
Ëme->
¥ec⁄dôi⁄s
 = 
mode
;

550 
	}
}

552 
PUBLIC
 
HTPªc⁄dôi⁄s
 
	$HTReque°_¥ec⁄dôi⁄s
 (
HTReque°
 * 
me
)

554  
me
 ? me->
¥ec⁄dôi⁄s
 : 
NO
;

555 
	}
}

560 
PUBLIC
 
	$HTReque°_£tGnHd
 (
HTReque°
 * 
me
, 
HTGnHd
 
gnhd
)

562 i‡(
me
Ëme->
GíMask
 = 
gnhd
;

563 
	}
}

565 
PUBLIC
 
	$HTReque°_addGnHd
 (
HTReque°
 * 
me
, 
HTGnHd
 
gnhd
)

567 i‡(
me
Ëme->
GíMask
 |
gnhd
;

568 
	}
}

570 
PUBLIC
 
HTGnHd
 
	$HTReque°_gnHd
 (
HTReque°
 * 
me
)

572  
me
 ? me->
GíMask
 : 0;

573 
	}
}

578 
PUBLIC
 
	$HTReque°_£tRqHd
 (
HTReque°
 * 
me
, 
HTRqHd
 
rqhd
)

580 i‡(
me
Ëme->
Reque°Mask
 = 
rqhd
;

581 
	}
}

583 
PUBLIC
 
	$HTReque°_addRqHd
 (
HTReque°
 * 
me
, 
HTRqHd
 
rqhd
)

585 i‡(
me
Ëme->
Reque°Mask
 |
rqhd
;

586 
	}
}

588 
PUBLIC
 
HTRqHd
 
	$HTReque°_rqHd
 (
HTReque°
 * 
me
)

590  
me
 ? me->
Reque°Mask
 : 0;

591 
	}
}

596 
PUBLIC
 
	$HTReque°_£tRsHd
 (
HTReque°
 * 
me
, 
HTRsHd
 
rshd
)

598 i‡(
me
Ëme->
Re•⁄£Mask
 = 
rshd
;

599 
	}
}

601 
PUBLIC
 
	$HTReque°_addRsHd
 (
HTReque°
 * 
me
, 
HTRsHd
 
rshd
)

603 i‡(
me
Ëme->
Re•⁄£Mask
 |
rshd
;

604 
	}
}

606 
PUBLIC
 
HTRsHd
 
	$HTReque°_rsHd
 (
HTReque°
 * 
me
)

608  
me
 ? me->
Re•⁄£Mask
 : 0;

609 
	}
}

614 
PUBLIC
 
	$HTReque°_£tEnHd
 (
HTReque°
 * 
me
, 
HTEnHd
 
íhd
)

616 i‡(
me
Ëme->
E¡ôyMask
 = 
íhd
;

617 
	}
}

619 
PUBLIC
 
	$HTReque°_addEnHd
 (
HTReque°
 * 
me
, 
HTEnHd
 
íhd
)

621 i‡(
me
Ëme->
E¡ôyMask
 |
íhd
;

622 
	}
}

624 
PUBLIC
 
HTEnHd
 
	$HTReque°_íHd
 (
HTReque°
 * 
me
)

626  
me
 ? me->
E¡ôyMask
 : 0;

627 
	}
}

632 
PUBLIC
 
	$HTReque°_£tGíî©‹
 (
HTReque°
 * 
me
, 
HTLi°
 *
gíî©‹
,

633 
BOOL
 
ovîride
)

635 i‡(
me
) {

636 
me
->
gíî©‹s
 = 
gíî©‹
;

637 
me
->
gís_loˇl
 = 
ovîride
;

639 
	}
}

641 
PUBLIC
 
HTLi°
 * 
	$HTReque°_gíî©‹
 (
HTReque°
 * 
me
, 
BOOL
 *
ovîride
)

643 i‡(
me
) {

644 *
ovîride
 = 
me
->
gís_loˇl
;

645  
me
->
gíî©‹s
;

647  
NULL
;

648 
	}
}

653 
PUBLIC
 
	$HTReque°_£tMIMEP¨£Së
 (
HTReque°
 * 
me
,

654 
HTMIMEP¨£Së
 * 
∑r£Së
, 
BOOL
 
loˇl
)

656 i‡(
me
) {

657 
me
->
∑r£Së
 =ÖarseSet;

658 
me
->
∑rs_loˇl
 = 
loˇl
;

660 
	}
}

662 
PUBLIC
 
HTMIMEP¨£Së
 * 
	$HTReque°_MIMEP¨£Së
 (
HTReque°
 * 
me
, 
BOOL
 * 
pLoˇl
)

664 i‡(
me
) {

665 i‡(
pLoˇl
Ë*pLoˇ»
me
->
∑rs_loˇl
;

666  
me
->
∑r£Së
;

668  
NULL
;

669 
	}
}

675 
PUBLIC
 
	$HTReque°_£tC⁄vîsi⁄
 (
HTReque°
 * 
me
, 
HTLi°
 *
ty≥
,

676 
BOOL
 
ovîride
)

678 i‡(
me
) {

679 
me
->
c⁄vîsi⁄s
 = 
ty≥
;

680 
me
->
c⁄v_loˇl
 = 
ovîride
;

682 
	}
}

684 
PUBLIC
 
HTLi°
 * 
	$HTReque°_c⁄vîsi⁄
 (
HTReque°
 * 
me
)

686  
me
 ? me->
c⁄vîsi⁄s
 : 
NULL
;

687 
	}
}

693 
PUBLIC
 
	$HTReque°_£tEncodög
 (
HTReque°
 * 
me
, 
HTLi°
 *
íc
,

694 
BOOL
 
ovîride
)

696 i‡(
me
) {

697 
me
->
ícodögs
 = 
íc
;

698 
me
->
íc_loˇl
 = 
ovîride
;

700 
	}
}

702 
PUBLIC
 
HTLi°
 * 
	$HTReque°_ícodög
 (
HTReque°
 * 
me
)

704  
me
 ? me->
ícodögs
 : 
NULL
;

705 
	}
}

711 
PUBLIC
 
	$HTReque°_£tTøns„r
 (
HTReque°
 * 
me
,

712 
HTLi°
 * 
ã
, 
BOOL
 
ovîride
)

714 i‡(
me
) {

715 
me
->
ãs
 = 
ã
;

716 
me
->
ã_loˇl
 = 
ovîride
;

718 
	}
}

720 
PUBLIC
 
HTLi°
 * 
	$HTReque°_å™s„r
 (
HTReque°
 * 
me
)

722  
me
 ? me->
ãs
 : 
NULL
;

723 
	}
}

729 
PUBLIC
 
	$HTReque°_£tL™guage
 (
HTReque°
 * 
me
, 
HTLi°
 *
œng
,

730 
BOOL
 
ovîride
)

732 i‡(
me
) {

733 
me
->
œnguages
 = 
œng
;

734 
me
->
œng_loˇl
 = 
ovîride
;

736 
	}
}

738 
PUBLIC
 
HTLi°
 * 
	$HTReque°_œnguage
 (
HTReque°
 * 
me
)

740  
me
 ? me->
œnguages
 : 
NULL
;

741 
	}
}

747 
PUBLIC
 
	$HTReque°_£tCh¨£t
 (
HTReque°
 * 
me
, 
HTLi°
 *
ch¨£t
,

748 
BOOL
 
ovîride
)

750 i‡(
me
) {

751 
me
->
ch¨£ts
 = 
ch¨£t
;

752 
me
->
ch¨_loˇl
 = 
ovîride
;

754 
	}
}

756 
PUBLIC
 
HTLi°
 * 
	$HTReque°_ch¨£t
 (
HTReque°
 * 
me
)

758  
me
 ? me->
ch¨£ts
 : 
NULL
;

759 
	}
}

764 
PUBLIC
 
	$HTReque°_£tFuŒURI
 (
HTReque°
 * 
me
, 
BOOL
 
mode
)

766 i‡(
me
Ëme->
fuŒ_uri
 = 
mode
;

767 
	}
}

769 
PUBLIC
 
BOOL
 
	$HTReque°_fuŒURI
 (
HTReque°
 * 
me
)

771  
me
 ? me->
fuŒ_uri
 : 
NO
;

772 
	}
}

777 
PUBLIC
 
BOOL
 
	$HTReque°_£tProxy
 (
HTReque°
 * 
me
, c⁄° * 
¥oxy
)

779 i‡(
me
 && 
¥oxy
) {

780 
	`SåAŒocC›y
(
me
->
¥oxy
,Öroxy);

781  
YES
;

783  
NO
;

784 
	}
}

786 
PUBLIC
 * 
	$HTReque°_¥oxy
 (
HTReque°
 * 
me
)

788  
me
 ? me->
¥oxy
 : 
NULL
;

789 
	}
}

791 
PUBLIC
 
BOOL
 
	$HTReque°_dñëeProxy
 (
HTReque°
 * 
me
)

793 i‡(
me
) {

794 
	`HT_FREE
(
me
->
¥oxy
);

795  
YES
;

797  
NO
;

798 
	}
}

803 
PUBLIC
 
	$HTReque°_£tRñﬂdMode
 (
HTReque°
 * 
me
, 
HTRñﬂd
 
mode
)

805 i‡(
me
Ëme->
ªlﬂd
 = 
mode
;

806 
	}
}

808 
PUBLIC
 
HTRñﬂd
 
	$HTReque°_ªlﬂdMode
 (
HTReque°
 * 
me
)

810  
me
 ? me->
ªlﬂd
 : 
HT_CACHE_OK
;

811 
	}
}

816 
PUBLIC
 * 
	$HTReque°_deÁu…PutName
 (
HTReque°
 * 
me
)

818 i‡(
me
)

819  (
me
->
deÁu…_put_«me
);

820  
NULL
;

821 
	}
}

824 
PUBLIC
 
BOOL
 
	$HTReque°_£tDeÁu…PutName
 (
HTReque°
 * 
me
, * 
«me
)

826 i‡(
me
 && 
«me
) {

827 i‡(
me
->
deÁu…_put_«me
)

828 
	`HTReque°_dñëeDeÁu…PutName
 (
me
);

829 
	`SåAŒocC›y
 (
me
->
deÁu…_put_«me
, 
«me
);

830  
YES
;

832  
NO
;

833 
	}
}

835 
PUBLIC
 
BOOL
 
	$HTReque°_dñëeDeÁu…PutName
 (
HTReque°
 * 
me
)

837 i‡(
me
 && me->
deÁu…_put_«me
) {

838 
	`HT_FREE
 (
me
->
deÁu…_put_«me
);

839 
me
->
deÁu…_put_«me
 = 
NULL
;

840  
YES
;

842  
NO
;

843 
	}
}

850 
PUBLIC
 
BOOL
 
	$HTReque°_addCacheC⁄åﬁ
 (
HTReque°
 * 
me
,

851 * 
tokí
, * 
vÆue
)

853 i‡(
me
) {

854 i‡(!
me
->
ˇche_c⁄åﬁ
Ëme->ˇche_c⁄åﬁ = 
	`HTAssocLi°_√w
();

855  
	`HTAssocLi°_ª∂a˚Obje˘
(
me
->
ˇche_c⁄åﬁ
, 
tokí
, 
vÆue
);

857  
NO
;

858 
	}
}

860 
PUBLIC
 
BOOL
 
	$HTReque°_dñëeCacheC⁄åﬁ
 (
HTReque°
 * 
me
)

862 i‡(
me
 && me->
ˇche_c⁄åﬁ
) {

863 
	`HTAssocLi°_dñëe
(
me
->
ˇche_c⁄åﬁ
);

864 
me
->
ˇche_c⁄åﬁ
 = 
NULL
;

865  
YES
;

867  
NO
;

868 
	}
}

870 
PUBLIC
 
HTAssocLi°
 * 
	$HTReque°_ˇcheC⁄åﬁ
 (
HTReque°
 * 
me
)

872  (
me
 ? me->
ˇche_c⁄åﬁ
 : 
NULL
);

873 
	}
}

878 
PUBLIC
 
BOOL
 
	$HTReque°_dñëeR™ge
 (
HTReque°
 * 
me
)

880 i‡(
me
 && me->
byã_ønges
) {

881 
	`HTAssocLi°_dñëe
(
me
->
byã_ønges
);

882 
me
->
byã_ønges
 = 
NULL
;

883  
YES
;

885  
NO
;

886 
	}
}

888 
PUBLIC
 
BOOL
 
	$HTReque°_addR™ge
 (
HTReque°
 * 
me
, * 
unô
, * 
ønge
)

890 i‡(
me
) {

891 i‡(!
me
->
byã_ønges
) {

892 
me
->
byã_ønges
 = 
	`HTAssocLi°_√w
();

893 
	`HTReque°_addRqHd
(
me
, 
HT_C_RANGE
);

895  
	`HTAssocLi°_ª∂a˚Obje˘
(
me
->
byã_ønges
, 
unô
, 
ønge
);

897  
NO
;

898 
	}
}

900 
PUBLIC
 
HTAssocLi°
 * 
	$HTReque°_ønge
 (
HTReque°
 * 
me
)

902  (
me
 ? me->
byã_ønges
 : 
NULL
);

903 
	}
}

910 
PUBLIC
 
BOOL
 
	$HTReque°_addC⁄√˘i⁄
 (
HTReque°
 * 
me
,

911 * 
tokí
, * 
vÆue
)

913 i‡(
me
) {

914 i‡(!
me
->
c⁄√˘i⁄
Ëme->c⁄√˘i⁄ = 
	`HTAssocLi°_√w
();

915  
	`HTAssocLi°_ª∂a˚Obje˘
(
me
->
c⁄√˘i⁄
, 
tokí
, 
vÆue
);

917  
NO
;

918 
	}
}

920 
PUBLIC
 
BOOL
 
	$HTReque°_dñëeC⁄√˘i⁄
 (
HTReque°
 * 
me
)

922 i‡(
me
 && me->
c⁄√˘i⁄
) {

923 
	`HTAssocLi°_dñëe
(
me
->
c⁄√˘i⁄
);

924 
me
->
c⁄√˘i⁄
 = 
NULL
;

925  
YES
;

927  
NO
;

928 
	}
}

930 
PUBLIC
 
HTAssocLi°
 * 
	$HTReque°_c⁄√˘i⁄
 (
HTReque°
 * 
me
)

932  (
me
 ? me->
c⁄√˘i⁄
 : 
NULL
);

933 
	}
}

938 
PUBLIC
 
BOOL
 
	$HTReque°_addEx≥˘
 (
HTReque°
 * 
me
,

939 * 
tokí
, * 
vÆue
)

941 i‡(
me
) {

942 i‡(!
me
->
ex≥˘
Ëme->ex≥˘ = 
	`HTAssocLi°_√w
();

943  
	`HTAssocLi°_ª∂a˚Obje˘
(
me
->
ex≥˘
, 
tokí
, 
vÆue
);

945  
NO
;

946 
	}
}

948 
PUBLIC
 
BOOL
 
	$HTReque°_dñëeEx≥˘
 (
HTReque°
 * 
me
)

950 i‡(
me
 && me->
ex≥˘
) {

951 
	`HTAssocLi°_dñëe
(
me
->
ex≥˘
);

952 
me
->
ex≥˘
 = 
NULL
;

953  
YES
;

955  
NO
;

956 
	}
}

958 
PUBLIC
 
HTAssocLi°
 * 
	$HTReque°_ex≥˘
 (
HTReque°
 * 
me
)

960  (
me
 ? me->
ex≥˘
 : 
NULL
);

961 
	}
}

966 
PUBLIC
 
BOOL
 
	$HTReque°_dñëeCªdítülsAŒ
 (
HTReque°
 * 
me
)

968 i‡(
me
 && me->
¸edítüls
) {

969 
	`HTAssocLi°_dñëe
(
me
->
¸edítüls
);

970 
me
->
¸edítüls
 = 
NULL
;

971  
YES
;

973  
NO
;

974 
	}
}

976 
PUBLIC
 
BOOL
 
	$HTReque°_addCªdítüls
 (
HTReque°
 * 
me
,

977 * 
tokí
, * 
vÆue
)

979 i‡(
me
) {

980 i‡(!
me
->
¸edítüls
Ëme->¸edítül†
	`HTAssocLi°_√w
();

981  
	`HTAssocLi°_addObje˘
(
me
->
¸edítüls
, 
tokí
, 
vÆue
);

983  
NO
;

984 
	}
}

986 
PUBLIC
 
HTAssocLi°
 * 
	$HTReque°_¸edítüls
 (
HTReque°
 * 
me
)

988  (
me
 ? me->
¸edítüls
 : 
NULL
);

989 
	}
}

994 
PUBLIC
 
BOOL
 
	$HTReque°_£tRólm
 (
HTReque°
 * 
me
, * 
ªÆm
)

996 i‡(
me
 && 
ªÆm
 &&Ñealm != me->realm) {

997 
	`SåAŒocC›y
(
me
->
ªÆm
,Ñealm);

998  
YES
;

1000  
NO
;

1001 
	}
}

1003 
PUBLIC
 c⁄° * 
	$HTReque°_ªÆm
 (
HTReque°
 * 
me
)

1005  (
me
 ? me->
ªÆm
 : 
NULL
);

1006 
	}
}

1008 
PUBLIC
 
BOOL
 
	$HTReque°_dñëeRólm
 (
HTReque°
 * 
me
)

1010 i‡(
me
) {

1011 
	`HT_FREE
(
me
->
ªÆm
);

1012  
YES
;

1014  
NO
;

1015 
	}
}

1020 
PUBLIC
 
BOOL
 
	$HTReque°_addExåaHódî
 (
HTReque°
 * 
me
,

1021 * 
tokí
, * 
vÆue
)

1023 i‡(
me
 && 
tokí
) {

1024 i‡(!
me
->
exåa_hódîs
Ëme->exåa_hódî†
	`HTAssocLi°_√w
();

1025  
	`HTAssocLi°_addObje˘
(
me
->
exåa_hódîs
, 
tokí
, 
vÆue
);

1027  
NO
;

1028 
	}
}

1030 
PUBLIC
 
HTAssocLi°
 * 
	$HTReque°_exåaHódî
 (
HTReque°
 * 
me
)

1032  (
me
 ? me->
exåa_hódîs
 : 
NULL
);

1033 
	}
}

1035 
PUBLIC
 
BOOL
 
	$HTReque°_dñëeExåaHódîAŒ
 (
HTReque°
 * 
me
)

1037 i‡(
me
 && me->
exåa_hódîs
) {

1038 
	`HTAssocLi°_dñëe
(
me
->
exåa_hódîs
);

1039 
me
->
exåa_hódîs
 = 
NULL
;

1040  
YES
;

1042  
NO
;

1043 
	}
}

1048 
PUBLIC
 
BOOL
 
	$HTReque°_addO±i⁄Æ
 (
HTReque°
 * 
me
,

1049 * 
tokí
, * 
vÆue
)

1051 i‡(
me
) {

1052 i‡(!
me
->
›ti⁄Æ
Ëme->›ti⁄Æ = 
	`HTAssocLi°_√w
();

1053  
	`HTAssocLi°_addObje˘
(
me
->
›ti⁄Æ
, 
tokí
,
vÆue
);

1055  
NO
;

1056 
	}
}

1058 
PUBLIC
 
HTAssocLi°
 * 
	$HTReque°_›ti⁄Æ
 (
HTReque°
 * 
me
)

1060  (
me
 ? me->
›ti⁄Æ
 : 
NULL
);

1061 
	}
}

1063 
PUBLIC
 
BOOL
 
	$HTReque°_dñëeO±i⁄ÆAŒ
 (
HTReque°
 * 
me
)

1065 i‡(
me
 && me->
›ti⁄Æ
) {

1066 
	`HTAssocLi°_dñëe
(
me
->
›ti⁄Æ
);

1067 
me
->
›ti⁄Æ
 = 
NULL
;

1068  
YES
;

1070  
NO
;

1071 
	}
}

1073 
PUBLIC
 
BOOL
 
	$HTReque°_addM™d©‹y
 (
HTReque°
 * 
me
,

1074 * 
tokí
, * 
vÆue
)

1076 i‡(
me
) {

1077 i‡(!
me
->
m™d©‹y
Ëme->m™d©‹y = 
	`HTAssocLi°_√w
();

1078  
	`HTAssocLi°_addObje˘
(
me
->
m™d©‹y
, 
tokí
,
vÆue
);

1080  
NO
;

1081 
	}
}

1083 
PUBLIC
 
HTAssocLi°
 * 
	$HTReque°_m™d©‹y
 (
HTReque°
 * 
me
)

1085  (
me
 ? me->
m™d©‹y
 : 
NULL
);

1086 
	}
}

1088 
PUBLIC
 
BOOL
 
	$HTReque°_dñëeM™d©‹yAŒ
 (
HTReque°
 * 
me
)

1090 i‡(
me
 && me->
m™d©‹y
) {

1091 
	`HTAssocLi°_dñëe
(
me
->
m™d©‹y
);

1092 
me
->
m™d©‹y
 = 
NULL
;

1093  
YES
;

1095  
NO
;

1096 
	}
}

1101 
PUBLIC
 
	$HTReque°_£tAnch‹
 (
HTReque°
 * 
me
, 
HTAnch‹
 *
™ch‹
)

1103 i‡(
me
) {

1104 
me
->
™ch‹
 = 
	`HTAnch‹_∑ª¡
(anchor);

1105 
me
->
chûdAnch‹
 = ((
HTAnch‹
 *Ëme->
™ch‹
 !=ánchor) ?

1106 (
HTChûdAnch‹
 *Ë
™ch‹
 : 
NULL
;

1108 
	}
}

1110 
PUBLIC
 
HTP¨ítAnch‹
 * 
	$HTReque°_™ch‹
 (
HTReque°
 * 
me
)

1112  
me
 ? me->
™ch‹
 : 
NULL
;

1113 
	}
}

1115 
PUBLIC
 
HTChûdAnch‹
 * 
	$HTReque°_chûdAnch‹
 (
HTReque°
 * 
me
)

1117  
me
 ? me->
chûdAnch‹
 : 
NULL
;

1118 
	}
}

1123 
PUBLIC
 
	$HTReque°_£tP¨ít
 (
HTReque°
 * 
me
, 
HTP¨ítAnch‹
 *
∑ª¡
)

1125 i‡(
me
Ëme->
∑ª¡Anch‹
 = 
∑ª¡
;

1126 
	}
}

1128 
PUBLIC
 
HTP¨ítAnch‹
 * 
	$HTReque°_∑ª¡
 (
HTReque°
 * 
me
)

1130  
me
 ? me->
∑ª¡Anch‹
 : 
NULL
;

1131 
	}
}

1136 
PUBLIC
 
	$HTReque°_£tOuçutSåóm
 (
HTReque°
 * 
me
, 
HTSåóm
 *
ouçut
)

1138 i‡(
me
) {

1139 i‡(
ouçut
) {

1140 
me
->
ouçut_°ªam
 = 
	`HTNoFªeSåóm_√w
(
ouçut
);

1141 
me
->
‹ig_ouçut_°ªam
 = 
ouçut
;

1143 
me
->
ouçut_°ªam
 = 
ouçut
;

1146 
	}
}

1148 
PUBLIC
 
HTSåóm
 *
	$HTReque°_ouçutSåóm
 (
HTReque°
 * 
me
)

1150  
me
 ? me->
ouçut_°ªam
 : 
NULL
;

1151 
	}
}

1156 
PUBLIC
 
	$HTReque°_£tOuçutF‹m©
 (
HTReque°
 * 
me
, 
HTF‹m©
 
f‹m©
)

1158 i‡(
me
Ëme->
ouçut_f‹m©
 = 
f‹m©
;

1159 
	}
}

1161 
PUBLIC
 
HTF‹m©
 
	$HTReque°_ouçutF‹m©
 (
HTReque°
 * 
me
)

1163  
me
 ? me->
ouçut_f‹m©
 : 
NULL
;

1164 
	}
}

1169 
PUBLIC
 
	$HTReque°_£tDebugSåóm
 (
HTReque°
 * 
me
, 
HTSåóm
 *
debug
)

1171 i‡(
debug
) {

1172 
me
->
debug_°ªam
 = 
	`HTNoFªeSåóm_√w
(
debug
);

1173 
me
->
‹ig_debug_°ªam
 = 
debug
;

1175 
me
->
debug_°ªam
 = 
debug
;

1177 
	}
}

1179 
PUBLIC
 
HTSåóm
 *
	$HTReque°_debugSåóm
 (
HTReque°
 * 
me
)

1181  
me
 ? me->
debug_°ªam
 : 
NULL
;

1182 
	}
}

1187 
PUBLIC
 
	$HTReque°_£tDebugF‹m©
 (
HTReque°
 * 
me
, 
HTF‹m©
 
f‹m©
)

1189 i‡(
me
Ëme->
debug_f‹m©
 = 
f‹m©
;

1190 
	}
}

1192 
PUBLIC
 
HTF‹m©
 
	$HTReque°_debugF‹m©
 (
HTReque°
 * 
me
)

1194  
me
 ? me->
debug_f‹m©
 : 
NULL
;

1195 
	}
}

1200 
PUBLIC
 
	$HTReque°_£tI≈utSåóm
 (
HTReque°
 * 
me
, 
HTSåóm
 *
öput
)

1202 i‡(
me
Ëme->
öput_°ªam
 = 
öput
;

1203 
	}
}

1205 
PUBLIC
 
HTSåóm
 *
	$HTReque°_öputSåóm
 (
HTReque°
 * 
me
)

1207  
me
 ? me->
öput_°ªam
 : 
NULL
;

1208 
	}
}

1213 
PUBLIC
 
BOOL
 
	$HTReque°_addBef‹e
 (
HTReque°
 * 
me
, 
HTNëBef‹e
 * 
fûãr
,

1214 c⁄° * 
tm∂©e
, * 
∑øm
,

1215 
HTFûãrOrdî
 
‹dî
, 
BOOL
 
ovîride
)

1217 i‡(
me
) {

1218 
me
->
bef‹es_loˇl
 = 
ovîride
;

1219 i‡(
fûãr
) {

1220 i‡(!
me
->
bef‹es
Ëme->bef‹e†
	`HTLi°_√w
();

1221  
	`HTNëCÆl_addBef‹e
(
me
->
bef‹es
, 
fûãr
,

1222 
tm∂©e
, 
∑øm
, 
‹dî
);

1224  
YES
;

1226  
NO
;

1227 
	}
}

1229 
PUBLIC
 
BOOL
 
	$HTReque°_dñëeBef‹e
 (
HTReque°
 * 
me
, 
HTNëBef‹e
 * 
fûãr
)

1231 i‡(
me
 && me->
bef‹es
)

1232  
	`HTNëCÆl_dñëeBef‹e
(
me
->
bef‹es
, 
fûãr
);

1233  
NO
;

1234 
	}
}

1236 
PUBLIC
 
BOOL
 
	$HTReque°_dñëeBef‹eAŒ
 (
HTReque°
 * 
me
)

1238 i‡(
me
 && me->
bef‹es
) {

1239 
	`HTNëCÆl_dñëeBef‹eAŒ
(
me
->
bef‹es
);

1240 
me
->
bef‹es
 = 
NULL
;

1241 
me
->
bef‹es_loˇl
 = 
NO
;

1242  
YES
;

1244  
NO
;

1245 
	}
}

1247 
PUBLIC
 
HTLi°
 * 
	$HTReque°_bef‹e
 (
HTReque°
 * 
me
, 
BOOL
 *
ovîride
)

1249 i‡(
me
) {

1250 *
ovîride
 = 
me
->
bef‹es_loˇl
;

1251  
me
->
bef‹es
;

1253  
NULL
;

1254 
	}
}

1256 
PUBLIC
 
BOOL
 
	$HTReque°_addA·î
 (
HTReque°
 * 
me
, 
HTNëA·î
 * 
fûãr
,

1257 c⁄° * 
tm∂©e
, * 
∑øm
,

1258 
°©us
, 
HTFûãrOrdî
 
‹dî
,

1259 
BOOL
 
ovîride
)

1261 i‡(
me
) {

1262 
me
->
a·îs_loˇl
 = 
ovîride
;

1263 i‡(
fûãr
) {

1264 i‡(!
me
->
a·îs
Ëme->a·î†
	`HTLi°_√w
();

1265  
	`HTNëCÆl_addA·î
(
me
->
a·îs
, 
fûãr
,

1266 
tm∂©e
, 
∑øm
, 
°©us
, 
‹dî
);

1268  
YES
;

1270  
NO
;

1271 
	}
}

1273 
PUBLIC
 
BOOL
 
	$HTReque°_dñëeA·î
 (
HTReque°
 * 
me
, 
HTNëA·î
 * 
fûãr
)

1275  (
me
 && me->
a·îs
) ?

1276 
	`HTNëCÆl_dñëeA·î
(
me
->
a·îs
, 
fûãr
Ë: 
NO
;

1277 
	}
}

1279 
PUBLIC
 
BOOL
 
	$HTReque°_dñëeA·îSètus
 (
HTReque°
 * 
me
, 
°©us
)

1281  (
me
 && me->
a·îs
) ?

1282 
	`HTNëCÆl_dñëeA·îSètus
(
me
->
a·îs
, 
°©us
Ë: 
NO
;

1283 
	}
}

1285 
PUBLIC
 
BOOL
 
	$HTReque°_dñëeA·îAŒ
 (
HTReque°
 * 
me
)

1287 i‡(
me
 && me->
a·îs
) {

1288 
	`HTNëCÆl_dñëeA·îAŒ
(
me
->
a·îs
);

1289 
me
->
a·îs
 = 
NULL
;

1290 
me
->
a·îs_loˇl
 = 
NO
;

1291  
YES
;

1293  
NO
;

1294 
	}
}

1296 
PUBLIC
 
HTLi°
 * 
	$HTReque°_a·î
 (
HTReque°
 * 
me
, 
BOOL
 *
ovîride
)

1298 i‡(
me
) {

1299 *
ovîride
 = 
me
->
a·îs_loˇl
;

1300  
me
->
a·îs
;

1302  
NULL
;

1303 
	}
}

1308 
PUBLIC
 
	$HTReque°_£tCÆlback
 (
HTReque°
 * 
me
, 
HTReque°CÆlback
 *
cbf
)

1310 i‡(
me
Ëme->
ˇŒback
 = 
cbf
;

1311 
	}
}

1313 
PUBLIC
 
HTReque°CÆlback
 *
	$HTReque°_ˇŒback
 (
HTReque°
 * 
me
)

1315  
me
 ? me->
ˇŒback
 : 
NULL
;

1316 
	}
}

1321 
PUBLIC
 
	$HTReque°_£tC⁄ãxt
 (
HTReque°
 * 
me
, *
c⁄ãxt
)

1323 i‡(
me
Ëme->
c⁄ãxt
 = context;

1324 
	}
}

1326 
PUBLIC
 *
	$HTReque°_c⁄ãxt
 (
HTReque°
 * 
me
)

1328  
me
 ? me->
c⁄ãxt
 : 
NULL
;

1329 
	}
}

1335 
PUBLIC
 
	$HTReque°_£tOuçutC⁄√˘ed
 (
HTReque°
 * 
me
, 
BOOL
 
mode
)

1337 i‡(
me
Ëme->
c⁄√˘ed
 = 
mode
;

1338 
	}
}

1340 
PUBLIC
 
BOOL
 
	$HTReque°_ouçutC⁄√˘ed
 (
HTReque°
 * 
me
)

1342  
me
 ? me->
c⁄√˘ed
 : 
NO
;

1343 
	}
}

1348 
PUBLIC
 
	$HTReque°_bodyRód
(
HTReque°
 * 
me
)

1350  
me
 ? 
	`HTNë_byãsRód
(me->
√t
Ë- 
	`HTNë_hódîByãsRód
(me->net) : -1;

1351 
	}
}

1356 
PUBLIC
 
	$HTReque°_bodyWrôãn
(
HTReque°
 * 
me
)

1358  
me
 ? 
	`HTNë_byãsWrôãn
(me->
√t
Ë- 
	`HTNë_hódîByãsWrôãn
(me->net) : -1;

1359 
	}
}

1364 
PUBLIC
 
	$HTReque°_byãsRód
 (
HTReque°
 * 
me
)

1366  
me
 ? 
	`HTNë_byãsRód
(me->
√t
) : -1;

1367 
	}
}

1372 
PUBLIC
 
	$HTReque°_byãsWrôãn
 (
HTReque°
 * 
me
)

1374  
me
 ? 
	`HTNë_byãsWrôãn
(me->
√t
) : -1;

1375 
	}
}

1380 
PUBLIC
 
BOOL
 
	$HTReque°_£tMaxF‹w¨ds
 (
HTReque°
 * 
me
, 
maxf‹w¨ds
)

1382 i‡(
me
 && 
maxf‹w¨ds
 >= 0) {

1383 
me
->
max_f‹w¨ds
 = 
maxf‹w¨ds
;

1384 
	`HTReque°_addRqHd
(
me
, 
HT_C_MAX_FORWARDS
);

1385  
YES
;

1387  
NO
;

1388 
	}
}

1390 
PUBLIC
 
	$HTReque°_maxF‹w¨ds
 (
HTReque°
 * 
me
)

1392  
me
 ? me->
max_f‹w¨ds
 : -1;

1393 
	}
}

1398 
PUBLIC
 
BOOL
 
	$HTReque°_£tSour˚
 (
HTReque°
 * 
me
, HTReque° * 
sour˚
)

1400 i‡(
me
) {

1401 
me
->
sour˚
 = source;

1402  
YES
;

1404  
NO
;

1405 
	}
}

1407 
PUBLIC
 
HTReque°
 * 
	$HTReque°_sour˚
 (
HTReque°
 * 
me
)

1409  (
me
 ? me->
sour˚
 : 
NULL
);

1410 
	}
}

1412 
PUBLIC
 
BOOL
 
	$HTReque°_isPo°Web
 (
HTReque°
 * 
me
)

1414  (
me
 ? me->
sour˚
 !
NULL
: 
NO
);

1415 
	}
}

1420 
PUBLIC
 
	$HTReque°_£tPo°CÆlback
 (
HTReque°
 * 
me
, 
HTPo°CÆlback
 *
cbf
)

1422 i‡(
me
Ëme->
Po°CÆlback
 = 
cbf
;

1423 
	}
}

1425 
PUBLIC
 
HTPo°CÆlback
 * 
	$HTReque°_po°CÆlback
 (
HTReque°
 * 
me
)

1427  
me
 ? me->
Po°CÆlback
 : 
NULL
;

1428 
	}
}

1433 
PUBLIC
 
BOOL
 
	$HTReque°_£tE¡ôyAnch‹
 (
HTReque°
 * 
me
,

1434 
HTP¨ítAnch‹
 * 
™ch‹
)

1436 i‡(
me
) {

1437 
me
->
sour˚_™ch‹
 = 
™ch‹
;

1438  
YES
;

1440  
NO
;

1441 
	}
}

1443 
PUBLIC
 
HTP¨ítAnch‹
 * 
	$HTReque°_ítôyAnch‹
 (
HTReque°
 * 
me
)

1445  
me
 ? me->
sour˚_™ch‹
 ? me->source_anchor :

1446 
me
->
™ch‹
 : 
NULL
;

1447 
	}
}

1458 
PUBLIC
 
BOOL
 
	$HTReque°_addDe°ö©i⁄
 (
HTReque°
 * 
§c
, HTReque° * 
de°
)

1460 i‡(
§c
 && 
de°
) {

1461 
de°
->
sour˚
 = 
§c
->source = src;

1462 i‡(!
§c
->
maöDe°ö©i⁄
) {

1463 
§c
->
maöDe°ö©i⁄
 = 
de°
;

1464 
§c
->
de°Reque°s
 = 1;

1465 
	`HTTRACE
(
CORE_TRACE
, "POSTWeb..... Addög de° %∞tÿ§¯%p\n" 
_


1466 
de°
 
_
 
§c
);

1467  
YES
;

1469 i‡(!
§c
->
de°ö©i⁄s
Ë§c->de°ö©i⁄†
	`HTLi°_√w
();

1470 i‡(
	`HTLi°_addObje˘
(
§c
->
de°ö©i⁄s
, (*Ë
de°
)==
YES
) {

1471 
§c
->
de°Reque°s
++;

1472 
	`HTTRACE
(
CORE_TRACE
, "POSTWeb..... Addög de° %∞tÿ§¯%p\n" 
_


1473 
de°
 
_
 
§c
);

1474  
YES
;

1478  
NO
;

1479 
	}
}

1487 
PUBLIC
 
BOOL
 
	$HTReque°_ªmoveDe°ö©i⁄
 (
HTReque°
 * 
de°
)

1489 
BOOL
 
found
=
NO
;

1490 i‡(
de°
 && de°->
sour˚
) {

1491 
HTReque°
 *
§c
 = 
de°
->
sour˚
;

1492 i‡(
§c
->
maöDe°ö©i⁄
 =
de°
) {

1493 
de°
->
sour˚
 = 
NULL
;

1494 
§c
->
maöDe°ö©i⁄
 = 
NULL
;

1495 
§c
->
de°Reque°s
--;

1496 
found
 = 
YES
;

1497 } i‡(
§c
->
de°ö©i⁄s
) {

1498 i‡(
	`HTLi°_ªmoveObje˘
(
§c
->
de°ö©i⁄s
, (*Ë
de°
)) {

1499 
§c
->
de°Reque°s
--;

1500 
found
 = 
YES
;

1503 i‡(
found
) {

1504 i‡(
de°
->
öã∫Æ
Ë
	`HTReque°_dñëe
(dest);

1505 
	`HTTRACE
(
CORE_TRACE
, "POSTWeb..... Dñëög de° %∞‰om sr¯%p\n" 
_


1506 
de°
 
_
 
§c
);

1508 i‡(
§c
->
de°Reque°s
 <= 0) {

1509 
	`HTTRACE
(
CORE_TRACE
, "POSTWeb.....Åerminated\n");

1510 i‡(
§c
->
öã∫Æ
Ë
	`HTReque°_dñëe
(src);

1513  
found
;

1514 
	}
}

1521 
PUBLIC
 
BOOL
 
	$HTReque°_de°ö©i⁄sRódy
 (
HTReque°
 * 
me
)

1523 
HTReque°
 * 
sour˚
 = 
me
 ? me->sour˚ : 
NULL
;

1524 i‡(
sour˚
) {

1525 i‡(
sour˚
->
de°Såóms
 =sour˚->
de°Reque°s
) {

1526 
HTNë
 * 
√t
 = 
sour˚
->net;

1527 
	`HTTRACE
(
CORE_TRACE
, "POSTWeb..... All destinationsáreÑeady!\n");

1528 i‡(
√t
)

1529 
	`HTEvít_ªgi°î
(
	`HTNë_sockë
(
√t
), 
HTEvít_READ
, &√t->
evít
);

1530  
YES
;

1533  
NO
;

1534 
	}
}

1542 
PUBLIC
 
BOOL
 
	$HTReque°_lökDe°ö©i⁄
 (
HTReque°
 *
de°
)

1544 i‡(
de°
 && de°->
öput_°ªam
 && de°->
sour˚
 && dest!=dest->source) {

1545 
HTReque°
 *
sour˚
 = 
de°
->source;

1546 
HTSåóm
 *
pùe
 = 
	`HTSåómSèck
(
sour˚
->
ouçut_f‹m©
,

1547 
de°
->
öput_f‹m©
,

1548 
de°
->
öput_°ªam
,

1549 
de°
, 
YES
);

1555 i‡(
sour˚
->
ouçut_°ªam
)

1556 (*
sour˚
->
ouçut_°ªam
->
iß
->
_‰ì
)(source->output_stream);

1557 
sour˚
->
ouçut_°ªam
 = 
pùe
 ?Öùê: 
de°
->
öput_°ªam
;

1559 
	`HTTRACE
(
CORE_TRACE
, "POSTWeb..... Lökög de° %∞tÿ§¯%p\n" 
_


1560 
de°
 
_
 
sour˚
);

1561 i‡(++
sour˚
->
de°Såóms
 =sour˚->
de°Reque°s
) {

1562 
HTNë
 *
√t
 = 
sour˚
->net;

1563 
	`HTTRACE
(
CORE_TRACE
, "POSTWeb..... All destinationsÑeady!\n");

1564 i‡(
√t
)

1565 
	`HTEvít_ªgi°î
(
	`HTNë_sockë
(
√t
), 
HTEvít_READ
, &√t->
evít
);

1566  
YES
;

1569  
NO
;

1570 
	}
}

1578 
PUBLIC
 
BOOL
 
	$HTReque°_u∆ökDe°ö©i⁄
 (
HTReque°
 *
de°
)

1580 
BOOL
 
found
 = 
NO
;

1581 i‡(
de°
 && de°->
sour˚
 && dest != dest->source) {

1582 
HTReque°
 *
§c
 = 
de°
->
sour˚
;

1583 i‡(
§c
->
maöDe°ö©i⁄
 =
de°
) {

1584 
§c
->
ouçut_°ªam
 = 
NULL
;

1585 i‡(
de°
->
öput_°ªam
)

1586 (*
de°
->
öput_°ªam
->
iß
->
_‰ì
)(dest->input_stream);

1587 
found
 = 
YES
;

1588 } i‡(
§c
->
de°ö©i⁄s
) {

1593 i‡(
found
) {

1594 
§c
->
de°Såóms
--;

1595 
	`HTTRACE
(
CORE_TRACE
, "POSTWeb..... U∆ökög de° %∞‰om sr¯%p\n" 
_


1596 
de°
 
_
 
§c
);

1597  
YES
;

1600  
NO
;

1601 
	}
}

1606 
PUBLIC
 
BOOL
 
	$HTReque°_ªmovePo°Web
 (
HTReque°
 *
me
)

1608 i‡(
me
 && me->
sour˚
) {

1609 
HTReque°
 *
sour˚
 = 
me
->source;

1612 i‡(
sour˚
->
maöDe°ö©i⁄
)

1613 
	`HTReque°_ªmoveDe°ö©i⁄
(
sour˚
->
maöDe°ö©i⁄
);

1616 i‡(
sour˚
->
de°ö©i⁄s
) {

1617 
HTLi°
 *
cur
 = 
sour˚
->
de°ö©i⁄s
;

1618 
HTReque°
 *
¥es
;

1619 (
¥es
 = (
HTReque°
 *Ë
	`HTLi°_√xtObje˘
(
cur
)Ë!
NULL
)

1620 
	`HTReque°_ªmoveDe°ö©i⁄
(
¥es
);

1624 
	`HTReque°_ªmoveDe°ö©i⁄
(
sour˚
);

1625  
YES
;

1627  
NO
;

1628 
	}
}

1637 
PUBLIC
 
BOOL
 
	$HTReque°_kûlPo°Web
 (
HTReque°
 *
me
)

1639 i‡(
me
 && me->
sour˚
) {

1640 
HTReque°
 *
sour˚
 = 
me
->source;

1641 
	`HTTRACE
(
CORE_TRACE
, "POSTWeb..... Killing\n");

1647 i‡(
me
 !
sour˚
) {

1648 
	`HTNë_kûl
(
sour˚
->
√t
);

1649 
sour˚
->
ouçut_°ªam
 = 
NULL
;

1653 i‡(
sour˚
->
de°ö©i⁄s
) {

1654 
HTLi°
 *
cur
 = 
sour˚
->
de°ö©i⁄s
;

1655 
HTReque°
 *
¥es
;

1656 (
¥es
 = (
HTReque°
 *Ë
	`HTLi°_√xtObje˘
(
cur
)Ë!
NULL
)

1657 i‡(
me
 !
¥es
Ë
	`HTNë_kûl
’ªs->
√t
);

1661 i‡(
sour˚
->
maöDe°ö©i⁄
 && 
me
 != source->mainDestination)

1662 
	`HTNë_kûl
(
sour˚
->
maöDe°ö©i⁄
->
√t
);

1663  
YES
;

1665  
NO
;

1666 
	}
}

1668 
PUBLIC
 
	$HTReque°_f‹˚Flush
 (
HTReque°
 * 
ªque°
)

1670 
HTHo°
 * 
ho°
 = 
	`HTNë_ho°
(
ªque°
->
√t
);

1671 i‡(
ho°
 =
NULL
Ë 
HT_ERROR
;

1672  
	`HTHo°_f‹˚Flush
(
ho°
);

1673 
	}
}

1687 
PUBLIC
 
BOOL
 
	$HTLﬂd
 (
HTReque°
 * 
me
, 
BOOL
 
ªcursive
)

1689 i‡(!
me
 || !me->
™ch‹
) {

1690 
	`HTTRACE
(
CORE_TRACE
, "Load Start.. Badárgument\n");

1691  
NO
;

1695 i‡(!
ªcursive
Ë
	`HTAnch‹_˛órPhysiˇl
(
me
->
™ch‹
);

1698 i‡(
me
->
mëhod
 =
METHOD_INVALID
Ëme->mëhod = 
METHOD_GET
;

1701 i‡(!
ªcursive
 && 
me
->
îr‹_°ack
) {

1702 
	`HTEº‹_dñëeAŒ
(
me
->
îr‹_°ack
);

1703 
me
->
îr‹_°ack
 = 
NULL
;

1707 i‡(
me
->
ª•⁄£
) {

1708 
	`HTRe•⁄£_dñëe
(
me
->
ª•⁄£
);

1709 
me
->
ª•⁄£
 = 
NULL
;

1716 
	`HTReque°_£tD©e
(
me
, 
	`time
(
NULL
));

1719  
	`HTNë_√wClõ¡
(
me
);

1720 
	}
}

1722 
PUBLIC
 
BOOL
 
	$HTSîve
 (
HTReque°
 * 
me
, 
BOOL
 
ªcursive
)

1724 i‡(!
me
 || !me->
™ch‹
) {

1725 
	`HTTRACE
(
CORE_TRACE
, "Serve Start. Badárgument\n");

1726  
NO
;

1730 i‡(!
ªcursive
Ë
	`HTAnch‹_˛órPhysiˇl
(
me
->
™ch‹
);

1733 i‡(!
ªcursive
 && 
me
->
îr‹_°ack
) {

1734 
	`HTEº‹_dñëeAŒ
(
me
->
îr‹_°ack
);

1735 
me
->
îr‹_°ack
 = 
NULL
;

1739 i‡(
me
->
ª•⁄£
) {

1740 
	`HTRe•⁄£_dñëe
(
me
->
ª•⁄£
);

1741 
me
->
ª•⁄£
 = 
NULL
;

1745  
	`HTNë_√wSîvî
(
me
);

1746 
	}
}

1757 
PUBLIC
 
BOOL
 
	$HTReque°_£tMesßgeBody
 (
HTReque°
 * 
ªque°
, c⁄° * 
body
) {

1758 #ifde‡
HT_EXT


1760 i‡(
ªque°
 && 
body
 && *body){

1761 
	`SåAŒocC›y
 (
ªque°
->
mesßgeBody
,
body
);

1762  
YES
;

1765  
NO
;

1766 
	}
}

1772 
PUBLIC
 
BOOL
 
	$HTReque°_dñëeMesßgeBody
 (
HTReque°
 * 
ªque°
) {

1773 #ifde‡
HT_EXT


1774 i‡(
ªque°
 &&Ñeque°->
mesßgeBody
) {

1775 
	`HT_FREE
 (
ªque°
->
mesßgeBody
);

1776 
ªque°
->
mesßgeBody
 = 
NULL
;

1777  
YES
;

1780  
NO
;

1781 
	}
}

1786 
PUBLIC
 * 
	$HTReque°_mesßgeBody
 (
HTReque°
 * 
ªque°
) {

1787 * 
bodyc›y
 = 
NULL
;

1789 #ifde‡
HT_EXT


1790 i‡(
ªque°
 &&Ñeque°->
mesßgeBody
 && *(request->messageBody))

1791 
	`SåAŒocC›y
(
bodyc›y
,
ªque°
->
mesßgeBody
);

1794  
bodyc›y
;

1795 
	}
}

1804 
PUBLIC
 
BOOL
 
	$HTReque°_£tMesßgeBodyLígth
 (
HTReque°
 * 
ªque°
, 
Àngth
) {

1805 #ifde‡
HT_EXT


1806 i‡(
ªque°
 && 
Àngth
 > 0) {

1807 
ªque°
->
mesßgeBodyLígth
 = 
Àngth
;

1808  
YES
;

1812  
NO
;

1813 
	}
}

1820 
PUBLIC
 
	$HTReque°_mesßgeBodyLígth
 (
HTReque°
 * 
ªque°
) {

1821 #ifde‡
HT_EXT


1822  (
ªque°
 && (ªque°->
mesßgeBody
 &&Ñeque°->
mesßgeBodyLígth
))?

1823 
ªque°
->
mesßgeBodyLígth
:-1;

1827 
	}
}

1836 
PUBLIC
 
BOOL
 
	$HTReque°_£tMesßgeBodyF‹m©
 (
HTReque°
 * 
ªque°
, 
HTF‹m©
 
f‹m©
) {

1838 #ifde‡
HT_EXT


1839 i‡(
ªque°
 && 
f‹m©
) {

1840 
ªque°
->
mesßgeBodyF‹m©
 = 
f‹m©
;

1841  
YES
;

1844  
NO
;

1845 
	}
}

1852 
PUBLIC
 
HTF‹m©
 
	$HTReque°_mesßgeBodyF‹m©
 (
HTReque°
 * 
ªque°
) {

1853 #ifde‡
HT_EXT


1854 i‡(
ªque°
 &&Ñeque°->
mesßgeBodyF‹m©
)

1855  
ªque°
->
mesßgeBodyF‹m©
;

1858  
NULL
;

1859 
	}
}

	@Library/src/HTReqMan.h

30 #i‚de‡
HTREQMAN_H


31 
	#HTREQMAN_H


	)

33 
	~"HTReq.h
"

34 
	~"HTLi°.h
"

35 
	~"HTF‹m©.h
"

36 
	~"HTAnch‹.h
"

37 
	~"HTMëhod.h
"

38 
	~"HTAABrow.h
"

39 
	~"HTSåóm.h
"

40 
	~"HTNë.h
"

41 
	~"HTMIMPrs.h
"

51 
	s_HTReque°
 {

53 
BOOL
 
	möã∫Æ
;

55 
time_t
 
	md©e
;

57 
HTMëhod
 
	mmëhod
;

59 
BOOL
 
	mÊush
;

61 
HTPri‹ôy
 
	m¥i‹ôy
;

72 #ifde‡
HT_EXT


73 * 
	mmesßgeBody
;

74 
	mmesßgeBodyLígth
;

75 
HTF‹m©
 
	mmesßgeBodyF‹m©
;

87 
HTU£rProfûe
 * 
	mu£Ωrofûe
;

98 
HTNë
 * 
	m√t
;

109 
HTRe•⁄£
 * 
	mª•⁄£
;

117 
HTLi°
 * 
	mîr‹_°ack
;

125 
	mªåys
;

126 
	mmax_f‹w¨ds
;

127 
	mAAªåys
;

140 
BOOL
 
	m¥ìm±ive
;

152 
BOOL
 
	mC⁄ã¡NegŸüti⁄
;

160 
HTPªc⁄dôi⁄s
 
	m¥ec⁄dôi⁄s
;

170 
HTGnHd
 
	mGíMask
;

171 
HTRsHd
 
	mRe•⁄£Mask
;

172 
HTRqHd
 
	mReque°Mask
;

173 
HTEnHd
 
	mE¡ôyMask
;

183 
HTMIMEP¨£Së
 * 
	m∑r£Së
;

184 
BOOL
 
	m∑rs_loˇl
;

194 
HTLi°
 * 
	mc⁄vîsi⁄s
;

195 
BOOL
 
	mc⁄v_loˇl
;

197 
HTLi°
 * 
	mícodögs
;

198 
BOOL
 
	míc_loˇl
;

200 
HTLi°
 * 
	mãs
;

201 
BOOL
 
	mã_loˇl
;

203 
HTLi°
 * 
	mœnguages
;

204 
BOOL
 
	mœng_loˇl
;

206 
HTLi°
 * 
	mch¨£ts
;

207 
BOOL
 
	mch¨_loˇl
;

209 
HTLi°
 * 
	mbef‹es
;

210 
BOOL
 
	mbef‹es_loˇl
;

212 
HTLi°
 * 
	ma·îs
;

213 
BOOL
 
	ma·îs_loˇl
;

223 * 
	m¥oxy
;

224 
BOOL
 
	mfuŒ_uri
;

235 
HTRñﬂd
 
	mªlﬂd
;

236 
HTAssocLi°
 * 
	mˇche_c⁄åﬁ
;

246 * 
	mdeÁu…_put_«me
;

257 
HTAssocLi°
 * 
	mbyã_ønges
;

268 
HTAssocLi°
 * 
	mc⁄√˘i⁄
;

281 
HTAssocLi°
 * 
	mex≥˘
;

293 * 
	mªÆm
;

294 
HTAssocLi°
 * 
	m¸edítüls
;

311 
HTAssocLi°
 * 
	mexåa_hódîs
;

321 
HTLi°
 * 
	mgíî©‹s
;

322 
BOOL
 
	mgís_loˇl
;

333 
HTAssocLi°
 * 
	mm™d©‹y
;

334 
HTAssocLi°
 * 
	m›ti⁄Æ
;

342 
HTP¨ítAnch‹
 * 
	m™ch‹
;

344 
HTChûdAnch‹
 * 
	mchûdAnch‹
;

345 
HTP¨ítAnch‹
 * 
	m∑ª¡Anch‹
;

353 
HTSåóm
 * 
	mouçut_°ªam
;

354 
HTSåóm
 * 
	m‹ig_ouçut_°ªam
;

355 
HTF‹m©
 
	mouçut_f‹m©
;

356 
BOOL
 
	mc⁄√˘ed
;

358 
HTSåóm
 * 
	mdebug_°ªam
;

359 
HTSåóm
 * 
	m‹ig_debug_°ªam
;

360 
HTF‹m©
 
	mdebug_f‹m©
;

368 
HTSåóm
 * 
	möput_°ªam
;

369 
HTF‹m©
 
	möput_f‹m©
;

377 
HTPo°CÆlback
 * 
	mPo°CÆlback
;

385 
HTReque°CÆlback
 * 
	mˇŒback
;

386 * 
	mc⁄ãxt
;

394 
HTReque°
 * 
	msour˚
;

395 
HTP¨ítAnch‹
 * 
	msour˚_™ch‹
;

397 
HTReque°
 * 
	mmaöDe°ö©i⁄
;

398 
HTLi°
 * 
	mde°ö©i⁄s
;

399 
	mde°Reque°s
;

400 
	mde°Såóms
;

416 
BOOL
 
HTReque°_addDe°ö©i⁄
 (
HTReque°
 * 
§c
, HTReque° * 
de°
);

417 
BOOL
 
HTReque°_ªmoveDe°ö©i⁄
 (
HTReque°
 * 
de°
);

418 
BOOL
 
HTReque°_de°ö©i⁄sRódy
 (
HTReque°
 * 
me
);

420 
BOOL
 
HTReque°_lökDe°ö©i⁄
 (
HTReque°
 * 
de°
);

421 
BOOL
 
HTReque°_u∆ökDe°ö©i⁄
 (
HTReque°
 * 
de°
);

423 
BOOL
 
HTReque°_ªmovePo°Web
 (
HTReque°
 * 
me
);

424 
BOOL
 
HTReque°_kûlPo°Web
 (
HTReque°
 * 
me
);

426 
	#HTReque°_maöDe°ö©i⁄
(
me
) \

427 ((
me
Ë&& (me)->
sour˚
 ? (me)->sour˚->
maöDe°ö©i⁄
 : 
NULL
)

	)

428 
	#HTReque°_isDe°ö©i⁄
(
me
) \

429 ((
me
Ë&& (me)->
sour˚
 && (meË!(me)->sour˚)

	)

430 
	#HTReque°_isMaöDe°ö©i⁄
(
me
) \

431 ((
me
Ë&& (me)->
sour˚
 && \

432 (
me
Ë=(me)->
sour˚
->
maöDe°ö©i⁄
)

	)

433 
	#HTReque°_isSour˚
(
me
) \

434 ((
me
Ë&& (me)->
sour˚
 && (meË=(me)->sour˚)

	)

	@Library/src/HTResMan.h

29 #i‚de‡
HTRESMAN_H


30 
	#HTRESMAN_H


	)

32 
	~"HTRe•⁄£.h
"

33 
	~"HTLi°.h
"

34 
	~"HTF‹m©.h
"

35 
	~"HTAnch‹.h
"

36 
	~"HTMëhod.h
"

37 
	~"HTAABrow.h
"

38 
	~"HTSåóm.h
"

39 
	~"HTNë.h
"

40 
	~"HTMIMPrs.h
"

50 
	s_HTRe•⁄£
 {

52 
	mhash
;

63 
HTAnch‹
 * 
	mªdúe˘i⁄Anch‹
;

75 
time_t
 
	mªåy_a·î
;

86 * 
	mªÆm
;

87 * 
	mscheme
;

89 
HTAssocLi°
 * 
	mchÆÀnge
;

100 
HTAssocLi°
 * 
	mc⁄√˘i⁄
;

111 
HTAssocLi°
 * 
	m¥Ÿocﬁ
;

112 
HTAssocLi°
 * 
	m¥Ÿocﬁ_öfo
;

113 
HTAssocLi°
 * 
	m¥Ÿocﬁ_ªque°
;

126 
HTCachabÀ
 
	mˇchabÀ
;

127 
BOOL
 
	mˇched
;

128 
HTAssocLi°
 * 
	mˇche_c⁄åﬁ
;

139 
HTAssocLi°
 * 
	mbyã_ønges
;

150 
HTAssocLi°
 * 
	mv¨ü¡s
;

162 
	mc⁄ã¡_Àngth
;

173 
HTF‹m©
 
	mc⁄ã¡_ty≥
;

174 
HTAssocLi°
 * 
	mty≥_∑ømëîs
;

185 
HTLi°
 * 
	mc⁄ã¡_ícodög
;

195 
HTLi°
 * 
	må™s„r_ícodög
;

205 
HTEncodög
 
	m˘e
;

215 
HTAssocLi°
 * 
	måaûî
;

226 
HTAssocLi°
 * 
	mhódîs
;

234 * 
	mªas⁄
;

	@Library/src/HTResponse.c

13 
	~"wwwsys.h
"

14 
	~"WWWUtû.h
"

15 
	~"HTHódî.h
"

16 
	~"HTLib.h
"

17 
	~"HTWWWSå.h
"

18 
	~"HTResM™.h
"

24 
PUBLIC
 
HTRe•⁄£
 * 
	$HTRe•⁄£_√w
 ()

26 
HTRe•⁄£
 * 
me
;

27 i‡((
me
 = (
HTRe•⁄£
 *Ë
	`HT_CALLOC
(1, (HTRe•⁄£))Ë=
NULL
)

28 
	`HT_OUTOFMEM
("HTResponse_new()");

31 
me
->
c⁄ã¡_ty≥
 = 
WWW_UNKNOWN
;

32 
me
->
c⁄ã¡_Àngth
 = -1;

35 
me
->
ªåy_a·î
 = -1;

38 
me
->
ˇchabÀ
 = 
NO
;

40 
	`HTTRACE
(
CORE_TRACE
, "Re•⁄£.... Cª©ed %p\n" 
_
 
me
);

41  
me
;

42 
	}
}

44 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_dñëe
 (
HTRe•⁄£
 * 
me
)

46 i‡(
me
) {

47 
	`HTTRACE
(
CORE_TRACE
, "Re•⁄£.... Dñëê%p\n" 
_
 
me
);

50 
	`HT_FREE
(
me
->
ªÆm
);

51 
	`HT_FREE
(
me
->
scheme
);

52 i‡(
me
->
chÆÀnge
Ë
	`HTAssocLi°_dñëe
(me->challenge);

55 i‡(
me
->
c⁄√˘i⁄
Ë
	`HTAssocLi°_dñëe
(me->connection);

58 i‡(
me
->
¥Ÿocﬁ
Ë
	`HTAssocLi°_dñëe
(me->protocol);

59 i‡(
me
->
¥Ÿocﬁ_ªque°
Ë
	`HTAssocLi°_dñëe
(me->protocol_request);

60 i‡(
me
->
¥Ÿocﬁ_öfo
Ë
	`HTAssocLi°_dñëe
(me->protocol_info);

63 i‡(
me
->
ˇche_c⁄åﬁ
Ë
	`HTAssocLi°_dñëe
(me->cache_control);

66 i‡(
me
->
byã_ønges
Ë
	`HTAssocLi°_dñëe
(me->byte_ranges);

69 i‡(
me
->
å™s„r_ícodög
Ë
	`HTLi°_dñëe
(me->transfer_encoding);

72 i‡(
me
->
åaûî
Ë
	`HTAssocLi°_dñëe
(me->trailer);

75 i‡(
me
->
v¨ü¡s
Ë
	`HTAssocLi°_dñëe
(me->variants);

82 i‡(!
me
->
ˇched
) {

85 i‡(
me
->
ty≥_∑ømëîs
Ë
	`HTAssocLi°_dñëe
(me->type_parameters);

88 i‡(
me
->
c⁄ã¡_ícodög
Ë
	`HTLi°_dñëe
(me->content_encoding);

91 i‡(
me
->
hódîs
Ë
	`HTAssocLi°_dñëe
(me->headers);

95 i‡(
me
->
ªas⁄
Ë
	`HT_FREE
 (me->reason);

97 
	`HT_FREE
(
me
);

98  
YES
;

100  
NO
;

101 
	}
}

110 
PUBLIC
 
HTAnch‹
 * 
	$HTRe•⁄£_ªdúe˘i⁄
 (
HTRe•⁄£
 * 
me
)

112  (
me
 ? me->
ªdúe˘i⁄Anch‹
 : 
NULL
);

113 
	}
}

115 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_£tRedúe˘i⁄
 (
HTRe•⁄£
 * 
me
, 
HTAnch‹
 * 
™ch‹
)

117 i‡(
me
 && 
™ch‹
) {

118 
me
->
ªdúe˘i⁄Anch‹
 = (
HTAnch‹
 *Ë
	`HTAnch‹_∑ª¡
(
™ch‹
);

119  
YES
;

121  
NO
;

122 
	}
}

128 
PUBLIC
 
time_t
 
	$HTRe•⁄£_ªåyTime
 (
HTRe•⁄£
 * 
me
)

130  
me
 ? me->
ªåy_a·î
 : -1;

131 
	}
}

133 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_£tRëryTime
 (
HTRe•⁄£
 * 
me
, 
time_t
 
ªåy
)

135 i‡(
me
) {

136 
me
->
ªåy_a·î
 = 
ªåy
;

137  
YES
;

139  
NO
;

140 
	}
}

145 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_addChÆÀnge
 (
HTRe•⁄£
 * 
me
,

146 * 
tokí
, * 
vÆue
)

148 i‡(
me
) {

149 i‡(!
me
->
chÆÀnge
Ëme->chÆÀngê
	`HTAssocLi°_√w
();

150  
	`HTAssocLi°_addObje˘
(
me
->
chÆÀnge
, 
tokí
, 
vÆue
);

152  
NO
;

153 
	}
}

155 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_dñëeChÆÀngeAŒ
 (
HTRe•⁄£
 * 
me
)

157 i‡(
me
 && me->
chÆÀnge
) {

158 
	`HTAssocLi°_dñëe
(
me
->
chÆÀnge
);

159 
me
->
chÆÀnge
 = 
NULL
;

160  
YES
;

162  
NO
;

163 
	}
}

165 
PUBLIC
 
HTAssocLi°
 * 
	$HTRe•⁄£_chÆÀnge
 (
HTRe•⁄£
 * 
me
)

167  (
me
 ? me->
chÆÀnge
 : 
NULL
);

168 
	}
}

173 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_£tRólm
 (
HTRe•⁄£
 * 
me
, * 
ªÆm
)

175 i‡(
me
 && 
ªÆm
) {

176 
	`SåAŒocC›y
(
me
->
ªÆm
,Ñealm);

177  
YES
;

179  
NO
;

180 
	}
}

182 
PUBLIC
 c⁄° * 
	$HTRe•⁄£_ªÆm
 (
HTRe•⁄£
 * 
me
)

184  (
me
 ? me->
ªÆm
 : 
NULL
);

185 
	}
}

190 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_£tScheme
 (
HTRe•⁄£
 * 
me
, * 
scheme
)

192 i‡(
me
 && 
scheme
) {

193 
	`SåAŒocC›y
(
me
->
scheme
, scheme);

194  
YES
;

196  
NO
;

197 
	}
}

199 
PUBLIC
 c⁄° * 
	$HTRe•⁄£_scheme
 (
HTRe•⁄£
 * 
me
)

201  (
me
 ? me->
scheme
 : 
NULL
);

202 
	}
}

207 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_addC⁄√˘i⁄
 (
HTRe•⁄£
 * 
me
,

208 * 
tokí
, * 
vÆue
)

210 i‡(
me
) {

211 i‡(!
me
->
c⁄√˘i⁄
Ëme->c⁄√˘i⁄ = 
	`HTAssocLi°_√w
();

212  
	`HTAssocLi°_ª∂a˚Obje˘
(
me
->
c⁄√˘i⁄
, 
tokí
, 
vÆue
);

214  
NO
;

215 
	}
}

217 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_dñëeC⁄√˘i⁄AŒ
 (
HTRe•⁄£
 * 
me
)

219 i‡(
me
 && me->
c⁄√˘i⁄
) {

220 
	`HTAssocLi°_dñëe
(
me
->
c⁄√˘i⁄
);

221 
me
->
c⁄√˘i⁄
 = 
NULL
;

222  
YES
;

224  
NO
;

225 
	}
}

227 
PUBLIC
 
HTAssocLi°
 * 
	$HTRe•⁄£_c⁄√˘i⁄
 (
HTRe•⁄£
 * 
me
)

229  (
me
 ? me->
c⁄√˘i⁄
 : 
NULL
);

230 
	}
}

235 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_addPrŸocﬁ
 (
HTRe•⁄£
 * 
me
,

236 * 
tokí
, * 
vÆue
)

238 i‡(
me
) {

239 i‡(!
me
->
¥Ÿocﬁ
Ëme->¥Ÿocﬁ = 
	`HTAssocLi°_√w
();

240  
	`HTAssocLi°_addObje˘
(
me
->
¥Ÿocﬁ
, 
tokí
,
vÆue
);

242  
NO
;

243 
	}
}

245 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_dñëePrŸocﬁAŒ
 (
HTRe•⁄£
 * 
me
)

247 i‡(
me
 && me->
¥Ÿocﬁ
) {

248 
	`HTAssocLi°_dñëe
(
me
->
¥Ÿocﬁ
);

249 
me
->
¥Ÿocﬁ
 = 
NULL
;

250  
YES
;

252  
NO
;

253 
	}
}

255 
PUBLIC
 
HTAssocLi°
 * 
	$HTRe•⁄£_¥Ÿocﬁ
 (
HTRe•⁄£
 * 
me
)

257  (
me
 ? me->
¥Ÿocﬁ
 : 
NULL
);

258 
	}
}

263 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_addPrŸocﬁInfo
 (
HTRe•⁄£
 * 
me
,

264 * 
tokí
, * 
vÆue
)

266 i‡(
me
) {

267 i‡(!
me
->
¥Ÿocﬁ_öfo
Ëme->¥Ÿocﬁ_öfÿ
	`HTAssocLi°_√w
();

268  
	`HTAssocLi°_addObje˘
(
me
->
¥Ÿocﬁ_öfo
, 
tokí
,
vÆue
);

270  
NO
;

271 
	}
}

273 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_dñëePrŸocﬁInfoAŒ
 (
HTRe•⁄£
 * 
me
)

275 i‡(
me
 && me->
¥Ÿocﬁ_öfo
) {

276 
	`HTAssocLi°_dñëe
(
me
->
¥Ÿocﬁ_öfo
);

277 
me
->
¥Ÿocﬁ_öfo
 = 
NULL
;

278  
YES
;

280  
NO
;

281 
	}
}

283 
PUBLIC
 
HTAssocLi°
 * 
	$HTRe•⁄£_¥ŸocﬁInfo
 (
HTRe•⁄£
 * 
me
)

285  (
me
 ? me->
¥Ÿocﬁ_öfo
 : 
NULL
);

286 
	}
}

291 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_addPrŸocﬁReque°
 (
HTRe•⁄£
 * 
me
,

292 * 
tokí
, * 
vÆue
)

294 i‡(
me
) {

295 i‡(!
me
->
¥Ÿocﬁ_ªque°
Ëme->¥Ÿocﬁ_ªque° = 
	`HTAssocLi°_√w
();

296  
	`HTAssocLi°_addObje˘
(
me
->
¥Ÿocﬁ_ªque°
, 
tokí
,
vÆue
);

298  
NO
;

299 
	}
}

301 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_dñëePrŸocﬁReque°AŒ
 (
HTRe•⁄£
 * 
me
)

303 i‡(
me
 && me->
¥Ÿocﬁ_ªque°
) {

304 
	`HTAssocLi°_dñëe
(
me
->
¥Ÿocﬁ_ªque°
);

305 
me
->
¥Ÿocﬁ_ªque°
 = 
NULL
;

306  
YES
;

308  
NO
;

309 
	}
}

311 
PUBLIC
 
HTAssocLi°
 * 
	$HTRe•⁄£_¥ŸocﬁReque°
 (
HTRe•⁄£
 * 
me
)

313  (
me
 ? me->
¥Ÿocﬁ_ªque°
 : 
NULL
);

314 
	}
}

319 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_dñëeCacheC⁄åﬁAŒ
 (
HTRe•⁄£
 * 
me
)

321 i‡(
me
 && me->
ˇche_c⁄åﬁ
) {

322 
	`HTAssocLi°_dñëe
(
me
->
ˇche_c⁄åﬁ
);

323 
me
->
ˇche_c⁄åﬁ
 = 
NULL
;

324  
YES
;

326  
NO
;

327 
	}
}

329 
PUBLIC
 
HTAssocLi°
 * 
	$HTRe•⁄£_ˇcheC⁄åﬁ
 (
HTRe•⁄£
 * 
me
)

331  (
me
 ? me->
ˇche_c⁄åﬁ
 : 
NULL
);

332 
	}
}

334 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_addCacheC⁄åﬁ
 (
HTRe•⁄£
 * 
me
,

335 * 
tokí
, * 
vÆue
)

337 i‡(
me
) {

338 i‡(!
me
->
ˇche_c⁄åﬁ
)

339 
me
->
ˇche_c⁄åﬁ
=
	`HTAssocLi°_√w
();

340  
	`HTAssocLi°_ª∂a˚Obje˘
(
me
->
ˇche_c⁄åﬁ
,

341 
tokí
, 
vÆue
);

343  
NO
;

344 
	}
}

349 
PUBLIC
 
HTCachabÀ
 
	$HTRe•⁄£_isCachabÀ
 (
HTRe•⁄£
 * 
me
)

351 i‡(
me
) {

354 i‡(
me
->
ˇchabÀ
 =
HT_NO_CACHE
)  HT_NO_CACHE;

358 i‡(
me
->
v¨ü¡s
Ë 
HT_NO_CACHE
;

367 i‡(
me
->
ˇche_c⁄åﬁ
) {

368 * 
tokí
;

369 i‡((
tokí
=
	`HTAssocLi°_födObje˘
(
me
->
ˇche_c⁄åﬁ
, "no-store")))

370  
HT_NO_CACHE
;

371 i‡((
tokí
=
	`HTAssocLi°_födObje˘
(
me
->
ˇche_c⁄åﬁ
, "no-cache")))

372 i‡(!*
tokí
Ë 
HT_NO_CACHE
;

376  
me
->
ˇchabÀ
;

378  
HT_NO_CACHE
;

379 
	}
}

381 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_£tCachabÀ
 (
HTRe•⁄£
 * 
me
, 
HTCachabÀ
 
mode
)

383 i‡(
me
) {

384 
me
->
ˇchabÀ
 = 
mode
;

385  
YES
;

387  
NO
;

388 
	}
}

390 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_isCached
 (
HTRe•⁄£
 * 
me
, 
BOOL
 
mode
)

392 i‡(
me
) {

393 
me
->
ˇched
 = 
mode
;

394  
YES
;

396  
NO
;

397 
	}
}

399 
PUBLIC
 
time_t
 
	$HTRe•⁄£_maxAge
 (
HTRe•⁄£
 * 
me
)

401 i‡(
me
 && me->
ˇche_c⁄åﬁ
) {

402 * 
tokí
 = 
	`HTAssocLi°_födObje˘
(
me
->
ˇche_c⁄åﬁ
, "max-age");

403 i‡(
tokí
Ë 
	`©ﬁ
(token);

405  (
time_t
) -1;

406 
	}
}

408 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_mu°RevÆid©e
 (
HTRe•⁄£
 * 
me
)

410  
me
 && me->
ˇche_c⁄åﬁ
 &&

411 (
	`HTAssocLi°_födObje˘
(
me
->
ˇche_c⁄åﬁ
,

412 "mu°-ªvÆid©e"Ë!
NULL
);

413 
	}
}

415 
PUBLIC
 * 
	$HTRe•⁄£_noCache
 (
HTRe•⁄£
 * 
me
)

417  (
me
 && me->
ˇche_c⁄åﬁ
) ?

418 
	`HTAssocLi°_födObje˘
(
me
->
ˇche_c⁄åﬁ
,

419 "no-ˇche"Ë: 
NULL
;

420 
	}
}

422 
PUBLIC
 * 
	$HTRe•⁄£_ëag
 (
HTRe•⁄£
 * 
me
)

424 i‡(
me
 && me->
hódîs
) {

425 * 
vÆue
 = 
	`HTAssocLi°_födObje˘
(
me
->
hódîs
, "etag");

426 * 
ëag
 = 
	`HTNextFõld
(&
vÆue
);

427  
ëag
;

429  
NULL
;

430 
	}
}

435 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_dñëeR™geAŒ
 (
HTRe•⁄£
 * 
me
)

437 i‡(
me
 && me->
byã_ønges
) {

438 
	`HTAssocLi°_dñëe
(
me
->
byã_ønges
);

439 
me
->
byã_ønges
 = 
NULL
;

440  
YES
;

442  
NO
;

443 
	}
}

445 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_addR™ge
 (
HTRe•⁄£
 * 
me
, * 
unô
, * 
ønge
)

447 i‡(
me
) {

448 i‡(!
me
->
byã_ønges
Ëme->byã_ønge†
	`HTAssocLi°_√w
();

449  
	`HTAssocLi°_addObje˘
(
me
->
byã_ønges
, 
unô
, 
ønge
);

451  
NO
;

452 
	}
}

454 
PUBLIC
 
HTAssocLi°
 * 
	$HTRe•⁄£_ønge
 (
HTRe•⁄£
 * 
me
)

456  (
me
 ? me->
byã_ønges
 : 
NULL
);

457 
	}
}

462 
PUBLIC
 
	$HTRe•⁄£_Àngth
 (
HTRe•⁄£
 * 
me
)

464  
me
 ? me->
c⁄ã¡_Àngth
 : -1;

465 
	}
}

467 
PUBLIC
 
	$HTRe•⁄£_£tLígth
 (
HTRe•⁄£
 * 
me
, 
Àngth
)

469 i‡(
me
Ëme->
c⁄ã¡_Àngth
 = 
Àngth
;

470 
	}
}

472 
PUBLIC
 
	$HTRe•⁄£_addLígth
 (
HTRe•⁄£
 * 
me
, 
dñè_Àngth
)

474 i‡(
me
) {

475 i‡(
me
->
c⁄ã¡_Àngth
 < 0)

476 
me
->
c⁄ã¡_Àngth
 = 
dñè_Àngth
;

478 
me
->
c⁄ã¡_Àngth
 +
dñè_Àngth
;

480 
	}
}

485 
PUBLIC
 
HTF‹m©
 
	$HTRe•⁄£_f‹m©
 (
HTRe•⁄£
 * 
me
)

487  
me
 ? me->
c⁄ã¡_ty≥
 : 
NULL
;

488 
	}
}

490 
PUBLIC
 
	$HTRe•⁄£_£tF‹m©
 (
HTRe•⁄£
 * 
me
, 
HTF‹m©
 
f‹m
)

492 i‡(
me
Ëme->
c⁄ã¡_ty≥
 = 
f‹m
;

493 
	}
}

495 
PUBLIC
 
HTAssocLi°
 * 
	$HTRe•⁄£_f‹m©P¨am
 (
HTRe•⁄£
 * 
me
)

497  
me
 ? me->
ty≥_∑ømëîs
 : 
NULL
;

498 
	}
}

500 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_addF‹m©P¨am
 (
HTRe•⁄£
 * 
me
,

501 c⁄° * 
«me
, c⁄° * 
vÆue
)

503 i‡(
me
) {

504 i‡(!
me
->
ty≥_∑ømëîs
Ëme->ty≥_∑ømëî†
	`HTAssocLi°_√w
();

505  
	`HTAssocLi°_ª∂a˚Obje˘
(
me
->
ty≥_∑ømëîs
, 
«me
, 
vÆue
);

507  
NO
;

508 
	}
}

513 
PUBLIC
 
HTCh¨£t
 
	$HTRe•⁄£_ch¨£t
 (
HTRe•⁄£
 * 
me
)

515 i‡(
me
 && me->
ty≥_∑ømëîs
) {

516 * 
ch¨£t
 = 
	`HTAssocLi°_födObje˘
(
me
->
ty≥_∑ømëîs
,"charset");

517  
	`HTAtom_f‹
(
ch¨£t
);

519  
NULL
;

520 
	}
}

522 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_£tCh¨£t
 (
HTRe•⁄£
 * 
me
, 
HTCh¨£t
 
ch¨£t
)

524  
	`HTRe•⁄£_addF‹m©P¨am
(
me
, "ch¨£t", 
	`HTAtom_«me
(
ch¨£t
));

525 
	}
}

530 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_addEncodög
 (
HTRe•⁄£
 * 
me
, 
HTEncodög
 
ícodög
)

532 i‡(
me
 && 
ícodög
) {

533 i‡(!
me
->
c⁄ã¡_ícodög
Ëme->c⁄ã¡_ícodög = 
	`HTLi°_√w
();

534  
	`HTLi°_addObje˘
(
me
->
c⁄ã¡_ícodög
, 
ícodög
);

536  
NO
;

537 
	}
}

539 
PUBLIC
 
HTLi°
 * 
	$HTRe•⁄£_ícodög
 (
HTRe•⁄£
 * 
me
)

541  
me
 ? me->
c⁄ã¡_ícodög
 : 
NULL
;

542 
	}
}

547 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_addTøns„r
 (
HTRe•⁄£
 * 
me
, 
HTEncodög
 
å™s„r
)

549 i‡(
me
 && 
å™s„r
) {

550 i‡(!
me
->
å™s„r_ícodög
Ëme->å™s„r_ícodög = 
	`HTLi°_√w
();

551  
	`HTLi°_addObje˘
(
me
->
å™s„r_ícodög
, 
å™s„r
);

553  
NO
;

554 
	}
}

556 
PUBLIC
 
HTLi°
 * 
	$HTRe•⁄£_å™s„r
 (
HTRe•⁄£
 * 
me
)

558  
me
 ? me->
å™s„r_ícodög
 : 
NULL
;

559 
	}
}

564 
PUBLIC
 
HTEncodög
 
	$HTRe•⁄£_c⁄ã¡Tøns„rEncodög
 (
HTRe•⁄£
 * 
me
)

566  
me
 ? me->
˘e
 : 
NULL
;

567 
	}
}

569 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_£tC⁄ã¡Tøns„rEncodög
 (
HTRe•⁄£
 * 
me
, 
HTEncodög
 
å™s„r
)

571 i‡(
me
) {

572 
me
->
˘e
 = 
å™s„r
;

573  
YES
;

575  
NO
;

576 
	}
}

578 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_addV¨ü¡
 (
HTRe•⁄£
 * 
me
, * 
tokí
, * 
vÆue
)

580 i‡(
me
) {

581 i‡(!
me
->
v¨ü¡s
Ëme->v¨ü¡†=
	`HTAssocLi°_√w
();

582  
	`HTAssocLi°_ª∂a˚Obje˘
 (
me
->
v¨ü¡s
, 
tokí
, 
vÆue
);

584  
NO
;

585 
	}
}

587 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_dñëeV¨ü¡AŒ
 (
HTRe•⁄£
 * 
me
)

589 i‡(
me
 && me->
v¨ü¡s
) {

590 
	`HTAssocLi°_dñëe
(
me
->
v¨ü¡s
);

591 
me
->
v¨ü¡s
 = 
NULL
;

592  
YES
;

594  
NO
;

595 
	}
}

597 
PUBLIC
 
HTAssocLi°
 * 
	$HTRe•⁄£_v¨ü¡
 (
HTRe•⁄£
 * 
me
)

599  (
me
 ? me->
v¨ü¡s
 : 
NULL
);

600 
	}
}

605 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_addTøûî
 (
HTRe•⁄£
 * 
me
,

606 * 
tokí
, * 
vÆue
)

608 i‡(
me
) {

609 i‡(!
me
->
åaûî
Ëme->åaûî = 
	`HTAssocLi°_√w
();

610  
	`HTAssocLi°_addObje˘
(
me
->
åaûî
, 
tokí
, 
vÆue
);

612  
NO
;

613 
	}
}

615 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_dñëeTøûîAŒ
 (
HTRe•⁄£
 * 
me
)

617 i‡(
me
 && me->
åaûî
) {

618 
	`HTAssocLi°_dñëe
(
me
->
åaûî
);

619 
me
->
åaûî
 = 
NULL
;

620  
YES
;

622  
NO
;

623 
	}
}

625 
PUBLIC
 
HTAssocLi°
 * 
	$HTRe•⁄£_åaûî
 (
HTRe•⁄£
 * 
me
)

627  (
me
 ? me->
åaûî
 : 
NULL
);

628 
	}
}

634 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_addHódî
 (
HTRe•⁄£
 * 
me
,

635 * 
tokí
, * 
vÆue
)

637 i‡(
me
) {

638 i‡(!
me
->
hódîs
Ëme->hódî†
	`HTAssocLi°_√w
();

639  
	`HTAssocLi°_addObje˘
(
me
->
hódîs
, 
tokí
, 
vÆue
);

641  
NO
;

642 
	}
}

644 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_dñëeHódîAŒ
 (
HTRe•⁄£
 * 
me
)

646 i‡(
me
 && me->
hódîs
) {

647 
	`HTAssocLi°_dñëe
(
me
->
hódîs
);

648 
me
->
hódîs
 = 
NULL
;

649  
YES
;

651  
NO
;

652 
	}
}

654 
PUBLIC
 
HTAssocLi°
 * 
	$HTRe•⁄£_hódî
 (
HTRe•⁄£
 * 
me
)

656  (
me
 ? me->
hódîs
 : 
NULL
);

657 
	}
}

659 
PUBLIC
 
HTAssocLi°
 * 
	$HTRe•⁄£_h™dOvîHódî
 (
HTRe•⁄£
 * 
me
)

661 
HTAssocLi°
 * 
hódîs
 = 
NULL
;

662 i‡(
me
) {

663 
hódîs
 = 
me
->headers;

664 
me
->
hódîs
 = 
NULL
;

665 
me
->
ty≥_∑ømëîs
 = 
NULL
;

667  
hódîs
;

668 
	}
}

673 
PUBLIC
 * 
	$HTRe•⁄£_ªas⁄
 (
HTRe•⁄£
 * 
me
)

675 i‡(
me
) {

676  
me
->
ªas⁄
;

678  
NULL
;

679 
	}
}

681 
PUBLIC
 
BOOL
 
	$HTRe•⁄£_£tRós⁄
 (
HTRe•⁄£
 * 
me
, * 
ªas⁄
)

683 i‡(
me
 && 
ªas⁄
 && *reason) {

684 
	`SåAŒocC›y
(
me
->
ªas⁄
,Ñeason);

685  
YES
;

687  
NO
;

688 
	}
}

	@Library/src/HTResponse.h

42 #i‚de‡
HTRESPONSE_H


43 
	#HTRESPONSE_H


	)

45 
_HTRe•⁄£
 
	tHTRe•⁄£
;

47 
	~"HTEvít.h
"

48 
	~"HTLi°.h
"

49 
	~"HTAssoc.h
"

50 
	~"HTF‹m©.h
"

51 
	~"HTU£r.h
"

67 
HTRe•⁄£
 * 
HTRe•⁄£_√w
 ();

77 
BOOL
 
HTRe•⁄£_dñëe
 (
HTRe•⁄£
 * 
ª•⁄£
);

92 
HTAnch‹
 * 
HTRe•⁄£_ªdúe˘i⁄
 (
HTRe•⁄£
 * 
ª•⁄£
);

93 
BOOL
 
HTRe•⁄£_£tRedúe˘i⁄
 (
HTRe•⁄£
 * 
ª•⁄£
, 
HTAnch‹
 * 
™ch‹
);

109 
time_t
 
HTRe•⁄£_ªåyTime
 (
HTRe•⁄£
 * 
ª•⁄£
);

110 
BOOL
 
HTRe•⁄£_£tRëryTime
 (
HTRe•⁄£
 * 
ª•⁄£
, 
time_t
 
ªåy
);

125 
BOOL
 
HTRe•⁄£_addChÆÀnge
 (
HTRe•⁄£
 * 
ª•⁄£
, * 
tokí
, * 
vÆue
);

127 
BOOL
 
HTRe•⁄£_dñëeChÆÀngeAŒ
 (
HTRe•⁄£
 * 
ª•⁄£
);

129 
HTAssocLi°
 * 
HTRe•⁄£_chÆÀnge
 (
HTRe•⁄£
 * 
ª•⁄£
);

137 
BOOL
 
HTRe•⁄£_£tRólm
 (
HTRe•⁄£
 * 
ª•⁄£
, * 
ªÆm
);

138 c⁄° * 
HTRe•⁄£_ªÆm
 (
HTRe•⁄£
 * 
ª•⁄£
);

146 
BOOL
 
HTRe•⁄£_£tScheme
 (
HTRe•⁄£
 * 
ª•⁄£
, * 
scheme
);

147 c⁄° * 
HTRe•⁄£_scheme
 (
HTRe•⁄£
 * 
ª•⁄£
);

159 
BOOL
 
HTRe•⁄£_addC⁄√˘i⁄
 (
HTRe•⁄£
 * 
ª•⁄£
,

160 * 
tokí
, * 
vÆue
);

161 
BOOL
 
HTRe•⁄£_dñëeC⁄√˘i⁄AŒ
 (
HTRe•⁄£
 * 
ª•⁄£
);

162 
HTAssocLi°
 * 
HTRe•⁄£_c⁄√˘i⁄
 (
HTRe•⁄£
 * 
ª•⁄£
);

182 
BOOL
 
HTRe•⁄£_addPrŸocﬁ
 (
HTRe•⁄£
 * 
ª•⁄£
,

183 * 
tokí
, * 
vÆue
);

184 
BOOL
 
HTRe•⁄£_dñëePrŸocﬁAŒ
 (
HTRe•⁄£
 * 
ª•⁄£
);

185 
HTAssocLi°
 * 
HTRe•⁄£_¥Ÿocﬁ
 (
HTRe•⁄£
 * 
ª•⁄£
);

196 
BOOL
 
HTRe•⁄£_addPrŸocﬁInfo
 (
HTRe•⁄£
 * 
ª•⁄£
,

197 * 
tokí
, * 
vÆue
);

198 
BOOL
 
HTRe•⁄£_dñëePrŸocﬁInfoAŒ
 (
HTRe•⁄£
 * 
ª•⁄£
);

199 
HTAssocLi°
 * 
HTRe•⁄£_¥ŸocﬁInfo
 (
HTRe•⁄£
 * 
ª•⁄£
);

210 
BOOL
 
HTRe•⁄£_addPrŸocﬁReque°
 (
HTRe•⁄£
 * 
ª•⁄£
,

211 * 
tokí
, * 
vÆue
);

212 
BOOL
 
HTRe•⁄£_dñëePrŸocﬁReque°AŒ
 (
HTRe•⁄£
 * 
ª•⁄£
);

213 
HTAssocLi°
 * 
HTRe•⁄£_¥ŸocﬁReque°
 (
HTRe•⁄£
 * 
ª•⁄£
);

225 
BOOL
 
HTRe•⁄£_addCacheC⁄åﬁ
 (
HTRe•⁄£
 * 
ª•⁄£
,

226 * 
tokí
, *
vÆue
);

227 
BOOL
 
HTRe•⁄£_dñëeCacheC⁄åﬁAŒ
 (
HTRe•⁄£
 * 
ª•⁄£
);

228 
HTAssocLi°
 * 
HTRe•⁄£_ˇcheC⁄åﬁ
 (
HTRe•⁄£
 * 
ª•⁄£
);

239 
	e_HTCachabÀ
 {

240 
	mHT_NO_CACHE
 = 0,

241 
	mHT_CACHE_ALL
 = 1,

242 
	mHT_CACHE_ETAG
 = 2,

243 
	mHT_CACHE_NOT_MODIFIED
 = 3

244 } 
	tHTCachabÀ
;

246 
HTCachabÀ
 
HTRe•⁄£_isCachabÀ
 (
HTRe•⁄£
 * 
me
);

247 
BOOL
 
HTRe•⁄£_£tCachabÀ
 (
HTRe•⁄£
 * 
me
, 
HTCachabÀ
 
mode
);

256 * 
HTRe•⁄£_ëag
 (
HTRe•⁄£
 * 
me
);

270 
BOOL
 
HTRe•⁄£_isCached
 (
HTRe•⁄£
 * 
me
, BOOL 
mode
);

280 
time_t
 
HTRe•⁄£_maxAge
 (
HTRe•⁄£
 * 
ª•⁄£
);

281 
BOOL
 
HTRe•⁄£_mu°RevÆid©e
 (
HTRe•⁄£
 * 
ª•⁄£
);

282 * 
HTRe•⁄£_noCache
 (
HTRe•⁄£
 * 
ª•⁄£
);

299 
BOOL
 
HTRe•⁄£_addR™ge
 (
HTRe•⁄£
 * 
ª•⁄£
,

300 * 
unô
, * 
ønge
);

301 
BOOL
 
HTRe•⁄£_dñëeR™geAŒ
 (
HTRe•⁄£
 * 
ª•⁄£
);

302 
HTAssocLi°
 * 
HTRe•⁄£_ønge
 (
HTRe•⁄£
 * 
ª•⁄£
);

313 
HTRe•⁄£_Àngth
 (
HTRe•⁄£
 * 
ª•⁄£
);

314 
HTRe•⁄£_£tLígth
 (
HTRe•⁄£
 * 
ª•⁄£
, 
Àngth
);

315 
HTRe•⁄£_addLígth
 (
HTRe•⁄£
 * 
ª•⁄£
, 
dñèÀngth
);

326 
HTF‹m©
 
HTRe•⁄£_f‹m©
 (
HTRe•⁄£
 * 
ª•⁄£
);

327 
HTRe•⁄£_£tF‹m©
 (
HTRe•⁄£
 * 
ª•⁄£
, 
HTF‹m©
 
f‹m©
);

337 
HTAssocLi°
 * 
HTRe•⁄£_f‹m©P¨am
 (
HTRe•⁄£
 * 
ª•⁄£
);

338 
BOOL
 
HTRe•⁄£_addF‹m©P¨am
 (
HTRe•⁄£
 * 
ª•⁄£
,

339 c⁄° * 
«me
, c⁄° * 
vÆue
);

347 
HTCh¨£t
 
HTRe•⁄£_ch¨£t
 (
HTRe•⁄£
 * 
ª•⁄£
);

348 
BOOL
 
HTRe•⁄£_£tCh¨£t
 (
HTRe•⁄£
 * 
ª•⁄£
, 
HTCh¨£t
 
ch¨£t
);

356 
HTLevñ
 
HTRe•⁄£_Àvñ
 (
HTRe•⁄£
 * 
ª•⁄£
);

357 
BOOL
 
HTRe•⁄£_£tLevñ
 (
HTRe•⁄£
 * 
ª•⁄£
, 
HTLevñ
 
Àvñ
);

367 
HTLi°
 * 
HTRe•⁄£_ícodög
 (
HTRe•⁄£
 * 
ª•⁄£
);

368 
BOOL
 
HTRe•⁄£_addEncodög
 (
HTRe•⁄£
 * 
ª•⁄£
, 
HTEncodög
 
íc
);

378 
HTLi°
 * 
HTRe•⁄£_å™s„r
 (
HTRe•⁄£
 * 
ª•⁄£
);

379 
BOOL
 
HTRe•⁄£_addTøns„r
 (
HTRe•⁄£
 * 
ª•⁄£
, 
HTEncodög
 
ã
);

389 
HTEncodög
 
HTRe•⁄£_c⁄ã¡Tøns„rEncodög
 (
HTRe•⁄£
 * 
ª•⁄£
);

390 
BOOL
 
HTRe•⁄£_£tC⁄ã¡Tøns„rEncodög
 (
HTRe•⁄£
 * 
ª•⁄£
,

391 
HTEncodög
 
˘e
);

401 
BOOL
 
HTRe•⁄£_addV¨ü¡
 (
HTRe•⁄£
 * 
me
, * 
tokí
, * 
vÆue
);

402 
BOOL
 
HTRe•⁄£_dñëeV¨ü¡AŒ
 (
HTRe•⁄£
 * 
me
);

403 
HTAssocLi°
 * 
HTRe•⁄£_v¨ü¡
 (
HTRe•⁄£
 * 
me
);

413 
BOOL
 
HTRe•⁄£_addTøûî
 (
HTRe•⁄£
 * 
me
, * 
tokí
, * 
vÆue
);

414 
BOOL
 
HTRe•⁄£_dñëeTøûîAŒ
 (
HTRe•⁄£
 * 
me
);

415 
HTAssocLi°
 * 
HTRe•⁄£_åaûî
 (
HTRe•⁄£
 * 
me
);

428 
BOOL
 
HTRe•⁄£_addHódî
 (
HTRe•⁄£
 * 
ª•⁄£
,

429 * 
tokí
, * 
vÆue
);

430 
BOOL
 
HTRe•⁄£_dñëeHódîAŒ
 (
HTRe•⁄£
 * 
ª•⁄£
);

431 
HTAssocLi°
 * 
HTRe•⁄£_hódî
 (
HTRe•⁄£
 * 
ª•⁄£
);

433 
HTAssocLi°
 * 
HTRe•⁄£_h™dOvîHódî
 (
HTRe•⁄£
 * 
me
);

444 * 
HTRe•⁄£_ªas⁄
 (
HTRe•⁄£
 * 
me
);

445 
BOOL
 
HTRe•⁄£_£tRós⁄
 (
HTRe•⁄£
 * 
me
, * 
ªas⁄
);

	@Library/src/HTRules.c

32 
	~"WWWLib.h
"

33 
	~"WWWFûe.h
"

34 
	~"HTProxy.h
"

35 
	~"HTRuÀs.h
"

37 
	s_HTSåóm
 {

38 c⁄° 
HTSåómCœss
 * 
	miß
;

39 
HTReque°
 * 
	mªque°
;

40 
HTChunk
 * 
	mbuf„r
;

41 
HTEOLSèã
 
	mEOL°©e
;

44 
	s_HTRuÀ
 {

45 
HTRuÀOp
 
	m›
;

46 * 
	m∑âîn
;

47 * 
	mª∂a˚
;

48 
	mö£π
;

51 
PRIVATE
 
HTLi°
 * 
	gruÀs
 = 
NULL
;

60 
PUBLIC
 
HTLi°
 * 
	$HTRuÀ_globÆ
 ()

62 i‡(!
ruÀs
ËruÀ†
	`HTLi°_√w
();

63  
ruÀs
;

64 
	}
}

66 
PUBLIC
 
BOOL
 
	$HTRuÀ_£tGlobÆ
(
HTLi°
 * 
li°
)

68 i‡(
ruÀs
Ë
	`HTRuÀ_dñëeAŒ
(rules);

69 
ruÀs
 = 
li°
;

70  
YES
;

71 
	}
}

73 
PUBLIC
 
BOOL
 
	$HTRuÀ_addGlobÆ
(
HTRuÀOp
 
›
,

74 c⁄° * 
∑âîn
, c⁄° * 
ª∂a˚
)

76 i‡(!
ruÀs
ËruÀ†
	`HTLi°_√w
();

77  
	`HTRuÀ_add
(
ruÀs
, 
›
, 
∑âîn
, 
ª∂a˚
);

78 
	}
}

93 
PUBLIC
 
BOOL
 
	$HTRuÀ_add
 (
HTLi°
 * 
li°
, 
HTRuÀOp
 
›
,

94 c⁄° * 
∑âîn
, c⁄° * 
ª∂a˚
)

96 i‡(
li°
 && 
∑âîn
) {

97 
HTRuÀ
 * 
me
;

98 i‡((
me
 = (
HTRuÀ
 *Ë
	`HT_CALLOC
(1, (HTRuÀ))Ë=
NULL
)

99 
	`HT_OUTOFMEM
("HTRule_add");

100 
me
->
›
 = op;

101 
	`SåAŒocC›y
(
me
->
∑âîn
,Öattern);

102 i‡(
ª∂a˚
) {

103 *
±r
 = 
	`°rchr
(
ª∂a˚
, '*');

104 
	`SåAŒocC›y
(
me
->
ª∂a˚
,Ñeplace);

105 
me
->
ö£π
 = 
±r
 ?Öå-
ª∂a˚
 : -1;

106 
	`HTTRACE
(
APP_TRACE
, "RuÀ Add.... F‹ `%s\' o∞%d `%s\'\n" 
_


107 
∑âîn
 
_
 
›
 _ 
ª∂a˚
);

109 
	`HTTRACE
(
APP_TRACE
, "RuÀ Add.... F‹ `%s\' o∞%d\n" 
_
 
∑âîn
 _ 
›
);

111  
	`HTLi°_≠≥ndObje˘
(
li°
, (*Ë
me
);

113  
NO
;

114 
	}
}

120 
PUBLIC
 
BOOL
 
	$HTRuÀ_dñëeAŒ
 (
HTLi°
 * 
li°
)

122 i‡(
li°
) {

123 
HTLi°
 *
cur
 = 
li°
;

124 
HTRuÀ
 *
¥es
;

125 (
¥es
 = (
HTRuÀ
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

126 
	`HT_FREE
(
¥es
->
∑âîn
);

127 
	`HT_FREE
(
¥es
->
ª∂a˚
);

128 
	`HT_FREE
(
¥es
);

130  
	`HTLi°_dñëe
(
li°
);

132  
NO
;

133 
	}
}

144 
PUBLIC
 * 
	$HTRuÀ_å™¶©e
 (
HTLi°
 * 
li°
, c⁄° * 
tokí
,

145 
BOOL
 
ign‹e_ˇ£
)

147 
HTRuÀ
 * 
¥es
;

148 * 
ª∂a˚
 = 
NULL
;

149 i‡(!
tokí
 || !
li°
Ë 
NULL
;

150 
	`HTTRACE
(
APP_TRACE
, "CheckÑuÀs. f‹ `%s\'\n" 
_
 
tokí
);

151 (
¥es
 = (
HTRuÀ
 *Ë
	`HTLi°_√xtObje˘
(
li°
))) {

152 * 
ª°
 = 
ign‹e_ˇ£
 ? 
	`HTSåCa£M©ch
(
¥es
->
∑âîn
, 
tokí
) :

153 
	`HTSåM©ch
(
¥es
->
∑âîn
, 
tokí
);

154 i‡(!
ª°
) ;

157 
¥es
->
›
) {

159 
HT_Pass
:

160 
HT_M≠
:

161 i‡(!
¥es
->
ª∂a˚
) {

162 
	`SåAŒocC›y
(
ª∂a˚
, 
tokí
);

164 } i‡(*
ª°
 && 
¥es
->
ö£π
 >= 0) {

165 i‡((
ª∂a˚
 = (*Ë
	`HT_MALLOC
(
	`°æí
(
¥es
->ª∂a˚)+°æí(
ª°
))Ë=
NULL
)

166 
	`HT_OUTOFMEM
("HTRule_translate");

167 
	`°r˝y
(
ª∂a˚
, 
¥es
->replace);

168 
	`°r˝y
(
ª∂a˚
+
¥es
->
ö£π
, 
ª°
);

171 
	`SåAŒocC›y
(
ª∂a˚
, 
¥es
->replace);

174 i‡(
¥es
->
›
 =
HT_Pass
) {

175 
	`HTTRACE
(
APP_TRACE
, "............ m≠ i¡ÿ`%s'\n" 
_
 
ª∂a˚
);

176  
ª∂a˚
;

180 
HT_Faû
:

183 
	`HTTRACE
(
APP_TRACE
, "............ FAIL `%s'\n" 
_
 
tokí
);

184  
NULL
;

187 i‡(!
ª∂a˚
Ë
	`SåAŒocC›y
‘ïœ˚, 
tokí
);

188  
ª∂a˚
;

189 
	}
}

196 
PUBLIC
 
BOOL
 
	$HTRuÀ_∑r£Löe
 (
HTLi°
 * 
li°
, c⁄° * 
c⁄fig
)

198 
HTRuÀOp
 
›
;

199 * 
löe
 = 
NULL
;

200 * 
±r
;

201 * 
w‹d1
, * 
w‹d2
, * 
w‹d3
;

202 
°©us
;

203 i‡(!
c⁄fig
Ë 
NO
;

204 i‡((
±r
 = 
	`°rchr
(
c⁄fig
, '#'))) *ptr = '\0';

205 
	`SåAŒocC›y
(
löe
, 
c⁄fig
);

206 
±r
 = 
löe
;

207 
	`HTTRACE
(
APP_TRACE
, "RuÀ P¨£.. `%s\'\n" 
_
 
c⁄fig
 ? config : "<null>");

208 i‡((
w‹d1
 = 
	`HTNextFõld
(&
±r
)Ë=
NULL
) {

209 
	`HT_FREE
(
löe
);

210  
YES
;

212 i‡((
w‹d2
 = 
	`HTNextFõld
(&
±r
)Ë=
NULL
) {

213 
	`HTTRACE
(
APP_TRACE
, "RuÀ P¨£.. Insufficõ¡ o≥ønds: `%s\'\n" 
_
 
löe
);

214 
	`HT_FREE
(
löe
);

215  
NO
;

217 
w‹d3
 = 
	`HTNextFõld
(&
±r
);

220 i‡(!
	`°rˇ£comp
(
w‹d1
, "addtype")) {

221 
quÆôy
;

222 * 
ícodög
 = 
	`HTNextFõld
(&
±r
);

223 
°©us
 = 
±r
 ? 
	`ssˇnf
’å, "%lf", &
quÆôy
) : 0;

224 
	`HTBöd_add
(
w‹d2
,

225 
w‹d3
,

226 
ícodög
 ?Éncoding : "binary",

227 
NULL
,

228 
NULL
,

229 
°©us
 >1? 
quÆôy
 : 1.0);

231 } i‡(!
	`°rˇ£comp
(
w‹d1
, "addencoding")) {

232 
quÆôy
;

233 
°©us
 = 
±r
 ? 
	`ssˇnf
’å, "%lf", &
quÆôy
) : 0;

234 
	`HTBöd_addEncodög
(
w‹d2
, 
w‹d3
, 
°©us
 >1 ? 
quÆôy
 : 1.0);

236 } i‡(!
	`°rˇ£comp
(
w‹d1
, "addlanguage")) {

237 
quÆôy
;

238 
°©us
 = 
±r
 ? 
	`ssˇnf
’å, "%lf", &
quÆôy
) : 0;

239 
	`HTBöd_addL™guage
(
w‹d2
, 
w‹d3
, 
°©us
 >1 ? 
quÆôy
 : 1.0);

241 } i‡(!
	`°rˇ£comp
(
w‹d1
, "presentation")) {

242 
HTLi°
 * 
c⁄vîãrs
 = 
	`HTF‹m©_c⁄vîsi⁄
();

243 
quÆôy
, 
£cs
, 
£cs_≥r_byã
;

244 
°©us
 = 
±r
 ? 
	`ssˇnf
’å,"%lf%lf%lf",&
quÆôy
,&
£cs
,&
£cs_≥r_byã
):0;

245 
	`HTPª£¡©i⁄_add
(
c⁄vîãrs
, 
w‹d2
, 
w‹d3
, 
NULL
,

246 
°©us
 >1 ? 
quÆôy
 : 1.0,

247 
°©us
 >2 ? 
£cs
 : 0.0,

248 
°©us
 >3 ? 
£cs_≥r_byã
 : 0.0);

250 } i‡(!
	`°rˇ£comp
(
w‹d1
, "proxy")) {

251 
	`HTProxy_add
(
w‹d2
, 
w‹d3
);

253 } i‡(!
	`°rˇ£comp
(
w‹d1
, "noproxy")) {

254 
p‹t
 = 0;

255 
°©us
 = 
±r
 ? 
	`ssˇnf
’å, "%d", &
p‹t
) : 0;

256 
	`HTNoProxy_add
(
w‹d2
, 
w‹d3
, 
p‹t
);

258 } i‡(!
	`°rˇ£comp
(
w‹d1
, "gateway")) {

259 
	`HTG©eway_add
(
w‹d2
, 
w‹d3
);

262 
›
 = 0==
	`°rˇ£comp
(
w‹d1
, "m≠"Ë? 
HT_M≠


263 : 0==
	`°rˇ£comp
(
w‹d1
, "∑ss"Ë? 
HT_Pass


264 : 0==
	`°rˇ£comp
(
w‹d1
, "Áû"Ë? 
HT_Faû


265 : 
HT_InvÆid
;

266 i‡(
›
 =
HT_InvÆid
) {

267 
	`HTTRACE
(
APP_TRACE
, "RuÀ P¨£.. Bad o∏unknown: `%s'\n" 
_
 
c⁄fig
);

269 
	`HTRuÀ_add
(
li°
, 
›
, 
w‹d2
, 
w‹d3
);

271 
	`HT_FREE
(
löe
);

272  
YES
;

273 
	}
}

278 
PRIVATE
 
	$HTRuÀ_put_block
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
)

280 
l
 > 0) {

281 i‡(
me
->
EOL°©e
 =
EOL_FCR
) {

282 i‡(*
b
 =
LF
)

283 
me
->
EOL°©e
 = 
EOL_FLF
;

284 i‡(
	`is•a˚
((Ë*
b
))

285 
me
->
EOL°©e
 = 
EOL_DOT
;

287 
	`HTRuÀ_∑r£Löe
(
ruÀs
, 
	`HTChunk_d©a
(
me
->
buf„r
));

288 
me
->
EOL°©e
 = 
EOL_BEGIN
;

289 
	`HTChunk_˛ór
(
me
->
buf„r
);

292 } i‡(
me
->
EOL°©e
 =
EOL_FLF
) {

293 i‡(
	`is•a˚
((Ë*
b
))

294 
me
->
EOL°©e
 = 
EOL_DOT
;

296 
	`HTRuÀ_∑r£Löe
(
ruÀs
, 
	`HTChunk_d©a
(
me
->
buf„r
));

297 
me
->
EOL°©e
 = 
EOL_BEGIN
;

298 
	`HTChunk_˛ór
(
me
->
buf„r
);

301 } i‡(
me
->
EOL°©e
 =
EOL_DOT
) {

302 i‡(
	`is•a˚
((Ë*
b
)) {

303 
me
->
EOL°©e
 = 
EOL_BEGIN
;

304 
	`HTChunk_putc
(
me
->
buf„r
, ' ');

306 
	`HTRuÀ_∑r£Löe
(
ruÀs
, 
	`HTChunk_d©a
(
me
->
buf„r
));

307 
me
->
EOL°©e
 = 
EOL_BEGIN
;

308 
	`HTChunk_˛ór
(
me
->
buf„r
);

311 } i‡(*
b
 =
CR
) {

312 
me
->
EOL°©e
 = 
EOL_FCR
;

313 } i‡(*
b
 =
LF
) {

314 
me
->
EOL°©e
 = 
EOL_FLF
;

316 
	`HTChunk_putc
(
me
->
buf„r
, *
b
);

317 
l
--; 
b
++;

319  
HT_OK
;

320 
	}
}

322 
PRIVATE
 
	$HTRuÀ_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

324  
	`HTRuÀ_put_block
(
me
, &
c
, 1);

325 
	}
}

327 
PRIVATE
 
	$HTRuÀ_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

329  
	`HTRuÀ_put_block
(
me
, 
s
, (Ë
	`°æí
(s));

330 
	}
}

332 
PRIVATE
 
	$HTRuÀ_Êush
 (
HTSåóm
 * 
me
)

334 i‡(
me
) {

335 * 
Êush
 = 
	`HTChunk_d©a
(
me
->
buf„r
);

336 i‡(
Êush
Ë
	`HTRuÀ_∑r£Löe
(
ruÀs
, flush);

337 
	`HTChunk_˛ór
(
me
->
buf„r
);

339  
HT_OK
;

340 
	}
}

342 
PRIVATE
 
	$HTRuÀ_‰ì
 (
HTSåóm
 * 
me
)

344 i‡(
me
) {

345 
°©us
 = 
	`HTRuÀ_Êush
(
me
);

346 
	`HTTRACE
(
APP_TRACE
, "Rules....... FREEING....\n");

347 
	`HTChunk_dñëe
(
me
->
buf„r
);

348 
	`HT_FREE
(
me
);

349  
°©us
;

351  
HT_ERROR
;

352 
	}
}

354 
PRIVATE
 
	$HTRuÀ_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

356 i‡(
me
) {

357 
°©us
 = 
HT_ERROR
;

358 
	`HTTRACE
(
APP_TRACE
, "Rules....... ABORTING...\n");

359 
	`HTChunk_dñëe
(
me
->
buf„r
);

360 
	`HT_FREE
(
me
);

361  
°©us
;

363  
HT_ERROR
;

364 
	}
}

369 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTRuÀCœss
 =

372 
HTRuÀ_Êush
,

373 
HTRuÀ_‰ì
,

374 
HTRuÀ_ab‹t
,

375 
HTRuÀ_put_ch¨a˘î
,

376 
HTRuÀ_put_°rög
,

377 
HTRuÀ_put_block


380 
PUBLIC
 
HTSåóm
 * 
	$HTRuÀs
 (
HTReque°
 * 
ªque°
,

381 * 
∑øm
,

382 
HTF‹m©
 
öput_f‹m©
,

383 
HTF‹m©
 
ouçut_f‹m©
,

384 
HTSåóm
 * 
ouçut_°ªam
)

386 
HTAÀπCÆlback
 *
cbf
 = 
	`HTAÀπ_föd
(
HT_A_CONFIRM
);

392 #ifde‡
HT_AUTOMATIC_RULES


393 i‡(!
cbf
 || (cb‡&& (*cbf)(
ªque°
,
HT_A_CONFIRM
, 
HT_MSG_RULES
, 
NULL
,NULL,NULL))) {

395 i‡((
cbf
 && (*cbf)(
ªque°
,
HT_A_CONFIRM
, 
HT_MSG_RULES
, 
NULL
,NULL,NULL))) {

397 
HTSåóm
 * 
me
;

398 
	`HTTRACE
(
APP_TRACE
, "Rule file... Parser object created\n");

399 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

400 
	`HT_OUTOFMEM
("HTRules");

401 
me
->
iß
 = &
HTRuÀCœss
;

402 
me
->
ªque°
 =Ñequest;

403 
me
->
buf„r
 = 
	`HTChunk_√w
(512);

404 
me
->
EOL°©e
 = 
EOL_BEGIN
;

405 i‡(!
ruÀs
ËruÀ†
	`HTLi°_√w
();

406  
me
;

408 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_NO_AUTO_RULES
,

409 
NULL
, 0, "HTRules");

410  
	`HTEº‹Såóm
();

412 
	}
}

417 
PUBLIC
 
HTSåóm
 * 
	$HTRuÀs_∑r£Autom©iˇŒy
 (
HTReque°
 * 
ªque°
,

418 * 
∑øm
,

419 
HTF‹m©
 
öput_f‹m©
,

420 
HTF‹m©
 
ouçut_f‹m©
,

421 
HTSåóm
 * 
ouçut_°ªam
)

423 i‡(
ªque°
) {

424 
HTSåóm
 * 
me
;

425 
	`HTTRACE
(
APP_TRACE
, "Rule file... AutomaticÖarser object created\n");

426 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

427 
	`HT_OUTOFMEM
("HTRules");

428 
me
->
iß
 = &
HTRuÀCœss
;

429 
me
->
ªque°
 =Ñequest;

430 
me
->
buf„r
 = 
	`HTChunk_√w
(512);

431 
me
->
EOL°©e
 = 
EOL_BEGIN
;

432 i‡(!
ruÀs
ËruÀ†
	`HTLi°_√w
();

433  
me
;

435 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_NO_AUTO_RULES
,

436 
NULL
, 0, "HTRules");

437  
	`HTEº‹Såóm
();

439 
	}
}

	@Library/src/HTRules.h

30 #i‚de‡
HTRULE_H


31 
	#HTRULE_H


	)

33 
	~"HTLi°.h
"

34 
	~"HTReq.h
"

35 
	~"HTF‹m©.h
"

58 
HTC⁄vîãr
 
HTRuÀs
, 
HTRuÀs_∑r£Autom©iˇŒy
;

70 
BOOL
 
HTRuÀ_∑r£Löe
 (
HTLi°
 * 
li°
, c⁄° * 
c⁄fig
);

83 
_HTRuÀ
 
	tHTRuÀ
;

85 
	e_HTRuÀOp
 {

86 
	mHT_InvÆid
,

87 
	mHT_M≠
,

88 
	mHT_Pass
,

89 
	mHT_Faû
,

90 
	mHT_DefPrŸ
,

91 
	mHT_PrŸe˘
,

92 
	mHT_Exec
,

93 
	mHT_Redúe˘
,

94 
	mHT_U£Proxy


95 } 
	tHTRuÀOp
;

97 
BOOL
 
HTRuÀ_add
 (
HTLi°
 * 
li°
, 
HTRuÀOp
 
›
,

98 c⁄° * 
∑âîn
, c⁄° * 
ª∂a˚
);

108 
BOOL
 
HTRuÀ_dñëeAŒ
 (
HTLi°
 *
li°
);

119 
HTLi°
 * 
HTRuÀ_globÆ
();

120 
BOOL
 
HTRuÀ_£tGlobÆ
 (
HTLi°
 * 
li°
);

121 
BOOL
 
HTRuÀ_addGlobÆ
 (
HTRuÀOp
 
›
, c⁄° * 
∑âîn
, c⁄° * 
ª∂a˚
);

135 * 
HTRuÀ_å™¶©e
 (
HTLi°
 * 
li°
, c⁄° * 
tokí
,

136 
BOOL
 
ign‹e_ˇ£
);

	@Library/src/HTSChunk.c

12 
	~"wwwsys.h
"

13 
	~"WWWUtû.h
"

14 
	~"WWWC‹e.h
"

15 
	~"HTSChunk.h
"

17 
	#HT_MAXSIZE
 0x10000

	)

18 
	#HT_MAXGROWSIZE
 0x4000

	)

20 
	s_HTSåóm
 {

21 
HTSåómCœss
 * 
	miß
;

22 
HTReque°
 * 
	mªque°
;

23 
HTChunk
 * 
	mchunk
;

25 
	mcur_size
;

26 
	mmax_size
;

27 
BOOL
 
	mgive_up
;

28 
BOOL
 
	mign‹e
;

29 
BOOL
 
	mísuª
;

34 
PRIVATE
 
	$HTSC_Êush
 (
HTSåóm
 * 
me
)

36  
HT_OK
;

37 
	}
}

42 
PRIVATE
 
	$HTSC_‰ì
 (
HTSåóm
 * 
me
)

44 
	`HTTRACE
(
STREAM_TRACE
, "Chunkstream. FREEING...\n");

45 
	`HT_FREE
(
me
);

46  
HT_OK
;

47 
	}
}

52 
PRIVATE
 
	$HTSC_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
îr‹li°
)

54 
	`HTTRACE
(
STREAM_TRACE
, "Chunkstream. ABORTING...\n");

55 
	`HT_FREE
(
me
);

56  
HT_ERROR
;

57 
	}
}

59 
PRIVATE
 
	$HTSC_putBlock
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
)

61 
me
->
cur_size
 +
l
;

69 i‡(!
me
->
ign‹e
 && me->
max_size
 > 0 && me->
cur_size
 > me->max_size) {

70 
HTMëhod
 
mëhod
 = 
	`HTReque°_mëhod
(
me
->
ªque°
);

71 i‡(
	`HTMëhod_hasE¡ôy
(
mëhod
)) {

72 
HTAÀπCÆlback
 *
cbf
 = 
	`HTAÀπ_föd
(
HT_A_CONFIRM
);

73 i‡((
cbf
 && (*cbf)(
me
->
ªque°
, 
HT_A_CONFIRM
, 
HT_MSG_BIG_PUT
,

74 
NULL
, NULL, NULL)))

75 
me
->
ign‹e
 = 
YES
;

77 
me
->
give_up
 = 
YES
;

79 
me
->
give_up
 = 
YES
;

81 } i‡(!
me
->
ísuª
) {

82 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
me
->
ªque°
);

83 
˛
 = 
	`HTAnch‹_Àngth
(
™ch‹
);

84 i‡(
˛
 > 0Ë
	`HTChunk_ísuª
(
me
->
chunk
, cl);

85 
me
->
ísuª
 = 
YES
;

87 i‡(!
me
->
give_up
) {

88 
	`HTChunk_putb
(
me
->
chunk
, 
b
, 
l
);

89  
HT_OK
;

91  
HT_ERROR
;

92 
	}
}

94 
PRIVATE
 
	$HTSC_putCh¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

96  
	`HTSC_putBlock
(
me
, &
c
, 1);

97 
	}
}

99 
PRIVATE
 
	$HTSC_putSåög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

101  
	`HTSC_putBlock
(
me
, 
s
, (Ë
	`°æí
(s));

102 
	}
}

104 
HTSåómCœss
 
	gHTSåómToChunkCœss
 = {

106 
HTSC_Êush
,

107 
HTSC_‰ì
,

108 
HTSC_ab‹t
,

109 
HTSC_putCh¨a˘î
,

110 
HTSC_putSåög
,

111 
HTSC_putBlock


114 
PUBLIC
 
HTSåóm
 * 
	$HTSåómToChunk
 (
HTReque°
 * 
ªque°
,

115 
HTChunk
 ** 
chunk
,

116 
max_size
)

118 i‡(
ªque°
) {

119 
HTSåóm
 * 
me
;

120 *
chunk
 = 
NULL
;

121 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

122 
	`HT_OUTOFMEM
("HTStreamToChunk");

123 
me
->
iß
 = &
HTSåómToChunkCœss
;

124 
me
->
ªque°
 =Ñequest;

125 
me
->
max_size
 = (!max_sizeË? max_sizê: 
HT_MAXSIZE
;

126 
me
->
chunk
 = *chunk = 
	`HTChunk_√w
(me->
max_size
 > 0 ?

127 
	`HTMIN
(
me
->
max_size
, 
HT_MAXGROWSIZE
) :

128 
HT_MAXGROWSIZE
);

129 
	`HTTRACE
(
STREAM_TRACE
, "ChunkSåóm. Chunk %∞¸óãd wôh max sizê%d\n" 
_


130 
me
->
chunk
 
_
 me->
max_size
);

131  
me
;

133  
	`HTEº‹Såóm
();

134 
	}
}

	@Library/src/HTSChunk.h

32 #i‚de‡
HTSCHUNK_H


33 
	#HTSCHUNK_H


	)

35 
	~"HTChunk.h
"

36 
	~"HTSåóm.h
"

38 
HTSåóm
 * 
HTSåómToChunk
 (
HTReque°
 * 
ªque°
,

39 
HTChunk
 ** 
chunk
,

40 
max_size
);

	@Library/src/HTSQL.c

18 
	~"WWWLib.h
"

19 
	~"HTSQL.h
"

21 
	~<mysql/mysql.h
>

22 
	~<mysql/îrmsg.h
>

24 
	s_HTSQL
 {

25 
MYSQL
 
	m£rvî
;

26 
MYSQL
 * 
	mpsvr
;

27 c⁄° * 
	mho°
;

28 c⁄° * 
	mu£r
;

29 c⁄° * 
	m∑ssw‹d
;

30 c⁄° * 
	mdb
;

35 
PRIVATE
 
	$sql_d©ëime°r
 (** 
±r
, 
time_t
 
t
)

37 
Àngth
 = -1;

38 i‡(
t
 > 0 && *
±r
) {

39 #i‡
	`deföed
(
HT_REENTRANT
Ë|| deföed(
SOLARIS
)

40 
tm
 
gmt
;

41 * 
pgmt
 = 
	`gmtime_r
(&
t
, &
gmt
);

43 
tm
 *
pgmt
 = 
	`gmtime
(&
t
);

46 #ifde‡
HAVE_STRFTIME


47 
Àngth
 = 
	`°r·ime
(*
±r
, 40, "\'%Y-%m-%d %H:%M:%S\'", 
pgmt
);

49 
Àngth
 = 
	`•rötf
(*
±r
, "\'%04d-%02d-%02d %02d:%02d:%02d\'",

50 
pgmt
->
tm_yór
 + 1900,

51 
pgmt
->
tm_m⁄
 + 1,

52 
pgmt
->
tm_wday
 + 1,

53 
pgmt
->
tm_hour
,

54 
pgmt
->
tm_mö
,

55 
pgmt
->
tm_£c
);

59 *
±r
 = *±∏+ 
	`°æí
(*ptr);

60 **
±r
++ = ' ';

62  
Àngth
;

63 
	}
}

65 
PUBLIC
 * 
	$HTSQL_¥ötf
 (* 
buf
, 
Àngth
, * 
fmt
, ...)

67 
va_li°
 
pArgs
;

68 * 
p
=
fmt
;

69 * 
q
=
buf
;

70 * 
˝¨
;

71 
u∑r
;

72 
Õ¨
;

73 
time_t
 
ç¨
;

74 
	`va_°¨t
(
pArgs
, 
fmt
);

75 *
p
 && 
Àngth
>0) {

76 i‡(*
p
 == '%') {

77 *++
p
) {

79 i‡((
˝¨
 = 
	`va_¨g
(
pArgs
, *)Ë!
NULL
) {

80 * 
˝
 = 
˝¨
;

81 (*
q
++ = *
˝
++Ë&& 
Àngth
-->0); q--;

83 *
q
++='n'; *q++='u'; *q++='l'; *q++='l';

84 
Àngth
 -= 4;

88 i‡((
˝¨
 = 
	`va_¨g
(
pArgs
, *)Ë!
NULL
) {

89 * 
˝
 = 
˝¨
;

90 *
q
++='\'';

91 
	`mysql_esˇ≥_°rög
(
q
, 
˝
, 
	`°æí
(cp));

92 *
q
Ëq++, 
Àngth
--;

93 *
q
++='\'';

95 *
q
++='n'; *q++='u'; *q++='l'; *q++='l';

96 
Àngth
 -= 4;

100 i‡((
ç¨
 = 
	`va_¨g
(
pArgs
, 
time_t
)) > 0) {

101 
Àngth
 -
	`sql_d©ëime°r
(&
q
, 
ç¨
);

103 *
q
++='n'; *q++='u'; *q++='l'; *q++='l';

104 
Àngth
 -= 4;

108 i‡((
u∑r
 = 
	`va_¨g
(
pArgs
, )) >= 0) {

109 
num
[32];

110 * 
≈å
 = 
num
;

111 
i
;

113 
i
 = 
u∑r
 % 10;

114 *
≈å
++ = 
i
+'0';

115 
u∑r
 /= 10;

116 } 
u∑r
 > 0);

117 
≈å
 > 
num
 && 
Àngth
>0Ë*
q
++=*--nptr,Üength--;

119 *
q
++='0';

120 
Àngth
--;

124 i‡((
Õ¨
 = 
	`va_¨g
(
pArgs
, )) >= 0) {

125 
num
[32];

126 * 
≈å
 = 
num
;

127 
i
;

129 
i
 = 
Õ¨
 % 10;

130 *
≈å
++ = 
i
+'0';

131 
Õ¨
 /= 10;

132 } 
Õ¨
 > 0);

133 
≈å
 > 
num
 && 
Àngth
>0Ë*
q
++=*--nptr,Üength--;

135 *
q
++='0';

136 
Àngth
--;

140 *
q
++=*
p
++;

141 
Àngth
--;

143 
p
++;

145 *
q
++=*
p
++;

146 
Àngth
--;

149 *
q
 = '\0';

150 
	`va_íd
(
pArgs
);

151  
buf
;

152 
	}
}

154 
PUBLIC
 
HTSQL
 * 
	$HTSQL_√w
 (c⁄° * 
ho°
,

155 c⁄° * 
u£r
, c⁄° * 
pw
,

156 
Êags
)

158 
HTSQL
 * 
me
 = 
NULL
;

159 i‡(!
ho°
 || !
u£r
 || !
pw
) {

160 
	`HTTRACE
(
SQL_TRACE
, "SQLÇew..... Missing host, user, orÖassword\n");

161  
NULL
;

163 i‡((
me
 = (
HTSQL
 *Ë
	`HT_CALLOC
(1, (HTSQL))Ë=
NULL
)

164 
	`HT_OUTOFMEM
("HTSQL_new");

165 
me
->
ho°
 = host;

166 
me
->
u£r
 = user;

167 
me
->
∑ssw‹d
 = 
pw
;

168  
me
;

169 
	}
}

171 
PUBLIC
 
BOOL
 
	$HTSQL_dñëe
 (
HTSQL
 * 
me
)

173 i‡(
me
) {

174 i‡(
me
->
psvr
Ë
	`HTSQL_˛o£
(me);

175 
	`HT_FREE
(
me
);

176  
YES
;

178  
NO
;

179 
	}
}

181 
PUBLIC
 
BOOL
 
	$HTSQL_c⁄√˘
 (
HTSQL
 * 
me
)

183 i‡(
me
 && me->
ho°
) {

184 
	`HTTRACE
(
SQL_TRACE
, "SQL c⁄√˘. O≥¿®lökÅÿ£rvî `%s\'\n" 
_
 
me
->
ho°
);

185 i‡((
me
->
psvr
 = 
	`mysql_c⁄√˘
(&(me->
£rvî
), me->
ho°
,

186 
me
->
u£r
 ? me->user : "",

187 
me
->
∑ssw‹d
 ? me->∑ssw‹d : "")Ë=
NULL
) {

188 
	`HTTRACE
(
SQL_TRACE
, "SQL c⁄√˘. `%s\'Éºnÿ%d\n" 
_


189 
	`mysql_îr‹
(&
me
->
£rvî
Ë
_
 
	`mysql_î∫o
(&me->server));

190  
NO
;

192  
YES
;

194  
NO
;

195 
	}
}

197 
PUBLIC
 
MYSQL
 * 
	$HTSQL_gëMysql
 (
HTSQL
 * 
me
)

199  
me
 ? me->
psvr
 : 
NULL
;

200 
	}
}

202 
PUBLIC
 
BOOL
 
	$HTSQL_˛o£
 (
HTSQL
 * 
me
)

204 i‡(
me
 && me->
psvr
) {

205 
	`HTTRACE
(
SQL_TRACE
, "SQL clo£... LökÅÿho° `%s\'\n" 
_
 
me
->
ho°
);

206 
	`mysql_˛o£
(
me
->
psvr
);

207 
me
->
psvr
 = 
NULL
;

208 
me
->
db
 = 
NULL
;

209  
YES
;

211  
NO
;

212 
	}
}

214 
PUBLIC
 
BOOL
 
	$HTSQL_vîsi⁄
 (
HTSQL
 * 
me
,

215 ** 
£rvî
,

216 * 
¥Ÿocﬁ_vîsi⁄
,

217 ** 
£rvî_vîsi⁄
,

218 ** 
˛õ¡_vîsi⁄
)

220 i‡(
me
 && me->
psvr
) {

221 i‡(*
£rvî
Ë*£rvî = 
	`mysql_gë_£rvî_öfo
(
me
->
psvr
);

222 i‡(
¥Ÿocﬁ_vîsi⁄
Ë*¥Ÿocﬁ_vîsi⁄ = 
	`mysql_gë_¥Ÿo_öfo
(
me
->
psvr
);

223 i‡(*
£rvî_vîsi⁄
Ë*£rvî_vîsi⁄ = 
	`mysql_gë_£rvî_öfo
(
me
->
psvr
);

224 i‡(*
˛õ¡_vîsi⁄
Ë*˛õ¡_vîsi⁄ = 
	`mysql_gë_˛õ¡_öfo
();

225  
YES
;

227  
NO
;

228 
	}
}

230 
PUBLIC
 
BOOL
 
	$HTSQL_£À˘DB
 (
HTSQL
 * 
me
, c⁄° * 
db
)

232 
BOOL
 
¸óãd
 = 
NO
;

233 i‡(
me
 && me->
psvr
 && 
db
) {

234 
	`HTTRACE
(
SQL_TRACE
, "SQL sñe˘.. D©aba£ `%s\'\n" 
_
 
db
);

235 
me
->
db
 = 
NULL
;

236 i‡(
	`mysql_£À˘_db
(
me
->
psvr
, 
db
) < 0) {

237 
îr
 = 
	`mysql_î∫o
(
me
->
psvr
);

238 
	`HTTRACE
(
SQL_TRACE
, "SQL sñe˘.. `%s\',Éºnÿ%d\n" 
_


239 
	`mysql_îr‹
(
me
->
psvr
Ë
_
 
îr
);

242 i‡(
îr
 == 1049) {

243 i‡(
	`mysql_¸óã_db
(
me
->
psvr
, 
db
) < 0) {

244 
	`HTTRACE
(
SQL_TRACE
, "SQLÉº‹... `%s\',Éºnÿ%d\n" 
_


245 
	`mysql_îr‹
(
me
->
psvr
Ë
_
 
îr
);

246  
NO
;

248 
¸óãd
 = 
YES
;

250  
NO
;

253 i‡(
¸óãd
) {

254 i‡(
	`mysql_£À˘_db
(
me
->
psvr
, 
db
) < 0) {

255 
îr
 = 
	`mysql_î∫o
(
me
->
psvr
);

256 
	`HTTRACE
(
SQL_TRACE
, "SQL sñe˘.. `%s\',Éºnÿ%d\n" 
_


257 
	`mysql_îr‹
(
me
->
psvr
Ë
_
 
îr
);

258  
NO
;

263 
me
->
db
 = db;

264  
YES
;

266  
NO
;

267 
	}
}

269 
PUBLIC
 
BOOL
 
	$HTSQL_quîy
 (
HTSQL
 * 
me
, c⁄° * 
quîy
)

271 
	`HTTRACE
(
SQL_TRACE
, "SQL quîy... `%s\'\n" 
_
 
quîy
 ? query : "<null>");

272 i‡(
me
 && me->
psvr
 && 
quîy
) {

273 i‡(
	`mysql_quîy
(
me
->
psvr
, 
quîy
) < 0) {

274 
°©us
 = 
	`mysql_î∫o
(
me
->
psvr
);

275 
	`HTTRACE
(
SQL_TRACE
, "SQL quîy... `%s\' o¿quîy `%s\' wôhÉºnÿ%d\n" 
_


276 
	`mysql_îr‹
(
me
->
psvr
Ë
_
 
quîy
 _ 
°©us
);

279 i‡(
°©us
==
CR_SERVER_GONE_ERROR
 || sètus==
CR_SERVER_LOST
) {

280 i‡(
	`HTSQL_c⁄√˘
(
me
)==
NO
 || 
	`HTSQL_£À˘DB
(me, me->
db
)==NO)

281  
NO
;

282  (
	`mysql_quîy
(
me
->
psvr
, 
quîy
) == 0);

284  
NO
;

286  
YES
;

288  
NO
;

289 
	}
}

291 
PUBLIC
 
	$HTSQL_gëLa°In£πId
 (
HTSQL
 * 
me
)

293  (
me
 && me->
psvr
Ë? 
	`mysql_ö£π_id
(me->psvr) : -1;

294 
	}
}

296 
PUBLIC
 
	$HTSQL_GëAf„˘edRows
 (
HTSQL
 * 
me
)

298  (
me
 && me->
psvr
Ë? 
	`mysql_af„˘ed_rows
(me->psvr) : -1;

299 
	}
}

302 
PUBLIC
 
MYSQL_RES
 * 
	$HTSQL_°‹eResu…
 (
HTSQL
 * 
me
)

304 
MYSQL_RES
 * 
ªsu…
 = 
NULL
;

305 i‡(
me
 && me->
psvr
) {

306 i‡((
ªsu…
 = 
	`mysql_°‹e_ªsu…
(
me
->
psvr
)Ë=
NULL
) {

307 
°©us
 = 
	`mysql_î∫o
(
me
->
psvr
);

308 
	`HTTRACE
(
SQL_TRACE
, "SQL st‹e... `%s\' wôhÉºnÿ%d\n" 
_


309 
	`mysql_îr‹
(
me
->
psvr
Ë
_
 
°©us
);

312  
ªsu…
;

313 
	}
}

315 
PUBLIC
 
BOOL
 
	$HTSQL_‰ìResu…
 (
MYSQL_RES
 * 
me
)

317 i‡(
me
) {

318 
	`mysql_‰ì_ªsu…
(
me
);

319  
YES
;

321  
NO
;

322 
	}
}

	@Library/src/HTSQL.h

31 #i‚de‡
HTSQL_H


32 
	#HTSQL_H


	)

34 
	~<mysql/mysql.h
>

42 
_HTSQL
 
	tHTSQL
;

44 
HTSQL
 * 
HTSQL_√w
 (c⁄° * 
ho°
,

45 c⁄° * 
u£r
, c⁄° * 
pw
,

46 
Êags
);

47 
BOOL
 
HTSQL_dñëe
 (
HTSQL
 * 
me
);

58 
BOOL
 
HTSQL_c⁄√˘
 (
HTSQL
 * 
me
);

66 
BOOL
 
HTSQL_˛o£
 (
HTSQL
 * 
me
);

74 
BOOL
 
HTSQL_vîsi⁄
 (
HTSQL
 * 
me
,

75 ** 
£rvî
,

76 * 
¥Ÿocﬁ_vîsi⁄
,

77 ** 
£rvî_vîsi⁄
,

78 ** 
˛õ¡_vîsi⁄
);

86 
BOOL
 
HTSQL_£À˘DB
 (
HTSQL
 * 
me
, c⁄° * 
db
);

97 
MYSQL
 * 
HTSQL_gëMysql
 (
HTSQL
 * 
me
);

137 * 
HTSQL_¥ötf
 (* 
buf
, 
Àngth
, * 
fmt
, ...);

148 
BOOL
 
HTSQL_quîy
 (
HTSQL
 * 
me
, c⁄° * 
quîy
);

156 
HTSQL_gëLa°In£πId
 (
HTSQL
 * 
me
);

157 
HTSQL_GëAf„˘edRows
 (
HTSQL
 * 
me
);

167 
MYSQL_RES
 * 
HTSQL_°‹eResu…
 (
HTSQL
 * 
me
);

174 
BOOL
 
HTSQL_‰ìResu…
 (
MYSQL_RES
 * 
me
);

	@Library/src/HTSQLLog.c

16 
	~"WWWLib.h
"

17 
	~"HTSQL.h
"

18 
	~"HTSQLLog.h
"

20 
	~<mysql/mysql.h
>

22 
	s_HTSQLLog
 {

23 
HTSQL
 * 
	msql
;

24 * 
	mªœtive
;

25 
	mac˚s£s
;

26 
HTSQLLogFœgs
 
	mÊags
;

29 
	#DEFAULT_SQL_URIS_TABLE
 "uris"

	)

30 
	#DEFAULT_SQL_REQUESTS_TABLE
 "ªque°s"

	)

31 
	#DEFAULT_SQL_RESOURCES_TABLE
 "ªsour˚s"

	)

32 
	#DEFAULT_SQL_LINKS_TABLE
 "löks"

	)

34 
	#DEFAULT_SQL_KEY_TYPE
 "öàunsig√dÇŸÇuŒ"

	)

35 
	#MAX_URI_LENGTH
 255

	)

39 
PRIVATE
 
	$föd_uri
(
HTSQLLog
 * 
me
, c⁄° * 
uri
)

41 
ödex
 = -1;

42 i‡(
me
 && me->
sql
 && 
uri
) {

43 
buf
[1024];

44 * 
quîy
 = 
NULL
;

45 
MYSQL_RES
 * 
ªsu…
 = 
NULL
;

46 
quîy
 = 
	`HTSQL_¥ötf
(
buf
, 1024, "select * from %s where uri=%S",

47 
DEFAULT_SQL_URIS_TABLE
, 
uri
);

48 i‡(
	`HTSQL_quîy
(
me
->
sql
, 
quîy
) &&

49 (
ªsu…
 = 
	`HTSQL_°‹eResu…
(
me
->
sql
)Ë!
NULL
) {

50 
MYSQL_ROW
 
row
;

51 i‡((
row
 = 
	`mysql_„tch_row
(
ªsu…
)) &&Ñow[0])

52 
ödex
 = 
	`©oi
(
row
[0]);

53 
	`HTSQL_‰ìResu…
(
ªsu…
);

56  
ödex
;

57 
	}
}

59 
PRIVATE
 
	$add_uri
 (
HTSQLLog
 * 
me
, c⁄° * 
uri
)

61 i‡(
me
 && me->
sql
 && 
uri
) {

62 
ödex
 = -1;

63 * 
ªl
 = 
me
->
ªœtive
 ? 
	`HTRñ©ive
(
uri
, me->ªœtiveË: 
NULL
;

66 i‡((
ödex
 = 
	`föd_uri
(
me
, 
ªl
 ?Ññ : 
uri
)) < 0) {

67 
buf
[1024];

68 * 
quîy
 = 
	`HTSQL_¥ötf
(
buf
, 1024, "insert into %s (uri) values (%S)",

69 
DEFAULT_SQL_URIS_TABLE
, 
ªl
 ?Ññ : 
uri
);

70 i‡(
	`HTSQL_quîy
(
me
->
sql
, 
quîy
Ë!
YES
) {

71 
	`HT_FREE
(
ªl
);

74 
ödex
 = 
	`HTSQL_gëLa°In£πId
(
me
->
sql
);

76 
	`HT_FREE
(
ªl
);

77  
ödex
;

80 
	}
}

82 
PRIVATE
 
BOOL
 
	$add_lökty≥
 (
HTSQLLog
 * 
me
, 
§cidx
, 
d°idx
,

83 c⁄° * 
ty≥
, c⁄° * 
commít
)

85 i‡(
me
 && me->
sql
 && 
§cidx
>=0 && 
d°idx
>=0 && 
ty≥
) {

86 
buf
[1024];

87 * 
quîy
 = 
	`HTSQL_¥ötf
(
buf
, 1024, "insert into %s values (%u,%u,%S,%S)",

88 
DEFAULT_SQL_LINKS_TABLE
,

89 
§cidx
, 
d°idx
, 
ty≥
, 
commít
);

90  
	`HTSQL_quîy
(
me
->
sql
, 
quîy
);

92  
NO
;

93 
	}
}

95 
PRIVATE
 
BOOL
 
	$˛ór_èbÀ
 (
HTSQLLog
 * 
me
, c⁄° * 
èbÀ
)

97 i‡(
me
 && me->
sql
 && 
èbÀ
) {

98 
buf
[1024];

99 * 
quîy
 = 
	`HTSQL_¥ötf
(
buf
, 1024, "dñëê‰om %s", 
èbÀ
);

100  
	`HTSQL_quîy
(
me
->
sql
, 
quîy
);

102  
NO
;

103 
	}
}

105 
PRIVATE
 
BOOL
 
	$dr›_èbÀ
 (
HTSQLLog
 * 
me
, c⁄° * 
èbÀ
)

107 i‡(
me
 && me->
sql
 && 
èbÀ
) {

108 
buf
[1024];

109 * 
quîy
 = 
	`HTSQL_¥ötf
(
buf
, 1024, "dr›ÅabÀ %s", 
èbÀ
);

110  
	`HTSQL_quîy
(
me
->
sql
, 
quîy
);

112  
NO
;

113 
	}
}

115 
PRIVATE
 
BOOL
 
	$¸óãTabÀs
 (
HTSQLLog
 * 
me
, 
HTSQLLogFœgs
 
Êags
)

117 i‡(
me
 && me->
sql
) {

118 
buf
[1024];

119 * 
quîy
 = 
NULL
;

122 i‡(
Êags
 & 
HTSQLLOG_DROP_URIS_TABLE
)

123 
	`dr›_èbÀ
(
me
, 
DEFAULT_SQL_URIS_TABLE
);

126 
quîy
 = 
	`HTSQL_¥ötf
(
buf
, 1024,

128 
DEFAULT_SQL_URIS_TABLE
,

129 
DEFAULT_SQL_KEY_TYPE
,

130 
MAX_URI_LENGTH
);

131 
	`HTSQL_quîy
(
me
->
sql
, 
quîy
);

134 i‡(
Êags
 & 
HTSQLLOG_CLEAR_URIS_TABLE
)

135 
	`˛ór_èbÀ
(
me
, 
DEFAULT_SQL_URIS_TABLE
);

138 i‡(
Êags
 & 
HTSQLLOG_DROP_REQUESTS_TABLE
)

139 
	`dr›_èbÀ
(
me
, 
DEFAULT_SQL_REQUESTS_TABLE
);

142 
quîy
 = 
	`HTSQL_¥ötf
(
buf
, 1024,

144 
DEFAULT_SQL_REQUESTS_TABLE
,

145 
DEFAULT_SQL_KEY_TYPE
);

146 
	`HTSQL_quîy
(
me
->
sql
, 
quîy
);

149 i‡(
Êags
 & 
HTSQLLOG_CLEAR_REQUESTS_TABLE
)

150 
	`˛ór_èbÀ
(
me
, 
DEFAULT_SQL_REQUESTS_TABLE
);

153 i‡(
Êags
 & 
HTSQLLOG_DROP_RESOURCES_TABLE
)

154 
	`dr›_èbÀ
(
me
, 
DEFAULT_SQL_RESOURCES_TABLE
);

157 
quîy
 = 
	`HTSQL_¥ötf
(
buf
, 1024,

159 
DEFAULT_SQL_RESOURCES_TABLE
,

160 
DEFAULT_SQL_KEY_TYPE
);

161 
	`HTSQL_quîy
(
me
->
sql
, 
quîy
);

164 i‡(
Êags
 & 
HTSQLLOG_CLEAR_RESOURCES_TABLE
)

165 
	`˛ór_èbÀ
(
me
, 
DEFAULT_SQL_RESOURCES_TABLE
);

168 i‡(
Êags
 & 
HTSQLLOG_DROP_LINKS_TABLE
)

169 
	`dr›_èbÀ
(
me
, 
DEFAULT_SQL_LINKS_TABLE
);

172 
quîy
 = 
	`HTSQL_¥ötf
(
buf
, 1024,

174 
DEFAULT_SQL_LINKS_TABLE
,

175 
DEFAULT_SQL_KEY_TYPE
,

176 
DEFAULT_SQL_KEY_TYPE
);

177 
	`HTSQL_quîy
(
me
->
sql
, 
quîy
);

180 i‡(
Êags
 & 
HTSQLLOG_CLEAR_LINKS_TABLE
)

181 
	`˛ór_èbÀ
(
me
, 
DEFAULT_SQL_LINKS_TABLE
);

184  
YES
;

186  
NO
;

187 
	}
}

193 
PUBLIC
 
HTSQLLog
 * 
	$HTSQLLog_›í
 (c⁄° * 
ho°
,

194 c⁄° * 
u£r
,

195 c⁄° * 
pw
,

196 c⁄° * 
db
,

197 
HTSQLLogFœgs
 
Êags
)

199 
HTSQLLog
 * 
me
 = 
NULL
;

200 i‡(!
ho°
 || !
u£r
 || !
pw
 || !
db
) {

201 
	`HTTRACE
(
SQL_TRACE
, "SQLLog...... Missing SQLLog host, user,Öassword, or db\n");

202  
NULL
;

204 i‡((
me
 = (
HTSQLLog
 *Ë
	`HT_CALLOC
(1, (HTSQLLog))Ë=
NULL
)

205 
	`HT_OUTOFMEM
("HTSQLLog_open");

206 i‡((
me
->
sql
 = 
	`HTSQL_√w
(
ho°
, 
u£r
, 
pw
, 0)Ë!
NULL
 &&

207 
	`HTSQL_c⁄√˘
(
me
->
sql
Ë=
YES
 && 
	`HTSQL_£À˘DB
(me->sql, 
db
) == YES) {

210 
	`¸óãTabÀs
(
me
, 
Êags
);

212 
me
->
Êags
 = flags;

214 
	`HTSQL_dñëe
(
me
->
sql
);

215 
	`HT_FREE
(
me
);

217  
me
;

218 
	}
}

224 
PUBLIC
 
BOOL
 
	$HTSQLLog_˛o£
 (
HTSQLLog
 * 
me
)

226 i‡(
me
) {

227 i‡(
me
->
sql
Ë
	`HTSQL_˛o£
(me->sql);

228 
	`HT_FREE
(
me
->
ªœtive
);

229 
	`HT_FREE
(
me
);

230  
YES
;

232  
NO
;

233 
	}
}

235 
PUBLIC
 
BOOL
 
	$HTSQLLog_˛órTabÀs
 (
HTSQLLog
 * 
me
)

237 i‡(
me
 && me->
sql
) {

241  
YES
;

243  
NO
;

244 
	}
}

246 
PUBLIC
 
BOOL
 
	$HTSQLLog_makeRñ©iveTo
 (
HTSQLLog
 * 
me
, c⁄° * 
ªœtive
)

248 i‡(
me
) {

249 
	`SåAŒocC›y
(
me
->
ªœtive
,Ñelative);

250  
YES
;

252  
NO
;

253 
	}
}

255 
PUBLIC
 
	$HTSQLLog_ac˚ssCou¡
 (
HTSQLLog
 * 
me
)

257  
me
 ? me->
ac˚s£s
 : -1;

258 
	}
}

260 
PUBLIC
 
BOOL
 
	$HTSQLLog_addURI
 (
HTSQLLog
 * 
me
, c⁄° * 
uri
)

262  (
me
 && me->
sql
 && (
	`add_uri
(me, 
uri
)>=0));

263 
	}
}

265 
PUBLIC
 
BOOL
 
	$HTSQLLog_addLökRñ©i⁄shù
 (
HTSQLLog
 * 
me
,

266 c⁄° * 
§c_uri
,

267 c⁄° * 
d°_uri
,

268 c⁄° * 
lök_ty≥
,

269 c⁄° * 
commít
)

271 i‡(
§c_uri
 && 
d°_uri
) {

272 
§cidx
 = 
	`add_uri
(
me
, 
§c_uri
);

273 
d°idx
 = 
	`add_uri
(
me
, 
d°_uri
);

274  
	`add_lökty≥
(
me
, 
§cidx
, 
d°idx
, 
lök_ty≥
, 
commít
);

276  
NO
;

277 
	}
}

279 
PUBLIC
 
BOOL
 
	$HTSQLLog_addE¡ry
 (
HTSQLLog
 * 
me
, 
HTReque°
 * 
ªque°
, 
°©us
)

281 i‡(
me
 && me->
sql
) {

282 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

283 
HTP¨ítAnch‹
 * 
∑ª¡_™ch‹
 = 
	`HTReque°_∑ª¡
(
ªque°
);

284 * 
uri
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
™ch‹
);

285 
ödex
 = 0;

286 
buf
[512];

287 * 
quîy
 = 
NULL
;

290 i‡((
ödex
 = 
	`add_uri
(
me
, 
uri
)) < 0) {

291 
	`HT_FREE
(
uri
);

292  
NO
;

296 
quîy
 = 
	`HTSQL_¥ötf
(
buf
, 512, "replace into %s values (%u,%S,%u,%T,%T)",

297 
DEFAULT_SQL_REQUESTS_TABLE
,

298 
ödex
,

299 
	`HTMëhod_«me
(
	`HTReque°_mëhod
(
ªque°
)),

300 
	`abs
(
°©us
),

301 
	`HTReque°_d©e
(
ªque°
),

302 
	`HTAnch‹_d©e
(
™ch‹
));

303 i‡(
	`HTSQL_quîy
(
me
->
sql
, 
quîy
Ë!
YES
) {

304 
	`HT_FREE
(
uri
);

305  
NO
;

309 
HTLi°
 * 
ícodögs
 = 
	`HTAnch‹_ícodög
(
™ch‹
);

310 
HTLi°
 * 
œnguages
 = 
	`HTAnch‹_œnguage
(
™ch‹
);

311 
HTF‹m©
 
f‹m©
 = 
	`HTAnch‹_f‹m©
(
™ch‹
);

312 
HTCh¨£t
 
ch¨£t
 = 
	`HTAnch‹_ch¨£t
(
™ch‹
);

313 
HTEncodög
 
ícodög
 = 
ícodögs
 ? 
	`HTLi°_fú°Obje˘
”ncodögsË: 
NULL
;

314 
HTL™guage
 
œnguage
 = 
œnguages
 ? 
	`HTLi°_fú°Obje˘
÷™guagesË: 
NULL
;

315 
quîy
 = 
	`HTSQL_¥ötf
(
buf
, 512, "replace into %s values (%u,%l,%T,%T,%S,%S,%S,%S,%S)",

316 
DEFAULT_SQL_RESOURCES_TABLE
,

317 
ödex
,

318 
	`HTAnch‹_Àngth
(
™ch‹
),

319 
	`HTAnch‹_œ°Modifõd
(
™ch‹
),

320 
	`HTAnch‹_expúes
(
™ch‹
),

321 
f‹m©
 !
WWW_UNKNOWN
 ? 
	`HTAtom_«me
(f‹m©Ë: 
NULL
,

322 
ch¨£t
 ? 
	`HTAtom_«me
(ch¨£tË: 
NULL
,

323 
ícodög
 ? 
	`HTAtom_«me
”ncodögË: 
NULL
,

324 
œnguage
 ? 
	`HTAtom_«me
÷™guageË: 
NULL
,

325 
	`HTAnch‹_tôÀ
(
™ch‹
));

326 i‡(
	`HTSQL_quîy
(
me
->
sql
, 
quîy
Ë!
YES
) {

327 
	`HT_FREE
(
uri
);

328  
NO
;

333 i‡(
∑ª¡_™ch‹
) {

334 * 
∑ª¡
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
∑ª¡_™ch‹
);

335 i‡(
uri
 && 
∑ª¡
 && *parent) {

336 
§cidx
 = 
	`add_uri
(
me
, 
∑ª¡
);

337 
	`add_lökty≥
(
me
, 
§cidx
, 
ödex
, "ª„ªr", 
NULL
);

339 
	`HT_FREE
(
∑ª¡
);

343 
me
->
ac˚s£s
++;

345 
	`HT_FREE
(
uri
);

346  
YES
;

348  
NO
;

349 
	}
}

	@Library/src/HTSQLLog.h

32 #i‚de‡
HTSQLLOG_H


33 
	#HTSQLLOG_H


	)

35 
	~"HTReq.h
"

45 
_HTSQLLog
 
	tHTSQLLog
;

47 
	e_HTSQLLogFœgs
 {

48 
	mHTSQLLOG_CLEAR_URIS_TABLE
 = 0x1,

49 
	mHTSQLLOG_CLEAR_LINKS_TABLE
 = 0x2,

50 
	mHTSQLLOG_CLEAR_REQUESTS_TABLE
 = 0x4,

51 
	mHTSQLLOG_CLEAR_RESOURCES_TABLE
 = 0x8,

52 
	mHTSQLLOG_DROP_URIS_TABLE
 = 0x10,

53 
	mHTSQLLOG_DROP_LINKS_TABLE
 = 0x20,

54 
	mHTSQLLOG_DROP_REQUESTS_TABLE
 = 0x40,

55 
	mHTSQLLOG_DROP_RESOURCES_TABLE
 = 0x80

56 } 
	tHTSQLLogFœgs
;

58 
HTSQLLog
 * 
HTSQLLog_›í
 (c⁄° * 
ho°
,

59 c⁄° * 
u£r
,

60 c⁄° * 
pw
,

61 c⁄° * 
db
,

62 
HTSQLLogFœgs
 
Êags
);

72 
BOOL
 
HTSQLLog_˛o£
 (
HTSQLLog
 * 
me
);

83 
BOOL
 
HTSQLLog_addE¡ry
 (
HTSQLLog
 * 
me
, 
HTReque°
 * 
ªque°
, 
°©us
);

91 
BOOL
 
HTSQLLog_addLökRñ©i⁄shù
 (
HTSQLLog
 * 
me
,

92 c⁄° * 
§c_uri
,

93 c⁄° * 
d°_uri
,

94 c⁄° * 
lök_ty≥
,

95 c⁄° * 
commít
);

109 
BOOL
 
HTSQLLog_makeRñ©iveTo
 (
HTSQLLog
 * 
me
, c⁄° * 
ªœtive
);

120 
HTSQLLog_ac˚ssCou¡
 (
HTSQLLog
 * 
me
);

	@Library/src/HTSocket.c

14 
	~"wwwsys.h
"

15 
	~"WWWUtû.h
"

16 
	~"WWWC‹e.h
"

17 
	~"WWWTøns.h
"

18 
	~"HTNëM™.h
"

19 
	~"HTSockë.h
"

21 #i‚de‡
RAW_PORT


22 
	#RAW_PORT
 1024

	)

26 
	e_RAWSèã
 {

27 
	mRAW_ERROR
 = -2,

28 
	mRAW_OK
 = -1,

29 
	mRAW_BEGIN
 = 0,

30 
	mRAW_NEED_STREAM
,

31 
	mRAW_READ


32 } 
	tRawSèã
;

35 
	s_øw_öfo
 {

36 
RawSèã
 
	m°©e
;

37 
HTNë
 * 
	m√t
;

38 
HTReque°
 * 
	mªque°
;

39 } 
	tøw_öfo
;

41 
	s_HTSåóm
 {

42 c⁄° 
HTSåómCœss
 * 
	miß
;

45 
	s_HTI≈utSåóm
 {

46 c⁄° 
HTI≈utSåómCœss
 * 
	miß
;

51 
PRIVATE
 
	$RawCÀ™up
 (
HTReque°
 * 
ªque°
, 
°©us
)

53 
HTNë
 * 
√t
 = 
	`HTReque°_√t
(
ªque°
);

54 
øw_öfo
 * 
øw
 = (øw_öfÿ*Ë
	`HTNë_c⁄ãxt
(
√t
);

56 
	`HTTRACE
(
PROT_TRACE
, "Raw cÀ™... CÆÀd wôh sètu†%d,Çë %p\n" 
_
 
°©us
 _ 
√t
);

58 i‡(
°©us
 =
HT_INTERRUPTED
) {

59 
HTAÀπCÆlback
 * 
cbf
 = 
	`HTAÀπ_föd
(
HT_PROG_INTERRUPT
);

60 i‡(
cbf
Ë(*cbf)(
ªque°
, 
HT_PROG_INTERRUPT
,

61 
HT_MSG_NULL
, 
NULL
, NULL, NULL);

62 } i‡(
°©us
 =
HT_TIMEOUT
) {

63 
HTAÀπCÆlback
 * 
cbf
 = 
	`HTAÀπ_föd
(
HT_PROG_TIMEOUT
);

64 i‡(
cbf
Ë(*cbf)(
ªque°
, 
HT_PROG_TIMEOUT
,

65 
HT_MSG_NULL
, 
NULL
, NULL, NULL);

69 
	`HTNë_dñëe
(
√t
, 
HT_ERROR
);

71 
	`HT_FREE
(
øw
);

72  
YES
;

73 
	}
}

85 
PRIVATE
 
SockëEvít
 (
SOCKET
 
soc
, * 
pVoid
, 
HTEvítTy≥
 
ty≥
);

87 
PUBLIC
 
	$HTLﬂdSockë
 (
SOCKET
 
soc
, 
HTReque°
 * 
ªque°
)

89 
øw_öfo
 * 
øw
;

90 
HTNë
 * 
√t
 = 
	`HTReque°_√t
(
ªque°
);

91 
	`HTTRACE
(
PROT_TRACE
, "Load socket. Setting up socket foráccept\n");

92 i‡((
øw
 = (
øw_öfo
 *Ë
	`HT_CALLOC
(1, ‘aw_öfo))Ë=
NULL
)

93 
	`HT_OUTOFMEM
("HTLoadSocket");

94 
øw
->
°©e
 = 
RAW_BEGIN
;

95 
øw
->
√t
 =Çet;

96 
øw
->
ªque°
 =Ñequest;

97 
	`HTNë_£tC⁄ãxt
(
√t
, 
øw
);

98 
	`HTNë_£tEvítCÆlback
(
√t
, 
SockëEvít
);

99 
	`HTNë_£tEvítP¨am
(
√t
, 
øw
);

102 i‡(
	`HTHo°_li°í
(
NULL
, 
√t
, 
	`HTAnch‹_physiˇl
(
	`HTReque°_™ch‹
(
ªque°
))Ë=
HT_ERROR
)

103  
	`SockëEvít
(
soc
, 
øw
, 
HTEvít_CLOSE
);

106  
	`SockëEvít
(
soc
, 
øw
, 
HTEvít_BEGIN
);

107 
	}
}

109 
PRIVATE
 
	$SockëEvít
 (
SOCKET
 
soc
, * 
pVoid
, 
HTEvítTy≥
 
ty≥
)

111 
øw_öfo
 * 
øw
 = (øw_öfÿ*Ë
pVoid
;

112 
°©us
 = 
HT_ERROR
;

113 
HTNë
 * 
√t
 = 
øw
->net;

114 
HTReque°
 * 
ªque°
 = 
øw
->request;

115 
HTHo°
 * 
ho°
 = 
	`HTNë_ho°
(
√t
);

120 i‡(
ty≥
 =
HTEvít_BEGIN
) {

121 
øw
->
°©e
 = 
RAW_BEGIN
;

122 } i‡(
ty≥
 =
HTEvít_CLOSE
) {

123 
	`RawCÀ™up
(
ªque°
, 
HT_INTERRUPTED
);

124  
HT_OK
;

125 } i‡(
ty≥
 =
HTEvít_TIMEOUT
) {

126 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_TIME_OUT
,

127 
NULL
, 0, "HTLoadSocket");

128 
	`RawCÀ™up
(
ªque°
, 
HT_TIMEOUT
);

129  
HT_OK
;

130 } i‡(
ty≥
 =
HTEvít_END
) {

131 
	`RawCÀ™up
(
ªque°
, 
HT_OK
);

132  
HT_OK
;

137 
øw
->
°©e
) {

138 
RAW_BEGIN
:

139 
°©us
 = 
	`HTHo°_ac˚±
(
ho°
, 
√t
, 
NULL
);

140 
ho°
 = 
	`HTNë_ho°
(
√t
);

141 i‡(
°©us
 =
HT_OK
) {

142 
øw
->
°©e
 = 
RAW_NEED_STREAM
;

143 } i‡(
°©us
 =
HT_WOULD_BLOCK
 || sètu†=
HT_PENDING
) {

144  
HT_OK
;

146 
øw
->
°©e
 = 
RAW_ERROR
;

149 
RAW_NEED_STREAM
:

156 
HTSåóm
 * 
ö_°ªam
 =

157 
	`HTSåómSèck
(
WWW_RAW
,

158 
	`HTReque°_ouçutF‹m©
(
ªque°
),

159 
	`HTReque°_ouçutSåóm
(
ªque°
),

160 
ªque°
, 
YES
);

161 
	`HTNë_£tRódSåóm
(
√t
, 
ö_°ªam
);

162 
	`HTReque°_£tOuçutC⁄√˘ed
(
ªque°
, 
YES
);

164 
øw
->
°©e
 = 
RAW_READ
;

168 
RAW_READ
:

169 
°©us
 = 
	`HTHo°_ªad
(
ho°
, 
√t
);

170 i‡(
°©us
 =
HT_WOULD_BLOCK
)

171  
HT_OK
;

172 i‡(
°©us
==
HT_CLOSED
)

173 
øw
->
°©e
 = 
RAW_OK
;

175 
øw
->
°©e
 = 
RAW_ERROR
;

178 
RAW_OK
:

179 
	`RawCÀ™up
(
ªque°
, 
HT_OK
);

180  
HT_OK
;

183 
RAW_ERROR
:

184 
	`RawCÀ™up
(
ªque°
, 
HT_ERROR
);

185  
HT_OK
;

189 
	`HTDEBUGBREAK
("BadÑaw sèã %d\n" 
_
 
øw
->
°©e
);

192  
HT_OK
;

193 
	}
}

	@Library/src/HTSocket.h

32 #i‚de‡
HTSOCKET_H


33 
	#HTSOCKET_H


	)

35 
	~"HTPrŸ.h
"

37 
HTPrŸCÆlback
 
HTLﬂdSockë
;

	@Library/src/HTStream.c

14 
	~"wwwsys.h
"

15 
	~"HTUtûs.h
"

16 
	~"HTSåóm.h
"

18 
	s_HTSåóm
 {

19 c⁄° 
HTSåómCœss
 * 
	miß
;

22 
PRIVATE
 
HTSåóm
 
	gHTBœckHﬁeSåómIn°™˚
;

23 
PRIVATE
 
HTSåóm
 
	gHTEº‹SåómIn°™˚
;

35 
PRIVATE
 
	$HTBœckHﬁe_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

37  
HT_OK
;

38 
	}
}

40 
PRIVATE
 
	$HTBœckHﬁe_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

42  
HT_OK
;

43 
	}
}

45 
PRIVATE
 
	$HTBœckHﬁe_wrôe
 (
HTSåóm
 * 
me
, c⁄° * 
s
, 
l
)

47  
HT_OK
;

48 
	}
}

50 
PRIVATE
 
	$HTBœckHﬁe_Êush
 (
HTSåóm
 * 
me
)

52  
HT_OK
;

53 
	}
}

55 
PRIVATE
 
	$HTBœckHﬁe_‰ì
 (
HTSåóm
 * 
me
)

57  
HT_OK
;

58 
	}
}

60 
PRIVATE
 
	$HTBœckHﬁe_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

62  
HT_ERROR
;

63 
	}
}

69 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTBœckHﬁeCœss
 =

72 
HTBœckHﬁe_Êush
,

73 
HTBœckHﬁe_‰ì
,

74 
HTBœckHﬁe_ab‹t
,

75 
HTBœckHﬁe_put_ch¨a˘î
,

76 
HTBœckHﬁe_put_°rög
,

77 
HTBœckHﬁe_wrôe


80 
PUBLIC
 
HTSåóm
 * 
	$HTBœckHﬁe
 ()

82 
HTBœckHﬁeSåómIn°™˚
.
iß
 = &
HTBœckHﬁeCœss
;

83  &
HTBœckHﬁeSåómIn°™˚
;

84 
	}
}

92 
PRIVATE
 
	$HTEº‹Såóm_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

94  
HT_ERROR
;

95 
	}
}

97 
PRIVATE
 
	$HTEº‹Såóm_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

99  
HT_ERROR
;

100 
	}
}

102 
PRIVATE
 
	$HTEº‹Såóm_wrôe
 (
HTSåóm
 * 
me
, c⁄° * 
s
, 
l
)

104  
HT_ERROR
;

105 
	}
}

107 
PRIVATE
 
	$HTEº‹Såóm_Êush
 (
HTSåóm
 * 
me
)

109  
HT_ERROR
;

110 
	}
}

112 
PRIVATE
 
	$HTEº‹Såóm_‰ì
 (
HTSåóm
 * 
me
)

114  
HT_OK
;

115 
	}
}

117 
PRIVATE
 
	$HTEº‹Såóm_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

119  
HT_ERROR
;

120 
	}
}

122 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTEº‹SåómCœss
 =

125 
HTEº‹Såóm_Êush
,

126 
HTEº‹Såóm_‰ì
,

127 
HTEº‹Såóm_ab‹t
,

128 
HTEº‹Såóm_put_ch¨a˘î
,

129 
HTEº‹Såóm_put_°rög
,

130 
HTEº‹Såóm_wrôe


133 
PUBLIC
 
HTSåóm
 * 
	$HTEº‹Såóm
 ()

135 
HTEº‹SåómIn°™˚
.
iß
 = &
HTEº‹SåómCœss
;

136  &
HTEº‹SåómIn°™˚
;

137 
	}
}

	@Library/src/HTStream.h

65 #i‚de‡
HTSTREAM_H


66 
	#HTSTREAM_H


	)

68 
	~"HTLi°.h
"

70 
_HTSåóm
 
	tHTSåóm
;

72 
	s_HTSåómCœss
 {

74 * 
	m«me
;

81 (*
	mÊush
Ë(
HTSåóm
 * 
	mme
);

92 (*
	m_‰ì
Ë(
HTSåóm
 * 
	mme
);

102 (*
	mab‹t
Ë(
HTSåóm
 * 
	mme
, 
HTLi°
 * 
	mîr‹li°
);

110 (*
	mput_ch¨a˘î
)(
HTSåóm
 * 
	mme
, 
	mch
);

112 (*
	mput_°rög
Ë(
HTSåóm
 * 
	mme
, c⁄° * 
	m°r
);

114 (*
	mput_block
Ë(
HTSåóm
 * 
	mme
, c⁄° * 
	m°r
, 
	mÀn
);

124 } 
	tHTSåómCœss
;

141 
HTSåóm
 * 
HTBœckHﬁe
 ();

153 
HTSåóm
 * 
HTEº‹Såóm
 ();

	@Library/src/HTString.c

18 
	~"wwwsys.h
"

19 
	~"HTUtûs.h
"

20 
	~"HTSåög.h
"

27 
PUBLIC
 
	$°rˇ£comp
 (c⁄° * 
a
, c⁄° * 
b
)

29 
diff
;

30  ; *
a
 && *
b
;á++, b++) {

31 i‡((
diff
 = 
	`TOLOWER
(*
a
Ë- TOLOWER(*
b
)))

32  
diff
;

34 i‡(*
a
)  1;

35 i‡(*
b
)  -1;

37 
	}
}

43 
PUBLIC
 
	$°∫ˇ£comp
 (c⁄° * 
a
, c⁄° * 
b
, 
n
)

45 c⁄° *
p
 =
a
;

46 c⁄° *
q
 =
b
;

48 
p
=
a
, 
q
=
b
;;Ö++, q++) {

49 
diff
;

50 i‡(
p
 =
a
+
n
)  0;

51 i‡(!(*
p
 && *
q
))  *p - *q;

52 
diff
 = 
	`TOLOWER
(*
p
Ë- TOLOWER(*
q
);

53 i‡(
diff
)  diff;

56 
	}
}

62 
PUBLIC
 * 
	$HTSåCa£Så
 (* 
s1
, * 
s2
)

64 * 
±r
 = 
s1
;

66 i‡(!
s1
 || !
s2
 || !*s2)  s1;

68 *
±r
) {

69 i‡(
	`TOUPPER
(*
±r
Ë=TOUPPER(*
s2
)) {

70 * 
cur1
 = 
±r
 + 1;

71 * 
cur2
 = 
s2
 + 1;

72 *
cur1
 && *
cur2
 && 
	`TOUPPER
(*cur1) == TOUPPER(*cur2)) {

73 
cur1
++;

74 
cur2
++;

76 i‡(!*
cur2
Ë 
±r
;

78 
±r
++;

80  
NULL
;

81 
	}
}

87 
PUBLIC
 
	$èûcomp
(c⁄° * 
s1
, c⁄° * 
s2
)

89 
l1
 = 
	`°æí
(
s1
);

90 
l2
 = 
	`°æí
(
s2
);

92 i‡(
l1
 < 
l2
)

93 
s2
 +(
l2
 - 
l1
);

95  
	`°rcmp
(
s1
, 
s2
);

96 
	}
}

98 
PUBLIC
 
	$èûˇ£comp
(c⁄° * 
s1
, c⁄° * 
s2
)

100 
l1
 = 
	`°æí
(
s1
);

101 
l2
 = 
	`°æí
(
s2
);

103 i‡(
l1
 < 
l2
)

104 
s2
 +(
l2
 - 
l1
);

106  
	`°rˇ£comp
(
s1
, 
s2
);

107 
	}
}

111 
PUBLIC
 * 
	$HTSAC›y
 (** 
de°
, c⁄° * 
§c
)

113 i‡(*
de°
Ë
	`HT_FREE
(*dest);

114 i‡(! 
§c
)

115 *
de°
 = 
NULL
;

117 i‡((*
de°
 = (*Ë
	`HT_MALLOC
(
	`°æí
(
§c
Ë+ 1)Ë=
NULL
)

118 
	`HT_OUTOFMEM
("HTSACopy");

119 
	`°r˝y
 (*
de°
, 
§c
);

121  *
de°
;

122 
	}
}

126 
PUBLIC
 * 
	$HTSAC©
 (** 
de°
, c⁄° * 
§c
)

128 i‡(
§c
 && *src) {

129 i‡(*
de°
) {

130 
Àngth
 = 
	`°æí
 (*
de°
);

131 i‡((*
de°
 = (*Ë
	`HT_REALLOC
(*de°, 
Àngth
 + 
	`°æí
(
§c
Ë+ 1)Ë=
NULL
)

132 
	`HT_OUTOFMEM
("HTSACat");

133 
	`°r˝y
 (*
de°
 + 
Àngth
, 
§c
);

135 i‡((*
de°
 = (*Ë
	`HT_MALLOC
(
	`°æí
(
§c
Ë+ 1)Ë=
NULL
)

136 
	`HT_OUTOFMEM
("HTSACat");

137 
	`°r˝y
 (*
de°
, 
§c
);

140  *
de°
;

141 
	}
}

143 
PUBLIC
 * 
	$SåAŒocMC›y
 (** 
de°
, ...)

145 
va_li°
 
pArgs
;

146 * 
p
, * 
¨gp
;

149 
√eded
 = 0;

150 
	`va_°¨t
(
pArgs
, 
de°
);

151 (
p
 = 
	`va_¨g
(
pArgs
, *)Ë!
NULL
)

152 
√eded
 +
	`°æí
(
p
);

153 
	`va_íd
(
pArgs
);

155 i‡(*
de°
Ë
	`HT_FREE
(*dest);

156 i‡(
√eded
) {

159 i‡((*
de°
 = (*Ë
	`HT_MALLOC
(
√eded
 + 1)Ë=
NULL
)

160 
	`HT_OUTOFMEM
("HTStrCpy");

161 
p
 = *
de°
;

164 
	`va_°¨t
(
pArgs
, 
de°
);

165 (
¨gp
 = 
	`va_¨g
 (
pArgs
, *)Ë!
NULL
) {

166 
	`°r˝y
(
p
, 
¨gp
);

167 
p
 +
	`°æí
(
¨gp
);

169 
	`va_íd
 (
pArgs
);

171  *
de°
;

172 
	}
}

174 
PUBLIC
 * 
	$SåAŒocMC©
 (** 
de°
, ...)

176 
va_li°
 
pArgs
;

177 * 
p
, * 
¨gp
;

180 
√eded
 = 0;

181 
	`va_°¨t
(
pArgs
, 
de°
);

182 (
p
 = 
	`va_¨g
(
pArgs
, *)Ë!
NULL
)

183 
√eded
 +
	`°æí
(
p
);

184 
	`va_íd
(
pArgs
);

186 i‡(
√eded
) {

189 i‡(*
de°
) {

190 
de°_Àn
 = 
	`°æí
(*
de°
);

191 i‡((*
de°
 = (*Ë
	`HT_REALLOC
(*de°, 
de°_Àn
 + 
√eded
 + 1)Ë=
NULL
)

192 
	`HT_OUTOFMEM
("HTStrCat");

193 
p
 = *
de°
 + 
de°_Àn
;

195 i‡((*
de°
 = (*Ë
	`HT_MALLOC
(
√eded
 + 1)Ë=
NULL
)

196 
	`HT_OUTOFMEM
("HTStrCat");

197 
p
 = *
de°
;

201 
	`va_°¨t
(
pArgs
, 
de°
);

202 (
¨gp
 = 
	`va_¨g
 (
pArgs
, *)Ë!
NULL
) {

203 
	`°r˝y
(
p
, 
¨gp
);

204 
p
 +
	`°æí
(
¨gp
);

206 
	`va_íd
 (
pArgs
);

208  *
de°
;

209 
	}
}

225 
PUBLIC
 * 
	$HTSåM©ch
 (c⁄° * 
tm∂
, c⁄° * 
«me
)

227 *
tm∂
 && *
«me
 && *tmpl==*name)Åmpl++,Çame++;

228  ((!*
tm∂
 && !*
«me
Ë|| *tm∂=='*'Ë? (*Ë«mê: (*Ë
NULL
;

229 
	}
}

231 
PUBLIC
 * 
	$HTSåCa£M©ch
 (c⁄° * 
tm∂
, c⁄° * 
«me
)

233 *
tm∂
 && *
«me
 && 
	`TOUPPER
(*tmpl)==TOUPPER(*name))Åmpl++,Çame++;

234  ((!*
tm∂
 && !*
«me
Ë|| *tm∂=='*'Ë? (*Ë«mê: (*Ë
NULL
;

235 
	}
}

242 
PUBLIC
 * 
	$HTSåù
 (* 
s
)

244 i‡(
s
) {

245 * 
p
=
s
;

246 
p
=
s
;*p;p++);

247 
p
--;p>=
s
;p--) {

248 i‡(
	`is•a˚
((Ë*
p
))

249 *
p
=0;

253 
	`is•a˚
((Ë*
s
)) s++;

255  
s
;

256 
	}
}

	@Library/src/HTString.h

27 #i‚de‡
HTSTRING_H


28 
	#HTSTRING_H


	)

44 
	#SåAŒocC›y
(
de°
, 
§c
Ë
	`HTSAC›y
 (&(de°), src)

	)

45 
	#SåAŒocC©
(
de°
, 
§c
Ë
	`HTSAC©
 (&(de°), src)

	)

47 * 
HTSAC›y
 (**
de°
, c⁄° *
§c
);

48 * 
HTSAC©
 (**
de°
, c⁄° *
§c
);

58 * 
SåAŒocMC›y
 (** 
de°
, ...);

59 * 
SåAŒocMC©
 (** 
de°
, ...);

72 
°rˇ£comp
 (c⁄° *
a
, c⁄° *
b
);

73 
°∫ˇ£comp
 (c⁄° *
a
, c⁄° *
b
, 
n
);

83 
èûcomp
(c⁄° * 
s1
, c⁄° * 
s2
);

84 
èûˇ£comp
(c⁄° * 
s1
, c⁄° * 
s2
);

110 * 
HTSåM©ch
 (c⁄° * 
tm∂
, c⁄° * 
«me
);

111 * 
HTSåCa£M©ch
 (c⁄° * 
tm∂
, c⁄° * 
«me
);

121 * 
HTSåCa£Så
 (* 
s1
, * 
s2
);

132 * 
HTSåù
 (* 
s
);

	@Library/src/HTStruct.h

35 #i‚de‡
HTSTRUCT_H


36 
	#HTSTRUCT_H


	)

38 
	~"HTSåóm.h
"

39 
	~"HTLi°.h
"

44 
_HTSåu˘uªd
 
	tHTSåu˘uªd
;

46 
	s_HTSåu˘uªdCœss
 {

48 * 
	m«me
;

50 (*
	mÊush
Ë(
HTSåu˘uªd
 * 
	mme
);

52 (*
	m_‰ì
Ë(
HTSåu˘uªd
 * 
	mme
);

54 (*
	mab‹t
Ë(
HTSåu˘uªd
 * 
	mme
, 
HTLi°
 * 
	mîr‹li°
);

56 (*
	mput_ch¨a˘î
)(
HTSåu˘uªd
 * 
	mme
, 
	mch
);

58 (*
	mput_°rög
Ë(
HTSåu˘uªd
 * 
	mme
, c⁄° * 
	m°r
);

60 (*
	mput_block
Ë(
HTSåu˘uªd
 * 
	mme
, c⁄° * 
	m°r
, 
	mÀn
);

70 (*
	m°¨t_ñemít
)(
HTSåu˘uªd
 *
	mme
,

71 
	mñemít_numbî
,

72 c⁄° 
BOOL
 * 
	m©åibuã_¥e£¡
,

73 c⁄° ** 
	m©åibuã_vÆue
);

75 (*
	míd_ñemít
Ë(
HTSåu˘uªd
 * 
	mme
, 
	mñemít_numbî
);

77 (*
	mput_ítôy
Ë(
HTSåu˘uªd
 * 
	mme
, 
	mítôy_numbî
);

79 (*
	mu≈¨£d_begö_ñemít
)(
HTSåu˘uªd
 * 
	mme
, c⁄° * 
	m°r
, 
	mÀn
);

81 (*
	mu≈¨£d_íd_ñemít
)(
HTSåu˘uªd
 * 
	mme
, c⁄° * 
	m°r
, 
	mÀn
);

83 (*
	mu≈¨£d_ítôy
)(
HTSåu˘uªd
 * 
	mme
, c⁄° * 
	m°r
, 
	mÀn
);

85 } 
	tHTSåu˘uªdCœss
;

	@Library/src/HTStyle.c

17 
	~"wwwsys.h
"

18 
	~"WWWUtû.h
"

19 
	~"HTStyÀ.h
"

21 
	s_HTStyÀ
 {

22 * 
	m«me
;

23 
	mñemít
;

24 * 
	mc⁄ãxt
;

27 
	s_HTStyÀShìt
 {

28 * 
	m«me
;

29 
HTLi°
 * 
	m°yÀs
;

36 
PUBLIC
 
HTStyÀ
 * 
	$HTStyÀ_√w
 (c⁄° * 
«me
, 
ñemít
, * 
c⁄ãxt
)

38 
HTStyÀ
 * 
°yÀ
 = 
NULL
;

39 i‡((
°yÀ
 = (
HTStyÀ
 *Ë
	`HT_CALLOC
(1, (HTStyÀ))Ë=
NULL
)

40 
	`HT_OUTOFMEM
("HTStyleNew");

41 
	`SåAŒocC›y
(
°yÀ
->
«me
,Çame ?Çame : "unknown");

42 
°yÀ
->
ñemít
 =Élement;

43 
°yÀ
->
c⁄ãxt
 = context;

44  
°yÀ
;

45 
	}
}

47 
PUBLIC
 
BOOL
 
	$HTStyÀ_dñëe
 (
HTStyÀ
 * 
me
)

49 i‡(
me
) {

50 
	`HT_FREE
(
me
->
«me
);

51 
	`HT_FREE
(
me
);

52  
YES
;

54  
NO
;

55 
	}
}

61 
PUBLIC
 
HTStyÀShìt
 * 
	$HTStyÀShìt_√w
 (c⁄° * 
«me
)

63 
HTStyÀShìt
 * 
ss
;

64 i‡((
ss
 = (
HTStyÀShìt
 *Ë
	`HT_CALLOC
(1, (HTStyÀShìt))Ë=
NULL
)

65 
	`HT_OUTOFMEM
("HTStyleSheet_new");

66 
	`SåAŒocC›y
(
ss
->
«me
,Çame ?Çame : "unknown");

67 
ss
->
°yÀs
 = 
	`HTLi°_√w
();

68  
ss
;

69 
	}
}

71 
PUBLIC
 
BOOL
 
	$HTStyÀShìt_dñëe
 (
HTStyÀShìt
 * 
me
)

73 i‡(
me
) {

74 
HTLi°
 * 
cur
 = 
me
->
°yÀs
;

75 
HTStyÀ
 * 
¥es
;

76 (
¥es
 = (
HTStyÀ
 *Ë
	`HTLi°_√xtObje˘
(
cur
)))

77 
	`HTStyÀ_dñëe
(
¥es
);

78 
	`HTLi°_dñëe
(
me
->
°yÀs
);

79 
	`HT_FREE
(
me
);

80  
YES
;

82  
NO
;

83 
	}
}

85 
PUBLIC
 
BOOL
 
	$HTStyÀShìt_addStyÀ
 (
HTStyÀShìt
 * 
me
, 
HTStyÀ
 * 
°yÀ
)

87  (
me
 && 
°yÀ
Ë? 
	`HTLi°_addObje˘
(me->
°yÀs
, styÀË: 
NO
;

88 
	}
}

90 
PUBLIC
 
BOOL
 
	$HTStyÀShìt_dñëeStyÀ
 (
HTStyÀShìt
 * 
me
, 
HTStyÀ
 * 
°yÀ
)

92 i‡(
me
 && 
°yÀ
) {

93 
	`HTLi°_ªmoveObje˘
(
me
->
°yÀs
, 
°yÀ
);

94 
	`HTStyÀ_dñëe
(
°yÀ
);

95  
YES
;

97  
NO
;

98 
	}
}

100 
PUBLIC
 
HTStyÀ
 * 
	$HTStyÀShìt_födStyÀWôhName
 (
HTStyÀShìt
 * 
me
, c⁄° * 
«me
)

102 i‡(
me
 && 
«me
) {

103 
HTLi°
 * 
cur
 = 
me
->
°yÀs
;

104 
HTStyÀ
 * 
¥es
;

105 (
¥es
 = (
HTStyÀ
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

106 i‡(!
	`°rˇ£comp
(
¥es
->
«me
,Çame)) Öres;

108 
	`HTTRACE
(
SGML_TRACE
, "StyÀShìt.. Nÿ°yÀÇamed `%s' i¿°yÀshìà`%s'\n" 
_


109 
«me
 
_
 
me
->name);

111  
NULL
;

112 
	}
}

114 
PUBLIC
 
HTStyÀ
 * 
	$HTStyÀShìt_födStyÀF‹EÀmít
 (
HTStyÀShìt
 * 
me
, 
ñemít
)

116 i‡(
me
) {

117 
HTLi°
 * 
cur
 = 
me
->
°yÀs
;

118 
HTStyÀ
 * 
¥es
;

119 (
¥es
 = (
HTStyÀ
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

120 i‡(
¥es
->
ñemít
==element) Öres;

122 
	`HTTRACE
(
SGML_TRACE
, "StyÀShìt.. Nÿ°yÀ f‹ÉÀmíà%d i¿°yÀshìà`%s'\n" 
_


123 
ñemít
 
_
 
me
->
«me
);

125  
NULL
;

126 
	}
}

	@Library/src/HTStyle.h

36 #i‚de‡
HTSTYLE_H


37 
	#HTSTYLE_H


	)

48 
_HTStyÀShìt
 
	tHTStyÀShìt
;

50 
HTStyÀShìt
 * 
HTStyÀShìt_√w
 (c⁄° * 
«me
);

51 
BOOL
 
HTStyÀShìt_dñëe
 (
HTStyÀShìt
 * 
me
);

59 
_HTStyÀ
 
	tHTStyÀ
;

61 
HTStyÀ
 * 
HTStyÀ_√w
 (c⁄° * 
«me
, 
ñemít
, * 
c⁄ãxt
);

62 
BOOL
 
HTStyÀ_dñëe
 (
HTStyÀ
 * 
me
);

70 
BOOL
 
HTStyÀShìt_addStyÀ
 (
HTStyÀShìt
 * 
me
, 
HTStyÀ
 * 
°yÀ
);

71 
BOOL
 
HTStyÀShìt_dñëeStyÀ
 (
HTStyÀShìt
 * 
me
, 
HTStyÀ
 * 
°yÀ
);

79 
HTStyÀ
 * 
HTStyÀShìt_födStyÀWôhName
 (
HTStyÀShìt
 * 
me
, c⁄° * 
«me
);

80 
HTStyÀ
 * 
HTStyÀShìt_födStyÀF‹EÀmít
 (
HTStyÀShìt
 * 
me
, 
ñemít
);

	@Library/src/HTTCP.c

20 
	~"wwwsys.h
"

21 
	~"WWWUtû.h
"

22 
	~"WWWC‹e.h
"

23 
	~"HTReqM™.h
"

24 
	~"HTNëM™.h
"

25 
	~"HTTCP.h
"

27 
	~"HTH°M™.h
"

30 #ifde‡
VMS


31 #i‚de‡
MULTINET


32 
	#FD_SETSIZE
 32

	)

34 
	#FD_SETSIZE
 256

	)

40 
	#TCP_DELAY
 30000

	)

43 
	#TCP_PENALTY
 60000

	)

54 #ifde‡
_WINSOCKAPI_


55 
	#NETCALL_ERROR
(
ªt
Ë‘ë =
SOCKET_ERROR
)

	)

56 
	#NETCALL_DEADSOCKET
(
îr
Ë”º =
WSAEBADF
)

	)

57 
	#NETCALL_WOULDBLOCK
(
îr
Ë”º =
WSAEWOULDBLOCK
)

	)

58 
	#NETCALL_INVAL
(
îr
Ë”º =
WSAEINVAL
)

	)

60 
	#NETCALL_ERROR
(
ªt
Ë‘ë < 0)

	)

61 
	#NETCALL_DEADSOCKET
(
îr
Ë”º =
EBADF
)

	)

62 #i‡
deföed
(
EAGAIN
Ë&& deföed(
EALREADY
)

63 
	#NETCALL_WOULDBLOCK
(
îr
Ë”º =
EINPROGRESS
 || \

64 
îr
 =
EALREADY
 || \

65 
îr
 =
EAGAIN
)

	)

67 #ifde‡
EALREADY


68 
	#NETCALL_WOULDBLOCK
(
îr
Ë”º =
EINPROGRESS
 ||Éº =
EALREADY
)

	)

70 #ifde‡
EAGAIN


71 
	#NETCALL_WOULDBLOCK
(
îr
Ë”º =
EINPROGRESS
 ||Éº =
EAGAIN
)

	)

73 
	#NETCALL_WOULDBLOCK
(
îr
Ë”º =
EINPROGRESS
)

	)

79 #i‡
deföed
(
__svr4__
Ë|| deföed (
_WINSOCKAPI_
)

80 
	#HT_HOSTUNREACHABLE
(
e
Ë(”)==
ECONNREFUSED
 || (e)==
ETIMEDOUT
 || \

81 (
e
)==
ENETUNREACH
 || (e)==
EHOSTUNREACH
 || \

82 (
e
)==
EHOSTDOWN
)

	)

84 
	#HT_HOSTUNREACHABLE
(
e
Ë(”)==
ECONNREFUSED
 || (e)==
ETIMEDOUT
 || \

85 (
e
)==
ENETUNREACH
 || (e)==
EHOSTUNREACH
 || \

86 (
e
)==
EHOSTDOWN
 || (e)==
EINVAL
)

	)

96 
PRIVATE
 
	$_makeSockë
 (
HTHo°
 * 
ho°
, 
HTReque°
 * 
ªque°
, 
¥ìm±ive
)

98 
°©us
 = 1;

99 
SOCKET
 
sockfd
 = 
INVSOC
;

100 #ifde‡
DECNET


101 i‡((
sockfd
=
	`sockë
(
AF_DEC√t
, 
SOCK_STREAM
, 0))==
INVSOC
)

103 i‡((
sockfd
=
	`sockë
(
AF_INET
, 
SOCK_STREAM
,
IPPROTO_TCP
))==
INVSOC
)

106 
	`HTReque°_addSy°emEº‹
(
ªque°
, 
ERR_FATAL
, 
so˚ºno
, 
NO
, "socket");

107  
INVSOC
;

109 
	`HTTRACE
(
PROT_TRACE
, "Sockë...... Cª©ed %d\n" 
_
 
sockfd
);

112 
	`HTNë_ö¸ó£Sockë
();

118 #i‡
	`deföed
(
HT_NO_NAGLE
Ë&& deföed(
HAVE_SETSOCKOPT
Ë&& deföed(
TCP_NODELAY
)

120 
dißbÀ
 = 1;

121 
°©us
 = 
	`£tsock›t
(
sockfd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

122 (*Ë&
dißbÀ
, ());

123 i‡(
°©us
 == -1) {

124 
	`HTTRACE
(
PROT_TRACE
, "Sockë...... CouldÇŸ dißbÀ NagÀ'†Æg‹ôhm -Éº‹ %d\n" 
_


125 
sockfd
);

127 
	`HTTRACE
(
PROT_TRACE
, "Socket...... Turned off Nagle'sálgorithm\n");

139 i‡(!
¥ìm±ive
) {

140 #ifde‡
_WINSOCKAPI_


142 
Àvíts
 = 
FD_READ
 | 
FD_WRITE
 | 
FD_ACCEPT
 |

143 
FD_CONNECT
 | 
FD_CLOSE
 ;

144 
rv
 = 0 ;

145 
u_l⁄g
 
⁄e
 = 1;

147 
°©us
 = 
	`io˘lsockë
(
sockfd
, 
FIONBIO
, &
⁄e
) ==

148 
SOCKET_ERROR
 ? -1 : 0;

151 #i‡
	`deföed
(
VMS
)

153 
íabÀ
 = 1;

154 
°©us
 = 
	`IOCTL
(
sockfd
, 
FIONBIO
, &
íabÀ
);

157 if((
°©us
 = 
	`f˙é
(
sockfd
, 
F_GETFL
, 0)) != -1) {

158 #ifde‡
O_NONBLOCK


159 
°©us
 |
O_NONBLOCK
;

161 #ifde‡
F_NDELAY


162 
°©us
 |
F_NDELAY
;

165 
°©us
 = 
	`f˙é
(
sockfd
, 
F_SETFL
, status);

169 
	`HTTRACE
(
PROT_TRACE
, "Sockë...... %¶ockög sockë\n" 
_
 
°©us
 == -1 ? "B" : "Non-b");

171 
	`HTTRACE
(
PROT_TRACE
, "Socket...... Blocking socket\n");

173  
sockfd
;

174 
	}
}

180 
PRIVATE
 
BOOL
 
	$¸óãCh™√lAndTøn•‹tSåóms
 (
HTHo°
 * 
ho°
, 
SOCKET
 
sockfd
, 
HTTøn•‹t
 * 
å™s
)

182 i‡(
ho°
 && 
sockfd
!=
INVSOC
 && 
å™s
) {

183 
	`HTHo°_£tCh™√l
(
ho°
, 
	`HTCh™√l_√w
(
sockfd
, 
NULL
, 
YES
));

184 
	`HTHo°_gëI≈ut
(
ho°
, 
å™s
, 
NULL
, 0);

185 
	`HTHo°_gëOuçut
(
ho°
, 
å™s
, 
NULL
, 0);

186  
YES
;

188  
NO
;

189 
	}
}

200 
PUBLIC
 
	$HTDoC⁄√˘
 (
HTNë
 * 
√t
)

202 
HTHo°
 * 
ho°
 = 
	`HTNë_ho°
(
√t
);

203 
HTReque°
 * 
ªque°
 = 
	`HTNë_ªque°
(
√t
);

204 * 
ho°«me
 = 
	`HTHo°_«me
(
ho°
);

205 
¥ìm±ive
 = 
√t
->preemptive;

206 
°©us
 = 
HT_OK
;

210 
ho°
->
t˝°©e
) {

211 
TCP_BEGIN
:

218 i‡((
°©us
 = 
	`HTHo°_addNë
(
ho°
, 
√t
)Ë=
HT_PENDING
)

219 
	`HTTRACE
(
PROT_TRACE
, "HTDoConnect. Pending...\n");

225 
ho°
->
t˝°©e
 = 
TCP_CHANNEL
;

226 
	`HTTRACE
(
PROT_TRACE
, "HTHo° %∞goögÅÿ°©êTCP_CHANNEL.\n" 
_
 
ho°
);

227 i‡(
°©us
 =
HT_PENDING
)  HT_PENDING;

231 
TCP_CHANNEL
:

238 i‡(
	`HTHo°_ch™√l
(
ho°
Ë=
NULL
) {

239 
ho°
->
t˝°©e
 = 
TCP_DNS
;

240 
	`HTTRACE
(
PROT_TRACE
, "HTHo° %∞goögÅÿ°©êTCP_DNS.\n" 
_
 
ho°
);

246 
	`HTCh™√l_upSem≠h‹e
(
ho°
->
ch™√l
);

251 
ho°
->
t˝°©e
 = 
TCP_CONNECTED
;

252 
	`HTTRACE
(
PROT_TRACE
, "HTHo° %∞goögÅÿ°©êTCP_CONNECTED.\n" 
_
 
ho°
);

254 
ho°«me
 = 
	`HTHo°_«me
(
ho°
);

257 
TCP_DNS
:

258 i‡((
°©us
 = 
	`HTP¨£I√t
(
ho°
, 
ho°«me
, 
ªque°
)) < 0) {

259 
	`HTTRACE
(
PROT_TRACE
, "HTDoC⁄√˘. C™'àloˇã `%s\'\n" 
_
 
ho°«me
);

260 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
,

261 
HTERR_NO_REMOTE_HOST
,

262 (*Ë
ho°«me
, 
	`°æí
(hostname),

264 
ho°
->
t˝°©e
 = 
TCP_DNS_ERROR
;

265 
	`HTTRACE
(
PROT_TRACE
, "HTHo° %∞goögÅÿ°©êTCP_ERROR.\n" 
_
 
ho°
);

268 i‡(!
	`HTHo°_ªåy
(
ho°
Ë&& 
°©us
 > 1)

269 
	`HTHo°_£tRëry
(
ho°
, 
°©us
);

270 
ho°
->
t˝°©e
 = 
TCP_NEED_SOCKET
;

271 
	`HTTRACE
(
PROT_TRACE
, "HTHo° %∞goögÅÿ°©êTCP_NEED_SOCKET.\n" 
_
 
ho°
);

274 
TCP_NEED_SOCKET
:

276 
SOCKET
 
sockfd
;

279 i‡((
sockfd
 = 
	`_makeSockë
(
ho°
, 
ªque°
, 
¥ìm±ive
)Ë=
INVSOC
) {

280 
ho°
->
t˝°©e
 = 
TCP_ERROR
;

285 
	`¸óãCh™√lAndTøn•‹tSåóms
 (
ho°
, 
sockfd
, 
√t
->
å™•‹t
);

288 i‡(
	`HTHo°_ªåy
(
ho°
)Ëho°->
c⁄√˘time
 = 
	`HTGëTimeInMûlis
();

292 
HTAÀπCÆlback
 *
cbf
 = 
	`HTAÀπ_föd
(
HT_PROG_CONNECT
);

293 i‡(
cbf
Ë(*cbf)(
ªque°
, 
HT_PROG_CONNECT
, 
HT_MSG_NULL
,

294 
NULL
, 
ho°«me
, NULL);

296 
ho°
->
t˝°©e
 = 
TCP_NEED_CONNECT
;

297 
	`HTTRACE
(
PROT_TRACE
, "HTHo° %∞goögÅÿ°©êTCP_NEED_CONNECT.\n" 
_
 
ho°
);

301 
TCP_NEED_CONNECT
:

302 #ifde‡
_WINSOCKAPI_


318 
	`HTHo°_ªgi°î
(
ho°
, 
√t
, 
HTEvít_CONNECT
);

320 
°©us
 = 
	`c⁄√˘
(
	`HTCh™√l_sockë
(
ho°
->
ch™√l
), (
sockaddr
 *Ë&ho°->
sock_addr
,

321 (
ho°
->
sock_addr
));

340 i‡(
	`NETCALL_ERROR
(
°©us
))

342 i‡(
	`NETCALL_WOULDBLOCK
(
so˚ºno
))

344 
	`HTTRACE
(
PROT_TRACE
, "HTDoC⁄√˘. WOULD BLOCK `%s'\n" 
_
 
ho°«me
);

345 #i‚de‡
_WINSOCKAPI_


347 
	`HTHo°_ªgi°î
(
ho°
, 
√t
, 
HTEvít_CONNECT
);

349  
HT_WOULD_BLOCK
;

351 #ifde‡
_WINSOCKAPI_


363 i‡(
	`NETCALL_INVAL
(
so˚ºno
)) {

364 
ho°
->
t˝°©e
 = 
TCP_CONNECTED
;

365 
	`HTTRACE
(
PROT_TRACE
, "C⁄√˘i⁄ÅÿHTHo° %∞i†Æªady i¿¥ogªss.\n" 
_
 
ho°
);

370 i‡(
so˚ºno
 =
EISCONN
) {

371 
ho°
->
t˝°©e
 = 
TCP_CONNECTED
;

372 
	`HTTRACE
(
PROT_TRACE
, "HTHo° %∞goögÅÿ°©êTCP_CONNECTED.\n" 
_
 
ho°
);

375 i‡(
	`NETCALL_DEADSOCKET
(
so˚ºno
))

377 
ho°
->
t˝°©e
 = 
TCP_NEED_SOCKET
;

378 
	`HTTRACE
(
PROT_TRACE
, "HTHo° %∞goögÅÿ°©êTCP_NEED_SOCKET.\n" 
_
 
ho°
);

381 i‡(
	`HTHo°_ªåy
(
ho°
)) {

382 
ho°
->
c⁄√˘time
 = 
	`HTGëTimeInMûlis
() - host->connecttime;

386 i‡(
	`HT_HOSTUNREACHABLE
(
so˚ºno
))

387 
ho°
->
c⁄√˘time
 +
TCP_DELAY
;

389 
ho°
->
c⁄√˘time
 +
TCP_PENALTY
;

390 
	`HTDNS_upd©eWeigths
(
ho°
->
dns
, 
	`HTHo°_home
(ho°), ho°->
c⁄√˘time
);

392 
ho°
->
t˝°©e
 = 
TCP_ERROR
;

393 
	`HTTRACE
(
PROT_TRACE
, "HTHo° %∞goögÅÿ°©êTCP_ERROR.\n" 
_
 
ho°
);

395 
ho°
->
t˝°©e
 = 
TCP_CONNECTED
;

396 
	`HTTRACE
(
PROT_TRACE
, "HTHo° %∞goögÅÿ°©êTCP_CONNECTED.\n" 
_
 
ho°
);

400 
TCP_CONNECTED
:

401 
	`HTHo°_uƒegi°î
(
ho°
, 
√t
, 
HTEvít_CONNECT
);

402 i‡(
	`HTHo°_ªåy
(
ho°
)) {

403 
ho°
->
c⁄√˘time
 = 
	`HTGëTimeInMûlis
() - host->connecttime;

404 
	`HTDNS_upd©eWeigths
(
ho°
->
dns
, 
	`HTHo°_home
(ho°), ho°->
c⁄√˘time
);

406 
	`HTHo°_£tRëry
(
ho°
, 0);

407 
ho°
->
t˝°©e
 = 
TCP_IN_USE
;

408 
	`HTTRACE
(
PROT_TRACE
, "HTHo° %∞c⁄√˘ed.\n" 
_
 
ho°
);

409  
HT_OK
;

413 
TCP_IN_USE
:

414 i‡((
°©us
 = 
	`HTHo°_addNë
(
ho°
, 
√t
)Ë=
HT_PENDING
) {

415 
	`HTTRACE
(
PROT_TRACE
, "HTDoConnect. Pending...\n");

416  
HT_PENDING
;

419 
	`HTCh™√l_upSem≠h‹e
(
ho°
->
ch™√l
);

420  
HT_OK
;

422 
TCP_DNS_ERROR
:

423 
	`HTHo°_£tRëry
(
ho°
, 0);

424 
ho°
->
t˝°©e
 = 
TCP_BEGIN
;

425 
	`HTTRACE
(
PROT_TRACE
, "HTHo° %∞goögÅÿ°©êTCP_BEGIN.\n" 
_
 
ho°
);

426  
HT_NO_HOST
;

429 
TCP_NEED_BIND
:

430 
TCP_NEED_LISTEN
:

431 
TCP_ERROR
:

432 i‡(
	`HTCh™√l_sockë
(
ho°
->
ch™√l
Ë!
INVSOC
) {

433 
	`NETCLOSE
(
	`HTCh™√l_sockë
(
ho°
->
ch™√l
));

434 i‡(
	`HTHo°_isPîsi°ít
(
ho°
)) {

435 
	`HTHo°_£tPîsi°ít
(
ho°
, 
NO
, 
HT_TP_SINGLE
);

436 
ho°
->
t˝°©e
 = 
TCP_NEED_SOCKET
;

437 
	`HTTRACE
(
PROT_TRACE
, "HTHo° %∞goögÅÿ°©êTCP_NEED_SOCKET.\n" 
_
 
ho°
);

443 
	`HTHo°_de¸ó£Rëry
(
ho°
);

444 i‡(
	`HT_HOSTUNREACHABLE
(
so˚ºno
Ë&& 
	`HTHo°_ªåy
(
ho°
) > 0) {

445 
	`HTReque°_addSy°emEº‹
(
ªque°
, 
ERR_NON_FATAL
, 
so˚ºno
, 
NO
,"connect");

446 
ho°
->
t˝°©e
 = 
TCP_DNS
;

447 
	`HTTRACE
(
PROT_TRACE
, "HTHo° %∞goögÅÿ°©êTCP_DNS.\n" 
_
 
ho°
);

450 
	`HTReque°_addSy°emEº‹
(
ªque°
, 
ERR_FATAL
, 
so˚ºno
, 
NO
, "connect");

451 
	`HTDNS_dñëe
(
ho°«me
);

452 
	`HTHo°_£tRëry
(
ho°
, 0);

453 
ho°
->
t˝°©e
 = 
TCP_BEGIN
;

454 
	`HTTRACE
(
PROT_TRACE
, "HTHo° %∞goögÅÿ°©êTCP_BEGIN.\n" 
_
 
ho°
);

455  
HT_ERROR
;

459 
	}
}

470 
PUBLIC
 
	$HTDoAc˚±
 (
HTNë
 * 
li°íög
, HTNë * 
ac˚±ög
)

472 
HTHo°
 * 
ho°
 = 
	`HTNë_ho°
(
li°íög
);

473 
HTReque°
 * 
ªque°
 = 
	`HTNë_ªque°
(
ac˚±ög
);

474 
size
 = (
ho°
->
sock_addr
);

475 
°©us
;

476 i‡(!
ªque°
 || 
	`HTNë_sockë
(
li°íög
)==
INVSOC
) {

477 
	`HTTRACE
(
PROT_TRACE
, "HTDoAccept.. Invalid socket\n");

478  
HT_ERROR
;

481 
°©us
 = 
	`ac˚±
(
	`HTNë_sockë
(
li°íög
), (
sockaddr
 *Ë&
ho°
->
sock_addr
, &
size
);

482 i‡(
	`NETCALL_ERROR
(
°©us
))

484 i‡(
	`NETCALL_WOULDBLOCK
(
so˚ºno
))

486 
	`HTTRACE
(
PROT_TRACE
, "HTDoAc˚±.. WOULD BLOCK %d\n" 
_
 
	`HTNë_sockë
(
li°íög
));

487 
	`HTHo°_ªgi°î
(
ho°
, 
li°íög
, 
HTEvít_ACCEPT
);

488  
HT_WOULD_BLOCK
;

490 
	`HTReque°_addSy°emEº‹
(
ªque°
, 
ERR_WARN
, 
so˚ºno
, 
YES
, "accept");

491 
	`HTTRACE
(
PROT_TRACE
, "HTDoAccept.. Accept failed\n");

492  
HT_ERROR
;

495 
	`HTTRACE
(
PROT_TRACE
, "Ac˚±ed.... sockë %d\n" 
_
 
°©us
);

498 
	`NETCLOSE
(
	`HTNë_sockë
(
ac˚±ög
));

499 
	`HTNë_£tSockë
(
ac˚±ög
, 
°©us
);

501  
HT_OK
;

502 
	}
}

511 
PUBLIC
 
	$HTDoLi°í
 (
HTNë
 * 
li°íög
, HTNë * 
ac˚±ög
, 
backlog
)

513 
HTHo°
 * 
ho°
 = 
	`HTNë_ho°
(
li°íög
);

514 
HTReque°
 * 
ªque°
 = 
	`HTNë_ªque°
(
li°íög
);

515 
¥ìm±ive
 = 
li°íög
->preemptive;

516 
°©us
 = 
HT_OK
;

517 * 
ho°«me
 = 
	`HTHo°_«me
(
ho°
);

521 
ho°
->
t˝°©e
) {

522 
TCP_BEGIN
:

529 i‡((
°©us
 = 
	`HTHo°_addNë
(
ho°
, 
ac˚±ög
)Ë=
HT_PENDING
)

530 
	`HTTRACE
(
PROT_TRACE
, "HTDoListen.. Pending...\n");

536 
ho°
->
t˝°©e
 = 
TCP_CHANNEL
;

537 
	`HTTRACE
(
PROT_TRACE
, "HTHo° %∞goögÅÿ°©êTCP_CHANNEL.\n" 
_
 
ho°
);

538 i‡(
°©us
 =
HT_PENDING
)  HT_PENDING;

542 
TCP_CHANNEL
:

546 i‡(
	`HTHo°_ch™√l
(
ho°
Ë=
NULL
) {

547 
ho°
->
t˝°©e
 = 
TCP_NEED_SOCKET
;

548 
	`HTTRACE
(
PROT_TRACE
, "HTHo° %∞goögÅÿ°©êTCP_SOCKET.\n" 
_
 
ho°
);

554 
	`HTCh™√l_upSem≠h‹e
(
ho°
->
ch™√l
);

559 
ho°
->
t˝°©e
 = 
TCP_CONNECTED
;

560 
	`HTTRACE
(
PROT_TRACE
, "HTHo° %∞goögÅÿ°©êTCP_CONNECTED.\n" 
_
 
ho°
);

562 
ho°«me
 = 
	`HTHo°_«me
(
ho°
);

565 
TCP_NEED_SOCKET
:

567 
SOCKET
 
sockfd
;

570 i‡((
sockfd
 = 
	`_makeSockë
(
ho°
, 
ªque°
, 
¥ìm±ive
)Ë=
INVSOC
) {

571 
ho°
->
t˝°©e
 = 
TCP_ERROR
;

576 
	`¸óãCh™√lAndTøn•‹tSåóms
 (
ho°
, 
sockfd
, 
ac˚±ög
->
å™•‹t
);

580 
HTAÀπCÆlback
 *
cbf
 = 
	`HTAÀπ_föd
(
HT_PROG_ACCEPT
);

581 i‡(
cbf
Ë(*cbf)(
ªque°
, 
HT_PROG_ACCEPT
, 
HT_MSG_NULL
,

582 
NULL
, 
ho°«me
, NULL);

584 
ho°
->
t˝°©e
 = 
TCP_NEED_BIND
;

585 
	`HTTRACE
(
PROT_TRACE
, "HTHo° %∞goögÅÿ°©êTCP_NEED_BIND\n" 
_
 
ho°
);

589 
TCP_NEED_BIND
:

590 
	`HTTRACE
(
PROT_TRACE
, "Sockë...... Bödög sockë %d\n" 
_
 
	`HTNë_sockë
(
li°íög
));

591 
°©us
 = 
	`böd
(
	`HTNë_sockë
(
li°íög
), (
sockaddr
 *Ë&
ho°
->
sock_addr
,

592 (
ho°
->
sock_addr
));

593 i‡(
	`NETCALL_ERROR
(
°©us
)) {

594 
	`HTTRACE
(
PROT_TRACE
, "Sockë...... Böd faûed %d\n" 
_
 
so˚ºno
);

595 
ho°
->
t˝°©e
 = 
TCP_ERROR
;

597 
	`HTTRACE
(
PROT_TRACE
, "Sockë...... SèπögÜi°íög o¿sockë %d\n" 
_
 
	`HTNë_sockë
(
li°íög
));

598 
ho°
->
t˝°©e
 = 
TCP_NEED_LISTEN
;

602 
TCP_NEED_LISTEN
:

603 
°©us
 = 
	`li°í
(
	`HTNë_sockë
(
li°íög
), 
backlog
);

604 i‡(
	`NETCALL_ERROR
(
°©us
))

605 
ho°
->
t˝°©e
 = 
TCP_ERROR
;

607 
ho°
->
t˝°©e
 = 
TCP_CONNECTED
;

610 
TCP_CONNECTED
:

611 
	`HTHo°_uƒegi°î
(
ho°
, 
li°íög
, 
HTEvít_ACCEPT
);

612 
	`HTHo°_£tRëry
(
ho°
, 0);

613 
ho°
->
t˝°©e
 = 
TCP_IN_USE
;

614 
	`HTTRACE
(
PROT_TRACE
, "HTHo° %∞li°íög.\n" 
_
 
ho°
);

615  
HT_OK
;

619 
TCP_IN_USE
:

620 i‡((
°©us
 = 
	`HTHo°_addNë
(
ho°
, 
ac˚±ög
)Ë=
HT_PENDING
) {

621 
	`HTTRACE
(
PROT_TRACE
, "HTDoListen.. Pending...\n");

622  
HT_PENDING
;

625 
	`HTCh™√l_upSem≠h‹e
(
ho°
->
ch™√l
);

626  
HT_OK
;

628 
TCP_NEED_CONNECT
:

629 
TCP_DNS
:

630 
TCP_DNS_ERROR
:

631 
TCP_ERROR
:

632 i‡(
	`HTCh™√l_sockë
(
ho°
->
ch™√l
Ë!
INVSOC
) {

633 
	`NETCLOSE
(
	`HTCh™√l_sockë
(
ho°
->
ch™√l
));

634 i‡(
	`HTHo°_isPîsi°ít
(
ho°
)) {

635 
	`HTHo°_£tPîsi°ít
(
ho°
, 
NO
, 
HT_TP_SINGLE
);

636 
ho°
->
t˝°©e
 = 
TCP_NEED_SOCKET
;

637 
	`HTTRACE
(
PROT_TRACE
, "HTHo° %∞goögÅÿ°©êTCP_NEED_SOCKET.\n" 
_
 
ho°
);

642 
	`HTReque°_addSy°emEº‹
(
ªque°
, 
ERR_FATAL
, 
so˚ºno
, 
NO
, "accept");

643 
	`HTHo°_£tRëry
(
ho°
, 0);

644 
ho°
->
t˝°©e
 = 
TCP_BEGIN
;

645 
	`HTTRACE
(
PROT_TRACE
, "HTHo° %∞goögÅÿ°©êTCP_BEGIN.\n" 
_
 
ho°
);

646  
HT_ERROR
;

650 
	}
}

662 
PUBLIC
 
	$HTDoClo£
 (
HTNë
 * 
√t
)

664 
°©us
 = -1;

665 i‡(
√t
 && 
	`HTNë_sockë
“ëË!
INVSOC
) {

666 
	`HTTRACE
(
PROT_TRACE
, "HTDoClo£... Clo£ %d\n" 
_
 
	`HTNë_sockë
(
√t
));

667 
°©us
 = 
	`NETCLOSE
(
	`HTNë_sockë
(
√t
));

669 
	`HTNë_de¸ó£Sockë
();

670 
	`HTNë_£tSockë
(
√t
, 
INVSOC
);

677 
	`HTHo°_œunchPídög
(
√t
->
ho°
);

680 
	`HTTRACE
(
PROT_TRACE
, "HTDoClose... NoÖendingÑequests\n");

681  
°©us
 < 0 ? 
HT_ERROR
 : 
HT_OK
;

682 
	}
}

	@Library/src/HTTCP.h

27 #i‚de‡
HTTCP_H


28 
	#HTTCP_H


	)

29 
	~"HTReq.h
"

30 
	~"HTNë.h
"

47 
HTDoC⁄√˘
 (
HTNë
 * 
√t
);

67 
HTDoAc˚±
 (
HTNë
 * 
li°í
, HTNë * 
ac˚±
);

81 
HTDoLi°í
 (
HTNë
 * 
√t
, HTNë * 
ac˚±
, 
backlog
);

91 
HTDoClo£
 (
HTNë
 * 
√t
);

	@Library/src/HTTChunk.c

19 
	~"wwwsys.h
"

20 
	~"WWWUtû.h
"

21 
	~"WWWC‹e.h
"

22 
	~"HTTChunk.h
"

24 
	#PUTBLOCK
(
b
, 
l
Ë(*
me
->
èrgë
->
iß
->
put_block
)(me->èrgë, b,Ü)

	)

25 
	#PUTC
(
c
Ë(*
me
->
èrgë
->
iß
->
put_ch¨a˘î
)(me->èrgë, c)

	)

27 
	s_HTSåóm
 {

28 c⁄° 
HTSåómCœss
 * 
	miß
;

29 
HTEncodög
 
	mcodög
;

30 
HTSåóm
 * 
	mèrgë
;

31 
HTReque°
 * 
	mªque°
;

32 * 
	m∑øm
;

33 
	mÀ·
;

34 
	mtŸÆ
;

35 
BOOL
 
	mœ°chunk
;

36 
BOOL
 
	måaûî
;

37 
HTEOLSèã
 
	m°©e
;

38 
HTChunk
 * 
	mbuf
;

39 
	m°©us
;

47 
PRIVATE
 
BOOL
 
	$HTChunkDecode_hódî
 (
HTSåóm
 * 
me
)

49 * 
löe
 = 
	`HTChunk_d©a
(
me
->
buf
);

50 i‡(
löe
) {

51 *
îr°r
 = 
NULL
;

52 
me
->
À·
 = 
	`°πﬁ
(
löe
, &
îr°r
, 16);

53 
	`HTTRACE
(
STREAM_TRACE
, "Chunked..... `%s\' chunk size: %X\n" 
_
 
löe
 _ 
me
->
À·
);

54 i‡(
îr°r
 =
löe
)

55 
	`HTDEBUGBREAK
("Chunk decodîÑe˚ived iŒigÆ chunk size: `%s\'\n" 
_
 
löe
);

56 i‡(
me
->
À·
 > 0) {

57 
me
->
tŸÆ
 +me->
À·
;

61 
	`HTChunk_˛ór
(
me
->
buf
);

62 } i‡(
me
->
À·
 == 0)

63 
me
->
œ°chunk
 = 
YES
;

64 i‡(
me
->
À·
 < 0)

65  
NO
;

66  
YES
;

68  
NO
;

69 
	}
}

71 
PRIVATE
 
	$HTChunkDecode_block
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
)

73 
l
 > 0) {

74 
Àngth
 = 
l
;

75 i‡(
me
->
À·
 <0 && !me->
åaûî
) {

76 
l
 > 0) {

77 i‡(
me
->
°©e
 =
EOL_FLF
) {

78 i‡(
	`HTChunkDecode_hódî
(
me
Ë=
NO
Ë 
HT_ERROR
;

79 i‡(
me
->
œ°chunk
Ëi‡(*
b
 !
CR
 && *b !
LF
Ëme->
åaûî
 = 
YES
;

80 
me
->
°©e
 = 
EOL_DOT
;

82 } i‡(
me
->
°©e
 =
EOL_SLF
) {

83 i‡(
me
->
œ°chunk
) ;

84 
me
->
°©e
 = 
EOL_BEGIN
;

85 
	`HTChunk_putc
(
me
->
buf
, *
b
);

86 } i‡(*
b
 =
CR
) {

87 
me
->
°©e
 = me->°©ê=
EOL_DOT
 ? 
EOL_SCR
 : 
EOL_FCR
;

88 } i‡(*
b
 =
LF
) {

89 
me
->
°©e
 = me->°©ê=
EOL_SCR
 ? 
EOL_SLF
 : 
EOL_FLF
;

91 
	`HTChunk_putc
(
me
->
buf
, *
b
);

92 
b
++, 
l
--;

100 i‡(
Àngth
 !
l
)

101 
	`HTHo°_£tC⁄sumed
(
	`HTNë_ho°
(
	`HTReque°_√t
(
me
->
ªque°
)), 
Àngth
 - 
l
);

106 i‡(
me
->
åaûî
) {

107 
me
->
èrgë
 = 
	`HTSåómSèck
(
WWW_MIME_FOOT
, 
WWW_SOURCE
,

108 
me
->
èrgë
, me->
ªque°
, 
NO
);

109 } i‡(
me
->
°©e
 =
EOL_SLF
) {

110 i‡(
me
->
œ°chunk
) {

111 
HTAÀπCÆlback
 * 
cbf
 = 
	`HTAÀπ_föd
(
HT_PROG_DONE
);

112 i‡(
cbf
Ë(*cbf)(
me
->
ªque°
, 
HT_PROG_DONE
, 
HT_MSG_NULL
,

113 
NULL
, NULL, NULL);

114  
HT_LOADED
;

116 
me
->
°©e
 = 
EOL_BEGIN
;

122 i‡(
l
 > 0 && 
me
->
À·
) {

123 
byãs
 = 
	`HTMIN
(
l
, 
me
->
À·
);

124 
°©us
 = (*
me
->
èrgë
->
iß
->
put_block
)(me->èrgë, 
b
, 
byãs
);

125 i‡(
°©us
 !
HT_OK
)  status;

126 
	`HTHo°_£tC⁄sumed
(
	`HTNë_ho°
(
	`HTReque°_√t
(
me
->
ªque°
)), 
byãs
);

127 
me
->
À·
 -
byãs
;

128 
l
 -
byãs
, 
b
+= bytes;

131  
HT_OK
;

132 
	}
}

134 
PRIVATE
 
	$HTChunkDecode_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

136  
	`HTChunkDecode_block
(
me
, 
s
, (Ë
	`°æí
(s));

137 
	}
}

139 
PRIVATE
 
	$HTChunkDecode_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

141  
	`HTChunkDecode_block
(
me
, &
c
, 1);

142 
	}
}

144 
PRIVATE
 
	$HTChunkDecode_Êush
 (
HTSåóm
 * 
me
)

146  (*
me
->
èrgë
->
iß
->
Êush
)(me->target);

147 
	}
}

149 
PRIVATE
 
	$HTChunkDecode_‰ì
 (
HTSåóm
 * 
me
)

151 
°©us
 = 
HT_OK
;

152 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
me
->
ªque°
);

157 
	`HTAnch‹_£tLígth
(
™ch‹
, 
me
->
tŸÆ
);

159 i‡(
me
->
èrgë
) {

160 i‡((
°©us
 = (*
me
->
èrgë
->
iß
->
_‰ì
)(me->èrgë)Ë=
HT_WOULD_BLOCK
)

161  
HT_WOULD_BLOCK
;

163 
	`HTTRACE
(
PROT_TRACE
, "Chunked..... FREEING....\n");

164 
	`HTChunk_dñëe
(
me
->
buf
);

165 
	`HT_FREE
(
me
);

166  
°©us
;

167 
	}
}

169 
PRIVATE
 
	$HTChunkDecode_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

171 
°©us
 = 
HT_ERROR
;

172 i‡(
me
->
èrgë
Ë
°©us
 = (*me->èrgë->
iß
->
ab‹t
)(me->èrgë, 
e
);

173 
	`HTTRACE
(
PROT_TRACE
, "Chunked..... ABORTING...\n");

174 
	`HTChunk_dñëe
(
me
->
buf
);

175 
	`HT_FREE
(
me
);

176  
°©us
;

177 
	}
}

179 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTChunkDecodeCœss
 =

182 
HTChunkDecode_Êush
,

183 
HTChunkDecode_‰ì
,

184 
HTChunkDecode_ab‹t
,

185 
HTChunkDecode_ch¨a˘î
,

186 
HTChunkDecode_°rög
,

187 
HTChunkDecode_block


190 
PUBLIC
 
HTSåóm
 * 
	$HTChunkedDecodî
 (
HTReque°
 * 
ªque°
,

191 * 
∑øm
,

192 
HTEncodög
 
codög
,

193 
HTSåóm
 * 
èrgë
)

195 
HTSåóm
 * 
me
;

196 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

197 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

198 
	`HT_OUTOFMEM
("HTChunkDecoder");

199 
me
->
iß
 = &
HTChunkDecodeCœss
;

200 
me
->
codög
 = coding;

201 
me
->
èrgë
 =Åarget;

202 
me
->
ªque°
 =Ñequest;

203 
me
->
°©e
 = 
EOL_BEGIN
;

204 
me
->
buf
 = 
	`HTChunk_√w
(64);

205 
me
->
°©us
 = 
HT_ERROR
;

208 
	`HTAnch‹_£tLígth
(
™ch‹
, -1);

210 
	`HTTRACE
(
STREAM_TRACE
, "Chunked..... Decoder stream created\n");

211  
me
;

212 
	}
}

217 
PRIVATE
 
	$HTChunkEncode_block
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
)

219 * 
chunky
 = 
	`HTChunk_d©a
(
me
->
buf
);

220 i‡(
me
->
œ°chunk
Ë 
HT_LOADED
;

221 i‡(
me
->
∑øm
) {

222 i‡(
me
->
tŸÆ
)

223 
	`•rötf
(
chunky
, "%c%c%x %†%c%c", 
CR
, 
LF
, 
l
, 
me
->
∑øm
, CR, LF);

225 
	`•rötf
(
chunky
, "%x %†%c%c", 
l
, 
me
->
∑øm
, 
CR
, 
LF
);

227 i‡(
me
->
tŸÆ
)

228 
	`•rötf
(
chunky
, "%c%c%x%c%c", 
CR
, 
LF
, 
l
, CR, LF);

230 
	`•rötf
(
chunky
, "%x%c%c", 
l
, 
CR
, 
LF
);

232 
me
->
tŸÆ
 +
l
;

233 
	`PUTBLOCK
(
chunky
, (Ë
	`°æí
(chunky));

234 
	`HTTRACE
(
STREAM_TRACE
, "Chunked..... chunk sizê0x%X\n" 
_
 
l
);

235 i‡(
l
 > 0Ë 
	`PUTBLOCK
(
b
,Ü);

239 
	`PUTC
(
CR
);

240 
	`PUTC
(
LF
);

241 
me
->
œ°chunk
 = 
YES
;

242 (*
me
->
èrgë
->
iß
->
Êush
)(me->target);

243  
HT_LOADED
;

244 
	}
}

246 
PRIVATE
 
	$HTChunkEncode_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

248  
	`HTChunkEncode_block
(
me
, 
s
, (Ë
	`°æí
(s));

249 
	}
}

251 
PRIVATE
 
	$HTChunkEncode_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

253  
	`HTChunkEncode_block
(
me
, &
c
, 1);

254 
	}
}

256 
PRIVATE
 
	$HTChunkEncode_Êush
 (
HTSåóm
 * 
me
)

258  (*
me
->
èrgë
->
iß
->
Êush
)(me->target);

259 
	}
}

261 
PRIVATE
 
	$HTChunkEncode_‰ì
 (
HTSåóm
 * 
me
)

264 
°©us
 = 
	`HTChunkEncode_block
(
me
, 
NULL
, 0);

265 i‡(
°©us
 !
HT_WOULD_BLOCK
) {

266 i‡((
°©us
 = (*
me
->
èrgë
->
iß
->
_‰ì
)(me->èrgë)Ë=
HT_WOULD_BLOCK
)

267  
HT_WOULD_BLOCK
;

268 
	`HT_FREE
(
me
);

270  
°©us
;

272 
°©us
 = 
me
->
èrgë
 ? (*me->èrgë->
iß
->
_‰ì
)(me->èrgëË: 
HT_OK
;

273 
	`HT_FREE
(
me
);

274  
°©us
;

276 
	}
}

278 
PRIVATE
 
	$HTChunkEncode_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

280 
°©us
 = 
HT_ERROR
;

281 i‡(
me
->
èrgë
Ë
°©us
 = (*me->èrgë->
iß
->
_‰ì
)(me->target);

282 
	`HTTRACE
(
PROT_TRACE
, "Chunked..... ABORTING...\n");

283 
	`HT_FREE
(
me
);

284  
°©us
;

285 
	}
}

287 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTChunkEncodîCœss
 =

290 
HTChunkEncode_Êush
,

291 
HTChunkEncode_‰ì
,

292 
HTChunkEncode_ab‹t
,

293 
HTChunkEncode_ch¨a˘î
,

294 
HTChunkEncode_°rög
,

295 
HTChunkEncode_block


298 
PUBLIC
 
HTSåóm
 * 
	$HTChunkedEncodî
 (
HTReque°
 * 
ªque°
,

299 * 
∑øm
,

300 
HTEncodög
 
codög
,

301 
HTSåóm
 * 
èrgë
)

303 
HTSåóm
 * 
me
;

304 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

305 
	`HT_OUTOFMEM
("HTChunkEncoder");

306 
me
->
iß
 = &
HTChunkEncodîCœss
;

307 
me
->
codög
 = coding;

308 
me
->
èrgë
 =Åarget;

309 
me
->
ªque°
 =Ñequest;

310 
me
->
∑øm
 = (*)Öaram;

311 
me
->
°©e
 = 
EOL_BEGIN
;

312 
me
->
°©us
 = 
HT_ERROR
;

314 
Àngth
 = 
me
->
∑øm
 ? 
	`°æí
(me->param)+20 : 20;

315 
me
->
buf
 = 
	`HTChunk_√w
(
Àngth
);

316 
	`HTChunk_ísuª
(
me
->
buf
, 
Àngth
);

319 
	`HTTRACE
(
STREAM_TRACE
, "Chunked..... Encoder stream created\n");

320  
me
;

321 
	}
}

	@Library/src/HTTChunk.h

38 #i‚de‡
HTTCHUNK_H


39 
	#HTTCHUNK_H


	)

41 
	~"HTF‹m©.h
"

46 
HTCodî
 
HTChunkedDecodî
, 
HTChunkedEncodî
;

	@Library/src/HTTP.c

25 
	~"wwwsys.h
"

26 
	~"WWWUtû.h
"

27 
	~"WWWC‹e.h
"

28 
	~"HTHódî.h
"

29 
	~"HTMIMERq.h
"

30 
	~"HTReqM™.h
"

31 
	~"HTNëM™.h
"

32 
	~"HTTPUtû.h
"

33 
	~"HTTPReq.h
"

34 
	~"HTTP.h
"

37 #i‚de‡
HTTP_PORT


38 
	#HTTP_PORT
 80

	)

41 
	#PUTC
(
c
Ë(*
me
->
èrgë
->
iß
->
put_ch¨a˘î
)(me->èrgë, c)

	)

42 
	#PUTS
(
s
Ë(*
me
->
èrgë
->
iß
->
put_°rög
)(me->èrgë, s)

	)

43 
	#PUTBLOCK
(
b
, 
l
Ë(*
me
->
èrgë
->
iß
->
put_block
)(me->èrgë, b,Ü)

	)

44 
	#FREE_TARGET
 (*
me
->
èrgë
->
iß
->
_‰ì
)(me->èrgë)

	)

45 
	#ABORT_TARGET
 (*
me
->
èrgë
->
iß
->
ab‹t
)(me->èrgë, 
e
)

	)

47 #ifde‡
HTDEBUG


48 
	~"WWWSåóm.h
"

49 
	#HTTP_OUTPUT
 "w3châp.out"

	)

50 
PRIVATE
 
FILE
 * 
	ghtÂ
 = 
NULL
;

56 
	e_HTTPSèã
 {

57 
	mHTTP_KILL_PIPE
 = -4,

58 
	mHTTP_RECOVER_PIPE
 = -3,

59 
	mHTTP_ERROR
 = -2,

60 
	mHTTP_OK
 = -1,

61 
	mHTTP_BEGIN
 = 0,

62 
	mHTTP_NEED_STREAM
,

63 
	mHTTP_CONNECTED


64 } 
	tHTTPSèã
;

67 
	s_hâp_öfo
 {

68 
HTTPSèã
 
	m°©e
;

69 
HTTPSèã
 
	m√xt
;

70 
	mªsu…
;

71 
BOOL
 
	mlock
;

72 
HTNë
 * 
	m√t
;

73 
HTReque°
 * 
	mªque°
;

74 
HTTimî
 * 
	mtimî
;

75 
BOOL
 
	mu£dTimî
;

76 
BOOL
 
	mª≥tôive_wrôög
;

77 } 
	thâp_öfo
;

79 
	#MAX_STATUS_LEN
 100

	)

81 
	s_HTSåóm
 {

82 c⁄° 
HTSåómCœss
 * 
	miß
;

83 
HTSåóm
 * 
	mèrgë
;

84 
HTSåóm
 * 
	möfo_èrgë
;

85 
HTReque°
 * 
	mªque°
;

86 
hâp_öfo
 * 
	mhâp
;

87 
HTEOLSèã
 
	m°©e
;

88 
BOOL
 
	må™•¨ít
;

89 
BOOL
 
	mc⁄t
;

90 * 
	mvîsi⁄
;

91 
	m°©us
;

92 * 
	mªas⁄
;

93 
	mbuf„r
[
MAX_STATUS_LEN
+1];

94 
	mbuÊí
;

95 
	m°¨tLí
;

98 
	s_HTI≈utSåóm
 {

99 c⁄° 
HTI≈utSåómCœss
 * 
	miß
;

103 
	#DEFAULT_FIRST_WRITE_DELAY
 2000

	)

104 
	#DEFAULT_SECOND_WRITE_DELAY
 3000

	)

105 
	#DEFAULT_REPEAT_WRITE
 30

	)

107 
PRIVATE
 
ms_t
 
	gHTFú°WrôeDñay
 = 
DEFAULT_FIRST_WRITE_DELAY
;

108 
PRIVATE
 
ms_t
 
	gHTSec⁄dWrôeDñay
 = 
DEFAULT_SECOND_WRITE_DELAY
;

109 
PRIVATE
 
ms_t
 
	gHTRïótWrôe
 = 
DEFAULT_REPEAT_WRITE
;

111 #ifde‡
HT_NO_PIPELINING


112 
PRIVATE
 
HTTPC⁄√˘i⁄Mode
 
	gC⁄√˘i⁄Mode
 = 
HTTP_11_NO_PIPELINING
;

114 #ifde‡
HT_MUX


115 
PRIVATE
 
HTTPC⁄√˘i⁄Mode
 
	gC⁄√˘i⁄Mode
 = 
HTTP_11_MUX
;

117 #ifde‡
HT_FORCE_10


118 
PRIVATE
 
HTTPC⁄√˘i⁄Mode
 
	gC⁄√˘i⁄Mode
 = 
HTTP_FORCE_10
;

120 
PRIVATE
 
HTTPC⁄√˘i⁄Mode
 
	gC⁄√˘i⁄Mode
 = 
HTTP_11_PIPELINING
;

134 
PRIVATE
 
	$HTTPCÀ™up
 (
HTReque°
 *
ªq
, 
°©us
)

136 
HTNë
 * 
√t
 = 
	`HTReque°_√t
(
ªq
);

137 
hâp_öfo
 * 
hâp
 = (hâp_öfÿ*Ë
	`HTNë_c⁄ãxt
(
√t
);

138 
HTSåóm
 * 
öput
 = 
	`HTReque°_öputSåóm
(
ªq
);

140 
	`HTTRACE
(
PROT_TRACE
, "HTTP CÀ™.. CÆÀd wôh sètu†%d,Çë %p\n" 
_
 
°©us
 _ 
√t
);

142 i‡(
°©us
 =
HT_INTERRUPTED
) {

143 
HTAÀπCÆlback
 * 
cbf
 = 
	`HTAÀπ_föd
(
HT_PROG_INTERRUPT
);

144 i‡(
cbf
Ë(*cbf)(
ªq
, 
HT_PROG_INTERRUPT
,

145 
HT_MSG_NULL
, 
NULL
, NULL, NULL);

146 } i‡(
°©us
 =
HT_TIMEOUT
) {

147 
HTAÀπCÆlback
 * 
cbf
 = 
	`HTAÀπ_föd
(
HT_PROG_TIMEOUT
);

148 i‡(
cbf
Ë(*cbf)(
ªq
, 
HT_PROG_TIMEOUT
,

149 
HT_MSG_NULL
, 
NULL
, NULL, NULL);

153 i‡(
öput
) {

154 i‡(
öput
->
iß
) {

155 i‡(
°©us
==
HT_INTERRUPTED
 || sètus==
HT_RECOVER_PIPE
 || sètus==
HT_TIMEOUT
)

156 (*
öput
->
iß
->
ab‹t
)(öput, 
NULL
);

158 (*
öput
->
iß
->
_‰ì
)(input);

160 
	`HTReque°_£tI≈utSåóm
(
ªq
, 
NULL
);

166 i‡(
hâp
 && hâp->
timî
) {

167 
	`HTTimî_dñëe
(
hâp
->
timî
);

168 
hâp
->
timî
 = 
NULL
;

169 
hâp
->
lock
 = 
NO
;

175 i‡(
°©us
 !
HT_RECOVER_PIPE
) {

176 
	`HTNë_dñëe
(
√t
, 
°©us
);

177 
	`HT_FREE
(
hâp
);

179  
YES
;

180 
	}
}

186 
PRIVATE
 
BOOL
 
	$HTTPInf‹m©i⁄
 (
HTSåóm
 * 
me
)

188 
hâp_öfo
 * 
hâp
 = 
me
->http;

189 
me
->
°©us
) {

193 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_INFO
, 
NO
, 
HTERR_CONTINUE
,

194 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason),

197 
hâp
->
ªsu…
 = 
HT_CONTINUE
;

198  
YES
;

205 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_INFO
, 
NO
, 
HTERR_SWITCHING
,

206 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason),

208 
hâp
->
√xt
 = 
HTTP_OK
;

209 
hâp
->
ªsu…
 = 
HT_UPGRADE
;

210  
YES
;

213 #ifde‡
HT_DAV


221 
hâp
->
ªsu…
 = 
HT_CONTINUE
;

222 
hâp
->
√xt
 = 
HTTP_CONNECTED
;

223  
YES
;

229 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_BAD_REPLY
,

230 (*Ë
me
->
buf„r
, me->
buÊí
, "HTTPNextState");

231 
hâp
->
√xt
 = 
HTTP_ERROR
;

232 
hâp
->
ªsu…
 = 
HT_ERROR
;

235  
NO
;

236 
	}
}

245 
PRIVATE
 
	$HTTPNextSèã
 (
HTSåóm
 * 
me
)

247 
hâp_öfo
 * 
hâp
 = 
me
->http;

248 
îr‹_˛ass
 = 
me
->
°©us
 / 100;

249 
îr‹_˛ass
) {

254 
me
->
°©us
) {

257 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_INFO
, 
NO
, 
HTERR_CREATED
,

258 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason),

260 
hâp
->
√xt
 = 
HTTP_OK
;

261 
hâp
->
ªsu…
 = 
HT_CREATED
;

265 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_INFO
, 
NO
, 
HTERR_ACCEPTED
,

266 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason),

268 
hâp
->
√xt
 = 
HTTP_OK
;

269 
hâp
->
ªsu…
 = 
HT_ACCEPTED
;

273 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_INFO
, 
NO
, 
HTERR_NON_AUTHORITATIVE
,

274 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason),

276 
hâp
->
√xt
 = 
HTTP_OK
;

277 
hâp
->
ªsu…
 = 
HT_LOADED
;

281 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_INFO
, 
NO
, 
HTERR_NO_CONTENT
,

282 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason),

284 
hâp
->
√xt
 = 
HTTP_OK
;

285 
hâp
->
ªsu…
 = 
HT_NO_DATA
;

289 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_INFO
, 
NO
, 
HTERR_RESET
,

290 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason),

292 
hâp
->
√xt
 = 
HTTP_OK
;

293 
hâp
->
ªsu…
 = 
HT_RESET_CONTENT
;

297 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_INFO
, 
NO
, 
HTERR_PARTIAL
,

298 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason),

300 
hâp
->
√xt
 = 
HTTP_OK
;

301 
hâp
->
ªsu…
 = 
HT_PARTIAL_CONTENT
;

305 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_INFO
, 
NO
, 
HTERR_PARTIAL_OK
,

306 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason),

308 
hâp
->
√xt
 = 
HTTP_OK
;

309 #ifde‡
HT_DAV


310 
hâp
->
ªsu…
 = 
HT_MULTI_STATUS
;

312 
hâp
->
ªsu…
 = 
HT_PARTIAL_CONTENT
;

317 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_INFO
, 
NO
, 
HTERR_OK
,

318 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason),

320 
hâp
->
√xt
 = 
HTTP_OK
;

321 
hâp
->
ªsu…
 = 
HT_LOADED
;

328 
me
->
°©us
) {

331 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_INFO
, 
NO
, 
HTERR_MOVED
,

332 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason),

334 
hâp
->
√xt
 = 
HTTP_ERROR
;

335 
hâp
->
ªsu…
 = 
HT_PERM_REDIRECT
;

339 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_INFO
, 
NO
, 
HTERR_FOUND
,

340 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason),

342 
hâp
->
√xt
 = 
HTTP_ERROR
;

343 
hâp
->
ªsu…
 = 
HT_FOUND
;

347 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_METHOD
,

348 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason),

350 
hâp
->
√xt
 = 
HTTP_ERROR
;

351 
hâp
->
ªsu…
 = 
HT_SEE_OTHER
;

355 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_INFO
, 
NO
, 
HTERR_NOT_MODIFIED
,

356 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason),

358 
hâp
->
√xt
 = 
HTTP_OK
;

359 
hâp
->
ªsu…
 = 
HT_NOT_MODIFIED
;

363 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_INFO
, 
NO
, 
HTERR_USE_PROXY
,

364 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason),

366 
hâp
->
√xt
 = 
HTTP_ERROR
;

367 
hâp
->
ªsu…
 = 
HT_USE_PROXY
;

372 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_INFO
, 
NO
, 
HTERR_PROXY_REDIRECT
,

373 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason),

375 
hâp
->
√xt
 = 
HTTP_ERROR
;

376 
hâp
->
ªsu…
 = 
HT_USE_PROXY
;

381 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_INFO
, 
NO
, 
HTERR_TEMP_REDIRECT
,

382 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason),

384 
hâp
->
√xt
 = 
HTTP_ERROR
;

385 
hâp
->
ªsu…
 = 
HT_TEMP_REDIRECT
;

389 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_INFO
, 
NO
, 
HTERR_MULTIPLE
,

390 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason),

392 
hâp
->
√xt
 = 
HTTP_OK
;

393 
hâp
->
ªsu…
 = 
HT_LOADED
;

400 
me
->
°©us
) {

402 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_UNAUTHORIZED
,

403 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

404 
hâp
->
√xt
 = 
HTTP_ERROR
;

405 
hâp
->
ªsu…
 = 
HT_NO_ACCESS
;

409 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_PAYMENT_REQUIRED
,

410 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

411 
hâp
->
√xt
 = 
HTTP_ERROR
;

412 
hâp
->
ªsu…
 = -402;

416 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_FORBIDDEN
,

417 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

418 
hâp
->
√xt
 = 
HTTP_ERROR
;

419 
hâp
->
ªsu…
 = 
HT_FORBIDDEN
;

423 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_NOT_FOUND
,

424 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

425 
hâp
->
√xt
 = 
HTTP_ERROR
;

426 
hâp
->
ªsu…
 = -404;

430 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_NOT_ALLOWED
,

431 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

432 
hâp
->
√xt
 = 
HTTP_ERROR
;

433 
hâp
->
ªsu…
 = -405;

437 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_NONE_ACCEPTABLE
,

438 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

439 
hâp
->
√xt
 = 
HTTP_ERROR
;

440 
hâp
->
ªsu…
 = 
HT_NOT_ACCEPTABLE
;

444 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
,
HTERR_PROXY_UNAUTHORIZED
,

445 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

446 
hâp
->
√xt
 = 
HTTP_ERROR
;

447 
hâp
->
ªsu…
 = 
HT_NO_PROXY_ACCESS
;

451 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_TIMEOUT
,

452 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

453 
hâp
->
√xt
 = 
HTTP_ERROR
;

454 
hâp
->
ªsu…
 = -408;

458 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_CONFLICT
,

459 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

460 
hâp
->
√xt
 = 
HTTP_ERROR
;

461 
hâp
->
ªsu…
 = 
HT_CONFLICT
;

465 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_GONE
,

466 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

467 
hâp
->
√xt
 = 
HTTP_ERROR
;

468 
hâp
->
ªsu…
 = -410;

472 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_LENGTH_REQUIRED
,

473 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

474 
hâp
->
√xt
 = 
HTTP_ERROR
;

475 
hâp
->
ªsu…
 = 
HT_LENGTH_REQUIRED
;

479 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_PRECON_FAILED
,

480 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

481 
hâp
->
√xt
 = 
HTTP_ERROR
;

482 
hâp
->
ªsu…
 = -412;

486 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_TOO_BIG
,

487 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

488 
hâp
->
√xt
 = 
HTTP_ERROR
;

489 
hâp
->
ªsu…
 = -413;

493 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_URI_TOO_BIG
,

494 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

495 
hâp
->
√xt
 = 
HTTP_ERROR
;

496 
hâp
->
ªsu…
 = -414;

500 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_UNSUPPORTED
,

501 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

502 
hâp
->
√xt
 = 
HTTP_ERROR
;

503 
hâp
->
ªsu…
 = -415;

507 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_BAD_RANGE
,

508 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

509 
hâp
->
√xt
 = 
HTTP_ERROR
;

510 
hâp
->
ªsu…
 = -416;

514 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_EXPECTATION_FAILED
,

515 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

516 
hâp
->
√xt
 = 
HTTP_ERROR
;

517 
hâp
->
ªsu…
 = -417;

521 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_REAUTH
,

522 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

523 
hâp
->
√xt
 = 
HTTP_ERROR
;

524 
hâp
->
ªsu…
 = -418;

528 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_PROXY_REAUTH
,

529 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

530 
hâp
->
√xt
 = 
HTTP_ERROR
;

531 
hâp
->
ªsu…
 = -419;

534 #ifde‡
HT_DAV


536 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_UNPROCESSABLE
,

537 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

538 
hâp
->
√xt
 = 
HTTP_ERROR
;

539 
hâp
->
ªsu…
 = 
HT_UNPROCESSABLE
;

543 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_LOCKED
,

544 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

545 
hâp
->
√xt
 = 
HTTP_ERROR
;

546 
hâp
->
ªsu…
 = 
HT_LOCKED
;

550 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_FAILED_DEPENDENCY
,

551 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

552 
hâp
->
√xt
 = 
HTTP_ERROR
;

553 
hâp
->
ªsu…
 = 
HT_FAILED_DEPENDENCY
;

558 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_BAD_REQUEST
,

559 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

560 
hâp
->
√xt
 = 
HTTP_ERROR
;

561 
hâp
->
ªsu…
 = -400;

568 
me
->
°©us
) {

570 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_NOT_IMPLEMENTED
,

571 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

572 
hâp
->
√xt
 = 
HTTP_ERROR
;

573 
hâp
->
ªsu…
 = -501;

577 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_BAD_GATE
,

578 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

579 
hâp
->
√xt
 = 
HTTP_ERROR
;

580 
hâp
->
ªsu…
 = -502;

584 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_DOWN
,

585 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

586 
hâp
->
√xt
 = 
HTTP_ERROR
;

593 
HTRe•⁄£
 * 
ª•⁄£
 = 
	`HTReque°_ª•⁄£
(
me
->
ªque°
);

594 i‡(
	`HTRe•⁄£_ªåyTime
(
ª•⁄£
))

595 
hâp
->
ªsu…
 = 
HT_RETRY
;

597 
hâp
->
ªsu…
 = -500;

602 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_GATE_TIMEOUT
,

603 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

604 
hâp
->
√xt
 = 
HTTP_ERROR
;

605 
hâp
->
ªsu…
 = -504;

609 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_BAD_VERSION
,

610 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

611 
hâp
->
√xt
 = 
HTTP_ERROR
;

612 
hâp
->
ªsu…
 = 
HT_BAD_VERSION
;

616 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_NO_PARTIAL_UPDATE
,

617 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

618 
hâp
->
√xt
 = 
HTTP_ERROR
;

619 
hâp
->
ªsu…
 = 
HT_BAD_VERSION
;

622 #ifde‡
HT_DAV


624 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_INSUFFICIENT_STORAGE
,

625 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

626 
hâp
->
√xt
 = 
HTTP_ERROR
;

627 
hâp
->
ªsu…
 = 
HT_INSUFFICIENT_STORAGE
;

632 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_INTERNAL
,

633 
me
->
ªas⁄
, (Ë
	`°æí
(me->reason), "HTTPNextState");

634 
hâp
->
√xt
 = 
HTTP_ERROR
;

635 
hâp
->
ªsu…
 = -500;

641 
	`HTReque°_addEº‹
(
me
->
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_BAD_REPLY
,

642 (*Ë
me
->
buf„r
, me->
buÊí
, "HTTPNextState");

643 
hâp
->
√xt
 = 
HTTP_ERROR
;

644 
hâp
->
ªsu…
 = -(
me
->
°©us
);

647 
	}
}

666 
PRIVATE
 
	$°ªam_pùe
 (
HTSåóm
 * 
me
, 
Àngth
)

668 
HTReque°
 * 
ªque°
 = 
me
->request;

669 
HTNë
 * 
√t
 = 
	`HTReque°_√t
(
ªque°
);

670 
HTHo°
 * 
ho°
 = 
	`HTNë_ho°
(
√t
);

674 * 
uri
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
	`HTReque°_™ch‹
(
ªque°
));

675 
	`Ârötf
(
°dîr
, "HTTP hódî: %†f‹ '%s'\n", 
me
->
buf„r
, 
uri
);

676 
	`HT_FREE
(
uri
);

685 i‡(
	`°∫ˇ£comp
(
me
->
buf„r
, "http", 4)) {

686 
°©us
;

687 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_INFO
, 
NO
, 
HTERR_HTTP09
,

688 (*Ë
me
->
buf„r
, me->
buÊí
, "HTTPStatusStream");

689 
me
->
èrgë
 = 
	`HTSåómSèck
(
WWW_UNKNOWN
,

690 
	`HTReque°_ouçutF‹m©
(
ªque°
),

691 
	`HTReque°_ouçutSåóm
(
ªque°
),

692 
ªque°
, 
NO
);

693 
me
->
hâp
->
√xt
 = 
HTTP_OK
;

694 i‡((
°©us
 = 
	`PUTBLOCK
(
me
->
buf„r
, me->
buÊí
)Ë=
HT_OK
)

695 
me
->
å™•¨ít
 = 
YES
;

701 i‡(
Àngth
 > 0Ë
	`HTHo°_£tC⁄sumed
(
ho°
,Üength);

702 
	`HTTRACE
(
PROT_TRACE
, "HTTP Sètus. `%s\' i†¥obablyá brokí 1.0 sîvîÅh© d€¢'àundî°™d HEAD\n" 
_


703 
	`HTHo°_«me
(
ho°
));

704  
HT_ERROR
;

706 
HTRe•⁄£
 * 
ª•⁄£
 = 
	`HTReque°_ª•⁄£
(
ªque°
);

707 * 
±r
 = 
me
->
buf„r
+5;

708 * 
v±r
 = 
NULL
;

709 
maj‹
 = 0;

710 
mö‹
 = 0;

711 
me
->
vîsi⁄
 = 
v±r
 = 
	`HTNextFõld
(&
±r
);

712 i‡(
v±r
) {

713 
maj‹
 = (Ë
	`°πﬁ
(
me
->
vîsi⁄
, &
v±r
, 10);

714 i‡(
v±r
++Ë
mö‹
 = 
	`°πﬁ
(v±r, 
NULL
, 10);

718 i‡(
maj‹
 > 1 && major < 100) {

719 
	`HTTRACE
(
PROT_TRACE
, "HTTP Sètus. Maj‹ vîsi⁄Çumbî i†%d\n" 
_
 
maj‹
);

720 
me
->
èrgë
 = 
	`HTEº‹Såóm
();

721 
me
->
°©us
 = 9999;

722 
	`HTTPNextSèã
(
me
);

723  
HT_ERROR
;

724 } i‡(
mö‹
 <= 0) {

725 i‡(
maj‹
 > 100) {

726 
	`HTTRACE
(
PROT_TRACE
, "HTTP Status. This isá *BROKEN* HTTP/1.0 server\n");

727 
me
->
°©us
 = 200;

729 
	`HTTRACE
(
PROT_TRACE
, "HTTP Status. This isán HTTP/1.0 server\n");

730 
me
->
°©us
 = 
	`©oi
(
	`HTNextFõld
(&
±r
));

732 
	`HTHo°_£tVîsi⁄
(
ho°
, 
HTTP_10
);

734 
	`HTHo°_£tVîsi⁄
(
ho°
, 
HTTP_11
);

735 i‡(
C⁄√˘i⁄Mode
 & 
HTTP_11_NO_PIPELINING
) {

736 
	`HTTRACE
(
PROT_TRACE
, "HTTP........ Mode is HTTP/1.1 with NO PIPELINING\n");

737 
	`HTNë_£tPîsi°ít
(
√t
, 
YES
, 
HT_TP_SINGLE
);

738 } i‡(
C⁄√˘i⁄Mode
 & 
HTTP_11_MUX
) {

739 
	`HTTRACE
(
PROT_TRACE
, "HTTP........ Mode is HTTP/1.1 with MUXING\n");

740 
	`HTNë_£tPîsi°ít
(
√t
, 
YES
, 
HT_TP_INTERLEAVE
);

741 } i‡(
C⁄√˘i⁄Mode
 & 
HTTP_FORCE_10
) {

742 
	`HTTRACE
(
PROT_TRACE
, "HTTP........ Mode is FORCE HTTP/1.0\n");

743 
	`HTHo°_£tVîsi⁄
(
ho°
, 
HTTP_10
);

744 
	`HTNë_£tPîsi°ít
(
√t
, 
NO
, 
HT_TP_SINGLE
);

746 
	`HTNë_£tPîsi°ít
(
√t
, 
YES
, 
HT_TP_PIPELINE
);

747 
me
->
°©us
 = 
	`©oi
(
	`HTNextFõld
(&
±r
));

750 
me
->
ªas⁄
 = 
±r
;

751 i‡((
±r
 = 
	`°rchr
(
me
->
ªas⁄
, '\r')Ë!
NULL
)

752 *
±r
 = '\0';

753 i‡((
±r
 = 
	`°rchr
(
me
->
ªas⁄
, '\n')Ë!
NULL
)

754 *
±r
 = '\0';

761 i‡(
me
->
°©us
/100 == 1) {

762 i‡(
	`HTTPInf‹m©i⁄
(
me
Ë=
YES
) {

763 i‡(
me
->
°©us
==100) {

764 
me
->
buÊí
 = 0;

765 
me
->
°©e
 = 
EOL_BEGIN
;

766 i‡(
me
->
öfo_èrgë
Ë(*me->öfo_èrgë->
iß
->
_‰ì
)(me->info_target);

767 
me
->
öfo_èrgë
 = 
	`HTSåómSèck
(
WWW_MIME_CONT
,

768 
	`HTReque°_debugF‹m©
(
ªque°
),

769 
	`HTReque°_debugSåóm
(
ªque°
),

770 
ªque°
, 
NO
);

771 i‡(
Àngth
 > 0Ë
	`HTHo°_£tC⁄sumed
(
ho°
,Üength);

772  
HT_OK
;

773 } i‡(
me
->
°©us
==101) {

774 i‡(
me
->
öfo_èrgë
Ë(*me->öfo_èrgë->
iß
->
_‰ì
)(me->info_target);

775 
me
->
èrgë
 = 
	`HTSåómSèck
(
WWW_MIME_UPGRADE
,

776 
	`HTReque°_ouçutF‹m©
(
ªque°
),

777 
	`HTReque°_ouçutSåóm
(
ªque°
),

778 
ªque°
, 
NO
);

779 i‡(
Àngth
 > 0Ë
	`HTHo°_£tC⁄sumed
(
ho°
,Üength);

780 
me
->
å™•¨ít
 = 
YES
;

781  
HT_OK
;

788 
	`HTRe•⁄£_£tRós⁄
 (
ª•⁄£
, 
me
->
ªas⁄
);

797 #ifde‡
HT_DAV


798 i‡(
me
->
°©us
==200 || me->status==203 ||

799 
me
->
°©us
==207 || me->status==300) {

801 i‡(
me
->
°©us
==200 || me->status==203 || me->status==300) {

807 
	`HTAnch‹_˛órHódî
(
	`HTReque°_™ch‹
(
ªque°
));

808 
	`HTRe•⁄£_£tCachabÀ
(
ª•⁄£
, 
HT_CACHE_ALL
);

809 
me
->
èrgë
 = 
	`HTSåómSèck
(
WWW_MIME
,

810 
	`HTReque°_ouçutF‹m©
(
ªque°
),

811 
	`HTReque°_ouçutSåóm
(
ªque°
),

812 
ªque°
, 
NO
);

813 } i‡(
me
->
°©us
==204) {

814 
	`HTRe•⁄£_£tCachabÀ
(
ª•⁄£
, 
HT_CACHE_ALL
);

815 
me
->
èrgë
 = 
	`HTSåómSèck
(
WWW_MIME_HEAD
,

816 
	`HTReque°_debugF‹m©
(
ªque°
),

817 
	`HTReque°_debugSåóm
(
ªque°
),

818 
ªque°
, 
NO
);

819 } i‡(
me
->
°©us
==206) {

827 
HTRñﬂd
 
ªlﬂd
 = 
	`HTReque°_ªlﬂdMode
(
ªque°
);

828 i‡(
ªlﬂd
 =
HT_CACHE_RANGE_VALIDATE
) {

829 
	`HTRe•⁄£_£tCachabÀ
(
ª•⁄£
, 
HT_CACHE_ALL
);

830 
me
->
èrgë
 = 
	`HTSåómSèck
(
WWW_MIME_PART
,

831 
	`HTReque°_ouçutF‹m©
(
ªque°
),

832 
	`HTReque°_ouçutSåóm
(
ªque°
),

833 
ªque°
, 
NO
);

835 
	`HTAnch‹_˛órHódî
(
	`HTReque°_™ch‹
(
ªque°
));

836 
me
->
èrgë
 = 
	`HTSåómSèck
(
WWW_MIME
,

837 
	`HTReque°_ouçutF‹m©
(
ªque°
),

838 
	`HTReque°_ouçutSåóm
(
ªque°
),

839 
ªque°
, 
NO
);

841 } i‡(
me
->
°©us
==304) {

842 
	`HTRe•⁄£_£tCachabÀ
(
ª•⁄£
, 
HT_CACHE_NOT_MODIFIED
);

843 
me
->
èrgë
 = 
	`HTSåómSèck
(
WWW_MIME_HEAD
,

844 
	`HTReque°_debugF‹m©
(
ªque°
),

845 
	`HTReque°_debugSåóm
(
ªque°
),

846 
ªque°
, 
NO
);

847 } i‡(
	`HTReque°_debugSåóm
(
ªque°
)) {

848 
	`HTRe•⁄£_£tCachabÀ
(
ª•⁄£
,

849 (
me
->
°©us
 =201Ë? 
HT_CACHE_ETAG
 : 
HT_NO_CACHE
);

850 
me
->
èrgë
 = 
	`HTSåómSèck
(
WWW_MIME
,

851 
	`HTReque°_debugF‹m©
(
ªque°
),

852 
	`HTReque°_debugSåóm
(
ªque°
),

853 
ªque°
, 
NO
);

859 
	`HTRe•⁄£_£tCachabÀ
(
ª•⁄£
,

860 (
me
->
°©us
 =201Ë? 
HT_CACHE_ETAG
 : 
HT_NO_CACHE
);

861 
me
->
èrgë
 = 
	`HTSåómSèck
(
WWW_MIME
,

862 
	`HTReque°_debugF‹m©
(
ªque°
),

863 
	`HTReque°_debugSåóm
(
ªque°
),

864 
ªque°
, 
NO
);

867 i‡(!
me
->
èrgë
Ëme->èrgë = 
	`HTEº‹Såóm
();

868 
	`HTTPNextSèã
(
me
);

869 
me
->
å™•¨ít
 = 
YES
;

870 i‡(
Àngth
 > 0Ë
	`HTHo°_£tC⁄sumed
(
	`HTNë_ho°
(
	`HTReque°_√t
(
me
->
ªque°
)),Üength);

871  
HT_OK
;

872 
	}
}

878 
PRIVATE
 
	$HTTPSètus_put_block
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
)

880 
°©us
 = 
HT_OK
;

881 
Àngth
 = 
l
;

882 
me
->
°¨tLí
 = me->
buÊí
;

883 !
me
->
å™•¨ít
 && 
l
-- > 0) {

884 i‡(
me
->
öfo_èrgë
) {

887 
°©us
 = (*
me
->
öfo_èrgë
->
iß
->
put_block
)(me->öfo_èrgë, 
b
, 
l
+1);

888 i‡(
°©us
 !
HT_CONTINUE
)  status;

891 (*
me
->
öfo_èrgë
->
iß
->
_‰ì
)(me->info_target);

892 
me
->
öfo_èrgë
 = 
NULL
;

895 
l
 = 
	`HTHo°_ªmaöögRód
(
	`HTNë_ho°
(
	`HTReque°_√t
(
me
->
ªque°
)));

896 
b
 +(
Àngth
-
l
);

897 
Àngth
 = 
l
;

898 i‡(
l
 <= 0) ;

901 *(
me
->
buf„r
+me->
buÊí
++Ë*
b
;

902 i‡(
me
->
°©e
 =
EOL_FCR
) {

903 i‡(*
b
 =
LF
) {

904 i‡((
°©us
 = 
	`°ªam_pùe
(
me
, 
Àngth
-
l
)Ë!
HT_OK
)  status;

906 
me
->
°©e
 = 
EOL_BEGIN
;

908 } i‡(*
b
 =
CR
) {

909 
me
->
°©e
 = 
EOL_FCR
;

910 } i‡(*
b
 =
LF
) {

911 i‡((
°©us
 = 
	`°ªam_pùe
(
me
, 
Àngth
-
l
)Ë!
HT_OK
)  status;

913 i‡(
me
->
buÊí
 >
MAX_STATUS_LEN
) {

914 i‡((
°©us
 = 
	`°ªam_pùe
(
me
, 
Àngth
-
l
)Ë!
HT_OK
)  status;

917 
b
++;

921 i‡(!
me
->
å™•¨ít
 && 
Àngth
 !
l
)

922 
	`HTHo°_£tC⁄sumed
(
	`HTNë_ho°
(
	`HTReque°_√t
(
me
->
ªque°
)), 
Àngth
-
l
);

924 i‡(
l
 > 0Ë 
	`PUTBLOCK
(
b
,Ü);

925  
°©us
;

926 
	}
}

928 
PRIVATE
 
	$HTTPSètus_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

930  
	`HTTPSètus_put_block
(
me
, 
s
, (Ë
	`°æí
(s));

931 
	}
}

933 
PRIVATE
 
	$HTTPSètus_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

935  
	`HTTPSètus_put_block
(
me
, &
c
, 1);

936 
	}
}

938 
PRIVATE
 
	$HTTPSètus_Êush
 (
HTSåóm
 * 
me
)

940  (*
me
->
èrgë
->
iß
->
Êush
)(me->target);

941 
	}
}

943 
PRIVATE
 
	$HTTPSètus_‰ì
 (
HTSåóm
 * 
me
)

945 
°©us
 = 
HT_OK
;

946 i‡(
me
->
èrgë
) {

947 i‡((
°©us
 = (*
me
->
èrgë
->
iß
->
_‰ì
)(me->èrgë))==
HT_WOULD_BLOCK
)

948  
HT_WOULD_BLOCK
;

950 
	`HT_FREE
(
me
);

951  
°©us
;

952 
	}
}

954 
PRIVATE
 
	$HTTPSètus_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

956 i‡(
me
->
èrgë
)

957 
ABORT_TARGET
;

958 
	`HT_FREE
(
me
);

959 
	`HTTRACE
(
PROT_TRACE
, "HTTPStatus.. ABORTING...\n");

960  
HT_ERROR
;

961 
	}
}

966 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTTPSètusCœss
 =

969 
HTTPSètus_Êush
,

970 
HTTPSètus_‰ì
,

971 
HTTPSètus_ab‹t
,

972 
HTTPSètus_put_ch¨a˘î
,

973 
HTTPSètus_put_°rög
,

974 
HTTPSètus_put_block


977 
PUBLIC
 
HTSåóm
 * 
	$HTTPSètus_√w
 (
HTReque°
 * 
ªque°
,

978 * 
∑øm
,

979 
HTF‹m©
 
öput_f‹m©
,

980 
HTF‹m©
 
ouçut_f‹m©
,

981 
HTSåóm
 * 
ouçut_°ªam
)

983 
HTSåóm
 * 
me
;

984 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

985 
	`HT_OUTOFMEM
("HTTPStatus_new");

986 
me
->
iß
 = &
HTTPSètusCœss
;

987 i‡(
ªque°
) {

988 
HTNë
 * 
√t
 = 
	`HTReque°_√t
(
ªque°
);

990 
hâp_öfo
 * 
hâp
 = (hâp_öfÿ*Ë
	`HTNë_c⁄ãxt
(
√t
);

991 
me
->
ªque°
 =Ñequest;

992 
me
->
hâp
 = http;

993 
hâp
->
√xt
 = 
HTTP_ERROR
;

994 
me
->
°©e
 = 
EOL_BEGIN
;

995  
me
;

997  
	`HTEº‹Såóm
();

998 
	}
}

1012 
PRIVATE
 
HTTPEvít
 (
SOCKET
 
soc
, * 
pVoid
, 
HTEvítTy≥
 
ty≥
);

1014 
PUBLIC
 
	$HTLﬂdHTTP
 (
SOCKET
 
soc
, 
HTReque°
 * 
ªque°
)

1016 
hâp_öfo
 *
hâp
;

1017 
HTP¨ítAnch‹
 *
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

1018 
HTNë
 * 
√t
 = 
	`HTReque°_√t
(
ªque°
);

1025 
	`HTTRACE
(
PROT_TRACE
, "HTTP........ Lookög f‹ `%s\'\n" 
_


1026 
	`HTAnch‹_physiˇl
(
™ch‹
));

1027 i‡((
hâp
 = (
hâp_öfo
 *Ë
	`HT_CALLOC
(1, (hâp_öfo))Ë=
NULL
)

1028 
	`HT_OUTOFMEM
("HTLoadHTTP");

1029 
hâp
->
√t
 =Çet;

1030 
hâp
->
ªque°
 =Ñequest;

1031 
	`HTNë_£tC⁄ãxt
(
√t
, 
hâp
);

1032 
	`HTNë_£tEvítCÆlback
(
√t
, 
HTTPEvít
);

1033 
	`HTNë_£tEvítP¨am
(
√t
, 
hâp
);

1035  
	`HTTPEvít
(
soc
, 
hâp
, 
HTEvít_BEGIN
);

1036 
	}
}

1038 
PRIVATE
 
	$FlushPutEvít
 (
HTTimî
 * 
timî
, * 
∑øm
, 
HTEvítTy≥
 
ty≥
)

1040 
hâp_öfo
 * 
hâp
 = (hâp_öfÿ*Ë
∑øm
;

1041 
HTSåóm
 * 
öput
 = 
	`HTReque°_öputSåóm
(
hâp
->
ªque°
);

1042 
HTPo°CÆlback
 * 
pcbf
 = 
	`HTReque°_po°CÆlback
(
hâp
->
ªque°
);

1043 
°©us
 = 
HT_ERROR
;

1045 
hâp
->
u£dTimî
 = 
YES
;

1046 i‡(
timî
 !
hâp
->timer)

1047 
	`HTDEBUGBREAK
("HTTPÅimî %∞nŸ i¿sync\n" 
_
 
timî
);

1048 
	`HTTRACE
(
PROT_TRACE
, "U∂ﬂdög... Flushög %∞wôhÅimî %p\n" 
_
 
hâp
 _ 
timî
);

1055 i‡(
hâp
 && 
öput
 && 
pcbf
) {

1056 
°©us
 = (*
pcbf
)(
hâp
->
ªque°
, 
öput
);

1057 
	`HTTRACE
(
PROT_TRACE
, "U∂ﬂdög... CÆlbackÑëu∫ed %d\n" 
_
 
°©us
);

1065 i‡(
°©us
 !
HT_OK
) {

1066 
	`HTTimî_dñëe
(
hâp
->
timî
);

1067 
hâp
->
timî
 = 
NULL
;

1068 } i‡(!
hâp
->
ª≥tôive_wrôög
) {

1069 
hâp
->
timî
 = 
	`HTTimî_√w
(
NULL
, 
FlushPutEvít
, hâp, 
HTRïótWrôe
, 
YES
, YES);

1070 
hâp
->
ª≥tôive_wrôög
 = 
YES
;

1072  
HT_OK
;

1073 
	}
}

1075 
PRIVATE
 
	$HTTPEvít
 (
SOCKET
 
soc
, * 
pVoid
, 
HTEvítTy≥
 
ty≥
)

1077 
hâp_öfo
 * 
hâp
 = (hâp_öfÿ*)
pVoid
;

1078 
°©us
 = 
HT_ERROR
;

1079 
HTNë
 * 
√t
 = 
hâp
->net;

1080 
HTReque°
 * 
ªque°
 = 
	`HTNë_ªque°
(
√t
);

1081 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

1082 
HTHo°
 * 
ho°
 = 
	`HTNë_ho°
(
√t
);

1087 i‡(
ty≥
 =
HTEvít_BEGIN
) {

1088 
hâp
->
√xt
 = 
HTTP_OK
;

1089 
hâp
->
ªsu…
 = 
HT_ERROR
;

1090 } i‡(
ty≥
 =
HTEvít_CLOSE
) {

1091 
ªad_Àn
 = 
	`HTNë_byãsRód
(
√t
);

1092 
doc_Àn
 = 
	`HTAnch‹_Àngth
(
™ch‹
);

1100 i‡(
	`HTHo°_numbîOfOut°™dögNëObje˘s
(
ho°
) == 1 &&

1101 
hâp
->
ªsu…
 !
HT_CONTINUE
 && (
doc_Àn
<0 || doc_Àn==
ªad_Àn
)) {

1102 
	`HTTPCÀ™up
(
ªque°
, 
hâp
->
ªsu…
);

1104 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_INTERRUPTED
,

1105 
NULL
, 0, "HTLoadHTTP");

1106 
	`HTTPCÀ™up
(
ªque°
, 
HT_INTERRUPTED
);

1108  
HT_OK
;

1109 } i‡(
ty≥
 =
HTEvít_TIMEOUT
) {

1110 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_TIME_OUT
,

1111 
NULL
, 0, "HTLoadHTTP");

1112 
	`HTTPCÀ™up
(
ªque°
, 
HT_TIMEOUT
);

1113  
HT_OK
;

1114 } i‡(
ty≥
 =
HTEvít_END
) {

1115 
	`HTTPCÀ™up
(
ªque°
, 
hâp
->
ªsu…
);

1116  
HT_OK
;

1117 } i‡(
ty≥
 =
HTEvít_RESET
) {

1118 
	`HTTPCÀ™up
(
ªque°
, 
HT_RECOVER_PIPE
);

1119 
hâp
->
°©e
 = 
HTTP_BEGIN
;

1120  
HT_OK
;

1125 
hâp
->
°©e
) {

1126 
HTTP_BEGIN
:

1127 
°©us
 = 
	`HTHo°_c⁄√˘
(
ho°
, 
√t
, 
	`HTAnch‹_physiˇl
(
™ch‹
));

1128 
ho°
 = 
	`HTNë_ho°
(
√t
);

1129 i‡(
°©us
 =
HT_OK
) {

1137 * 
s_˛ass
 = 
	`HTHo°_˛ass
(
ho°
);

1138 i‡(!
s_˛ass
) {

1139 i‡(
	`HTReque°_¥oxy
(
ªque°
Ë=
NULL
) {

1140 
HTAssocLi°
 * 
Æi°
 = 
	`HTReque°_c⁄√˘i⁄
(
ªque°
);

1141 i‡(!(
Æi°
 && 
	`HTAssocLi°_födObje˘
(alist, "close")))

1142 
	`HTReque°_addC⁄√˘i⁄
(
ªque°
, "Keep-Alive", "");

1144 
	`HTHo°_£tCœss
(
ho°
, "http");

1145 } i‡(
	`°rˇ£comp
(
s_˛ass
, "http")) {

1146 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_CLASS
,

1147 
NULL
, 0, "HTLoadHTTP");

1148 
hâp
->
°©e
 = 
HTTP_ERROR
;

1153 i‡(
C⁄√˘i⁄Mode
 & 
HTTP_11_NO_PIPELINING
) {

1154 
	`HTTRACE
(
PROT_TRACE
, "HTTP........ Mode is HTTP/1.1 WITH NO PIPELINING\n");

1155 
	`HTReque°_£tFlush
(
ªque°
, 
YES
);

1156 } i‡(
C⁄√˘i⁄Mode
 & 
HTTP_FORCE_10
) {

1157 
	`HTTRACE
(
PROT_TRACE
, "HTTP........ Mode is FORCE HTTP/1.0\n");

1158 
	`HTHo°_£tVîsi⁄
(
ho°
, 
HTTP_10
);

1161 i‡(
	`HTNë_¥ìm±ive
(
√t
)) {

1162 
	`HTTRACE
(
PROT_TRACE
, "HTTP........ Force flush onÖreemptiveÜoad\n");

1163 
	`HTReque°_£tFlush
(
ªque°
, 
YES
);

1167 
hâp
->
°©e
 = 
HTTP_NEED_STREAM
;

1168 } i‡(
°©us
 =
HT_WOULD_BLOCK
 || sètu†=
HT_PENDING
) {

1169  
HT_OK
;

1170 } i‡(
°©us
 =
HT_NO_HOST
) {

1171 
hâp
->
ªsu…
 = 
HT_NO_HOST
;

1172 
hâp
->
°©e
 = 
HTTP_ERROR
;

1174 
hâp
->
°©e
 = 
HTTP_ERROR
;

1177 
HTTP_NEED_STREAM
:

1189 
HTSåóm
 * 
me
 = 
	`HTNë_ªadSåóm
–
√t
 );

1190 i‡–
me
 =
NULL
 ) {

1191 
me
 = 
	`HTSåómSèck
(
WWW_HTTP
,

1192 
	`HTReque°_ouçutF‹m©
(
ªque°
),

1193 
	`HTReque°_ouçutSåóm
(
ªque°
),

1194 
ªque°
, 
YES
);

1195 #ifde‡
HTDEBUG


1196 i‡(
PROT_TRACE
) {

1197 i‡(!
htÂ
ËhtÂ = 
	`f›í
(
HTTP_OUTPUT
, "ab");

1198 i‡(
htÂ
) {

1199 
me
 = 
	`HTTì
(me, 
	`HTFWrôî_√w
(
ªque°
, 
htÂ
, 
YES
), 
NULL
);

1200 
	`HTTRACE
(
PROT_TRACE
, "HTTP........ DumpögÑe•⁄£Åÿ`%s\'\n" 
_
 
HTTP_OUTPUT
);

1205 
	`HTNë_£tRódSåóm
(
√t
, 
me
);

1207 
	`HTReque°_£tOuçutC⁄√˘ed
(
ªque°
, 
YES
);

1215 
HTCh™√l
 * 
ch™√l
 = 
	`HTHo°_ch™√l
(
ho°
);

1216 
HTOuçutSåóm
 * 
ouçut
 = 
	`HTCh™√l_gëCh™√lOSåóm
(
ch™√l
);

1217 
vîsi⁄
 = 
	`HTHo°_vîsi⁄
(
ho°
);

1218 
HTSåóm
 * 
≠p
 = 
NULL
;

1220 #ifde‡
HTDEBUG


1221 i‡(
PROT_TRACE
) {

1222 i‡(!
htÂ
ËhtÂ = 
	`f›í
(
HTTP_OUTPUT
, "ab");

1223 i‡(
htÂ
) {

1224 
ouçut
 = (
HTOuçutSåóm
 *)

1225 
	`HTTì
((
HTSåóm
 *Ë
ouçut
, 
	`HTFWrôî_√w
(
ªque°
, 
htÂ
, 
YES
), 
NULL
);

1226 
	`HTTRACE
(
PROT_TRACE
, "HTTP........ DumpögÑeque°Åÿ`%s\'\n" 
_
 
HTTP_OUTPUT
);

1230 
≠p
 = 
	`HTMëhod_hasE¡ôy
(
	`HTReque°_mëhod
(
ªque°
)) ?

1231 
	`HTMIMEReque°_√w
(
ªque°
,

1232 
	`HTTPReque°_√w
(
ªque°
, (
HTSåóm
 *Ë
ouçut
, 
NO
,

1233 
vîsi⁄
),

1234 
YES
) :

1235 
	`HTTPReque°_√w
(
ªque°
, (
HTSåóm
 *Ë
ouçut
, 
YES
, 
vîsi⁄
);

1236 
	`HTReque°_£tI≈utSåóm
(
ªque°
, 
≠p
);

1245 i‡(
	`HTReque°_isDe°ö©i⁄
(
ªque°
)) {

1246 
	`HTHo°_ªgi°î
(
ho°
, 
√t
, 
HTEvít_READ
);

1247 
	`HTReque°_lökDe°ö©i⁄
(
ªque°
);

1249 
hâp
->
°©e
 = 
HTTP_CONNECTED
;

1250 
ty≥
 = 
HTEvít_WRITE
;

1254 
HTTP_CONNECTED
:

1255 i‡(
ty≥
 =
HTEvít_WRITE
) {

1256 
HTSåóm
 * 
öput
 = 
	`HTReque°_öputSåóm
(
ªque°
);

1257 
HTPo°CÆlback
 * 
pcbf
 = 
	`HTReque°_po°CÆlback
(
ªque°
);

1258 
°©us
 = 
	`HTReque°_Êush
(
ªque°
) ?

1259 
	`HTHo°_f‹˚Flush
(
ho°
Ë: (*
öput
->
iß
->
Êush
)(input);

1271 i‡((
°©us
 !
HT_ERROR
Ë&& sètu†!
HT_CLOSED
) {

1272 i‡(
pcbf
) {

1273 i‡(
hâp
->
lock
 =
NO
) {

1274 
ªåys
 = 
	`HTReque°_ªåys
(
ªque°
);

1275 
ms_t
 
dñay
 = 
ªåys
 > 3 ? 
HTSec⁄dWrôeDñay
 : 
HTFú°WrôeDñay
;

1276 i‡(!
hâp
->
timî
 && !hâp->
u£dTimî
) {

1277 
hâp
->
timî
 = 
	`HTTimî_√w
(
NULL
, 
FlushPutEvít
,

1278 
hâp
, 
dñay
, 
YES
, 
NO
);

1279 
	`HTTRACE
(
PROT_TRACE
, "U∂ﬂdög... Hﬁdög %∞f‹ %lu m†usögÅimê%p\n" 
_


1280 
hâp
 
_
 
dñay
 _ hâp->
timî
);

1281 
	`HTHo°_ªgi°î
(
ho°
, 
√t
, 
HTEvít_READ
);

1283 
hâp
->
lock
 = 
YES
;

1285 
ty≥
 = 
HTEvít_READ
;

1292 
	`HTHo°_œunchPídög
(
ho°
);

1293 
ty≥
 = 
HTEvít_READ
;

1298 i‡(
°©us
 =
HT_WOULD_BLOCK
)

1299  
HT_OK
;

1300 i‡(
°©us
 =
HT_PAUSE
 || sètu†=
HT_LOADED
) {

1301 
ty≥
 = 
HTEvít_READ
;

1302 } i‡(
°©us
==
HT_ERROR
)

1303 
hâp
->
°©e
 = 
HTTP_RECOVER_PIPE
;

1304 } i‡(
ty≥
 =
HTEvít_FLUSH
) {

1305 
HTSåóm
 * 
öput
 = 
	`HTReque°_öputSåóm
(
ªque°
);

1306 i‡(
öput
 =
NULL
)

1307  
HT_ERROR
;

1308  (*
öput
->
iß
->
Êush
)(input);

1309 } i‡(
ty≥
 =
HTEvít_READ
) {

1310 
°©us
 = 
	`HTHo°_ªad
(
ho°
, 
√t
);

1311 i‡(
°©us
 =
HT_WOULD_BLOCK
)

1312  
HT_OK
;

1313 i‡(
°©us
 =
HT_CONTINUE
) {

1314 
	`HTTRACE
(
PROT_TRACE
, "HTTP........ Continuing\n");

1315 
hâp
->
lock
 = 
NO
;

1317 } i‡(
°©us
==
HT_LOADED
)

1318 
hâp
->
°©e
 = hâp->
√xt
;

1319 i‡(
°©us
==
HT_CLOSED
)

1320 
hâp
->
°©e
 = 
HTTP_RECOVER_PIPE
;

1321 i‡(
°©us
 =
HT_ERROR
)

1322 
hâp
->
°©e
 = 
HTTP_KILL_PIPE
;

1324 
hâp
->
°©e
 = 
HTTP_ERROR
;

1326 
hâp
->
°©e
 = 
HTTP_ERROR
;

1330 
HTTP_OK
:

1331 
	`HTTPCÀ™up
(
ªque°
, 
hâp
->
ªsu…
);

1332  
HT_OK
;

1335 
HTTP_RECOVER_PIPE
:

1342 i‡(
	`HTHo°_isPîsi°ít
(
ho°
Ë&& !
	`HTHo°_˛o£NŸifiˇti⁄
(host)) {

1343 i‡(
ho°
 =
NULL
Ë 
HT_ERROR
;

1344 
	`HTReque°_£tFlush
(
ªque°
, 
YES
);

1351 i‡(
	`HTHo°_ªcovîPùe
(
ho°
Ë!
YES
) {

1352 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_BAD_REPLY
,

1353 
NULL
, 0, "HTTPEvent");

1354 
hâp
->
°©e
 = 
HTTP_KILL_PIPE
;

1357  
HT_OK
;

1359 
hâp
->
°©e
 = 
HTTP_OK
;

1363 
HTTP_KILL_PIPE
:

1364 i‡(
ho°
 =
NULL
Ë 
HT_ERROR
;

1365 
	`HTHo°_kûlPùe
(
ho°
);

1366  
HT_OK
;

1369 
HTTP_ERROR
:

1370 
	`HTTPCÀ™up
(
ªque°
, 
hâp
->
ªsu…
);

1371  
HT_OK
;

1375 
	`HTDEBUGBREAK
("Bad hâ∞°©ê%d\n" 
_
 
hâp
->
°©e
);

1378 
	}
}

1380 
PUBLIC
 
	$HTTP_£tC⁄√˘i⁄Mode
 (
HTTPC⁄√˘i⁄Mode
 
mode
)

1382 
C⁄√˘i⁄Mode
 = 
mode
;

1383 
	}
}

1385 
PUBLIC
 
HTTPC⁄√˘i⁄Mode
 
	$HTTP_c⁄√˘i⁄Mode
 ()

1387  
C⁄√˘i⁄Mode
;

1388 
	}
}

1390 
PUBLIC
 
BOOL
 
	$HTTP_£tBodyWrôeDñay
 (
ms_t
 
fú°_åy
, ms_à
£c⁄d_åy
)

1392 i‡(
fú°_åy
 > 20 && 
£c⁄d_åy
 >= first_try) {

1393 
HTFú°WrôeDñay
 = 
fú°_åy
;

1394 
HTSec⁄dWrôeDñay
 = 
£c⁄d_åy
;

1395  
YES
;

1397  
NO
;

1398 
	}
}

1400 
PUBLIC
 
	$HTTP_bodyWrôeDñay
 (
ms_t
 * 
fú°_åy
, ms_à* 
£c⁄d_åy
)

1402 *
fú°_åy
 = 
HTFú°WrôeDñay
;

1403 *
£c⁄d_åy
 = 
HTSec⁄dWrôeDñay
;

1404 
	}
}

	@Library/src/HTTP.h

26 #i‚de‡
HTTP_H


27 
	#HTTP_H


	)

29 
	~"HTPrŸ.h
"

30 
	~"HTSåóm.h
"

41 
	e_HTTPC⁄√˘i⁄Mode
 {

42 
	mHTTP_11_PIPELINING
 = 0x1,

43 
	mHTTP_11_NO_PIPELINING
 = 0x2,

44 
	mHTTP_11_MUX
 = 0x4,

45 
	mHTTP_FORCE_10
 = 0x8

46 } 
	tHTTPC⁄√˘i⁄Mode
;

48 
HTTP_£tC⁄√˘i⁄Mode
 (
HTTPC⁄√˘i⁄Mode
 
mode
);

49 
HTTPC⁄√˘i⁄Mode
 
HTTP_c⁄√˘i⁄Mode
 ();

71 
BOOL
 
HTTP_£tBodyWrôeDñay
 (
ms_t
 
fú°_åy
, ms_à
£c⁄d_åy
);

72 
HTTP_bodyWrôeDñay
 (
ms_t
 * 
fú°_åy
, ms_à* 
£c⁄d_åy
);

83 
HTPrŸCÆlback
 
HTLﬂdHTTP
;

84 
HTC⁄vîãr
 
HTTPSètus_√w
;

	@Library/src/HTTPGen.c

19 
	~"wwwsys.h
"

20 
	~"WWWUtû.h
"

21 
	~"WWWC‹e.h
"

22 
	~"HTHódî.h
"

23 
	~"HTTPUtû.h
"

24 
	~"HTF‹m©.h
"

25 
	~"HTTPReq.h
"

27 
	#MIME_VERSION
 "MIME/1.0"

	)

29 
	#PUTC
(
c
Ë(*
me
->
èrgë
->
iß
->
put_ch¨a˘î
)(me->èrgë, c)

	)

30 
	#PUTS
(
s
Ë(*
me
->
èrgë
->
iß
->
put_°rög
)(me->èrgë, s)

	)

31 
	#PUTBLOCK
(
b
, 
l
Ë(*
me
->
èrgë
->
iß
->
put_block
)(me->èrgë, b,Ü)

	)

33 
	#LINEBUF_LENGTH
 256

	)

35 
	s_HTSåóm
 {

36 c⁄° 
HTSåómCœss
 * 
	miß
;

37 
HTSåóm
 * 
	mèrgë
;

38 
HTReque°
 * 
	mªque°
;

39 
	mvîsi⁄
;

40 
BOOL
 
	mídHódî
;

41 
BOOL
 
	må™•¨ít
;

52 
PRIVATE
 
	$HTTPGíMake
 (
HTSåóm
 * 
me
, 
HTReque°
 * 
ªque°
)

54 
löebuf
[
LINEBUF_LENGTH
];

55 
¸lf
[3];

56 
HTGnHd
 
gí_mask
 = 
	`HTReque°_gnHd
(
ªque°
);

57 *
¸lf
 = 
CR
; *(¸lf+1Ë
LF
; *(crlf+2) = '\0';

58 i‡(
gí_mask
 & 
HT_G_CC
) {

59 
HTAssocLi°
 * 
cur
 = 
	`HTReque°_ˇcheC⁄åﬁ
(
ªque°
);

60 i‡(
cur
) {

61 
BOOL
 
fú°
=
YES
;

62 
HTAssoc
 * 
¥es
;

63 (
¥es
 = (
HTAssoc
 *Ë
	`HTAssocLi°_√xtObje˘
(
cur
))) {

64 * 
vÆue
 = 
	`HTAssoc_vÆue
(
¥es
);

65 i‡(
fú°
) {

66 
	`PUTS
("Cache-Control: ");

67 
fú°
 = 
NO
;

69 
	`PUTC
(',');

72 
	`PUTS
(
	`HTAssoc_«me
(
¥es
));

75 i‡(*
vÆue
) {

76 
	`PUTS
("=");

77 
	`PUTS
(
vÆue
);

80 
	`PUTBLOCK
(
¸lf
, 2);

83 i‡(
gí_mask
 & 
HT_G_CONNECTION
) {

84 
HTAssocLi°
 * 
cur
 = 
	`HTReque°_c⁄√˘i⁄
(
ªque°
);

85 i‡(
cur
) {

86 
BOOL
 
fú°
=
YES
;

87 
HTAssoc
 * 
¥es
;

88 (
¥es
 = (
HTAssoc
 *Ë
	`HTAssocLi°_√xtObje˘
(
cur
))) {

89 * 
vÆue
 = 
	`HTAssoc_vÆue
(
¥es
);

90 i‡(
fú°
) {

91 
	`PUTS
("Connection: ");

92 
fú°
 = 
NO
;

94 
	`PUTC
(',');

97 
	`PUTS
(
	`HTAssoc_«me
(
¥es
));

100 i‡(*
vÆue
) {

101 
	`PUTS
("=");

102 
	`PUTS
(
vÆue
);

105 
	`PUTBLOCK
(
¸lf
, 2);

108 i‡(
gí_mask
 & 
HT_G_DATE
) {

109 
time_t
 
loˇl
 = 
	`HTReque°_d©e
(
ªque°
);

110 
	`•rötf
(
löebuf
, "D©e: %s%c%c", 
	`HTD©eTimeSå
(&
loˇl
, 
NO
), 
CR
,
LF
);

111 
	`PUTBLOCK
(
löebuf
, (Ë
	`°æí
(linebuf));

113 i‡(
gí_mask
 & 
HT_G_FORWARDED
) {

116 i‡(
gí_mask
 & 
HT_G_PRAGMA_NO_CACHE
) {

117 
	`•rötf
(
löebuf
, "Pøgma: %s%c%c", "no-ˇche", 
CR
, 
LF
);

118 
	`PUTBLOCK
(
löebuf
, (Ë
	`°æí
(linebuf));

120 i‡(
gí_mask
 & 
HT_G_MESSAGE_ID
) {

121 c⁄° *
msgid
 = 
	`HTMesßgeIdSå
(
	`HTReque°_u£rProfûe
(
ªque°
));

122 i‡(
msgid
) {

123 
	`•rötf
(
löebuf
, "Mesßge-ID: %s%c%c", 
msgid
, 
CR
, 
LF
);

124 
	`PUTBLOCK
(
löebuf
, (Ë
	`°æí
(linebuf));

127 i‡(
gí_mask
 & 
HT_G_MIME
) {

128 
	`•rötf
(
löebuf
, "MIME-Vîsi⁄: %s%c%c", 
MIME_VERSION
, 
CR
, 
LF
);

129 
	`PUTBLOCK
(
löebuf
, (Ë
	`°æí
(linebuf));

133 i‡(
gí_mask
 & 
HT_G_EXTRA_HEADERS
) {

134 
HTAssocLi°
 * 
cur
 = 
	`HTReque°_exåaHódî
(
ªque°
);

135 i‡(
cur
) {

136 
HTAssoc
 * 
¥es
;

137 (
¥es
 = (
HTAssoc
 *Ë
	`HTAssocLi°_√xtObje˘
(
cur
))) {

138 * 
«me
 = 
	`HTAssoc_«me
(
¥es
);

139 * 
vÆue
 = 
	`HTAssoc_vÆue
(
¥es
);

140 i‡(
«me
 && *name) {

141 * 
±r
 = 
«me
;

142 *
±r
) {

143 i‡(
	`is•a˚
(*
±r
)) *ptr='_';

144 
±r
++;

146 
	`PUTS
(
«me
);

147 
	`PUTS
(": ");

148 i‡(
vÆue
) {

149 
±r
 = 
vÆue
;

150 *
±r
) {

151 i‡(
	`is•a˚
(*
±r
)) *ptr=' ';

152 
±r
++;

154 
	`PUTS
(
vÆue
);

156 
	`PUTBLOCK
(
¸lf
, 2);

164 
HTLi°
 * 
li°
;

165 
BOOL
 
ovîride
;

166 i‡((
li°
 = 
	`HTReque°_gíî©‹
(
ªque°
, &
ovîride
))) {

167 
HTLi°
 *
loˇl
 = 
li°
;

168 
HTPo°CÆlback
 *
¥es
;

169 
	`HTTRACE
(
STREAM_TRACE
, "HTTPGen..... ExtraÜocal\n");

170 (
¥es
 = (
HTPo°CÆlback
 *Ë
	`HTLi°_√xtObje˘
(
loˇl
)))

171 (*
¥es
)(
ªque°
, 
me
->
èrgë
);

172 } i‡(!
ovîride
 && (
li°
 = 
	`HTHódî_gíî©‹
())) {

173 
HTLi°
 *
globÆ
 = 
li°
;

174 
HTPo°CÆlback
 *
¥es
;

175 
	`HTTRACE
(
STREAM_TRACE
, "HTTPGen..... Extra global\n");

176 (
¥es
 = (
HTPo°CÆlback
 *Ë
	`HTLi°_√xtObje˘
(
globÆ
)))

177 (*
¥es
)(
ªque°
, 
me
->
èrgë
);

185 #ifde‡
HT_EXT


186 i‡(!
	`HTMëhod_hasE¡ôy
(
	`HTReque°_mëhod
(
ªque°
)))

188 * 
body
 = 
	`HTReque°_mesßgeBody
 (
ªque°
);

189 
HTF‹m©
 
bodyF‹m©
 = 
	`HTReque°_mesßgeBodyF‹m©
(
ªque°
);

190 
bodyLígth
 = 
	`HTReque°_mesßgeBodyLígth
(
ªque°
);

193 i‡(
body
 && *body) {

194 i‡–
bodyLígth
>0 ) {

195 
	`HTTRACE
(
STREAM_TRACE
, "HTTPGen..... Adding Content-Length \n");

196 
	`•rötf
 (
löebuf
,"C⁄ã¡-Lígth: %ld%c%c", 
bodyLígth
, 
CR
,
LF
);

197 
	`PUTBLOCK
(
löebuf
, (Ë
	`°æí
(linebuf));

199 i‡–
bodyF‹m©
 !
NULL
 ) {

200 
	`HTTRACE
(
STREAM_TRACE
, "HTTPGen..... Adding Content-Type \n");

201 
	`PUTS
 ("Content-Type: ");

202 
	`PUTS
 (
	`HTAtom_«me
(
bodyF‹m©
));

203 
	`PUTBLOCK
(
¸lf
,2);

205 
	`HT_FREE
 (
body
);

212 i‡(
me
->
ídHódî
) {

213 
	`•rötf
(
löebuf
, "%c%c", 
CR
, 
LF
);

214 
	`PUTBLOCK
(
löebuf
, (Ë
	`°æí
(linebuf));

222 #ifde‡
HT_EXT


223 i‡(!
	`HTMëhod_hasE¡ôy
(
	`HTReque°_mëhod
(
ªque°
)))

225 * 
body
 = 
	`HTReque°_mesßgeBody
 (
ªque°
);

226 i‡(
body
 && *body) {

227 
	`HTTRACE
(
STREAM_TRACE
, "HTTPGen..... Adding message body \n");

228 
	`PUTBLOCK
 (
body
, (Ë
	`°æí
 (body));

229 
	`HT_FREE
 (
body
);

234 
	`HTTRACE
(
PROT_TRACE
, "HTTP........ Generating General Headers\n");

235  
HT_OK
;

236 
	}
}

238 
PRIVATE
 
	$HTTPGí_put_block
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
)

240 i‡(
me
->
å™•¨ít
)

241  
b
 ? 
	`PUTBLOCK
(b, 
l
Ë: 
HT_OK
;

243 
	`HTTPGíMake
(
me
, me->
ªque°
);

244 
me
->
å™•¨ít
 = 
YES
;

245  
b
 ? 
	`PUTBLOCK
(b, 
l
Ë: 
HT_OK
;

247 
	}
}

249 
PRIVATE
 
	$HTTPGí_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

251  
	`HTTPGí_put_block
(
me
, &
c
, 1);

252 
	}
}

254 
PRIVATE
 
	$HTTPGí_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

256  
	`HTTPGí_put_block
(
me
, 
s
, 
	`°æí
(s));

257 
	}
}

262 
PRIVATE
 
	$HTTPGí_Êush
 (
HTSåóm
 * 
me
)

264 
°©us
 = 
	`HTTPGí_put_block
(
me
, 
NULL
, 0);

265  
°©us
==
HT_OK
 ? (*
me
->
èrgë
->
iß
->
Êush
)(me->target) : status;

266 
	}
}

271 
PRIVATE
 
	$HTTPGí_‰ì
 (
HTSåóm
 * 
me
)

273 
°©us
 = 
	`HTTPGí_Êush
(
me
);

274 i‡(
°©us
 !
HT_WOULD_BLOCK
) {

275 i‡((
°©us
 = (*
me
->
èrgë
->
iß
->
_‰ì
)(me->èrgë)Ë=
HT_WOULD_BLOCK
)

276  
HT_WOULD_BLOCK
;

277 
	`HT_FREE
(
me
);

279  
°©us
;

280 
	}
}

282 
PRIVATE
 
	$HTTPGí_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

284 
	`HTTRACE
(
PROT_TRACE
, "HTTPGen..... ABORTING...\n");

285 i‡(
me
) {

286 i‡(
me
->
èrgë
Ë(*me->èrgë->
iß
->
ab‹t
)(me->èrgë, 
e
);

287 
	`HT_FREE
(
me
);

289  
HT_ERROR
;

290 
	}
}

295 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTTPGíCœss
 =

298 
HTTPGí_Êush
,

299 
HTTPGí_‰ì
,

300 
HTTPGí_ab‹t
,

301 
HTTPGí_put_ch¨a˘î
,

302 
HTTPGí_put_°rög
,

303 
HTTPGí_put_block


306 
PUBLIC
 
HTSåóm
 * 
	$HTTPGí_√w
 (
HTReque°
 * 
ªque°
, 
HTSåóm
 * 
èrgë
,

307 
BOOL
 
ídHódî
, 
vîsi⁄
)

309 
HTSåóm
 * 
me
;

310 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

311 
	`HT_OUTOFMEM
("HTTPGen_new");

312 
me
->
iß
 = &
HTTPGíCœss
;

313 
me
->
èrgë
 =Åarget;

314 
me
->
ªque°
 =Ñequest;

315 
me
->
ídHódî
 =ÉndHeader;

316 
me
->
å™•¨ít
 = 
NO
;

324 
me
->
vîsi⁄
 = version;

325 i‡(
me
->
vîsi⁄
 =
HTTP_10
 && 
	`HTReque°_¥oxy
(
ªque°
Ë=
NULL
) {

326 
HTAssocLi°
 * 
Æi°
 = 
	`HTReque°_c⁄√˘i⁄
(
ªque°
);

327 i‡(!(
Æi°
 && 
	`HTAssocLi°_födObje˘
(alist, "close")))

328 
	`HTReque°_addC⁄√˘i⁄
(
ªque°
, "Keep-Alive", "");

334 i‡(
	`HTF‹m©_å™s„rCodög
(Ë!
NULL
 || 
	`HTReque°_å™s„r
(
ªque°
) != NULL)

335 
	`HTReque°_addC⁄√˘i⁄
(
ªque°
, "TE", "");

337  
me
;

338 
	}
}

	@Library/src/HTTPGen.h

28 #i‚de‡
HTTPGEN_H


29 
	#HTTPGEN_H


	)

31 
	~"HTSåóm.h
"

32 
	~"HTReq.h
"

44 
HTSåóm
 * 
HTTPGí_√w
 (
HTReque°
 * 
ªque°
, HTSåóm * 
èrgë
,

45 
BOOL
 
ídHódî
, 
vîsi⁄
);

	@Library/src/HTTPReq.c

16 
	~"wwwsys.h
"

17 
	~"WWWUtû.h
"

18 
	~"WWWC‹e.h
"

20 
	~"HTTPGí.h
"

21 
	~"HTTPUtû.h
"

22 
	~"HTTPReq.h
"

24 
	#PUTC
(
c
Ë(*
me
->
èrgë
->
iß
->
put_ch¨a˘î
)(me->èrgë, c)

	)

25 
	#PUTS
(
s
Ë(*
me
->
èrgë
->
iß
->
put_°rög
)(me->èrgë, s)

	)

26 
	#PUTBLOCK
(
b
, 
l
Ë(*
me
->
èrgë
->
iß
->
put_block
)(me->èrgë, b,Ü)

	)

28 
	s_HTSåóm
 {

29 c⁄° 
HTSåómCœss
 * 
	miß
;

30 
HTSåóm
 * 
	mèrgë
;

31 
HTReque°
 * 
	mªque°
;

32 
SOCKET
 
	msockfd
;

33 
	mvîsi⁄
;

34 
	m°©e
;

35 * 
	muæ
;

36 
BOOL
 
	må™•¨ít
;

47 
PRIVATE
 
	$HTTP09Reque°
 (
HTSåóm
 * 
me
, 
HTReque°
 * 
ªque°
)

49 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

50 * 
addr
 = 
	`HTAnch‹_physiˇl
(
™ch‹
);

51 i‡(!
me
->
uæ
Ëme->uæ = 
	`HTP¨£
(
addr
, "", 
PARSE_PATH
|
PARSE_PUNCTUATION
);

52 i‡(
me
->
°©e
 == 0) {

53 
°©us
 = 
	`PUTS
("GET ");

54 i‡(
°©us
 !
HT_OK
)  status;

55 
me
->
°©e
++;

57 i‡(
me
->
°©e
 == 1) {

58 
°©us
 = 
	`PUTS
(
me
->
uæ
);

59 i‡(
°©us
 !
HT_OK
)  status;

60 
me
->
°©e
++;

62 
	`PUTC
(
CR
);

63 
	`PUTC
(
LF
);

64 
	`HTTRACE
(
PROT_TRACE
, "HTTP........ Generating HTTP/0.9 Request\n");

65  
HT_OK
;

66 
	}
}

72 
PRIVATE
 
	$HTTPMakeReque°
 (
HTSåóm
 * 
me
, 
HTReque°
 * 
ªque°
)

74 
HTMëhod
 
mëhod
 = 
	`HTReque°_mëhod
(
ªque°
);

75 
HTRqHd
 
ªque°_mask
 = 
	`HTReque°_rqHd
(
ªque°
);

76 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

77 * 
ëag
 = 
	`HTAnch‹_ëag
(
™ch‹
);

78 
¸lf
[3];

79 
q°r
[10];

80 *
¸lf
 = 
CR
; *(¸lf+1Ë
LF
; *(crlf+2) = '\0';

83 i‡(
me
->
°©e
 == 0) {

84 i‡(
mëhod
 !
METHOD_INVALID
) {

85 
	`PUTS
(
	`HTMëhod_«me
(
mëhod
));

86 
	`PUTC
(' ');

88 
	`PUTS
("GET ");

89 
me
->
°©e
++;

99 i‡(
me
->
°©e
 == 1) {

100 * 
abs_loˇti⁄
 = 
NULL
;

101 * 
addr
 = 
	`HTAnch‹_physiˇl
(
™ch‹
);

102 * 
loˇti⁄
;

108 
loˇti⁄
 = 
	`HTReque°_deÁu…PutName
 (
ªque°
);

109 i‡(
loˇti⁄
)

111 i‡(
	`HTURL_isAbsﬁuã
 (
loˇti⁄
))

113 * 
ªœtive
;

114 
ªœtive
 = 
	`HTRñ©ive
 (
loˇti⁄
,Üocation);

115 
abs_loˇti⁄
 = 
	`HTP¨£
 (
ªœtive
 + 2, 
addr
, 
PARSE_ALL
);

116 
	`HT_FREE
 (
ªœtive
);

119 
abs_loˇti⁄
 = 
	`HTP¨£
 (
loˇti⁄
, 
addr
, 
PARSE_ALL
);

120 
addr
 = 
abs_loˇti⁄
;

134 i‡(!
	`HTMëhod_isSa„
(
mëhod
)) {

135 * 
loˇti⁄
 = 
	`HTAnch‹_loˇti⁄
(
™ch‹
);

136 i‡(
loˇti⁄
) {

137 i‡(
	`HTURL_isAbsﬁuã
(
loˇti⁄
))

138 
addr
 = 
loˇti⁄
;

145 * 
ba£
 = 
	`HTAnch‹_ba£
(
™ch‹
);

146 
abs_loˇti⁄
 = 
	`HTP¨£
(
loˇti⁄
, 
ba£
, 
PARSE_ALL
);

147 
addr
 = 
abs_loˇti⁄
;

157 i‡(
	`HTReque°_fuŒURI
(
ªque°
))

158 
	`SåAŒocC›y
(
me
->
uæ
, 
addr
);

160 
me
->
uæ
 = 
	`HTP¨£
(
addr
, "", 
PARSE_PATH
 | 
PARSE_PUNCTUATION
);

161 i‡(
mëhod
 =
METHOD_OPTIONS
) {

168 i‡(!
	`°rcmp
(
me
->
uæ
, "/")) *me->url = '*';

171 
	`HT_FREE
(
abs_loˇti⁄
);

172 
me
->
°©e
++;

178 i‡(
me
->
°©e
 == 2) {

179 
°©us
 = 
HT_OK
;

180 i‡((
°©us
 = 
	`PUTS
(
me
->
uæ
)Ë!
HT_OK
)  status;

181 
me
->
°©e
++;

184 
	`Ârötf
(
°dîr
, "Reque°ög '%s'\n", 
me
->
uæ
);

188 
	`PUTC
(' ');

195 i‡(
me
->
vîsi⁄
 =
HTTP_10
)

196 
	`PUTS
(
HTTP_VERSION_10
);

198 
	`PUTS
(
HTTP_VERSION
);

199 
	`PUTBLOCK
(
¸lf
, 2);

202 i‡(
ªque°_mask
 & 
HT_C_ACCEPT_TYPE
) {

203 
HTF‹m©
 
f‹m©
 = 
	`HTReque°_ouçutF‹m©
(
ªque°
);

210 i‡(
f‹m©
 =
WWW_PRESENT
) {

211 
li°
;

212 
HTLi°
 *
cur
;

213 
BOOL
 
fú°
=
YES
;

214 
li°
=0;Üist<2;Üist++) {

215 i‡((!
li°
 && ((
cur
 = 
	`HTF‹m©_c⁄vîsi⁄
()Ë!
NULL
)) ||

216 (
li°
 && ((
cur
 = 
	`HTReque°_c⁄vîsi⁄
(
ªque°
))!=
NULL
))) {

217 
HTPª£¡©i⁄
 * 
¥es
;

218 (
¥es
=(
HTPª£¡©i⁄
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

219 i‡(
¥es
->
ªp_out
==
WWW_PRESENT
 &&Öªs->
quÆôy
<=1.0) {

220 i‡(
fú°
) {

221 
	`PUTS
("Accept: ");

222 
fú°
=
NO
;

224 
	`PUTC
(',');

225 
	`PUTS
(
	`HTAtom_«me
(
¥es
->
ªp
));

226 i‡(
¥es
->
quÆôy
 < 1.0 &&Öres->quality >= 0.0) {

227 
	`•rötf
(
q°r
, ";q=%1.1f", 
¥es
->
quÆôy
);

228 
	`PUTS
(
q°r
);

234 i‡(!
fú°
Ë
	`PUTBLOCK
(
¸lf
, 2);

242 i‡(!
	`HTMIMEM©ch
(
WWW_INTERNAL
, 
f‹m©
)) {

243 
	`PUTS
("Accept: ");

244 
	`PUTS
(
	`HTAtom_«me
(
f‹m©
));

245 
	`PUTBLOCK
(
¸lf
, 2);

249 i‡(
ªque°_mask
 & 
HT_C_ACCEPT_CHAR
) {

250 
li°
;

251 
HTLi°
 *
cur
;

252 
BOOL
 
fú°
=
YES
;

253 
li°
=0;Üist<2;Üist++) {

254 i‡((!
li°
 && ((
cur
 = 
	`HTF‹m©_ch¨£t
()Ë!
NULL
)) ||

255 (
li°
 && ((
cur
 = 
	`HTReque°_ch¨£t
(
ªque°
)Ë!
NULL
))) {

256 
HTAc˚±Node
 *
¥es
;

257 (
¥es
 = (
HTAc˚±Node
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

258 i‡(
fú°
) {

259 
	`PUTS
("Accept-Charset: ");

260 
fú°
=
NO
;

262 
	`PUTC
(',');

263 
	`PUTS
(
	`HTAtom_«me
(
¥es
->
©om
));

264 i‡(
¥es
->
quÆôy
 < 1.0 &&Öres->quality >= 0.0) {

265 
	`•rötf
(
q°r
, ";q=%1.1f", 
¥es
->
quÆôy
);

266 
	`PUTS
(
q°r
);

271 i‡(!
fú°
Ë
	`PUTBLOCK
(
¸lf
, 2);

273 i‡(
ªque°_mask
 & 
HT_C_ACCEPT_ENC
) {

274 
li°
;

275 
HTLi°
 *
cur
;

276 
BOOL
 
fú°
=
YES
;

277 
li°
=0;Üist<2;Üist++) {

278 i‡((!
li°
 && ((
cur
 = 
	`HTF‹m©_c⁄ã¡Codög
()Ë!
NULL
)) ||

279 (
li°
 && ((
cur
 = 
	`HTReque°_ícodög
(
ªque°
)Ë!
NULL
))) {

280 
HTCodög
 * 
¥es
;

281 (
¥es
 = (
HTCodög
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

282 
quÆôy
 = 
	`HTCodög_quÆôy
(
¥es
);

283 i‡(
fú°
) {

284 
	`PUTS
("Accept-Encoding: ");

285 
fú°
 = 
NO
;

287 
	`PUTC
(',');

288 
	`PUTS
(
	`HTCodög_«me
(
¥es
));

289 i‡(
quÆôy
 < 1.0 && quality >= 0.0) {

290 
	`•rötf
(
q°r
, ";q=%1.1f", 
quÆôy
);

291 
	`PUTS
(
q°r
);

296 i‡(!
fú°
Ë
	`PUTBLOCK
(
¸lf
, 2);

298 i‡(
ªque°_mask
 & 
HT_C_ACCEPT_TE
) {

299 
li°
;

300 
HTLi°
 *
cur
;

301 
BOOL
 
fú°
=
YES
;

302 
li°
=0;Üist<2;Üist++) {

303 i‡((!
li°
 && ((
cur
 = 
	`HTF‹m©_å™s„rCodög
()Ë!
NULL
)) ||

304 (
li°
 && ((
cur
 = 
	`HTReque°_å™s„r
(
ªque°
)Ë!
NULL
))) {

305 
HTCodög
 * 
¥es
;

306 (
¥es
 = (
HTCodög
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

307 
quÆôy
 = 
	`HTCodög_quÆôy
(
¥es
);

308 c⁄° * 
codög
 = 
	`HTCodög_«me
(
¥es
);

309 i‡(
fú°
) {

310 
	`PUTS
("TE: ");

311 
fú°
 = 
NO
;

313 
	`PUTC
(',');

316 i‡(!
	`°rˇ£comp
(
codög
, "chunked"))

317 
	`PUTS
("trailers");

319 
	`PUTS
(
codög
);

320 i‡(
quÆôy
 < 1.0 && quality >= 0.0) {

321 
	`•rötf
(
q°r
, ";q=%1.1f", 
quÆôy
);

322 
	`PUTS
(
q°r
);

327 i‡(!
fú°
Ë
	`PUTBLOCK
(
¸lf
, 2);

329 i‡(
ªque°_mask
 & 
HT_C_ACCEPT_LAN
) {

330 
li°
;

331 
HTLi°
 *
cur
;

332 
BOOL
 
fú°
=
YES
;

333 
li°
=0;Üist<2;Üist++) {

334 i‡((!
li°
 && ((
cur
 = 
	`HTF‹m©_œnguage
()Ë!
NULL
)) ||

335 (
li°
 && ((
cur
 = 
	`HTReque°_œnguage
(
ªque°
)Ë!
NULL
))) {

336 
HTAc˚±Node
 *
¥es
;

337 (
¥es
 = (
HTAc˚±Node
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

338 i‡(
fú°
) {

339 
	`PUTS
("Accept-Language: ");

340 
fú°
=
NO
;

342 
	`PUTC
(',');

343 
	`PUTS
(
	`HTAtom_«me
(
¥es
->
©om
));

344 i‡(
¥es
->
quÆôy
 < 1.0 &&Öres->quality >= 0.0) {

345 
	`•rötf
(
q°r
, ";q=%1.1f", 
¥es
->
quÆôy
);

346 
	`PUTS
(
q°r
);

351 i‡(!
fú°
Ë
	`PUTBLOCK
(
¸lf
, 2);

353 i‡(
ªque°_mask
 & 
HT_C_AUTH
) {

354 
HTAssocLi°
 * 
cur
 = 
	`HTReque°_¸edítüls
(
ªque°
);

355 i‡(
cur
) {

356 
HTAssoc
 * 
¥es
;

357 (
¥es
 = (
HTAssoc
 *Ë
	`HTAssocLi°_√xtObje˘
(
cur
))) {

358 
	`PUTS
(
	`HTAssoc_«me
(
¥es
));

359 
	`PUTS
(": ");

360 
	`PUTS
(
	`HTAssoc_vÆue
(
¥es
));

361 
	`PUTBLOCK
(
¸lf
, 2);

365 i‡(
ªque°_mask
 & 
HT_C_EXPECT
) {

366 
HTAssocLi°
 * 
cur
 = 
	`HTReque°_ex≥˘
(
ªque°
);

367 i‡(
cur
) {

368 
BOOL
 
fú°
=
YES
;

369 
HTAssoc
 * 
¥es
;

370 (
¥es
 = (
HTAssoc
 *Ë
	`HTAssocLi°_√xtObje˘
(
cur
))) {

371 * 
vÆue
 = 
	`HTAssoc_vÆue
(
¥es
);

372 i‡(
fú°
) {

373 
	`PUTS
("Expect: ");

374 
fú°
 = 
NO
;

376 
	`PUTC
(',');

379 
	`PUTS
(
	`HTAssoc_«me
(
¥es
));

382 i‡(*
vÆue
) {

383 
	`PUTS
("=");

384 
	`PUTS
(
vÆue
);

387 
	`PUTBLOCK
(
¸lf
, 2);

390 i‡(
ªque°_mask
 & 
HT_C_FROM
) {

391 
HTU£rProfûe
 * 
up
 = 
	`HTReque°_u£rProfûe
(
ªque°
);

392 c⁄° * 
maûaddªss
 = 
	`HTU£rProfûe_emaû
(
up
);

393 i‡(
maûaddªss
) {

394 
	`PUTS
("From: ");

395 
	`PUTS
(
maûaddªss
);

396 
	`PUTBLOCK
(
¸lf
, 2);

399 i‡(
ªque°_mask
 & 
HT_C_HOST
) {

400 *
‹ig
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
™ch‹
);

401 *
ho°
 = 
	`HTP¨£
(
‹ig
, "", 
PARSE_HOST
);

404 *
±r
 = 
	`°rchr
(
ho°
, ':');

405 i‡(
±r
) *ptr = '\0';

407 
	`PUTS
("Host: ");

408 
	`PUTS
(
ho°
);

409 
	`PUTBLOCK
(
¸lf
, 2);

410 
	`HT_FREE
(
‹ig
);

411 
	`HT_FREE
(
ho°
);

420 i‡(
ªque°_mask
 & 
HT_C_IF_RANGE
 && 
ëag
) {

421 
	`PUTS
("If-Range: \"");

422 
	`PUTS
(
ëag
);

423 
	`PUTC
('"');

424 
	`PUTBLOCK
(
¸lf
, 2);

425 
	`HTTRACE
(
PROT_TRACE
, "HTTP........ If-R™gêusögÉèg `%s\'\n" 
_
 
ëag
);

426 } i‡(
ªque°_mask
 & 
HT_C_IF_MATCH_ANY
) {

427 
	`PUTS
("If-Match: *");

428 
	`PUTBLOCK
(
¸lf
, 2);

429 
	`HTTRACE
(
PROT_TRACE
, "HTTP........ If-Match using `*\'\n");

430 } i‡(
ªque°_mask
 & 
HT_C_IF_MATCH
 && 
ëag
) {

431 
	`PUTS
("If-Match: \"");

432 
	`PUTS
(
ëag
);

433 
	`PUTC
('"');

434 
	`PUTBLOCK
(
¸lf
, 2);

435 
	`HTTRACE
(
PROT_TRACE
, "HTTP........ If-M©ch usögÉèg `%s\'\n" 
_
 
ëag
);

436 } i‡(
ªque°_mask
 & 
HT_C_IF_UNMOD_SINCE
) {

437 
time_t
 
lm
 = 
	`HTAnch‹_œ°Modifõd
(
™ch‹
);

438 i‡(
lm
 > 0) {

439 
	`PUTS
("If-Unmodified-Since: ");

440 
	`PUTS
(
	`HTD©eTimeSå
(&
lm
, 
NO
));

441 
	`PUTBLOCK
(
¸lf
, 2);

442 
	`HTTRACE
(
PROT_TRACE
, "HTTP........ If-Unmodifõd-Sö˚ `%s\'\n" 
_
 
	`HTD©eTimeSå
(&
lm
, 
NO
));

451 i‡(
ªque°_mask
 & 
HT_C_IF_NONE_MATCH_ANY
) {

452 
	`PUTS
("If-None-Match: *");

453 
	`PUTBLOCK
(
¸lf
, 2);

454 
	`HTTRACE
(
PROT_TRACE
, "HTTP........ If-None-Match using `*\'\n");

455 } i‡(
ªque°_mask
 & 
HT_C_IF_NONE_MATCH
 && 
ëag
) {

456 
	`PUTS
("If-None-Match: \"");

457 
	`PUTS
(
ëag
);

458 
	`PUTC
('"');

459 
	`PUTBLOCK
(
¸lf
, 2);

460 
	`HTTRACE
(
PROT_TRACE
, "HTTP........ If-N⁄e-M©ch `%s\'\n" 
_
 
ëag
);

462 i‡(
ªque°_mask
 & 
HT_C_IMS
) {

463 
time_t
 
lm
 = 
	`HTAnch‹_œ°Modifõd
(
™ch‹
);

464 i‡(
lm
 > 0) {

465 
	`PUTS
("If-Modified-Since: ");

466 
	`PUTS
(
	`HTD©eTimeSå
(&
lm
, 
NO
));

467 
	`PUTBLOCK
(
¸lf
, 2);

468 
	`HTTRACE
(
PROT_TRACE
, "HTTP........ If-Modifõd-Sö˚ `%s\'\n" 
_
 
	`HTD©eTimeSå
(&
lm
, 
NO
));

476 i‡(
ªque°_mask
 & 
HT_C_MAX_FORWARDS
) {

477 
h›s
 = 
	`HTReque°_maxF‹w¨ds
(
ªque°
);

478 i‡(
h›s
 >= 0) {

479 
	`•rötf
(
q°r
, "%d", 
h›s
);

480 
	`PUTS
("Max-Forwards: ");

481 
	`PUTS
(
q°r
);

482 
	`PUTBLOCK
(
¸lf
, 2);

492 i‡(
ªque°_mask
 & 
HT_C_RANGE
) {

493 
HTAssocLi°
 * 
cur
 = 
	`HTReque°_ønge
(
ªque°
);

494 i‡(
cur
) {

495 
HTAssoc
 * 
¥es
;

496 (
¥es
 = (
HTAssoc
 *Ë
	`HTAssocLi°_√xtObje˘
(
cur
))) {

497 
	`PUTS
("Range: ");

498 
	`PUTS
(
	`HTAssoc_«me
(
¥es
));

499 
	`PUTS
("=");

500 
	`PUTS
(
	`HTAssoc_vÆue
(
¥es
));

501 
	`PUTBLOCK
(
¸lf
, 2);

505 i‡(
ªque°_mask
 & 
HT_C_REFERER
) {

506 
HTP¨ítAnch‹
 * 
∑ª¡_™ch‹
 = 
	`HTReque°_∑ª¡
(
ªque°
);

507 i‡(
∑ª¡_™ch‹
) {

508 * 
a˘
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
™ch‹
);

509 * 
∑ª¡
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
∑ª¡_™ch‹
);

511 * 
ªœtive
 = 
	`HTRñ©ive
(
∑ª¡
, 
a˘
);

513 * 
ªœtive
 = 
	`HTP¨£
(
∑ª¡
, 
a˘
,

514 
PARSE_ACCESS
|
PARSE_HOST
|
PARSE_PATH
|
PARSE_PUNCTUATION
);

516 i‡(
ªœtive
 && *relative) {

517 
	`PUTS
("Referer: ");

518 
	`PUTS
(
ªœtive
);

519 
	`PUTBLOCK
(
¸lf
, 2);

521 
	`HT_FREE
(
a˘
);

522 
	`HT_FREE
(
∑ª¡
);

523 
	`HT_FREE
(
ªœtive
);

526 i‡(
ªque°_mask
 & 
HT_C_USER_AGENT
) {

527 
	`PUTS
("User-Agent: ");

528 
	`PUTS
(
	`HTLib_≠pName
());

529 
	`PUTC
('/');

530 
	`PUTS
(
	`HTLib_≠pVîsi⁄
());

531 
	`PUTC
(' ');

532 
	`PUTS
(
	`HTLib_«me
());

533 
	`PUTC
('/');

534 
	`PUTS
(
	`HTLib_vîsi⁄
());

535 
	`PUTBLOCK
(
¸lf
, 2);

537 
	`HTTRACE
(
PROT_TRACE
, "HTTP........ Generating HTTP/1.x Request Headers\n");

538  
HT_OK
;

539 
	}
}

541 
PRIVATE
 
	$HTTPReque°_put_block
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
)

543 i‡(!
me
->
èrgë
) {

544  
HT_WOULD_BLOCK
;

545 } i‡(
me
->
å™•¨ít
)

546  
b
 ? 
	`PUTBLOCK
(b, 
l
Ë: 
HT_OK
;

548 
°©us
 = 
HT_OK
;

549 i‡(
me
->
vîsi⁄
 =
HTTP_09
) {

550 
°©us
 = 
	`HTTP09Reque°
(
me
, me->
ªque°
);

551 i‡(
°©us
 !
HT_OK
)  status;

553 
°©us
 = 
	`HTTPMakeReque°
(
me
, me->
ªque°
);

554 i‡(
°©us
 !
HT_OK
)  status;

555 
me
->
å™•¨ít
 = 
YES
;

556  
b
 ? 
	`PUTBLOCK
(b, 
l
Ë: 
HT_OK
;

558  
°©us
;

560 
	}
}

562 
PRIVATE
 
	$HTTPReque°_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

564  
	`HTTPReque°_put_block
(
me
, &
c
, 1);

565 
	}
}

567 
PRIVATE
 
	$HTTPReque°_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

569  
	`HTTPReque°_put_block
(
me
, 
s
, 
	`°æí
(s));

570 
	}
}

575 
PRIVATE
 
	$HTTPReque°_Êush
 (
HTSåóm
 * 
me
)

577 
°©us
 = 
	`HTTPReque°_put_block
(
me
, 
NULL
, 0);

578  
°©us
==
HT_OK
 ? (*
me
->
èrgë
->
iß
->
Êush
)(me->target) : status;

579 
	}
}

584 
PRIVATE
 
	$HTTPReque°_‰ì
 (
HTSåóm
 * 
me
)

586 
°©us
 = 
	`HTTPReque°_Êush
(
me
);

587 i‡(
°©us
 !
HT_WOULD_BLOCK
) {

588 i‡((
°©us
 = (*
me
->
èrgë
->
iß
->
_‰ì
)(me->èrgë)Ë=
HT_WOULD_BLOCK
)

589  
HT_WOULD_BLOCK
;

590 
	`HT_FREE
(
me
->
uæ
);

591 
	`HT_FREE
(
me
);

593  
°©us
;

594 
	}
}

596 
PRIVATE
 
	$HTTPReque°_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

598 
	`HTTRACE
(
PROT_TRACE
, "HTTPRequest. ABORTING...\n");

600 i‡(
me
) {

601 i‡(
me
->
èrgë
 && me->èrgë->
iß
)

602 (*
me
->
èrgë
->
iß
->
ab‹t
)(me->èrgë, 
e
);

603 i‡(
me
->
uæ
)

604 
	`HT_FREE
(
me
->
uæ
);

605 
	`HT_FREE
(
me
);

607  
HT_ERROR
;

608 
	}
}

613 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTTPReque°Cœss
 =

616 
HTTPReque°_Êush
,

617 
HTTPReque°_‰ì
,

618 
HTTPReque°_ab‹t
,

619 
HTTPReque°_put_ch¨a˘î
,

620 
HTTPReque°_put_°rög
,

621 
HTTPReque°_put_block


624 
PUBLIC
 
HTSåóm
 * 
	$HTTPReque°_√w
 (
HTReque°
 * 
ªque°
, 
HTSåóm
 * 
èrgë
,

625 
BOOL
 
ídHódî
, 
vîsi⁄
)

627 
HTSåóm
 * 
me
;

628 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

629 
	`HT_OUTOFMEM
("HTTPRequest_new");

630 
me
->
iß
 = &
HTTPReque°Cœss
;

631 
me
->
èrgë
 =Åarget;

632 
me
->
ªque°
 =Ñequest;

633 
me
->
vîsi⁄
 = version;

634 
me
->
å™•¨ít
 = 
NO
;

639 i‡(
	`HTMëhod_hasE¡ôy
(
	`HTReque°_mëhod
(
ªque°
)))

640 
	`HTReque°_addEx≥˘
(
ªque°
, "100-continue", "");

644  
	`HTTPGí_√w
(
ªque°
, 
me
, 
ídHódî
, 
vîsi⁄
);

645 
	}
}

	@Library/src/HTTPReq.h

28 #i‚de‡
HTTPREQ_H


29 
	#HTTPREQ_H


	)

31 
	~"HTSåóm.h
"

32 
	~"HTReq.h
"

44 
HTSåóm
 * 
HTTPReque°_√w
 (
HTReque°
 * 
ªque°
, HTSåóm * 
èrgë
,

45 
BOOL
 
ídHódî
, 
vîsi⁄
);

	@Library/src/HTTPRes.c

17 
	~"wwwsys.h
"

18 
	~"WWWUtû.h
"

19 
	~"WWWC‹e.h
"

20 
	~"HTNëM™.h
"

21 
	~"HTTPGí.h
"

22 
	~"HTTPUtû.h
"

23 
	~"HTTPRes.h
"

25 
	#PUTC
(
c
Ë(*
me
->
èrgë
->
iß
->
put_ch¨a˘î
)(me->èrgë, c)

	)

26 
	#PUTS
(
s
Ë(*
me
->
èrgë
->
iß
->
put_°rög
)(me->èrgë, s)

	)

27 
	#PUTBLOCK
(
b
, 
l
Ë(*
me
->
èrgë
->
iß
->
put_block
)(me->èrgë, b,Ü)

	)

29 
	s_HTSåóm
 {

30 c⁄° 
HTSåómCœss
 * 
	miß
;

31 
HTSåóm
 * 
	mèrgë
;

32 
HTReque°
 * 
	mªque°
;

33 
BOOL
 
	må™•¨ít
;

44 
PRIVATE
 
	$HTTPMakeRe•⁄£
 (
HTSåóm
 * 
me
, 
HTReque°
 * 
ªque°
)

46 
¸lf
[3];

47 
HTRsHd
 
ª•⁄£_mask
 = 
	`HTReque°_rsHd
(
ªque°
);

48 *
¸lf
 = 
CR
; *(¸lf+1Ë
LF
; *(crlf+2) = '\0';

50 i‡(
ª•⁄£_mask
 & 
HT_S_LOCATION
) {

53 i‡(
ª•⁄£_mask
 & 
HT_S_PROXY_AUTH
) {

56 i‡(
ª•⁄£_mask
 & 
HT_S_PUBLIC
) {

59 i‡(
ª•⁄£_mask
 & 
HT_S_RETRY_AFTER
) {

62 i‡(
ª•⁄£_mask
 & 
HT_S_SERVER
) {

63 
	`PUTS
("Server: ");

64 
	`PUTS
(
	`HTLib_≠pName
());

65 
	`PUTC
('/');

66 
	`PUTS
(
	`HTLib_≠pVîsi⁄
());

67 
	`PUTC
(' ');

68 
	`PUTS
(
	`HTLib_«me
());

69 
	`PUTC
('/');

70 
	`PUTS
(
	`HTLib_vîsi⁄
());

71 
	`PUTBLOCK
(
¸lf
, 2);

73 i‡(
ª•⁄£_mask
 & 
HT_S_WWW_AUTH
) {

76 
	`HTTRACE
(
PROT_TRACE
, "HTTP........ Generating Response Headers\n");

77  
HT_OK
;

78 
	}
}

80 
PRIVATE
 
	$HTTPRe•⁄£_put_block
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
)

82 i‡(
me
->
èrgë
) {

83 i‡(
me
->
å™•¨ít
)

84  
	`PUTBLOCK
(
b
, 
l
);

86 
	`HTTPMakeRe•⁄£
(
me
, me->
ªque°
);

87 
me
->
å™•¨ít
 = 
YES
;

88  
b
 ? 
	`PUTBLOCK
(b, 
l
Ë: 
HT_OK
;

91  
HT_WOULD_BLOCK
;

92 
	}
}

94 
PRIVATE
 
	$HTTPRe•⁄£_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

96  
	`HTTPRe•⁄£_put_block
(
me
, &
c
, 1);

97 
	}
}

99 
PRIVATE
 
	$HTTPRe•⁄£_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

101  
	`HTTPRe•⁄£_put_block
(
me
, 
s
, 
	`°æí
(s));

102 
	}
}

107 
PRIVATE
 
	$HTTPRe•⁄£_Êush
 (
HTSåóm
 * 
me
)

109 i‡(!
me
->
å™•¨ít
) {

110 
°©us
 = 
	`HTTPMakeRe•⁄£
(
me
, me->
ªque°
);

111 i‡(
°©us
 !
HT_OK
)  status;

113  (*
me
->
èrgë
->
iß
->
Êush
)(me->target);

114 
	}
}

119 
PRIVATE
 
	$HTTPRe•⁄£_‰ì
 (
HTSåóm
 * 
me
)

121 i‡(
me
->
èrgë
) {

122 
°©us
;

123 i‡(!
me
->
å™•¨ít
)

124 i‡((
°©us
 = 
	`HTTPMakeRe•⁄£
(
me
, me->
ªque°
)Ë!
HT_OK
)

125  
°©us
;

126 i‡((
°©us
 = (*
me
->
èrgë
->
iß
->
_‰ì
)(me->èrgë)Ë!
HT_OK
)

127  
°©us
;

129  
HT_OK
;

130 
	}
}

132 
PRIVATE
 
	$HTTPRe•⁄£_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

134 i‡(
me
->
èrgë
Ë(*me->èrgë->
iß
->
ab‹t
)(me->èrgë, 
e
);

135 
	`HTTRACE
(
PROT_TRACE
, "HTTPResponse ABORTING...\n");

136  
HT_ERROR
;

137 
	}
}

142 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTTPRe•⁄£Cœss
 =

145 
HTTPRe•⁄£_Êush
,

146 
HTTPRe•⁄£_‰ì
,

147 
HTTPRe•⁄£_ab‹t
,

148 
HTTPRe•⁄£_put_ch¨a˘î
,

149 
HTTPRe•⁄£_put_°rög
,

150 
HTTPRe•⁄£_put_block


156 
PUBLIC
 
HTSåóm
 * 
	$HTTPRe•⁄£_√w
 (
HTReque°
 * 
ªque°
, 
HTSåóm
 * 
èrgë
,

157 
BOOL
 
ídHódî
, 
vîsi⁄
)

159 
HTSåóm
 * 
me
;

160 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

161 
	`HT_OUTOFMEM
("HTTPResponse_new");

162 
me
->
iß
 = &
HTTPRe•⁄£Cœss
;

163 
me
->
èrgë
 =Åarget;

164 
me
->
ªque°
 =Ñequest;

165 
me
->
å™•¨ít
 = 
NO
;

166  
	`HTTPGí_√w
(
ªque°
, 
me
, 
ídHódî
, 
vîsi⁄
);

167 
	}
}

	@Library/src/HTTPRes.h

28 #i‚de‡
HTTPRES_H


29 
	#HTTPRES_H


	)

31 
	~"HTSåóm.h
"

32 
	~"HTReq.h
"

44 
HTSåóm
 * 
HTTPRe•⁄£_√w
 (
HTReque°
 * 
ªque°
, HTSåóm * 
èrgë
,

45 
BOOL
 
ídHódî
, 
vîsi⁄
);

	@Library/src/HTTPServ.c

16 
	~"wwwsys.h
"

17 
	~"WWWUtû.h
"

18 
	~"WWWC‹e.h
"

19 
	~"HTHódî.h
"

20 
	~"HTMIMERq.h
"

21 
	~"HTNëM™.h
"

22 
	~"HTTPUtû.h
"

23 
	~"HTTPRes.h
"

24 
	~"HTTPSîv.h
"

27 
	#PUTC
(
c
Ë(*
me
->
èrgë
->
iß
->
put_ch¨a˘î
)(me->èrgë, c)

	)

28 
	#PUTS
(
s
Ë(*
me
->
èrgë
->
iß
->
put_°rög
)(me->èrgë, s)

	)

29 
	#PUTBLOCK
(
b
, 
l
Ë(*
me
->
èrgë
->
iß
->
put_block
)(me->èrgë, b,Ü)

	)

32 
	e_HTTPSèã
 {

33 
	mHTTPS_ERROR
 = -2,

34 
	mHTTPS_OK
 = -1,

35 
	mHTTPS_BEGIN
 = 0,

36 
	mHTTPS_NEED_REQUEST
,

37 
	mHTTPS_LOAD_CLIENT


38 } 
	tHTTPSèã
;

41 
	s_hâps_öfo
 {

42 
HTReque°
 * 
	m£rvî
;

43 
HTLi°
 * 
	m˛õ¡s
;

44 
HTTPSèã
 
	m°©e
;

45 
HTNë
 * 
	m√t
;

46 } 
	thâps_öfo
;

49 
	s_HTSåóm
 {

50 c⁄° 
HTSåómCœss
 * 
	miß
;

51 
HTSåóm
 * 
	mèrgë
;

52 
HTReque°
 * 
	mªque°
;

53 
hâps_öfo
 * 
	mhâp
;

54 
HTEOLSèã
 
	m°©e
;

55 
HTChunk
 * 
	mbuf„r
;

56 
BOOL
 
	må™•¨ít
;

59 
	s_HTI≈utSåóm
 {

60 c⁄° 
HTI≈utSåómCœss
 * 
	miß
;

70 
PRIVATE
 
	$SîvîCÀ™up
 (
HTReque°
 * 
ªq
, 
HTNë
 * 
√t
, 
°©us
)

72 
hâps_öfo
 * 
hâp
 = (hâps_öfÿ*Ë
	`HTNë_c⁄ãxt
(
√t
);

73 
HTSåóm
 * 
öput
 = 
	`HTReque°_öputSåóm
(
ªq
);

74 
HTCh™√l
 * 
ch™√l
 = 
	`HTNë_ch™√l
(
√t
);

77 i‡(
öput
) {

78 i‡(
°©us
 =
HT_INTERRUPTED
)

79 (*
öput
->
iß
->
ab‹t
)(öput, 
NULL
);

81 (*
öput
->
iß
->
_‰ì
)(input);

82 
	`HTReque°_£tI≈utSåóm
(
ªq
, 
NULL
);

86 i‡(
hâp
->
˛õ¡s
) {

87 
HTLi°
 * 
cur
 = 
hâp
->
˛õ¡s
;

88 
HTReque°
 * 
¥es
;

89 (
¥es
 = 
	`HTLi°_√xtObje˘
(
cur
)Ë!
NULL
)

90 
	`HTReque°_kûl
(
¥es
);

91 
	`HTLi°_dñëe
(
hâp
->
˛õ¡s
);

98 
	`HTCh™√l_£tSem≠h‹e
(
ch™√l
, 0);

99 
	`HTNë_dñëe
(
√t
, 
HT_IGNORE
);

101 
	`HT_FREE
(
hâp
);

102  
YES
;

103 
	}
}

115 
PRIVATE
 
	$MakeRïlyPùe
 (
HTSåóm
 * 
me
, 
HTReque°
 * 
˛õ¡
)

117 * 
ª•⁄£_löe
 = 
NULL
;

121 
HTAÀπCÆlback
 *
cbf
 = 
	`HTAÀπ_föd
(
HT_A_MESSAGE
);

122 i‡(
cbf
) {

123 
HTAÀπP¨
 * 
ª∂y
 = 
	`HTAÀπ_√wRïly
();

124 i‡((*
cbf
)(
˛õ¡
, 
HT_A_MESSAGE
, 
HT_MSG_NULL
, 
NULL
,

125 
	`HTReque°_îr‹
(
˛õ¡
), 
ª∂y
))

126 
ª•⁄£_löe
 = 
	`HTAÀπ_ª∂yMesßge
(
ª∂y
);

127 
	`HTAÀπ_dñëeRïly
(
ª∂y
);

130 i‡(
ª•⁄£_löe
) {

131 
	`PUTS
(
ª•⁄£_löe
);

132 
	`HT_FREE
(
ª•⁄£_löe
);

134 
	`PUTS
(
HTTP_VERSION
);

135 
	`PUTS
(" 500 Internal");

136 
	`PUTC
(
CR
);

137 
	`PUTC
(
LF
);

147 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
˛õ¡
);

148 
HTF‹m©
 
f‹m©
 = 
	`HTAnch‹_f‹m©
(
™ch‹
);

149 
me
->
èrgë
 = (
f‹m©
 =
WWW_UNKNOWN
) ?

150 
	`HTTPRe•⁄£_√w
(
˛õ¡
, 
me
->
èrgë
, 
YES
, 
HTTP_11
) :

151 
	`HTMIMEReque°_√w
(
˛õ¡
,

152 
	`HTTPRe•⁄£_√w
(
˛õ¡
,
me
->
èrgë
, 
NO
, 
HTTP_11
), 
YES
);

154  
HT_OK
;

155 
	}
}

157 
PRIVATE
 
	$HTTPRïly_put_block
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
)

159 i‡(
me
->
å™•¨ít
)

160  
b
 ? 
	`PUTBLOCK
(b, 
l
Ë: 
HT_OK
;

162 
	`MakeRïlyPùe
(
me
, me->
ªque°
);

163 
me
->
å™•¨ít
 = 
YES
;

164  
b
 ? 
	`PUTBLOCK
(b, 
l
Ë: 
HT_OK
;

166 
	}
}

168 
PRIVATE
 
	$HTTPRïly_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

170  
	`HTTPRïly_put_block
(
me
, 
s
, 
	`°æí
(s));

171 
	}
}

173 
PRIVATE
 
	$HTTPRïly_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

175  
	`HTTPRïly_put_block
(
me
, &
c
, 1);

176 
	}
}

178 
PRIVATE
 
	$HTTPRïly_Êush
 (
HTSåóm
 * 
me
)

180 
°©us
 = 
	`HTTPRïly_put_block
(
me
, 
NULL
, 0);

181  
°©us
==
HT_OK
 ? (*
me
->
èrgë
->
iß
->
Êush
)(me->target) : status;

182 
	}
}

184 
PRIVATE
 
	$HTTPRïly_‰ì
 (
HTSåóm
 * 
me
)

186 
°©us
 = 
	`HTTPRïly_put_block
(
me
, 
NULL
, 0);

187 
	`HTTRACE
(
STREAM_TRACE
, "HTTPReply... Freeing server stream\n");

188  
°©us
==
HT_OK
 ? (*
me
->
èrgë
->
iß
->
_‰ì
)(me->target) : status;

189 
	}
}

191 
PRIVATE
 
	$HTTPRïly_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

193 
	`HTTRACE
(
STREAM_TRACE
, "HTTPReply... ABORTING\n");

194 i‡(
me
->
èrgë
Ë(*me->èrgë->
iß
->
ab‹t
)(me->èrgë, 
e
);

195 
	`HT_FREE
(
me
);

196  
HT_ERROR
;

197 
	}
}

202 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTTPRïlyCœss
 =

205 
HTTPRïly_Êush
,

206 
HTTPRïly_‰ì
,

207 
HTTPRïly_ab‹t
,

208 
HTTPRïly_put_ch¨a˘î
,

209 
HTTPRïly_put_°rög
,

210 
HTTPRïly_put_block


213 
PRIVATE
 
HTSåóm
 * 
	$HTTPRïly_√w
 (
HTReque°
 * 
ªque°
, 
hâps_öfo
 * 
hâp
,

214 
HTSåóm
 * 
èrgë
)

216 
HTSåóm
 * 
me
;

217 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

218 
	`HT_OUTOFMEM
("HTTPReply_new");

219 
me
->
iß
 = &
HTTPRïlyCœss
;

220 
me
->
ªque°
 =Ñequest;

221 
me
->
hâp
 = http;

222 
me
->
èrgë
 =Åarget;

223 
	`HTTRACE
(
STREAM_TRACE
, "HTTP Rïly.. Såóm %∞¸óãd\n" 
_
 
me
);

224  
me
;

225 
	}
}

237 
PRIVATE
 
	$P¨£Reque°
 (
HTSåóm
 * 
me
)

239 
HTReque°
 * 
˛õ¡
 = 
	`HTLi°_fú°Obje˘
(
me
->
hâp
->
˛õ¡s
);

240 * 
löe
 = 
	`HTChunk_d©a
(
me
->
buf„r
);

241 * 
mëhod_°r
 = 
	`HTNextFõld
(&
löe
);

242 * 
ªque°_uri
 = 
	`HTNextFõld
(&
löe
);

243 * 
vîsi⁄_°r
 = 
	`HTNextFõld
(&
löe
);

244 
HTMëhod
 
mëhod
;

247 i‡(!
mëhod_°r
 || (
mëhod
 = 
	`HTMëhod_íum
(mëhod_°r))==
METHOD_INVALID
) {

248 
	`HTReque°_addEº‹
(
˛õ¡
, 
ERR_FATAL
, 
NO
, 
HTERR_NOT_ALLOWED
,

249 
NULL
, 0, "ParseRequest");

250  
HT_ERROR
;

252 
	`HTReque°_£tMëhod
(
˛õ¡
, 
mëhod
);

255 i‡(
ªque°_uri
) {

256 * 
uri
 = 
	`HTP¨£
(
ªque°_uri
, "fûe:", 
PARSE_ALL
);

257 
	`HTReque°_£tAnch‹
(
˛õ¡
, 
	`HTAnch‹_födAddªss
(
uri
));

258 
	`HT_FREE
(
uri
);

260 
	`HTReque°_addEº‹
(
˛õ¡
, 
ERR_FATAL
, 
NO
, 
HTERR_BAD_REQUEST
,

261 
NULL
, 0, "ParseRequest");

262  
HT_ERROR
;

266 i‡(
vîsi⁄_°r
) {

267 
me
->
èrgë
 = 
	`HTSåómSèck
(
WWW_MIME_HEAD
,

268 
	`HTReque°_debugF‹m©
(
˛õ¡
),

269 
	`HTReque°_debugSåóm
(
˛õ¡
),

270 
˛õ¡
, 
NO
);

271  
HT_OK
;

273 
	`HTReque°_addEº‹
(
˛õ¡
, 
ERR_FATAL
, 
NO
, 
HTERR_BAD_VERSION
,

274 
NULL
, 0, "ParseRequest");

275  
HT_ERROR
;

277 
	}
}

282 
PRIVATE
 
	$HTTPRe˚ive_put_block
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
)

284 i‡(!
me
->
å™•¨ít
) {

285 c⁄° *
p
=
b
;

286 
l
>0 && *
p
!=
CR
 && *p!=
LF
)Ü--,Ö++;

287 
	`HTChunk_putb
(
me
->
buf„r
, 
b
, 
p
-b);

288 i‡(*
p
==
CR
 || *p==
LF
) {

289 
°©us
 = 
	`P¨£Reque°
(
me
);

290 
	`HTChunk_˛ór
(
me
->
buf„r
);

291 i‡(
°©us
 !
HT_OK
)  status;

292 
me
->
å™•¨ít
 = 
YES
;

293 
b
=
p
;

296 i‡(
l
 > 0) {

297 
°©us
 = 
	`PUTBLOCK
(
b
, 
l
);

298 i‡(
°©us
 =
HT_LOADED
Ë
me
->
å™•¨ít
 = 
NO
;

299  
°©us
;

301  
HT_OK
;

302 
	}
}

304 
PRIVATE
 
	$HTTPRe˚ive_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

306  
	`HTTPRe˚ive_put_block
(
me
, 
s
, (Ë
	`°æí
(s));

307 
	}
}

309 
PRIVATE
 
	$HTTPRe˚ive_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

311  
	`HTTPRe˚ive_put_block
(
me
, &
c
, 1);

312 
	}
}

314 
PRIVATE
 
	$HTTPRe˚ive_Êush
 (
HTSåóm
 * 
me
)

316  (*
me
->
èrgë
->
iß
->
Êush
)(me->target);

317 
	}
}

319 
PRIVATE
 
	$HTTPRe˚ive_‰ì
 (
HTSåóm
 * 
me
)

321 
°©us
 = 
HT_OK
;

322 i‡(
me
->
èrgë
) {

323 i‡((
°©us
 = (*
me
->
èrgë
->
iß
->
_‰ì
)(me->èrgë)Ë=
HT_WOULD_BLOCK
)

324  
HT_WOULD_BLOCK
;

326 
	`HTChunk_dñëe
(
me
->
buf„r
);

327 
	`HT_FREE
(
me
);

328  
°©us
;

329 
	}
}

331 
PRIVATE
 
	$HTTPRe˚ive_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

333 i‡(
me
->
èrgë
Ë(*me->èrgë->
iß
->
ab‹t
)(me->èrgë, 
e
);

334 
	`HTChunk_dñëe
(
me
->
buf„r
);

335 
	`HT_FREE
(
me
);

336 
	`HTTRACE
(
PROT_TRACE
, "HTTPReceive. ABORTING...\n");

337  
HT_ERROR
;

338 
	}
}

343 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTTPRe˚iveCœss
 =

346 
HTTPRe˚ive_Êush
,

347 
HTTPRe˚ive_‰ì
,

348 
HTTPRe˚ive_ab‹t
,

349 
HTTPRe˚ive_put_ch¨a˘î
,

350 
HTTPRe˚ive_put_°rög
,

351 
HTTPRe˚ive_put_block


354 
PRIVATE
 
HTSåóm
 * 
	$HTTPRe˚ive_√w
 (
HTReque°
 * 
ªque°
, 
hâps_öfo
 * 
hâp
)

356 
HTSåóm
 * 
me
;

357 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

358 
	`HT_OUTOFMEM
("HTTPReceive_new");

359 
me
->
iß
 = &
HTTPRe˚iveCœss
;

360 
me
->
ªque°
 =Ñequest;

361 
me
->
hâp
 = http;

362 
me
->
°©e
 = 
EOL_BEGIN
;

363 
me
->
buf„r
 = 
	`HTChunk_√w
(128);

364 
	`HTTRACE
(
STREAM_TRACE
, "HTTP Reque° Såóm %∞¸óãd\n" 
_
 
me
);

365  
me
;

366 
	}
}

375 
PRIVATE
 
SîvEvít
 (
SOCKET
 
soc
, * 
pVoid
, 
HTEvítTy≥
 
ty≥
);

377 
PUBLIC
 
	$HTSîvHTTP
 (
SOCKET
 
soc
, 
HTReque°
 * 
ªque°
)

379 
HTNë
 * 
√t
 = 
	`HTReque°_√t
(
ªque°
);

380 
hâps_öfo
 * 
hâp
;

387 
	`HTTRACE
(
PROT_TRACE
, "Sîv HTTP... o¿sockë %d\n" 
_
 
soc
);

388 i‡((
hâp
 = (
hâps_öfo
 *Ë
	`HT_CALLOC
(1, (hâps_öfo))Ë=
NULL
)

389 
	`HT_OUTOFMEM
("HTServHTTP");

390 
hâp
->
£rvî
 = 
ªque°
;

391 
hâp
->
°©e
 = 
HTTPS_BEGIN
;

392 
hâp
->
˛õ¡s
 = 
	`HTLi°_√w
();

393 
	`HTNë_£tC⁄ãxt
(
√t
, 
hâp
);

398 
√t
->
ªadSåóm
 = 
	`HTTPRe˚ive_√w
(
ªque°
, 
hâp
);

399 
	`HTReque°_£tOuçutC⁄√˘ed
(
ªque°
, 
YES
);

400 
hâp
->
°©e
 = 
HTTPS_BEGIN
;

402 
	`HTNë_£tEvítCÆlback
(
√t
, 
SîvEvít
);

403 
	`HTNë_£tEvítP¨am
(
√t
, 
hâp
);

405  
	`SîvEvít
(
soc
, 
hâp
, 
HTEvít_BEGIN
);

406 
	}
}

408 
PRIVATE
 
	$SîvEvít
 (
SOCKET
 
soc
, * 
pVoid
, 
HTEvítTy≥
 
ty≥
)

410 
hâps_öfo
 * 
hâp
 = (hâps_öfÿ*)
pVoid
;

411 
°©us
 = 
HT_ERROR
;

412 
HTNë
 * 
√t
 = 
hâp
->net;

413 
HTReque°
 * 
ªque°
 = 
	`HTNë_ªque°
(
√t
);

415 i‡(!
√t
 || !
ªque°
) {

416 
	`HTTRACE
(
PROT_TRACE
, "Serv HTTP... Invalidárgument\n");

417  
HT_ERROR
;

420 i‡(
ty≥
 =
HTEvít_CLOSE
) {

421 
	`SîvîCÀ™up
(
ªque°
, 
√t
, 
HT_INTERRUPTED
);

422  
HT_OK
;

424 
hâp
 = (
hâps_öfo
 *Ë
	`HTNë_c⁄ãxt
(
√t
);

428 
hâp
->
°©e
) {

429 
HTTPS_BEGIN
:

435 
HTReque°
 * 
˛õ¡
 = 
	`HTReque°_√w
();

436 * 
c⁄ãxt
 = 
	`HTReque°_c⁄ãxt
(
ªque°
);

437 i‡(
c⁄ãxt
Ë
	`HTReque°_£tC⁄ãxt
(
˛õ¡
, context);

438 
	`HTReque°_£tOuçutC⁄√˘ed
(
˛õ¡
, 
NO
);

439 
	`HTReque°_£tGnHd
(
˛õ¡
, 
	`HTReque°_gnHd
(
ªque°
));

440 
	`HTReque°_£tRsHd
(
˛õ¡
, 
	`HTReque°_rsHd
(
ªque°
));

441 
	`HTReque°_£tEnHd
(
˛õ¡
, 
	`HTReque°_íHd
(
ªque°
));

442 
	`HTLi°_addObje˘
(
hâp
->
˛õ¡s
, 
˛õ¡
);

449 
HTOuçutSåóm
 * 
ouçut
 = 
	`HTNë_gëOuçut
(
√t
, 
NULL
, 0);

450 
HTSåóm
 * 
≠p
 = 
	`HTTPRïly_√w
(
˛õ¡
, 
hâp
,(HTSåóm*)
ouçut
);

451 
	`HTReque°_£tOuçutSåóm
(
˛õ¡
, 
≠p
);

452 
	`HTReque°_£tOuçutF‹m©
(
˛õ¡
, 
WWW_SOURCE
);

454 
hâp
->
°©e
 = 
HTTPS_NEED_REQUEST
;

458 
HTTPS_NEED_REQUEST
:

459 i‡(
ty≥
 =
HTEvít_READ
 ||Åy≥ =
HTEvít_BEGIN
) {

460 
°©us
 = 
	`HTHo°_ªad
(
√t
->
ho°
,Çet);

461 i‡(
°©us
 =
HT_WOULD_BLOCK
)

462  
HT_OK
;

463 i‡(
°©us
 =
HT_CLOSED
)

464 
hâp
->
°©e
 = 
HTTPS_OK
;

465 i‡(
°©us
==
HT_LOADED
 || sètus==
HT_PAUSE
) {

466 
hâp
->
°©e
 = 
HTTPS_LOAD_CLIENT
;

468 
hâp
->
°©e
 = 
HTTPS_ERROR
;

470 
hâp
->
°©e
 = 
HTTPS_ERROR
;

473 
HTTPS_LOAD_CLIENT
:

475 
HTReque°
 * 
˛õ¡
 = 
	`HTLi°_ªmoveFú°Obje˘
(
hâp
->
˛õ¡s
);

476 
	`HTLﬂd
(
˛õ¡
, 
NO
);

477 
hâp
->
°©e
 = 
HTTPS_BEGIN
;

481 
HTTPS_OK
:

482 
	`SîvîCÀ™up
(
ªque°
, 
√t
, 
HT_IGNORE
);

483  
HT_OK
;

485 
HTTPS_ERROR
:

486 
	`SîvîCÀ™up
(
ªque°
, 
√t
, 
HT_ERROR
);

487  
HT_OK
;

490 
	}
}

	@Library/src/HTTPServ.h

28 #i‚de‡
HTTPSERV_H


29 
	#HTTPSERV_H


	)

31 
	~"HTPrŸ.h
"

33 
HTPrŸCÆlback
 
HTSîvHTTP
;

	@Library/src/HTTPUtil.h

23 #i‚de‡
HTTPUTIL_H


24 
	#HTTPUTIL_H


	)

32 
	e_HTTPVîsi⁄
 {

33 
	mHTTP
 = 0,

34 
	mHTTP_09
,

35 
	mHTTP_10
,

36 
	mHTTP_11
,

37 
	mHTTP_12


38 } 
	tHTTPVîsi⁄
;

46 
	#HTTP_VERSION_10
 "HTTP/1.0"

	)

47 
	#HTTP_VERSION
 "HTTP/1.1"

	)

	@Library/src/HTTeXGen.c

20 
	#BUFFER_SIZE
 80

	)

21 
	#WORD_DELIMITERS
 ",;:[]()"

	)

24 
	~"wwwsys.h
"

25 
	~"HTUtûs.h
"

26 
	~"HTTeXGí.h
"

27 
	~"HTMLPDTD.h
"

28 
	~"HTSåu˘.h
"

29 
	~"HTF‹m©.h
"

35 
	s_HTSåóm
 {

36 c⁄° 
HTSåómCœss
 * 
	miß
;

37 
HTSåóm
 * 
	mèrgë
;

38 
HTSåómCœss
 
	mèrgëCœss
;

41 
	s_HTSåu˘uªd
 {

42 c⁄° 
HTSåu˘uªdCœss
 * 
	miß
;

43 
HTSåóm
 * 
	mèrgë
;

44 
HTSåómCœss
 
	mèrgëCœss
;

45 c⁄° 
SGML_dtd
 * 
	mdtd
;

47 
	mbuf„r
[2*
BUFFER_SIZE
];

48 * 
	mwrôe_poöãr
;

49 * 
	mlöe_bªak
;

50 
BOOL
 
	m£nsôive
;

51 
BOOL
 
	m¥ef‹m©ãd
;

52 
BOOL
 
	mm¨kup
;

53 
BOOL
 
	m°¨tup
;

59 
PRIVATE
 *
	gTeX_«mes
[
HTML_ELEMENTS
][2] = {

154 
PRIVATE
 *
	gTeX_ítôõs
[
HTML_ENTITIES
] = {

227 
PRIVATE
 
	$HTTeXGí_Êush
 (
HTSåu˘uªd
 * 
me
)

229 
°©us
;

230 i‡((
°©us
 =

231 (*
me
->
èrgëCœss
.
put_block
)(me->
èrgë
, me->
buf„r
,

232 
me
->
wrôe_poöãr
-me->
buf„r
)Ë!
HT_OK
)

233  
°©us
;

234 
me
->
wrôe_poöãr
 = me->
buf„r
;

235 
me
->
löe_bªak
 = me->
buf„r
;

236  (*
me
->
èrgëCœss
.
Êush
)(me->
èrgë
);

237 
	}
}

244 
PRIVATE
 
	$HTTeXGí_put_ch¨a˘î
 (
HTSåu˘uªd
 * 
me
, 
c
)

246 i‡(!
me
->
°¨tup
)

247  
HT_OK
;

248 i‡(
c
=='\n') {

249 i‡(
me
->
m¨kup
 || me->
¥ef‹m©ãd
) {

250 *
me
->
wrôe_poöãr
++ = 
c
;

251 
	`HTTeXGí_Êush
(
me
);

252  
HT_OK
;

253 } i‡(
me
->
£nsôive
 || *(me->
wrôe_poöãr
-1)==' ') {

254  
HT_OK
;

256 *
me
->
wrôe_poöãr
++ = ' ';

257 } i‡(
me
->
m¨kup
 || me->
¥ef‹m©ãd
) {

258 *
me
->
wrôe_poöãr
++ = 
c
;

259 } i‡(
c
==' ' || c=='\t') {

260 i‡(*(
me
->
wrôe_poöãr
-1) != ' ')

261 *
me
->
wrôe_poöãr
++ = ' ';

263  
HT_OK
;

265 i‡(
c
=='$' || c=='&' || c=='%' || c=='#' ||

266 
c
=='{' || c=='}' || c=='_') {

267 *
me
->
wrôe_poöãr
++ = '\\';

268 *
me
->
wrôe_poöãr
++ = 
c
;

269 } i‡(
c
=='\\') {

270 *
ãmp
 = "$\\backslash$";

271 
	`°r˝y
(
me
->
wrôe_poöãr
, 
ãmp
);

272 
me
->
wrôe_poöãr
 +
	`°æí
(
ãmp
);

273 } i‡(
c
=='^') {

274 *
ãmp
 = "$\\hat{ }$";

275 
	`°r˝y
(
me
->
wrôe_poöãr
, 
ãmp
);

276 
me
->
wrôe_poöãr
 +
	`°æí
(
ãmp
);

277 } i‡(
c
=='~') {

278 *
ãmp
 = "$\\tilde{ }$";

279 
	`°r˝y
(
me
->
wrôe_poöãr
, 
ãmp
);

280 
me
->
wrôe_poöãr
 +
	`°æí
(
ãmp
);

281 } i‡(
c
=='|' || c=='<' || c=='>') {

282 *
me
->
wrôe_poöãr
++ = '$';

283 *
me
->
wrôe_poöãr
++ = 
c
;

284 *
me
->
wrôe_poöãr
++ = '$';

286 *
me
->
wrôe_poöãr
++ = 
c
;

289 i‡(
c
==' ')

290 
me
->
löe_bªak
 = me->
wrôe_poöãr
;

291 i‡(
	`°rchr
(
WORD_DELIMITERS
, 
c
))

292 
me
->
löe_bªak
 = me->
wrôe_poöãr
-1;

295 i‡(
me
->
wrôe_poöãr
 >me->
buf„r
+
BUFFER_SIZE
-3) {

296 #ifde‡
OLD_CODE


297 i‡(
me
->
m¨kup
 || me->
¥ef‹m©ãd
) {

299 i‡(
me
->
¥ef‹m©ãd
) {

300 *
me
->
wrôe_poöãr
 = '\n';

301 (*
me
->
èrgëCœss
.
put_block
)(me->
èrgë
,

302 
me
->
buf„r
,

303 
me
->
wrôe_poöãr
-me->
buf„r
+1);

304 
me
->
wrôe_poöãr
 = me->
buf„r
;

306 
löe_bªak_ch¨
 = *
me
->
löe_bªak
;

307 *
ßved
 = 
me
->
löe_bªak
;

308 *
me
->
löe_bªak
 = '\n';

309 (*
me
->
èrgëCœss
.
put_block
)(me->
èrgë
,

310 
me
->
buf„r
,

311 
me
->
löe_bªak
-me->
buf„r
+1);

312 *
me
->
löe_bªak
 = 
löe_bªak_ch¨
;

314 *
p
 = 
ßved
;

315 *
q
;

316 
q
=
me
->
buf„r
; 
p
<me->
wrôe_poöãr
; )

317 *
q
++ = *
p
++;

319 
me
->
wrôe_poöãr
 = me->
buf„r
 + (me->wrôe_poöãr-
ßved
);

321 
me
->
löe_bªak
 = me->
buf„r
;

323  
HT_OK
;

331 
PRIVATE
 
	`HTTeXGí_put_°rög
 (
HTSåu˘uªd
 * 
me
, c⁄° * 
s
)

333 *
s
)

334 
	`HTTeXGí_put_ch¨a˘î
(
me
, *
s
++);

335  
HT_OK
;

339 
PRIVATE
 
	`HTTeXGí_wrôe
 (
HTSåu˘uªd
 * 
me
, c⁄° * 
b
, 
l
)

341 
l
-- > 0)

342 
	`HTTeXGí_put_ch¨a˘î
(
me
, *
b
++);

343  
HT_OK
;

353 
PRIVATE
 
	`HTTeXGí_°¨t_ñemít
 (
HTSåu˘uªd
 * 
me
,

354 
ñemít_numbî
,

355 c⁄° 
BOOL
 * 
¥e£¡
,

356 c⁄° ** 
vÆue
)

358 
me
->
°¨tup
 = 
YES
;

359 i‡(
me
->
¥ef‹m©ãd
 =
YES
) {

360 
	`HTTRACE
(
SGML_TRACE
, "LaTeX....... No Markup in verbatim mode\n");

363 i‡(
ñemít_numbî
 =
HTML_PRE
)

364 
me
->
¥ef‹m©ãd
 = 
YES
;

365 i‡(
ñemít_numbî
 =
HTML_CITE
 ||

366 
ñemít_numbî
 =
HTML_DT
 ||

367 
ñemít_numbî
 =
HTML_H1
 ||

368 
ñemít_numbî
 =
HTML_H2
 ||

369 
ñemít_numbî
 =
HTML_H3
 ||

370 
ñemít_numbî
 =
HTML_H4
 ||

371 
ñemít_numbî
 =
HTML_H5
 ||

372 
ñemít_numbî
 =
HTML_H6
 ||

373 
ñemít_numbî
 =
HTML_TITLE
)

374 
me
->
£nsôive
 = 
YES
;

375 i‡(
ñemít_numbî
 =
HTML_DD
)

376 
me
->
£nsôive
 = 
NO
;

377 
me
->
m¨kup
 = 
ñemít_numbî
 =
HTML_A
 ? 
NO
 : 
YES
;

378 
	`HTTeXGí_put_°rög
(
me
, *
TeX_«mes
[
ñemít_numbî
]);

379 
me
->
m¨kup
 = 
NO
;

389 
PRIVATE
 
	`HTTeXGí_íd_ñemít
 (
HTSåu˘uªd
 * 
me
, 
ñemít_numbî
)

391 i‡(
me
->
¥ef‹m©ãd
 && 
ñemít_numbî
 !
HTML_PRE
) {

392 
	`HTTRACE
(
SGML_TRACE
, "LaTeX....... No markup in verbatim mode\n");

395 
me
->
¥ef‹m©ãd
 = 
NO
;

396 
me
->
m¨kup
 = 
YES
;

397 
	`HTTeXGí_put_°rög
(
me
, *(
TeX_«mes
[
ñemít_numbî
]+1));

398 
me
->
m¨kup
 = 
NO
;

399 i‡(
ñemít_numbî
 =
HTML_CITE
 ||

400 
ñemít_numbî
 =
HTML_DL
 ||

401 
ñemít_numbî
 =
HTML_H1
 ||

402 
ñemít_numbî
 =
HTML_H2
 ||

403 
ñemít_numbî
 =
HTML_H3
 ||

404 
ñemít_numbî
 =
HTML_H4
 ||

405 
ñemít_numbî
 =
HTML_H5
 ||

406 
ñemít_numbî
 =
HTML_H6
 ||

407 
ñemít_numbî
 =
HTML_TITLE
)

408 
me
->
£nsôive
 = 
NO
;

416 
PRIVATE
 
	`HTTeXGí_put_ítôy
 (
HTSåu˘uªd
 * 
me
, 
ítôy_numbî
)

418 
BOOL
 
m¨k
 = 
me
->
m¨kup
;

419 i‡(*
TeX_ítôõs
[
ítôy_numbî
] != '&' &&

420 *
TeX_ítôõs
[
ítôy_numbî
] != '<' &&

421 *
TeX_ítôõs
[
ítôy_numbî
] != '>')

422 
me
->
m¨kup
 = 
YES
;

423 
	`HTTeXGí_put_°rög
(
me
, 
TeX_ítôõs
[
ítôy_numbî
]);

424 
me
->
m¨kup
 = 
m¨k
;

427 
PRIVATE
 
	`HTTeXGí_u≈¨£dBegöEÀmít
 (
HTSåu˘uªd
 * 
me
, c⁄° * 
b
, 
l
)

429  (*
me
->
èrgëCœss
.
put_block
)(me->
èrgë
, 
b
, 
l
);

432 
PRIVATE
 
	`HTTeXGí_u≈¨£dEndEÀmít
 (
HTSåu˘uªd
 * 
me
, c⁄° * 
b
, 
l
)

434  (*
me
->
èrgëCœss
.
put_block
)(me->
èrgë
, 
b
, 
l
);

437 
PRIVATE
 
	`HTTeXGí_u≈¨£dE¡ôy
 (
HTSåu˘uªd
 * 
me
, c⁄° * 
b
, 
l
)

439  (*
me
->
èrgëCœss
.
put_block
)(me->
èrgë
, 
b
, 
l
);

446 
PRIVATE
 
	`HTTeXGí_‰ì
 (
HTSåu˘uªd
 * 
me
)

448 
	`HTTeXGí_Êush
(
me
);

449 (*
me
->
èrgëCœss
.
put_°rög
)(me->
èrgë
, "\n\\end{document}\n");

450 
	`HTTeXGí_Êush
(
me
);

451 (*
me
->
èrgëCœss
.
_‰ì
)(me->
èrgë
);

452 
	`HT_FREE
(
me
);

453  
HT_OK
;

457 
PRIVATE
 
	`HTTeXGí_ab‹t
 (
HTSåu˘uªd
 * 
me
, 
HTLi°
 * 
e
)

459 
	`HTTeXGí_‰ì
(
me
);

460  
HT_ERROR
;

467 
PRIVATE
 c⁄° 
HTSåu˘uªdCœss
 
HTTeXGíî©i⁄
 =

470 
HTTeXGí_Êush
,

471 
HTTeXGí_‰ì
,

472 
HTTeXGí_ab‹t
,

473 
HTTeXGí_put_ch¨a˘î
, 
HTTeXGí_put_°rög
, 
HTTeXGí_wrôe
,

474 
HTTeXGí_°¨t_ñemít
, 
HTTeXGí_íd_ñemít
,

475 
HTTeXGí_put_ítôy
,

476 
HTTeXGí_u≈¨£dBegöEÀmít
,

477 
HTTeXGí_u≈¨£dEndEÀmít
,

478 
HTTeXGí_u≈¨£dE¡ôy


486 
PUBLIC
 
HTSåóm
* 
	`HTMLToTeX
 (
HTReque°
 * 
ªque°
,

487 * 
∑øm
,

488 
HTF‹m©
 
öput_f‹m©
,

489 
HTF‹m©
 
ouçut_f‹m©
,

490 
HTSåóm
 * 
ouçut_°ªam
)

492 
HTSåu˘uªd
* 
me
;

493 i‡((
me
 = (
HTSåu˘uªd
 *Ë
	`HT_CALLOC
(1, (*me))Ë=
NULL
)

494 
	`HT_OUTOFMEM
("HTMLToTeX");

496 
me
->
iß
 = (
HTSåu˘uªdCœss
*Ë&
HTTeXGíî©i⁄
;

497 
me
->
dtd
 = 
	`HTML_dtd
();

498 
me
->
èrgë
 = 
ouçut_°ªam
;

499 
me
->
èrgëCœss
 = *me->
èrgë
->
iß
;

500 
me
->
wrôe_poöãr
 = me->
buf„r
;

501 
me
->
löe_bªak
 = me->
buf„r
;

502 (*
me
->
èrgëCœss
.
put_°rög
)(me->
èrgë
,

504  
	`SGML_√w
(
	`HTML_dtd
(), 
me
);

	@Library/src/HTTeXGen.h

30 #i‚de‡
HTTEXGEN_H


31 
	#HTTEXGEN_H


	)

32 
	~"HTSåu˘.h
"

33 
	~"HTF‹m©.h
"

43 
HTC⁄vîãr
 
HTMLToTeX
;

	@Library/src/HTTee.c

17 
	~"wwwsys.h
"

18 
	~"WWWUtû.h
"

19 
	~"HTTì.h
"

25 
	s_HTSåóm
 {

26 c⁄° 
HTSåómCœss
 * 
	miß
;

27 
HTSåóm
 * 
	ms1
;

28 
HTSåóm
 * 
	ms2
;

29 
HTCom∑ªr
 * 
	mªsﬁvî
;

35 
PRIVATE
 
	$deÁu…_ªsﬁvî
 (c⁄° *
a
, c⁄° *
b
)

37 i‡(*(*Ë
a
 < 0)

38  *(*Ë
a
;

39 i‡(*(*Ë
b
 < 0)

40  *(*Ë
b
;

41 i‡(*(*Ë
a
 == 0)

42  *(*Ë
b
;

43  *(*Ë
a
;

44 
	}
}

46 
PRIVATE
 
	$HTTì_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

48 
ªt1
 = (*
me
->
s1
->
iß
->
put_ch¨a˘î
)(me->s1, 
c
);

49 
ªt2
 = (*
me
->
s2
->
iß
->
put_ch¨a˘î
)(me->s2, 
c
);

50  
me
->
	`ªsﬁvî
(&
ªt1
, &
ªt2
);

51 
	}
}

53 
PRIVATE
 
	$HTTì_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

55 
ªt1
 = (*
me
->
s1
->
iß
->
put_°rög
)(me->s1, 
s
);

56 
ªt2
 = (*
me
->
s2
->
iß
->
put_°rög
)(me->s2, 
s
);

57  
me
->
	`ªsﬁvî
(&
ªt1
, &
ªt2
);

58 
	}
}

60 
PRIVATE
 
	$HTTì_wrôe
 (
HTSåóm
 * 
me
, c⁄° * 
s
, 
l
)

62 
ªt1
 = (*
me
->
s1
->
iß
->
put_block
)(me->s1, 
s
, 
l
);

63 
ªt2
 = (*
me
->
s2
->
iß
->
put_block
)(me->s2, 
s
, 
l
);

64  
me
->
	`ªsﬁvî
(&
ªt1
, &
ªt2
);

65 
	}
}

67 
PRIVATE
 
	$HTTì_Êush
 (
HTSåóm
 * 
me
)

69 
ªt1
 = (*
me
->
s1
->
iß
->
Êush
)(me->s1);

70 
ªt2
 = (*
me
->
s2
->
iß
->
Êush
)(me->s2);

71  
me
->
	`ªsﬁvî
(&
ªt1
, &
ªt2
);

72 
	}
}

78 
PRIVATE
 
	$HTTì_‰ì
 (
HTSåóm
 * 
me
)

80 i‡(
me
) {

81 
ªt1
 = 
me
->
s1
 ? (*me->s1->
iß
->
_‰ì
)(me->s1Ë: 
HT_OK
;

82 
ªt2
 = 
me
->
s2
 ? (*me->s2->
iß
->
_‰ì
)(me->s2Ë: 
HT_OK
;

83 
ªt
 = 
me
->
	`ªsﬁvî
(&
ªt1
, &
ªt2
);

84 
me
->
s1
 = me->
s2
 = 
NULL
;

85 
	`HT_FREE
(
me
);

86  
ªt
;

88  
HT_OK
;

89 
	}
}

91 
PRIVATE
 
	$HTTì_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

93 i‡(
me
) {

94 i‡(
me
->
s1
Ë(*me->s1->
iß
->
ab‹t
)(me->s1, 
e
);

95 i‡(
me
->
s2
Ë(*me->s2->
iß
->
ab‹t
)(me->s2, 
e
);

96 
me
->
s1
 = me->
s2
 = 
NULL
;

97 
	`HT_FREE
(
me
);

99  
HT_ERROR
;

100 
	}
}

106 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTTìCœss
 =

109 
HTTì_Êush
,

110 
HTTì_‰ì
,

111 
HTTì_ab‹t
,

112 
HTTì_put_ch¨a˘î
, 
HTTì_put_°rög
,

113 
HTTì_wrôe


127 
PUBLIC
 
HTSåóm
 * 
	$HTTì
(
HTSåóm
 * 
s1
, HTSåóm * 
s2
, 
HTCom∑ªr
 * 
ªsﬁvî
)

129 
HTSåóm
 * 
me
;

130 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (*me))Ë=
NULL
)

131 
	`HT_OUTOFMEM
("HTTee");

132 
me
->
iß
 = &
HTTìCœss
;

133 
me
->
s1
 = s1 ? s1 : 
	`HTBœckHﬁe
();

134 
me
->
s2
 = s2 ? s2 : 
	`HTBœckHﬁe
();

135 
me
->
ªsﬁvî
 =Ñesﬁvî ?Ñesﬁvî : 
deÁu…_ªsﬁvî
;

136 
	`HTTRACE
(
STREAM_TRACE
, "Tì......... Cª©ed såóm %∞wôhÑesﬁvî %p\n" 
_


137 
me
 
_
 me->
ªsﬁvî
);

138  
me
;

139 
	}
}

	@Library/src/HTTee.h

38 #i‚de‡
_HTTEE_H


39 
	#_HTTEE_H


	)

41 
	~"HTSåóm.h
"

42 
	~"HTAºay.h
"

44 
HTSåóm
 * 
HTTì
 (HTSåóm * 
s1
, HTSåóm * 
s2
, 
HTCom∑ªr
 * 
ªsﬁvî
);

	@Library/src/HTTelnet.c

24 
	~"wwwsys.h
"

25 
	~"WWWUtû.h
"

26 
	~"WWWC‹e.h
"

27 
	~"HTTñ√t.h
"

28 
	~"HTNëM™.h
"

39 
PRIVATE
 
	$make_sy°em_£cuª
 (* 
°r
)

41 *
±r1
, *
±r2
;

42 i‡((
°r
 =
NULL
)||(*str == '\0'))

49 i‡(*
°r
=='-' || *str=='+')

50 *
°r
 = ' ';

51 
±r1
 = 
±r2
 = 
°r
;

52 *
±r1
) {

53 i‡((!
	`ißÕha
(()*
±r1
))&&(!
	`isdigô
(()*ptr1))&&

54 (*
±r1
 != '.')&&(*ptr1 != '_')&&

55 (*
±r1
 != '+')&&(*ptr1 != '-')) {

56 
±r1
++;

58 *
±r2
 = *
±r1
;

59 
±r2
++;

60 
±r1
++;

63 *
±r2
 = *
±r1
;

64 
	}
}

71 
PRIVATE
 
	$ªmŸe_£ssi⁄
 (
HTReque°
 * 
ªque°
, * 
uæ
)

73 
°©us
 = 
HT_NO_DATA
;

74 
HTChunk
 *
cmd
 = 
	`HTChunk_√w
(64);

75 *
ac˚ss
 = 
	`HTP¨£
(
uæ
, "", 
PARSE_ACCESS
);

76 *
ho°
 = 
	`HTP¨£
(
uæ
, "", 
PARSE_HOST
);

77 *
ho°«me
 = 
	`°rchr
(
ho°
, '@');

78 *
u£r
 = 
NULL
;

79 *
∑sswd
 = 
NULL
;

80 *
p‹t
 = 
NULL
;

83 i‡(!
	`HTAÀπ_öãø˘ive
()) {

84 
	`HTTRACE
(
PROT_TRACE
, "Telnet...... Not interactive\n");

85 
	`HT_FREE
(
ac˚ss
);

86 
	`HT_FREE
(
ho°
);

87 
	`HTChunk_dñëe
(
cmd
);

88  
HT_ERROR
;

92 i‡(
ho°«me
) {

93 *
ho°«me
++ = '\0';

94 
u£r
 = 
ho°
;

95 i‡((
∑sswd
 = 
	`°rchr
(
ho°
, ':')Ë!
NULL
) {

96 *
∑sswd
++ = '\0';

97 
	`HTUnEsˇ≥
(
∑sswd
);

99 
	`HTUnEsˇ≥
(
u£r
);

101 
ho°«me
 = 
ho°
;

103 i‡((
p‹t
 = 
	`°rchr
(
ho°«me
, ':')Ë!
NULL
)

104 *
p‹t
++ = '\0';

107 i‡(
	`HTLib_£cuª
()) {

108 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
,

109 
HTERR_ACCESS
, 
NULL
, 0, "HTLoadTelnet");

110 
	`HT_FREE
(
ac˚ss
);

111 
	`HT_FREE
(
ho°
);

112 
	`HTChunk_dñëe
(
cmd
);

113  
HT_NO_DATA
;

120 
	`make_sy°em_£cuª
(
u£r
);

121 
	`make_sy°em_£cuª
(
∑sswd
);

122 
	`make_sy°em_£cuª
(
ho°«me
);

123 
	`make_sy°em_£cuª
(
p‹t
);

125 i‡(!
	`°rˇ£comp
(
ac˚ss
, "telnet")) {

126 #ifde‡
SIMPLE_TELNET


127 
	`HTChunk_puts
(
cmd
, "TELNET ");

128 
	`HTChunk_puts
(
cmd
, 
ho°«me
);

130 #ifde‡
FULL_TELNET


131 
	`HTChunk_puts
(
cmd
, "telnet ");

132 
	`HTChunk_puts
(
cmd
, 
ho°«me
);

133 i‡(
u£r
) {

134 
	`HTChunk_puts
(
cmd
, " -l ");

135 
	`HTChunk_puts
(
cmd
, 
u£r
);

137 i‡(
p‹t
) {

138 
	`HTChunk_putc
(
cmd
, ' ');

139 
	`HTChunk_puts
(
cmd
, 
p‹t
);

142 #ifde‡
MULTINET


143 
	`HTChunk_puts
(
cmd
, "TELNET ");

144 i‡(
p‹t
) {

145 
	`HTChunk_puts
(
cmd
, "/PORT=");

146 
	`HTChunk_puts
(
cmd
, 
p‹t
);

147 
	`HTChunk_putc
(
cmd
, ' ');

149 
	`HTChunk_puts
(
cmd
, 
ho°«me
);

151 
	`HTChunk_puts
(
cmd
, "telnet ");

152 
	`HTChunk_puts
(
cmd
, 
ho°«me
);

153 i‡(
p‹t
) {

154 
	`HTChunk_putc
(
cmd
, ' ');

155 
	`HTChunk_puts
(
cmd
, 
p‹t
);

161 } i‡(!
	`°rˇ£comp
(
ac˚ss
, "rlogin")) {

162 #ifde‡
MULTINET


163 
	`HTChunk_puts
(
cmd
, "RLOGIN ");

164 i‡(
u£r
) {

165 
	`HTChunk_puts
(
cmd
, "/USERNAME=");

166 
	`HTChunk_puts
(
cmd
, 
u£r
);

167 
	`HTChunk_putc
(
cmd
, ' ');

169 i‡(
p‹t
) {

170 
	`HTChunk_puts
(
cmd
, "/PORT=");

171 
	`HTChunk_puts
(
cmd
, 
p‹t
);

172 
	`HTChunk_putc
(
cmd
, ' ');

174 
	`HTChunk_puts
(
cmd
, 
ho°«me
);

176 #ifde‡
RLOGIN_USER


177 
	`HTChunk_puts
(
cmd
, "rlogin ");

178 
	`HTChunk_puts
(
cmd
, 
ho°«me
);

179 i‡(
u£r
) {

180 
	`HTChunk_puts
(
cmd
, " -l ");

181 
	`HTChunk_puts
(
cmd
, 
u£r
);

184 
	`HTChunk_puts
(
cmd
, "rlogin ");

185 i‡(
u£r
) {

186 
	`HTChunk_puts
(
cmd
, "-l ");

187 
	`HTChunk_puts
(
cmd
, 
u£r
);

188 
	`HTChunk_putc
(
cmd
, ' ');

190 
	`HTChunk_puts
(
cmd
, 
ho°«me
);

194 } i‡(!
	`°rˇ£comp
(
ac˚ss
, "tn3270")) {

195 #ifde‡
MULTINET


196 
	`HTChunk_puts
(
cmd
, "TELNET/TN3270 ");

197 i‡(
p‹t
) {

198 
	`HTChunk_puts
(
cmd
, "/PORT=");

199 
	`HTChunk_puts
(
cmd
, 
p‹t
);

200 
	`HTChunk_putc
(
cmd
, ' ');

202 
	`HTChunk_puts
(
cmd
, 
ho°«me
);

204 
	`HTChunk_puts
(
cmd
, "tn3270 ");

205 
	`HTChunk_puts
(
cmd
, 
ho°«me
);

209 
	`HTTRACE
(
PROT_TRACE
, "Tñ√t...... Unknow¿ac˚s†mëhod: `%s\'\n" 
_


210 
ac˚ss
);

211 
°©us
 = 
HT_ERROR
;

215 
	`HTTRACE
(
PROT_TRACE
, "Tñ√t...... Comm™d i†`%s\'\n" 
_
 
	`HTChunk_d©a
(
cmd
));

216 i‡(
u£r
) {

217 
HTChunk
 *
msg
 = 
	`HTChunk_√w
(128);

218 i‡(
	`°rˇ£comp
(
ac˚ss
, "rlogin")) {

219 
	`HTChunk_puts
(
msg
, "user <");

220 
	`HTChunk_puts
(
msg
, 
u£r
);

221 
	`HTChunk_putc
(
msg
, '>');

223 i‡(
∑sswd
) {

224 
	`HTChunk_puts
(
msg
, "ándÖassword <");

225 
	`HTChunk_puts
(
msg
, 
∑sswd
);

226 
	`HTChunk_putc
(
msg
, '>');

228 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_INFO
, 
NO
,

229 
HTERR_LOGIN
, 
	`HTChunk_d©a
(
msg
), 
	`HTChunk_size
(msg),

231 
	`HTChunk_dñëe
(
msg
);

233 #ifde‡
HAVE_SYSTEM


234 
	`sy°em
(
cmd
->
d©a
);

236 
	`HT_FREE
(
ac˚ss
);

237 
	`HT_FREE
(
ho°
);

238 
	`HTChunk_dñëe
(
cmd
);

239  
°©us
;

241 
	}
}

252 
PRIVATE
 
Tñ√tEvít
 (
SOCKET
 
soc
, * 
pVoid
, 
HTEvítTy≥
 
ty≥
);

254 
PUBLIC
 
	$HTLﬂdTñ√t
 (
SOCKET
 
soc
, 
HTReque°
 * 
ªque°
)

256 
HTNë
 * 
√t
 = 
	`HTReque°_√t
(
ªque°
);

257 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

258 * 
uæ
 = 
	`HTAnch‹_physiˇl
(
™ch‹
);

260 
	`HTTRACE
(
PROT_TRACE
, "Tñ√t...... Lookög f‹ `%s\'\n" 
_
 
uæ
);

261 
	`HTNë_£tEvítCÆlback
(
√t
, 
Tñ√tEvít
);

262 
	`HTNë_£tEvítP¨am
(
√t
,Çet);

264 
	`HTCÀ™Tñ√tSåög
(
uæ
);

266 
°©us
 = 
	`ªmŸe_£ssi⁄
(
ªque°
, 
uæ
);

267 
	`HTNë_dñëe
(
√t
, 
°©us
);

269  
HT_OK
;

270 
	}
}

272 
PRIVATE
 
	$Tñ√tEvít
 (
SOCKET
 
soc
, * 
pVoid
, 
HTEvítTy≥
 
ty≥
)

274 
HTNë
 * 
√t
 = (HTNë *)
pVoid
;

277 i‡(
ty≥
 =
HTEvít_CLOSE
)

278 
	`HTNë_dñëe
(
√t
, 
HT_INTERRUPTED
);

280 
	`HTNë_dñëe
(
√t
, 
HT_ERROR
);

281  
HT_OK
;

282 
	}
}

	@Library/src/HTTelnet.h

25 #i‚de‡
HTTELNET_H


26 
	#HTTELNET_H


	)

28 
	~"HTPrŸ.h
"

30 
HTPrŸCÆlback
 
HTLﬂdTñ√t
;

	@Library/src/HTTimer.c

18 
	~"wwwsys.h
"

19 
	~"WWWUtû.h
"

20 
	~"WWWC‹e.h
"

21 
	~"HTReqM™.h
"

22 
	~"HTTimî.h
"

24 
	s_HTTimî
 {

25 
ms_t
 
	mmûlis
;

26 
ms_t
 
	mexpúes
;

27 
BOOL
 
	mªœtive
;

28 
BOOL
 
	mª≥tôive
;

29 * 
	m∑øm
;

30 
HTTimîCÆlback
 * 
	mcbf
;

33 
PRIVATE
 
HTLi°
 * 
	gTimîs
 = 
NULL
;

35 
PRIVATE
 
HTTimîSëCÆlback
 * 
	gSëPœtf‹mTimî
 = 
NULL
;

36 
PRIVATE
 
HTTimîSëCÆlback
 * 
	gDñëePœtf‹mTimî
 = 
NULL
;

38 #ifde‡
WATCH_RECURSION


40 
PRIVATE
 
HTTimî
 * 
	gInTimî
 = 
NULL
;

41 
	#CHECKME
(
timî
Ëi‡(
InTimî
 !
NULL
Ë
	`HTDEBUGBREAK
("checkÅimî\n"); InTimî =Åimî;

	)

42 
	#CLEARME
(
timî
Ëi‡(
InTimî
 !timîË
	`HTDEBUGBREAK
("˛ó∏timî\n"); InTimî = 
NULL
;

	)

43 
	#SETME
(
timî
Ë
InTimî
 =Åimî;

	)

47 
	#CHECKME
(
timî
)

	)

48 
	#CLEARME
(
timî
)

	)

49 
	#SETME
(
timî
)

	)

54 
PUBLIC
 
BOOL
 
	$HTTimî_expúeAŒ
 ()

56 
HTLi°
 * 
cur
;

57 
HTTimî
 * 
timî
;

58 i‡(
Timîs
) {

63 
cur
 = 
Timîs
;

64 (
timî
 = (
HTTimî
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

65 i‡(
DñëePœtf‹mTimî
Ë
	`DñëePœtf‹mTimî
(
timî
);

72 
cur
 = 
Timîs
;

73 (
timî
 = (
HTTimî
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

75 
timî
->
ª≥tôive
 = 
NO
;

76 
	`HTTimî_di•©ch
 (
timî
);

78 
cur
 = 
Timîs
;

80  
YES
;

82  
NO
;

83 
	}
}

92 
PRIVATE
 
	$Timî_di•©ch
 (
HTLi°
 * 
cur
, HTLi° * 
œ°
)

94 
HTTimî
 * 
timî
;

95 
ªt
 = 
HT_ERROR
;

97 
timî
 = (
HTTimî
 *)
	`HTLi°_obje˘Of
(
cur
);

98 i‡(
timî
 =
NULL
) {

100 
	`HTDEBUGBREAK
("Timer dispatch couldn't findáÅimer\n");

102 
	`CLEARME
(
timî
);

103  
HT_ERROR
;

105 #ifde‡
WWW_WIN_ASYNC


109 i‡(
DñëePœtf‹mTimî
)

110 
	`DñëePœtf‹mTimî
(
timî
);

112 i‡(
timî
->
ª≥tôive
)

113 
	`HTTimî_√w
(
timî
,Åimî->
cbf
,Åimî->
∑øm
,Åimî->
mûlis
, 
YES
, YES);

115 
	`HTLi°_quickRemoveEÀmít
(
cur
, 
œ°
);

116 
	`HTTRACE
(
THD_TRACE
, "Timî....... Di•©chÅimî %p\n" 
_
 
timî
);

117 
ªt
 = (*
timî
->
cbf
Ë—imî,Åimî->
∑øm
, 
HTEvít_TIMEOUT
);

118  
ªt
;

119 
	}
}

121 
PUBLIC
 
BOOL
 
	$HTTimî_ªgi°îSëTimîCÆlback
 (
HTTimîSëCÆlback
 * 
cbf
)

123 
	`HTTRACE
(
CORE_TRACE
, "Timî.......Ñegi°îög %∞a†timî së cbf\n" 
_
 
cbf
);

124 i‡(
cbf
) {

125 
SëPœtf‹mTimî
 = 
cbf
;

126  
YES
;

128  
NO
;

129 
	}
}

131 
PUBLIC
 
BOOL
 
	$HTTimî_ªgi°îDñëeTimîCÆlback
 (
HTTimîSëCÆlback
 * 
cbf
)

133 
	`HTTRACE
(
CORE_TRACE
, "Timî.......Ñegi°îög %∞a†timî dñëêcbf\n" 
_
 
cbf
);

134 i‡(
cbf
) {

135 
DñëePœtf‹mTimî
 = 
cbf
;

136  
YES
;

138  
NO
;

139 
	}
}

141 
PUBLIC
 
ms_t
 
	$HTTimî_expúesRñ©ive
 (
HTTimî
 * 
timî
)

143  
timî
 ?Åimî->
mûlis
 : 0;

144 
	}
}

146 
PUBLIC
 
ms_t
 
	$HTTimî_expúesAbsﬁuã
 (
HTTimî
 * 
timî
)

148  
timî
 ?Åimî->
expúes
 : 0;

149 
	}
}

151 
PUBLIC
 
HTTimîCÆlback
 * 
	$HTTimî_ˇŒback
 (
HTTimî
 * 
timî
)

153  
timî
 ?Åimî->
cbf
 : 
NULL
;

154 
	}
}

156 
PUBLIC
 
BOOL
 
	$HTTimî_isRñ©ive
 (
HTTimî
 * 
timî
)

158  
timî
 ?Åimî->
ªœtive
 : 
NO
;

159 
	}
}

161 
PUBLIC
 
BOOL
 
	$HTTimî_dñëe
 (
HTTimî
 * 
timî
)

163 
HTLi°
 * 
œ°
;

164 
HTLi°
 * 
cur
;

165 
	`CHECKME
(
timî
);

166 i‡((
cur
 = 
	`HTLi°_ñemítOf
(
Timîs
, (*)
timî
, &
œ°
)Ë=
NULL
Ë
	`CLEARME
(timer);

167 i‡(
	`HTLi°_quickRemoveEÀmít
(
cur
, 
œ°
)) {

168 
	`HTTRACE
(
THD_TRACE
, "Timî....... Dñëedá˘ivêtimî %p\n" 
_
 
timî
);

170 
	`HTTRACE
(
THD_TRACE
, "Timî....... DñëedÉxpúedÅimî %p\n" 
_
 
timî
);

176 i‡(
DñëePœtf‹mTimî
Ë
	`DñëePœtf‹mTimî
(
timî
);

178 
	`CLEARME
(
timî
);

179 
	`HT_FREE
(
timî
);

180  
YES
;

181 
	}
}

183 
PUBLIC
 
HTTimî
 * 
	$HTTimî_√w
 (
HTTimî
 * 
timî
, 
HTTimîCÆlback
 * 
cbf
,

184 * 
∑øm
, 
ms_t
 
mûlis
, 
BOOL
 
ªœtive
,

185 
BOOL
 
ª≥tôive
)

187 
HTLi°
 * 
œ°
;

188 
HTLi°
 * 
cur
;

189 
ms_t
 
now
 = 
	`HTGëTimeInMûlis
();

190 
ms_t
 
expúes
;

191 
HTTimî
 * 
¥es
;

193 
	`CHECKME
(
timî
);

194 
expúes
 = 
mûlis
;

195 i‡(
ªœtive
)

196 
expúes
 +
now
;

198 
mûlis
 = 
expúes
-
now
;

200 i‡(
Timîs
 =
NULL
)

201 
Timîs
 = 
	`HTLi°_√w
();

203 i‡(
timî
) {

207 i‡((
cur
 = 
	`HTLi°_ñemítOf
(
Timîs
, (*)
timî
, &
œ°
)Ë=
NULL
) {

208 
	`HTDEBUGBREAK
("Timî %∞nŸ found\n" 
_
 
timî
);

209 
	`CLEARME
(
timî
);

210  
NULL
;

212 
	`HTLi°_quickRemoveEÀmít
(
cur
, 
œ°
);

213 
	`HTTRACE
(
THD_TRACE
, "Timî....... FoundÅimî %∞wôh cÆlback %p, c⁄ãxà%p,ánd %†timeouà%d\n" 
_


214 
timî
 
_
 
cbf
 _ 
∑øm
 _ 
ªœtive
 ? "ªœtive" : "absﬁuã" _ 
mûlis
);

220 i‡((
timî
 = (
HTTimî
 *Ë
	`HT_CALLOC
(1, (HTTimî))Ë=
NULL
)

221 
	`HT_OUTOFMEM
("HTTimer_new");

222 
œ°
 = 
Timîs
;

223 
	`HTTRACE
(
THD_TRACE
, "Timî....... Cª©ed %†timî %∞wôh cÆlback %p, c⁄ãxà%p,ánd %†timeouà%d\n" 
_


224 
ª≥tôive
 ? "ª≥tôive" : "⁄êshŸ" 
_


225 
timî
 
_
 
cbf
 _ 
∑øm
 _

226 
ªœtive
 ? "ªœtive" : "absﬁuã" 
_
 
mûlis
);

232 
cur
 = 
œ°
;

233 (
¥es
 = (
HTTimî
 *Ë
	`HTLi°_√xtObje˘
(
cur
)Ë!
NULL
 &&Öªs->
expúes
 <Éxpires;

234 
œ°
 = 
cur
);

239 i‡(!
mûlis
Ë
	`HTTRACE
(
THD_TRACE
, "Timer....... Timeout is 0 -Éxpires NOW\n");

241 
timî
->
expúes
 =Éxpires;

242 
timî
->
cbf
 = cbf;

243 
timî
->
∑øm
 =Öaram;

244 
timî
->
mûlis
 = millis;

245 
timî
->
ªœtive
 =Ñelative;

246 
timî
->
ª≥tôive
 =Ñepetitive;

247 
	`SETME
(
timî
);

252 
cur
 = 
	`HTLi°_addLi°
(
œ°
, (*)
timî
);

257 i‡(
SëPœtf‹mTimî
Ë
	`SëPœtf‹mTimî
(
timî
);

260 i‡(
timî
->
expúes
 <
now
Ë
	`Timî_di•©ch
(
cur
, 
œ°
);

262 
	`CLEARME
(
timî
);

263  
timî
;

264 
	}
}

267 
PUBLIC
 
BOOL
 
	$HTTimî_ª‰esh
 (
HTTimî
 * 
timî
, 
ms_t
 
now
)

269 i‡(
timî
 =
NULL
 ||Åimî->
ª≥tôive
 =
NO
)

270  
NO
;

271 i‡(
	`HTTimî_√w
(
timî
,Åimî->
cbf
,Åimî->
∑øm
,Åimî->
mûlis
, 
YES
, YESË=
NULL
)

272  
NO
;

273  
YES
;

274 
	}
}

276 
PUBLIC
 
BOOL
 
	$HTTimî_dñëeAŒ
 ()

278 
HTLi°
 * 
cur
 = 
Timîs
;

279 
HTTimî
 * 
¥es
;

280 i‡(
Timîs
) {

281 (
¥es
 = (
HTTimî
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

286 i‡(
DñëePœtf‹mTimî
Ë
	`DñëePœtf‹mTimî
(
¥es
);

287 
	`HT_FREE
(
¥es
);

289 
	`HTLi°_dñëe
(
Timîs
);

290 
Timîs
 = 
NULL
;

291  
YES
;

293  
NO
;

294 
	}
}

296 
PUBLIC
 
	$HTTimî_di•©ch
 (
HTTimî
 * 
timî
)

298 
HTLi°
 * 
cur
;

299 
HTLi°
 * 
œ°
 = 
Timîs
;

300 
cur
 = 
	`HTLi°_ñemítOf
(
Timîs
, (*)
timî
, &
œ°
);

301  
	`Timî_di•©ch
(
cur
, 
œ°
);

302 
	}
}

307 
PUBLIC
 
BOOL
 
	$HTTimî_hasTimîExpúed
 (
HTTimî
 * 
timî
)

309  (
timî
 &&Åimî->
expúes
 <
	`HTGëTimeInMûlis
());

310 
	}
}

312 
PUBLIC
 
	$HTTimî_√xt
 (
ms_t
 * 
pSo⁄e°
)

314 
HTLi°
 * 
cur
 = 
Timîs
;

315 
HTLi°
 * 
œ°
 = 
Timîs
;

316 
HTTimî
 * 
¥es
;

317 
ms_t
 
now
 = 
	`HTGëTimeInMûlis
();

318 
ªt
 = 
HT_OK
;

323 
Timîs
 && (
¥es
 = (
HTTimî
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

324 i‡(
¥es
->
expúes
 <
now
) {

325 i‡((
ªt
 = 
	`Timî_di•©ch
(
cur
, 
œ°
)Ë!
HT_OK
) ;

326 
cur
 = 
œ°
 = 
Timîs
;

328 
œ°
 = 
cur
;

332 i‡(
pSo⁄e°
) {

336 
HTLi°
 * 
cur
 = 
Timîs
;

337 
¥es
 = (
HTTimî
 *Ë
	`HTLi°_√xtObje˘
(
cur
);

338 *
pSo⁄e°
 = 
¥es
 ?Öªs->
expúes
 - 
now
 : 0;

340  
ªt
;

341 
	}
}

343 #ifde‡
WATCH_RECURSION


344 
CheckSockEvít
(
HTTimî
 * 
timî
, 
HTTimîCÆlback
 * 
cbf
, * 
∑øm
);

345 
PRIVATE
 
	$CheckTimîs
()

347 
HTLi°
 * 
cur
 = 
Timîs
;

348 
HTTimî
 * 
¥es
;

349 (
¥es
 = (
HTTimî
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

350 
	`CheckSockEvít
(
¥es
,Öªs->
cbf
,Öªs->
∑øm
);

352 
	}
}

	@Library/src/HTTimer.h

46 #i‚de‡
HTTIMER_H


47 
	#HTTIMER_H


	)

49 
	~"wwwsys.h
"

50 
	~"HTReq.h
"

52 
_HTTimî
 
	tHTTimî
;

54 
	tHTTimîCÆlback
 (
	tHTTimî
 *, *, 
	tHTEvítTy≥
 
	tty≥
);

64 
HTTimî
 * 
HTTimî_√w
 (HTTimî *, 
HTTimîCÆlback
 *,

65 *, 
ms_t
 
mûlis
,

66 
BOOL
 
ªœtive
, BOOL 
ª≥tôive
);

67 
BOOL
 
HTTimî_dñëe
 (
HTTimî
 * 
timî
);

68 
BOOL
 
HTTimî_dñëeAŒ
 ();

69 
BOOL
 
HTTimî_expúeAŒ
 ();

79 
HTTimî_di•©ch
 (
HTTimî
 * 
timî
);

90 
HTTimî_√xt
 (
ms_t
 * 
pSo⁄e°
);

98 
BOOL
 
HTTimî_ª‰esh
(
HTTimî
 * 
timî
, 
ms_t
 
now
);

111 
ms_t
 
HTTimî_expúesAbsﬁuã
 (
HTTimî
 * 
timî
);

122 
	#HTTimî_gëTime
(
t
Ë
	`HTTimî_expúesRñ©ive
—)

	)

123 
ms_t
 
HTTimî_expúesRñ©ive
 (
HTTimî
 * 
timî
);

133 
BOOL
 
HTTimî_hasTimîExpúed
 (
HTTimî
 * 
timî
);

141 
HTTimîCÆlback
 * 
HTTimî_ˇŒback
 (
HTTimî
 * 
timî
);

149 
BOOL
 
HTTimî_isRñ©ive
 (
HTTimî
 * 
timî
);

161 
BOOL
 
	tHTTimîSëCÆlback
 (
	tHTTimî
 * 
	ttimî
);

163 
BOOL
 
HTTimî_ªgi°îSëTimîCÆlback
 (
HTTimîSëCÆlback
 * 
cbf
);

164 
BOOL
 
HTTimî_ªgi°îDñëeTimîCÆlback
 (
HTTimîSëCÆlback
 * 
cbf
);

	@Library/src/HTTrace.c

13 
	~"wwwsys.h
"

18 
	~"HTUtûs.h
"

20 #i‡
WWWTRACE_MODE
 =
WWWTRACE_FILE


21 
PUBLIC
 
FILE
 *
	gWWWTø˚
 = 
NULL
;

24 #i‚de‡
WWW_WIN_DLL


25 
PUBLIC
 
	gWWW_Tø˚Fœg
 = 0;

28 
PRIVATE
 
HTTø˚CÆlback
 * 
	gPHTTø˚CÆlback
 = 
NULL
;

29 
PRIVATE
 
HTPrötCÆlback
 * 
	gPHTPrötCÆlback
 = 
NULL
;

30 
PRIVATE
 
HTTø˚D©aCÆlback
 * 
	gPHTTø˚D©aCÆlback
 = 
NULL
;

34 
PUBLIC
 
	$HTTø˚_£tCÆlback
 (
HTTø˚CÆlback
 * 
pCÆl
)

36 
PHTTø˚CÆlback
 = 
pCÆl
;

37 
	}
}

39 
PUBLIC
 
HTTø˚CÆlback
 * 
	$HTTø˚_gëCÆlback
 ()

41  
PHTTø˚CÆlback
;

42 
	}
}

44 
PUBLIC
 
	$HTTø˚
 (c⁄° * 
fmt
, ...)

46 
va_li°
 
pArgs
;

47 
	`va_°¨t
(
pArgs
, 
fmt
);

48 i‡(
PHTTø˚CÆlback
)

49  (*
PHTTø˚CÆlback
)(
fmt
, 
pArgs
);

50 #ifde‡
WWW_WIN_WINDOW


53  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

55 
	}
}

57 
PUBLIC
 
	$HTTø˚D©a_£tCÆlback
 (
HTTø˚D©aCÆlback
 * 
pCÆl
)

59 
PHTTø˚D©aCÆlback
 = 
pCÆl
;

60 
	}
}

62 
PUBLIC
 
HTTø˚D©aCÆlback
 * 
	$HTTø˚D©a_gëCÆlback
 ()

64  
PHTTø˚D©aCÆlback
;

65 
	}
}

67 
PUBLIC
 
	$HTTø˚D©a
 (* 
d©a
, 
size_t
 
Àn
, * 
fmt
, ...)

69 
va_li°
 
pArgs
;

70 
	`va_°¨t
(
pArgs
, 
fmt
);

71 i‡(
PHTTø˚D©aCÆlback
)

72  (*
PHTTø˚D©aCÆlback
)(
d©a
, 
Àn
, 
fmt
, 
pArgs
);

74 
	}
}

76 
PUBLIC
 
	$HTPröt_£tCÆlback
 (
HTPrötCÆlback
 * 
pCÆl
)

78 
PHTPrötCÆlback
 = 
pCÆl
;

79 
	}
}

81 
PUBLIC
 
HTPrötCÆlback
 * 
	$HTPröt_gëCÆlback
 ()

83  
PHTPrötCÆlback
;

84 
	}
}

86 
PUBLIC
 
	$HTPröt
 (c⁄° * 
fmt
, ...)

88 
va_li°
 
pArgs
;

89 
	`va_°¨t
(
pArgs
, 
fmt
);

90 i‡(
PHTPrötCÆlback
)

91  (*
PHTPrötCÆlback
)(
fmt
, 
pArgs
);

92 #ifde‡
WWW_WIN_WINDOW


95  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

97 
	}
}

99 
PUBLIC
 
	$HTDebugBªak
 (* 
fûe
, 
löe
, c⁄° * 
fmt
, ...)

101 
va_li°
 
pArgs
;

102 
	`va_°¨t
(
pArgs
, 
fmt
);

103 
	`HTTø˚
("%s:%ld ", 
fûe
 ? fûê: "", 
löe
);

104 
	`HTTø˚
(
fmt
, 
pArgs
);

105 #ifde‡
WWW_MSWINDOWS


106 
	`DebugBªak
();

108 
	`ab‹t
();

111 
	}
}

	@Library/src/HTTrans.c

13 
	~"wwwsys.h
"

14 
	~"WWWUtû.h
"

15 
	~"HTP¨£.h
"

16 
	~"HTReq.h
"

17 
	~"HTIOSåóm.h
"

18 
	~"HTTøns.h
"

20 
PRIVATE
 
HTLi°
 * 
	gå™•‹ts
 = 
NULL
;

27 
PUBLIC
 
BOOL
 
	$HTTøn•‹t_add
 (c⁄° * 
«me
,

28 
HTTøn•‹tMode
 
mode
,

29 
HTI≈ut_√w
 * 
gë_öput
,

30 
HTOuçut_√w
 * 
gë_ouçut
)

32 i‡(
«me
 && (
gë_öput
 || 
gë_ouçut
)) {

33 
HTTøn•‹t
 * 
ç
;

34 i‡((
ç
 = (
HTTøn•‹t
 *Ë
	`HT_CALLOC
(1, (HTTøn•‹t))Ë=
NULL
)

35 
	`HT_OUTOFMEM
("HTTransport_add");

36 
	`SåAŒocC›y
(
ç
->
«me
,Çame);

38 *
±r
 = 
ç
->
«me
;

39 (*
±r
 = 
	`TOLOWER
(*ptr)))Ötr++;

41 
ç
->
mode
 = mode;

42 
ç
->
öput_√w
 = 
gë_öput
;

43 
ç
->
ouçut_√w
 = 
gë_ouçut
;

44 i‡(!
å™•‹ts
Ëå™•‹t†
	`HTLi°_√w
();

45 
	`HTTRACE
(
CORE_TRACE
, "Tøn•‹t... Addög `%s'\n" 
_
 
«me
);

46  
	`HTLi°_addObje˘
(
å™•‹ts
, (*Ë
ç
);

47 } 
	`HTTRACE
(
CORE_TRACE
, "Transport... Can'táddÅhis...\n");

48  
NO
;

49 
	}
}

54 
PUBLIC
 
BOOL
 
	$HTTøn•‹t_dñëe
 (c⁄° * 
«me
)

56 i‡(
å™•‹ts
) {

57 
HTLi°
 *
cur
 = 
å™•‹ts
;

58 
HTTøn•‹t
 *
¥es
;

59 (
¥es
 = (
HTTøn•‹t
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

60 i‡(!
	`°rcmp
(
¥es
->
«me
,Çame)) {

61 
BOOL
 
°©us
 = 
	`HTLi°_ªmoveObje˘
(
å™•‹ts
, (*Ë
¥es
);

62 
	`HT_FREE
(
¥es
->
«me
);

63 
	`HT_FREE
(
¥es
);

64  
°©us
;

68  
NO
;

69 
	}
}

75 
PUBLIC
 
BOOL
 
	$HTTøn•‹t_dñëeAŒ
 ()

77 i‡(
å™•‹ts
) {

78 
HTLi°
 * 
cur
 = 
å™•‹ts
;

79 
HTTøn•‹t
 * 
¥es
;

80 (
¥es
 = (
HTTøn•‹t
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

81 
	`HT_FREE
(
¥es
->
«me
);

82 
	`HT_FREE
(
¥es
);

84 
	`HTLi°_dñëe
(
å™•‹ts
);

85 
å™•‹ts
 = 
NULL
;

86  
YES
;

88  
NO
;

89 
	}
}

95 
PUBLIC
 
HTTøn•‹t
 * 
	$HTTøn•‹t_föd
 (
HTReque°
 * 
ªque°
, c⁄° * 
«me
)

97 i‡(
«me
) {

98 
HTLi°
 * 
cur
 = 
å™•‹ts
;

99 
HTTøn•‹t
 * 
¥es
;

100 i‡(
cur
) {

101 (
¥es
 = (
HTTøn•‹t
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

102 i‡(!
	`°rcmp
(
¥es
->
«me
,Çame)) Öres;

105 i‡(
ªque°
)

106 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_CLASS
, (*Ë
«me
,

107 (Ë
	`°æí
(
«me
), "HTTransport_find");

109  
NULL
;

110 
	}
}

112 
PUBLIC
 
HTTøn•‹tMode
 
	$HTTøn•‹t_mode
 (
HTTøn•‹t
 * 
ç
)

114  (
ç
 ?Åp->
mode
 : 
HT_TP_SINGLE
);

115 
	}
}

117 
PUBLIC
 
BOOL
 
	$HTTøn•‹t_£tMode
 (
HTTøn•‹t
 * 
ç
, 
HTTøn•‹tMode
 
mode
)

119 i‡(
ç
) {

120 
ç
->
mode
 = mode;

121  
YES
;

123  
NO
;

124 
	}
}

	@Library/src/HTTrans.h

37 #i‚de‡
HTTRANS_H


38 
	#HTTRANS_H


	)

52 
_HTTøn•‹t
 
	tHTTøn•‹t
;

54 
	e_HTTøn•‹tMode
 {

55 
	mHT_TP_SINGLE
 = 0,

56 
	mHT_TP_PIPELINE
 = 1,

57 
	mHT_TP_INTERLEAVE
 = 2

58 } 
	tHTTøn•‹tMode
;

60 
	~"HTIOSåóm.h
"

61 
	~"HTReq.h
"

75 
BOOL
 
HTTøn•‹t_add
 (c⁄° * 
«me
,

76 
HTTøn•‹tMode
 
mode
,

77 
HTI≈ut_√w
 * 
gë_öput
,

78 
HTOuçut_√w
 * 
gë_ouçut
);

89 
BOOL
 
HTTøn•‹t_dñëe
 (c⁄° * 
«me
);

100 
BOOL
 
HTTøn•‹t_dñëeAŒ
 ();

114 
HTTøn•‹t
 * 
HTTøn•‹t_föd
 (
HTReque°
 * 
ªque°
, c⁄° * 
«me
);

126 
HTTøn•‹tMode
 
HTTøn•‹t_mode
 (
HTTøn•‹t
 * 
ç
);

127 
BOOL
 
HTTøn•‹t_£tMode
 (
HTTøn•‹t
 * 
ç
, 
HTTøn•‹tMode
 
mode
);

135 
	s_HTTøn•‹t
 {

136 * 
	m«me
;

137 
HTTøn•‹tMode
 
	mmode
;

138 
HTI≈ut_√w
 * 
	möput_√w
;

139 
HTOuçut_√w
 * 
	mouçut_√w
;

	@Library/src/HTUTree.c

25 
	~"wwwsys.h
"

26 
	~"WWWUtû.h
"

27 
	~"HTUTªe.h
"

29 
	#TREE_TIMEOUT
 43200L

	)

31 
	s_HTUTªe
 {

32 * 
	m«me
;

33 * 
	mho°
;

34 
	mp‹t
;

36 
HTLi°
 * 
	mãm∂©es
;

37 
HTLi°
 * 
	mªÆms
;

39 
time_t
 
	m¸óãd
;

40 
HTUTªe_gc
 * 
	mgc
;

43 
	s_HTURólm
 {

44 * 
	mªÆm
;

45 * 
	mc⁄ãxt
;

46 
HTUTem∂©e
 * 
	mtm_±r
;

49 
	s_HTUTem∂©e
 {

50 * 
	mtm∂©e
;

51 
HTURólm
 * 
	mrm_±r
;

54 
PRIVATE
 
HTLi°
 ** 
	gInfoTabÀ
 = 
NULL
;

55 
PRIVATE
 
time_t
 
	gUTªeTimeout
 = 
TREE_TIMEOUT
;

63 
PRIVATE
 
HTURólm
 * 
	$HTUTªe_√wRólm
 (
HTUTªe
 * 
åì
, c⁄° * 
ªÆm
,

64 * 
c⁄ãxt
)

66 i‡(
åì
) {

67 
HTURólm
 * 
me
;

68 i‡((
me
 = (
HTURólm
 *Ë
	`HT_CALLOC
(1, (HTURólm))Ë=
NULL
)

69 
	`HT_OUTOFMEM
("HTURealm_new");

70 i‡(
ªÆm
Ë
	`SåAŒocC›y
(
me
->realm,Ñealm);

71 
me
->
c⁄ãxt
 = context;

72 
	`HTLi°_addObje˘
(
åì
->
ªÆms
, (*Ë
me
);

73  
me
;

75  
NULL
;

76 
	}
}

82 
PRIVATE
 
BOOL
 
	$HTUTªe_dñëeRólm
 (
HTUTªe
 * 
åì
, 
HTURólm
 * 
me
)

84 i‡(
åì
 && 
me
) {

85 i‡(
åì
->
gc
 && 
me
->
c⁄ãxt
) (*tree->gc)(me->context);

86 
	`HTLi°_ªmoveObje˘
(
åì
->
ªÆms
, (*Ë
me
);

87 
	`HT_FREE
(
me
->
ªÆm
);

88 
	`HT_FREE
(
me
);

89  
YES
;

91  
NO
;

92 
	}
}

97 
PRIVATE
 
HTURólm
 * 
	$HTUTªe_födRólm
 (
HTUTªe
 * 
åì
, c⁄° * 
ªÆm
)

99 i‡(
åì
 &&Åªe->
ªÆms
 && 
ªÆm
) {

100 
HTLi°
 * 
cur
 = 
åì
->
ªÆms
;

101 
HTURólm
 * 
¥es
;

102 (
¥es
 = (
HTURólm
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

103 i‡(!
	`°rcmp
(
¥es
->
ªÆm
,Ñealm)) {

104 
	`HTTRACE
(
CORE_TRACE
, "URL Node.... Rólm `%s\' found\n" 
_
 
ªÆm
);

105  
¥es
;

109  
NULL
;

110 
	}
}

117 
PRIVATE
 
HTUTem∂©e
 * 
	$HTUTªe_√wTem∂©e
 (
HTUTªe
 * 
åì
,c⁄° * 
tm∂©e
)

119 i‡(
åì
 && 
tm∂©e
) {

120 
HTUTem∂©e
 * 
me
;

121 i‡((
me
 = (
HTUTem∂©e
 *Ë
	`HT_CALLOC
(1, (HTUTem∂©e))Ë=
NULL
)

122 
	`HT_OUTOFMEM
("HTUTemplate_new");

123 
	`SåAŒocC›y
(
me
->
tm∂©e
,Åmplate);

124 
	`HTLi°_addObje˘
(
åì
->
ãm∂©es
, (*Ë
me
);

125  
me
;

127  
NULL
;

128 
	}
}

133 
PRIVATE
 
BOOL
 
	$HTUTªe_dñëeTem∂©e
 (
HTUTªe
 * 
åì
, 
HTUTem∂©e
 * 
me
)

135 i‡(
åì
 && 
me
) {

136 
	`HTLi°_ªmoveObje˘
(
åì
->
ãm∂©es
, (*Ë
me
);

137 
	`HT_FREE
(
me
->
tm∂©e
);

138 
	`HT_FREE
(
me
);

139  
YES
;

141  
NO
;

142 
	}
}

147 
PRIVATE
 
HTUTem∂©e
 * 
	$HTUTªe_födTem∂©e
 (
HTUTªe
 * 
åì
, c⁄° * 
∑th
)

149 i‡(
åì
 &&Åªe->
ãm∂©es
 && 
∑th
) {

150 
HTUTem∂©e
 * 
¥es
;

151 
HTLi°
 * 
cur
 = 
åì
->
ãm∂©es
;

152 (
¥es
 = (
HTUTem∂©e
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

153 i‡(
	`HTSåM©ch
(
¥es
->
tm∂©e
, 
∑th
)) {

154 
	`HTTRACE
(
CORE_TRACE
, "URL Node.... FoundÅem∂©ê`%s\' f‹ f‹ `%s\'\n" 
_


155 
¥es
->
tm∂©e
 
_
 
∑th
);

156  
¥es
;

160  
NULL
;

161 
	}
}

169 
PUBLIC
 * 
	$HTUTªe_födNode
 (
HTUTªe
 * 
åì
,

170 c⁄° * 
ªÆm
, c⁄° * 
∑th
)

172 
HTURólm
 * 
rm
 = 
	`HTUTªe_födRólm
(
åì
, 
ªÆm
);

173 i‡(
rm
)

174  
rm
->
c⁄ãxt
;

176 
HTUTem∂©e
 * 
tm
 = 
	`HTUTªe_födTem∂©e
(
åì
, 
∑th
);

177 i‡(
tm
ËÅm->
rm_±r
 ?Åm->rm_±r->
c⁄ãxt
 : 
NULL
;

179 
	`HTTRACE
(
CORE_TRACE
, "URL Node.... Not found\n");

180  
NULL
;

181 
	}
}

186 
PUBLIC
 
BOOL
 
	$HTUTªe_addNode
 (
HTUTªe
 * 
åì
,

187 c⁄° * 
ªÆm
, c⁄° * 
∑th
,

188 * 
c⁄ãxt
)

190 i‡(
åì
) {

191 i‡(
ªÆm
 && 
∑th
) {

192 
HTUTem∂©e
 * 
√w_ãm∂©e
 = 
	`HTUTªe_√wTem∂©e
(
åì
, 
∑th
);

193 
HTURólm
 * 
√w_ªÆm
 = 
	`HTUTªe_√wRólm
(
åì
, 
ªÆm
, 
c⁄ãxt
);

194 
√w_ªÆm
->
tm_±r
 = 
√w_ãm∂©e
;

195 
√w_ãm∂©e
->
rm_±r
 = 
√w_ªÆm
;

196  
YES
;

197 } i‡(
ªÆm
) {

198 
	`HTUTªe_√wRólm
(
åì
, 
ªÆm
, 
c⁄ãxt
);

199  
YES
;

201 
	`HTTRACE
(
CORE_TRACE
, "URL Node.... AtÜeastÑealm must beÖresent\n");

203  
NO
;

204 
	}
}

209 
PUBLIC
 
BOOL
 
	$HTUTªe_ª∂a˚Node
 (
HTUTªe
 * 
åì
,

210 c⁄° * 
ªÆm
, c⁄° * 
∑th
,

211 * 
c⁄ãxt
)

213 
HTURólm
 * 
rm
 = 
	`HTUTªe_födRólm
(
åì
, 
ªÆm
);

214 i‡(!
rm
) {

215 
HTUTem∂©e
 * 
tm
 = 
	`HTUTªe_födTem∂©e
(
åì
, 
∑th
);

216 i‡(
tm
Ë
rm
 =Åm->
rm_±r
;

218 i‡(
rm
) {

219 i‡(
åì
->
gc
 && 
rm
->
c⁄ãxt
) (*tree->gc)(rm->context);

220 
rm
->
c⁄ãxt
 = context;

221  
YES
;

223 
	`HTTRACE
(
CORE_TRACE
, "URL Node.... Not found\n");

224  
NO
;

225 
	}
}

230 
PUBLIC
 
BOOL
 
	$HTUTªe_dñëeNode
 (
HTUTªe
 * 
åì
,

231 c⁄° * 
ªÆm
, c⁄° * 
∑th
)

233 i‡(
åì
) {

234 
HTURólm
 * 
rm
 = 
	`HTUTªe_födRólm
(
åì
, 
ªÆm
);

235 
HTUTem∂©e
 * 
tm
 = 
rm
 ?Ñm->
tm_±r
 : 
	`HTUTªe_födTem∂©e
(
åì
, 
∑th
);

236 i‡(!
rm
Ërm = 
tm
 ?Åm->
rm_±r
 : 
NULL
;

237 
	`HTUTªe_dñëeRólm
(
åì
, 
rm
);

238 
	`HTUTªe_dñëeTem∂©e
(
åì
, 
tm
);

239  
YES
;

241  
NO
;

242 
	}
}

245 
PRIVATE
 
BOOL
 
	$dñëe_åì
 (
HTUTªe
 * 
åì
)

247 i‡(
åì
) {

248 
HTLi°
 * 
cur
;

251 i‡((
cur
 = 
åì
->
ãm∂©es
)) {

252 
HTUTem∂©e
 * 
¥es
;

253 (
¥es
 = (
HTUTem∂©e
 *Ë
	`HTLi°_œ°Obje˘
(
cur
)))

254 
	`HTUTªe_dñëeTem∂©e
(
åì
, 
¥es
);

255 
	`HTLi°_dñëe
(
åì
->
ãm∂©es
);

259 i‡((
cur
 = 
åì
->
ªÆms
)) {

260 
HTURólm
 * 
¥es
;

261 (
¥es
 = (
HTURólm
 *Ë
	`HTLi°_œ°Obje˘
(
cur
)))

262 
	`HTUTªe_dñëeRólm
(
åì
, 
¥es
);

263 
	`HTLi°_dñëe
(
åì
->
ªÆms
);

266 
	`HT_FREE
(
åì
->
«me
);

267 
	`HT_FREE
(
åì
->
ho°
);

268 
	`HT_FREE
(
åì
);

269  
YES
;

271  
NO
;

272 
	}
}

278 
PRIVATE
 
HTUTªe
 * 
	$föd_åì
 (c⁄° * 
«me
,

279 c⁄° * 
ho°
,

280 
p‹t
,

281 
HTLi°
 ** 
hashli°
)

283 
HTUTªe
 * 
¥es
 = 
NULL
;

284 *
hashli°
 = 
NULL
;

285 i‡(!
«me
 || !
ho°
) {

286 
	`HTTRACE
(
CORE_TRACE
, "URL Tree.... Badárgument\n");

287  
NULL
;

292 
hash
;

293 c⁄° * 
p
;

294 
p
=
ho°
, 
hash
=0; *p;Ö++) {

295 
hash
 = (hash * 3 + *
p
Ë% 
HT_L_HASH_SIZE
;

297 i‡(!
InfoTabÀ
) {

298 i‡((
InfoTabÀ
 = (
HTLi°
 **Ë
	`HT_CALLOC
(
HT_L_HASH_SIZE
,

299 (
HTLi°
 *))Ë=
NULL
)

300 
	`HT_OUTOFMEM
("HTUTree_find");

302 i‡(!
InfoTabÀ
[
hash
])

303 
InfoTabÀ
[
hash
] = *
hashli°
 = 
	`HTLi°_√w
();

305 *
hashli°
 = 
InfoTabÀ
[
hash
];

310 
HTLi°
 * 
cur
 = *
hashli°
;

311 (
¥es
 = (
HTUTªe
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

312 i‡(!
	`°rcmp
(
¥es
->
«me
,ÇameË&& !°rcmp’ªs->
ho°
, host) &&

313 
¥es
->
p‹t
==port) {

314 i‡(
	`time
(
NULL
Ë> 
¥es
->
¸óãd
 + 
UTªeTimeout
) {

315 
	`HTTRACE
(
CORE_TRACE
, "URL Tªe.... CﬁÀ˘ög URL Tªê%p\n" 
_
 
¥es
);

316 
	`HTLi°_ªmoveObje˘
(*
hashli°
, 
¥es
);

317 
	`dñëe_åì
(
¥es
);

318 
¥es
 = 
NULL
;

320  
¥es
;

324  
NULL
;

325 
	}
}

331 
PUBLIC
 
HTUTªe
 * 
	$HTUTªe_√w
 (c⁄° * 
«me
,

332 c⁄° * 
ho°
,

333 
p‹t
,

334 
HTUTªe_gc
 * 
gc
)

336 i‡(
«me
 && 
ho°
) {

337 
HTLi°
 * 
hashli°
 = 
NULL
;

338 
HTUTªe
 * 
¥es
 = 
	`föd_åì
(
«me
, 
ho°
, 
p‹t
, &
hashli°
);

341 i‡(!
¥es
) {

342 i‡((
¥es
 = (
HTUTªe
 *Ë
	`HT_CALLOC
(1, (HTUTªe))Ë=
NULL
)

343 
	`HT_OUTOFMEM
("HTUTree_new");

344 
	`SåAŒocC›y
(
¥es
->
«me
,Çame);

345 
	`SåAŒocC›y
(
¥es
->
ho°
, host);

346 
¥es
->
p‹t
 = (port > 0 ?Öort : 80);

347 
¥es
->
ãm∂©es
 = 
	`HTLi°_√w
();

348 
¥es
->
ªÆms
 = 
	`HTLi°_√w
();

349 
¥es
->
¸óãd
 = 
	`time
(
NULL
);

350 
¥es
->
gc
 = gc;

353 
	`HTLi°_addObje˘
(
hashli°
, (*Ë
¥es
);

354 
	`HTTRACE
(
CORE_TRACE
, "URL Tªe.... Cª©ed %∞wôhÇamê`%s\'\n" 
_


355 
¥es
 
_
Öªs->
«me
);

357 
	`HTTRACE
(
CORE_TRACE
, "URL Tªe.... Found %∞wôhÇamê`%s\'\n" 
_


358 
¥es
 
_
Öªs->
«me
);

360  
¥es
;

362 
	`HTTRACE
(
CORE_TRACE
, "URL Tree.... Badárgument\n");

363  
NULL
;

365 
	}
}

370 
PUBLIC
 
HTUTªe
 * 
	$HTUTªe_föd
 (c⁄° * 
«me
,

371 c⁄° * 
ho°
,

372 
p‹t
)

374 i‡(
«me
 && 
ho°
) {

375 
HTLi°
 * 
hashli°
 = 
NULL
;

376 
HTUTªe
 * 
¥es
 = 
	`föd_åì
(
«me
, 
ho°
, 
p‹t
, &
hashli°
);

377 
	`HTTRACE
(
CORE_TRACE
, "URL Tªe.... did %sföd `%s\'\n" 
_


378 
¥es
 ? "" : "NOT " 
_
 
«me
);

379  
¥es
;

381 
	`HTTRACE
(
CORE_TRACE
, "URL Tree.... Badáugument\n");

383  
NULL
;

384 
	}
}

390 
PUBLIC
 
BOOL
 
	$HTUTªe_dñëe
 (c⁄° * 
«me
,

391 c⁄° * 
ho°
,

392 
p‹t
)

394 i‡(
«me
 && 
ho°
) {

395 
HTLi°
 * 
hashli°
 = 
NULL
;

396 
HTUTªe
 * 
¥es
 = 
	`föd_åì
(
«me
, 
ho°
, 
p‹t
, &
hashli°
);

397 i‡(
¥es
) {

398 
	`HTLi°_ªmoveObje˘
(
hashli°
, 
¥es
);

399 
	`dñëe_åì
(
¥es
);

400 
	`HTTRACE
(
CORE_TRACE
, "URL Tªe.... dñëed %p\n" 
_
 
¥es
);

401  
YES
;

404  
NO
;

405 
	}
}

410 
PUBLIC
 
BOOL
 
	$HTUTªe_dñëeAŒ
 ()

412 i‡(
InfoTabÀ
) {

413 
˙t
;

414 
HTLi°
 * 
cur
;

415 
˙t
=0; c¡<
HT_L_HASH_SIZE
; cnt++) {

416 i‡((
cur
 = 
InfoTabÀ
[
˙t
])) {

417 
HTUTªe
 * 
¥es
;

418 (
¥es
 = (
HTUTªe
 *Ë
	`HTLi°_√xtObje˘
(
cur
)))

419 
	`dñëe_åì
(
¥es
);

421 
	`HTLi°_dñëe
(
InfoTabÀ
[
˙t
]);

423 
	`HT_FREE
(
InfoTabÀ
);

424  
YES
;

426  
NO
;

427 
	}
}

	@Library/src/HTUTree.h

61 #i‚de‡
HTUTREE_H


62 
	#HTUTREE_H


	)

63 
	~"HTReq.h
"

73 
_HTUTªe
 
	tHTUTªe
;

74 
_HTURólm
 
	tHTURólm
;

75 
_HTUTem∂©e
 
	tHTUTem∂©e
;

86 
	tHTUTªe_gc
 (* 
	tc⁄ãxt
);

88 
HTUTªe
 * 
HTUTªe_√w
 (c⁄° * 
roŸ
,

89 c⁄° * 
ho°
,

90 
p‹t
,

91 
HTUTªe_gc
 * 
gc
);

101 
BOOL
 
HTUTªe_dñëe
 (c⁄° * 
roŸ
,

102 c⁄° * 
ho°
,

103 
p‹t
);

113 
BOOL
 
HTUTªe_dñëeAŒ
 ();

123 
HTUTªe
 * 
HTUTªe_föd
 (c⁄° * 
roŸ
,

124 c⁄° * 
ho°
,

125 
p‹t
);

135 * 
HTUTªe_födNode
 (
HTUTªe
 * 
åì
,

136 c⁄° * 
ªÆm
, c⁄° * 
∑th
);

142 
BOOL
 
HTUTªe_addNode
 (
HTUTªe
 * 
åì
,

143 c⁄° * 
ªÆm
, c⁄° * 
∑th
,

144 * 
c⁄ãxt
);

151 
BOOL
 
HTUTªe_ª∂a˚Node
 (
HTUTªe
 * 
åì
,

152 c⁄° * 
ªÆm
, c⁄° * 
∑th
,

153 * 
c⁄ãxt
);

159 
BOOL
 
HTUTªe_dñëeNode
 (
HTUTªe
 * 
åì
,

160 c⁄° * 
ªÆm
, c⁄° * 
∑th
);

	@Library/src/HTUU.c

45 
	~"wwwsys.h
"

46 
	~"HTUtûs.h
"

47 
	~"HTUU.h
"

50 
PRIVATE
 
	gsix2¥
[64] = {

58 
PRIVATE
 
	g¥2six
[256];

81 
PUBLIC
 
	$HTUU_ícode
 (* 
bufö
,

82 
nbyãs
,

83 * 
bufcoded
)

86 
	#ENC
(
c
Ë
six2¥
[c]

	)

88 *
ouçå
 = 
bufcoded
;

89 
i
;

91 
i
=0; i<
nbyãs
; i += 3) {

92 *(
ouçå
++Ë
	`ENC
(*
bufö
 >> 2);

93 *(
ouçå
++Ë
	`ENC
(((*
bufö
 << 4) & 060) | ((bufin[1] >> 4) & 017));

94 *(
ouçå
++Ë
	`ENC
(((
bufö
[1] << 2) & 074) | ((bufin[2] >> 6) & 03));

95 *(
ouçå
++Ë
	`ENC
(
bufö
[2] & 077);

97 
bufö
 += 3;

103 if(
i
 =
nbyãs
+1) {

105 
ouçå
[-1] = '=';

106 } if(
i
 =
nbyãs
+2) {

108 
ouçå
[-1] = '=';

109 
ouçå
[-2] = '=';

111 *
ouçå
 = '\0';

112 (
ouçå
 - 
bufcoded
);

113 
	}
}

135 
PUBLIC
 
	$HTUU_decode
 (* 
bufcoded
,

136 * 
buÂœö
,

137 
outbufsize
)

140 
	#DEC
(
c
Ë
¥2six
[()c]

	)

141 
	#MAXVAL
 63

	)

143 
fú°
 = 1;

145 
nbyãsdecoded
, 
j
;

146 *
bufö
 = 
bufcoded
;

147 *
bufout
 = 
buÂœö
;

148 
≈rbyãs
;

153 if(
fú°
) {

154 
fú°
 = 0;

155 
j
=0; j<256; j++Ë
¥2six
[j] = 
MAXVAL
+1;

157 
j
=0; j<64; j++Ë
¥2six
[()
six2¥
[j]] = () j;

159 
¥2six
['A']= 0;Ör2six['B']= 1;Ör2six['C']= 2;Ör2six['D']= 3;

160 
¥2six
['E']= 4;Ör2six['F']= 5;Ör2six['G']= 6;Ör2six['H']= 7;

161 
¥2six
['I']= 8;Ör2six['J']= 9;Ör2six['K']=10;Ör2six['L']=11;

162 
¥2six
['M']=12;Ör2six['N']=13;Ör2six['O']=14;Ör2six['P']=15;

163 
¥2six
['Q']=16;Ör2six['R']=17;Ör2six['S']=18;Ör2six['T']=19;

164 
¥2six
['U']=20;Ör2six['V']=21;Ör2six['W']=22;Ör2six['X']=23;

165 
¥2six
['Y']=24;Ör2six['Z']=25;Ör2six['a']=26;Ör2six['b']=27;

166 
¥2six
['c']=28;Ör2six['d']=29;Ör2six['e']=30;Ör2six['f']=31;

167 
¥2six
['g']=32;Ör2six['h']=33;Ör2six['i']=34;Ör2six['j']=35;

168 
¥2six
['k']=36;Ör2six['l']=37;Ör2six['m']=38;Ör2six['n']=39;

169 
¥2six
['o']=40;Ör2six['p']=41;Ör2six['q']=42;Ör2six['r']=43;

170 
¥2six
['s']=44;Ör2six['t']=45;Ör2six['u']=46;Ör2six['v']=47;

171 
¥2six
['w']=48;Ör2six['x']=49;Ör2six['y']=50;Ör2six['z']=51;

172 
¥2six
['0']=52;Ör2six['1']=53;Ör2six['2']=54;Ör2six['3']=55;

173 
¥2six
['4']=56;Ör2six['5']=57;Ör2six['6']=58;Ör2six['7']=59;

174 
¥2six
['8']=60;Ör2six['9']=61;Ör2six['+']=62;Ör2six['/']=63;

180 *
bufcoded
==' ' || *bufcoded == '\t') bufcoded++;

186 
bufö
 = 
bufcoded
;

187 
¥2six
[()*(
bufö
++)] <
MAXVAL
);

188 
≈rbyãs
 = 
bufö
 - 
bufcoded
 - 1;

189 
nbyãsdecoded
 = ((
≈rbyãs
+3)/4) * 3;

190 if(
nbyãsdecoded
 > 
outbufsize
) {

191 
≈rbyãs
 = (
outbufsize
*4)/3;

194 
bufö
 = 
bufcoded
;

196 
≈rbyãs
 > 0) {

197 *(
bufout
++Ë(Ë(
	`DEC
(*
bufö
) << 2 | DEC(bufin[1]) >> 4);

198 *(
bufout
++Ë(Ë(
	`DEC
(
bufö
[1]) << 4 | DEC(bufin[2]) >> 2);

199 *(
bufout
++Ë(Ë(
	`DEC
(
bufö
[2]) << 6 | DEC(bufin[3]));

200 
bufö
 += 4;

201 
≈rbyãs
 -= 4;

204 if(
≈rbyãs
 & 03) {

205 if(
¥2six
[()
bufö
[-2]] > 
MAXVAL
) {

206 
nbyãsdecoded
 -= 2;

208 
nbyãsdecoded
 -= 1;

212 (
nbyãsdecoded
);

213 
	}
}

	@Library/src/HTUU.h

34 #i‚de‡
HTUU_H


35 
	#HTUU_H


	)

38 
HTUU_ícode
 (* 
bufö
, 
nbyãs
,

39 * 
bufcoded
);

41 
HTUU_decode
 (* 
bufcoded
, * 
buÂœö
,

42 
outbufsize
);

	@Library/src/HTUser.c

14 
	~"wwwsys.h
"

15 
	~"WWWUtû.h
"

16 
	~"HTI√t.h
"

17 
	~"HTU£r.h
"

20 #i‚de‡
HT_TMP_ROOT


21 #ifde‡
WWW_MSWINDOWS


22 
	#HT_TMP_ROOT
 "C:\\Temp\\"

	)

24 
	#HT_TMP_ROOT
 "/tmp/"

	)

28 
	s_HTU£rProfûe
 {

29 * 
	mu£r
;

30 * 
	mfqdn
;

31 * 
	memaû
;

32 * 
	m√ws
;

33 * 
	mtmp
;

34 
time_t
 
	mtimez⁄e
;

35 * 
	mc⁄ãxt
;

44 
PUBLIC
 
HTU£rProfûe
 * 
	$HTU£rProfûe_√w
 (c⁄° * 
«me
, * 
c⁄ãxt
)

46 
HTU£rProfûe
 * 
me
 = 
NULL
;

47 i‡(
«me
) {

48 i‡((
me
 = (
HTU£rProfûe
 *Ë
	`HT_CALLOC
(1, (HTU£rProfûe)))==
NULL
)

49 
	`HT_OUTOFMEM
("HTUserProfile_new");

51 
	`HTTRACE
(
CORE_TRACE
, "U£∏ProfûêAddög `%s\'\n" 
_
 
«me
);

52 
	`SåAŒocC›y
(
me
->
u£r
, 
«me
);

55 
me
->
c⁄ãxt
 = context;

57  
me
;

58 
	}
}

65 
PUBLIC
 
BOOL
 
	$HTU£rProfûe_loˇlize
 (
HTU£rProfûe
 * 
up
)

67 i‡(
up
) {

68 
	`HTTRACE
(
CORE_TRACE
, "U£∏ProfûêLoˇlizög %p\n" 
_
 
up
);

71 
up
->
fqdn
 = 
	`HTGëHo°Name
();

74 
up
->
emaû
 = 
	`HTGëMaûAddªss
();

77 
up
->
√ws
 = 
	`HTGëNewsSîvî
();

80 
up
->
timez⁄e
 = 
	`HTGëTimeZ⁄eOff£t
();

83 
	`SåAŒocC›y
(
up
->
tmp
, 
HT_TMP_ROOT
);

84 i‡(*(
up
->
tmp
+
	`°æí
(up->tmp)-1Ë!
DIR_SEPARATOR_CHAR
)

85 
	`SåAŒocC©
(
up
->
tmp
, 
DIR_SEPARATOR_STR
);

87  
YES
;

89  
NO
;

90 
	}
}

95 
PUBLIC
 
BOOL
 
	$HTU£rProfûe_dñëe
 (
HTU£rProfûe
 * 
up
)

97 i‡(
up
) {

98 
	`HT_FREE
(
up
->
u£r
);

99 
	`HT_FREE
(
up
->
fqdn
);

100 
	`HT_FREE
(
up
->
emaû
);

101 
	`HT_FREE
(
up
->
√ws
);

102 
	`HT_FREE
(
up
->
tmp
);

103 
	`HT_FREE
(
up
);

104  
YES
;

106  
NO
;

107 
	}
}

109 
PUBLIC
 * 
	$HTU£rProfûe_fqdn
 (
HTU£rProfûe
 * 
up
)

111  
up
 ? up->
fqdn
 : 
NULL
;

112 
	}
}

114 
PUBLIC
 
BOOL
 
	$HTU£rProfûe_£tFqdn
 (
HTU£rProfûe
 * 
up
, c⁄° * 
fqdn
)

116 i‡(
up
 && 
fqdn
) {

117 
	`SåAŒocC›y
(
up
->
fqdn
, fqdn);

118  
YES
;

120  
NO
;

121 
	}
}

123 
PUBLIC
 * 
	$HTU£rProfûe_emaû
 (
HTU£rProfûe
 * 
up
)

125  
up
 ? up->
emaû
 : 
NULL
;

126 
	}
}

128 
PUBLIC
 
BOOL
 
	$HTU£rProfûe_£tEmaû
 (
HTU£rProfûe
 * 
up
, c⁄° * 
emaû
)

130 i‡(
up
 && 
emaû
) {

131 
	`SåAŒocC›y
(
up
->
emaû
,Émail);

132  
YES
;

134  
NO
;

135 
	}
}

137 
PUBLIC
 * 
	$HTU£rProfûe_√ws
 (
HTU£rProfûe
 * 
up
)

139  
up
 ? up->
√ws
 : 
NULL
;

140 
	}
}

142 
PUBLIC
 
BOOL
 
	$HTU£rProfûe_£tNews
 (
HTU£rProfûe
 * 
up
, c⁄° * 
√ws
)

144 i‡(
up
 && 
√ws
) {

145 
	`SåAŒocC›y
(
up
->
√ws
,Çews);

146  
YES
;

148  
NO
;

149 
	}
}

151 
PUBLIC
 * 
	$HTU£rProfûe_tmp
 (
HTU£rProfûe
 * 
up
)

153  
up
 ? up->
tmp
 : 
NULL
;

154 
	}
}

156 
PUBLIC
 
BOOL
 
	$HTU£rProfûe_£tTmp
 (
HTU£rProfûe
 * 
up
, c⁄° * 
tmp
)

158 i‡(
up
 && 
tmp
) {

159 
	`SåAŒocC›y
(
up
->
tmp
,Åmp);

160 i‡(*(
up
->
tmp
+
	`°æí
(up->tmp)-1Ë!
DIR_SEPARATOR_CHAR
)

161 
	`SåAŒocC©
(
up
->
tmp
, 
DIR_SEPARATOR_STR
);

162  
YES
;

164  
NO
;

165 
	}
}

167 
PUBLIC
 
time_t
 
	$HTU£rProfûe_timez⁄e
 (
HTU£rProfûe
 * 
up
)

169  
up
 ? up->
timez⁄e
 : 0;

170 
	}
}

172 
PUBLIC
 
BOOL
 
	$HTU£rProfûe_£tTimez⁄e
 (
HTU£rProfûe
 * 
up
, 
time_t
 
timez⁄e
)

174 i‡(
up
) {

175 
up
->
timez⁄e
 =Åimezone;

176  
YES
;

178  
NO
;

179 
	}
}

181 
PUBLIC
 * 
	$HTU£rProfûe_c⁄ãxt
 (
HTU£rProfûe
 * 
up
)

183  
up
 ? up->
c⁄ãxt
 : 
NULL
;

184 
	}
}

186 
PUBLIC
 
BOOL
 
	$HTU£rProfûe_£tC⁄ãxt
 (
HTU£rProfûe
 * 
up
, * 
c⁄ãxt
)

188 i‡(
up
) {

189 
up
->
c⁄ãxt
 = context;

190  
YES
;

192  
NO
;

193 
	}
}

	@Library/src/HTUser.h

33 #i‚de‡
HTUSER_H


34 
	#HTUSER_H


	)

36 
_HTU£rProfûe
 
	tHTU£rProfûe
;

51 
HTU£rProfûe
 * 
HTU£rProfûe_√w
 (c⁄° * 
«me
, * 
c⁄ãxt
);

61 
BOOL
 
HTU£rProfûe_loˇlize
 (
HTU£rProfûe
 * 
up
);

68 
BOOL
 
HTU£rProfûe_dñëe
 (
HTU£rProfûe
 * 
up
);

83 * 
HTU£rProfûe_fqdn
 (
HTU£rProfûe
 * 
up
);

84 
BOOL
 
HTU£rProfûe_£tFqdn
 (
HTU£rProfûe
 * 
up
, c⁄° * 
fqdn
);

96 * 
HTU£rProfûe_emaû
 (
HTU£rProfûe
 * 
up
);

97 
BOOL
 
HTU£rProfûe_£tEmaû
 (
HTU£rProfûe
 * 
up
, c⁄° * 
emaû
);

107 * 
HTU£rProfûe_√ws
 (
HTU£rProfûe
 * 
ho°
);

108 
BOOL
 
HTU£rProfûe_£tNews
 (
HTU£rProfûe
 * 
ho°
, c⁄° * 
√ws
);

123 * 
HTU£rProfûe_tmp
 (
HTU£rProfûe
 * 
ho°
);

124 
BOOL
 
HTU£rProfûe_£tTmp
 (
HTU£rProfûe
 * 
ho°
, c⁄° * 
tmp
);

137 
time_t
 
HTU£rProfûe_timez⁄e
 (
HTU£rProfûe
 * 
up
);

138 
BOOL
 
HTU£rProfûe_£tTimez⁄e
 (
HTU£rProfûe
 * 
up
, 
time_t
 
timez⁄e
);

150 * 
HTU£rProfûe_c⁄ãxt
 (
HTU£rProfûe
 * 
up
);

151 
BOOL
 
HTU£rProfûe_£tC⁄ãxt
 (
HTU£rProfûe
 * 
up
, * 
c⁄ãxt
);

	@Library/src/HTUtils.h

24 #i‚de‡
HTUTILS_H


25 
	#HTUTILS_H


	)

43 
	tHTPrötCÆlback
(c⁄° * 
	tfmt
, 
	tva_li°
 
	tpArgs
);

44 
HTPröt_£tCÆlback
(
HTPrötCÆlback
 * 
pCÆl
);

45 
HTPrötCÆlback
 * 
HTPröt_gëCÆlback
();

47 
HTPröt
(c⁄° * 
fmt
, ...);

59 #i‡
deföed
(
NODEBUG
Ë|| deföed(
NDEBUG
Ë|| deföed(
_NDEBUG
)

60 #unde‡
HTDEBUG


62 #i‚de‡
HTDEBUG


63 
	#HTDEBUG
 1

	)

75 #i‚de‡
__FILE__


76 
	#__FILE__
 ""

	)

79 #i‚de‡
__LINE__


80 
	#__LINE__
 0L

	)

91 #ifde‡
HTDEBUG


92 #ifde‡
WWW_WIN_DLL


93 * 
WWW_Tø˚Fœg
;

94 
	#WWWTRACE
 (*
WWW_Tø˚Fœg
)

	)

96 
WWW_Tø˚Fœg
;

97 
	#WWWTRACE
 (
WWW_Tø˚Fœg
)

	)

100 
	#WWWTRACE
 0

	)

116 
	e_HTTø˚Fœgs
 {

117 
	mSHOW_UTIL_TRACE
 = 0x1,

118 
	mSHOW_APP_TRACE
 = 0x2,

119 
	mSHOW_CACHE_TRACE
 = 0x4,

120 
	mSHOW_SGML_TRACE
 = 0x8,

121 
	mSHOW_BIND_TRACE
 = 0x10,

122 
	mSHOW_THREAD_TRACE
 = 0x20,

123 
	mSHOW_STREAM_TRACE
 = 0x40,

124 
	mSHOW_PROTOCOL_TRACE
 = 0x80,

125 
	mSHOW_MEM_TRACE
 = 0x100,

126 
	mSHOW_URI_TRACE
 = 0x200,

127 
	mSHOW_AUTH_TRACE
 = 0x400,

128 
	mSHOW_ANCHOR_TRACE
 = 0x800,

129 
	mSHOW_PICS_TRACE
 = 0x1000,

130 
	mSHOW_CORE_TRACE
 = 0x2000,

131 
	mSHOW_MUX_TRACE
 = 0x4000,

132 
	mSHOW_SQL_TRACE
 = 0x8000,

133 
	mSHOW_XML_TRACE
 = 0x10000,

134 
	mSHOW_ALL_TRACE
 = () 0xFFFFFFFF

135 } 
	tHTTø˚Fœgs
;

143 
	#UTIL_TRACE
 (
WWWTRACE
 & 
SHOW_UTIL_TRACE
)

	)

144 
	#APP_TRACE
 (
WWWTRACE
 & 
SHOW_APP_TRACE
)

	)

145 
	#CACHE_TRACE
 (
WWWTRACE
 & 
SHOW_CACHE_TRACE
)

	)

146 
	#SGML_TRACE
 (
WWWTRACE
 & 
SHOW_SGML_TRACE
)

	)

147 
	#BIND_TRACE
 (
WWWTRACE
 & 
SHOW_BIND_TRACE
)

	)

148 
	#THD_TRACE
 (
WWWTRACE
 & 
SHOW_THREAD_TRACE
)

	)

149 
	#STREAM_TRACE
 (
WWWTRACE
 & 
SHOW_STREAM_TRACE
)

	)

150 
	#PROT_TRACE
 (
WWWTRACE
 & 
SHOW_PROTOCOL_TRACE
)

	)

151 
	#MEM_TRACE
 (
WWWTRACE
 & 
SHOW_MEM_TRACE
)

	)

152 
	#URI_TRACE
 (
WWWTRACE
 & 
SHOW_URI_TRACE
)

	)

153 
	#AUTH_TRACE
 (
WWWTRACE
 & 
SHOW_AUTH_TRACE
)

	)

154 
	#ANCH_TRACE
 (
WWWTRACE
 & 
SHOW_ANCHOR_TRACE
)

	)

155 
	#PICS_TRACE
 (
WWWTRACE
 & 
SHOW_PICS_TRACE
)

	)

156 
	#CORE_TRACE
 (
WWWTRACE
 & 
SHOW_CORE_TRACE
)

	)

157 
	#MUX_TRACE
 (
WWWTRACE
 & 
SHOW_MUX_TRACE
)

	)

158 
	#SQL_TRACE
 (
WWWTRACE
 & 
SHOW_SQL_TRACE
)

	)

159 
	#XML_TRACE
 (
WWWTRACE
 & 
SHOW_XML_TRACE
)

	)

160 
	#ALL_TRACE
 (
WWWTRACE
 & 
SHOW_ALL_TRACE
)

	)

176 
	tHTTø˚CÆlback
(c⁄° * 
	tfmt
, 
	tva_li°
 
	tpArgs
);

177 
HTTø˚_£tCÆlback
(
HTTø˚CÆlback
 * 
pCÆl
);

178 
HTTø˚CÆlback
 * 
HTTø˚_gëCÆlback
();

190 #ifde‡
HTDEBUG


191 #unde‡
_


192 
	#_
 ,

	)

193 
	#HTTRACE
(
TYPE
, 
FMT
) \

194 dÿ{ i‡(
TYPE
Ë
	`HTTø˚
(
FMT
); } 0);

	)

195 
HTTø˚
(c⁄° * 
fmt
, ...);

197 
	#HTTRACE
(
TYPE
, 
FMT
Ë

	)

210 
	tHTTø˚D©aCÆlback
(* 
	td©a
, 
	tsize_t
 
	tÀn
, * 
	tfmt
, 
	tva_li°
 
	tpArgs
);

211 
HTTø˚D©a_£tCÆlback
(
HTTø˚D©aCÆlback
 * 
pCÆl
);

212 
HTTø˚D©aCÆlback
 * 
HTTø˚D©a_gëCÆlback
();

219 #ifde‡
HTDEBUG


220 
	#HTTRACEDATA
(
DATA
, 
LEN
, 
FMT
Ë
	`HTTø˚D©a
((DATA), (LEN), FMT)

	)

221 
HTTø˚D©a
(* 
d©a
, 
size_t
 
Àn
, * 
fmt
, ...);

223 
	#HTTRACEDATA
(
DATA
, 
LEN
, 
FMT
Ë

	)

235 
HTDebugBªak
(* 
fûe
, 
löe
, c⁄° * 
fmt
, ...);

237 #ifde‡
HTDEBUG


238 
	#HTDEBUGBREAK
(
FMT
Ë
	`HTDebugBªak
(
__FILE__
, 
__LINE__
, FMT)

	)

240 
	#HTDEBUGBREAK
(
FMT
Ë

	)

253 
	#PUBLIC


	)

254 
	#PRIVATE
 

	)

265 #i‚de‡
HTMIN


266 
	#HTMIN
(
a
,
b
Ë(◊Ë<(bË? (aË: (b))

	)

267 
	#HTMAX
(
a
,
b
Ë(◊Ë>(bË? (aË: (b))

	)

276 #i‚de‡
HTDABS


277 
	#HTDABS
(
a
Ë(◊Ë< 0.0 ? (-◊)Ë: (a))

	)

291 
	#HT_OK
 0

	)

292 
	#HT_ALL
 1

	)

294 
	#HT_CONTINUE
 100

	)

295 
	#HT_UPGRADE
 101

	)

297 
	#HT_LOADED
 200

	)

298 
	#HT_CREATED
 201

	)

299 
	#HT_ACCEPTED
 202

	)

300 
	#HT_NO_DATA
 204

	)

301 
	#HT_RESET_CONTENT
 205

	)

302 
	#HT_PARTIAL_CONTENT
 206

	)

304 
	#HT_MULTIPLE_CHOICES
 300

	)

305 
	#HT_PERM_REDIRECT
 301

	)

306 
	#HT_FOUND
 302

	)

307 
	#HT_SEE_OTHER
 303

	)

308 
	#HT_NOT_MODIFIED
 304

	)

309 
	#HT_USE_PROXY
 305

	)

310 
	#HT_PROXY_REDIRECT
 306

	)

311 
	#HT_TEMP_REDIRECT
 307

	)

313 
	#HT_IGNORE
 900

	)

314 
	#HT_CLOSED
 901

	)

315 
	#HT_PENDING
 902

	)

316 
	#HT_RELOAD
 903

	)

318 
	#HT_ERROR
 -1

	)

320 
	#HT_NO_ACCESS
 -401

	)

321 
	#HT_FORBIDDEN
 -403

	)

322 
	#HT_NOT_FOUND
 -404

	)

323 
	#HT_NOT_ACCEPTABLE
 -406

	)

324 
	#HT_NO_PROXY_ACCESS
 -407

	)

325 
	#HT_CONFLICT
 -409

	)

326 
	#HT_LENGTH_REQUIRED
 -411

	)

327 
	#HT_PRECONDITION_FAILED
 -412

	)

328 
	#HT_TOO_BIG
 -413

	)

329 
	#HT_URI_TOO_BIG
 -414

	)

330 
	#HT_UNSUPPORTED
 -415

	)

331 
	#HT_BAD_RANGE
 -416

	)

332 
	#HT_EXPECTATION_FAILED
 -417

	)

333 
	#HT_REAUTH
 -418

	)

334 
	#HT_PROXY_REAUTH
 -419

	)

336 
	#HT_RETRY
 -503

	)

337 
	#HT_BAD_VERSION
 -505

	)

339 #ifde‡
HT_DAV


340 
	#HT_PROCESSING
 102

	)

341 
	#HT_MULTI_STATUS
 207

	)

342 
	#HT_UNPROCESSABLE
 -422

	)

343 
	#HT_LOCKED
 -423

	)

344 
	#HT_FAILED_DEPENDENCY
 -424

	)

345 
	#HT_INSUFFICIENT_STORAGE
 -507

	)

348 
	#HT_INTERNAL
 -900

	)

349 
	#HT_WOULD_BLOCK
 -901

	)

350 
	#HT_INTERRUPTED
 -902

	)

351 
	#HT_PAUSE
 -903

	)

352 
	#HT_RECOVER_PIPE
 -904

	)

353 
	#HT_TIMEOUT
 -905

	)

354 
	#HT_NO_HOST
 -906

	)

366 #i‚de‡
TOLOWER


367 
	#TOLOWER
(
c
Ë
	`tﬁowî
((Ë(c))

	)

368 
	#TOUPPER
(
c
Ë
	`touµî
((Ë(c))

	)

377 #ifde‡
FLT_EPSILON


378 
	#HT_EPSILON
 
FLT_EPSILON


	)

380 
	#HT_EPSILON
 0.00000001

	)

393 
	#LF
 
	`FROMASCII
('\012'Ë

	)

394 
	#CR
 
	`FROMASCII
('\015'Ë

	)

405 
	~"HTMem‹y.h
"

	@Library/src/HTWAIS.c

59 
	~"wwwsys.h
"

60 
	~"WWWUtû.h
"

61 
	~"WWWC‹e.h
"

62 
	~"WWWHTML.h
"

63 
	~"HTReqM™.h
"

65 #i‚de‡
HT_DIRECT_WAIS


66 
PUBLIC
 
	$HTLﬂdWAIS
 (
SOCKET
 
soc
, 
HTReque°
* 
ªque°
)

68  
HT_ERROR
;

69 
	}
}

72 #ifde‡
HAVE_WAIS_WAIS_H


73 
	~"wais/wais.h
"

75 #ifde‡
HAVE_WAIS_H


76 
	~"wais.h
"

78 #ifde‡
WAIS_INCLUDE


79 #ö˛udê
WAIS_INCLUDE


81 
	~"wais/wais.h
"

86 
	#DIRECTORY
 "/˙idr.‹g:210/dúe˘‹y-of-£rvîs"

	)

88 
	#BIG
 1024

	)

93 #unde‡
MAX_MESSAGE_LEN


94 
	#MAX_MESSAGE_LEN
 100000

	)

95 #unde‡
CHARS_PER_PAGE


96 
	#CHARS_PER_PAGE
 10000

	)

97 #unde‡
WAISSEARCH_DATE


98 
	#WAISSEARCH_DATE
 "FròJu»19 1991"

	)

103 
	#BUFFER_SIZE
 4096

	)

104 
	#LINE_BUFFER_SIZE
 2048

	)

106 
	#HEX_ESCAPE
 '%'

	)

108 
FILE
 * 
logfûe
;

110 
PRIVATE
 
	gHTMaxWAISLöes
 = 200;

114 
	#PUTC
(
c
Ë(*
èrgë
->
iß
->
put_ch¨a˘î
)—¨gë, c)

	)

115 
	#PUTS
(
s
Ë(*
èrgë
->
iß
->
put_°rög
)—¨gë, s)

	)

116 
	#START
(
e
Ë(*
èrgë
->
iß
->
°¨t_ñemít
)—¨gë,É, 0, 0)

	)

117 
	#END
(
e
Ë(*
èrgë
->
iß
->
íd_ñemít
)—¨gë,É)

	)

118 
	#FREE_TARGET
 (*
èrgë
->
iß
->
_‰ì
)—¨gë)

	)

128 
	e_HTWAISSèã


130 
	mHTWAIS_ERROR
 = -2,

131 
	mHTWAIS_OK
 = -1,

132 
	mHTWAIS_BEGIN
 = 0,

133 
	mHTWAIS_PARSING_URL
 = 1,

134 
	mHTWAIS_NEED_CONNECTION
 = 2,

135 
	mHTWAIS_NEED_REQUEST
 = 3,

136 
	mHTWAIS_NEED_RESPONSE
 = 4,

137 
	mHTWAIS_PARSING_RESPONSE
 = 5,

138 
	mHTWAIS_FETCH_DOCUMENT
 = 6,

139 
	mHTWAIS_CLEANUP
 = 7

140 } 
	tHTWAISSèã
;

146 
	s_wais_öfo


148 
BOOL
 
	mas_g©e
;

149 
HTWAISSèã
 
	m°©e
;

150 
	mªsu…
;

151 
HTNë
* 
	m√t
;

152 
FILE
* 
	mc⁄√˘i⁄
;

153 * 
	m«mes
;

154 * 
	mba£tôÀ
;

155 * 
	mwais_d©aba£
;

156 * 
	mwww_d©aba£
;

157 * 
	mªque°_mesßge
;

158 * 
	mª•⁄£_mesßge
;

159 } 
	twais_öfo
;

162 
	s_HTSåóm


164 c⁄° 
HTSåómCœss
* 
	miß
;

165 
HTSåóm
* 
	mèrgë
;

166 
HTReque°
* 
	mªque°
;

167 
wais_öfo
* 
	mwais
;

168 
	m°©us
;

173 
	s_HTI≈utSåóm


175 c⁄° 
HTI≈utSåómCœss
 * 
	miß
;

179 
	s_HTSåu˘uªd


181 c⁄° 
HTSåu˘uªdCœss
 * 
	miß
;

195 
	$HTshowDügs
 (

196 
HTSåóm
 * 
èrgë
,

197 
dügno°icRec‹d
 ** 
d
)

199 
i
;

201 
i
 = 0; 
d
[i] !
NULL
; i++) {

202 i‡(
d
[
i
]->
ADDINFO
 !
NULL
) {

203 
	`PUTS
("Diagnostic code is ");

204 
	`PUTS
(
d
[
i
]->
DIAG
);

205 
	`PUTC
(' ');

206 
	`PUTS
(
d
[
i
]->
ADDINFO
);

207 
	`PUTC
('\n'); ;

210 
	}
}

216 
PRIVATE
 
BOOL
 
	gac˚±abÀ
[256];

217 
PRIVATE
 
BOOL
 
	gac˚±abÀ_öôed
 = 
NO
;

219 
PRIVATE
 
	$öô_ac˚±abÀ
 ()

221 
i
;

222 * 
good
 =

225 i‡(
ac˚±abÀ_öôed
 =
YES
) ;

227 
i
=256; i--; ) 
ac˚±abÀ
[i] = 
NO
;

228 ;*
good
; good++Ë
ac˚±abÀ
[()*good] = 
YES
;

229 
ac˚±abÀ_öôed
 = 
YES
;

230 
	}
}

241 * 
	$WWW_‰om_¨chõ
 (* 
fûe
)

243 * 
íd
;

244 * 
ªsu…
;

245 * 
cﬁ⁄
;

246 
íd
=
fûe
; *end > ' ';Énd++);

247 i‡((
ªsu…
 = (*Ë
	`HT_MALLOC
(10 + (
íd
-
fûe
))Ë=
NULL
)

248 
	`HT_OUTOFMEM
("result ");

249 i‡(!
ªsu…
) Ñesult;

250 
	`°r˝y
(
ªsu…
, "file://");

251 
	`°∫ˇt
(
ªsu…
, 
fûe
, 
íd
-file);

252 
cﬁ⁄
 = 
	`°rchr
(
ªsu…
+7, ':');

253 i‡(
cﬁ⁄
) {

254 ; 
cﬁ⁄
[0]; colon[0]=colon[1], colon++);

256  
ªsu…
;

257 
	}
}

270 
PRIVATE
 
	ghex
 [17] = "0123456789ABCDEF";

272 
PRIVATE
 * 
	$WWW_‰om_WAIS
 (
™y
 * 
docid
)

275 
buf
[
BIG
];

276 
num
[10];

277 * 
q
 = 
buf
;

278 * 
p
 = (
docid
->
byãs
);

279 
i
, 
l
;

281 #ifde‡
HTDEBUG


282 i‡(
PROT_TRACE
) {

283 *
p
;

284 
	`HTTRACE
(
PROT_TRACE
, "HTLﬂdWAIS.. id (%d byãsËi†" 
	`_
 ()
docid
->
size
);

285 
p
=
docid
->
byãs
;Ö<docid->byãs+docid->
size
;Ö++) {

286 i‡((*
p
 >= ' ') && (*p<= '~'))

287 
	`HTTRACE
(
PROT_TRACE
, "%c" 
_
 *
p
);

289 
	`HTTRACE
(
PROT_TRACE
, "<%x>" 
	`_
 ()*
p
);

291 
	`HTTRACE
(
PROT_TRACE
, "\n");

295 
p
=
docid
->
byãs
; (p<docid->byãs+docid->
size
Ë&& (
q
<&
buf
[
BIG
]);) {

296 
	`HTTRACE
(
PROT_TRACE
, "............ Rec‹dÅy≥ %d,Üígth %d\n" 
_


297 (Ë
p
[0] 
	`_
 ()Ö[1]);

298 
	`•rötf
(
num
, "%d", ()*
p
);

299 
	`mem˝y
(
q
, 
num
, 
	`°æí
(num));

300 
q
 +
	`°æí
(
num
);

301 
p
++;

302 *
q
++ = '=';

303 
l
 = ()(()*
p
);

304 
p
++;

305 i‡(
l
 > 127)

307 
l
 = (l - 128) * 128;

308 
l
 =Ü + ()(()*
p
);

309 
p
++;

312 
i
 = 0; i < 
l
; i++, 
p
++)

314 i‡(!
ac˚±abÀ
[()*
p
])

316 *
q
++ = 
HEX_ESCAPE
;

317 *
q
++ = 
hex
[(()*
p
) >> 4];

318 *
q
++ = 
hex
[(()*
p
) & 15];

320 *
q
++ = ()*
p
;

322 *
q
++= ';';

323 #ifde‡
OLD_CODE


324 i‡(*
p
>10) {

325 
	`HTTRACE
(
PROT_TRACE
, "WAIS........ DOCIDÑec‹dÅy≥ o‡%d!\n" 
_
 *
p
);

329 
i
 = (Ë*
p
++;

331 i‡(
i
 > 99) {

332 *
q
++ = (
i
/100) + '0';

333 
i
 = i % 100;

335 i‡(
i
 > 9) {

336 *
q
++ = (
i
/10) + '0';

337 
i
 = i % 10;

339 *
q
++ = 
i
 + '0';

341 *
q
++ = '=';

342 
l
 = *
p
++;

343 
i
=0; i<
l
; i++, 
p
++){

344 i‡(!
ac˚±abÀ
[()*
p
]) {

345 *
q
++ = 
HEX_ESCAPE
;

346 *
q
++ = 
hex
[(*
p
) >> 4];

347 *
q
++ = 
hex
[(*
p
) & 15];

349 *
q
++ = *
p
;

351 *
q
++= ';';

354 *
q
++ = 0;

355 
	`HTTRACE
(
PROT_TRACE
, "HTLﬂdWAIS.. WWW f‹m o‡id: %s\n" 
_
 
buf
);

357 *
ªsu…
;

358 i‡((
ªsu…
 = (*Ë
	`HT_MALLOC
((Ë
	`°æí
((*Ë
buf
)+1))==
NULL
)

359 
	`HT_OUTOFMEM
("WWW_from_WAIS");

360 
	`°r˝y
(
ªsu…
, (*Ë
buf
);

361  
ªsu…
;

363 
	}
}

376 
PRIVATE
 
™y
 * 
	$WAIS_‰om_WWW
 (
™y
 * 
docid
, * 
do˙ame
)

378 *
z
;

379 *
s‹
;

380 *
p
;

381 *
q
;

382 *
s
;

383 
n
;

384 
	`HTTRACE
(
PROT_TRACE
, "HTLﬂdWAIS.. WWW id (tÿbecomêWAIS id): %s\n" 
_


385 
do˙ame
);

386 
n
=0, 
p
 = 
do˙ame
; *p;Ö++) {

387 
n
++;

388 i‡(*
p
 =';'Ë
n
--;

389 i‡(*
p
 =
HEX_ESCAPE
Ë
n
=n-2;

390 
docid
->
size
 = 
n
;

394 i‡((
docid
->
byãs
 = (*Ë
	`HT_MALLOC
(docid->
size
+32)Ë=
NULL
)

395 
	`HT_OUTOFMEM
("docid->bytes");

396 
z
 = 
docid
->
byãs
;

398 
p
 = 
do˙ame
; *p; ) {

399 
q
 = 
	`°rchr
(
p
, '=');

400 i‡(!
q
)

402 *
q
 = '\0';

403 *
z
++ = 
	`©oi
(
p
);

404 *
q
 = '=';

405 
s
 = 
	`°rchr
(
q
, ';');

406 i‡(!
s
)

408 
s‹
 = 
z
;

409 
z
++;

412 
Àn
;

413 
tmp
;

414 
p
=
q
+1; *p!=';' ; ) {

415 i‡(*
p
 =
HEX_ESCAPE
) {

416 
c
;

417 
b
;

418 
p
++;

419 
c
 = *
p
++;

420 
b
 = 
	`HTAsciiHexToCh¨
(
c
);

421 
c
 = *
p
++;

422 i‡(!
c
)

424 *
z
++ = (
b
<<4Ë+ 
	`HTAsciiHexToCh¨
(
c
);

426 *
z
++ = *
p
++;

429 
Àn
 = (
z
-
s‹
-1);

431 
z
 = 
s‹
;

432 i‡(
Àn
 > 127) {

433 
tmp
 = (
Àn
 / 128);

434 
Àn
 =Üí - (
tmp
 * 128);

435 
tmp
 =Åmp + 128;

436 *
z
++ = ()
tmp
;

437 *
z
 = ()
Àn
;

439 *
z
 = ()
Àn
;

441 
z
++;

444 
p
=
q
+1; *p!=';' ; ) {

445 i‡(*
p
 =
HEX_ESCAPE
) {

446 
c
;

447 
b
;

448 
p
++;

449 
c
 = *
p
++;

450 
b
 = 
	`HTAsciiHexToCh¨
(
c
);

451 
c
 = *
p
++;

452 i‡(!
c
)

454 *
z
++ = (
b
<<4Ë+ 
	`HTAsciiHexToCh¨
(
c
);

456 *
z
++ = *
p
++;

459 
p
++;

462 #ifde‡
OLD_CODE


463 
p
 = 
do˙ame
; *p; ) {

466 *
z
 = 0;

467 *
p
 >= '0' && *p <= '9') {

468 *
z
 = *z*10 + (*
p
++ - '0');

470 
z
++;

471 i‡(*
p
 != '=')  0;

472 
q
 = 
p
;

478 
s
 = 
	`°rchr
(
q
, ';');

479 i‡(!
s
)  0;

480 
s‹
 = 
z
;

481 
z
++;

482 
p
=
q
+1; *p!=';' ; ) {

483 i‡(*
p
 =
HEX_ESCAPE
) {

484 
c
;

485 
b
;

486 
p
++;

487 
c
 = *
p
++;

488 
b
 = 
	`HTAsciiHexToCh¨
(
c
);

489 
c
 = *
p
++;

490 i‡(!
c
) ;

491 *
z
++ = (
b
<<4Ë+ 
	`HTAsciiHexToCh¨
(
c
);

493 *
z
++ = *
p
++;

496 *
s‹
 = (
z
-sor-1);

497 
p
++;

501 #ifde‡
HTDEBUG


502 i‡(
PROT_TRACE
) {

503 *
p
;

504 
	`HTTRACE
(
PROT_TRACE
, "WAIS........ id (%d byãsËi†" 
	`_
 ()
docid
->
size
);

505 
p
=
docid
->
byãs
;Ö<docid->byãs+docid->
size
;Ö++) {

506 i‡((*
p
 >= ' ') && (*p<= '~'))

507 
	`HTTRACE
(
PROT_TRACE
, "%c" 
_
 *
p
);

509 
	`HTTRACE
(
PROT_TRACE
, "<%x>" 
	`_
 ()*
p
);

511 
	`HTTRACE
(
PROT_TRACE
, "\n");

515  
docid
;

517 
	}
}

524 
PRIVATE
 
	$ouçut_ãxt_ªc‹d
 (

525 
HTSåóm
 * 
èrgë
,

526 
WAISDocumítText
 * 
ªc‹d
,

527 
boﬁón
 
quŸe_°rög_quŸes
,

528 
boﬁón
 
bö¨y
)

530 
cou¡
;

531 i‡(
bö¨y
) {

532 (*
èrgë
->
iß
->
put_block
)(target,

533 
ªc‹d
->
DocumítText
->
byãs
,

534 
ªc‹d
->
DocumítText
->
size
);

538 
cou¡
 = 0; cou¡ < 
ªc‹d
->
DocumítText
->
size
; count++){

539 
ch
 = ()
ªc‹d
->
DocumítText
->
byãs
[
cou¡
];

540 i‡(
ch
 == 27) {

544 if('(' =
ªc‹d
->
DocumítText
->
byãs
[
cou¡
 + 1] ||

545 ')' =
ªc‹d
->
DocumítText
->
byãs
[
cou¡
 + 1])

546 
cou¡
 += 1;

547 
cou¡
 += 4;

548 } i‡(
ch
 == '\n' || ch == '\r') {

549 
	`PUTC
('\n');

550 } i‡((
ch
=='\t'Ë|| 
	`i•röt
(ch)){

551 
	`PUTC
(
ch
);

554 
	}
}

563 
	$di•œy_£¨ch_ª•⁄£
 (
HTSåu˘uªd
 * 
èrgë
,

564 
SórchRe•⁄£APDU
 * 
ª•⁄£
,

565 * 
d©aba£
,

566 * 
keyw‹ds
)

568 
WAISSórchRe•⁄£
 *
öfo
;

569 
i
, 
k
;

570 
löe
[
LINE_BUFFER_SIZE
];

572 
BOOL
 
¨chõ
 = 
	`°r°r
(
d©aba£
, "archie")!=0;

575 
	`HTTRACE
(
PROT_TRACE
, "WAIS........ Displaying searchÑesponse\n");

576 
	`•rötf
(
löe
,

578 
d©aba£
,

579 ()(
ª•⁄£
->
NumbîOfRec‹dsRëu∫ed
),

580 
ª•⁄£
->
NumbîOfRec‹dsRëu∫ed
 ==1 ? "" : "s",

581 
keyw‹ds
);

582 
	`PUTS
(
löe
);

583 
	`PUTS
("The first figure forÉachÉntry is itsÑelative score, ");

584 
	`PUTS
("the secondÅheÇumber ofÜines inÅhe item.");

585 
	`START
(
HTML_MENU
);

587 i‡–
ª•⁄£
->
D©aba£Dügno°icRec‹ds
 != 0 ) {

588 
öfo
 = (
WAISSórchRe•⁄£
 *)
ª•⁄£
->
D©aba£Dügno°icRec‹ds
;

589 
i
 =0;

591 i‡(
öfo
->
Dügno°ics
 !
NULL
)

592 
	`HTshowDügs
((
HTSåóm
*)
èrgë
, 
öfo
->
Dügno°ics
);

594 i‡–
öfo
->
DocHódîs
 != 0 ) {

595 
k
=0; 
öfo
->
DocHódîs
[k] != 0; k++ ) {

596 
WAISDocumítHódî
* 
hód
 = 
öfo
->
DocHódîs
[
k
];

597 * 
hódlöe
 = 
	`åim_junk
(
hód
->
Hódlöe
);

598 
™y
 * 
docid
 = 
hód
->
DocumítID
;

599 * 
do˙ame
;

600 
i
++;

604 
	`HTTRACE
(
PROT_TRACE
, "HTWAIS: %2ld: Sc‹e: %4ld,Üöes:%4ld '%s'\n" 
_
 
i
 _

605 ()(
öfo
->
DocHódîs
[
k
]->
Sc‹e
Ë
_


606 ()(
öfo
->
DocHódîs
[
k
]->
Löes
Ë
_


607 
hódlöe
);

609 
	`START
(
HTML_LI
);

610 
	`•rötf
(
löe
, "%4ld %4ld ",

611 
hód
->
Sc‹e
,

612 
hód
->
Löes
);

613 
	`PUTS
(
löe
);

615 i‡(
¨chõ
) {

616 * 
www_«me
 = 
	`WWW_‰om_¨chõ
(
hódlöe
);

617 i‡(
www_«me
) {

618 
	`HTSèπAnch‹
(
èrgë
, 
NULL
, 
www_«me
);

619 
	`PUTS
(
hódlöe
);

621 
	`END
(
HTML_A
);

622 
	`HT_FREE
(
www_«me
);

624 
	`PUTS
(
hódlöe
);

625 
	`PUTS
(" (bad fileÇame)");

628 
do˙ame
 = 
	`WWW_‰om_WAIS
(
docid
);

629 i‡(
do˙ame
) {

630 * 
db«me
 = 
	`HTEsˇ≥
(
d©aba£
, 
URL_XPALPHAS
);

631 
ty≥s_¨øy
[1000];

632 *
ty≥_esˇ≥d
;

633 
ty≥s_¨øy
[0] = 0;

634 i‡(
hód
->
Ty≥s
) {

635 
i
;

636 
i
 = 0; 
hód
->
Ty≥s
[i]; i++)

638 i‡(
i
)

639 
	`°rˇt
 (
ty≥s_¨øy
, ",");

641 
ty≥_esˇ≥d
 = 
	`HTEsˇ≥
 (
hód
->
Ty≥s
[
i
], 
URL_XALPHAS
);

642 
	`°rˇt
 (
ty≥s_¨øy
, 
ty≥_esˇ≥d
);

643 
	`HT_FREE
(
ty≥_esˇ≥d
);

645 
	`HTTRACE
(
PROT_TRACE
, "WAIS........ Ty≥s_¨øy `%s\'\n" 
_


646 
ty≥s_¨øy
);

648 
	`°rˇt
 (
ty≥s_¨øy
, "TEXT");

650 
	`•rötf
(
löe
, "%s/%s/%d/%s",

651 
db«me
,

652 
ty≥s_¨øy
,

653 ()(
hód
->
DocumítLígth
),

654 
do˙ame
);

655 #ifde‡
OLD_CODE


656 
	`•rötf
(
löe
, "%s/%s/%d/%s",

657 
db«me
,

658 
hód
->
Ty≥s
 ? head->Types[0] : "TEXT",

659 ()(
hód
->
DocumítLígth
),

660 
do˙ame
);

662 
	`HTSèπAnch‹
(
èrgë
, 
NULL
, ( (
hód
->
Ty≥s
)

663 && (!
	`°rcmp
(
hód
->
Ty≥s
[0], "URL"))) ?

664 
hódlöe
 : 
löe
);

665 
	`PUTS
(
hódlöe
);

666 
	`END
(
HTML_A
);

667 
	`HT_FREE
(
db«me
);

668 
	`HT_FREE
(
do˙ame
);

670 
	`PUTS
("(bad doc id)");

676 i‡–
öfo
->
Sh‹tHódîs
 != 0 ) {

677 
k
 =0;

678 
öfo
->
Sh‹tHódîs
[
k
] != 0 ) {

679 
i
++;

680 
	`PUTS
( "(Short HeaderÑecord, can't display)");

683 i‡–
öfo
->
L⁄gHódîs
 != 0 ) {

684 
k
 =0;

685 
öfo
->
L⁄gHódîs
[
k
] != 0) {

686 
i
++;

687 
	`PUTS
( "\nLong HeaderÑecord, can't display\n");

690 i‡–
öfo
->
Text
 != 0 ) {

691 
k
 =0;

692 
öfo
->
Text
[
k
] != 0) {

693 
i
++;

694 
	`PUTS
( "\nTextÑecord\n");

695 
	`ouçut_ãxt_ªc‹d
((
HTSåóm
*)
èrgë
, 
öfo
->
Text
[
k
++], 
Ál£
, false);

698 i‡–
öfo
->
Hódlöes
 != 0 ) {

699 
k
 =0;

700 
öfo
->
Hódlöes
[
k
] != 0) {

701 
i
++;

702 
	`PUTS
( "\nHeadlineÑecord, can't display\n");

706 i‡–
öfo
->
Codes
 != 0 ) {

707 
k
 =0;

708 
öfo
->
Codes
[
k
] != 0) {

709 
i
++;

710 
	`PUTS
( "\nCodeÑecord, can't display\n");

715 
	`END
(
HTML_MENU
);

716 
	`PUTC
('\n'); ;

717 
	}
}

725 
PRIVATE
 
	$HTWAISCÀ™up
 (
HTReque°
 *
ªq
, 
°©us
)

727 
HTNë
* 
√t
;

728 
HTSåóm
* 
öput
;

729 
wais_öfo
* 
theWAISöfo
 = 
NULL
;

732 i‡(
ªq
)

734 
√t
 = 
	`HTReque°_√t
(
ªq
);

735 
öput
 = 
	`HTReque°_öputSåóm
(
ªq
);

738 i‡(
	`HTReque°_isDe°ö©i⁄
(
ªq
))

739 
	`HTReque°_ªmoveDe°ö©i⁄
(
ªq
);

741 i‡(
öput
)

743 i‡(
°©us
 =
HT_INTERRUPTED
)

744 (*
öput
->
iß
->
ab‹t
)(öput, 
NULL
);

746 (*
öput
->
iß
->
_‰ì
)(input);

748 
	`HTReque°_£tI≈utSåóm
(
ªq
, 
NULL
);

751 i‡(
√t
)

753 i‡((
theWAISöfo
 = (
wais_öfo
*)
	`HTNë_c⁄ãxt
(
√t
)))

755 
theWAISöfo
->
°©e
 = 
HTWAIS_CLEANUP
;

757 i‡(
theWAISöfo
->
c⁄√˘i⁄
)

758 
	`˛o£_c⁄√˘i⁄_to_£rvî
(
theWAISöfo
->
c⁄√˘i⁄
);

760 i‡(
theWAISöfo
->
wais_d©aba£
)

761 
	`HT_FREE
(
theWAISöfo
->
wais_d©aba£
);

763 i‡(
theWAISöfo
->
ªque°_mesßge
)

764 
	`s_‰ì
(
theWAISöfo
->
ªque°_mesßge
);

766 i‡(
theWAISöfo
->
ª•⁄£_mesßge
)

767 
	`s_‰ì
(
theWAISöfo
->
ª•⁄£_mesßge
);

769 
	`HT_FREE
(
theWAISöfo
->
«mes
);

770 
	`HT_FREE
(
theWAISöfo
->
ba£tôÀ
);

772 i‡(
°©us
 < 0)

774 
HTP¨ítAnch‹
* 
™ch‹
;

775 * 
u√sˇ≥d
 = 
NULL
;

776 * 
îr_∑r
;

777 
îr_∑r_Àngth
;

779 i‡((
™ch‹
 = 
	`HTReque°_™ch‹
(
ªq
)))

781 * 
¨g
;

783 i‡((
¨g
 = 
	`HTAnch‹_physiˇl
(
™ch‹
)))

785 
	`SåAŒocC›y
(
u√sˇ≥d
, 
¨g
);

786 
	`HTUnEsˇ≥
(
u√sˇ≥d
);

790 i‡(
u√sˇ≥d
)

792 
îr_∑r
 = (*)
u√sˇ≥d
;

793 
îr_∑r_Àngth
 = ()(
	`°æí
(
u√sˇ≥d
));

797 
îr_∑r
 = (*)"???";

798 
îr_∑r_Àngth
 = 3;

801 
	`HTReque°_addEº‹
(
ªq
, 
ERR_FATAL
, 
NO
, 
HTERR_INTERNAL
,

802 
îr_∑r
, 
îr_∑r_Àngth
, "HTLoadWAIS");

803 i‡(
u√sˇ≥d
Ë
	`HT_FREE
(unescaped);

807 
	`HT_FREE
(
theWAISöfo
);

808 
	`HTNë_£tC⁄ãxt
(
√t
, 
NULL
);

813 
	`HTNë_dñëe
(
√t
, 
°©us
);

816  
YES
;

819  
NO
;

820 
	}
}

835 
	#MAX_KEYWORDS_LENGTH
 4000

	)

836 
	#MAX_SERVER_LENGTH
 1000

	)

837 
	#MAX_DATABASE_LENGTH
 1000

	)

838 
	#MAX_SERVICE_LENGTH
 1000

	)

840 
PRIVATE
 
	$HTWAISEvít
(
SOCKET
 
soc
, * 
pVoid
, 
HTEvítTy≥
 
ty≥
)

842 
wais_öfo
* 
theWAISöfo
;

843 
HTNë
* 
√t
;

844 
HTReque°
* 
ªque°
;

845 
HTP¨ítAnch‹
* 
™ch‹
;

846 c⁄° * 
¨g
;

847 
HTSåóm
* 
sök
;

848 
HTF‹m©
 
f‹m©_out
;

850 c⁄° * 
îr‹_hódî
 = "<h1>AccessÉrror</h1>\n<p>The followingÉrror occured ináccesingá WAIS server:\n</p>\n";

852 * 
key
;

853 
ªque°_buf„r_Àngth
;

854 
SórchRe•⁄£APDU
* 
ªåõvÆ_ª•⁄£
 = 0;

855 
keyw‹ds
[
MAX_KEYWORDS_LENGTH
 + 1];

856 * 
£rvî_«me
 = 
NULL
;

857 * 
£rvi˚
;

858 * 
do˙ame
 = 
NULL
;

859 * 
do˘y≥
 = 
NULL
;

860 
documít_Àngth
 = -1;

861 
BOOL
 
ok
 = 
NO
;

862 
°©us
 = 
HT_ERROR
;

865 
FILE
* 
c⁄√˘i⁄
 = 0;

866 * 
«mes
;

867 * 
ba£tôÀ
 = 
NULL
;

868 * 
wais_d©aba£
 = 
NULL
;

869 * 
www_d©aba£
 = 
NULL
;

870 * 
ªque°_mesßge
 = 
NULL
;

871 * 
ª•⁄£_mesßge
 = 
NULL
;

875 
FILE
 * 
	`c⁄√˘_to_£rvî
();

879 i‡((
theWAISöfo
 = (
wais_öfo
*)
pVoid
))

881 i‡((
√t
 = 
theWAISöfo
->√tË=
NULL
Ë 
HT_ERROR
;

882 i‡((
ªque°
 = 
	`HTNë_ªque°
(
√t
)Ë=
NULL
Ë 
HT_ERROR
;

883 i‡((
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
)))

884 
¨g
 = 
	`HTAnch‹_physiˇl
(
™ch‹
);

886  
HT_ERROR
;

888 
sök
 = 
	`HTReque°_ouçutSåóm
(
ªque°
);

889 
f‹m©_out
 = 
	`HTReque°_ouçutF‹m©
(
ªque°
);

892  
HT_ERROR
;

895 i‡(
ty≥
 =
HTEvít_BEGIN
)

897 
theWAISöfo
->
°©e
 = 
HTWAIS_BEGIN
;

898 
theWAISöfo
->
ªsu…
 = 
HT_ERROR
;

901 i‡(
ty≥
 =
HTEvít_CLOSE
)

904 
öãºu±ed
[] = "request interruption";

906 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_INTERRUPTED
,

907 (*)
öãºu±ed
, ()
	`°æí
(interrupted),

909 
	`HTWAISCÀ™up
(
ªque°
, 
HT_INTERRUPTED
);

910  
HT_OK
;

913 i‡(
ty≥
 =
HTEvít_END
)

915 
	`HTWAISCÀ™up
(
ªque°
, (
theWAISöfo
 ?ÅheWAISöfo->
ªsu…
 : 
HT_ERROR
));

916  
HT_OK
;

926 i‡(!
ac˚±abÀ_öôed
Ë
	`öô_ac˚±abÀ
();

927 
theWAISöfo
->
°©e
 = 
HTWAIS_PARSING_URL
;

928 
	`HTTRACE
(
PROT_TRACE
, "HTLﬂdWAIS.. Lookög f‹ \"%s\"\n" 
_
 
¨g
);

930 
theWAISöfo
->
«mes
 = 
	`HTP¨£
(
¨g
, "",

931 
PARSE_HOST
 | 
PARSE_PATH
 | 
PARSE_PUNCTUATION
);

932 
key
 = 
	`°rchr
(
theWAISöfo
->
«mes
, '?');

934 i‡(
key
)

936 * 
p
;

938 *
key
++ = 0;

940 
p
=
key
; *p;Ö++) if (*p == '+') *p = ' ';

941 
	`HTUnEsˇ≥
(
key
);

944 i‡(
theWAISöfo
->
«mes
[0] == '/')

946 
£rvî_«me
 = 
theWAISöfo
->
«mes
+1;

949 i‡((
theWAISöfo
->
as_g©e
 = (*
£rvî_«me
 == '/'))) server_name++;

951 i‡((
theWAISöfo
->
www_d©aba£
 = 
	`°rchr
(
£rvî_«me
, '/')))

953 *(
theWAISöfo
->
www_d©aba£
)++ = 0;

954 
do˘y≥
 = 
	`°rchr
(
theWAISöfo
->
www_d©aba£
, '/');

956 i‡(
key
)

957 
ok
 = 
YES
;

959 i‡(
do˘y≥
)

961 * 
do˛ígth
;

963 *
do˘y≥
++ = 0;

964 
do˛ígth
 = 
	`°rchr
(
do˘y≥
, '/');

965 i‡(
do˛ígth
)

967 *
do˛ígth
++ = 0;

968 
documít_Àngth
 = 
	`©ﬁ
(
do˛ígth
);

969 i‡(
documít_Àngth
)

971 
do˙ame
 = 
	`°rchr
(
do˛ígth
, '/');

972 i‡(
do˙ame
)

974 *
do˙ame
++ = 0;

975 
ok
 = 
YES
;

982 i‡(!
key
) key = "";

983 
ok
 = 
YES
;

988 i‡(!
ok
)

990 *
u√sˇ≥d
 = 
NULL
;

992 
	`SåAŒocC›y
(
u√sˇ≥d
, 
¨g
);

993 
	`HTUnEsˇ≥
(
u√sˇ≥d
);

994 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_BAD_REQUEST
,

995 (*Ë
u√sˇ≥d
, (Ë
	`°æí
(unescaped),

997 
	`HT_FREE
(
u√sˇ≥d
);

998 
	`HT_FREE
(
theWAISöfo
->
«mes
);

1002 
	`HTTRACE
(
PROT_TRACE
, "HTLoadWAIS.. URL Parsed OK\n");

1003 
theWAISöfo
->
°©e
 = 
HTWAIS_NEED_CONNECTION
;

1005 i‡((
£rvi˚
 = 
	`°rchr
(
theWAISöfo
->
«mes
, ':')))

1006 *
£rvi˚
++ = 0;

1008 
£rvi˚
 = "210";

1010 i‡((
£rvî_«me
 ? server_name[0] : 0))

1012 
boﬁón
 
do_√ed_to_c⁄√˘_to_£rvî
 = 
åue
;

1014 i‡(
key
Ëi‡((*keyË=0Ë
do_√ed_to_c⁄√˘_to_£rvî
 = 
Ál£
;

1016 i‡(
do_√ed_to_c⁄√˘_to_£rvî
)

1018 i‡((
theWAISöfo
->
c⁄√˘i⁄
 = 
	`c⁄√˘_to_£rvî
(
£rvî_«me
,

1019 
	`©oi
(
£rvi˚
)))

1020 =
NULL
)

1022 * 
ho°
 = 
	`HTP¨£
(
¨g
, "", 
PARSE_HOST
);

1024 
	`HTTRACE
(
PROT_TRACE
, "HTLoadWAIS.."

1025 " C™'à›í c⁄√˘i⁄Åÿ%†vü sîvi˚ %s.\n" 
_


1026 
£rvî_«me
 
_
 
£rvi˚
);

1028 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_FATAL
, 
NO
, 
HTERR_WAIS_NO_CONNECT
,

1029 (*Ë
ho°
, (Ë
	`°æí
(host), "HTLoadWAIS");

1030 
theWAISöfo
->
ªsu…
 = 
HT_ERROR
;

1031 
	`HTWAISCÀ™up
(
ªque°
, 
°©us
);

1032  
°©us
;

1037 
theWAISöfo
->
c⁄√˘i⁄
 = 
NULL
;

1039 
	`SåAŒocC›y
(
theWAISöfo
->
wais_d©aba£
,ÅheWAISöfo->
www_d©aba£
);

1040 
	`HTUnEsˇ≥
(
theWAISöfo
->
wais_d©aba£
);

1045 *
§c°r
;

1047 
	`SåAŒocC›y
(
theWAISöfo
->
ba£tôÀ
,ÅheWAISöfo->
wais_d©aba£
);

1048 i‡((
§c°r
 = 
	`°r°r
(
theWAISöfo
->
ba£tôÀ
, ".§c")Ë!
NULL
)

1049 *
§c°r
 = '\0';

1054 i‡((
theWAISöfo
->
ªque°_mesßge
 =

1055 (*)
	`s_mÆloc
((
size_t
)
MAX_MESSAGE_LEN
 * ()))

1056 =
NULL
)

1057 
	`HT_OUTOFMEM
("WAISÑequest message");

1059 i‡((
theWAISöfo
->
ª•⁄£_mesßge
 =

1060 (*)
	`s_mÆloc
((
size_t
)
MAX_MESSAGE_LEN
 * ()))

1061 =
NULL
)

1062 
	`HT_OUTOFMEM
("WAISÑesponse message");

1070 i‡(
key
)

1072 i‡(*
key
)

1077 *
p
;

1078 
HTSåu˘uªd
* 
èrgë
;

1080 
theWAISöfo
->
°©e
 = 
HTWAIS_NEED_RESPONSE
;

1082 
	`°∫˝y
(
keyw‹ds
, 
key
, 
MAX_KEYWORDS_LENGTH
);

1083 (
p
 = 
	`°rchr
(
keyw‹ds
,'+'))) *p = ' ';

1087 
èrgë
 = 
	`HTMLGíî©‹
(
ªque°
, 
NULL
, 
WWW_HTML
, 
f‹m©_out
, 
sök
);

1089 
	`START
(
HTML_HTML
);

1090 
	`START
(
HTML_HEAD
);

1091 
	`START
(
HTML_TITLE
);

1092 
	`PUTS
(
keyw‹ds
);

1093 
	`PUTS
(" in ");

1094 
	`PUTS
(
theWAISöfo
->
ba£tôÀ
);

1095 
	`END
(
HTML_TITLE
);

1096 
	`END
(
HTML_HEAD
);

1098 
	`START
(
HTML_BODY
);

1099 
	`START
(
HTML_H1
);

1100 
	`PUTS
("WAIS Search of \"");

1101 
	`PUTS
(
keyw‹ds
);

1102 
	`PUTS
("\" in ");

1103 
	`PUTS
(
theWAISöfo
->
ba£tôÀ
);

1104 
	`END
(
HTML_H1
);

1106 
	`START
(
HTML_ISINDEX
);

1108 
ªque°_buf„r_Àngth
 = 
MAX_MESSAGE_LEN
;

1109 
	`HTTRACE
(
PROT_TRACE
, "HTLﬂdWAIS.. Sórch f‹ `%s' i¿`%s'\n" 
_


1110 
keyw‹ds
 
_
 
theWAISöfo
->
wais_d©aba£
);

1112 i‡(
	`gíî©e_£¨ch_≠du
(
theWAISöfo
->
ªque°_mesßge
 + 
HEADER_LENGTH
,

1113 &
ªque°_buf„r_Àngth
,

1114 
keyw‹ds
, 
theWAISöfo
->
wais_d©aba£
, 
NULL
,

1115 
HTMaxWAISLöes
Ë=
NULL
)

1117 
	`HTTRACE
(
PROT_TRACE
, "WAIS Search. Too manyÜines inÑesponse\n");

1119 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_WARN
, 
NO
, 
HTERR_WAIS_OVERFLOW
,

1120 
NULL
, 0, "HTLoadWAIS");

1123 i‡(!
	`öãΩªt_mesßge
(
theWAISöfo
->
ªque°_mesßge
,

1124 
MAX_MESSAGE_LEN
 - 
ªque°_buf„r_Àngth
,

1125 
theWAISöfo
->
ª•⁄£_mesßge
,

1126 
MAX_MESSAGE_LEN
,

1127 
theWAISöfo
->
c⁄√˘i⁄
,

1128 
Ál£


1131 
	`HTTRACE
(
PROT_TRACE
, "WAIS Search. Too manyÜines inÑesponse\n");

1133 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_WARN
, 
NO
, 
HTERR_WAIS_OVERFLOW
,

1134 
NULL
, 0, "HTLoadWAIS");

1138 
SórchRe•⁄£APDU
 *
quîy_ª•⁄£
 = 0;

1140 
	`ªadSórchRe•⁄£APDU
(&
quîy_ª•⁄£
,

1141 
theWAISöfo
->
ª•⁄£_mesßge
 + 
HEADER_LENGTH
);

1142 
	`di•œy_£¨ch_ª•⁄£
(
èrgë
,

1143 
quîy_ª•⁄£
, 
theWAISöfo
->
wais_d©aba£
,

1144 
keyw‹ds
);

1145 i‡(
quîy_ª•⁄£
->
D©aba£Dügno°icRec‹ds
)

1146 
	`‰ìWAISSórchRe•⁄£
(
quîy_ª•⁄£
->
D©aba£Dügno°icRec‹ds
);

1148 
	`‰ìSórchRe•⁄£APDU
(
quîy_ª•⁄£
);

1151 
	`END
(
HTML_BODY
);

1152 
	`END
(
HTML_HTML
);

1153 
FREE_TARGET
;

1155 
	`HTAnch‹_£tF‹m©
(
™ch‹
, 
WWW_HTML
);

1157 
theWAISöfo
->
ªsu…
 = 
°©us
 = 
HT_LOADED
;

1164 #ifde‡
CACHE_FILE_PREFIX


1165 
fûíame
[256];

1166 
FILE
 * 
Â
;

1168 
HTSåu˘uªd
* 
èrgë
 = 
	`HTMLGíî©‹
(
ªque°
, 
NULL
,

1169 
WWW_HTML
, 
f‹m©_out
, 
sök
);

1171 
theWAISöfo
->
°©e
 = 
HTWAIS_NEED_REQUEST
;

1174 
	`START
(
HTML_HTML
);

1175 
	`START
(
HTML_HEAD
);

1176 
	`START
(
HTML_TITLE
);

1177 
	`PUTS
(
theWAISöfo
->
ba£tôÀ
);

1178 
	`PUTS
(" Index");

1179 
	`END
(
HTML_TITLE
);

1180 
	`END
(
HTML_HEAD
);

1182 
	`START
(
HTML_BODY
);

1183 
	`START
(
HTML_H1
);

1184 
	`PUTS
("WAIS Index: ");

1185 
	`PUTS
(
theWAISöfo
->
ba£tôÀ
);

1186 
	`END
(
HTML_H1
);

1189 
	`START
(
HTML_ISINDEX
);

1193 #ifde‡
CACHE_FILE_PREFIX


1194 
	`•rötf
(
fûíame
,

1196 
CACHE_FILE_PREFIX
,

1197 
£rvî_«me
, 
£rvi˚
, 
theWAISöfo
->
www_d©aba£
);

1199 
Â
 = 
	`f›í
(
fûíame
, "r");

1200 
	`HTTRACE
(
PROT_TRACE
, "HTLﬂdWAIS.. Des¸ùti⁄ o‡£rvî %†%s.\n" 
_


1201 
fûíame
 
_


1202 
Â
 ? "existsálready" : "does NOTÉxist!");

1204 i‡(
Â
)

1206 
c
;

1208 
	`START
(
HTML_PRE
);

1209 (
c
=
	`gëc
(
Â
)Ë!
EOF
Ë
	`PUTC
(c);

1210 
	`END
(
HTML_PRE
);

1211 
	`f˛o£
(
Â
);

1215 
	`END
(
HTML_BODY
);

1216 
	`END
(
HTML_HTML
);

1217 
FREE_TARGET
;

1220 
	`HTAnch‹_£tF‹m©
(
™ch‹
, 
WWW_HTML
);

1222 
theWAISöfo
->
ªsu…
 = 
°©us
 = 
HT_LOADED
;

1229 
boﬁón
 
bö¨y
 = 
åue
;

1230 
HTSåóm
* 
èrgë
;

1231 
HTAtom
* 
documít_ty≥_©om
 = 
	`HTAtom_f‹
("application/octet-stream");

1232 
cou¡
;

1233 
™y
 
doc_chunk
;

1234 
™y
 * 
docid
 = &
doc_chunk
;

1236 
theWAISöfo
->
°©e
 = 
HTWAIS_FETCH_DOCUMENT
;

1237 
	`HTTRACE
(
PROT_TRACE
, "HTLoadWAIS.. Retrieve document `%s'\n"

1238 "............Åy≥ `%s'Üígth %ld\n" 
_


1239 (
do˙ame
 ? do˙amê: "unknown"Ë
_


1240 (
do˘y≥
 ? do˘y≥ : "unknown"Ë
_


1241 
documít_Àngth
);

1243 i‡(
do˘y≥
)

1245 i‡(
	`°rcmp
(
do˘y≥
, "WSRC") == 0)

1247 
documít_ty≥_©om
 = 
	`HTAtom_f‹
("application/x-wais-source");

1248 
bö¨y
 = 
Ál£
;

1251 i‡(
	`°rcmp
(
do˘y≥
, "TEXT") == 0)

1253 
documít_ty≥_©om
 = 
WWW_UNKNOWN
;

1254 
bö¨y
 = 
Ál£
;

1257 i‡(
	`°rcmp
(
do˘y≥
, "HTML") == 0)

1259 
documít_ty≥_©om
 = 
WWW_HTML
;

1260 
bö¨y
 = 
Ál£
;

1263 i‡(
	`°rcmp
(
do˘y≥
, "GIF"Ë=0Ë
documít_ty≥_©om
 = 
WWW_GIF
;

1266 
	`HTAnch‹_£tF‹m©
(
™ch‹
, 
documít_ty≥_©om
);

1269 i‡((
èrgë
 = 
	`HTSåómSèck
(
	`HTAnch‹_f‹m©
(
™ch‹
),

1270 
	`HTReque°_ouçutF‹m©
(
ªque°
),

1271 
	`HTReque°_ouçutSåóm
(
ªque°
),

1272 
ªque°
, 
YES
))

1273 =
NULL
)

1275 
theWAISöfo
->
ªsu…
 = 
HT_ERROR
;

1276 
°©us
 = -1;

1277 
	`HTWAISCÀ™up
(
ªque°
, 
°©us
);

1278  
°©us
;

1282 
	`WAIS_‰om_WWW
(
docid
, 
do˙ame
);

1285 
cou¡
 = 0; cou¡ * 
CHARS_PER_PAGE
 < 
documít_Àngth
; count++)

1287 *
ty≥
 = 
	`s_°rdup
(
do˘y≥
);

1289 
ªque°_buf„r_Àngth
 = 
MAX_MESSAGE_LEN
;

1290 
	`HTTRACE
(
PROT_TRACE
, "HTLﬂdWAIS.. Sli˚Çumbî %ld\n" 
_
 
cou¡
);

1291 i‡(
	`gíî©e_ªåõvÆ_≠du
(
theWAISöfo
->
ªque°_mesßge
 + 
HEADER_LENGTH
,

1292 &
ªque°_buf„r_Àngth
,

1293 
docid
, 
CT_byã
,

1294 
cou¡
 * 
CHARS_PER_PAGE
,

1295 
	`HTMIN
((
cou¡
 + 1Ë* 
CHARS_PER_PAGE
,

1296 
documít_Àngth
),

1297 
ty≥
,

1298 
theWAISöfo
->
wais_d©aba£
) == 0)

1300 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_WARN
, 
NO
, 
HTERR_WAIS_OVERFLOW
,

1301 
NULL
, 0, "HTLoadWAIS");

1304 
	`HT_FREE
(
ty≥
);

1307 i‡(
	`öãΩªt_mesßge
(
theWAISöfo
->
ªque°_mesßge
,

1308 
MAX_MESSAGE_LEN
 - 
ªque°_buf„r_Àngth
,

1309 
theWAISöfo
->
ª•⁄£_mesßge
,

1310 
MAX_MESSAGE_LEN
,

1311 
theWAISöfo
->
c⁄√˘i⁄
,

1312 
Ál£


1316 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_WARN
, 
NO
, 
HTERR_WAIS_OVERFLOW
,

1317 
NULL
, 0, "HTLoadWAIS");

1321 
	`ªadSórchRe•⁄£APDU
(&
ªåõvÆ_ª•⁄£
,

1322 
theWAISöfo
->
ª•⁄£_mesßge
 + 
HEADER_LENGTH
);

1324 
WAISSórchRe•⁄£
* 
£¨chªs
 = (WAISSórchRe•⁄£*)
ªåõvÆ_ª•⁄£
->
D©aba£Dügno°icRec‹ds
;

1326 i‡(!
£¨chªs
->
Text
)

1328 i‡(
£¨chªs
->
Dügno°ics
 &&

1329 *
£¨chªs
->
Dügno°ics
 &&

1330 (*
£¨chªs
->
Dügno°ics
)->
ADDINFO
)

1332 *
îrmsg
 = (*
£¨chªs
->
Dügno°ics
)->
ADDINFO
;

1334 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_WARN
, 
NO
, 
HTERR_WAIS_MODULE
,

1335 (*Ë
îrmsg
, (Ë
	`°æí
(errmsg),

1340 
	`HTReque°_addEº‹
(
ªque°
, 
ERR_WARN
, 
NO
, 
HTERR_WAIS_MODULE
,

1341 
NULL
, 0, "HTLoadWAIS");

1344 (*
èrgë
->
iß
->
_‰ì
)(target);

1345 
	`HTReque°_£tOuçutSåóm
(
ªque°
, 
NULL
);

1346 
	`HT_FREE
(
docid
->
byãs
);

1347 
	`‰ìWAISSórchRe•⁄£
(
ªåõvÆ_ª•⁄£
->
D©aba£Dügno°icRec‹ds
);

1348 
	`‰ìSórchRe•⁄£APDU
(
ªåõvÆ_ª•⁄£
);

1349 
theWAISöfo
->
ªsu…
 = 
HT_OK
;

1350 
	`HTWAISCÀ™up
(
ªque°
, 
°©us
);

1354 
	`ouçut_ãxt_ªc‹d
(
èrgë
, *
£¨chªs
->
Text
,

1355 
Ál£
, 
bö¨y
);

1356 
	`‰ìWAISSórchRe•⁄£
(
ªåõvÆ_ª•⁄£
->
D©aba£Dügno°icRec‹ds
);

1357 
	`‰ìSórchRe•⁄£APDU
(
ªåõvÆ_ª•⁄£
);

1362 (*
èrgë
->
iß
->
_‰ì
)(target);

1363 
	`HTReque°_£tOuçutSåóm
(
ªque°
, 
NULL
);

1364 
	`HT_FREE
(
docid
->
byãs
);

1366 
theWAISöfo
->
ªsu…
 = 
°©us
 = 
HT_LOADED
;

1370 
	`HTWAISCÀ™up
(
ªque°
, 
°©us
);

1372  
°©us
;

1373 
	}
}

1376 
PUBLIC
 
	$HTLﬂdWAIS
 (
SOCKET
 
soc
, 
HTReque°
* 
ªque°
)

1378 
wais_öfo
* 
theWAISöfo
;

1379 
HTNë
* 
√t
;

1380 
HTP¨ítAnch‹
* 
™ch‹
;

1389 i‡(
ªque°
)

1391 i‡((
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
)Ë=
NULL
Ë 
HT_ERROR
;

1392 i‡((
√t
 = 
	`HTReque°_√t
(
ªque°
)Ë=
NULL
Ë 
HT_ERROR
;

1395  
HT_ERROR
;

1397 
	`HTTRACE
(
PROT_TRACE
, "HTWAIS...... Lookög f‹ `%s\'\n" 
_
 
	`HTAnch‹_physiˇl
(
™ch‹
));

1400 i‡((
theWAISöfo
 = (
wais_öfo
*)
	`HTNë_c⁄ãxt
(
√t
)Ë=
NULL
)

1402 i‡((
theWAISöfo
 = (
wais_öfo
*)
	`HT_CALLOC
(1, (wais_öfo))Ë=
NULL
)

1403 
	`HT_OUTOFMEM
("HTLoadWAIS");

1405 
	`HTNë_£tEvítCÆlback
(
√t
, 
HTWAISEvít
);

1406 
	`HTNë_£tEvítP¨am
(
√t
, 
theWAISöfo
);

1407 
	`HTNë_£tC⁄ãxt
(
√t
, 
theWAISöfo
);

1409 
theWAISöfo
->
°©e
 = 
HTWAIS_BEGIN
;

1410 
theWAISöfo
->
ªsu…
 = 
HT_ERROR
;

1411 
theWAISöfo
->
√t
 =Çet;

1415  
	`HTWAISEvít
(
soc
, 
theWAISöfo
, 
HTEvít_BEGIN
);

1416 
	}
}

	@Library/src/HTWAIS.h

45 #i‚de‡
HTWAIS_H


46 
	#HTWAIS_H


	)

48 
	~"HTEvít.h
"

59 
HTMaxWAISLöes
;

61 
HTPrŸCÆlback
 
HTLﬂdWAIS
;

	@Library/src/HTWSRC.c

17 
	~"wwwsys.h
"

18 
	~"HTUtûs.h
"

19 
	~"HTSåög.h
"

20 
	~"HTMLPDTD.h
"

21 
	~"HTMLGí.h
"

22 
	~"HTP¨£.h
"

23 
	~"HTReqM™.h
"

24 
	~"HTProxy.h
"

25 
	~"HTWSRC.h
"

27 
	#BIG
 10000

	)

28 
	#PARAM_MAX
 
BIG


	)

29 
	#CACHE_PERIOD
 (7*86400Ë

	)

31 
	#HEX_ESCAPE
 '%'

	)

33 
	s_HTSåu˘uªd
 {

34 c⁄° 
HTSåu˘uªdCœss
 * 
	miß
;

38 
	#PUTC
(
c
Ë(*
me
->
èrgë
->
iß
->
put_ch¨a˘î
)(me->èrgë, c)

	)

39 
	#PUTS
(
s
Ë(*
me
->
èrgë
->
iß
->
put_°rög
)(me->èrgë, s)

	)

40 
	#START
(
e
Ë(*
me
->
èrgë
->
iß
->
°¨t_ñemít
)(me->èrgë,É, 0, 0)

	)

41 
	#END
(
e
Ë(*
me
->
èrgë
->
iß
->
íd_ñemít
)(me->èrgë,É)

	)

46 
PRIVATE
 c⁄° * 
	g∑r_«me
[] = {

49 
	#PAR_IP_NAME
 2

	)

51 
	#PAR_TCP_PORT
 3

	)

53 
	#PAR_DATABASE_NAME
 4

	)

55 
	#PAR_COST
 5

	)

57 
	#PAR_COST_UNIT
 6

	)

59 
	#PAR_FREE
 7

	)

61 
	#PAR_MAINTAINER
 8

	)

63 
	#PAR_DESCRIPTION
 9

	)

67 
	#PAR_UNKNOWN
 12

	)

70 
	#PAR_COUNT
 13

	)

74 
PRIVATE
 c⁄° * 
	ghex
 = "0123456789ABCDEF";

77 
	etokí°©e
 { 
	mbegönög
, 
	mbef‹e_èg
, 
	mcﬁ⁄
, 
	mbef‹e_vÆue
,

78 
	mvÆue
, 
	mbøckëed_vÆue
, 
	mquŸed_vÆue
, 
	mesˇ≥_ö_quŸed
, 
	md⁄e
 };

90 
	s_HTSåóm
 {

91 c⁄° 
HTSåómCœss
 * 
	miß
;

92 
HTSåu˘uªd
 * 
	mèrgë
;

93 
HTReque°
 * 
	mªque°
;

94 * 
	m∑r_vÆue
[
PAR_COUNT
];

95 
tokí°©e
 
	m°©e
;

96 
	m∑øm
[
BIG
+1];

97 
	m∑øm_numbî
;

98 
	m∑øm_cou¡
;

107 
PRIVATE
 
	$‰om_hex
 (
c
)

109  (
c
>='0')&&(c<='9') ? c-'0'

110 : (
c
>='A')&&(c<='F') ? c-'A'+10

111 : (
c
>='a')&&(c<='f') ? c-'a'+10

113 
	}
}

132 
PRIVATE
 
	$WSRCP¨£r_put_ch¨a˘î
 (
HTSåóm
* 
me
, 
c
)

134 
me
->
°©e
) {

135 
begönög
:

136 i‡(
c
=='('Ë
me
->
°©e
 = 
bef‹e_èg
;

139 
bef‹e_èg
:

140 i‡(
c
==')') {

141 
me
->
°©e
 = 
d⁄e
;

142  
HT_OK
;

143 } i‡(
c
==':') {

144 
me
->
∑øm_cou¡
 = 0;

145 
me
->
°©e
 = 
cﬁ⁄
;

149 
cﬁ⁄
:

150 i‡(
	`is•a˚
((Ë
c
)) {

151 
me
->
∑øm
[me->
∑øm_cou¡
++] = 0;

152 
me
->
∑øm_numbî
 = 0; 
∑r_«me
[me->param_number]; me->param_number++) {

153 i‡(0==
	`°rcmp
(
∑r_«me
[
me
->
∑øm_numbî
], me->
∑øm
)) {

157 i‡(!
∑r_«me
[
me
->
∑øm_numbî
]) {

158 
	`HTTRACE
(
PROT_TRACE
, "HTWSRC: Unknow¿fõld `%s' i¿sour˚ fûe\n" 
_


159 
me
->
∑øm
);

160 
me
->
∑øm_numbî
 = 
PAR_UNKNOWN
;

161 
me
->
°©e
 = 
bef‹e_vÆue
;

162  
HT_OK
;

164 
me
->
°©e
 = 
bef‹e_vÆue
;

166 i‡(
me
->
∑øm_cou¡
 < 
PARAM_MAX
Ëme->
∑øm
[me->∑øm_cou¡++] = 
c
;

170 
bef‹e_vÆue
:

171 i‡(
c
==')') {

172 
me
->
°©e
 = 
d⁄e
;

173  
HT_OK
;

175 i‡(
	`is•a˚
((Ë
c
)Ë 
HT_OK
;

176 
me
->
∑øm_cou¡
 = 0;

177 i‡(
c
=='"') {

178 
me
->
°©e
 = 
quŸed_vÆue
;

181 
me
->
°©e
 = (
c
=='"'Ë? 
quŸed_vÆue
 :

182 (
c
=='('Ë? 
bøckëed_vÆue
 : 
vÆue
;

183 
me
->
∑øm
[me->
∑øm_cou¡
++] = 
c
;

186 
vÆue
:

187 i‡(
	`is•a˚
((Ë
c
)) {

188 
me
->
∑øm
[me->
∑øm_cou¡
] = 0;

189 
	`SåAŒocC›y
(
me
->
∑r_vÆue
[me->
∑øm_numbî
], me->
∑øm
);

190 
me
->
°©e
 = 
bef‹e_èg
;

192 i‡(
me
->
∑øm_cou¡
 < 
PARAM_MAX
Ëme->
∑øm
[me->∑øm_cou¡++] = 
c
;

196 
bøckëed_vÆue
:

197 i‡(
c
==')') {

198 
me
->
∑øm
[me->
∑øm_cou¡
] = 0;

199 
	`SåAŒocC›y
(
me
->
∑r_vÆue
[me->
∑øm_numbî
], me->
∑øm
);

200 
me
->
°©e
 = 
bef‹e_èg
;

203 i‡(
me
->
∑øm_cou¡
 < 
PARAM_MAX
Ëme->
∑øm
[me->∑øm_cou¡++] = 
c
;

206 
quŸed_vÆue
:

207 i‡(
c
=='"') {

208 
me
->
∑øm
[me->
∑øm_cou¡
] = 0;

209 
	`SåAŒocC›y
(
me
->
∑r_vÆue
[me->
∑øm_numbî
], me->
∑øm
);

210 
me
->
°©e
 = 
bef‹e_èg
;

214 i‡(
c
=='\\') {

215 
me
->
°©e
 = 
esˇ≥_ö_quŸed
;

220 
esˇ≥_ö_quŸed
:

221 i‡(
me
->
∑øm_cou¡
 < 
PARAM_MAX
Ëme->
∑øm
[me->∑øm_cou¡++] = 
c
;

224 
d⁄e
:

225  
HT_OK
;

228  
HT_OK
;

229 
	}
}

239 #ifde‡
CACHE_FILE_PREFIX


240 
PRIVATE
 
BOOL
 
	$wrôe_ˇche
 (
HTSåóm
 * 
me
)

242 
FILE
 * 
Â
;

243 
ˇche_fûe_«me
[256];

244 * 
www_d©aba£
;

245 i‡(!
me
->
∑r_vÆue
[
PAR_DATABASE_NAME
]

246 || !
me
->
∑r_vÆue
[
PAR_IP_NAME
]

247 Ë 
NO
;

249 
www_d©aba£
 = 
	`HTEsˇ≥
(
me
->
∑r_vÆue
[
PAR_DATABASE_NAME
], 
URL_XALPHAS
);

250 
	`•rötf
(
ˇche_fûe_«me
, "%sWSRC-%s:%s:%.100s.txt",

251 
CACHE_FILE_PREFIX
,

252 
me
->
∑r_vÆue
[
PAR_IP_NAME
],

253 
me
->
∑r_vÆue
[
PAR_TCP_PORT
] ? me->par_value[PAR_TCP_PORT] : "210",

254 
www_d©aba£
);

255 
	`HT_FREE
(
www_d©aba£
);

256 
Â
 = 
	`f›í
(
ˇche_fûe_«me
, "wb");

257 i‡(!
Â
Ë 
NO
;

259 i‡(
me
->
∑r_vÆue
[
PAR_DESCRIPTION
])

260 
	`Âuts
(
me
->
∑r_vÆue
[
PAR_DESCRIPTION
], 
Â
);

262 
	`Âuts
("Des¸ùti⁄ÇŸávaûabÀ\n", 
Â
);

263 
	`f˛o£
(
Â
);

264  
YES
;

265 
	}
}

273 
	$give_∑ømëî
 (
HTSåóm
 * 
me
, 
p
)

275 
	`PUTS
(
∑r_«me
[
p
]);

276 i‡(
me
->
∑r_vÆue
[
p
]) {

277 
	`PUTS
(": ");

278 
	`PUTS
(
me
->
∑r_vÆue
[
p
]);

279 
	`PUTS
("; ");

281 
	`PUTS
(" NOT GIVEN in source file; ");

283 
	}
}

289 
PRIVATE
 
	$WSRC_gí_html
 (
HTSåóm
 * 
me
, 
BOOL
 
sour˚_fûe
)

292 i‡(
me
->
∑r_vÆue
[
PAR_DATABASE_NAME
]) {

293 * 
sh‹äame
 = 
NULL
;

294 
l
;

295 
	`SåAŒocC›y
(
sh‹äame
, 
me
->
∑r_vÆue
[
PAR_DATABASE_NAME
]);

296 
l
 = 
	`°æí
(
sh‹äame
);

297 i‡–
l
 > 4 && !
	`°rˇ£comp
(
sh‹äame
 +Ü -4, ".src")) {

298 
sh‹äame
[
l
-4] = 0;

301 
	`START
(
HTML_TITLE
);

302 
	`PUTS
(
sh‹äame
);

303 
	`PUTS
(
sour˚_fûe
 ? " WAIS source file" : " index");

304 
	`END
(
HTML_TITLE
);

306 
	`START
(
HTML_H1
);

307 
	`PUTS
(
sh‹äame
);

308 
	`PUTS
(
sour˚_fûe
 ? " description" : " index");

309 
	`END
(
HTML_H1
);

310 
	`HT_FREE
(
sh‹äame
);

313 
	`START
(
HTML_DL
);

315 i‡(
sour˚_fûe
) {

316 
	`START
(
HTML_DT
);

317 
	`PUTS
("AccessÜink");

318 
	`START
(
HTML_DD
);

319 i‡(
me
->
∑r_vÆue
[
PAR_IP_NAME
] &&

320 
me
->
∑r_vÆue
[
PAR_DATABASE_NAME
]) {

321 
WSRC_addªss
[256];

322 *
addr
 = 
	`HTAnch‹_addªss
((
HTAnch‹
*Ë
me
->
ªque°
->
™ch‹
);

323 *
g©e
 = 
	`HTG©eway_föd
(
addr
);

324 *
www_d©aba£
 = 
	`HTEsˇ≥
(
me
->
∑r_vÆue
[
PAR_DATABASE_NAME
],

325 
URL_XALPHAS
);

326 i‡(!
g©e
) {

327 
	`•rötf
(
WSRC_addªss
, "wais://%s%s%s/%s",

328 
me
->
∑r_vÆue
[
PAR_IP_NAME
],

329 
me
->
∑r_vÆue
[
PAR_TCP_PORT
] ? ":" : "",

330 
me
->
∑r_vÆue
[
PAR_TCP_PORT
] ?

331 
me
->
∑r_vÆue
[
PAR_TCP_PORT
] :"", 
www_d©aba£
);

332 
	`HTSèπAnch‹
(
me
->
èrgë
, 
NULL
, 
WSRC_addªss
);

333 
	`PUTS
("Directáccess");

334 
	`END
(
HTML_A
);

336 
	`•rötf
(
WSRC_addªss
, "%s%s%s%s/%s",

337 
g©e
,

338 
me
->
∑r_vÆue
[
PAR_IP_NAME
],

339 
me
->
∑r_vÆue
[
PAR_TCP_PORT
] ? ":" : "",

340 
me
->
∑r_vÆue
[
PAR_TCP_PORT
] ?

341 
me
->
∑r_vÆue
[
PAR_TCP_PORT
] : "",

342 
www_d©aba£
);

343 
	`HTSèπAnch‹
(
me
->
èrgë
, 
NULL
, 
WSRC_addªss
);

344 
	`PUTS
("Throughá gateway");

345 
	`END
(
HTML_A
);

347 
	`HT_FREE
(
g©e
);

348 
	`HT_FREE
(
addr
);

349 
	`HT_FREE
(
www_d©aba£
);

352 
	`give_∑ømëî
(
me
, 
PAR_IP_NAME
);

353 
	`give_∑ømëî
(
me
, 
PAR_DATABASE_NAME
);

358 i‡(
me
->
∑r_vÆue
[
PAR_MAINTAINER
]) {

359 
	`START
(
HTML_DT
);

360 
	`PUTS
("Maintainer");

361 
	`START
(
HTML_DD
);

362 
	`PUTS
(
me
->
∑r_vÆue
[
PAR_MAINTAINER
]);

364 i‡(
me
->
∑r_vÆue
[
PAR_IP_NAME
]) {

365 
	`START
(
HTML_DT
);

366 
	`PUTS
("Host");

367 
	`START
(
HTML_DD
);

368 
	`PUTS
(
me
->
∑r_vÆue
[
PAR_IP_NAME
]);

371 
	`END
(
HTML_DL
);

373 i‡(
me
->
∑r_vÆue
[
PAR_DESCRIPTION
]) {

374 
	`START
(
HTML_PRE
);

375 
	`PUTS
(
me
->
∑r_vÆue
[
PAR_DESCRIPTION
]);

376 
	`END
(
HTML_PRE
);

379 (*
me
->
èrgë
->
iß
->
_‰ì
)(me->target);

382 
	}
}

385 
PRIVATE
 
	$WSRCP¨£r_put_°rög
 (
HTSåóm
 * 
c⁄ãxt
, c⁄° * 
s
)

387 *
s
)

388 
	`WSRCP¨£r_put_ch¨a˘î
(
c⁄ãxt
, *
s
++);

389  
HT_OK
;

390 
	}
}

393 
PRIVATE
 
	$WSRCP¨£r_wrôe
 (
HTSåóm
 * 
c⁄ãxt
,

394 c⁄° * 
b
,

395 
l
)

397 
l
-- > 0)

398 
	`WSRCP¨£r_put_ch¨a˘î
(
c⁄ãxt
, *
b
++);

399  
HT_OK
;

400 
	}
}

402 
PRIVATE
 
	$WSRCP¨£r_Êush
 (
HTSåóm
 * 
me
)

404  
HT_OK
;

405 
	}
}

407 
PRIVATE
 
	$WSRCP¨£r_‰ì
 (
HTSåóm
 * 
me
)

409 
	`WSRC_gí_html
(
me
, 
YES
);

410 #ifde‡
CACHE_FILE_PREFIX


411 
	`wrôe_ˇche
(
me
);

414 
p
;

415 
p
=0; 
∑r_«me
[p];Ö++) {

416 i‡(
me
->
∑r_vÆue
[
p
]) {

417 
	`HT_FREE
(
me
->
∑r_vÆue
[
p
]);

421 
	`HT_FREE
(
me
);

422  
HT_OK
;

423 
	}
}

425 
PRIVATE
 
	$WSRCP¨£r_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

427 
	`WSRCP¨£r_‰ì
(
me
);

428  
HT_ERROR
;

429 
	}
}

436 
HTSåómCœss
 
	gWSRCP¨£rCœss
 = {

438 
WSRCP¨£r_Êush
,

439 
WSRCP¨£r_‰ì
,

440 
WSRCP¨£r_ab‹t
,

441 
WSRCP¨£r_put_ch¨a˘î
,

442 
WSRCP¨£r_put_°rög
,

443 
WSRCP¨£r_wrôe


451 
PUBLIC
 
HTSåóm
* 
	$HTWSRCC⁄vît
 (
HTReque°
 * 
ªque°
,

452 * 
∑øm
,

453 
HTF‹m©
 
öput_f‹m©
,

454 
HTF‹m©
 
ouçut_f‹m©
,

455 
HTSåóm
 * 
ouçut_°ªam
)

457 
HTSåóm
 * 
me
;

458 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

459 
	`HT_OUTOFMEM
("HTWSRCConvert");

460 
me
->
iß
 = &
WSRCP¨£rCœss
;

461 
me
->
èrgë
 = 
	`HTMLGíî©‹
(
ªque°
, 
∑øm
, 
öput_f‹m©
, 
ouçut_f‹m©
,

462 
ouçut_°ªam
);

463 
me
->
ªque°
 =Ñequest;

464 
me
->
°©e
 = 
begönög
;

466  
me
;

467 
	}
}

	@Library/src/HTWSRC.h

30 #i‚de‡
HTWSRC_H


31 
	#HTWSRC_H


	)

33 
	~"HTF‹m©.h
"

35 
HTC⁄vîãr
 
HTWSRCC⁄vît
;

48 * 
HTDeSœsh
 (c⁄° * 
°r
);

50 * 
HTEnSœsh
 (c⁄° * 
°r
);

	@Library/src/HTWWWStr.c

12 
	~"wwwsys.h
"

13 
	~"WWWUtû.h
"

14 
	~"HTP¨£.h
"

15 
	~"HTI√t.h
"

16 
	~"HTU£r.h
"

17 
	~"HTWWWSå.h
"

19 
PRIVATE
 * 
	gm⁄ths
[12] = {

23 #i‚de‡
HAVE_STRFTIME


24 
PRIVATE
 * 
	gwkdays
[7] = {

47 
PUBLIC
 * 
	$HTNextFõld
 (** 
p°r
)

49 * 
p
 = *
p°r
;

50 * 
°¨t
 = 
NULL
;

51 i‡(!
p°r
 || !*p°rË 
NULL
;

54 *
p
 && (
	`is•a˚
(() *p) || *p==',' || *p==';' || *p=='='))Ö++;

55 i‡(!*
p
) {

56 *
p°r
 = 
p
;

57  
NULL
;

60 i‡(*
p
 == '"') {

61 
°¨t
 = ++
p
;

62 ;*
p
 && *p!='"';Ö++)

63 i‡(*
p
 == '\\' && *(p+1))Ö++;

65 } i‡(*
p
 == '<') {

66 
°¨t
 = ++
p
;

67 ;*
p
 && *p!='>';Ö++)

68 i‡(*
p
 == '\\' && *(p+1))Ö++;

70 } i‡(*
p
 == '(') {

71 ;*
p
 && *p!=')';Ö++)

72 i‡(*
p
 == '\\' && *(p+1))Ö++;

73 
p
++;

75 
°¨t
 = 
p
;

76 *
p
 && !
	`is•a˚
(() *p) && *p!=',' && *p!=';' && *p!='=')

77 
p
++;

81 i‡(*
p
) *p++ = '\0';

82 *
p°r
 = 
p
;

83  
°¨t
;

84 
	}
}

101 
PUBLIC
 * 
	$HTNextLWSTokí
 (** 
p°r
)

103 * 
p
 = *
p°r
;

104 * 
°¨t
 = 
NULL
;

105 i‡(!
p°r
 || !*p°rË 
NULL
;

108 *
p
 && (
	`is•a˚
(() *p)))Ö++;

109 i‡(!*
p
) {

110 *
p°r
 = 
p
;

111  
NULL
;

115 
°¨t
 = 
p
;

116 *
p
 && !
	`is•a˚
(() *p))Ö++;

118 i‡(*
p
) *p++ = '\0';

119 *
p°r
 = 
p
;

120  
°¨t
;

121 
	}
}

130 
PUBLIC
 * 
	$HTNextPaú
 (** 
p°r
)

132 * 
p
 = *
p°r
;

133 * 
°¨t
 = 
NULL
;

134 i‡(!
p°r
 || !*p°rË 
NULL
;

137 *
p
 && (*p==',' || *p==';'))Ö++;

138 i‡(!*
p
) {

139 *
p°r
 = 
p
;

140  
NULL
;

143 i‡(*
p
 == '"') {

144 
°¨t
 = ++
p
;

145 ;*
p
 && *p!='"';Ö++)

146 i‡(*
p
 == '\\' && *(p+1))Ö++;

148 } i‡(*
p
 == '<') {

149 
°¨t
 = ++
p
;

150 ;*
p
 && *p!='>';Ö++)

151 i‡(*
p
 == '\\' && *(p+1))Ö++;

153 } i‡(*
p
 == '(') {

154 ;*
p
 && *p!=')';Ö++)

155 i‡(*
p
 == '\\' && *(p+1))Ö++;

156 
p
++;

158 
°¨t
 = 
p
;

159 *
p
 && *p!=',' && *p!=';')

160 
p
++;

164 i‡(*
p
) *p++ = '\0';

165 *
p°r
 = 
p
;

166  
°¨t
;

167 
	}
}

174 
PUBLIC
 * 
	$HTNextP¨am
 (** 
p°r
)

176 * 
p
 = *
p°r
;

177 * 
°¨t
 = 
NULL
;

178 i‡(!
p°r
 || !*p°rË 
NULL
;

181 *
p
 && *p==';')Ö++;

182 i‡(!*
p
) {

183 *
p°r
 = 
p
;

184  
NULL
;

187 i‡(*
p
 == '"') {

188 
°¨t
 = ++
p
;

189 ;*
p
 && *p!='"';Ö++)

190 i‡(*
p
 == '\\' && *(p+1))Ö++;

192 } i‡(*
p
 == '<') {

193 
°¨t
 = ++
p
;

194 ;*
p
 && *p!='>';Ö++)

195 i‡(*
p
 == '\\' && *(p+1))Ö++;

197 } i‡(*
p
 == '(') {

198 ;*
p
 && *p!=')';Ö++)

199 i‡(*
p
 == '\\' && *(p+1))Ö++;

200 
p
++;

202 
°¨t
 = 
p
;

203 *
p
 && *p!=';')

204 
p
++;

208 i‡(*
p
) *p++ = '\0';

209 *
p°r
 = 
p
;

210  
°¨t
;

211 
	}
}

219 
PUBLIC
 * 
	$HTNextEÀmít
 (** 
p°r
)

221 * 
p
 = *
p°r
;

222 * 
°¨t
 = 
NULL
;

223 i‡(!
p°r
 || !*p°rË 
NULL
;

226 *
p
 && ((
	`is•a˚
(() *p)) || *p==','))Ö++;

227 i‡(!*
p
) {

228 *
p°r
 = 
p
;

229  
NULL
;

231 
°¨t
 = 
p
;

233 i‡(*
p
 == '"') {

234 ;*
p
 && *p!='"';Ö++)

235 i‡(*
p
 == '\\' && *(p+1))Ö++;

236 
p
++;

237 } i‡(*
p
 == '<') {

238 ;*
p
 && *p!='>';Ö++)

239 i‡(*
p
 == '\\' && *(p+1))Ö++;

240 
p
++;

241 } i‡(*
p
 == '(') {

242 ;*
p
 && *p!=')';Ö++)

243 i‡(*
p
 == '\\' && *(p+1))Ö++;

244 
p
++;

246 *
p
 && *p!=',')Ö++;

250 i‡(*
p
) *p++ = '\0';

251 *
p°r
 = 
p
;

252  
°¨t
;

253 
	}
}

260 
PUBLIC
 * 
	$HTNextSegmít
 (** 
p°r
)

262 * 
p
 = *
p°r
;

263 * 
°¨t
 = 
NULL
;

264 i‡(!
p°r
 || !*p°rË 
NULL
;

267 *
p
 && (
	`is•a˚
(() *p) || *p==',' || *p==';' || *p=='=' || *p=='/'))Ö++;

268 i‡(!*
p
) {

269 *
p°r
 = 
p
;

270  
NULL
;

273 i‡(*
p
 == '"') {

274 
°¨t
 = ++
p
;

275 ;*
p
 && *p!='"';Ö++)

276 i‡(*
p
 == '\\' && *(p+1))Ö++;

278 } i‡(*
p
 == '<') {

279 
°¨t
 = ++
p
;

280 ;*
p
 && *p!='>';Ö++)

281 i‡(*
p
 == '\\' && *(p+1))Ö++;

283 } i‡(*
p
 == '(') {

284 ;*
p
 && *p!=')';Ö++)

285 i‡(*
p
 == '\\' && *(p+1))Ö++;

286 
p
++;

288 
°¨t
 = 
p
;

289 *
p
 && !
	`is•a˚
(() *p) && *p!=',' && *p!=';' && *p!='=' && *p!='/')

290 
p
++;

294 i‡(*
p
) *p++ = '\0';

295 *
p°r
 = 
p
;

296  
°¨t
;

297 
	}
}

306 
PUBLIC
 * 
	$HTNextSExp
 (** 
exp
, ** 
∑øm
)

308 * 
p
 = *
exp
;

309 * 
«me
 = 
NULL
;

310 i‡(!
exp
 || !*expË 
NULL
;

311 *
p
 && 
	`is•a˚
(() *p))Ö++;

312 i‡(!*
p
) {

313 *
exp
 = 
p
;

314  
NULL
;

316 i‡(*
p
 == '{') {

317 
˙t
 = 1;

322 
p
++;

323 i‡((
«me
 = 
	`HTNextFõld
(&
p
)Ë=
NULL
)  NULL;

324 *
p
 && 
	`is•a˚
(() *p))Ö++;

325 *
∑øm
 = 
p
;

326 *
p
) {

327 i‡(*
p
 ='{'Ë
˙t
++;

328 i‡(*
p
 ='}'Ë
˙t
--;

329 i‡(!
˙t
) {

330 *
p
 = '\0';

333 
p
++;

336  
«me
;

337 
	}
}

351 
PUBLIC
 c⁄° * 
	$HTMesßgeIdSå
 (
HTU£rProfûe
 * 
up
)

353 
buf
[80];

354 
time_t
 
£˘ime
 = 
	`time
(
NULL
);

355 #ifde‡
HAVE_GETPID


356 c⁄° * 
addªss
 = 
	`HTU£rProfûe_fqdn
(
up
);

358 c⁄° * 
addªss
 = 
	`HTU£rProfûe_emaû
(
up
);

360 i‡(!
addªss
Ëaddªs†
	`tm≤am
(
NULL
);

361 i‡((!
addªss
 || !*addªssË&& 
£˘ime
 < 0) {

362 
	`HTTRACE
(
CORE_TRACE
, "MessageID... Can't makeá unique MessageID\n");

365 #ifde‡
HAVE_GETPID


366 
	`•rötf
(
buf
, "<%ldZ%ld@%s>", ()
£˘ime
, ()
	`gëpid
(), 
addªss
 ?áddress : "@@@");

368 
	`•rötf
(
buf
, "<%ldZ%s>", 
£˘ime
, 
addªss
 ?áddress : "@@@");

371 *(
buf
+79) = '\0';

372  
buf
;

373 
	}
}

380 
PRIVATE
 
	$make_num
 (c⁄° * 
s
)

382 i‡(*
s
 >= '0' && *s <= '9')

383  10 * (*
s
 - '0') + *(s+1) - '0';

385  *(
s
+1) - '0';

386 
	}
}

388 
PRIVATE
 
	$make_m⁄th
 (* 
s
, ** 
íds
)

390 * 
±r
 = 
s
;

391 !
	`ißÕha
((Ë*
±r
))Ötr++;

392 i‡(*
±r
) {

393 
i
;

394 *
íds
 = 
±r
+3;

395 
i
=0; i<12; i++)

396 i‡(!
	`°∫ˇ£comp
(
m⁄ths
[
i
], 
±r
, 3))  i;

399 
	}
}

410 
PUBLIC
 
time_t
 
	$HTP¨£Time
 (c⁄° * 
°r
, 
HTU£rProfûe
 * 
up
, 
BOOL
 
ex∑nd
)

412 * 
s
;

413 
tm
Åm;

414 
time_t
 
t
;

416 i‡(!
°r
)  0;

418 i‡((
s
 = 
	`°rchr
(
°r
, ','))) {

419 
s
++;

420 *
s
 && *s==' ') s++;

421 i‡(
	`°rchr
(
s
,'-')) {

422 
	`HTTRACE
(
CORE_TRACE
, "Format...... Weekday, 00-Mon-00 00:00:00 GMT\n");

423 i‡(()
	`°æí
(
s
) < 18) {

424 
	`HTTRACE
(
CORE_TRACE
, "ERROR....... NŸá vÆidÅimêf‹m© \"%s\"\n" 
_
 
s
);

427 
tm
.
tm_mday
 = 
	`°πﬁ
(
s
, &s, 10);

428 
tm
.
tm_m⁄
 = 
	`make_m⁄th
(
s
, &s);

429 
tm
.
tm_yór
 = 
	`°πﬁ
(++
s
, &s, 10);

430 
tm
.
tm_hour
 = 
	`°πﬁ
(
s
, &s, 10);

431 
tm
.
tm_mö
 = 
	`°πﬁ
(++
s
, &s, 10);

432 
tm
.
tm_£c
 = 
	`°πﬁ
(++
s
, &s, 10);

435 
	`HTTRACE
(
CORE_TRACE
, "Format...... Wkd, 00 Mon 0000 00:00:00 GMT\n");

436 i‡(()
	`°æí
(
s
) < 20) {

437 
	`HTTRACE
(
CORE_TRACE
, "ERROR....... NŸá vÆidÅimêf‹m© \"%s\"\n" 
_
 
s
);

440 
tm
.
tm_mday
 = 
	`°πﬁ
(
s
, &s, 10);

441 
tm
.
tm_m⁄
 = 
	`make_m⁄th
(
s
, &s);

442 
tm
.
tm_yór
 = 
	`°πﬁ
(
s
, &s, 10) - 1900;

443 
tm
.
tm_hour
 = 
	`°πﬁ
(
s
, &s, 10);

444 
tm
.
tm_mö
 = 
	`°πﬁ
(++
s
, &s, 10);

445 
tm
.
tm_£c
 = 
	`°πﬁ
(++
s
, &s, 10);

447 } i‡(
	`isdigô
((Ë*
°r
)) {

449 i‡(
	`°rchr
(
°r
, 'T')) {

450 
	`HTTRACE
(
CORE_TRACE
, "Format...... YYYY.MM.DDThh:mmStzWkd\n");

451 
s
 = (*Ë
°r
;

452 *
s
 && *s==' ') s++;

453 i‡(()
	`°æí
(
s
) < 21) {

454 
	`HTTRACE
(
CORE_TRACE
, "ERROR....... NŸá vÆidÅimêf‹m© `%s\'\n" 
_
 
s
);

457 
tm
.
tm_yór
 = 
	`°πﬁ
(
s
, &s, 10) - 1900;

458 
tm
.
tm_m⁄
 = 
	`°πﬁ
(++
s
, &s, 10);

459 
tm
.
tm_mday
 = 
	`°πﬁ
(++
s
, &s, 10);

460 
tm
.
tm_hour
 = 
	`°πﬁ
(++
s
, &s, 10);

461 
tm
.
tm_mö
 = 
	`°πﬁ
(++
s
, &s, 10);

462 
tm
.
tm_£c
 = 
	`°πﬁ
(++
s
, &s, 10);

465 
t
 = 
ex∑nd
 ? 
	`time
(
NULL
Ë+ 
	`©ﬁ
(
°r
) :átol(str);

467 #ifde‡
HTDEBUG


468 i‡(
CORE_TRACE
) {

469 i‡(
ex∑nd
) {

470 #i‡
	`deföed
 (
HAVE_CTIME_R_2
)

471 
buf„r
[
CTIME_MAX
];

472 
	`HTTRACE
(
CORE_TRACE
, "Timê°rög. Dñè-timê%†∑r£dÅÿ%ld sec⁄ds, o∏öÜoˇ»time: %s" 
_


473 
°r
 
	`_
 (Ë
t
 _ (*Ë
	`˘ime_r
(&t, 
buf„r
));

474 #ñi‡
	`deföed
(
HAVE_CTIME_R_3
)

475 
buf„r
[
CTIME_MAX
];

476 
	`HTTRACE
(
CORE_TRACE
, "Timê°rög. Dñè-timê%†∑r£dÅÿ%ld sec⁄ds, o∏öÜoˇ»time: %s" 
_


477 
°r
 
	`_
 (Ë
t
 _ (*Ë
	`˘ime_r
(&t, 
buf„r
, 
CTIME_MAX
));

479 
	`HTTRACE
(
CORE_TRACE
, "Timê°rög. Dñè-timê%†∑r£dÅÿ%ld sec⁄ds, o∏öÜoˇ»time: %s" 
_


480 
°r
 
	`_
 (Ë
t
 
_
 
	`˘ime
(&t));

483 
	`HTTRACE
(
CORE_TRACE
, "Timê°rög. Dñè-timê%†∑r£dÅÿ%ld sec⁄ds\n" 
_
 
°r
 
	`_
 (Ë
t
);

487  
t
;

491 
	`HTTRACE
(
CORE_TRACE
, "Format...... Wkd Mon 00 00:00:00 0000 GMT\n");

492 
s
 = (*Ë
°r
;

493 *
s
 && *s==' ') s++;

494 
	`HTTRACE
(
CORE_TRACE
, "Tryög...... ThêWr⁄gÅimêf‹m©: %s\n" 
_
 
s
);

495 i‡(()
	`°æí
(
s
) < 24) {

496 
	`HTTRACE
(
CORE_TRACE
, "ERROR....... NŸá vÆidÅimêf‹m© \"%s\"\n" 
_
 
s
);

499 
tm
.
tm_m⁄
 = 
	`make_m⁄th
(
s
, &s);

500 
tm
.
tm_mday
 = 
	`°πﬁ
(
s
, &s, 10);

501 
tm
.
tm_hour
 = 
	`°πﬁ
(
s
, &s, 10);

502 
tm
.
tm_mö
 = 
	`°πﬁ
(++
s
, &s, 10);

503 
tm
.
tm_£c
 = 
	`°πﬁ
(++
s
, &s, 10);

504 
tm
.
tm_yór
 = 
	`°πﬁ
(
s
, &s, 10) - 1900;

506 i‡(
tm
.
tm_£c
 < 0 ||Åm.tm_sec > 59 ||

507 
tm
.
tm_mö
 < 0 ||Åm.tm_min > 59 ||

508 
tm
.
tm_hour
 < 0 ||Åm.tm_hour > 23 ||

509 
tm
.
tm_mday
 < 1 ||Åm.tm_mday > 31 ||

510 
tm
.
tm_m⁄
 < 0 ||Åm.tm_mon > 11 ||

511 
tm
.
tm_yór
 <70 ||Åm.tm_year >120) {

512 
	`HTTRACE
(
CORE_TRACE
, "ERROR....... P¨£d iŒegÆÅime: %02d.%02d.%02d %02d:%02d:%02d\n" 
_


513 
tm
.
tm_mday
 
_
Åm.
tm_m⁄
+1 _Åm.
tm_yór
 _

514 
tm
.
tm_hour
 
_
Åm.
tm_mö
 _Åm.
tm_£c
);

519 #i‡
	`deföed
(
HAVE_TIMEZONE
Ë&& deföed(
HAVE_ALTZONE
)

520 
tm
.
tm_isd°
 = 
daylight
;

521 
	`HTTRACE
(
CORE_TRACE
, "Timê°rög. Daylighài†%s\n" 
_


522 
daylight
>0 ? "on" : daylight==0 ? "off" : "unknown");

526 
tm
.
tm_isd°
 = -1;

529 #ifde‡
HAVE_MKTIME


530 
t
 = 
	`mktime
(&
tm
);

531 
t
 +(
up
 ? 
	`HTU£rProfûe_timez⁄e
(upË: 
	`HTGëTimeZ⁄eOff£t
());

533 #ifde‡
HAVE_TIMEGM


534 
t
 = 
	`timegm
(&
tm
);

540 
	`HTTRACE
(
CORE_TRACE
, "Timê°rög. %†∑r£dÅÿ%ld cÆíd¨Åimê‹ `%s' i¿loˇ»time\n" 
_


541 
°r
 
	`_
 (Ë
t
 
_
 
	`˘ime
(&t));

542  
t
;

543 
	}
}

553 
PUBLIC
 c⁄° *
	$HTD©eTimeSå
 (
time_t
 * 
ˇÀnd¨
, 
BOOL
 
loˇl
)

555 
buf
[40];

557 #ifde‡
HAVE_STRFTIME


558 i‡(
loˇl
) {

563 #i‡
	`deföed
(
HT_REENTRANT
Ë|| deföed(
SOLARIS
)

564 
tm
 
lo˘ime
;

565 
	`loˇ…ime_r
(
ˇÀnd¨
, &
lo˘ime
);

566 
	`°r·ime
(
buf
, 40, "%a, %d %b %Y %H:%M:%S", &
lo˘ime
);

568 
tm
 *
lo˘ime
 = 
	`loˇ…ime
(
ˇÀnd¨
);

569 
	`°r·ime
(
buf
, 40, "%a, %d %b %Y %H:%M:%S", 
lo˘ime
);

572 #i‡
	`deföed
(
HT_REENTRANT
Ë|| deföed(
SOLARIS
)

573 
tm
 
gmt
;

574 
	`gmtime_r
(
ˇÀnd¨
, &
gmt
);

575 
	`°r·ime
(
buf
, 40, "%a, %d %b %Y %H:%M:%S GMT", &
gmt
);

577 
tm
 *
gmt
 = 
	`gmtime
(
ˇÀnd¨
);

578 
	`°r·ime
(
buf
, 40, "%a, %d %b %Y %H:%M:%S GMT", 
gmt
);

582 i‡(
loˇl
) {

583 #i‡
	`deföed
(
HT_REENTRANT
)

584 
tm
 
lo˘ime
;

585 
	`loˇ…ime_r
(
ˇÀnd¨
, &
lo˘ime
);

587 
tm
 *
lo˘ime
 = 
	`loˇ…ime
(
ˇÀnd¨
);

589 
	`•rötf
(
buf
,"%s, %02d %s %04d %02d:%02d:%02d",

590 
wkdays
[
lo˘ime
->
tm_wday
],

591 
lo˘ime
->
tm_mday
,

592 
m⁄ths
[
lo˘ime
->
tm_m⁄
],

593 
lo˘ime
->
tm_yór
 + 1900,

594 
lo˘ime
->
tm_hour
,

595 
lo˘ime
->
tm_mö
,

596 
lo˘ime
->
tm_£c
);

598 #i‡
	`deföed
(
HT_REENTRANT
Ë|| deföed(
SOLARIS
)

599 
tm
 
gmt
;

600 
	`gmtime_r
(
ˇÀnd¨
, &
gmt
);

602 
tm
 *
gmt
 = 
	`gmtime
(
ˇÀnd¨
);

604 
	`•rötf
(
buf
,"%s, %02d %s %04d %02d:%02d:%02d GMT",

605 
wkdays
[
gmt
->
tm_wday
],

606 
gmt
->
tm_mday
,

607 
m⁄ths
[
gmt
->
tm_m⁄
],

608 
gmt
->
tm_yór
 + 1900,

609 
gmt
->
tm_hour
,

610 
gmt
->
tm_mö
,

611 
gmt
->
tm_£c
);

614  
buf
;

615 
	}
}

621 
PUBLIC
 
BOOL
 
	$HTD©eDúSå
 (
time_t
 * 
time
, * 
°r
, 
Àn
)

623 #ifde‡
HAVE_STRFTIME


624 #i‡
	`deföed
(
HT_REENTRANT
Ë|| deföed(
SOLARIS
)

625 
tm
 
lo˘ime
;

626 
	`loˇ…ime_r
(
time
, &
lo˘ime
);

627 
	`°r·ime
(
°r
, 
Àn
, "%d-%b-%Y %H:%M", &
lo˘ime
);

628  
YES
;

630 
	`°r·ime
(
°r
, 
Àn
, "%d-%b-%Y %H:%M", 
	`loˇ…ime
(
time
));

631  
YES
;

634 i‡(
Àn
 >= 16) {

635 
tm
 *
lo˘ime
 = 
	`loˇ…ime
(
time
);

636 
	`•rötf
(
°r
,"%02d-%s-%02d %02d:%02d",

637 
lo˘ime
->
tm_mday
,

638 
m⁄ths
[
lo˘ime
->
tm_m⁄
],

639 
lo˘ime
->
tm_yór
 % 100,

640 
lo˘ime
->
tm_hour
,

641 
lo˘ime
->
tm_mö
);

642  
YES
;

644  
NO
;

646 
	}
}

657 
PUBLIC
 
	$HTNumToSå
 (
n
, * 
°r
, 
Àn
)

659 
size
 = 
n
/1024.0;

660 i‡(
Àn
 < 6) {

661 *
°r
 = '\0';

664 i‡(
n
 < 1000)

665 
	`•rötf
(
°r
, "%dK", 
n
>0 ? 1 : 0);

666 i‡(
size
 + 0.999 < 1000)

667 
	`•rötf
(
°r
, "%dK", ()(
size
 + 0.5));

668 i‡((
size
 /= 1024) < 9.9)

669 
	`•rötf
(
°r
, "%.1fM", (
size
 + 0.05));

670 i‡(
size
 < 1000)

671 
	`•rötf
(
°r
, "%dM", ()(
size
 + 0.5));

672 i‡((
size
 /= 1024) < 9.9)

673 
	`•rötf
(
°r
, "%.1fG", (
size
 + 0.05));

675 
	`•rötf
(
°r
, "%dG", ()(
size
 + 0.5));

676 
	}
}

684 
PUBLIC
 
BOOL
 
	$HTMIMEM©ch
 (
HTAtom
 * 
tm∂©e
, HTAtom * 
a˘uÆ
)

686 c⁄° *
t
, *
a
;

687 *
°
, *
ß
;

688 
BOOL
 
m©ch
 = 
NO
;

690 i‡(
tm∂©e
 && 
a˘uÆ
 && (
t
 = 
	`HTAtom_«me
(tmplate))) {

691 i‡(!
	`°rcmp
(
t
, "*"))

692  
YES
;

694 i‡(
	`°rchr
(
t
, '*') &&

695 (
a
 = 
	`HTAtom_«me
(
a˘uÆ
)) &&

696 (
°
 = 
	`°rchr
(
t
, '/')Ë&& (
ß
 = såchr(
a
,'/'))) {

698 *
ß
 = 0;

699 *
°
 = 0;

701 i‡((*(
°
-1)=='*' &&

702 (*(
°
+1)=='*' || !
	`°rˇ£comp
(°+1, 
ß
+1))) ||

703 (*(
°
+1)=='*' && !
	`°rˇ£comp
(
t
,
a
)))

704 
m©ch
 = 
YES
;

706 *
ß
 = '/';

707 *
°
 = '/';

710  
m©ch
;

711 
	}
}

723 
PUBLIC
 * 
	$HTWWWToLoˇl
 (c⁄° * 
uæ
, c⁄° * 
ba£
,

724 
HTU£rProfûe
 * 
up
)

726 i‡(
uæ
) {

727 * 
ac˚ss
 = 
	`HTP¨£
(
uæ
, 
ba£
, 
PARSE_ACCESS
);

728 * 
ho°
 = 
	`HTP¨£
(
uæ
, 
ba£
, 
PARSE_HOST
);

729 * 
∑th
 = 
	`HTP¨£
(
uæ
, 
ba£
, 
PARSE_PATH
+
PARSE_PUNCTUATION
);

730 c⁄° * 
myho°
 = 
	`HTU£rProfûe_fqdn
(
up
);

733 i‡((*
ac˚ss
 && 
	`°rcmp
(access, "file") && strcmp(access, "cache")) ||

734 (*
ho°
 && 
	`°rˇ£comp
(host, "localhost") &&

735 
myho°
 && 
	`°rcmp
(
ho°
, myhost))) {

736 
	`HTTRACE
(
CORE_TRACE
, "LocalName... Not onÜocal file system\n");

737 
	`HT_FREE
(
ac˚ss
);

738 
	`HT_FREE
(
ho°
);

739 
	`HT_FREE
(
∑th
);

740  
NULL
;

742 *
±r
;

743 i‡((
±r
 = 
	`°rchr
(
∑th
, ';')) || (ptr = strchr(path, '?')))

744 *
±r
 = '\0';

750 #ifde‡
VMS


751 
	`HTVMS_checkDe˙ë
(
∑th
);

753 #ifde‡
WWW_MSWINDOWS


755 i‡(*
∑th
 == '/' &&Öath[2] == ':') {

756 *
‹ig
=
∑th
, *
de°
=path+1;

757 (*
‹ig
++ = *
de°
++));

760 } i‡(*
ho°
 && 
	`°rˇ£comp
(host, "localhost")) {

761 * 
√w∑th
 = 
NULL
;

762 
	`SåAŒocMC›y
(&
√w∑th
, "//", 
ho°
, 
∑th
, 
NULL
);

763 
	`HT_FREE
(
∑th
);

764 
∑th
 = 
√w∑th
;

769 *
p
 = 
∑th
;

770 *
p
) {

771 i‡(*
p
=='/') *p='\\';

772 
p
++;

777 
	`HTUnEsˇ≥
(
∑th
);

778 
	`HTTRACE
(
CORE_TRACE
, "Node........ `%s' món†∑th `%s'\n" 
_
 
uæ
 _ 
∑th
);

779 
	`HT_FREE
(
ac˚ss
);

780 
	`HT_FREE
(
ho°
);

781  
∑th
;

784  
NULL
;

785 
	}
}

794 
PUBLIC
 * 
	$HTLoˇlToWWW
 (c⁄° * 
loˇl
, c⁄° * 
ac˚ss
)

796 * 
esˇ≥d
 = 
NULL
;

797 c⁄° * 
scheme
 = (
ac˚ss
 && *access) ?áccess : "file:";

798 i‡(
loˇl
 && *local) {

799 #ifde‡
VMS


800 * 
u√sˇ≥d
 = 
NULL
;

801 i‡((
u√sˇ≥d
 = (*Ë
	`HT_MALLOC
(
	`°æí
(
loˇl
Ë+ 10)Ë=
NULL
)

802 
	`HT_OUTOFMEM
("HTLocalToWWW");

803 
	`°r˝y
(
u√sˇ≥d
, 
scheme
);

807 * 
disk
 = 
	`°rchr
 (
loˇl
, ':');

808 * 
dú
 = 
	`°rchr
 (
loˇl
, '[');

809 i‡(
disk
) {

810 *
disk
 = '\0';

811 
	`°rˇt
(
u√sˇ≥d
, "/");

812 
	`°rˇt
(
u√sˇ≥d
, 
loˇl
);

814 i‡(
dú
) {

815 *
p
;

816 *
dú
 = '/';

817 
p
 = 
dú
 ; *p != ']'; ++p)

818 i‡(*
p
 == '.') *p = '/';

819 *
p
 = '\0';

820 
	`°rˇt
(
u√sˇ≥d
, 
dú
);

823 
esˇ≥d
 = 
	`HTEsˇ≥
(
u√sˇ≥d
, 
URL_DOSFILE
);

824 
	`HT_FREE
(
u√sˇ≥d
);

827 #ifde‡
WIN32


828 * 
u√sˇ≥d
 = 
NULL
;

829 i‡((
u√sˇ≥d
 = (*Ë
	`HT_MALLOC
(
	`°æí
(
loˇl
Ë+ 10)Ë=
NULL
)

830 
	`HT_OUTOFMEM
("HTLocalToWWW");

831 
	`°r˝y
(
u√sˇ≥d
, 
scheme
);

832 i‡(
	`°rchr
(
loˇl
, ':')Ë
	`°rˇt
(
u√sˇ≥d
, "/");

834 c⁄° *
p
 = 
loˇl
;

835 *
q
 = 
u√sˇ≥d
+
	`°æí
(unescaped);

836 *
p
) {

837 i‡(*
p
=='\\') {

838 *
q
++='/';

840 *
q
++=*
p
;

841 
p
++;

843 *
q
 = '\0';

845 
esˇ≥d
 = 
	`HTEsˇ≥
(
u√sˇ≥d
, 
URL_DOSFILE
);

846 
	`HT_FREE
(
u√sˇ≥d
);

849 * 
esˇ≥d_∑th
 = 
	`HTEsˇ≥
(
loˇl
, 
URL_PATH
);

850 
esˇ≥d
 = 
	`SåAŒocMC›y
(&esˇ≥d, 
scheme
, 
esˇ≥d_∑th
, 
NULL
);

851 
	`HT_FREE
(
esˇ≥d_∑th
);

856  
esˇ≥d
;

857 
	}
}

	@Library/src/HTWWWStr.h

30 #i‚de‡
HTWWWSTR_H


31 
	#HTWWWSTR_H


	)

33 
	~"HTU£r.h
"

34 
	~"HTAtom.h
"

55 * 
HTNextFõld
 (** 
p°r
);

67 * 
HTNextPaú
 (** 
p°r
);

79 * 
HTNextP¨am
 (** 
p°r
);

90 * 
HTNextLWSTokí
 (** 
p°r
);

101 * 
HTNextSegmít
 (** 
p°r
);

112 * 
HTNextEÀmít
 (** 
p°r
);

124 * 
HTNextSExp
 (** 
exp
, ** 
∑øm
);

137 
	e_HTEOLSèã
 {

138 
	mEOL_ERR
 = -1,

139 
	mEOL_BEGIN
 = 0,

140 
	mEOL_FCR
,

141 
	mEOL_FLF
,

142 
	mEOL_DOT
,

143 
	mEOL_SCR
,

144 
	mEOL_SLF
,

146 
	mEOL_END
,

147 
	mEOL_FOLD
,

148 
	mEOL_LINE


149 } 
	tHTEOLSèã
;

160 c⁄° * 
HTD©eTimeSå
 (
time_t
 *
ˇÀnd¨
, 
BOOL
 
loˇl
);

171 
BOOL
 
HTD©eDúSå
 (
time_t
 * 
time
, * 
°r
, 
Àn
);

187 
time_t
 
HTP¨£Time
 (c⁄° * 
°r
, 
HTU£rProfûe
 * 
up
, 
BOOL
 
ex∑nd
);

198 c⁄° * 
HTMesßgeIdSå
 (
HTU£rProfûe
 * 
up
);

211 
BOOL
 
HTMIMEM©ch
 (
HTAtom
 * 
tm∂©e
, HTAtom * 
a˘uÆ
);

224 
HTNumToSå
 (
n
, *
°r
, 
Àn
);

245 * 
HTWWWToLoˇl
 (c⁄° * 
uæ
, c⁄° * 
ba£
,

246 
HTU£rProfûe
 * 
up
);

259 * 
HTLoˇlToWWW
 (c⁄° * 
loˇl
, c⁄° * 
ac˚ss
);

	@Library/src/HTWriter.c

15 
	~"wwwsys.h
"

16 
	~"WWWUtû.h
"

17 
	~"WWWC‹e.h
"

18 
	~"HTNë.h
"

19 
	~"HTNëM™.h
"

20 
	~"HTWrôî.h
"

22 
	~"HTH°M™.h
"

24 
	s_HTSåóm
 {

25 c⁄° 
HTSåómCœss
 * 
	miß
;

29 
	s_HTOuçutSåóm
 {

30 c⁄° 
HTOuçutSåómCœss
 * 
	miß
;

31 
HTCh™√l
 * 
	mch
;

32 
HTHo°
 * 
	mho°
;

33 
	moff£t
;

34 #ifde‡
NOT_ASCII


35 * 
	mascbuf
;

41 
PRIVATE
 
	$HTWrôî_Êush
 (
HTOuçutSåóm
 * 
me
)

43  
HT_OK
;

44 
	}
}

46 
PRIVATE
 
	$HTWrôî_‰ì
 (
HTOuçutSåóm
 * 
me
)

48  
HT_OK
;

49 
	}
}

51 
PRIVATE
 
	$HTWrôî_ab‹t
 (
HTOuçutSåóm
 * 
me
, 
HTLi°
 * 
e
)

53  
HT_ERROR
;

54 
	}
}

86 
PRIVATE
 
	$HTWrôî_wrôe
 (
HTOuçutSåóm
 * 
me
, c⁄° * 
buf
, 
Àn
)

88 
HTHo°
 * 
ho°
 = 
me
->host;

89 
SOCKET
 
soc
 = 
	`HTCh™√l_sockë
(
	`HTHo°_ch™√l
(
ho°
));

90 
HTNë
 * 
√t
 = 
	`HTHo°_gëWrôeNë
(
ho°
);

91 
b_wrôe
;

92 * 
wπp
;

93 c⁄° *
limô
 = 
buf
+
Àn
;

96 i‡(!
√t
) {

97 
	`HTTRACE
(
STREAM_TRACE
, "WrôêSockë NÿNë obje˘ %d (off£à%d)\n" 
_
 
soc
 _ 
me
->
off£t
);

98  
HT_ERROR
;

101 #ifde‡
NOT_ASCII


102 i‡(
Àn
 && !
me
->
ascbuf
) {

103 c⁄° *
‹ig
 = 
buf
;

104 *
de°
;

105 
˙t
;

106 i‡((
me
->
ascbuf
 = (*Ë
	`HT_MALLOC
(
Àn
)Ë=
NULL
)

107 
	`HT_OUTOFMEM
("HTWriter_write");

108 
de°
 = 
me
->
ascbuf
;

109 
˙t
=0; c¡<
Àn
; cnt++) {

110 *
de°
 = 
	`TOASCII
(*
‹ig
);

111 
de°
++, 
‹ig
++;

113 
wπp
 = 
me
->
ascbuf
;

114 
limô
 = 
me
->
ascbuf
+
Àn
;

117 i‡(!
me
->
off£t
)

118 
wπp
 = (*Ë
buf
;

120 
wπp
 = (*Ë
buf
 + 
me
->
off£t
;

121 
Àn
 -
me
->
off£t
;

122 
me
->
off£t
 = 0;

127 
wπp
 < 
limô
) {

128 i‡((
b_wrôe
 = 
	`NETWRITE
(
soc
, 
wπp
, 
Àn
)) < 0) {

129 #ifde‡
EAGAIN


130 i‡(
so˚ºno
 =
EAGAIN
 || so˚ºnÿ=
EWOULDBLOCK
)

132 i‡(
so˚ºno
 =
EWOULDBLOCK
)

135 
	`HTHo°_ªgi°î
(
ho°
, 
√t
, 
HTEvít_WRITE
);

136 
me
->
off£t
 = 
wπp
 - 
buf
;

137 
	`HTTRACE
(
STREAM_TRACE
, "WrôêSockë WOULD BLOCK %d (off£à%d)\n" 
_
 
soc
 _ 
me
->
off£t
);

138  
HT_WOULD_BLOCK
;

139 #ifde‡
EINTR


140 } i‡(
so˚ºno
 =
EINTR
) {

145 
	`HTTRACE
(
STREAM_TRACE
, "Write Socket call interrupted -Åryágain\n");

149 
ho°
->
brokí_pùe
 = 
YES
;

150 #ifde‡
EPIPE


151 i‡(
so˚ºno
 =
EPIPE
) {

154 
	`HTTRACE
(
STREAM_TRACE
, "Write Socket got EPIPE\n");

155 
	`HTHo°_uƒegi°î
(
ho°
, 
√t
, 
HTEvít_WRITE
);

156 
	`HTHo°_ªgi°î
(
ho°
, 
√t
, 
HTEvít_CLOSE
);

159 
	`HTReque°_addSy°emEº‹
(
√t
->
ªque°
, 
ERR_FATAL
, 
so˚ºno
, 
NO
,

161  
HT_CLOSED
;

165 
	`HTReque°_addSy°emEº‹
(
√t
->
ªque°
, 
ERR_FATAL
, 
so˚ºno
, 
NO
,

167  
HT_ERROR
;

172 
	`HTTRACEDATA
(
wπp
, 
b_wrôe
, "WrôögÅÿsockë %d" 
_
 
soc
);

173 
	`HTNë_addByãsWrôãn
(
√t
, 
b_wrôe
);

174 
wπp
 +
b_wrôe
;

175 
Àn
 -
b_wrôe
;

176 
	`HTTRACE
(
STREAM_TRACE
, "WrôêSockë %d byã†wrôã¿tÿ%d\n" 
_
 
b_wrôe
 _ 
soc
);

178 
HTAÀπCÆlback
 *
cbf
 = 
	`HTAÀπ_föd
(
HT_PROG_WRITE
);

179 i‡(
cbf
) {

180 
tw
 = 
	`HTNë_byãsWrôãn
(
√t
);

181 (*
cbf
)(
√t
->
ªque°
, 
HT_PROG_WRITE
,

182 
HT_MSG_NULL
, 
NULL
, &
tw
, NULL);

186 #ifde‡
NOT_ASCII


187 
	`HT_FREE
(
me
->
ascbuf
);

189  
HT_OK
;

190 
	}
}

195 
PRIVATE
 
	$HTWrôî_put_ch¨a˘î
 (
HTOuçutSåóm
 * 
me
, 
c
)

197  
	`HTWrôî_wrôe
(
me
, &
c
, 1);

198 
	}
}

205 
PRIVATE
 
	$HTWrôî_put_°rög
 (
HTOuçutSåóm
 * 
me
, c⁄° * 
s
)

207  
	`HTWrôî_wrôe
(
me
, 
s
, (Ë
	`°æí
(s));

208 
	}
}

215 
PRIVATE
 
	$HTWrôî_˛o£
 (
HTOuçutSåóm
 * 
me
)

217 
	`HTTRACE
(
STREAM_TRACE
, "Socket write FREEING....\n");

218 
	`HT_FREE
(
me
);

219  
HT_OK
;

220 
	}
}

222 
PRIVATE
 c⁄° 
HTOuçutSåómCœss
 
	gHTWrôî
 =

225 
HTWrôî_Êush
,

226 
HTWrôî_‰ì
,

227 
HTWrôî_ab‹t
,

228 
HTWrôî_put_ch¨a˘î
,

229 
HTWrôî_put_°rög
,

230 
HTWrôî_wrôe
,

231 
HTWrôî_˛o£


234 
PUBLIC
 
HTOuçutSåóm
 * 
	$HTWrôî_√w
 (
HTHo°
 * 
ho°
, 
HTCh™√l
 * 
ch
,

235 * 
∑øm
, 
mode
)

237 i‡(
ho°
 && 
ch
) {

238 
HTOuçutSåóm
 * 
me
 = 
	`HTCh™√l_ouçut
(
ch
);

239 i‡(!
me
) {

240 i‡((
me
=(
HTOuçutSåóm
 *Ë
	`HT_CALLOC
(1, (HTOuçutSåóm)))==
NULL
)

241 
	`HT_OUTOFMEM
("HTWriter_new");

242 
me
->
iß
 = &
HTWrôî
;

243 
me
->
ch
 = ch;

244 
me
->
ho°
 = host;

246  
me
;

248  
NULL
;

249 
	}
}

	@Library/src/HTWriter.h

35 #i‚de‡
HTWRITE_H


36 
	#HTWRITE_H


	)

38 
	~"HTIOSåóm.h
"

43 
HTOuçut_√w
 
HTWrôî_√w
;

45 
BOOL
 
HTWrôî_£t
 (
HTOuçutSåóm
 * 
me
,

46 
HTNë
 * 
√t
,

47 
HTCh™√l
 * 
ch
,

48 * 
∑øm
,

49 
mode
);

	@Library/src/HTXML.c

12 
	~"wwwsys.h
"

13 
	~"WWWUtû.h
"

14 
	~"WWWC‹e.h
"

17 #ifde‡
HT_STRUCT_XML_STREAM


18 #unde‡
HT_STRUCT_XML_STREAM


21 #ifde‡
HT_STRUCT_XML_STREAM


22 
	~"SGML.h
"

24 
	~"HTXML.h
"

26 
	#XML_MAX_ATTRIBUTES
 50

	)

28 
	s_HTSåóm
 {

29 c⁄° 
HTSåómCœss
 * 
	miß
;

30 
	m°©e
;

31 
HTReque°
 * 
	mªque°
;

32 
HTSåóm
 * 
	mèrgë
;

33 
HTSåu˘uªdCœss
 * 
	ma˘i⁄s
;

34 
HTSåu˘uªd
 * 
	m°¨gë
;

35 
XML_P¨£r
 
	mxml°ªam
;

36 #ifde‡
HT_STRUCT_XML_STREAM


37 
SGML_dtd
 * 
	mdtd
;

39 
XML_SèπEÀmítH™dÀr
 
	mxml_°¨t_ñemít
;

40 
XML_EndEÀmítH™dÀr
 
	mxml_íd_ñemít
;

41 
XML_Ch¨a˘îD©aH™dÀr
 
	mxml_ch¨a˘î_d©a
;

42 
XML_DeÁu…H™dÀr
 
	mxml_deÁu…_h™dÀr
;

43 * 
	mxml_u£r_d©a
;

47 
PRIVATE
 
HTXMLCÆlback_√w
 * 
	gXMLIn°™˚
 = 
NULL
;

48 
PRIVATE
 * 
	gXMLIn°™˚C⁄ãxt
 = 
NULL
;

52 
PRIVATE
 
	$HTXML_Êush
 (
HTSåóm
 * 
me
)

54 if(
me
->
èrgë
)

55  (*
me
->
èrgë
->
iß
->
Êush
)(me->target);

56 i‡(
me
->
°¨gë
)

57  (*
me
->
a˘i⁄s
->
Êush
)(me->
°¨gë
);

58  
HT_OK
;

59 
	}
}

61 
PRIVATE
 
	$HTXML_‰ì
 (
HTSåóm
 * 
me
)

63 
°©us
 = 
HT_OK
;

64 
	`XML_P¨£rFªe
(
me
->
xml°ªam
);

65 i‡(
me
->
èrgë
) {

66 i‡((
°©us
 = (*
me
->
èrgë
->
iß
->
_‰ì
)(me->èrgë)Ë=
HT_WOULD_BLOCK
)

67  
HT_WOULD_BLOCK
;

68 } if(
me
->
°¨gë
) {

69 i‡((
°©us
 = (*
me
->
a˘i⁄s
->
_‰ì
)(me->
°¨gë
)Ë=
HT_WOULD_BLOCK
)

70  
HT_WOULD_BLOCK
;

72 
	`HTTRACE
(
XML_TRACE
, "XML Parser.. FREEING...\n");

73 
	`HT_FREE
(
me
);

74  
°©us
;

75 
	}
}

77 
PRIVATE
 
	$HTXML_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

79 
	`HTTRACE
(
XML_TRACE
, "XML Parser.. ABORTING...\n");

80 
	`XML_P¨£rFªe
(
me
->
xml°ªam
);

81 i‡(
me
->
èrgë
)

82 (*
me
->
èrgë
->
iß
->
ab‹t
)(me->èrgë, 
NULL
);

83 i‡(
me
->
°¨gë
)

84 (*
me
->
a˘i⁄s
->
ab‹t
)(me->
°¨gë
, 
e
);

85 
	`HT_FREE
(
me
);

86  
HT_ERROR
;

87 
	}
}

89 
PRIVATE
 
	$HTXML_wrôe
 (
HTSåóm
 * 
me
, c⁄° * 
buf
, 
Àn
)

91 i‡(
me
->
°©e
 =
HT_OK
) {

92 
°©us
 = 
	`XML_P¨£
(
me
->
xml°ªam
, 
buf
, 
Àn
, 0);

93 i‡(!
°©us
) {

94 
	`HTTRACE
(
XML_TRACE
, "XML P¨£r.. `%s\'\n" 
_


95 (*)
	`XML_Eº‹Såög
(
	`XML_GëEº‹Code
(
me
->
xml°ªam
)));

96 
me
->
°©e
 = 
HT_ERROR
;

104  
HT_OK
;

105 
	}
}

107 
PRIVATE
 
	$HTXML_putCh¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

109  
	`HTXML_wrôe
(
me
, &
c
, 1);

110 
	}
}

112 
PRIVATE
 
	$HTXML_putSåög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

114  
	`HTXML_wrôe
(
me
, 
s
, (Ë
	`°æí
(s));

115 
	}
}

117 #ifde‡
HT_STRUCT_XML_STREAM


119 
PRIVATE
 
BOOL
 
	$£t_©åibuãs_vÆues
(
HTTag
 *
èg
,
BOOL
 *
¥e£¡
,**
vÆue
,

120 c⁄° *
«móâ
,c⁄° *
vÆuóâ
)

122 if(
èg
 && 
«móâ
 && 
vÆuóâ
) {

123 
i
;

124 
HTAâr
 *
©åibuãs

èg
->attributes;

125 
i
 = 0; i< 
èg
->
numbî_of_©åibuãs
 ; i++) {

126 if(!
	`°rˇ£comp
(
©åibuãs
[
i
].
«me
,
«móâ
)) {

127 
¥e£¡
[
i
] = 
TRUE
;

128 
vÆue
[
i
] = (*)
vÆuóâ
;

129  
TRUE
;

133  
FALSE
;

134 
	}
}

136 
PRIVATE
 
	$°¨t_ñemít
(
HTSåóm
 * 
me
,

137 c⁄° 
XML_Ch¨
 *
«me
,

138 c⁄° 
XML_Ch¨
 **
©ts
)

140 
ñemít_numbî
 =

141 
	`SGML_födEÀmítNumbî
((
SGML_dtd
 *)
me
->
dtd
,(*)
«me
);

142 if(
ñemít_numbî
 >= 0) {

143 
HTTag
 *
èg
 = 
	`SGML_födTag
 (
me
->
dtd
,
ñemít_numbî
);

144 
i
 = 0;

145 
BOOL
 
¥e£¡
[
XML_MAX_ATTRIBUTES
];

146 c⁄° *
vÆue
[
XML_MAX_ATTRIBUTES
];

147 
	`mem£t
((*Ë
¥e£¡
, '\0', 
XML_MAX_ATTRIBUTES
);

148 
	`mem£t
((*Ë
vÆue
, '\0', 
XML_MAX_ATTRIBUTES
*(*));

150 
©ts
[
i
]) {

151 
	`£t_©åibuãs_vÆues
(
èg
,
¥e£¡
,(**)
vÆue
,
©ts
[
i
],atts[i+1]);

152 
i
+=2;

155 (*
me
->
a˘i⁄s
->
°¨t_ñemít
)

156 (
me
->
°¨gë
,
ñemít_numbî
,
¥e£¡
,
vÆue
);

160 
	}
}

162 
PRIVATE
 
	$íd_ñemít
(
HTSåóm
 * 
me
, c⁄° 
XML_Ch¨
 *
«me
)

164 
ñemít_numbî
 = 
	`SGML_födEÀmítNumbî
(
me
->
dtd
,(*)
«me
);

166 if(
ñemít_numbî
 > 0) {

167 (*
me
->
a˘i⁄s
->
íd_ñemít
)(me->
°¨gë
, 
ñemít_numbî
);

171 
	}
}

172 
PRIVATE
 
	$ch¨a˘î_d©a
(
HTSåóm
 *
me
, c⁄° 
XML_Ch¨
 *
s
, 
Àn
)

174 (*
me
->
a˘i⁄s
->
put_block
)(me->
°¨gë
, 
s
, 
Àn
);

175 
	}
}

177 
PRIVATE
 
	$deÁu…_h™dÀr
(
HTSåóm
 *
me
, c⁄° 
XML_Ch¨
 *
s
, 
Àn
)

179 if(
s
[0] ='&' && s[
Àn
-1]==';') {

180 (*
me
->
a˘i⁄s
->
u≈¨£d_ítôy
)(me->
°¨gë
, 
s
,
Àn
);

184 
	}
}

188 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTXMLCœss
 =

191 
HTXML_Êush
,

192 
HTXML_‰ì
,

193 
HTXML_ab‹t
,

194 
HTXML_putCh¨a˘î
,

195 
HTXML_putSåög
,

196 
HTXML_wrôe


199 
PUBLIC
 
HTSåóm
 * 
	$HTXML_√w
 (
HTReque°
 * 
ªque°
,

200 * 
∑øm
,

201 
HTF‹m©
 
öput_f‹m©
,

202 
HTF‹m©
 
ouçut_f‹m©
,

203 
HTSåóm
 * 
ouçut_°ªam
)

205 
HTSåóm
 * 
me
 = 
NULL
;

206 
HTCh¨£t
 
ch¨£t
 = 
	`HTRe•⁄£_ch¨£t
 (
	`HTReque°_ª•⁄£
(
ªque°
));

207 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

208 
	`HT_OUTOFMEM
("HTXML_new");

209 
me
->
iß
 = &
HTXMLCœss
;

210 
me
->
°©e
 = 
HT_OK
;

211 
me
->
ªque°
 =Ñequest;

212 
me
->
èrgë
 = 
ouçut_°ªam
 ? ouçut_°ªam : 
	`HTEº‹Såóm
();

215 i‡((
me
->
xml°ªam
 = 
	`XML_P¨£rCª©e
(
	`HTAtom_«me
(
ch¨£t
))Ë=
NULL
) {

216 
	`HT_FREE
(
me
);

217  
	`HTEº‹Såóm
();

219 
	`HTTRACE
(
XML_TRACE
, "XML Parser.. Stream created\n");

222 i‡(
XMLIn°™˚
)

223 (*
XMLIn°™˚
)(
me
, 
ªque°
, 
ouçut_f‹m©
, 
ouçut_°ªam
, me->
xml°ªam
, 
XMLIn°™˚C⁄ãxt
);

225  
me
;

226 
	}
}

228 
PUBLIC
 
BOOL
 
	$HTXMLCÆlback_ªgi°îNew
 (
HTXMLCÆlback_√w
 * 
me
, * 
c⁄ãxt
)

230 
XMLIn°™˚
 = 
me
;

231 
XMLIn°™˚C⁄ãxt
 = 
c⁄ãxt
;

232  
YES
;

233 
	}
}

235 #ifde‡
HT_STRUCT_XML_STREAM


237 
PRIVATE
 
HTSåóm
 * 
	$HTXMLSåu˘uªd_√w
 (c⁄° 
SGML_dtd
 * 
dtd
, 
HTSåu˘uªd
 * 
°¨gë
)

239 
HTSåóm
 * 
me
 = 
NULL
;

240 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

241 
	`HT_OUTOFMEM
("HTXML_new");

242 
me
->
iß
 = &
HTXMLCœss
;

243 
me
->
°©e
 = 
HT_OK
;

244 
me
->
°¨gë
 = starget;

245 
me
->
dtd
 = (
SGML_dtd
 *)dtd;

246 
me
->
a˘i⁄s
 = (
HTSåu˘uªdCœss
*)(((
HTSåóm
*)
°¨gë
)->
iß
);

249 i‡((
me
->
xml°ªam
 = 
	`XML_P¨£rCª©e
(
NULL
)) == NULL) {

250 
	`HT_FREE
(
me
);

251  
	`HTEº‹Såóm
();

253 
	`XML_SëU£rD©a
(
me
->
xml°ªam
,me);

254 
	`XML_SëEÀmítH™dÀr
(
me
->
xml°ªam
,

255 (
XML_SèπEÀmítH™dÀr
)
°¨t_ñemít
,

256 (
XML_EndEÀmítH™dÀr
)
íd_ñemít
);

257 
	`XML_SëCh¨a˘îD©aH™dÀr
(
me
->
xml°ªam
,

258 (
XML_Ch¨a˘îD©aH™dÀr
)
ch¨a˘î_d©a
);

259 
	`XML_SëDeÁu…H™dÀr
(
me
->
xml°ªam
,

260 (
XML_DeÁu…H™dÀr
)
deÁu…_h™dÀr
);

262 
	`HTTRACE
(
XML_TRACE
, "XML Parser.. Stream created\n");

263  
me
;

264 
	}
}

266 
PRIVATE
 
BOOL
 
	$HTXMLSåu˘uªd_£tH™dÀrs
 (
HTSåóm
 * 
me
,

267 
XML_SèπEÀmítH™dÀr
 
°¨t
,

268 
XML_EndEÀmítH™dÀr
 
íd
,

269 
XML_Ch¨a˘îD©aH™dÀr
 
ch¨_d©a
,

270 
XML_DeÁu…H™dÀr
 
def_h™dÀr
)

272 if(
me
) {

273 
me
->
xml_°¨t_ñemít
 = 
°¨t
;

274 
me
->
xml_íd_ñemít
 = 
íd
;

275 
me
->
xml_ch¨a˘î_d©a
 = 
ch¨_d©a
;

276 
me
->
xml_deÁu…_h™dÀr
 = 
def_h™dÀr
;

277 
	`XML_SëEÀmítH™dÀr
(
me
->
xml°ªam
,
°¨t
,
íd
);

278 
	`XML_SëCh¨a˘îD©aH™dÀr
(
me
->
xml°ªam
,
ch¨_d©a
);

279 
	`XML_SëDeÁu…H™dÀr
(
me
->
xml°ªam
,
def_h™dÀr
);

280  
YES
;

282  
NO
;

283 
	}
}

285 
PRIVATE
 
BOOL
 
	$HTXMLSåu˘uªd_£tU£rD©a
(
HTSåóm
 *
me
, *
u£r_d©a
)

287 if(
me
) {

288 
me
->
xml_u£r_d©a
 = 
u£r_d©a
;

289 
	`XML_SëU£rD©a
(
me
->
xml°ªam
,me->
xml_u£r_d©a
);

290  
YES
;

292  
NO
;

293 
	}
}

	@Library/src/HTXML.h

29 #i‚de‡
HTXML_H


30 
	#HTXML_H


	)

32 
	~"HTF‹m©.h
"

33 
	~"HTSåóm.h
"

34 #ifde‡
HT_STRUCT_XML_STREAM


35 
	~"HTSåu˘.h
"

36 
	~"SGML.h
"

39 
	~<xmÕ¨£.h
>

51 
HTC⁄vîãr
 
HTXML_√w
;

66 
	tHTXMLCÆlback_√w
 (

67 
	tHTSåóm
 * 
	tme
,

68 
	tHTReque°
 * 
	tªque°
,

69 
	tHTF‹m©
 
	tèrgë_f‹m©
,

70 
	tHTSåóm
 * 
	tèrgë_°ªam
,

71 
	tXML_P¨£r
 
	txmÕ¨£r
,

72 * 
	tc⁄ãxt
);

81 
BOOL
 
HTXMLCÆlback_ªgi°îNew
 (
HTXMLCÆlback_√w
 *, * 
c⁄ãxt
);

93 #ifde‡
HT_STRUCT_XML_STREAM


94 
BOOL
 
HTXMLSåu˘uªd_£tH™dÀrs
(

95 
HTSåóm
 * 
me
,

96 
XML_SèπEÀmítH™dÀr
 
°¨t
,

97 
XML_EndEÀmítH™dÀr
 
íd
,

98 
XML_Ch¨a˘îD©aH™dÀr
 
ch¨_d©a
,

99 
XML_DeÁu…H™dÀr
 
def_h™dÀr
);

101 
BOOL
 
HTXMLSåu˘uªd_£tU£rD©a
 (
HTSåóm
 * 
me
, * 
u£r_d©a
);

102 
HTSåóm
 * 
HTXMLSåu˘uªd_√w
 (c⁄° 
SGML_dtd
 * 
dtd
, 
HTSåu˘uªd
 *

103 
°¨gë
);

	@Library/src/HTXParse.c

16 
	~"wwwsys.h
"

17 
	~"WWWUtû.h
"

18 
	~"WWWC‹e.h
"

19 
	~"HTXP¨£.h
"

20 
	~"HTEPtoCl.h
"

22 
	s_HTSåóm
 {

23 c⁄° 
HTSåómCœss
 * 
	miß
;

24 
HTXP¨£Såu˘
 * 
	mïs
;

27 
PRIVATE
 
	$HTXP¨£_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

29 (
me
->
ïs
->
u£d
 + 1Ë> (me->ïs->
Àngth
 + 1)) {

30 
me
->
ïs
->
Àngth
 +
INPUT_BUFFER_SIZE
;

32 i‡((
me
->
ïs
->
buf„r
 = (*Ë
	`HT_REALLOC
(me->ïs->buf„r, (me->ïs->
Àngth
 + 1))Ë=
NULL
)

33 
	`HT_OUTOFMEM
("me->eps->buffer ");

34 *(
me
->
ïs
->
buf„r
 + me->ïs->
u£d
Ë
c
;

35 
me
->
ïs
->
u£d
++;

36 
me
->
ïs
->
buf„r
[me->ïs->
u£d
] = '\0';

37  
HT_OK
;

38 
	}
}

40 
PRIVATE
 
	$HTXP¨£_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

42 
l
 = 
	`°æí
(
s
);

44 
	`HTTRACE
(
STREAM_TRACE
, "HTXP¨£_put_°rög, %s\n" 
_
 
s
);

46 (
me
->
ïs
->
u£d
 + 
l
Ë> (me->ïs->
Àngth
 + 1)) {

47 
me
->
ïs
->
Àngth
 +
INPUT_BUFFER_SIZE
;

49 i‡((
me
->
ïs
->
buf„r
 = (*Ë
	`HT_REALLOC
(me->ïs->buf„r, (me->ïs->
Àngth
 + 1))Ë=
NULL
)

50 
	`HT_OUTOFMEM
("me->eps->buffer ");

51 
	`mem˝y
–(
me
->
ïs
->
buf„r
 + me->ïs->
u£d
), 
s
, 
l
);

52 
me
->
ïs
->
u£d
 +
l
;

53 
me
->
ïs
->
buf„r
[me->ïs->
u£d
] = '\0';

54  
HT_OK
;

55 
	}
}

57 
PRIVATE
 
	$HTXP¨£_wrôe
 (
HTSåóm
 * 
me
, c⁄° * 
s
, 
l
)

59 (
me
->
ïs
->
u£d
 + 
l
Ë> (me->ïs->
Àngth
 + 1)) {

60 
me
->
ïs
->
Àngth
 +
INPUT_BUFFER_SIZE
;

62 i‡((
me
->
ïs
->
buf„r
 = (*Ë
	`HT_REALLOC
(me->ïs->buf„r, (me->ïs->
Àngth
 + 1))Ë=
NULL
)

63 
	`HT_OUTOFMEM
("me->eps->buffer ");

64 
	`mem˝y
–(
me
->
ïs
->
buf„r
 + me->ïs->
u£d
), 
s
, 
l
);

65 
me
->
ïs
->
u£d
 +
l
;

66 
me
->
ïs
->
buf„r
[me->ïs->
u£d
] = '\0';

67 (*(
me
->
ïs
->
ˇŒ_˛õ¡
))(me->eps);

68 
	`HTTRACE
(
STREAM_TRACE
, "HTXP¨£_wrôe,Ü=%d, u£d = %d\n" 
_
 
l
 _ 
me
->
ïs
->
u£d
);

69  
HT_OK
;

70 
	}
}

73 
PRIVATE
 
	$HTXP¨£_Êush
 (
HTSåóm
 * 
me
)

75 
	`HTTRACE
(
STREAM_TRACE
, "HTXParse_flush\n");

76  
HT_OK
;

77 
	}
}

79 
PRIVATE
 
	$HTXP¨£_‰ì
 (
HTSåóm
 * 
me
)

81 
	`HTTRACE
(
STREAM_TRACE
, "HTXParse_free\n");

82 
me
->
ïs
->
föished
 = 
YES
;

83 (*(
me
->
ïs
->
ˇŒ_˛õ¡
))(me->eps);

84 
	`HT_FREE
(
me
->
ïs
);

85 
	`HT_FREE
(
me
);

86  
HT_OK
;

87 
	}
}

89 
PRIVATE
 
	$HTXP¨£_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

91 
	`HTTRACE
(
STREAM_TRACE
, "HTXParse_abort\n");

92 
	`HTXP¨£_‰ì
(
me
);

93  
HT_ERROR
;

94 
	}
}

102 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTXP¨£Cœss
 =

105 
HTXP¨£_Êush
,

106 
HTXP¨£_‰ì
,

107 
HTXP¨£_ab‹t
,

108 
HTXP¨£_put_ch¨a˘î
,

109 
HTXP¨£_put_°rög
,

110 
HTXP¨£_wrôe


113 
PUBLIC
 
HTSåóm
* 
	$HTXP¨£
 (
HTReque°
 * 
ªque°
,

114 * 
∑øm
,

115 
HTF‹m©
 
öput_f‹m©
,

116 
HTF‹m©
 
ouçut_f‹m©
,

117 
HTSåóm
 * 
ouçut_°ªam
)

119 
HTSåóm
* 
me
;

121 #ifde‡
HTDEBUG


122 i‡(
STREAM_TRACE
) {

123 
	`HTTRACE
(
STREAM_TRACE
, "HTXConvert..");

124 i‡(
öput_f‹m©
 && i≈ut_f‹m©->
«me
)

125 
	`HTTRACE
(
STREAM_TRACE
, ".. i≈uàf‹m© i†%s" 
_
 
öput_f‹m©
->
«me
);

126 i‡(
ouçut_f‹m©
 && ouçut_f‹m©->
«me
)

127 
	`HTTRACE
(
STREAM_TRACE
, ".. ouçuàf‹m© i†%s" 
_
 
ouçut_f‹m©
->
«me
);

128 
	`HTTRACE
(
STREAM_TRACE
, "\n");

132 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (*me))Ë=
NULL
)

133 
	`HT_OUTOFMEM
("HTXConvert");

134 
me
->
iß
 = &
HTXP¨£Cœss
;

136 i‡((
me
->
ïs
 = (
HTXP¨£Såu˘
 *Ë
	`HT_CALLOC
(1, (HTXP¨£Såu˘))Ë=
NULL
)

137 
	`HT_OUTOFMEM
("HTXConvert");

139 i‡(
öput_f‹m©
)

140 
me
->
ïs
->
c⁄ã¡_ty≥
 = 
öput_f‹m©
->
«me
;

141 
me
->
ïs
->
ˇŒ_˛õ¡
 = 
HTCÆlClõ¡
;

142 i‡((
me
->
ïs
->
buf„r
 = (*Ë
	`HT_CALLOC
(
INPUT_BUFFER_SIZE
,1)Ë=
NULL
)

143 
	`HT_OUTOFMEM
("HTXParse");

144 
me
->
ïs
->
u£d
 = 0;

145 
me
->
ïs
->
föished
 = 
NO
;

146 
me
->
ïs
->
Àngth
 = 
INPUT_BUFFER_SIZE
;

147 
me
->
ïs
->
ªque°
 =Ñequest;

148  
me
;

149 
	}
}

	@Library/src/HTXParse.h

37 #i‚de‡
HTXPARSE_H


38 
	#HTXPARSE_H


	)

40 
	~"HTSåóm.h
"

41 
	~"HTRódî.h
"

42 
	~"HTReq.h
"

44 
_HTXP¨£Såu˘
 
	tHTXP¨£Såu˘
;

46 
	tCÆlClõ¡
 (
	tHTXP¨£Såu˘
 * 
	tme
);

48 
	s_HTXP¨£Såu˘
 {

49 
CÆlClõ¡
 *
	mˇŒ_˛õ¡
;

50 
	mu£d
;

51 
BOOL
 
	mföished
;

52 
	mÀngth
;

53 * 
	mbuf„r
;

54 * 
	mc⁄ã¡_ty≥
;

55 
HTReque°
 * 
	mªque°
;

58 
HTC⁄vîãr
 
HTXP¨£
;

	@Library/src/HTZip.c

12 
	~"wwwsys.h
"

13 
	~"WWWUtû.h
"

14 
	~"WWWC‹e.h
"

15 
	~"HTZù.h
"

17 #ifde‡
WWW_MSWINDOWS


18 
	#ZLIB_DLL


	)

21 
	~<zlib.h
>

23 
	#OUTBUF_SIZE
 32768

	)

25 
	s_HTSåóm
 {

26 c⁄° 
HTSåómCœss
 * 
	miß
;

27 
	m°©e
;

28 
HTReque°
 * 
	mªque°
;

29 
HTSåóm
 * 
	mèrgë
;

30 
z_°ªam
 * 
	mz°ªam
;

31 
	moutbuf
 [
OUTBUF_SIZE
];

34 
PRIVATE
 
	gCom¥essi⁄Levñ
 = 
Z_DEFAULT_COMPRESSION
;

38 
PRIVATE
 
BOOL
 
	$Zlib_öô
 (
HTSåóm
 * 
me
, 
Àvñ
)

40 i‡(
me
 && me->
z°ªam
 &&

41 (
Àvñ
 =
Z_DEFAULT_COMPRESSION
 ||

42 (
Àvñ
 >
Z_BEST_SPEED
 &&Üevñ <
Z_BEST_COMPRESSION
))) {

43 
°©us
;

44 
	`HTTRACE
(
STREAM_TRACE
, "Zlib InÊ©êInô såóm %∞wôh com¥essi⁄Üevñ %d\n" 
_
 
me
 _ 
Àvñ
);

45 i‡((
°©us
 = 
	`öÊ©eInô
(
me
->
z°ªam
)Ë!
Z_OK
) {

46 
	`HTTRACE
(
STREAM_TRACE
, "Zlib........ Faûed wôh sètu†%d\n" 
_
 
°©us
);

47  
NO
;

49  
YES
;

51  
NO
;

52 
	}
}

54 
PRIVATE
 
BOOL
 
	$ZLib_ãrmö©e
 (
HTSåóm
 * 
me
)

56 
	`HTTRACE
(
STREAM_TRACE
, "Zlib InÊ©êTîmö©ög såóm %p\n" 
_
 
me
);

57 i‡(
me
) {

58 
°©us
;

59 
	`HTTRACE
(
STREAM_TRACE
, "Resu…s..... InÊ©ed incomög d©a: deÊ©ed %lu, inÊ©ed %lu, fa˘‹ %.2f\n" 
_


60 
me
->
z°ªam
->
tŸÆ_ö
 
_
 me->z°ªam->
tŸÆ_out
 _

61 
me
->
z°ªam
->
tŸÆ_ö
 == 0 ? 0.0 :

62 (Ë
me
->
z°ªam
->
tŸÆ_out
 / me->z°ªam->
tŸÆ_ö
);

63 i‡((
°©us
 = 
	`öÊ©eEnd
(
me
->
z°ªam
)Ë!
Z_OK
) {

64 
	`HTTRACE
(
STREAM_TRACE
, "Zlib........ Faûed wôh sètu†%d\n" 
_
 
°©us
);

65  
NO
;

67  
YES
;

69  
NO
;

70 
	}
}

72 
PRIVATE
 
	$HTZLibInÊ©e_Êush
 (
HTSåóm
 * 
me
)

74  (*
me
->
èrgë
->
iß
->
Êush
)(me->target);

75 
	}
}

77 
PRIVATE
 
	$HTZLibInÊ©e_‰ì
 (
HTSåóm
 * 
me
)

79 
°©us
 = 
HT_OK
;

80 
	`ZLib_ãrmö©e
(
me
);

81 i‡((
°©us
 = (*
me
->
èrgë
->
iß
->
_‰ì
)(me->èrgë)Ë=
HT_WOULD_BLOCK
)

82  
HT_WOULD_BLOCK
;

83 
	`HTTRACE
(
STREAM_TRACE
, "Zlib Inflate FREEING...\n");

84 
	`HT_FREE
(
me
->
z°ªam
);

85 
	`HT_FREE
(
me
);

86  
°©us
;

87 
	}
}

89 
PRIVATE
 
	$HTZLibInÊ©e_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

91 
	`HTTRACE
(
STREAM_TRACE
, "Zlib Inflate ABORTING...\n");

92 
	`ZLib_ãrmö©e
(
me
);

93 (*
me
->
èrgë
->
iß
->
ab‹t
)(me->èrgë, 
NULL
);

94 
	`HT_FREE
(
me
->
z°ªam
);

95 
	`HT_FREE
(
me
);

96  
HT_ERROR
;

97 
	}
}

99 
PRIVATE
 
	$HTZLibInÊ©e_wrôe
 (
HTSåóm
 * 
me
, c⁄° * 
buf
, 
Àn
)

101 i‡(
me
->
°©e
 !
HT_OK
) {

102 
me
->
°©e
 = (*me->
èrgë
->
iß
->
put_block
)(me->target,

103 
me
->
outbuf
,

104 
OUTBUF_SIZE
 - 
me
->
z°ªam
->
avaû_out
);

105 i‡(
me
->
°©e
 !
HT_OK
)  me->state;

111 
me
->
z°ªam
->
√xt_ö
 = (*Ë
buf
;

112 
me
->
z°ªam
->
avaû_ö
 = 
Àn
;

113 
me
->
z°ªam
->
√xt_out
 = (*Ëme->
outbuf
;

114 
me
->
z°ªam
->
avaû_out
 = 
OUTBUF_SIZE
;

122 
°©us
 = 
	`öÊ©e
(
me
->
z°ªam
, 
Z_PARTIAL_FLUSH
);

123 
°©us
) {

124 
Z_OK
:

125 
me
->
°©e
 = (*me->
èrgë
->
iß
->
put_block
)(me->target,

126 
me
->
outbuf
,

127 
OUTBUF_SIZE
 - 
me
->
z°ªam
->
avaû_out
);

128 i‡(
me
->
°©e
 !
HT_OK
)  me->state;

134 
me
->
z°ªam
->
√xt_out
 = (*Ëme->
outbuf
;

135 
me
->
z°ªam
->
avaû_out
 = 
OUTBUF_SIZE
;

138 
Z_MEM_ERROR
:

139 
	`HT_OUTOFMEM
("HTZLibInflate_write");

140  
HT_ERROR
;

142 
Z_BUF_ERROR
:

147  
HT_OK
;

149 
Z_STREAM_END
:

150 
me
->
°©e
 = (*me->
èrgë
->
iß
->
put_block
)(me->target,

151 
me
->
outbuf
,

152 
OUTBUF_SIZE
 - 
me
->
z°ªam
->
avaû_out
);

153 i‡(
me
->
°©e
 !
HT_OK
)  me->state;

155 
	`HTTRACE
(
STREAM_TRACE
, "Zlib Inflate End of Stream\n");

156  
HT_OK
;

159 
	`HTTRACE
(
STREAM_TRACE
, "Zlib InÊ©êInÊ©êªtu∫ed %d\n" 
_
 
°©us
);

160  
HT_ERROR
;

163  
HT_OK
;

164 
	}
}

166 
PRIVATE
 
	$HTZLibInÊ©e_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

168  
	`HTZLibInÊ©e_wrôe
(
me
, &
c
, 1);

169 
	}
}

171 
PRIVATE
 
	$HTZLibInÊ©e_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

173  
	`HTZLibInÊ©e_wrôe
(
me
, 
s
, (Ë
	`°æí
(s));

174 
	}
}

176 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gHTInÊ©e
 =

179 
HTZLibInÊ©e_Êush
,

180 
HTZLibInÊ©e_‰ì
,

181 
HTZLibInÊ©e_ab‹t
,

182 
HTZLibInÊ©e_put_ch¨a˘î
,

183 
HTZLibInÊ©e_put_°rög
,

184 
HTZLibInÊ©e_wrôe


187 
PUBLIC
 
BOOL
 
	$HTZLib_£tCom¥essi⁄Levñ
 (
Àvñ
)

189 i‡(
Àvñ
 >
Z_BEST_SPEED
 &&Üevñ <
Z_BEST_COMPRESSION
) {

190 
Com¥essi⁄Levñ
 = 
Àvñ
;

191 
	`HTTRACE
(
STREAM_TRACE
, "Zlib........ Com¥essi⁄Üevñ sëÅÿ%d\n" 
_
 
Àvñ
);

193  
NO
;

194 
	}
}

196 
PUBLIC
 
	$HTZLib_com¥essi⁄Levñ
 ()

198  
Com¥essi⁄Levñ
;

199 
	}
}

201 
PUBLIC
 
HTSåóm
 * 
	$HTZLib_öÊ©e
 (
HTReque°
 * 
ªque°
,

202 * 
∑øm
,

203 
HTEncodög
 
codög
,

204 
HTSåóm
 * 
èrgë
)

206 
HTSåóm
 * 
me
 = 
NULL
;

207 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
 ||

208 (
me
->
z°ªam
 = (
z_°ªam
 *Ë
	`HT_CALLOC
(1, (z_°ªam))Ë=
NULL
)

209 
	`HT_OUTOFMEM
("HTZLib_inflate");

210 
me
->
iß
 = &
HTInÊ©e
;

211 
me
->
°©e
 = 
HT_OK
;

212 
me
->
ªque°
 =Ñequest;

213 
me
->
èrgë
 =Å¨gë ?Å¨gë : 
	`HTEº‹Såóm
();

214 i‡(
	`Zlib_öô
(
me
, 
Com¥essi⁄Levñ
Ë!
YES
) {

215 
	`HT_FREE
(
me
);

216  
	`HTEº‹Såóm
();

218 
	`HTTRACE
(
STREAM_TRACE
, "Zlib Inflate Stream created\n");

219  
me
;

220 
	}
}

	@Library/src/HTZip.h

26 #i‚de‡
HTZIP_H


27 
	#HTZIP_H


	)

29 
	~"HTF‹m©.h
"

34 #ifde‡
HT_ZLIB


35 
HTCodî
 
HTZLib_öÊ©e
;

	@Library/src/HText.c

13 
	~"wwwsys.h
"

14 
	~"WWWUtû.h
"

15 
	~"WWWC‹e.h
"

16 
	~"HText.h
"

17 
	~"HTextImp.h
"

20 
PRIVATE
 
HText_√w
 * 
	gãxt_√w
;

21 
PRIVATE
 
HText_dñëe
 * 
	gãxt_dñëe
;

22 
PRIVATE
 
HText_buûd
 * 
	gãxt_buûd
;

23 
PRIVATE
 
HText_addText
 * 
	gãxt_addText
;

24 
PRIVATE
 
HText_foundLök
 * 
	gãxt_foundLök
;

25 
PRIVATE
 
HText_begöEÀmít
 * 
	gãxt_begöEÀmít
;

26 
PRIVATE
 
HText_ídEÀmít
 * 
	gãxt_ídEÀmít
;

27 
PRIVATE
 
HText_u≈¨£dBegöEÀmít
 * 
	gãxt_u≈¨£dBegöEÀmít
;

28 
PRIVATE
 
HText_u≈¨£dEndEÀmít
 * 
	gãxt_u≈¨£dEndEÀmít
;

29 
PRIVATE
 
HText_u≈¨£dE¡ôy
 * 
	gãxt_u≈¨£dE¡ôy
;

32 
	s_HTextImp
 {

33 
HText
 * 
	m≠p
;

34 
HText_√w
 * 
	mãxt_√w
;

35 
HText_dñëe
 * 
	mãxt_dñëe
;

36 
HText_buûd
 * 
	mãxt_buûd
;

37 
HText_addText
 * 
	mãxt_addText
;

38 
HText_foundLök
 * 
	mãxt_foundLök
;

39 
HText_begöEÀmít
 * 
	mãxt_begöEÀmít
;

40 
HText_ídEÀmít
 * 
	mãxt_ídEÀmít
;

41 
HText_u≈¨£dBegöEÀmít
 *
	mãxt_u≈¨£dBegöEÀmít
;

42 
HText_u≈¨£dEndEÀmít
 * 
	mãxt_u≈¨£dEndEÀmít
;

43 
HText_u≈¨£dE¡ôy
 * 
	mãxt_u≈¨£dE¡ôy
;

48 
PUBLIC
 
HTextImp
 * 
	$HTextImp_√w
 (
HTReque°
 * 
ªque°
,

49 
HTP¨ítAnch‹
 * 
™ch‹
,

50 
HTSåóm
 * 
ouçut_°ªam
)

52 
HTextImp
 * 
me
 = 
NULL
;

53 i‡((
me
 = (
HTextImp
 *Ë
	`HT_CALLOC
(1,  (HTextImp))Ë=
NULL
)

54 
	`HT_OUTOFMEM
("HTextImp_new");

55 
me
->
ãxt_√w
 =Åext_new;

56 
me
->
ãxt_dñëe
 =Åext_delete;

57 
me
->
ãxt_buûd
 =Åext_build;

58 
me
->
ãxt_addText
 =Åext_addText;

59 
me
->
ãxt_foundLök
 =Åext_foundLink;

60 
me
->
ãxt_begöEÀmít
 =Åext_beginElement;

61 
me
->
ãxt_ídEÀmít
 =Åext_endElement;

62 
me
->
ãxt_u≈¨£dBegöEÀmít
 =Åext_unparsedBeginElement;

63 
me
->
ãxt_u≈¨£dEndEÀmít
 =Åext_unparsedEndElement;

64 
me
->
ãxt_u≈¨£dE¡ôy
 =Åext_unparsedEntity;

65 i‡(
me
->
ãxt_√w
Ëme->
≠p
 = (*me->ãxt_√w)(
ªque°
, 
™ch‹
, 
ouçut_°ªam
);

66  
me
;

67 
	}
}

69 
PUBLIC
 
BOOL
 
	$HTextImp_dñëe
 (
HTextImp
 * 
me
)

71 i‡(
me
) {

79 
	`HT_FREE
(
me
);

80  
YES
;

82  
NO
;

83 
	}
}

85 
PUBLIC
 
	$HTextImp_buûd
 (
HTextImp
 * 
me
, 
HTextSètus
 
°©us
)

87 i‡(
me
 && me->
ãxt_buûd
)

88 (*
me
->
ãxt_buûd
)(me->
≠p
, 
°©us
);

89 
	}
}

91 
PUBLIC
 
	$HTextImp_addText
 (
HTextImp
 * 
me
,

92 c⁄° * 
buf„r
,

93 
Àngth
)

95 i‡(
me
 && me->
ãxt_addText
)

96 (*
me
->
ãxt_addText
)(me->
≠p
, 
buf„r
, 
Àngth
);

97 
	}
}

99 
PUBLIC
 
	$HTextImp_foundLök
 (
HTextImp
 * 
me
,

100 
ñemít_numbî
,

101 
©åibuã_numbî
,

102 
HTChûdAnch‹
 *
™ch‹
,

103 c⁄° 
BOOL
 * 
¥e£¡
,

104 c⁄° ** 
vÆue
)

106 i‡(
me
 && me->
ãxt_foundLök
)

107 (*
me
->
ãxt_foundLök
)(me->
≠p
, 
ñemít_numbî
, 
©åibuã_numbî
,

108 
™ch‹
, 
¥e£¡
, 
vÆue
);

109 
	}
}

111 
PUBLIC
 
	$HTextImp_begöEÀmít
 (
HTextImp
 * 
me
,

112 
ñemít_numbî
,

113 c⁄° 
BOOL
 * 
¥e£¡
,

114 c⁄° **
vÆue
)

116 i‡(
me
 && me->
ãxt_begöEÀmít
)

117 (*
me
->
ãxt_begöEÀmít
)(me->
≠p
, 
ñemít_numbî
, 
¥e£¡
, 
vÆue
);

118 
	}
}

120 
PUBLIC
 
	$HTextImp_ídEÀmít
 (
HTextImp
 * 
me
,

121 
ñemít_numbî
)

123 i‡(
me
 && me->
ãxt_ídEÀmít
)

124 (*
me
->
ãxt_ídEÀmít
)(me->
≠p
, 
ñemít_numbî
);

125 
	}
}

127 
PUBLIC
 
	$HTextImp_u≈¨£dBegöEÀmít
 (
HTextImp
 * 
me
,

128 c⁄° * 
buf„r
,

129 
Àngth
)

131 i‡(
me
 && me->
ãxt_u≈¨£dBegöEÀmít
)

132 (*
me
->
ãxt_u≈¨£dBegöEÀmít
)(me->
≠p
, 
buf„r
, 
Àngth
);

133 
	}
}

135 
PUBLIC
 
	$HTextImp_u≈¨£dEndEÀmít
 (
HTextImp
 * 
me
,

136 c⁄° * 
buf„r
,

137 
Àngth
)

139 i‡(
me
 && me->
ãxt_u≈¨£dEndEÀmít
)

140 (*
me
->
ãxt_u≈¨£dEndEÀmít
)(me->
≠p
, 
buf„r
, 
Àngth
);

141 
	}
}

143 
PUBLIC
 
	$HTextImp_u≈¨£dE¡ôy
 (
HTextImp
 * 
me
,

144 c⁄° * 
buf„r
,

145 
Àngth
)

147 i‡(
me
 && me->
ãxt_u≈¨£dE¡ôy
)

148 (*
me
->
ãxt_u≈¨£dE¡ôy
)(me->
≠p
, 
buf„r
, 
Àngth
);

149 
	}
}

153 
PUBLIC
 
BOOL
 
	$HText_ªgi°îCDCÆlback
 (
HText_√w
 * 
ncb
,

154 
HText_dñëe
 * 
dcb
)

156 i‡(
ncb
 && 
dcb
) {

157 
ãxt_√w
 = 
ncb
;

158 
ãxt_dñëe
 = 
dcb
;

159  
YES
;

161  
NO
;

162 
	}
}

164 
PUBLIC
 
BOOL
 
	$HText_uƒegi°îCDCÆlback
 ()

166 
ãxt_√w
 = 
NULL
;

167 
ãxt_dñëe
 = 
NULL
;

168  
YES
;

169 
	}
}

171 
PUBLIC
 
BOOL
 
	$HText_ªgi°îBuûdCÆlback
 (
HText_buûd
 * 
bcb
)

173 
ãxt_buûd
 = 
bcb
;

174  
YES
;

175 
	}
}

177 
PUBLIC
 
BOOL
 
	$HText_ªgi°îTextCÆlback
 (
HText_addText
 * 
tcb
)

179 
ãxt_addText
 = 
tcb
;

180  
YES
;

181 
	}
}

183 
PUBLIC
 
BOOL
 
	$HText_uƒegi°îTextCÆlback
 ()

185 
ãxt_addText
 = 
NULL
;

186  
YES
;

187 
	}
}

189 
PUBLIC
 
BOOL
 
	$HText_ªgi°îLökCÆlback
 (
HText_foundLök
 * 
lcb
)

191 
ãxt_foundLök
 = 
lcb
;

192  
YES
;

193 
	}
}

195 
PUBLIC
 
BOOL
 
	$HText_uƒegi°îLökCÆlback
 ()

197 
ãxt_foundLök
 = 
NULL
;

198  
YES
;

199 
	}
}

201 
PUBLIC
 
BOOL
 
	$HText_ªgi°îEÀmítCÆlback
 (
HText_begöEÀmít
 * 
bcb
,

202 
HText_ídEÀmít
 * 
ecb
)

204 
ãxt_begöEÀmít
 = 
bcb
;

205 
ãxt_ídEÀmít
 = 
ecb
;

206  
YES
;

207 
	}
}

209 
PUBLIC
 
BOOL
 
	$HText_uƒegi°îEÀmítCÆlback
 ()

211 
ãxt_begöEÀmít
 = 
NULL
;

212  
YES
;

213 
	}
}

215 
PUBLIC
 
BOOL
 
	$HText_ªgi°îU≈¨£dEÀmítCÆlback
 (
HText_u≈¨£dBegöEÀmít
 * 
ubcb
,

216 
HText_u≈¨£dBegöEÀmít
 * 
uecb
)

218 
ãxt_u≈¨£dBegöEÀmít
 = 
ubcb
;

219 
ãxt_u≈¨£dEndEÀmít
 = 
uecb
;

220  
YES
;

221 
	}
}

223 
PUBLIC
 
BOOL
 
	$HText_uƒegi°îU≈¨£dEÀmítCÆlback
 ()

225 
ãxt_u≈¨£dBegöEÀmít
 = 
NULL
;

226 
ãxt_u≈¨£dEndEÀmít
 = 
NULL
;

227  
YES
;

228 
	}
}

230 
PUBLIC
 
BOOL
 
	$HText_ªgi°îU≈¨£dE¡ôyCÆlback
 (
HText_u≈¨£dE¡ôy
 * 
tcb
)

232 
ãxt_u≈¨£dE¡ôy
 = 
tcb
;

233  
YES
;

234 
	}
}

236 
PUBLIC
 
BOOL
 
	$HText_uƒegi°îU≈¨£dE¡ôyCÆlback
 ()

238 
ãxt_u≈¨£dE¡ôy
 = 
NULL
;

239  
YES
;

240 
	}
}

	@Library/src/HText.h

49 #i‚de‡
HTEXT_H


50 
	#HTEXT_H


	)

52 
	~"HTAnch‹.h
"

53 
	~"HTSåóm.h
"

70 
_HText
 
	tHText
;

86 
HText
 * 
	tHText_√w
 (

87 
	tHTReque°
 * 
	tªque°
,

88 
	tHTP¨ítAnch‹
 * 
	t™ch‹
,

89 
	tHTSåóm
 * 
	touçut_°ªam
);

91 
BOOL
 
	tHText_dñëe
 (
	tHText
 * 
	tme
);

99 
BOOL
 
HText_ªgi°îCDCÆlback
 (
HText_√w
 *, 
HText_dñëe
 *);

100 
BOOL
 
HText_uƒegi°îCDCÆlback
 ();

114 
	e_HTextSètus
 {

115 
	mHTEXT_BEGIN
,

116 
	mHTEXT_END
,

117 
	mHTEXT_ABORT


118 } 
	tHTextSètus
;

120 
	tHText_buûd
 (
	tHText
 * 
	tãxt
, 
	tHTextSètus
 
	t°©us
);

128 
BOOL
 
HText_ªgi°îBuûdCÆlback
 (
HText_buûd
 *);

129 
BOOL
 
HText_uƒegi°îBuûdCÆlback
 ();

144 
	tHText_addText
 (

145 
	tHText
 * 
	tãxt
,

146 c⁄° * 
	tbuf„r
,

147 
	tÀngth
);

155 
BOOL
 
HText_ªgi°îTextCÆlback
 (
HText_addText
 *);

156 
BOOL
 
HText_uƒegi°îTextCÆlback
 ();

175 
	tHText_foundLök
 (

176 
	tHText
 * 
	tãxt
,

177 
	tñemít_numbî
,

178 
	t©åibuã_numbî
,

179 
	tHTChûdAnch‹
 * 
	t™ch‹
,

180 c⁄° 
	tBOOL
 * 
	t¥e£¡
,

181 c⁄° ** 
	tvÆue
);

189 
BOOL
 
HText_ªgi°îLökCÆlback
 (
HText_foundLök
 *);

190 
BOOL
 
HText_uƒegi°îLökCÆlback
 ();

208 
	tHText_begöEÀmít
 (

209 
	tHText
 * 
	tãxt
,

210 
	tñemít_numbî
,

211 c⁄° 
	tBOOL
 * 
	t¥e£¡
,

212 c⁄° ** 
	tvÆue
);

214 
	tHText_ídEÀmít
 (

215 
	tHText
 * 
	tãxt
,

216 
	tñemít_numbî
);

224 
BOOL
 
HText_ªgi°îEÀmítCÆlback
 (
HText_begöEÀmít
 *, 
HText_ídEÀmít
 *);

225 
BOOL
 
HText_uƒegi°îEÀmítCÆlback
 ();

236 
	tHText_u≈¨£dBegöEÀmít
 (

237 
	tHText
 * HText,

238 c⁄° * 
	tbuf„r
,

239 
	tÀngth
);

241 
	tHText_u≈¨£dEndEÀmít
 (

242 
	tHText
 * HText,

243 c⁄° * 
	tbuf„r
,

244 
	tÀngth
);

252 
BOOL
 
HText_ªgi°îU≈¨£dEÀmítCÆlback
 (

253 
HText_u≈¨£dBegöEÀmít
 *,

254 
HText_u≈¨£dEndEÀmít
 *);

255 
BOOL
 
HText_uƒegi°îU≈¨£dEÀmítCÆlback
 ();

266 
	tHText_u≈¨£dE¡ôy
 (

267 
	tHText
 * HText,

268 c⁄° * 
	tbuf„r
,

269 
	tÀngth
);

277 
BOOL
 
HText_ªgi°îU≈¨£dE¡ôyCÆlback
 (
HText_u≈¨£dE¡ôy
 *);

278 
BOOL
 
HText_uƒegi°îU≈¨£dE¡ôyCÆlback
 ();

	@Library/src/HTextImp.h

20 #i‚de‡
HTEXTIMP_H


21 
	#HTEXTIMP_H


	)

23 
	~"HTReq.h
"

24 
	~"HTAnch‹.h
"

25 
	~"HText.h
"

30 
_HTextImp
 
	tHTextImp
;

32 
HTextImp
 * 
HTextImp_√w
 (

33 
HTReque°
 * 
ªque°
,

34 
HTP¨ítAnch‹
 *
™ch‹
,

35 
HTSåóm
 * 
ouçut_°ªam
);

37 
BOOL
 
HTextImp_dñëe
 (

38 
HTextImp
 * 
me
);

40 
HTextImp_buûd
 (

41 
HTextImp
 * 
ãxt
,

42 
HTextSètus
 
°©us
);

44 
HTextImp_addText
 (

45 
HTextImp
 * 
me
,

46 c⁄° * 
buf„r
,

47 
Àngth
);

49 
HTextImp_foundLök
 (

50 
HTextImp
 * 
me
,

51 
ñemít_numbî
,

52 
©åibuã_numbî
,

53 
HTChûdAnch‹
 * 
™ch‹
,

54 c⁄° 
BOOL
 * 
¥e£¡
,

55 c⁄° ** 
vÆue
);

57 
HTextImp_begöEÀmít
 (

58 
HTextImp
 * 
me
,

59 
ñemít_numbî
,

60 c⁄° 
BOOL
 * 
¥e£¡
,

61 c⁄° ** 
vÆue
);

63 
HTextImp_ídEÀmít
 (

64 
HTextImp
 * 
me
,

65 
ñemít_numbî
);

67 
HTextImp_u≈¨£dBegöEÀmít
 (

68 
HTextImp
 * 
me
,

69 c⁄° * 
buf„r
,

70 
Àngth
);

72 
HTextImp_u≈¨£dEndEÀmít
 (

73 
HTextImp
 * 
me
,

74 c⁄° * 
buf„r
,

75 
Àngth
);

77 
HTextImp_u≈¨£dE¡ôy
 (

78 
HTextImp
 * 
me
,

79 c⁄° * 
buf„r
,

80 
Àngth
);

	@Library/src/SGML.c

20 
	~<as£π.h
>

23 
	~"wwwsys.h
"

24 
	~"HTUtûs.h
"

25 
	~"HTSåög.h
"

26 
	~"HTChunk.h
"

27 
	~"SGML.h
"

29 
	#INVALID
 (-1)

	)

36 
	e_sgml_°©e


38 
	mS_ãxt
, 
	mS_lôîÆ
, 
	mS_èg
, 
	mS_èg_g≠
,

39 
	mS_©å
, 
	mS_©å_g≠
, 
	mS_equÆs
, 
	mS_vÆue
, 
	mS_a·î_›í
,

40 
	mS_∆
, 
	mS_∆_ègo
,

41 
	mS_îo
, 
	mS_¸o
,

42 #ifde‡
ISO_2022_JP


43 
	mS_esc
, 
	mS_dﬁœr
, 
	mS_∑ªn
, 
	mS_n⁄ascii_ãxt
,

45 
	mS_squŸed
, 
	mS_dquŸed
, 
	mS_íd
, 
	mS_ítôy
, 
	mS_junk_èg
,

46 
	mS_md
, 
	mS_md_sqs
, 
	mS_md_dqs
, 
	mS_com_1
, 
	mS_com
, 
	mS_com_2
, 
	mS_com_2a


47 } 
	tsgml_°©e
;

53 
	s_HTSåóm


55 c⁄° 
HTSåómCœss
 *
	miß
;

56 c⁄° 
SGML_dtd
 *
	mdtd
;

57 
HTSåu˘uªdCœss
 *
	ma˘i⁄s
;

58 
HTSåu˘uªd
 *
	mèrgë
;

60 
HTTag
 *
	mcuºít_èg
;

61 
	mcuºít_©åibuã_numbî
;

62 
SGMLC⁄ã¡
 
	mc⁄ã¡s
;

63 
HTChunk
 *
	m°rög
;

64 
	mtokí
;

65 
sgml_°©e
 
	m°©e
;

66 
BOOL
 
	m¥e£¡
[
MAX_ATTRIBUTES
];

67 
	mvÆue
[
MAX_ATTRIBUTES
];

71 
	#PUTC
(
ch
Ë((*
c⁄ãxt
->
a˘i⁄s
->
put_ch¨a˘î
)(c⁄ãxt->
èrgë
, ch))

	)

72 
	#PUTB
(
b
,
l
Ë((*
c⁄ãxt
->
a˘i⁄s
->
put_block
)(c⁄ãxt->
èrgë
, b,Ü))

	)

77 
PRIVATE
 
	$SGMLFödAâribuã
 (
HTTag
* 
èg
, c⁄° * 
s
)

79 
HTAâr
* 
©åibuãs
 = 
èg
->attributes;

81 
high
, 
low
, 
i
, 
diff
;

83 
	`as£π
(
èg
->
numbî_of_©åibuãs
 <
MAX_ATTRIBUTES
);

85 
low
=0, 
high
=
èg
->
numbî_of_©åibuãs
;

86 
high
 > 
low
 ;

87 
diff
 < 0 ? (
low
 = 
i
+1Ë: (
high
 = i) )

89 
i
 = (
low
 + (
high
-low)/2);

90 
diff
 = 
	`°rˇ£comp
(
©åibuãs
[
i
].
«me
, 
s
);

91 i‡(
diff
==0)

92  
i
;

95 
	}
}

103 
PRIVATE
 
	$h™dÀ_©åibuã_«me
 (
HTSåóm
 * 
c⁄ãxt
, c⁄° * 
s
)

105 
HTTag
 * 
èg
 = 
c⁄ãxt
->
cuºít_èg
;

108 i‡(
èg
)

110 
i
 = 
	`SGMLFödAâribuã
(
èg
, 
s
);

111 i‡(
i
 >= 0)

113 
c⁄ãxt
->
cuºít_©åibuã_numbî
 = 
i
;

114 
c⁄ãxt
->
¥e£¡
[
i
] = 
YES
;

117 
	`HTTRACE
(
SGML_TRACE
, "Unknow¿©åibuã %†f‹Åag %s\n" 
_


118 
s
 
_
 
c⁄ãxt
->
cuºít_èg
->
«me
);

120 
c⁄ãxt
->
cuºít_©åibuã_numbî
 = 
INVALID
;

121 
	}
}

127 
PRIVATE
 
	$h™dÀ_©åibuã_vÆue
 (
HTSåóm
 * 
c⁄ãxt
)

132 i‡(
c⁄ãxt
->
cuºít_èg
)

134 i‡(
c⁄ãxt
->
cuºít_©åibuã_numbî
 !
INVALID
)

135 
c⁄ãxt
->
vÆue
[c⁄ãxt->
cuºít_©åibuã_numbî
] =

136 
c⁄ãxt
->
tokí
;

138 * 
d©a
 = 
	`HTChunk_d©a
(
c⁄ãxt
->
°rög
);

139 
	`HTTRACE
(
SGML_TRACE
, "Aâribuã vÆuê%†ign‹ed\n" 
_


140 
d©a
 ? d©a+
c⁄ãxt
->
tokí
 : "<null>");

143 
c⁄ãxt
->
cuºít_©åibuã_numbî
 = 
INVALID
;

144 
	}
}

152 
PRIVATE
 
	$h™dÀ_ítôy
 (
HTSåóm
 * 
c⁄ãxt
)

154 c⁄° ** 
ítôõs
 = 
c⁄ãxt
->
dtd
->
ítôy_«mes
;

155 c⁄° *
s
 = 
	`HTChunk_d©a
(
c⁄ãxt
->
°rög
);

157 
high
, 
low
, 
i
, 
diff
;

158 
low
=0, 
high
 = 
c⁄ãxt
->
dtd
->
numbî_of_ítôõs
;

159 
high
 > 
low
 ;

160 
diff
 < 0 ? (
low
 = 
i
+1Ë: (
high
 = i))

162 
i
 = (
low
 + (
high
-low)/2);

163 
diff
 = 
	`°rcmp
(
ítôõs
[
i
], 
s
);

164 i‡(
diff
==0)

166 (*
c⁄ãxt
->
a˘i⁄s
->
put_ítôy
)(c⁄ãxt->
èrgë
, 
i
);

172 
	`HTTRACE
(
SGML_TRACE
, "Unknow¿ítôy %s\n" 
_
 
s
);

173 (*
c⁄ãxt
->
a˘i⁄s
->
u≈¨£d_ítôy
)

174 (
c⁄ãxt
->
èrgë
, 
	`HTChunk_d©a
(c⁄ãxt->
°rög
), 
	`HTChunk_size
(context->string));

175 
	}
}

180 
PRIVATE
 
	$íd_ñemít
 (
HTSåóm
 * 
c⁄ãxt
, 
HTTag
 *
èg
)

182 
	`HTTRACE
(
SGML_TRACE
, "End </%s>\n" 
_
 
èg
->
«me
);

183 (*
c⁄ãxt
->
a˘i⁄s
->
íd_ñemít
)

184 (
c⁄ãxt
->
èrgë
, 
èg
 - c⁄ãxt->
dtd
->
ègs
);

185 
	}
}

190 
PRIVATE
 
	$°¨t_ñemít
 (
HTSåóm
 * 
c⁄ãxt
)

192 
i
;

193 *
vÆue
[
MAX_ATTRIBUTES
];

194 
HTTag
 *
èg
 = 
c⁄ãxt
->
cuºít_èg
;

196 
	`HTTRACE
(
SGML_TRACE
, "Sèπ <%s>\n" 
_
 
èg
->
«me
);

197 
c⁄ãxt
->
c⁄ã¡s
 = 
èg
->contents;

205 
i
 = 0; i < 
MAX_ATTRIBUTES
; ++i)

206 
vÆue
[
i
] = 
c⁄ãxt
->vÆue[i] < 0 ? 
NULL
 :

207 
	`HTChunk_d©a
(
c⁄ãxt
->
°rög
Ë+ c⁄ãxt->
vÆue
[
i
];

208 (*
c⁄ãxt
->
a˘i⁄s
->
°¨t_ñemít
)

209 (
c⁄ãxt
->
èrgë
,

210 
èg
 - 
c⁄ãxt
->
dtd
->
ègs
,

211 
c⁄ãxt
->
¥e£¡
,

212 (c⁄° **)
vÆue
);

213 
	}
}

228 
PRIVATE
 
HTTag
 * 
	$SGMLFödTag
 (c⁄° 
SGML_dtd
* 
dtd
, c⁄° * 
°rög
)

230 
high
, 
low
, 
i
, 
diff
;

231 
low
=0, 
high
=
dtd
->
numbî_of_ègs
;

232 
high
 > 
low
 ;

233 
diff
 < 0 ? (
low
 = 
i
+1Ë: (
high
 = i))

235 
i
 = (
low
 + (
high
-low)/2);

236 
diff
 = 
	`°rˇ£comp
(
dtd
->
ègs
[
i
].
«me
, 
°rög
);

237 i‡(
diff
==0)

239  &
dtd
->
ègs
[
i
];

241  
NULL
;

242 
	}
}

250 
PRIVATE
 
	$SGML_Êush
 (
HTSåóm
 * 
c⁄ãxt
)

252  (*
c⁄ãxt
->
a˘i⁄s
->
Êush
)(c⁄ãxt->
èrgë
);

253 
	}
}

255 
PRIVATE
 
	$SGML_‰ì
 (
HTSåóm
 * 
c⁄ãxt
)

257 
°©us
;

259 i‡((
°©us
 = (*
c⁄ãxt
->
a˘i⁄s
->
_‰ì
)(c⁄ãxt->
èrgë
)Ë!
HT_OK
)

260  
°©us
;

261 
	`HTChunk_dñëe
(
c⁄ãxt
->
°rög
);

262 
	`HT_FREE
(
c⁄ãxt
);

263  
HT_OK
;

264 
	}
}

266 
PRIVATE
 
	$SGML_ab‹t
 (
HTSåóm
 * 
c⁄ãxt
, 
HTLi°
 * 
e
)

268 (*
c⁄ãxt
->
a˘i⁄s
->
ab‹t
)(c⁄ãxt->
èrgë
, 
e
);

269 
	`HTChunk_dñëe
(
c⁄ãxt
->
°rög
);

270 
	`HT_FREE
(
c⁄ãxt
);

271  
HT_ERROR
;

272 
	}
}

274 
PRIVATE
 
	$SGML_wrôe
 (
HTSåóm
 * 
c⁄ãxt
, c⁄° * 
b
, 
l
)

276 c⁄° 
SGML_dtd
 *
dtd
 = 
c⁄ãxt
->dtd;

277 
HTChunk
 *
°rög
 = 
c⁄ãxt
->string;

278 c⁄° *
ãxt
 = 
b
;

279 
cou¡
 = 0;

281 
l
-- > 0)

283 
c
 = *
b
++;

284 
c⁄ãxt
->
°©e
)

286 
gŸ_ñemít_›í
:

294 i‡(
c⁄ãxt
->
cuºít_èg
 && c⁄ãxt->cuºít_èg->
«me
)

295 
	`°¨t_ñemít
(
c⁄ãxt
);

296 
c⁄ãxt
->
°©e
 = 
S_a·î_›í
;

299 
S_a·î_›í
:

306 
ãxt
 = 
b
;

307 
cou¡
 = 0;

308 i‡(
c
 ='\n' && (
c⁄ãxt
->
c⁄ã¡s
 !
SGML_EMPTY
))

310 
c⁄ãxt
->
°©e
 = 
S_ãxt
;

313 --
ãxt
;

314 
S_ãxt
;

316 
S_ãxt
:

317 
c⁄ãxt
->
°©e
 = 
S_ãxt
;

318 
S_ãxt
:

319 #ifde‡
ISO_2022_JP


320 i‡(
c
 == '\033')

322 
c⁄ãxt
->
°©e
 = 
S_esc
;

323 ++
cou¡
;

327 i‡(
c
 == '&')

329 i‡(
cou¡
 > 0)

330 
	`PUTB
(
ãxt
, 
cou¡
);

331 
cou¡
 = 0;

332 
	`HTChunk_˛ór
(
°rög
);

333 
c⁄ãxt
->
°©e
 = 
S_îo
;

335 i‡(
c
 == '<')

337 i‡(
cou¡
 > 0)

338 
	`PUTB
(
ãxt
, 
cou¡
);

339 
cou¡
 = 0;

340 
	`HTChunk_˛ór
(
°rög
);

343 
c⁄ãxt
->
°©e
 =

344 (
c⁄ãxt
->
c⁄ã¡s
 =
SGML_LITERAL
) ?

345 
S_lôîÆ
 : 
S_èg
;

347 i‡(
c
 == '\n')

349 
c⁄ãxt
->
°©e
 = 
S_∆
;

351 ++
cou¡
;

354 
S_∆
:

355 i‡(
c
 == '<')

357 i‡(
cou¡
 > 0)

358 
	`PUTB
(
ãxt
, 
cou¡
);

359 
cou¡
 = 0;

360 
	`HTChunk_˛ór
(
°rög
);

361 
c⁄ãxt
->
°©e
 =

362 (
c⁄ãxt
->
c⁄ã¡s
 =
SGML_LITERAL
) ?

363 
S_lôîÆ
 : 
S_∆_ègo
;

367 ++
cou¡
;

368 
S_ãxt
;

372 
S_∆_ègo
:

373 i‡(
c
 != '/')

374 
	`PUTC
('\n');

375 
c⁄ãxt
->
°©e
 = 
S_èg
;

376 
h™dÀ_S_èg
;

378 #ifde‡
ISO_2022_JP


379 
S_esc
:

380 i‡(
c
=='$')

381 
c⁄ãxt
->
°©e
 = 
S_dﬁœr
;

382 i‡(
c
=='(')

383 
c⁄ãxt
->
°©e
 = 
S_∑ªn
;

385 
c⁄ãxt
->
°©e
 = 
S_ãxt
;

386 ++
cou¡
;

389 
S_dﬁœr
:

390 i‡(
c
=='@' || c=='B')

391 
c⁄ãxt
->
°©e
 = 
S_n⁄ascii_ãxt
;

393 
c⁄ãxt
->
°©e
 = 
S_ãxt
;

394 ++
cou¡
;

397 
S_∑ªn
:

398 i‡(
c
=='B' || c=='J')

399 
c⁄ãxt
->
°©e
 = 
S_ãxt
;

401 
c⁄ãxt
->
°©e
 = 
S_ãxt
;

402 ++
cou¡
;

405 
S_n⁄ascii_ãxt
:

406 i‡(
c
 == '\033')

407 
c⁄ãxt
->
°©e
 = 
S_esc
;

408 ++
cou¡
;

415 
S_lôîÆ
:

416 
	`HTChunk_putc
(
°rög
, 
c
);

417 i‡–
	`TOUPPER
(
c
) !=

418 ((
	`HTChunk_size
(
°rög
) == 1) ? '/'

419 : 
c⁄ãxt
->
cuºít_èg
->
«me
[
	`HTChunk_size
(
°rög
)-2]))

423 i‡((
c
 == '>') &&

424 (!
c⁄ãxt
->
cuºít_èg
->
«me
[
	`HTChunk_size
(
°rög
)-2]))

426 
íd_ñemít


427 (
c⁄ãxt
,c⁄ãxt->
cuºít_èg
);

433 
c⁄ãxt
->
c⁄ã¡s
 = 
SGML_MIXED
;

438 
	`PUTC
( '<');

439 
	`PUTB
(
	`HTChunk_d©a
(
°rög
), 
	`HTChunk_size
(string));

441 
c⁄ãxt
->
°©e
 = 
S_ãxt
;

442 
ãxt
 = 
b
;

443 
cou¡
 = 0;

450 
S_îo
:

451 i‡(
c
 == '#')

454 
c⁄ãxt
->
°©e
 = 
S_¸o
;

457 
c⁄ãxt
->
°©e
 = 
S_ítôy
;

464 
S_ítôy
:

465 i‡(
	`iß um
((Ë
c
))

466 
	`HTChunk_putc
(
°rög
, 
c
);

469 
	`HTChunk_ãrmö©e
(
°rög
);

470 
	`h™dÀ_ítôy
(
c⁄ãxt
);

471 
ãxt
 = 
b
;

472 
cou¡
 = 0;

473 i‡(
c
 != ';')

475 --
ãxt
;

476 
S_ãxt
;

478 
c⁄ãxt
->
°©e
 = 
S_ãxt
;

484 
S_¸o
:

485 i‡(
	`iß um
(()
c
))

487 
	`HTChunk_putc
(
°rög
, 
c
);

490 
vÆue
;

491 
	`HTChunk_ãrmö©e
(
°rög
);

492 i‡(
	`ssˇnf
(
	`HTChunk_d©a
(
°rög
), "%d", &
vÆue
)==1)

493 
	`PUTC
(()
vÆue
);

496 
	`PUTB
("&#", 2);

497 
	`PUTB
(
	`HTChunk_d©a
(
°rög
), 
	`HTChunk_size
(string)-1);

499 
ãxt
 = 
b
;

500 
cou¡
 = 0;

501 i‡(
c
 != ';')

503 --
ãxt
;

504 
S_ãxt
;

506 
c⁄ãxt
->
°©e
 = 
S_ãxt
;

510 
S_èg
:

511 
h™dÀ_S_èg
:

512 i‡(
	`iß um
(()
c
))

513 
	`HTChunk_putc
(
°rög
, 
c
);

515 
i
;

516 i‡(
c
 == '/') {

517 i‡(
	`HTChunk_size
(
°rög
) > 0)

518 
	`HTTRACE
(
SGML_TRACE
, "`<%s/' found!\n" 
_
 
	`HTChunk_d©a
(
°rög
));

519 
c⁄ãxt
->
°©e
 = 
S_íd
;

521 } i‡(
c
 == '!') {

522 i‡(
	`HTChunk_size
(
°rög
) > 0)

523 
	`HTTRACE
(
SGML_TRACE
, " `<%s!' found!\n" 
_
 
	`HTChunk_d©a
(
°rög
));

524 
c⁄ãxt
->
°©e
 = 
S_md
;

527 
	`HTChunk_ãrmö©e
(
°rög
);

528 
c⁄ãxt
->
cuºít_èg
 = 
	`SGMLFödTag
(
dtd
, 
	`HTChunk_d©a
(
°rög
));

529 i‡(
c⁄ãxt
->
cuºít_èg
 =
NULL
) {

530 
	`HTTRACE
(
SGML_TRACE
, "*** Unknow¿ñemíà%s\n" 
_
 
	`HTChunk_d©a
(
°rög
));

531 (*
c⁄ãxt
->
a˘i⁄s
->
u≈¨£d_begö_ñemít
)

532 (
c⁄ãxt
->
èrgë
, 
	`HTChunk_d©a
(
°rög
), 
	`HTChunk_size
(string));

534 
i
=0; i<
c⁄ãxt
->
cuºít_èg
->
numbî_of_©åibuãs
; i++) {

535 
c⁄ãxt
->
¥e£¡
[
i
] = 
NO
;

536 
c⁄ãxt
->
vÆue
[
i
] = -1;

539 
c⁄ãxt
->
tokí
 = 0;

540 
	`HTChunk_˛ór
(
°rög
);

541 
c⁄ãxt
->
cuºít_©åibuã_numbî
 = 
INVALID
;

542 
S_èg_g≠
;

546 
S_èg_g≠
:

547 
c⁄ãxt
->
°©e
 = 
S_èg_g≠
;

548 
S_èg_g≠
:

549 i‡(
	`is•a˚
((Ë
c
))

552 i‡(
c
 == '>')

553 
gŸ_ñemít_›í
;

555 
S_©å
;

557 
S_©å
:

562 
c⁄ãxt
->
°©e
 = 
S_©å
;

563 
	`HTChunk_åunˇã
(
°rög
, 
c⁄ãxt
->
tokí
);

564 
S_©å
:

565 i‡(
	`is•a˚
((Ë
c
) || c == '>' || c == '=')

566 
gŸ_©åibuã_«me
;

568 
	`HTChunk_putc
(
°rög
, 
c
);

571 
gŸ_©åibuã_«me
:

577 
	`HTChunk_ãrmö©e
(
°rög
) ;

578 
h™dÀ_©åibuã_«me


579 (
c⁄ãxt
, 
	`HTChunk_d©a
(
°rög
Ë+ c⁄ãxt->
tokí
);

580 
	`HTChunk_åunˇã
(
°rög
, 
c⁄ãxt
->
tokí
);

581 
c⁄ãxt
->
°©e
 = 
S_©å_g≠
;

582 
S_©å_g≠
:

583 i‡(
	`is•a˚
((Ë
c
))

586 i‡(
c
 == '>')

587 
gŸ_ñemít_›í
;

588 i‡(
c
 == '=')

589 
c⁄ãxt
->
°©e
 = 
S_equÆs
;

591 
S_©å
;

594 
S_equÆs
:

595 i‡(
	`is•a˚
((Ë
c
))

598 i‡(
c
 == '>')

600 
	`HTTRACE
(
SGML_TRACE
, "found = butÇo value\n");

601 
gŸ_ñemít_›í
;

603 i‡(
c
 == '\'')

604 
c⁄ãxt
->
°©e
 = 
S_squŸed
;

605 i‡(
c
 == '"')

606 
c⁄ãxt
->
°©e
 = 
S_dquŸed
;

608 
S_vÆue
;

611 
S_vÆue
:

612 
c⁄ãxt
->
°©e
 = 
S_vÆue
;

613 
	`HTChunk_åunˇã
(
°rög
, 
c⁄ãxt
->
tokí
);

614 
S_vÆue
:

615 i‡(
	`is•a˚
((Ë
c
) || c == '>')

617 
	`HTChunk_ãrmö©e
(
°rög
);

618 
	`h™dÀ_©åibuã_vÆue
(
c⁄ãxt
);

619 
c⁄ãxt
->
tokí
 = 
	`HTChunk_size
(
°rög
);

620 
S_èg_g≠
;

623 
	`HTChunk_putc
(
°rög
, 
c
);

626 
S_squŸed
:

627 i‡(
c
 == '\'')

629 
	`HTChunk_ãrmö©e
(
°rög
);

630 
	`h™dÀ_©åibuã_vÆue
(
c⁄ãxt
);

631 
c⁄ãxt
->
tokí
 = 
	`HTChunk_size
(
°rög
);

632 
c⁄ãxt
->
°©e
 = 
S_èg_g≠
;

634 i‡(
c
 && c != '\n' && c != '\r')

635 
	`HTChunk_putc
(
°rög
, 
c
);

638 
S_dquŸed
:

639 i‡(
c
 == '"')

641 
	`HTChunk_ãrmö©e
(
°rög
);

642 
	`h™dÀ_©åibuã_vÆue
(
c⁄ãxt
);

643 
c⁄ãxt
->
tokí
 = 
	`HTChunk_size
(
°rög
);

644 
c⁄ãxt
->
°©e
 = 
S_èg_g≠
;

646 i‡(
c
 && c != '\n' && c != '\r')

647 
	`HTChunk_putc
(
°rög
, 
c
);

650 
S_íd
:

651 i‡(
	`iß um
((Ë
c
))

652 
	`HTChunk_putc
(
°rög
, 
c
);

655 
HTTag
 *
t
;

656 * 
fú°
;

657 
	`HTChunk_ãrmö©e
(
°rög
);

658 i‡((
fú°
=
	`HTChunk_d©a
(
°rög
))!=
NULL
 && *first != '\0')

659 
t
 = 
	`SGMLFödTag
(
dtd
, 
	`HTChunk_d©a
(
°rög
));

666 
t
 = 
NULL
;

667 i‡(!
t
) {

668 
	`HTTRACE
(
SGML_TRACE
, "Unknow¿ídÅag </%s>\n" 
_
 
	`HTChunk_d©a
(
°rög
));

669 (*
c⁄ãxt
->
a˘i⁄s
->
u≈¨£d_íd_ñemít
)

670 (
c⁄ãxt
->
èrgë
, 
	`HTChunk_d©a
(
°rög
), 
	`HTChunk_size
(string));

672 
c⁄ãxt
->
cuºít_èg
 = 
NULL
;

673 
	`íd_ñemít
(
c⁄ãxt
, 
t
);

675 
	`HTChunk_˛ór
(
°rög
);

676 
c⁄ãxt
->
cuºít_©åibuã_numbî
 = 
INVALID
;

677 i‡(
c
 != '>')

679 i‡(!
	`is•a˚
((Ë
c
))

680 
	`HTTRACE
(
SGML_TRACE
, "`</%s%c' found!\n" 
_
 
	`HTChunk_d©a
(
°rög
Ë_ 
c
);

681 
c⁄ãxt
->
°©e
 = 
S_junk_èg
;

685 
ãxt
 = 
b
;

686 
cou¡
 = 0;

687 
c⁄ãxt
->
°©e
 = 
S_ãxt
;

692 
S_junk_èg
:

693 i‡(
c
 == '>')

695 
ãxt
 = 
b
;

696 
cou¡
 = 0;

697 
c⁄ãxt
->
°©e
 = 
S_ãxt
;

704 
S_md
:

705 i‡(
c
 == '-')

706 
c⁄ãxt
->
°©e
 = 
S_com_1
;

707 i‡(
c
 == '"')

708 
c⁄ãxt
->
°©e
 = 
S_md_dqs
;

709 i‡(
c
 == '\'')

710 
c⁄ãxt
->
°©e
 = 
S_md_sqs
;

711 i‡(
c
 == '>')

713 
ãxt
 = 
b
;

714 
cou¡
 = 0;

715 
c⁄ãxt
->
°©e
 = 
S_ãxt
;

719 
S_md_dqs
:

720 i‡(
c
 == '"')

721 
c⁄ãxt
->
°©e
 = 
S_md
;

722 i‡(
c
 == '>')

724 
ãxt
 = 
b
;

725 
cou¡
 = 0;

726 
c⁄ãxt
->
°©e
 = 
S_ãxt
;

730 
S_md_sqs
:

731 i‡(
c
 == '\'')

732 
c⁄ãxt
->
°©e
 = 
S_md
;

733 i‡(
c
 == '>')

735 
ãxt
 = 
b
;

736 
cou¡
 = 0;

737 
c⁄ãxt
->
°©e
 = 
S_ãxt
;

741 
S_com_1
:

742 
c⁄ãxt
->
°©e
 = (
c
 ='-'Ë? 
S_com
 : 
S_md
;

743 i‡(
c
 == '>')

745 
ãxt
 = 
b
;

746 
cou¡
 = 0;

747 
c⁄ãxt
->
°©e
 = 
S_ãxt
;

751 
S_com
:

752 i‡(
c
 == '-')

753 
c⁄ãxt
->
°©e
 = 
S_com_2
;

756 
S_com_2
:

757 
c⁄ãxt
->
°©e
 = (
c
 ='-'Ë? 
S_com_2a
 : 
S_com
;

760 
S_com_2a
:

761 i‡(
c
 == '>') {

762 
ãxt
 = 
b
;

763 
cou¡
 = 0;

764 
c⁄ãxt
->
°©e
 = 
S_ãxt
;

765 } i‡(
c
 == '-') {

766 
c⁄ãxt
->
°©e
 = 
S_com_2a
;

768 
c⁄ãxt
->
°©e
 = 
S_com
;

772 i‡(
cou¡
 > 0)

773 
	`PUTB
(
ãxt
, 
cou¡
);

774  
HT_OK
;

775 
	}
}

778 
PRIVATE
 
	$SGML_°rög
 (
HTSåóm
 * 
c⁄ãxt
, c⁄° * 
s
)

780  
	`SGML_wrôe
(
c⁄ãxt
, 
s
, (Ë
	`°æí
(s));

781 
	}
}

784 
PRIVATE
 
	$SGML_ch¨a˘î
 (
HTSåóm
 * 
c⁄ãxt
, 
c
)

786  
	`SGML_wrôe
(
c⁄ãxt
, &
c
, 1);

787 
	}
}

795 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gSGMLP¨£r
 =

798 
SGML_Êush
,

799 
SGML_‰ì
,

800 
SGML_ab‹t
,

801 
SGML_ch¨a˘î
,

802 
SGML_°rög
,

803 
SGML_wrôe


814 
PUBLIC
 
HTSåóm
 *
	$SGML_√w
(c⁄° 
SGML_dtd
 * 
dtd
, 
HTSåu˘uªd
 * 
èrgë
)

816 
i
;

817 
HTSåóm
* 
c⁄ãxt
;

818 i‡((
c⁄ãxt
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

819 
	`HT_OUTOFMEM
("SGML_begin");

821 
c⁄ãxt
->
iß
 = &
SGMLP¨£r
;

822 
c⁄ãxt
->
°rög
 = 
	`HTChunk_√w
(128);

823 
c⁄ãxt
->
dtd
 = dtd;

824 
c⁄ãxt
->
èrgë
 =Åarget;

825 
c⁄ãxt
->
a˘i⁄s
 = (
HTSåu˘uªdCœss
*)(((
HTSåóm
*)
èrgë
)->
iß
);

827 
c⁄ãxt
->
°©e
 = 
S_ãxt
;

828 
i
=0; i<
MAX_ATTRIBUTES
; i++)

829 
c⁄ãxt
->
vÆue
[
i
] = 0;

830  
c⁄ãxt
;

831 
	}
}

833 
PUBLIC
 
HTTag
 * 
	$SGML_födTag
 (
SGML_dtd
 * 
dtd
, 
ñemít_numbî
)

835  (
dtd
 && 
ñemít_numbî
>=0 &&ÉÀmít_numbî<dtd->
numbî_of_ègs
) ?

836 (
dtd
->
ègs
+
ñemít_numbî
Ë: 
NULL
;

837 
	}
}

839 
PUBLIC
 * 
	$SGML_födTagName
 (
SGML_dtd
 * 
dtd
, 
ñemít_numbî
)

841  (
dtd
 && 
ñemít_numbî
>=0 &&ÉÀmít_numbî<dtd->
numbî_of_ègs
) ?

842 (
dtd
->
ègs
+
ñemít_numbî
)->
«me
 : 
NULL
;

843 
	}
}

845 
PUBLIC
 
SGMLC⁄ã¡
 
	$SGML_födTagC⁄ã¡s
 (
SGML_dtd
 * 
dtd
, 
ñemít_numbî
)

847  (
dtd
 && 
ñemít_numbî
>=0 &&ÉÀmít_numbî<dtd->
numbî_of_ègs
) ?

848 (
dtd
->
ègs
+
ñemít_numbî
)->
c⁄ã¡s
 : 
SGML_ELEMENT
;

849 
	}
}

851 
PUBLIC
 
	$SGML_födEÀmítNumbî
 (
SGML_dtd
 * 
dtd
, * 
«me_ñemít
)

853 i‡(
dtd
 && 
«me_ñemít
) {

854 
i
;

855 
HTTag
 *
˘
;

856 
i
 = 0; i< 
dtd
->
numbî_of_ègs
; i++) {

857 
˘
 = &(
dtd
->
ègs
[
i
]);

858 i‡(!
	`°rˇ£comp
(
˘
->
«me
,
«me_ñemít
))

859  
i
;

863 
	}
}

865 
PUBLIC
 * 
	$HTTag_«me
 (
HTTag
 * 
èg
)

867  
èg
 ?Åag->
«me
 : 
NULL
;

868 
	}
}

870 
PUBLIC
 
SGMLC⁄ã¡
 
	$HTTag_c⁄ã¡
 (
HTTag
 * 
èg
)

872  
èg
 ?Åag->
c⁄ã¡s
 : 
SGML_EMPTY
;

873 
	}
}

875 
PUBLIC
 
	$HTTag_©åibuãs
 (
HTTag
 * 
èg
)

877  
èg
 ?Åag->
numbî_of_©åibuãs
 : -1;

878 
	}
}

880 
PUBLIC
 * 
	$HTTag_©åibuãName
 (
HTTag
 * 
èg
, 
©åibuã_numbî
)

882  (
èg
 && 
©åibuã_numbî
>=0 &&áâribuã_numbî<èg->
numbî_of_©åibuãs
) ?

883 (
èg
->
©åibuãs
+
©åibuã_numbî
)->
«me
 : 
NULL
;

884 
	}
}

886 
PUBLIC
 * 
	$HTAâr_«me
 (
HTAâr
 * 
©å
)

888  
©å
 ?áâr->
«me
 : 
NULL
;

889 
	}
}

	@Library/src/SGML.h

34 #i‚de‡
SGML_H


35 
	#SGML_H


	)

37 
	~"HTSåóm.h
"

38 
	~"HTSåu˘.h
"

46 
	e_SGMLC⁄ã¡
{

47 
	mSGML_EMPTY
,

48 
	mSGML_LITERAL
,

50 
	mSGML_CDATA
,

51 
	mSGML_RCDATA
,

52 
	mSGML_MIXED
,

53 
	mSGML_ELEMENT


54 } 
	tSGMLC⁄ã¡
;

64 
	s_HTAâr
 {

65 * 
	m«me
;

67 } 
	tHTAâr
;

69 * 
HTAâr_«me
 (
HTAâr
 * 
©å
);

93 
	s_HTTag
 {

94 * 
	m«me
;

95 
HTAâr
 * 
	m©åibuãs
;

96 
	mnumbî_of_©åibuãs
;

97 
SGMLC⁄ã¡
 
	mc⁄ã¡s
;

98 } 
	tHTTag
;

100 * 
HTTag_«me
 (
HTTag
 * 
èg
);

101 
SGMLC⁄ã¡
 
HTTag_c⁄ã¡
 (
HTTag
 * 
èg
);

102 
HTTag_©åibuãs
 (
HTTag
 * 
èg
);

103 * 
HTTag_©åibuãName
 (
HTTag
 * 
èg
, 
©åibuã_numbî
);

113 
	#MAX_ATTRIBUTES
 32

	)

116 
HTTag
 * 
	mègs
;

117 
	mnumbî_of_ègs
;

118 c⁄° ** 
	mítôy_«mes
;

119 
	mnumbî_of_ítôõs
;

120 } 
	tSGML_dtd
;

122 
HTTag
 * 
SGML_födTag
 (
SGML_dtd
 * 
dtd
, 
ñemít_numbî
);

123 * 
SGML_födTagName
 (
SGML_dtd
 * 
dtd
, 
ñemít_numbî
);

124 
SGMLC⁄ã¡
 
SGML_födTagC⁄ã¡s
 (
SGML_dtd
 * 
dtd
, 
ñemít_numbî
);

125 
SGML_födEÀmítNumbî
(
SGML_dtd
 *
dtd
, *
«me_ñemít
);

135 
HTSåóm
 * 
SGML_√w
 (c⁄° 
SGML_dtd
 * 
dtd
,

136 
HTSåu˘uªd
 * 
èrgë
);

	@Library/src/SSL/HTSSL.c

29 
	~"wwwsys.h
"

32 
	~<s¶.h
>

33 
	~<ønd.h
>

36 
	~"WWWUtû.h
"

37 
	~"WWWC‹e.h
"

38 
	~"WWWHTTP.h
"

40 
	~"HTSSLRódî.h
"

41 
	~"HTSSLWrôî.h
"

42 
	~"HTSSL.h
"

43 
	~"HTSSLM™.h
"

46 
PRIVATE
 
SSL_CTX
 * 
	g≠p_˘x
 = 
NULL
;

49 
PRIVATE
 
HTLi°
 * 
	gs¶_li°
 = 
NULL
;

52 
PRIVATE
 
	gvîify_dïth
 = 0;

53 
PRIVATE
 
	gvîify_îr‹
 = 
X509_V_OK
;

56 
PRIVATE
 
HTSSL_PROTOCOL
 
	gs¶_¥Ÿ_mëhod
 = 
HTTLS_V1
;

60 #ifde‡
HTDEBUG


64 
PRIVATE
 
	$≠ps_s¶_öfo_ˇŒback
 (
SSL
 * 
s
, 
whîe
, 
ªt
)

66 *
°r
;

67 
w
 = 
whîe
 & ~
SSL_ST_MASK
;

68 i‡(
w
 & 
SSL_ST_CONNECT
)

69 
°r
="SSL_connect";

70 i‡(
w
 & 
SSL_ST_ACCEPT
)

71 
°r
="SSL_accept";

73 
°r
="undefined";

74 i‡(
whîe
 & 
SSL_CB_LOOP
) {

75 
	`HTTRACE
(
PROT_TRACE
, "%s: %s\n" 
_
 
°r
 _ 
	`SSL_°©e_°rög_l⁄g
(
s
));

76 } i‡(
whîe
 & 
SSL_CB_ALERT
) {

77 
°r
 = (
whîe
 & 
SSL_CB_READ
) ? "read" : "write";

78 
	`HTTRACE
(
PROT_TRACE
, "SSL3áÀπ %s:%s:%s\n" 
_
 
°r
 _

79 
	`SSL_Æît_ty≥_°rög_l⁄g
(
ªt
Ë
_


80 
	`SSL_Æît_desc_°rög_l⁄g
(
ªt
));

81 } i‡(
whîe
 & 
SSL_CB_EXIT
) {

82 i‡(
ªt
 == 0) {

83 
	`HTTRACE
(
PROT_TRACE
, "%s: faûed i¿%s\n" 
_
 
°r
 _ 
	`SSL_°©e_°rög_l⁄g
(
s
));

84 } i‡(
ªt
 < 0) {

85 
	`HTTRACE
(
PROT_TRACE
, "%s:Éº‹ i¿%s\n" 
_
 
°r
 _ 
	`SSL_°©e_°rög_l⁄g
(
s
));

88 
	}
}

94 
PRIVATE
 
	$vîify_ˇŒback
 (
ok
, 
X509_STORE_CTX
 * 
˘x
)

96 
buf
[256];

97 
X509
 * 
îr_˚π
 = 
	`X509_STORE_CTX_gë_cuºít_˚π
(
˘x
);

98 
îr
 = 
	`X509_STORE_CTX_gë_îr‹
(
˘x
);

99 
dïth
 = 
	`X509_STORE_CTX_gë_îr‹_dïth
(
˘x
);

100 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
îr_˚π
), 
buf
, 256);

102 
	`HTTRACE
(
PROT_TRACE
, "dïth = %d %s\n" 
_
 
dïth
 _ 
buf
);

103 i‡(!
ok
) {

104 
	`HTTRACE
(
PROT_TRACE
, "vîifyÉº‹:Çum=%d:%s\n" 
_
 
îr
 _

105 
	`X509_vîify_˚π_îr‹_°rög
(
îr
));

106 i‡(
vîify_dïth
 >
dïth
) {

107 
ok
=1;

108 
vîify_îr‹
=
X509_V_OK
;

110 
ok
=0;

111 
vîify_îr‹
=
X509_V_ERR_CERT_CHAIN_TOO_LONG
;

114 
˘x
->
îr‹
) {

116 
X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT
:

117 
	`X509_NAME_⁄ñöe
(
	`X509_gë_issuî_«me
(
˘x
->
cuºít_˚π
), 
buf
, 256);

118 
	`HTTRACE
(
PROT_TRACE
, "issuî%s\n" 
_
 
buf
);

121 
X509_V_ERR_CERT_NOT_YET_VALID
:

122 
X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD
:

123 
	`HTTRACE
(
PROT_TRACE
, "notBefore=");

125 
	`HTTRACE
(
PROT_TRACE
, "\n");

128 
X509_V_ERR_CERT_HAS_EXPIRED
:

129 
X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD
:

130 
	`HTTRACE
(
PROT_TRACE
, "notAfter=");

132 
	`HTTRACE
(
PROT_TRACE
, "\n");

135 
	`HTTRACE
(
PROT_TRACE
, "vîifyÑëu∫: %d\n" 
_
 
ok
);

136  
ok
;

137 
	}
}

142 
PUBLIC
 
	$HTSSL_¥ŸMëhod_£t
 (
HTSSL_PROTOCOL
 
¥Ÿ_mëhod
)

144 
s¶_¥Ÿ_mëhod
 = 
¥Ÿ_mëhod
;

145 
	}
}

147 
PUBLIC
 
HTSSL_PROTOCOL
 
	$HTSSL_¥ŸMëhod
 ()

149  
s¶_¥Ÿ_mëhod
;

150 
	}
}

155 
PUBLIC
 
	$HTSSL_vîifyDïth_£t
 (
dïth
)

157 
vîify_dïth
 = 
dïth
;

158 
	}
}

160 
PUBLIC
 
	$HTSSL_vîifyDïth
 ()

162  
vîify_dïth
;

163 
	}
}

168 
PUBLIC
 
BOOL
 
	$HTSSL_öô
 ()

170 
∫d_fûíame
[
HT_MAX_PATH
];

179 
	`RAND_fûe_«me
(
∫d_fûíame
, (rnd_filename));

180 
	`RAND_lﬂd_fûe
(
∫d_fûíame
, -1);

182 i‡(!
≠p_˘x
) {

183 
SSL_METHOD
 * 
mëh
 = 
NULL
;

184 
	`SSLóy_add_s¶_Æg‹ôhms
();

186 
	`SSL_lﬂd_îr‹_°rögs
();

189 
s¶_¥Ÿ_mëhod
) {

190 
HTSSL_V2
:

191 
mëh
 = 
	`SSLv2_˛õ¡_mëhod
();

193 
HTSSL_V3
:

194 
mëh
 = 
	`SSLv3_˛õ¡_mëhod
();

196 
HTSSL_V23
:

197 
mëh
 = 
	`SSLv23_˛õ¡_mëhod
();

200 
HTTLS_V1
:

201 
mëh
 = 
	`TLSv1_˛õ¡_mëhod
();

206 i‡((
≠p_˘x
 = 
	`SSL_CTX_√w
(
mëh
)Ë=
NULL
) {

207 
	`HTTRACE
(
PROT_TRACE
, "HTSSLContext CouldÇot create context\n");

208  
NO
;

210 
	`HTTRACE
(
PROT_TRACE
, "HTSSLC⁄ãxàCª©ed c⁄ãxà%p" 
_
 
≠p_˘x
);

213 #ifde‡
HTDEBUG


214 
	`SSL_CTX_£t_öfo_ˇŒback
(
≠p_˘x
, 
≠ps_s¶_öfo_ˇŒback
);

218 
	`SSL_CTX_£t_vîify
(
≠p_˘x
, 
SSL_VERIFY_PEER
, 
vîify_ˇŒback
);

221 
	`SSL_CTX_£t_£ssi⁄_ˇche_mode
(
≠p_˘x
, 
SSL_SESS_CACHE_CLIENT
);

223  
YES
;

224 
	}
}

229 
PUBLIC
 
BOOL
 
	$HTSSL_ãrmö©e
 ()

231 i‡(
≠p_˘x
) {

232 
	`SSL_CTX_‰ì
(
≠p_˘x
);

233 
≠p_˘x
 = 
NULL
;

234  
YES
;

236  
NO
;

237 
	}
}

239 
PUBLIC
 
BOOL
 
	$HTSSL_isInôülized
 ()

241  
≠p_˘x
 ? 
YES
 : 
NO
;

242 
	}
}

248 
PRIVATE
 
BOOL
 
	$HTSSL_c⁄√˘Sëup
 (
HTSSL
 * 
hts¶
, 
sd
)

250 
	`HTTRACE
(
PROT_TRACE
, "HTSSL....... Sëtög u∞%∞⁄ sockë %d\n" 
_
 
hts¶
 _ 
sd
);

251 
hts¶
->
sd
 = sd;

252 
hts¶
->
c⁄√˘ed
 = 
NO
;

253 
hts¶
->
ªf_cou¡
 = 0;

254 
hts¶
->
s¶
 = 
	`SSL_√w
(
≠p_˘x
);

255 i‡(!
hts¶
->
s¶
Ë 
NO
;

258 
	`SSL_£t_c⁄√˘_°©e
(
hts¶
->
s¶
);

261 
	`SSL_£t_fd
(
hts¶
->
s¶
, 
sd
);

263  
YES
;

264 
	}
}

272 
PRIVATE
 
	$HTSSL_addRef
(
HTSSL
 * 
hts¶
)

274 i‡(
hts¶
) {

275 (
hts¶
->
ªf_cou¡
)++;

276 
	`HTTRACE
 (
PROT_TRACE
, "HTSSL....... NewÑe„ªn˚ cou¡ = %d\n" 
_
 
hts¶
->
ªf_cou¡
);

278 
	}
}

284 
PUBLIC
 
HTSSL
 * 
	$HTSSL_√w
 (
sd
)

286 
HTSSL
 * 
hts¶
 = 
NULL
;

287 
HTLi°
 * 
s¶s
 = 
NULL
;

290 i‡(!
≠p_˘x
Ë 
NULL
;

293 i‡(!
s¶_li°
Ës¶_li° = 
	`HTLi°_√w
();

295 
s¶s
 = 
s¶_li°
;

297 (
hts¶
 = 
	`HTLi°_√xtObje˘
(
s¶s
))) {

298 i‡(
hts¶
->
sd
 == sd) {

299 
	`HTTRACE
(
PROT_TRACE
, "HTSSL New... Found SSL %∞wôh sd = %d\n" 
	`_
 (*Ë
hts¶
 
_
 
sd
);

301 
	`HTSSL_addRef
(
hts¶
);

302  
hts¶
;

307 i‡((
hts¶
 = (
HTSSL
 *Ë
	`HT_CALLOC
(1,  (HTSSL))Ë=
NULL
)

308 
	`HT_OUTOFMEM
("HTSSL_new");

309 
	`HTTRACE
(
PROT_TRACE
, "HTSSL New... Cª©edÇew SSL Obje˘ %p\n" 
_
 
hts¶
);

312 i‡(
	`HTSSL_c⁄√˘Sëup
(
hts¶
, 
sd
Ë!
YES
) {

313 
	`HTSSL_‰ì
(
hts¶
);

314  
NULL
;

317 
	`HTSSL_addRef
(
hts¶
);

319 
	`HTLi°_addObje˘
 (
s¶_li°
, 
hts¶
);

321  
hts¶
;

322 
	}
}

327 
PUBLIC
 
	$HTSSL_‰ì
 (
HTSSL
 * 
hts¶
)

329 (
hts¶
->
ªf_cou¡
)--;

330 
	`HTTRACE
(
PROT_TRACE
, "HTSSL Fªe..Ñef_cou¡ = %d\n" 
_
 
hts¶
->
ªf_cou¡
);

332 i‡(
hts¶
->
ªf_cou¡
 == 0) {

333 
	`HTTRACE
(
PROT_TRACE
, "HTSSL.Free.. FINAL RELEASE\n");

335 i‡(
hts¶
->
s¶
) {

336 
	`SSL_‰ì
(
hts¶
->
s¶
);

337 
hts¶
->
s¶
 = 
NULL
;

340 
	`HTLi°_ªmoveObje˘
(
s¶_li°
, 
hts¶
);

343 
	`HT_FREE
(
hts¶
);

345 
	}
}

347 
PUBLIC
 
BOOL
 
	$HTSSL_›í
 (
HTSSL
 * 
hts¶
, 
sd
)

349 
îr
 = 0;

350 i‡(!
hts¶
Ë 
NO
;

351 i‡(
hts¶
->
c⁄√˘ed
) {

352 
	`HTTRACE
(
PROT_TRACE
, "HTSSL O≥n.. SSL Obje˘ %∞Æªady c⁄√˘ed\n" 
_
 
hts¶
);

353  
YES
;

356 i‡(!
hts¶
->
s¶
) {

357 
	`HTTRACE
(
PROT_TRACE
, "HTSSL....... SSL obje˘ %∞ha†n⁄-NULL s¶\n" 
_
 
hts¶
);

358  
NO
;

361 
	`HTTRACE
(
PROT_TRACE
, "HTSSL O≥n.. C⁄√˘ög %p\n" 
_
 
hts¶
);

363 i‡((
hts¶
->
s¶
 = 
	`SSL_√w
(
≠p_˘x
)Ë=
NULL
) {

364 
	`HTTRACE
(
PROT_TRACE
, "HTSSL Open.. SSL_new failed\n");

365  
NO
;

369 
	`SSL_£t_fd
 (
hts¶
->
s¶
, 
sd
);

370 
hts¶
->
sd
 = sd;

373 i‡((
îr
 = 
	`SSL_c⁄√˘
 (
hts¶
->
s¶
)) != -1) {

374 
hts¶
->
c⁄√˘ed
 = 
YES
;

375  
YES
;

377 
	`HTTRACE
(
PROT_TRACE
, "HTSSL O≥n.. SSL_c⁄√˘ faûed wôh codê%d" 
_
 
îr
);

378  
NO
;

380 
	}
}

382 
PUBLIC
 
BOOL
 
	$HTSSL_˛o£
 (
HTSSL
 * 
hts¶
)

384 i‡(
hts¶
) {

385 
	`HTTRACE
(
PROT_TRACE
, "HTSSL....... Closög SSL Obje˘ %p\n" 
_
 
hts¶
);

386 
	`SSL_‰ì
(
hts¶
->
s¶
);

387 
hts¶
->
c⁄√˘ed
 = 
NO
;

388 
hts¶
->
s¶
 = 
NULL
;

389  
YES
;

391  
NO
;

392 
	}
}

394 
PUBLIC
 
BOOL
 
	$HTSSL_isO≥n
 (
HTSSL
 * 
hts¶
)

396  
hts¶
 ? hts¶->
c⁄√˘ed
 : 
NO
;

397 
	}
}

399 
PUBLIC
 
	$HTSSL_ªad
 (
HTSSL
 * 
hts¶
, 
sd
, * 
buff
, 
Àn
)

401  
hts¶
 && hts¶->
s¶
 ? 
	`SSL_ªad
(hts¶->s¶, 
buff
, 
Àn
) : -1;

402 
	}
}

404 
PUBLIC
 
	$HTSSL_wrôe
 (
HTSSL
 * 
hts¶
, 
sd
, * 
buff
, 
Àn
)

406  
hts¶
 && hts¶->
s¶
 ? 
	`SSL_wrôe
(hts¶->s¶, 
buff
, 
Àn
) : -1;

407 
	}
}

409 
PUBLIC
 
	$HTSSL_gëEº‹
 (
HTSSL
 * 
hts¶
, 
°©us
)

411  
hts¶
 && hts¶->
s¶
 ? 
	`SSL_gë_îr‹
(hts¶->s¶, 
°©us
) : -1;

412 
	}
}

	@Library/src/SSL/HTSSL.h

20 #i‚de‡
_HTSSL_H


21 
	#_HTSSL_H


	)

31 
_HTSSL
 
	tHTSSL
;

33 
BOOL
 
HTSSL_öô
 ();

34 
BOOL
 
HTSSL_isInôülized
 ();

35 
BOOL
 
HTSSL_ãrmö©e
 ();

44 
	e_HTSSL_PROTOCOL
 {

45 
	mHTSSL_V2
 = 0,

46 
	mHTSSL_V3
,

47 
	mHTSSL_V23
,

49 
	mHTTLS_V1


50 } 
	tHTSSL_PROTOCOL
;

52 
HTSSL_¥ŸMëhod_£t
 (
HTSSL_PROTOCOL
 
¥Ÿ_mëhod
);

53 
HTSSL_PROTOCOL
 
HTSSL_¥ŸMëhod
 ();

61 
HTSSL_vîifyDïth_£t
 (
dïth
);

62 
HTSSL_vîifyDïth
 ();

68 
HTSSL
 * 
HTSSL_√w
 (
sd
);

69 
HTSSL_‰ì
 (
HTSSL
 * 
hts¶
);

71 
BOOL
 
HTSSL_›í
 (
HTSSL
 * 
hts¶
, 
sd
);

72 
BOOL
 
HTSSL_˛o£
 (
HTSSL
 * 
hts¶
);

73 
BOOL
 
HTSSL_isO≥n
 (
HTSSL
 * 
hts¶
);

75 
HTSSL_ªad
 (
HTSSL
 * 
hts¶
, 
sd
, * 
buff
, 
Àn
);

76 
HTSSL_wrôe
 (
HTSSL
 * 
hts¶
, 
sd
, * 
buff
, 
Àn
);

77 
HTSSL_gëEº‹
 (
HTSSL
 * 
hts¶
, 
°©us
);

	@Library/src/SSL/HTSSLMan.h

14 #i‚de‡
HTSSLMAN_H


15 
	#HTSSLMAN_H


	)

17 #ifde‡
__˝lu•lus


21 
	~"HTSSL.h
"

23 
	s_HTSSL
 {

24 
SSL
 * 
s¶
;

25 
sd
;

26 
BOOL
 
c⁄√˘ed
;

27 
ªf_cou¡
;

30 
HTSSL
 * 
HTSSL_√w
(
sd
);

32 
HTSSL_‰ì
(
HTSSL
 *);

34 
BOOL
 
HTSSL_c⁄√˘ed
(
HTSSL
 * 
s¶
);

36 
HTSSL_£t_disc⁄√˘ed
(
HTSSL
 * 
hts¶
);

38 
BOOL
 
HTSSL_c⁄√˘
(
HTSSL
 * 
s¶
, 
sd
);

40 
HTSSL_ªad
(
HTSSL
 * 
hts¶
, 
sd
, * 
buff
, 
Àn
);

42 
HTSSL_wrôe
(
HTSSL
 * 
hts¶
, 
sd
, * 
buff
, 
Àn
);

44 #ifde‡
__˝lu•lus


	@Library/src/SSL/HTSSLReader.c

24 
	~"wwwsys.h
"

27 
	~<s¶.h
>

30 
	~"WWWUtû.h
"

31 
	~"WWWC‹e.h
"

32 
	~"HTNë.h
"

33 
	~"HTNëM™.h
"

35 
	~"HTSSL.h
"

36 
	~"HTSSLRódî.h
"

38 
	s_HTSåóm
 {

39 c⁄° 
HTSåómCœss
 * 
	miß
;

43 
	s_HTI≈utSåóm
 {

44 c⁄° 
HTI≈utSåómCœss
 * 
	miß
;

45 
HTCh™√l
 * 
	mch
;

46 
HTHo°
 * 
	mho°
;

47 * 
	mwrôe
;

48 * 
	mªad
;

49 
	mb_ªad
;

50 
	md©a
 [
INPUT_BUFFER_SIZE
];

51 
HTSSL
 * 
	mhts¶
;

56 
PRIVATE
 
	$HTSSLRódî_Êush
 (
HTI≈utSåóm
 * 
me
)

58 
HTNë
 * 
√t
 = 
	`HTHo°_gëRódNë
(
me
->
ho°
);

59  
√t
 &&Çë->
ªadSåóm
 ? (*√t->ªadSåóm->
iß
->
Êush
)“ë->ªadSåómË: 
HT_OK
;

60 
	}
}

62 
PRIVATE
 
	$HTSSLRódî_‰ì
 (
HTI≈utSåóm
 * 
me
)

64 
HTNë
 * 
√t
 = 
	`HTHo°_gëRódNë
(
me
->
ho°
);

65 
	`HTTRACE
(
PROT_TRACE
, "HTSSLRódî. Fªê%p\n" 
_
 
me
);

66 i‡(
me
->
hts¶
) {

67 
	`HTSSL_‰ì
(
me
->
hts¶
);

68 
me
->
hts¶
 = 
NULL
;

71 i‡(
√t
 &&Çë->
ªadSåóm
) {

72 
°©us
 = (*
√t
->
ªadSåóm
->
iß
->
_‰ì
)(net->readStream);

73 i‡(
°©us
 =
HT_OK
Ë
√t
->
ªadSåóm
 = 
NULL
;

74  
°©us
;

76  
HT_OK
;

77 
	}
}

79 
PRIVATE
 
	$HTSSLRódî_ab‹t
 (
HTI≈utSåóm
 * 
me
, 
HTLi°
 * 
e
)

81 
HTNë
 * 
√t
 = 
	`HTHo°_gëRódNë
(
me
->
ho°
);

82 
	`HTTRACE
(
PROT_TRACE
, "HTSSLRódî. Ab‹à%p\n" 
_
 
me
);

83 i‡(
√t
 &&Çë->
ªadSåóm
) {

84 
°©us
 = (*
√t
->
ªadSåóm
->
iß
->
ab‹t
)“ë->ªadSåóm, 
NULL
);

85 i‡(
°©us
 !
HT_IGNORE
Ë
√t
->
ªadSåóm
 = 
NULL
;

87  
HT_ERROR
;

88 
	}
}

90 #ifde‡
FIND_SIGNATURES


107 
PRIVATE
 * 
	$°∫°r
(* 
hay°ack
, *
pLí
, * 
√edÀ
)

109 
found
 = 0;

110 
√ed
 = 
	`°æí
(
√edÀ
);

111 
i
, 
°¨t
;

112 
°¨t
 = 
i
 = 0; i < *
pLí
; i++)

113 i‡(
hay°ack
[
i
] =
√edÀ
[
found
]) {

114 i‡(++
found
 =
√ed
) {

115 
i
 -
√ed
 - 1;

116 *
pLí
 -
i
;

117  
hay°ack
+
i
;

120 
found
 = 0;

122 *
pLí
 = 0;

123  
NULL
;

124 
	}
}

127 
PRIVATE
 
	$HTSSLRódî_ªad
 (
HTI≈utSåóm
 * 
me
)

129 
HTHo°
 * 
ho°
 = 
me
->host;

130 
SOCKET
 
soc
 = 
	`HTCh™√l_sockë
(
me
->
ch
);

131 
HTNë
 * 
√t
 = 
	`HTHo°_gëRódNë
(
ho°
);

132 
HTReque°
 * 
ªque°
 = 
	`HTNë_ªque°
(
√t
);

133 
°©us
;

134 i‡(!
√t
->
ªadSåóm
) {

135 
	`HTTRACE
(
STREAM_TRACE
, "HTSSLRódî. Nÿªad såóm f‹Çë obje˘ %p\n" 
_
 
√t
);

136  
HT_ERROR
;

140 i‡(!
me
->
hts¶
) {

141 i‡((
me
->
hts¶
 = 
	`HTSSL_√w
(
soc
)Ë=
NULL
) {

142 
	`HTReque°_addSy°emEº‹
(
√t
->
ªque°
, 
ERR_FATAL
, 
so˚ºno
, 
NO
, "SSLREAD");

143  
HT_ERROR
;

151 i‡(
me
->
wrôe
 >me->
ªad
) {

152 
me
->
b_ªad
 = 0;

153 
me
->
d©a
[0] ='\0';

154 
me
->
b_ªad
 = 
	`HTSSL_ªad
(me->
hts¶
, 
soc
, me->
d©a
, 
INPUT_BUFFER_SIZE
);

155 
°©us
 = 
	`HTSSL_gëEº‹
(
me
->
hts¶
, me->
b_ªad
);

156 
	`HTTRACE
(
STREAM_TRACE
, "HTSSLRódî. SSLÑëu∫ed %d\n" 
_
 
°©us
);

159 
°©us
) {

161 
SSL_ERROR_NONE
:

163 
	`HTTRACEDATA
(
me
->
d©a
, me->
b_ªad
, "Ródög from sockë %d" 
_
 
soc
);

164 
me
->
wrôe
 = me->
d©a
;

165 
me
->
ªad
 = me->
d©a
 + me->
b_ªad
;

166 
	`HTTRACE
(
STREAM_TRACE
, "HTSSLRódî. %d byã†ªad from sockë %d\n" 
_


167 
me
->
b_ªad
 
_
 
soc
);

170 i‡(
ªque°
) {

171 
HTAÀπCÆlback
 * 
cbf
 = 
	`HTAÀπ_föd
(
HT_PROG_READ
);

172 i‡(
	`HTNë_øwByãsCou¡
(
√t
))

173 
	`HTNë_addByãsRód
(
√t
, 
me
->
b_ªad
);

174 i‡(
cbf
) {

175 
å
 = 
	`HTNë_byãsRód
(
√t
);

176 (*
cbf
)(
ªque°
, 
HT_PROG_READ
, 
HT_MSG_NULL
, 
NULL
, &
å
, NULL);

181 
SSL_ERROR_WANT_READ
:

182 
	`HTTRACE
(
STREAM_TRACE
, "HTSSLRódî. WOULD BLOCK fd %d\n" 
_
 
soc
);

183 
	`HTHo°_ªgi°î
(
ho°
, 
√t
, 
HTEvít_READ
);

190 
	`HTHo°_f‹˚Flush
(
ho°
);

192  
HT_WOULD_BLOCK
;

194 
SSL_ERROR_WANT_WRITE
:

195  
	`HTHo°_f‹˚Flush
(
ho°
);

197 
SSL_ERROR_WANT_X509_LOOKUP
:

199  
HT_OK
;

201 
SSL_ERROR_ZERO_RETURN
:

202 
SSL_ERROR_SSL
:

203 
SSL_ERROR_SYSCALL
:

204 
	`HTTRACE
(
PROT_TRACE
, "HTSSLRódî. FINÑe˚ived o¿sockë %d\n" 
_
 
soc
);

205 
	`HTHo°_uƒegi°î
(
ho°
, 
√t
, 
HTEvít_READ
);

206 
	`HTHo°_ªgi°î
(
ho°
, 
√t
, 
HTEvít_CLOSE
);

208 
	`HTSSL_˛o£
(
me
->
hts¶
);

209 
	`HTSSL_‰ì
(
me
->
hts¶
);

210 
me
->
hts¶
 = 
NULL
;

212  
HT_CLOSED
;

216 #ifde‡
FIND_SIGNATURES


218 * 
±r
 = 
me
->
d©a
;

219 
Àn
 = 
me
->
b_ªad
;

220 (
±r
 = 
	`°∫°r
’å, &
Àn
, "HTTP/1.1 200 OK")Ë!
NULL
) {

221 
	`HTTRACE
(
STREAM_TRACE
, "HTSSLRódî. Sig«tuª foundáà0x%x o‡0x%x.\n" 
_
 
±r
 - 
me
->
d©a
 _ me->
b_ªad
);

222 
±r
++;

223 
Àn
--;

227 #ifde‡
NOT_ASCII


229 *
p
 = 
me
->
d©a
;

230 
p
 < 
me
->
ªad
) {

231 *
p
 = 
	`FROMASCII
(*p);

232 
p
++;

238 i‡((
°©us
 = (*
√t
->
ªadSåóm
->
iß
->
put_block
)

239 (
√t
->
ªadSåóm
, 
me
->
wrôe
, me->
b_ªad
)Ë!
HT_OK
) {

240 i‡(
°©us
 =
HT_WOULD_BLOCK
) {

241 
	`HTTRACE
(
STREAM_TRACE
, "HTSSLReader. Target WOULD BLOCK\n");

242 
	`HTHo°_uƒegi°î
(
ho°
, 
√t
, 
HTEvít_READ
);

243  
HT_WOULD_BLOCK
;

244 } i‡(
°©us
 =
HT_PAUSE
) {

245 
	`HTTRACE
(
STREAM_TRACE
, "HTSSLReader. Target PAUSED\n");

246 
	`HTHo°_uƒegi°î
(
ho°
, 
√t
, 
HTEvít_READ
);

247  
HT_PAUSE
;

249 } i‡(
°©us
 =
HT_CONTINUE
 || status > 0) {

250 i‡(
°©us
 =
HT_CONTINUE
) {

251 
	`HTTRACE
(
STREAM_TRACE
, "HTSSLReader. CONTINUE\n");

253 
	`HTTRACE
(
STREAM_TRACE
, "HTSSLRódî. T¨gëÑëu∫†%d\n" 
_
 
°©us
);

255  
°©us
;

257 
	`HTTRACE
(
STREAM_TRACE
, "HTSSLRódî. T¨gë ERROR %d\n" 
_
 
°©us
);

258  
°©us
;

261 
me
->
wrôe
 = me->
ªad
;

263 
ªmaöög
 = 
	`HTHo°_ªmaöögRód
(
ho°
);

264 i‡(
ªmaöög
 > 0) {

265 
	`HTTRACE
(
STREAM_TRACE
, "HTSSLRódî. DIDN'T CONSUME %d BYTES: `%s\'\n" 
_


266 
ªmaöög
 
_
 
me
->
ªad
);

267 
	`HTHo°_£tC⁄sumed
(
ho°
, 
ªmaöög
);

270 } 
√t
->
¥ìm±ive
);

271 
	`HTHo°_ªgi°î
(
ho°
, 
√t
, 
HTEvít_READ
);

272  
HT_WOULD_BLOCK
;

273 
	}
}

281 
PRIVATE
 
	$HTSSLRódî_˛o£
 (
HTI≈utSåóm
 * 
me
)

283 
°©us
 = 
HT_OK
;

284 
HTNë
 * 
√t
 = 
	`HTHo°_gëRódNë
(
me
->
ho°
);

285 i‡(
√t
 &&Çë->
ªadSåóm
) {

286 i‡((
°©us
 = (*
√t
->
ªadSåóm
->
iß
->
_‰ì
)“ë->ªadSåóm))==
HT_WOULD_BLOCK
)

287  
HT_WOULD_BLOCK
;

288 
√t
->
ªadSåóm
 = 
NULL
;

290 
	`HTTRACE
(
STREAM_TRACE
, "HTSSLReader. FREEING....\n");

291 
	`HT_FREE
(
me
);

292  
°©us
;

293 
	}
}

295 
PUBLIC
 
	$HTSSLRódî_c⁄sumed
 (
HTI≈utSåóm
 * 
me
, 
size_t
 
byãs
)

297 
me
->
wrôe
 +
byãs
;

298 
me
->
b_ªad
 -
byãs
;

299 
	`HTHo°_£tRemaöögRód
(
me
->
ho°
, me->
b_ªad
);

300  
HT_OK
;

301 
	}
}

303 
PRIVATE
 c⁄° 
HTI≈utSåómCœss
 
	gHTSSLRódî
 =

306 
HTSSLRódî_Êush
,

307 
HTSSLRódî_‰ì
,

308 
HTSSLRódî_ab‹t
,

309 
HTSSLRódî_ªad
,

310 
HTSSLRódî_˛o£
,

311 
HTSSLRódî_c⁄sumed


321 
PUBLIC
 
HTI≈utSåóm
 * 
	$HTSSLRódî_√w
 (
HTHo°
 * 
ho°
, 
HTCh™√l
 * 
ch
,

322 * 
∑øm
, 
mode
)

324 i‡(
ho°
 && 
ch
) {

325 
HTI≈utSåóm
 * 
me
 = 
	`HTCh™√l_öput
(
ch
);

326 i‡(
me
 =
NULL
) {

327 i‡((
me
=(
HTI≈utSåóm
 *Ë
	`HT_CALLOC
(1, (HTI≈utSåóm))Ë=
NULL
)

328 
	`HT_OUTOFMEM
("HTSSLReader_new");

329 
me
->
iß
 = &
HTSSLRódî
;

330 
me
->
ch
 = ch;

331 
me
->
ho°
 = host;

332 
me
->
hts¶
 = 
NULL
;

334  
me
;

336  
NULL
;

337 
	}
}

	@Library/src/SSL/HTSSLReader.h

34 #i‚de‡
HTSSLREADER_H


35 
	#HTSSLREADER_H


	)

37 
	~"HTIOSåóm.h
"

51 
	#INPUT_BUFFER_SIZE
 32*1024

	)

59 
HTI≈ut_√w
 
HTSSLRódî_√w
;

	@Library/src/SSL/HTSSLWriter.c

24 
	~"wwwsys.h
"

27 
	~<s¶.h
>

30 
	~"WWWUtû.h
"

31 
	~"WWWC‹e.h
"

32 
	~"WWWTøns.h
"

33 
	~"HTNë.h
"

34 
	~"HTNëM™.h
"

35 
	~"HTH°M™.h
"

37 
	~"HTSSL.h
"

38 
	~"HTSSLWrôî.h
"

40 
	s_HTSåóm
 {

41 c⁄° 
HTSåómCœss
 * 
	miß
;

45 
	s_HTOuçutSåóm
 {

46 c⁄° 
HTOuçutSåómCœss
 * 
	miß
;

47 
HTCh™√l
 * 
	mch
;

48 
HTHo°
 * 
	mho°
;

49 
	moff£t
;

50 #ifde‡
NOT_ASCII


51 * 
	mascbuf
;

53 
HTSSL
 * 
	mhts¶
;

58 
PRIVATE
 
	$HTSSLWrôî_Êush
 (
HTOuçutSåóm
 * 
me
)

60  
HT_OK
;

61 
	}
}

63 
PRIVATE
 
	$HTSSLWrôî_‰ì
 (
HTOuçutSåóm
 * 
me
)

65 
	`HTTRACE
(
STREAM_TRACE
, "HTSSLWrôî. Fªeög %p\n" 
_
 
me
);

66 i‡(
me
->
hts¶
){

67 
	`HTSSL_‰ì
(
me
->
hts¶
);

68 
me
->
hts¶
 = 
NULL
;

70  
HT_OK
;

71 
	}
}

73 
PRIVATE
 
	$HTSSLWrôî_ab‹t
 (
HTOuçutSåóm
 * 
me
, 
HTLi°
 * 
e
)

75 
	`HTTRACE
(
STREAM_TRACE
, "HTSSLWrôî. Ab‹à%p\n" 
_
 
me
);

76  
HT_ERROR
;

77 
	}
}

109 
PRIVATE
 
	$HTSSLWrôî_wrôe
 (
HTOuçutSåóm
 * 
me
, c⁄° * 
buf
, 
Àn
)

111 
HTHo°
 * 
ho°
 = 
me
->host;

112 
SOCKET
 
soc
 = 
	`HTCh™√l_sockë
(
	`HTHo°_ch™√l
(
ho°
));

113 
HTNë
 * 
√t
 = 
	`HTHo°_gëWrôeNë
(
ho°
);

114 
b_wrôe
;

115 * 
wπp
;

116 
°©us
;

117 c⁄° *
limô
 = 
buf
+
Àn
;

120 i‡(!
√t
) {

121 
	`HTTRACE
(
STREAM_TRACE
, "HTSSLWrôî. NÿNë Obje˘ %d (off£à%d)\n" 
_
 
soc
 _ 
me
->
off£t
);

122  
HT_ERROR
;

125 #ifde‡
NOT_ASCII


126 i‡(
Àn
 && !
me
->
ascbuf
) {

127 c⁄° *
‹ig
 = 
buf
;

128 *
de°
;

129 
˙t
;

130 i‡((
me
->
ascbuf
 = (*Ë
	`HT_MALLOC
(
Àn
)Ë=
NULL
)

131 
	`HT_OUTOFMEM
("HTSSLWriter_write");

132 
de°
 = 
me
->
ascbuf
;

133 
˙t
=0; c¡<
Àn
; cnt++) {

134 *
de°
 = 
	`TOASCII
(*
‹ig
);

135 
de°
++, 
‹ig
++;

137 
wπp
 = 
me
->
ascbuf
;

138 
limô
 = 
me
->
ascbuf
+
Àn
;

141 i‡(!
me
->
off£t
)

142 
wπp
 = (*Ë
buf
;

144 
wπp
 = (*Ë
buf
 + 
me
->
off£t
;

145 
Àn
 -
me
->
off£t
;

146 
me
->
off£t
 = 0;

151 i‡(!
me
->
hts¶
) {

152 i‡((
me
->
hts¶
 = 
	`HTSSL_√w
(
soc
)Ë=
NULL
) {

153 
	`HTReque°_addSy°emEº‹
(
√t
->
ªque°
, 
ERR_FATAL
, 
so˚ºno
, 
NO
, "SSLWRITE");

154  
HT_ERROR
;

159 
wπp
 < 
limô
) {

160 
b_wrôe
 = 
	`HTSSL_wrôe
(
me
->
hts¶
, 
soc
, 
wπp
, 
Àn
);

161 
°©us
 = 
	`HTSSL_gëEº‹
(
me
->
hts¶
, 
b_wrôe
);

162 
	`HTTRACE
(
STREAM_TRACE
, "HTSSLWrôî. SSLÑëu∫ed %d\n" 
_
 
°©us
);

165 
°©us
) {

167 
SSL_ERROR_NONE
:

170 
	`HTTRACEDATA
(
wπp
, 
b_wrôe
, "WrôögÅÿsockë %d" 
_
 
soc
);

171 
	`HTNë_addByãsWrôãn
(
√t
, 
b_wrôe
);

172 
wπp
 +
b_wrôe
;

173 
Àn
 -
b_wrôe
;

174 
	`HTTRACE
(
STREAM_TRACE
, "HTSSLWrôî. %d byã†wrôã¿tÿ%d\n" 
_
 
b_wrôe
 _ 
soc
);

178 
HTAÀπCÆlback
 *
cbf
 = 
	`HTAÀπ_föd
(
HT_PROG_WRITE
);

179 i‡(
cbf
) {

180 
tw
 = 
	`HTNë_byãsWrôãn
(
√t
);

181 (*
cbf
)(
√t
->
ªque°
, 
HT_PROG_WRITE
, 
HT_MSG_NULL
, 
NULL
, &
tw
, NULL);

186 
SSL_ERROR_WANT_WRITE
:

187 
	`HTHo°_ªgi°î
(
ho°
, 
√t
, 
HTEvít_WRITE
);

188 
me
->
off£t
 = 
wπp
 - 
buf
;

189 
	`HTTRACE
(
STREAM_TRACE
, "HTSSLWrôî. WOULD BLOCK %d (off£à%d)\n" 
_
 
soc
 _ 
me
->
off£t
);

190  
HT_WOULD_BLOCK
;

192 
SSL_ERROR_WANT_READ
:

193  
	`HTHo°_ªad
(
ho°
, 
√t
);

195 
SSL_ERROR_WANT_X509_LOOKUP
:

197  
HT_OK
;

199 
SSL_ERROR_ZERO_RETURN
:

200 
SSL_ERROR_SSL
:

201 
SSL_ERROR_SYSCALL
:

202 
ho°
->
brokí_pùe
 = 
YES
;

203 
	`HTReque°_addSy°emEº‹
(
√t
->
ªque°
, 
ERR_FATAL
, 
so˚ºno
, 
NO
, "SSLWRITE");

209 
	`HTSSL_˛o£
(
me
->
hts¶
);

211  
HT_ERROR
;

214 #ifde‡
NOT_ASCII


215 
	`HT_FREE
(
me
->
ascbuf
);

217  
HT_OK
;

218 
	}
}

223 
PRIVATE
 
	$HTSSLWrôî_put_ch¨a˘î
 (
HTOuçutSåóm
 * 
me
, 
c
)

225  
	`HTSSLWrôî_wrôe
(
me
, &
c
, 1);

226 
	}
}

233 
PRIVATE
 
	$HTSSLWrôî_put_°rög
 (
HTOuçutSåóm
 * 
me
, c⁄° * 
s
)

235  
	`HTSSLWrôî_wrôe
(
me
, 
s
, (Ë
	`°æí
(s));

236 
	}
}

243 
PRIVATE
 
	$HTSSLWrôî_˛o£
 (
HTOuçutSåóm
 * 
me
)

245 
	`HTTRACE
(
STREAM_TRACE
, "HTSSLWriter. FREEING....\n");

246 i‡(
me
->
hts¶
) {

247 
	`HTSSL_‰ì
(
me
->
hts¶
);

248 
me
->
hts¶
 = 
NULL
;

250 
	`HT_FREE
(
me
);

251  
HT_OK
;

252 
	}
}

254 
PRIVATE
 c⁄° 
HTOuçutSåómCœss
 
	gHTSSLWrôî
 =

257 
HTSSLWrôî_Êush
,

258 
HTSSLWrôî_‰ì
,

259 
HTSSLWrôî_ab‹t
,

260 
HTSSLWrôî_put_ch¨a˘î
,

261 
HTSSLWrôî_put_°rög
,

262 
HTSSLWrôî_wrôe
,

263 
HTSSLWrôî_˛o£


267 
PUBLIC
 
HTOuçutSåóm
 * 
	$HTSSLWrôî_√w
 (
HTHo°
 * 
ho°
, 
HTCh™√l
 * 
ch
,

268 * 
∑øm
, 
mode
)

270 i‡(
ho°
 && 
ch
) {

271 
HTOuçutSåóm
 * 
me
 = 
	`HTCh™√l_ouçut
(
ch
);

272 i‡(!
me
) {

273 i‡((
me
=(
HTOuçutSåóm
 *Ë
	`HT_CALLOC
(1, (HTOuçutSåóm)))==
NULL
)

274 
	`HT_OUTOFMEM
("HTSSLWriter_new");

275 
me
->
iß
 = &
HTSSLWrôî
;

276 
me
->
ch
 = ch;

277 
me
->
ho°
 = host;

278 
me
->
hts¶
 = 
NULL
;

280 
	`HTTRACE
(
STREAM_TRACE
, "HTSSLWrôî. Cª©ed %p\n" 
_
 
me
);

281  
	`HTBuf„rC⁄vîãr_√w
(
ho°
, 
ch
, 
∑øm
, 
mode
, 
me
);

283  
NULL
;

284 
	}
}

	@Library/src/SSL/HTSSLWriter.h

33 #i‚de‡
HTSSLWRITE_H


34 
	#HTSSLWRITE_H


	)

36 
	~"HTIOSåóm.h
"

38 
HTOuçut_√w
 
HTSSLWrôî_√w
;

40 
BOOL
 
HTSSLWrôî_£t
 (
HTOuçutSåóm
 * 
me
,

41 
HTNë
 * 
√t
,

42 
HTCh™√l
 * 
ch
,

43 * 
∑øm
,

44 
mode
);

	@Library/src/SSL/HTSSLhttps.c

23 
	~"wwwsys.h
"

26 
	~"WWWUtû.h
"

27 
	~"WWWC‹e.h
"

28 
	~"WWWHTTP.h
"

29 
	~"WWWAµ.h
"

30 
	~"WWWSSL.h
"

32 
	~"HTSSLhâps.h
"

34 
PRIVATE
 
BOOL
 
	ghâps_öô
 = 
NO
;

36 
PUBLIC
 
BOOL
 
	$HTSSLhâps_öô
 (
BOOL
 
¥ìm±ive
)

38 i‡(!
hâps_öô
) {

41 
	`HTSSL_öô
();

44 
	`HTTøn•‹t_add
("£cuª_t˝", 
HT_TP_SINGLE
, 
HTSSLRódî_√w
, 
HTSSLWrôî_√w
);

47 
	`HTPrŸocﬁ_add
("hâps", "£cuª_t˝", 
SSL_PORT
, 
¥ìm±ive
, 
HTLﬂdHTTP
, 
NULL
);

50 
	`HTNë_addBef‹e
(
HTCªdítülsFûãr
, "hâps://*", 
NULL
, 
HT_FILTER_LATE
);

51 
	`HTNë_addBef‹e
(
HTPEP_bef‹eFûãr
, "hâps://*", 
NULL
, 
HT_FILTER_LATE
);

54 
	`HTNë_addA·î
(
HTAuthFûãr
, "hâps://*", 
NULL
, 
HT_NO_ACCESS
, 
HT_FILTER_MIDDLE
);

55 
	`HTNë_addA·î
(
HTAuthFûãr
, "hâps://*", 
NULL
, 
HT_REAUTH
, 
HT_FILTER_MIDDLE
);

56 
	`HTNë_addA·î
(
HTPEP_a·îFûãr
, "hâps://*", 
NULL
, 
HT_ALL
, 
HT_FILTER_MIDDLE
);

57 
	`HTNë_addA·î
(
HTRedúe˘Fûãr
, "hâps://*", 
NULL
, 
HT_PERM_REDIRECT
, 
HT_FILTER_MIDDLE
);

58 
	`HTNë_addA·î
(
HTRedúe˘Fûãr
, "hâps://*", 
NULL
, 
HT_FOUND
, 
HT_FILTER_MIDDLE
);

59 
	`HTNë_addA·î
(
HTRedúe˘Fûãr
, "hâps://*", 
NULL
, 
HT_SEE_OTHER
, 
HT_FILTER_MIDDLE
);

60 
	`HTNë_addA·î
(
HTRedúe˘Fûãr
, "hâps://*", 
NULL
, 
HT_TEMP_REDIRECT
, 
HT_FILTER_MIDDLE
);

61 
	`HTNë_addA·î
(
HTU£ProxyFûãr
, "hâps://*", 
NULL
, 
HT_USE_PROXY
, 
HT_FILTER_MIDDLE
);

63 
hâps_öô
 = 
YES
;

64  
YES
;

66  
NO
;

67 
	}
}

69 
PUBLIC
 
BOOL
 
	$HTSSLhâps_ãrmö©e
 ()

71 i‡(
hâps_öô
) {

74 
	`HTSSL_ãrmö©e
();

77 
	`HTTøn•‹t_dñëe
("secure_tcp");

80 
	`HTPrŸocﬁ_dñëe
 ("https");

86 
hâps_öô
 = 
NO
;

87  
YES
;

89  
NO
;

90 
	}
}

92 
PUBLIC
 
BOOL
 
	$HTSSLhâps_isInôülized
 ()

94  
hâps_öô
;

95 
	}
}

	@Library/src/SSL/HTSSLhttps.h

18 #i‚de‡
_HTSSLHTTPS_H


19 
	#_HTSSLHTTPS_H


	)

44 #i‚de‡
SSL_PORT


45 
	#SSL_PORT
 443

	)

48 
BOOL
 
HTSSLhâps_öô
 (BOOL 
¥ìm±ive
);

49 
BOOL
 
HTSSLhâps_isInôülized
 ();

50 
BOOL
 
HTSSLhâps_ãrmö©e
 ();

	@Library/src/SSL/WWWSSL.h

26 #i‚de‡
WWWSSL_H


27 
	#WWWSSL_H


	)

32 #ifde‡
__˝lu•lus


46 
	~"wwwsys.h
"

57 
	~"HTSSL.h
"

68 
	~"HTSSLhâps.h
"

79 
	~"HTSSLRódî.h
"

90 
	~"HTSSLWrôî.h
"

95 #ifde‡
__˝lu•lus


	@Library/src/WWWApp.h

31 #i‚de‡
WWWAPP_H


32 
	#WWWAPP_H


	)

37 #ifde‡
__˝lu•lus


50 
	~"wwwsys.h
"

65 
	~"HTEvtL°.h
"

76 
	~"HTHome.h
"

88 
	~"HTDülog.h
"

101 
	~"HTAc˚ss.h
"

116 
	~"HTRuÀs.h
"

136 
	~"HTProxy.h
"

149 
	~"HTFûãr.h
"

162 
	~"HTLog.h
"

173 
	~"HTHi°.h
"

180 #ifde‡
__˝lu•lus


	@Library/src/WWWCache.h

34 #i‚de‡
WWWCACHE_H


35 
	#WWWCACHE_H


	)

40 #ifde‡
__˝lu•lus


54 
	~"wwwsys.h
"

64 
	~"HTCache.h
"

69 #ifde‡
__˝lu•lus


	@Library/src/WWWCore.h

30 #i‚de‡
WWWCORE_H


31 
	#WWWCORE_H


	)

36 #ifde‡
__˝lu•lus


49 
	~"wwwsys.h
"

60 
	~"HTLib.h
"

73 
	~"HTReq.h
"

85 
	~"HTMëhod.h
"

97 
	~"HTAnch‹.h
"

109 
	~"HTLök.h
"

120 
	~"HTP¨£.h
"

133 
	~"HTEsˇ≥.h
"

148 
	~"HTUTªe.h
"

161 
	~"HTWWWSå.h
"

173 
	~"HTU£r.h
"

184 
	~"HTEvít.h
"

196 
	~"HTMemLog.h
"

209 
	~"HTEº‹.h
"

220 
	~"HTAÀπ.h
"

237 
	~"HTF‹m©.h
"

250 
	~"HTSåóm.h
"

264 
	~"HTSåu˘.h
"

277 
	~"HTNoFªe.h
"

289 
	~"HTIOSåóm.h
"

301 
	~"HTDNS.h
"

313 
	~"HTHo°.h
"

327 
	~"HTNë.h
"

339 
	~"HTI√t.h
"

352 
	~"HTTøns.h
"

365 
	~"HTPrŸ.h
"

372 #ifde‡
__˝lu•lus


	@Library/src/WWWDir.h

22 #i‚de‡
WWWDIR_H


23 
	#WWWDIR_H


	)

28 #ifde‡
__˝lu•lus


42 
	~"wwwsys.h
"

55 
	~"HTDú.h
"

76 
	~"HTIc⁄s.h
"

90 
	~"HTDes˝t.h
"

97 #ifde‡
__˝lu•lus


	@Library/src/WWWFTP.h

24 #i‚de‡
WWWFTP_H


25 
	#WWWFTP_H


	)

30 #ifde‡
__˝lu•lus


44 
	~"wwwsys.h
"

55 
	~"HTFTP.h
"

63 
	~"HTFTPDú.h
"

70 #ifde‡
__˝lu•lus


	@Library/src/WWWFile.h

22 #i‚de‡
WWWFILE_H


23 
	#WWWFILE_H


	)

28 #ifde‡
__˝lu•lus


42 
	~"wwwsys.h
"

57 
	~"HTFûe.h
"

77 
	~"HTMu…i.h
"

92 
	~"HTBöd.h
"

104 
	~"HTBInô.h
"

111 #ifde‡
__˝lu•lus


	@Library/src/WWWGophe.h

27 #i‚de‡
WWWGOPHER_H


28 
	#WWWGOPHER_H


	)

34 #ifde‡
__˝lu•lus


49 
	~"wwwsys.h
"

58 
	~"HTG›hî.h
"

66 #ifde‡
__˝lu•lus


	@Library/src/WWWHTML.h

23 #i‚de‡
WWWHTML_H


24 
	#WWWHTML_H


	)

29 #ifde‡
__˝lu•lus


43 
	~"wwwsys.h
"

51 
	~"HTMLPDTD.h
"

52 
	~"SGML.h
"

53 
	~"HTMLGí.h
"

54 
	~"HTTeXGí.h
"

55 
	~"HTPœö.h
"

56 
	~"HTML.h
"

57 
	~"HText.h
"

58 
	~"HTHInô.h
"

59 
	~"HTStyÀ.h
"

66 #ifde‡
__˝lu•lus


	@Library/src/WWWHTTP.h

25 #i‚de‡
WWWHTTP_H


26 
	#WWWHTTP_H


	)

31 #ifde‡
__˝lu•lus


44 
	~"wwwsys.h
"

54 
	~"HTTPUtû.h
"

64 
	~"HTTP.h
"

74 
	~"HTTPSîv.h
"

84 
	~"HTTPGí.h
"

94 
	~"HTTPReq.h
"

104 
	~"HTTPRes.h
"

115 
	~"HTTChunk.h
"

128 
	~"HTPEP.h
"

144 
	~"HTAAUtû.h
"

155 
	~"HTAABrow.h
"

171 
	~"HTCookõ.h
"

178 #ifde‡
__˝lu•lus


	@Library/src/WWWInit.h

32 #i‚de‡
WWWINIT_H


33 
	#WWWINIT_H


	)

38 #ifde‡
__˝lu•lus


51 
	~"HTInô.h
"

68 
	~"HTProfû.h
"

73 #ifde‡
__˝lu•lus


	@Library/src/WWWLib.h

30 #i‚de‡
WWWLIB_H


31 
	#WWWLIB_H


	)

36 #ifde‡
__˝lu•lus


50 
	~"wwwsys.h
"

62 
	~"WWWUtû.h
"

75 
	~"WWWC‹e.h
"

80 #ifde‡
__˝lu•lus


	@Library/src/WWWMIME.h

23 #i‚de‡
WWWMIME_H


24 
	#WWWMIME_H


	)

29 #ifde‡
__˝lu•lus


43 
	~"wwwsys.h
"

63 
	~"HTMIME.h
"

64 
	~"HTHódî.h
"

76 
	~"HTMIMERq.h
"

94 
	~"HTMIMImp.h
"

108 
	~"HTBound.h
"

109 
	~"HTMuÕ¨.h
"

116 #ifde‡
__˝lu•lus


	@Library/src/WWWMux.h

19 #i‚de‡
WWWMUX_H


20 
	#WWWMUX_H


	)

25 #ifde‡
__˝lu•lus


39 
	~"wwwsys.h
"

45 
	~"HTMuxCh.h
"

46 
	~"HTMuxTx.h
"

47 
	~"HTDemux.h
"

53 #ifde‡
__˝lu•lus


	@Library/src/WWWNews.h

25 #i‚de‡
WWWNEWS_H


26 
	#WWWNEWS_H


	)

31 #ifde‡
__˝lu•lus


45 
	~"wwwsys.h
"

55 
	~"HTNews.h
"

65 
	~"HTNewsRq.h
"

75 
	~"HTNewsLs.h
"

85 
	~"HTNDú.h
"

92 #ifde‡
__˝lu•lus


	@Library/src/WWWSQL.h

25 #i‚de‡
WWWSQL_H


26 
	#WWWSQL_H


	)

31 #ifde‡
__˝lu•lus


44 
	~"wwwsys.h
"

57 #ifde‡
HT_MYSQL


58 
	~"HTSQL.h
"

71 #ifde‡
HT_MYSQL


72 
	~"HTSQLLog.h
"

78 #ifde‡
__˝lu•lus


	@Library/src/WWWStream.h

24 #i‚de‡
WWWSTREAM_H


25 
	#WWWSTREAM_H


	)

30 #ifde‡
__˝lu•lus


43 
	~"wwwsys.h
"

55 
	~"HTC⁄Lí.h
"

69 
	~"HTFWrôe.h
"

70 
	~"HTFSave.h
"

85 
	~"HTGuess.h
"

98 
	~"HTTì.h
"

112 
	~"HTMîge.h
"

125 
	~"HTSChunk.h
"

139 
	~"HTXP¨£.h
"

140 
	~"HTEPtoCl.h
"

151 
	~"HTNëTxt.h
"

156 #ifde‡
__˝lu•lus


	@Library/src/WWWTelnt.h

28 #i‚de‡
WWWTELNET_H


29 
	#WWWTELNET_H


	)

35 #ifde‡
__˝lu•lus


50 
	~"wwwsys.h
"

58 
	~"HTTñ√t.h
"

66 #ifde‡
__˝lu•lus


	@Library/src/WWWTrans.h

19 #i‚de‡
WWWTRANS_H


20 
	#WWWTRANS_H


	)

25 #ifde‡
__˝lu•lus


39 
	~"wwwsys.h
"

52 
	~"HTANSI.h
"

53 
	~"HTLoˇl.h
"

61 
	~"HTTCP.h
"

62 
	~"HTSockë.h
"

63 
	~"HTRódî.h
"

64 
	~"HTWrôî.h
"

65 
	~"HTBufWπ.h
"

70 #ifde‡
__˝lu•lus


	@Library/src/WWWUtil.h

28 #i‚de‡
WWWUTIL_H


29 
	#WWWUTIL_H


	)

34 #ifde‡
__˝lu•lus


48 
	~"wwwsys.h
"

62 
	~"HTUtûs.h
"

75 
	~"HTAºay.h
"

87 
	~"HTAssoc.h
"

99 
	~"HTAtom.h
"

111 
	~"HTChunk.h
"

123 
	~"HTLi°.h
"

135 
	~"HTMem‹y.h
"

146 
	~"HTSåög.h
"

162 
	~"HTUU.h
"

169 #ifde‡
__˝lu•lus


	@Library/src/WWWWAIS.h

26 #i‚de‡
WWWWAIS_H


27 
	#WWWWAIS_H


	)

32 #ifde‡
__˝lu•lus


46 
	~"wwwsys.h
"

54 
	~"HTWAIS.h
"

61 #ifde‡
__˝lu•lus


	@Library/src/WWWXML.h

28 #i‚de‡
WWWXML_H


29 
	#WWWXML_H


	)

34 #ifde‡
__˝lu•lus


48 
	~"wwwsys.h
"

56 #ifde‡
HT_EXPAT


57 
	~"HTXML.h
"

71 #ifde‡
HT_EXPAT


72 
	~"HTRDF.h
"

80 #ifde‡
__˝lu•lus


	@Library/src/WWWZip.h

25 #i‚de‡
WWWZIP_H


26 
	#WWWZIP_H


	)

31 #ifde‡
__˝lu•lus


44 
	~"wwwsys.h
"

53 
	~"HTZù.h
"

58 #ifde‡
__˝lu•lus


	@Library/src/vms/HTVMSUtils.c

18 
	~<ssdef.h
>

19 
	~<jpidef.h
>

20 
	~<uaidef.h
>

21 
	~<¥vdef.h
>

22 
	~<a˛def.h
>

23 
	~<¨mdef.h
>

24 
	~<chpdef.h
>

25 
	~< mdef.h
>

26 
	~<libdtdef.h
>

27 
	~<des¸ù.h
>

29 
	~<unixlib.h
>

30 
	~<°dio.h
>

31 
	~<°©.h
>

32 
	~<time.h
>

34 
	~"HTUtûs.h
"

35 
	~"HTVMSUtûs.h
"

36 
	~"HTAc˚ss.h
"

38 
	#INFINITY
 512

	)

42 
	mBuf„rLígth
 : 16;

43 
	mIãmCode
 : 16;

44 
	mBuf„rAddªss
 : 32;

45 
	mRëu∫LígthAddªss
 : 32;

46 } 
	tIãmSåu˘
;

56 
PUBLIC
 
BOOL
 
HTVMS_authSysPrv
 
	gNOARGS


58 
	gResu…
;

59 
IãmSåu˘
 
	gIãmLi°
[2];

60 
	gLígth
;

61 
	gBuf„r
[2];

64 
	gIãmLi°
[0].
	gBuf„rLígth
 = (
Buf„r
);

65 
	gIãmLi°
[0].
	gBuf„rAddªss
 = 
Buf„r
;

66 
	gIãmLi°
[0].
	gRëu∫LígthAddªss
 = &
Lígth
;

67 
	gIãmLi°
[0].
	gIãmCode
 = 
JPI$_AUTHPRIV
;

70 
	gIãmLi°
[1].
	gIãmCode
 = 0;

71 
	gIãmLi°
[1].
	gBuf„rLígth
 = 0;

74 
	gResu…
 = 
SYS$GETJPIW
(0, 0, 0, 
IãmLi°
, 0, 0, 0);

76 i‡(
	gResu…
 !
SS$_NORMAL
)

77 (
NO
);

79 i‡(
	gBuf„r
[0] & 
	gPRV$M_SYSPRV
)

80 (
	gYES
);

82 (
	gNO
);

95 
PUBLIC
 
HTVMS_íabÀSysPrv
 
	gNOARGS


97 
	gResu…
;

98 
	gPrv
[2], 
	gPªviousPrv
[2];

100 
	gPrv
[0] = 
PRV$M_SYSPRV
;

101 
	gPrv
[1] = 0;

102 
	gResu…
 = 
SYS$SETPRV
(1,&
Prv
,0,&
PªviousPrv
);

104 i‡(
	gResu…
 =
SS$_NORMAL
) {

105 i‡(!(
PªviousPrv
[0] & 
PRV$M_SYSPRV
)) {

106 
CTRACE
(
TDEST
, "VMS......... Enabled SYSPRV\n");

121 
PUBLIC
 
HTVMS_dißbÀSysPrv
 
	gNOARGS


123 
	gResu…
;

124 
	gPrv
[2], 
	gPªviousPrv
[2];

126 
	gPrv
[0] = 
PRV$M_SYSPRV
;

127 
	gPrv
[1] = 0;

128 
	gResu…
 = 
SYS$SETPRV
(0,&
Prv
,0,&
PªviousPrv
);

130 i‡(
	gResu…
 =
SS$_NORMAL
) {

131 i‡(
PªviousPrv
[0] & 
PRV$M_SYSPRV
) {

132 
CTRACE
(
TDEST
, "VMS......... Disabled SYSPRV\n");

149 
PUBLIC
 
HTVMS_dißbÀAŒPrv
 
	gNOARGS


151 #i‚de‡
MULTINET


152 
	#bzîo
(
s
,
n
Ë
	`mem£t
(s,'\0',n)

	)

154 
¥vdef
 
	g¥vadr
;

156 
bzîo
((*Ë&
¥vadr
, (prvadr));

157 
	g¥vadr
.
	g¥v$v_cmk∫l
 = 1;

158 
	g¥vadr
.
	g¥v$v_cmexec
 = 1;

159 
	g¥vadr
.
	g¥v$v_sy¢am
 = 1;

160 
	g¥vadr
.
	g¥v$v_gΩ«m
 = 1;

161 
	g¥vadr
.
	g¥v$v_Æl•oﬁ
 = 1;

162 
	g¥vadr
.
	g¥v$v_dëach
 = 1;

163 
	g¥vadr
.
	g¥v$v_dügno£
 = 1;

164 
	g¥vadr
.
	g¥v$v_log_io
 = 1;

165 
	g¥vadr
.
	g¥v$v_group
 = 1;

166 
	g¥vadr
.
	g¥v$v_nﬂ˙t
 = 1;

167 
	g¥vadr
.
	g¥v$v_¥m˚b
 = 1;

168 
	g¥vadr
.
	g¥v$v_¥mmbx
 = 1;

169 
	g¥vadr
.
	g¥v$v_psw≠m
 = 1;

170 
	g¥vadr
.
	g¥v$v_£çri
 = 1;

171 
	g¥vadr
.
	g¥v$v_£çrv
 = 1;

172 
	g¥vadr
.
	g¥v$v_w‹ld
 = 1;

173 
	g¥vadr
.
	g¥v$v_mou¡
 = 1;

174 
	g¥vadr
.
	g¥v$v_›î
 = 1;

175 
	g¥vadr
.
	g¥v$v_exquŸa
 = 1;

176 
	g¥vadr
.
	g¥v$v_vﬁ¥o
 = 1;

177 
	g¥vadr
.
	g¥v$v_phy_io
 = 1;

178 
	g¥vadr
.
	g¥v$v_bugchk
 = 1;

179 
	g¥vadr
.
	g¥v$v_¥mgbl
 = 1;

180 
	g¥vadr
.
	g¥v$v_sysgbl
 = 1;

181 
	g¥vadr
.
	g¥v$v_p‚m≠
 = 1;

182 
	g¥vadr
.
	g¥v$v_shmem
 = 1;

183 
	g¥vadr
.
	g¥v$v_sy•rv
 = 1;

184 
	g¥vadr
.
	g¥v$v_by∑ss
 = 1;

185 
	g¥vadr
.
	g¥v$v_sy¶ck
 = 1;

186 
	g¥vadr
.
	g¥v$v_sh¨e
 = 1;

187 
	g¥vadr
.
	g¥v$v_upgøde
 = 1;

188 
	g¥vadr
.
	g¥v$v_downgøde
 = 1;

189 
	g¥vadr
.
	g¥v$v_gΩ¥v
 = 1;

190 
	g¥vadr
.
	g¥v$v_ªadÆl
 = 1;

191 
	g¥vadr
.
	g¥v$v_£curôy
 = 1;

212 
PUBLIC
 
BOOL
 
HTVMS_checkAc˚ss
 
	$ARGS3
(

213 
CONST
 *, 
FûeName
,

214 
CONST
 *, 
U£rName
,

215 
HTMëhod
, 
Mëhod
)

217 
Resu…
;

218 
IãmSåu˘
 
IãmLi°
[2];

219 
Fœgs
;

220 
FœgsLígth
;

221 
Ac˚ss
;

222 
Ac˚ssLígth
;

223 
ObjTy≥
;

225 *
VmsName
;

226 
F«me
[256];

228 
dsc$des¸ùt‹_s
 
FûeNameDesc
;

229 
dsc$des¸ùt‹_s
 
U£rNameDesc
;

231 *
cﬁ⁄
;

234 i‡(0 =
	`°rcmp
(
U£rName
,""))

236 
	`CTRACE
(
TDEST
, "VMSAccess... Noáccessállowed userÇobody. Error inÑulefile specifying 'nobody'ás uid forÖrotectÑule\n");

237 (
NO
);

241 
	`°r˝y
(
F«me
,
FûeName
);

244 i‡(
F«me
[
	`°æí
(Fname)-1] == '/')

245 
F«me
[
	`°æí
(Fname)-1] = '\0';

248 
cﬁ⁄
 = 
	`°rchr
(
F«me
,':');

249 i‡(
cﬁ⁄
)

250 
VmsName
 = 
	`HTVMS_«me
("",
cﬁ⁄
+1);

252 
VmsName
 = 
	`HTVMS_«me
("",
F«me
);

255 i‡((
Mëhod
 =
METHOD_GET
) ||

256 (
Mëhod
 =
METHOD_HEAD
))

258 
Ac˚ss
 = 
ARM$M_READ
;

259 
Fœgs
 = 
CHP$M_READ
;

262 
IãmLi°
[0].
Buf„rLígth
 = (
Ac˚ss
);

263 
IãmLi°
[0].
Buf„rAddªss
 = &
Ac˚ss
;

264 
IãmLi°
[0].
Rëu∫LígthAddªss
 = &
Ac˚ssLígth
;

265 
IãmLi°
[0].
IãmCode
 = 
CHP$_ACCESS
;

268 
IãmLi°
[1].
Buf„rLígth
 = (
Fœgs
);

269 
IãmLi°
[1].
Buf„rAddªss
 = &
Fœgs
;

270 
IãmLi°
[1].
Rëu∫LígthAddªss
 = &
FœgsLígth
;

271 
IãmLi°
[1].
IãmCode
 = 
CHP$_FLAGS
;

274 
IãmLi°
[2].
IãmCode
 = 0;

275 
IãmLi°
[2].
Buf„rLígth
 = 0;

278 
ObjTy≥
 = 
ACL$C_FILE
;

279 
U£rNameDesc
.
dsc$w_Àngth
 = 
	`°æí
(
U£rName
);

280 
U£rNameDesc
.
dsc$b_dty≥
 = 
DSC$K_DTYPE_T
;

281 
U£rNameDesc
.
dsc$b_˛ass
 = 
DSC$K_CLASS_S
;

282 
U£rNameDesc
.
dsc$a_poöãr
 = 
U£rName
;

283 
FûeNameDesc
.
dsc$w_Àngth
 = 
	`°æí
(
VmsName
);

284 
FûeNameDesc
.
dsc$b_dty≥
 = 
DSC$K_DTYPE_T
;

285 
FûeNameDesc
.
dsc$b_˛ass
 = 
DSC$K_CLASS_S
;

286 
FûeNameDesc
.
dsc$a_poöãr
 = 
VmsName
;

289 
Resu…
 = 
	`SYS$CHECK_ACCESS
(&
ObjTy≥
,&
FûeNameDesc
,&
U£rNameDesc
,
IãmLi°
);

291 i‡(
Resu…
 =
SS$_NORMAL
)

292 (
YES
);

295 
	`°rˇt
(
VmsName
,".dir");

296 
FûeNameDesc
.
dsc$w_Àngth
 = 
	`°æí
(
VmsName
);

297 
Resu…
 = 
	`SYS$CHECK_ACCESS
(&
ObjTy≥
,&
FûeNameDesc
,&
U£rNameDesc
,
IãmLi°
);

299 i‡(
Resu…
 =
SS$_NORMAL
)

300 (
YES
);

303 
	`CTRACE
(
TDEST
, "VMSAc˚ss... Nÿac˚s†Ælowed f‹ u£∏'%s', fûê'%s' undî mëhod '%s'\n",
U£rName
,
F«me
,
	`HTMëhod_«me
(
Mëhod
));

304 (
NO
);

307 
	`CTRACE
(
TDEST
, "VMSAc˚ss... Nÿac˚s†Ælowed f‹ mëhod '%s'\n",
	`HTMëhod_«me
(
Mëhod
));

309 (
NO
);

310 
	}
}

344 
PUBLIC
 * 
HTVMS_wwwName
 
	$ARGS1
(

345 *, 
vm¢ame
)

347 
www«me
[256];

348 *
§c
, *
d°
;

349 
dú
, 
up
;

350 
d°
 = 
www«me
;

351 
§c
 = 
vm¢ame
;

352 
dú
 = 0;

353 
up
 = 0;

354 i‡(
	`°rchr
(
§c
,':')Ë*(
d°
++) = '/';

355  ; *
§c
 != '\0' ; src++)

357 *
§c
)

359 ':': *(
d°
++) = '/'; ;

361 i‡(
up
)

363 i‡(*(
§c
-1Ë='-'Ë*(
d°
++) = '/';

364 *(
d°
++) = '.';

365 *(
d°
++) = '.';

369 *(
d°
++) = '-';

372 '.': i‡(
dú
)

374 i‡(*(
§c
-1Ë!'['Ë*(
d°
++) = '/';

375 
up
 = 1;

379 i‡(*(
§c
-1Ë=']'Ë*(
d°
++) = '/';

380 *(
d°
++) = '.';

383 '[': 
dú
 = 1; 
up
 = 1; ;

384 ']': 
dú
 = 0; 
up
 = 0; ;

385 : 
up
 = 0;

386 i‡(*(
§c
-1Ë=']'Ë*(
d°
++) = '/';

387 *(
d°
++Ë*
§c
;

391 *(
d°
++) = '\0';

392 (
www«me
);

393 
	}
}

407 
PUBLIC
 * 
HTVMS_«me
 
	$ARGS2
(

408 
CONST
 *, 
¬
,

409 
CONST
 *, 
‚
)

419 
vm¢ame
[
INFINITY
];

420 * 
fûíame
 = (*)
	`mÆloc
(
	`°æí
(
‚
)+1);

421 * 
nodíame
 = (*)
	`mÆloc
(
	`°æí
(
¬
)+2+1);

422 *
£c⁄d
;

423 *
œ°
;

425 * 
ho°«me
 = 
	`HTGëHo°Name
();

427 i‡(!
fûíame
 || !
nodíame
Ë
	`outofmem
(
__FILE__
, "HTVMSname");

428 
	`°r˝y
(
fûíame
, 
‚
);

429 
	`°r˝y
(
nodíame
, "");

431 *
p
, *
q
;

432 
p
=
ho°«me
, 
q
=
¬
; *p && *p!='.' && *q && *q!='.';Ö++, q++){

433 i‡(
	`TOUPPER
(*
p
)!=TOUPPER(*
q
)) {

434 
	`°r˝y
(
nodíame
, 
¬
);

435 
q
 = 
	`°rchr
(
nodíame
, '.');

436 i‡(
q
) *q=0;

437 
	`°rˇt
(
nodíame
, "::");

443 
£c⁄d
 = 
	`°rchr
(
fûíame
+1, '/');

444 
œ°
 = 
	`°ºchr
(
fûíame
, '/');

446 i‡(!
£c⁄d
) {

447 
	`•rötf
(
vm¢ame
, "%s%s", 
nodíame
, 
fûíame
 + 1);

448 } if(
£c⁄d
==
œ°
) {

449 *
£c⁄d
 = 0;

450 
	`•rötf
(
vm¢ame
, "%s%s:%s", 
nodíame
, 
fûíame
+1, 
£c⁄d
+1);

451 *
£c⁄d
 = '/';

453 * 
p
;

454 *
£c⁄d
 = 0;

455 *
œ°
 = 0;

456 
	`•rötf
(
vm¢ame
, "%s%s:[%s]%s",

457 
nodíame
, 
fûíame
+1, 
£c⁄d
+1, 
œ°
+1);

458 *
£c⁄d
 = *
œ°
 = '/';

459 
p
=
	`°rchr
(
vm¢ame
, '['); *p!=']';Ö++)

460 i‡(*
p
=='/') *p='.';

462 
	`‰ì
(
nodíame
);

463 
	`‰ì
(
fûíame
);

464  
vm¢ame
;

465 
	}
}

480 
PUBLIC
 
HTVMS_puãnv
 
	$ARGS1
(

481 
CONST
 *, 
°rög
)

483 
	`$DESCRIPTOR
(
job_èbÀ
,"LNM$JOB");

484 * 
«me
 = (*)
	`mÆloc
(
	`°æí
(
°rög
)+1);

485 * 
vÆue
 = (*)
	`mÆloc
(
	`°æí
(
°rög
)+1);

486 * 
equÆ
;

487 
ªsu…
 = 1;

490 
	`°r˝y
(
«me
,
°rög
);

491 
equÆ
 = 
	`°rchr
(
«me
,'=');

492 i‡(
equÆ
)

494 
IãmSåu˘
 
IãmLi°
[2];

495 
dsc$des¸ùt‹_s
 
log_«me
;

498 *
equÆ
 = '\0';

499 
	`°r˝y
(
vÆue
,
equÆ
+1);

502 
log_«me
.
dsc$w_Àngth
 = 
	`°æí
(
«me
);

503 
log_«me
.
dsc$b_dty≥
 = 
DSC$K_DTYPE_T
;

504 
log_«me
.
dsc$b_˛ass
 = 
DSC$K_CLASS_S
;

505 
log_«me
.
dsc$a_poöãr
 = 
«me
;

508 
IãmLi°
[0].
Buf„rLígth
 = 
	`°æí
(
vÆue
);

509 
IãmLi°
[0].
Buf„rAddªss
 = 
vÆue
;

510 
IãmLi°
[0].
Rëu∫LígthAddªss
 = 0;

511 
IãmLi°
[0].
IãmCode
 = 
LNM$_STRING
;

514 
IãmLi°
[1].
IãmCode
 = 0;

515 
IãmLi°
[1].
Buf„rLígth
 = 0;

518 
ªsu…
 = 
	`SYS$CRELNM
(0, &
job_èbÀ
, &
log_«me
, 0, 
IãmLi°
);

519 i‡((
ªsu…
 =
SS$_NORMAL
Ë|| (ªsu… =
SS$_SUPERSEDE
))

520 
ªsu…
 = 0;

522 
ªsu…
 = 1;

525 
	`‰ì
(
«me
);

526 
	`‰ì
(
vÆue
);

528 (
ªsu…
);

529 
	}
}

546 
PUBLIC
 
HTVMS_°¨t_timî
 
	$ARGS3
(

547 
CONST
 , 
n
,

548 
CONST
 *, 
fun
,

549 
CONST
 , 
£c
)

551 
Resu…
;

552 
DñèTime
[2];

553 
O≥øti⁄
 = 
LIB$K_DELTA_SECONDS
;

555 
Resu…
 = 
	`LIB$CVT_TO_INTERNAL_TIME
(&
O≥øti⁄
, &
£c
, 
DñèTime
);

557 
Resu…
 = 
	`SYS$SETIMR
(0, 
DñèTime
, 
fun
, 
n
, 0);

558 
	}
}

570 
PUBLIC
 
HTVMS_ˇn˚l_timî
 
	$ARGS1
(

571 
CONST
 , 
n
)

573 
Resu…
;

575 
Resu…
 = 
	`SYS$CANTIM
(
n
, 0);

576 
	}
}

590 
PUBLIC
 
∑sswd
 *
HTVMS_gëpw«m
 
	$ARGS1
(

591 
CONST
 *, 
u£∫ame
)

593 
Resu…
;

594 
dsc$des¸ùt‹_s
 
U£rNameDesc
;

595 
IãmSåu˘
 
IãmLi°
[3];

596 
Devi˚Lígth
;

597 
Devi˚
[33];

598 
DúLígth
;

599 
Dú
[64];

600 
VMSName
[100];

601 
∑sswd
 
pw
;

602 
pw_dú
[100];

605 
pw
.
pw_dú
 =Öw_dir;

608 
U£rNameDesc
.
dsc$w_Àngth
 = 
	`°æí
(
u£∫ame
);

609 
U£rNameDesc
.
dsc$b_dty≥
 = 
DSC$K_DTYPE_T
;

610 
U£rNameDesc
.
dsc$b_˛ass
 = 
DSC$K_CLASS_S
;

611 
U£rNameDesc
.
dsc$a_poöãr
 = 
u£∫ame
;

614 
IãmLi°
[0].
Buf„rLígth
 = 33;

615 
IãmLi°
[0].
Buf„rAddªss
 = 
Devi˚
;

616 
IãmLi°
[0].
Rëu∫LígthAddªss
 = &
Devi˚Lígth
;

617 
IãmLi°
[0].
IãmCode
 = 
UAI$_DEFDEV
;

620 
IãmLi°
[1].
Buf„rLígth
 = 64;

621 
IãmLi°
[1].
Buf„rAddªss
 = 
Dú
;

622 
IãmLi°
[1].
Rëu∫LígthAddªss
 = &
DúLígth
;

623 
IãmLi°
[1].
IãmCode
 = 
UAI$_DEFDIR
;

626 
IãmLi°
[2].
IãmCode
 = 0;

627 
IãmLi°
[2].
Buf„rLígth
 = 0;

630 
Resu…
 = 
	`SYS$GETUAI
(0,0,&
U£rNameDesc
,
IãmLi°
,0,0,0);

631 i‡(
Resu…
 !
SS$_NORMAL
)

632 (
NULL
);

635 
	`°∫˝y
(
VMSName
,&(
Devi˚
[1]),Device[0]);

636 
VMSName
[
Devi˚
[0]] = '\0';

637 
	`°∫ˇt
(
VMSName
,&(
Dú
[1]),Dir[0]);

638 
VMSName
[
Devi˚
[0]+
Dú
[0]] = '\0';

641 
	`°r˝y
(
pw_dú
,
	`HTVMS_wwwName
(
VMSName
));

643 (&
pw
);

644 
	}
}

648 
PUBLIC
 
HTSèt
 
	$ARGS2
(

649 *, 
fûíame
,

650 
°©_t
 *, 
öfo
)

666 
Resu…
;

667 
Lí
;

668 *
På
, *
På2
;

669 
Name
[256];

672 
Resu…
 = 
	`°©
(
fûíame
,
öfo
);

673 i‡(
Resu…
 == 0)

674 (
Resu…
);

677 
	`°r˝y
(
Name
,
fûíame
);

682 i‡(
	`HTVMS_checkDe˙ë
(
Name
))

685 
öfo
->
°_dev
 = 
NULL
;

686 
öfo
->
°_öo
[0] = 0;

687 
öfo
->
°_öo
[1] = 0;

688 
öfo
->
°_öo
[2] = 0;

689 
öfo
->
°_mode
 = 
S_IFREG
 | 
S_IREAD
;

690 
öfo
->
°_∆ök
 = 
NULL
;

691 
öfo
->
°_uid
 = 0;

692 
öfo
->
°_gid
 = 0;

693 
öfo
->
°_rdev
 = 0;

694 
öfo
->
°_size
 = 0;

695 
öfo
->
°_©ime
 = 
	`time
(
NULL
);

696 
öfo
->
°_mtime
 = 
	`time
(
NULL
);

697 
öfo
->
°_˘ime
 = 
	`time
(
NULL
);

703 i‡(!
	`°rcmp
(
Name
,"/"))

709 
Lí
 = 
	`°æí
(
Name
);

710 i‡(
Name
[
Lí
-1] == '/')

711 
Name
[
Lí
-1] = '\0';

714 
På
 = 
	`°rchr
(
Name
+1,'/');

715 i‡((
På
 =
NULL
Ë&& (
Name
[0] == '/'))

717 
	`°rˇt
(
Name
,"/000000/000000");

720 i‡(
På
 !
NULL
)

722 
På2
 = 
	`°rchr
(
På
+1,'/');

723 i‡((
På2
 =
NULL
Ë&& (
Name
[0] == '/'))

725 
End
[256];

726 
	`°r˝y
(
End
,
På
);

727 *(
På
+1) = '\0';

728 
	`°rˇt
(
Name
,"000000");

729 
	`°rˇt
(
Name
,
End
);

734 
Resu…
 = 
	`°©
(
Name
,
öfo
);

735 i‡(
Resu…
 == 0)

736 (
Resu…
);

739 
	`°rˇt
(
Name
,".dir");

740 
Resu…
 = 
	`°©
(
Name
,
öfo
);

741 (
Resu…
);

742 
	}
}

746 
PUBLIC
 
HTVMS_checkDe˙ë
 
	$ARGS1
(

747 *, 
fûíame
)

753 
¶ash
 = 1;

754 i‡(
fûíame
[0] == '/')

755 
¶ash
 = 1; (
fûíame
[slash] != '\0') && (filename[slash] != '/'); slash++)

759 i‡(
fûíame
[
¶ash
] == '/')

761 i‡–((
¶ash
 >1Ë&& (
fûíame
[slash-1] == '!')) ||

762 ((
¶ash
 >3Ë&& (!
	`°rcmp
(&
fûíame
[slash-3],"%21"))) )

764 *
p
;

765 
p
 = 
fûíame
; *(p+1) != '\0';Ö++)

766 *
p
 = *(p+1);

767 *
p
 = *(p+1);

773 i‡(
	`°r°r
(
fûíame
,"::") ||

774 
	`°r°r
(
fûíame
,"%3A%3A") )

776 *
p
;

777 
p
 = 
fûíame
; *(p+1) != '\0';Ö++)

778 *
p
 = *(p+1);

779 *
p
 = *(p+1);

784 
	}
}

799 
PUBLIC
 
HTVMS_gëUIC
 
	$ARGS1
(

800 
CONST
 *, 
u£∫ame
)

802 
Resu…
;

803 
dsc$des¸ùt‹_s
 
U£rNameDesc
;

804 
IãmSåu˘
 
IãmLi°
[2];

805 
UIC
;

806 
UICLígth
;

809 
U£rNameDesc
.
dsc$w_Àngth
 = 
	`°æí
(
u£∫ame
);

810 
U£rNameDesc
.
dsc$b_dty≥
 = 
DSC$K_DTYPE_T
;

811 
U£rNameDesc
.
dsc$b_˛ass
 = 
DSC$K_CLASS_S
;

812 
U£rNameDesc
.
dsc$a_poöãr
 = 
u£∫ame
;

815 
IãmLi°
[0].
Buf„rLígth
 = (
UIC
);

816 
IãmLi°
[0].
Buf„rAddªss
 = &
UIC
;

817 
IãmLi°
[0].
Rëu∫LígthAddªss
 = &
UICLígth
;

818 
IãmLi°
[0].
IãmCode
 = 
UAI$_UIC
;

821 
IãmLi°
[1].
IãmCode
 = 0;

822 
IãmLi°
[1].
Buf„rLígth
 = 0;

825 
Resu…
 = 
	`SYS$GETUAI
(0,0,&
U£rNameDesc
,
IãmLi°
,0,0,0);

826 i‡(
Resu…
 !
SS$_NORMAL
)

829 ((Ë
UIC
);

830 
	}
}

845 
PUBLIC
 
BOOL
 
HTVMS_isOw√r
 
	$ARGS2
(

846 
CONST
 *, 
FûeName
,

847 
CONST
 *, 
U£rName
)

849 
°©
 
buf
;

850 
Resu…
;

853 i‡(0 =
	`°rcmp
(
U£rName
,""))

855 
	`CTRACE
(
TDEST
, "VMSisOwner.. Noáccessállowed userÇobody.\n");

856 (
NO
);

860 
Resu…
 = 
	`HTSèt
(
FûeName
, &
buf
);

861 i‡(
Resu…
) {

862 
	`CTRACE
(
TDEST
, "VMSisOw√r.. HTSèt(ËÁûed f‹ '%s'\n", 
FûeName
);

863  
NO
;

867 i‡(
buf
.
°_uid
 !
	`HTVMS_gëUIC
(
U£rName
)) {

868 
	`CTRACE
(
TDEST
, "VMSisOwner.. '%s' doesÇot own '%s'\n",

869 
U£rName
, 
FûeName
);

870  
NO
;

873  
YES
;

874 
	}
}

	@Library/src/vms/HTVMSUtils.h

5 #i‚de‡
HTVMSUTIL_H


6 
	#HTVMSUTIL_H


	)

10 
	#S_IFLNK
 0120000

	)

11 
	#S_IFSOCK
 0140000

	)

12 
	#S_IFIFO
 0010000

	)

14 
	#S_IRWXU
 0000700

	)

15 
	#S_IRUSR
 0000400

	)

16 
	#S_IWUSR
 0000200

	)

17 
	#S_IXUSR
 0000100

	)

18 
	#S_IRWXG
 0000070

	)

19 
	#S_IRGRP
 0000040

	)

20 
	#S_IWGRP
 0000020

	)

21 
	#S_IXGRP
 0000010

	)

22 
	#S_IRWXO
 0000007

	)

23 
	#S_IROTH
 0000004

	)

24 
	#S_IWOTH
 0000002

	)

25 
	#S_IXOTH
 0000001

	)

37 
PUBLIC
 
BOOL
 
HTVMS_authSysPrv
 
	gNOPARAMS
;

48 
PUBLIC
 
HTVMS_íabÀSysPrv
 
	gNOPARAMS
;

59 
PUBLIC
 
HTVMS_dißbÀSysPrv
 
	gNOPARAMS
;

71 
PUBLIC
 
BOOL
 
HTVMS_checkAc˚ss
 
PARAMS
((

72 
CONST
 * 
FûeName
,

73 
CONST
 * 
U£rName
,

74 
HTMëhod
 
Mëhod
));

102 
PUBLIC
 * 
HTVMS_wwwName
 
PARAMS
((

103 * 
vm¢ame
));

116 
PUBLIC
 * 
HTVMS_«me
 
PARAMS
((

117 
CONST
 * 
¬
,

118 
CONST
 * 
‚
));

130 
PUBLIC
 
HTVMS_puãnv
 
PARAMS
((

131 
CONST
 * 
°rög
));

145 
PUBLIC
 
HTVMS_°¨t_timî
 
PARAMS
((

146 
CONST
 
n
,

147 
CONST
 (*
fun
)(),

148 
CONST
 
£c
));

160 
PUBLIC
 
HTVMS_ˇn˚l_timî
 
PARAMS
((

161 
CONST
 
n
));

165 
	#gëpw«m
 
HTVMS_gëpw«m


	)

166 
	s∑sswd


168 *
	mpw_dú
;

182 
PUBLIC
 
∑sswd
 *
HTVMS_gëpw«m
 
PARAMS
((

183 
CONST
 *, 
u£∫ame
));

186 
PUBLIC
 
HTSèt
 
PARAMS
((

187 
CONST
 *, 
fûíame
,

188 
°©_t
 *, 
öfo
));

190 
PUBLIC
 
HTVMS_checkDe˙ë
 
PARAMS
((

191 
CONST
 *, 
fûíame
));

205 
PUBLIC
 
HTVMS_gëUIC
 
PARAMS
((

206 
CONST
 *, 
u£∫ame
));

220 
PUBLIC
 
BOOL
 
HTVMS_isOw√r
 
PARAMS
((

221 
CONST
 *, 
FûeName
,

222 
CONST
 *, 
U£rName
));

	@Library/src/vms/crypt.c

26 
	~"ufc-¸y±.h
"

28 #ifde‡
_UFC_32_


34 
l⁄g32
 
_ufc_keyèb
[16][2];

35 
l⁄g32
 
_ufc_sb0
[], 
_ufc_sb1
[], 
_ufc_sb2
[], 
_ufc_sb3
[];

37 
	#SBA
(
sb
, 
v
Ë(*(
l⁄g32
*)((*)(sb)+(v)))

	)

39 
ufc_l⁄g
 
	g¨y
[4];

41 
ufc_l⁄g
 *
	$_ufc_doô
(
l1
, 
l2
, 
r1
, 
r2
, 
ôr
)

42 
ufc_l⁄g
 
l1
, 
l2
, 
r1
, 
r2
, 
ôr
;

43 { 
i
;

44 
l⁄g32
 
s
, *
k
;

45 
l⁄g32
 *
sb0
 = 
_ufc_sb0
;

46 
l⁄g32
 *
sb1
 = 
_ufc_sb1
;

47 
l⁄g32
 *
sb2
 = 
_ufc_sb2
;

48 
l⁄g32
 *
sb3
 = 
_ufc_sb3
;

50 
ôr
--) {

51 
k
 = &
_ufc_keyèb
[0][0];

52 
i
=8; i--; ) {

53 
s
 = *
k
++ ^ 
r1
;

54 
l1
 ^
	`SBA
(
sb1
, 
s
 & 0xffff); 
l2
 ^= SBA(sb1, (s & 0xffff)+4);

55 
l1
 ^
	`SBA
(
sb0
, 
s
 >>16); 
l2
 ^= SBA(sb0, (s) +4);

56 
s
 = *
k
++ ^ 
r2
;

57 
l1
 ^
	`SBA
(
sb3
, 
s
 & 0xffff); 
l2
 ^= SBA(sb3, (s & 0xffff)+4);

58 
l1
 ^
	`SBA
(
sb2
, 
s
 >>16); 
l2
 ^= SBA(sb2, (s) +4);

60 
s
 = *
k
++ ^ 
l1
;

61 
r1
 ^
	`SBA
(
sb1
, 
s
 & 0xffff); 
r2
 ^= SBA(sb1, (s & 0xffff)+4);

62 
r1
 ^
	`SBA
(
sb0
, 
s
 >>16); 
r2
 ^= SBA(sb0, (s) +4);

63 
s
 = *
k
++ ^ 
l2
;

64 
r1
 ^
	`SBA
(
sb3
, 
s
 & 0xffff); 
r2
 ^= SBA(sb3, (s & 0xffff)+4);

65 
r1
 ^
	`SBA
(
sb2
, 
s
 >>16); 
r2
 ^= SBA(sb2, (s) +4);

67 
s
=
l1
;Ü1=
r1
;Ñ1=s; s=
l2
;Ü2=
r2
;Ñ2=s;

69 
¨y
[0] = 
l1
;áry[1] = 
l2
;áry[2] = 
r1
;áry[3] = 
r2
;

70  
¨y
;

71 
	}
}

75 #ifde‡
_UFC_64_


81 
l⁄g64
 
_ufc_keyèb
[16];

82 
l⁄g64
 
_ufc_sb0
[], 
_ufc_sb1
[], 
_ufc_sb2
[], 
_ufc_sb3
[];

84 
	#SBA
(
sb
, 
v
Ë(*(
l⁄g64
*)((*)(sb)+(v)))

	)

86 
ufc_l⁄g
 
	g¨y
[4];

88 
ufc_l⁄g
 *
	$_ufc_doô
(
l1
, 
l2
, 
r1
, 
r2
, 
ôr
)

89 
ufc_l⁄g
 
l1
, 
l2
, 
r1
, 
r2
, 
ôr
;

90 { 
i
;

91 
l⁄g64
 
l
, 
r
, 
s
, *
k
;

92 
l⁄g64
 *
sb0
 = 
_ufc_sb0
;

93 
l⁄g64
 *
sb1
 = 
_ufc_sb1
;

94 
l⁄g64
 *
sb2
 = 
_ufc_sb2
;

95 
l⁄g64
 *
sb3
 = 
_ufc_sb3
;

97 
l
 = (((
l⁄g64
)
l1
Ë<< 32Ë| (÷⁄g64)
l2
);

98 
r
 = (((
l⁄g64
)
r1
Ë<< 32Ë| (÷⁄g64)
r2
);

100 
ôr
--) {

101 
k
 = &
_ufc_keyèb
[0];

102 
i
=8; i--; ) {

103 
s
 = *
k
++ ^ 
r
;

104 
l
 ^
	`SBA
(
sb3
, (
s
 >> 0) & 0xffff);

105 
l
 ^
	`SBA
(
sb2
, (
s
 >> 16) & 0xffff);

106 
l
 ^
	`SBA
(
sb1
, (
s
 >> 32) & 0xffff);

107 
l
 ^
	`SBA
(
sb0
, (
s
 >> 48) & 0xffff);

109 
s
 = *
k
++ ^ 
l
;

110 
r
 ^
	`SBA
(
sb3
, (
s
 >> 0) & 0xffff);

111 
r
 ^
	`SBA
(
sb2
, (
s
 >> 16) & 0xffff);

112 
r
 ^
	`SBA
(
sb1
, (
s
 >> 32) & 0xffff);

113 
r
 ^
	`SBA
(
sb0
, (
s
 >> 48) & 0xffff);

115 
s
=
l
;Ü=
r
;Ñ=s;

118 
¨y
[0] = 
l
 >> 32;áry[1] =Ü & 0xffffffff;

119 
¨y
[2] = 
r
 >> 32;áry[3] =Ñ & 0xffffffff;

120  
¨y
;

121 
	}
}

	@Library/src/vms/crypt_util.c

26 #ifde‡
DEBUG


27 
	~<°dio.h
>

30 #i‚de‡
STATIC


31 
	#STATIC
 

	)

34 #i‚de‡
DOS


35 
	~"∑tchÀvñ.h
"

36 
	~"ufc-¸y±.h
"

42 
	~"∂.h
"

43 
	~"ufc.h
"

46 
	g∑tchÀvñ_°r
[] = 
PATCHLEVEL
;

52 
	gpc1
[56] = {

63 
	grŸs
[16] = {

71 
	gpc2
[48] = {

82 
	ge£l
[48] = {

88 
	ge_övî£
[64];

94 
	g≥rm32
[32] = {

102 
	gsbox
[8][4][16]= {

156 
	göôül_≥rm
[64] = {

167 
	gföÆ_≥rm
[64] = {

177 #ifde‡
_UFC_32_


178 
l⁄g32
 
	g_ufc_keyèb
[16][2];

180 #ifde‡
_UFC_64_


181 
l⁄g64
 
	g_ufc_keyèb
[16];

184 
	#ascii_to_bö
(
c
Ë((c)>='a'?(c-59):(c)>='A'?((c)-53):(c)-'.')

	)

185 
	#bö_to_ascii
(
c
Ë((c)>=38?((c)-38+'a'):(c)>=12?((c)-12+'A'):(c)+'.')

	)

188 
	#BITMASK
(
i
Ë–(1L<<(11L-(i)%12L+3L)Ë<< ((i)<12L?16L:0LË)

	)

200 #ifde‡
_UFC_32_


201 
l⁄g32
 
	g_ufc_sb0
[8192], 
	g_ufc_sb1
[8192], 
	g_ufc_sb2
[8192], 
	g_ufc_sb3
[8192];

202 
l⁄g32
 *
	gsb
[4] = {
_ufc_sb0
, 
_ufc_sb1
, 
_ufc_sb2
, 
_ufc_sb3
};

205 #ifde‡
_UFC_64_


206 
l⁄g64
 
	g_ufc_sb0
[4096], 
	g_ufc_sb1
[4096], 
	g_ufc_sb2
[4096], 
	g_ufc_sb3
[4096];

207 
l⁄g64
 *
	gsb
[4] = {
_ufc_sb0
, 
_ufc_sb1
, 
_ufc_sb2
, 
_ufc_sb3
};

219 
ufc_l⁄g
 
	gïîm32èb
[4][256][2];

231 
ufc_l⁄g
 
	gdo_pc1
[8][2][128];

244 
ufc_l⁄g
 
	gdo_pc2
[8][128];

253 
ufc_l⁄g
 
	geÂ
[16][64][2];

261 
ufc_l⁄g
 
	gªvföÆ
[11][64][4];

264 
	gbyãmask
[8] = {

268 
ufc_l⁄g
 
	gl⁄gmask
[32] = {

279 #ifde‡
DEBUG


281 
	$¥_bôs
(
a
, 
n
)

282 
ufc_l⁄g
 *
a
;

283 
n
;

284 { 
ufc_l⁄g
 
i
, 
j
, 
t
, 
tmp
;

285 
n
 /= 8;

286 
i
 = 0; i < 
n
; i++) {

287 
tmp
=0;

288 
j
 = 0; j < 8; j++) {

289 
t
=8*
i
+
j
;

290 
tmp
|=(
a
[
t
/24] & 
	`BITMASK
— % 24))?
byãmask
[
j
]:0;

292 ()
	`¥ötf
("%02x ",
tmp
);

294 
	`¥ötf
(" ");

295 
	}
}

297 
	$£t_bôs
(
v
, 
b
)

298 
ufc_l⁄g
 
v
;

299 
ufc_l⁄g
 *
b
;

300 { 
ufc_l⁄g
 
i
;

301 *
b
 = 0;

302 
i
 = 0; i < 24; i++) {

303 if(
v
 & 
l⁄gmask
[8 + 
i
])

304 *
b
 |
	`BITMASK
(
i
);

306 
	}
}

316 
STATIC
 
	$˛órmem
(
°¨t
, 
˙t
)

317 *
°¨t
;

318 
˙t
;

319 { 
˙t
--)

320 *
°¨t
++ = '\0';

321 
	}
}

323 
	göôülized
 = 0;

327 
	#s_lookup
(
i
,
s
Ë
sbox
[(i)][(((s)>>4Ë& 0x2)|((sË& 0x1)][((s)>>1Ë& 0xf];

	)

334 
	$öô_des
()

335 { 
comes_‰om_bô
;

336 
bô
, 
sg
;

337 
ufc_l⁄g
 
j
;

338 
ufc_l⁄g
 
mask1
, 
mask2
;

345 
bô
 = 0; bit < 56; bit++) {

346 
comes_‰om_bô
 = 
pc1
[
bô
] - 1;

347 
mask1
 = 
byãmask
[
comes_‰om_bô
 % 8 + 1];

348 
mask2
 = 
l⁄gmask
[
bô
 % 28 + 4];

349 
j
 = 0; j < 128; j++) {

350 if(
j
 & 
mask1
)

351 
do_pc1
[
comes_‰om_bô
 / 8][
bô
 / 28][
j
] |
mask2
;

360 
bô
 = 0; bit < 48; bit++) {

361 
comes_‰om_bô
 = 
pc2
[
bô
] - 1;

362 
mask1
 = 
byãmask
[
comes_‰om_bô
 % 7 + 1];

363 
mask2
 = 
	`BITMASK
(
bô
 % 24);

364 
j
 = 0; j < 128; j++) {

365 if(
j
 & 
mask1
)

366 
do_pc2
[
comes_‰om_bô
 / 7][
j
] |
mask2
;

382 
	`˛órmem
((*)
ïîm32èb
, (eperm32tab));

384 
bô
 = 0; bit < 48; bit++) {

385 
ufc_l⁄g
 
mask1
,
comes_‰om
;

387 
comes_‰om
 = 
≥rm32
[
e£l
[
bô
]-1]-1;

388 
mask1
 = 
byãmask
[
comes_‰om
 % 8];

390 
j
 = 256; j--;) {

391 if(
j
 & 
mask1
)

392 
ïîm32èb
[
comes_‰om
 / 8][
j
][
bô
 / 24] |
	`BITMASK
(bit % 24);

408 
sg
 = 0; sg < 4; sg++) {

409 
j1
, 
j2
;

410 
s1
, 
s2
;

412 
j1
 = 0; j1 < 64; j1++) {

413 
s1
 = 
	`s_lookup
(2 * 
sg
, 
j1
);

414 
j2
 = 0; j2 < 64; j2++) {

415 
ufc_l⁄g
 
to_≥rmuã
, 
öx
;

417 
s2
 = 
	`s_lookup
(2 * 
sg
 + 1, 
j2
);

418 
to_≥rmuã
 = (((
ufc_l⁄g
)
s1
 << 4) |

419 (
ufc_l⁄g
)
s2
Ë<< (24 - 8 * (ufc_l⁄g)
sg
);

421 #ifde‡
_UFC_32_


422 
öx
 = ((
j1
 << 6Ë| 
j2
) << 1;

423 
sb
[
sg
][
öx
 ] = 
ïîm32èb
[0][(
to_≥rmuã
 >> 24) & 0xff][0];

424 
sb
[
sg
][
öx
+1] = 
ïîm32èb
[0][(
to_≥rmuã
 >> 24) & 0xff][1];

425 
sb
[
sg
][
öx
 ] |
ïîm32èb
[1][(
to_≥rmuã
 >> 16) & 0xff][0];

426 
sb
[
sg
][
öx
+1] |
ïîm32èb
[1][(
to_≥rmuã
 >> 16) & 0xff][1];

427 
sb
[
sg
][
öx
 ] |
ïîm32èb
[2][(
to_≥rmuã
 >> 8) & 0xff][0];

428 
sb
[
sg
][
öx
+1] |
ïîm32èb
[2][(
to_≥rmuã
 >> 8) & 0xff][1];

429 
sb
[
sg
][
öx
 ] |
ïîm32èb
[3][(
to_≥rmuã
) & 0xff][0];

430 
sb
[
sg
][
öx
+1] |
ïîm32èb
[3][(
to_≥rmuã
) & 0xff][1];

432 #ifde‡
_UFC_64_


433 
öx
 = ((
j1
 << 6Ë| 
j2
);

434 
sb
[
sg
][
öx
] =

435 ((
l⁄g64
)
ïîm32èb
[0][(
to_≥rmuã
 >> 24) & 0xff][0] << 32) |

436 (
l⁄g64
)
ïîm32èb
[0][(
to_≥rmuã
 >> 24) & 0xff][1];

437 
sb
[
sg
][
öx
] |=

438 ((
l⁄g64
)
ïîm32èb
[1][(
to_≥rmuã
 >> 16) & 0xff][0] << 32) |

439 (
l⁄g64
)
ïîm32èb
[1][(
to_≥rmuã
 >> 16) & 0xff][1];

440 
sb
[
sg
][
öx
] |=

441 ((
l⁄g64
)
ïîm32èb
[2][(
to_≥rmuã
 >> 8) & 0xff][0] << 32) |

442 (
l⁄g64
)
ïîm32èb
[2][(
to_≥rmuã
 >> 8) & 0xff][1];

443 
sb
[
sg
][
öx
] |=

444 ((
l⁄g64
)
ïîm32èb
[3][(
to_≥rmuã
) & 0xff][0] << 32) |

445 (
l⁄g64
)
ïîm32èb
[3][(
to_≥rmuã
) & 0xff][1];

455 
bô
=48; bit--;) {

456 
e_övî£
[
e£l
[
bô
] - 1 ] = bit;

457 
e_övî£
[
e£l
[
bô
] - 1 + 32] = bit + 48;

464 
	`˛órmem
((*)
eÂ
, Éfp);

465 
bô
 = 0; bit < 64; bit++) {

466 
o_bô
, 
o_l⁄g
;

467 
ufc_l⁄g
 
w‹d_vÆue
, 
mask1
, 
mask2
;

468 
comes_‰om_f_bô
, 
comes_‰om_e_bô
;

469 
comes_‰om_w‹d
, 
bô_wôhö_w‹d
;

472 
o_l⁄g
 = 
bô
 / 32;

473 
o_bô
 = 
bô
 % 32;

482 
comes_‰om_f_bô
 = 
föÆ_≥rm
[
bô
] - 1;

483 
comes_‰om_e_bô
 = 
e_övî£
[
comes_‰om_f_bô
];

484 
comes_‰om_w‹d
 = 
comes_‰om_e_bô
 / 6;

485 
bô_wôhö_w‹d
 = 
comes_‰om_e_bô
 % 6;

487 
mask1
 = 
l⁄gmask
[
bô_wôhö_w‹d
 + 26];

488 
mask2
 = 
l⁄gmask
[
o_bô
];

490 
w‹d_vÆue
 = 64; word_value--;) {

491 if(
w‹d_vÆue
 & 
mask1
)

492 
eÂ
[
comes_‰om_w‹d
][
w‹d_vÆue
][
o_l⁄g
] |
mask2
;

501 
	`˛órmem
((*)
ªvföÆ
, (revfinal));

502 
bô
 = 0; bit < 96; bit++) {

503 
ibô
 = 
öôül_≥rm
[
e£l
[
bô
 % 48] - 1 + ((bit >= 48) ? 32 : 0)] - 1;

504 
mask1
 = 
byãmask
[
ibô
 % 6 + 2];

505 
mask2
 = 
	`BITMASK
(
bô
 % 24);

506 
j
 = 64; j--;) {

507 if(
j
 & 
mask1
) {

508 
ªvföÆ
[
ibô
 / 6][
j
][
bô
 / 24] |
mask2
;

513 
öôülized
++;

514 
	}
}

521 #ifde‡
_UFC_32_


522 
STATIC
 
	$shufÊe_sb
(
k
, 
ß…bôs
)

523 
l⁄g32
 *
k
;

524 
ufc_l⁄g
 
ß…bôs
;

525 { 
ufc_l⁄g
 
j
;

526 
l⁄g32
 
x
;

527 
j
=4096; j--;) {

528 
x
 = (
k
[0] ^ k[1]Ë& (
l⁄g32
)
ß…bôs
;

529 *
k
++ ^
x
;

530 *
k
++ ^
x
;

532 
	}
}

535 #ifde‡
_UFC_64_


536 
STATIC
 
	$shufÊe_sb
(
k
, 
ß…bôs
)

537 
l⁄g64
 *
k
;

538 
ufc_l⁄g
 
ß…bôs
;

539 { 
ufc_l⁄g
 
j
;

540 
l⁄g64
 
x
;

541 
j
=4096; j--;) {

542 
x
 = ((*
k
 >> 32Ë^ *kË& (
l⁄g64
)
ß…bôs
;

543 *
k
++ ^(
x
 << 32) | x;

545 
	}
}

553 
	gcuºít_ß…
[3] = "&&";

554 
ufc_l⁄g
 
	gcuºít_ß…bôs
 = 0;

555 
	gdúe˘i⁄
 = 0;

557 
STATIC
 
	$£tup_ß…
(
s
)

558 *
s
;

559 { 
ufc_l⁄g
 
i
, 
j
, 
ß…bôs
;

561 if(!
öôülized
)

562 
	`öô_des
();

564 if(
s
[0] =
cuºít_ß…
[0] && s[1] == current_salt[1])

566 
cuºít_ß…
[0] = 
s
[0]; current_salt[1] = s[1];

573 
ß…bôs
 = 0;

574 
i
 = 0; i < 2; i++) {

575 
c
=
	`ascii_to_bö
(
s
[
i
]);

576 #ifde‡
nŸdef


583 if(
c
 < 0 || c > 63)

584 
c
 = 0;

586 
j
 = 0; j < 6; j++) {

587 if((
c
 >> 
j
) & 0x1)

588 
ß…bôs
 |
	`BITMASK
(6 * 
i
 + 
j
);

597 
	`shufÊe_sb
(
_ufc_sb0
, 
cuºít_ß…bôs
 ^ 
ß…bôs
);

598 
	`shufÊe_sb
(
_ufc_sb1
, 
cuºít_ß…bôs
 ^ 
ß…bôs
);

599 
	`shufÊe_sb
(
_ufc_sb2
, 
cuºít_ß…bôs
 ^ 
ß…bôs
);

600 
	`shufÊe_sb
(
_ufc_sb3
, 
cuºít_ß…bôs
 ^ 
ß…bôs
);

602 
cuºít_ß…bôs
 = 
ß…bôs
;

603 
	}
}

605 
STATIC
 
	$ufc_mk_keyèb
(
key
)

606 *
key
;

607 { 
ufc_l⁄g
 
v1
, 
v2
, *
k1
;

608 
i
;

609 #ifde‡
_UFC_32_


610 
l⁄g32
 
v
, *
k2
 = &
_ufc_keyèb
[0][0];

612 #ifde‡
_UFC_64_


613 
l⁄g64
 
v
, *
k2
 = &
_ufc_keyèb
[0];

616 
v1
 = 
v2
 = 0; 
k1
 = &
do_pc1
[0][0][0];

617 
i
 = 8; i--;) {

618 
v1
 |
k1
[*
key
 & 0x7f]; k1 += 128;

619 
v2
 |
k1
[*
key
++ & 0x7f]; k1 += 128;

622 
i
 = 0; i < 16; i++) {

623 
k1
 = &
do_pc2
[0][0];

625 
v1
 = (v1 << 
rŸs
[
i
]) | (v1 >> (28 -Ñots[i]));

626 
v
 = 
k1
[(
v1
 >> 21) & 0x7f]; k1 += 128;

627 
v
 |
k1
[(
v1
 >> 14) & 0x7f]; k1 += 128;

628 
v
 |
k1
[(
v1
 >> 7) & 0x7f]; k1 += 128;

629 
v
 |
k1
[(
v1
 ) & 0x7f]; k1 += 128;

631 #ifde‡
_UFC_32_


632 *
k2
++ = 
v
;

633 
v
 = 0;

635 #ifde‡
_UFC_64_


636 
v
 <<= 32;

639 
v2
 = (v2 << 
rŸs
[
i
]) | (v2 >> (28 -Ñots[i]));

640 
v
 |
k1
[(
v2
 >> 21) & 0x7f]; k1 += 128;

641 
v
 |
k1
[(
v2
 >> 14) & 0x7f]; k1 += 128;

642 
v
 |
k1
[(
v2
 >> 7) & 0x7f]; k1 += 128;

643 
v
 |
k1
[(
v2
 ) & 0x7f];

645 *
k2
++ = 
v
;

648 
dúe˘i⁄
 = 0;

649 
	}
}

655 
ufc_l⁄g
 *
	$_ufc_doföÆ≥rm
(
l1
, 
l2
, 
r1
, 
r2
)

656 
ufc_l⁄g
 
l1
,
l2
,
r1
,
r2
;

657 { 
ufc_l⁄g
 
v1
, 
v2
, 
x
;

658 
ufc_l⁄g
 
¨y
[2];

660 
x
 = (
l1
 ^ 
l2
Ë& 
cuºít_ß…bôs
;Ü1 ^= x;Ü2 ^= x;

661 
x
 = (
r1
 ^ 
r2
Ë& 
cuºít_ß…bôs
;Ñ1 ^= x;Ñ2 ^= x;

663 
v1
=
v2
=0; 
l1
 >>3; 
l2
 >>3; 
r1
 >>3; 
r2
 >>= 3;

665 
v1
 |
eÂ
[15][ 
r2
 & 0x3f][0]; 
v2
 |=Éfp[15][Ñ2 & 0x3f][1];

666 
v1
 |
eÂ
[14][(
r2
 >>6Ë& 0x3f][0]; 
v2
 |=Éfp[14][Ñ2 & 0x3f][1];

667 
v1
 |
eÂ
[13][(
r2
 >>10Ë& 0x3f][0]; 
v2
 |=Éfp[13][Ñ2 & 0x3f][1];

668 
v1
 |
eÂ
[12][(
r2
 >>6Ë& 0x3f][0]; 
v2
 |=Éfp[12][Ñ2 & 0x3f][1];

670 
v1
 |
eÂ
[11][ 
r1
 & 0x3f][0]; 
v2
 |=Éfp[11][Ñ1 & 0x3f][1];

671 
v1
 |
eÂ
[10][(
r1
 >>6Ë& 0x3f][0]; 
v2
 |=Éfp[10][Ñ1 & 0x3f][1];

672 
v1
 |
eÂ
[ 9][(
r1
 >>10Ë& 0x3f][0]; 
v2
 |=Éfp[ 9][Ñ1 & 0x3f][1];

673 
v1
 |
eÂ
[ 8][(
r1
 >>6Ë& 0x3f][0]; 
v2
 |=Éfp[ 8][Ñ1 & 0x3f][1];

675 
v1
 |
eÂ
[ 7][ 
l2
 & 0x3f][0]; 
v2
 |=Éfp[ 7][Ü2 & 0x3f][1];

676 
v1
 |
eÂ
[ 6][(
l2
 >>6Ë& 0x3f][0]; 
v2
 |=Éfp[ 6][Ü2 & 0x3f][1];

677 
v1
 |
eÂ
[ 5][(
l2
 >>10Ë& 0x3f][0]; 
v2
 |=Éfp[ 5][Ü2 & 0x3f][1];

678 
v1
 |
eÂ
[ 4][(
l2
 >>6Ë& 0x3f][0]; 
v2
 |=Éfp[ 4][Ü2 & 0x3f][1];

680 
v1
 |
eÂ
[ 3][ 
l1
 & 0x3f][0]; 
v2
 |=Éfp[ 3][Ü1 & 0x3f][1];

681 
v1
 |
eÂ
[ 2][(
l1
 >>6Ë& 0x3f][0]; 
v2
 |=Éfp[ 2][Ü1 & 0x3f][1];

682 
v1
 |
eÂ
[ 1][(
l1
 >>10Ë& 0x3f][0]; 
v2
 |=Éfp[ 1][Ü1 & 0x3f][1];

683 
v1
 |
eÂ
[ 0][(
l1
 >>6Ë& 0x3f][0]; 
v2
 |=Éfp[ 0][Ü1 & 0x3f][1];

685 
¨y
[0] = 
v1
;áry[1] = 
v2
;

686  
¨y
;

687 
	}
}

694 
STATIC
 *
	$ouçut_c⁄vîsi⁄
(
v1
, 
v2
, 
ß…
)

695 
ufc_l⁄g
 
v1
, 
v2
;

696 *
ß…
;

697 { 
outbuf
[14];

698 
i
, 
s
, 
shf
;

700 
outbuf
[0] = 
ß…
[0];

701 
outbuf
[1] = 
ß…
[1] ? salt[1] : salt[0];

703 
i
 = 0; i < 5; i++) {

704 
shf
 = (26 - 6 * 
i
);

705 
outbuf
[
i
 + 2] = 
	`bö_to_ascii
((
v1
 >> 
shf
) & 0x3f);

708 
s
 = (
v2
 & 0xf) << 2;

709 
v2
 = (v2 >> 2Ë| ((
v1
 & 0x3) << 30);

711 
i
 = 5; i < 10; i++) {

712 
shf
 = (56 - 6 * 
i
);

713 
outbuf
[
i
 + 2] = 
	`bö_to_ascii
((
v2
 >> 
shf
) & 0x3f);

716 
outbuf
[12] = 
	`bö_to_ascii
(
s
);

717 
outbuf
[13] = 0;

719  
outbuf
;

720 
	}
}

722 
ufc_l⁄g
 *
_ufc_doô
();

728 *
	$¸y±
(
key
, 
ß…
)

729 *
key
, *
ß…
;

730 { 
ufc_l⁄g
 *
s
;

731 
kèb
[9];

736 
	`£tup_ß…
(
ß…
);

741 
	`˛órmem
(
kèb
,  ktab);

742 ()
	`°∫˝y
(
kèb
, 
key
, 8);

743 
	`ufc_mk_keyèb
(
kèb
);

748 
s
 = 
	`_ufc_doô
((
ufc_l⁄g
)0, (ufc_long)0,

749 (
ufc_l⁄g
)0, (ufc_long)0, (ufc_long)25);

753 
s
 = 
	`_ufc_doföÆ≥rm
(s[0], s[1], s[2], s[3]);

758  
	`ouçut_c⁄vîsi⁄
(
s
[0], s[1], 
ß…
);

759 
	}
}

766 *
	$f¸y±
(
key
, 
ß…
)

767 *
key
;

768 *
ß…
;

769 {  
	`¸y±
(
key
, 
ß…
);

770 
	}
}

778 
	$í¸y±
(
block
, 
edÊag
)

779 *
block
;

780 
edÊag
;

781 { 
ufc_l⁄g
 
l1
, 
l2
, 
r1
, 
r2
, *
s
;

782 
i
;

787 
	`£tup_ß…
("..");

793 if((
edÊag
 =0Ë!(
dúe˘i⁄
 == 0)) {

794 
i
 = 0; i < 8; i++) {

795 #ifde‡
_UFC_32_


796 
l⁄g32
 
x
;

797 
x
 = 
_ufc_keyèb
[15-
i
][0];

798 
_ufc_keyèb
[15-
i
][0] = _ufc_keytab[i][0];

799 
_ufc_keyèb
[
i
][0] = 
x
;

801 
x
 = 
_ufc_keyèb
[15-
i
][1];

802 
_ufc_keyèb
[15-
i
][1] = _ufc_keytab[i][1];

803 
_ufc_keyèb
[
i
][1] = 
x
;

805 #ifde‡
_UFC_64_


806 
l⁄g64
 
x
;

807 
x
 = 
_ufc_keyèb
[15-
i
];

808 
_ufc_keyèb
[15-
i
] = _ufc_keytab[i];

809 
_ufc_keyèb
[
i
] = 
x
;

812 
dúe˘i⁄
 = 
edÊag
;

818 
i
 = 0;

819 
l1
 = 0; 
i
 < 24; i++) {

820 if(
block
[
öôül_≥rm
[
e£l
[
i
]-1]-1])

821 
l1
 |
	`BITMASK
(
i
);

823 
l2
 = 0; 
i
 < 48; i++) {

824 if(
block
[
öôül_≥rm
[
e£l
[
i
]-1]-1])

825 
l2
 |
	`BITMASK
(
i
-24);

828 
i
 = 0;

829 
r1
 = 0; 
i
 < 24; i++) {

830 if(
block
[
öôül_≥rm
[
e£l
[
i
]-1+32]-1])

831 
r1
 |
	`BITMASK
(
i
);

833 
r2
 = 0; 
i
 < 48; i++) {

834 if(
block
[
öôül_≥rm
[
e£l
[
i
]-1+32]-1])

835 
r2
 |
	`BITMASK
(
i
-24);

841 
s
 = 
	`_ufc_doô
(
l1
, 
l2
, 
r1
, 
r2
, (
ufc_l⁄g
)1);

845 
s
 = 
	`_ufc_doföÆ≥rm
(s[0], s[1], s[2], s[3]);

850 
l1
 = 
s
[0]; 
r1
 = s[1];

851 
i
 = 0; i < 32; i++) {

852 *
block
++ = (
l1
 & 
l⁄gmask
[
i
]) != 0;

854 
i
 = 0; i < 32; i++) {

855 *
block
++ = (
r1
 & 
l⁄gmask
[
i
]) != 0;

858 
	}
}

865 
	$£tkey
(
key
)

866 *
key
;

867 { 
i
,
j
;

868 
c
;

869 
kèb
[8];

871 
	`£tup_ß…
("..");

873 
i
 = 0; i < 8; i++) {

874 
j
 = 0, 
c
 = 0; j < 8; j++)

875 
c
 = c << 1 | *
key
++;

876 
kèb
[
i
] = 
c
 >> 1;

879 
	`ufc_mk_keyèb
(
kèb
);

880 
	}
}

886 *
	$¸y±16
(
key
, 
ß…
)

887 *
key
, *
ß…
;

888 { 
ufc_l⁄g
 *
s
, *
t
;

889 
kèb
[9], 
âab
[9];

890 
q
[14], 
ªs
[25];

894 
	`£tup_ß…
(
ß…
);

899 
	`˛órmem
(
kèb
,  ktab);

900 ()
	`°∫˝y
(
kèb
, 
key
, 8);

901 
	`ufc_mk_keyèb
(
kèb
);

906 
s
 = 
	`_ufc_doô
((
ufc_l⁄g
)0, (ufc_long)0,

907 (
ufc_l⁄g
)0, (ufc_long)0, (ufc_long)20);

912 
	`°r˝y
 (
ªs
, 
	`ouçut_c⁄vîsi⁄
(
s
[0], s[1], 
ß…
));

914 
	`˛órmem
(
âab
, Åtab);

915 i‡(
	`°æí
 (
key
Ë> 8Ë()
	`°∫˝y
(
âab
, key+8, 8);

916 
	`ufc_mk_keyèb
(
âab
);

921 
t
 = 
	`_ufc_doô
((
ufc_l⁄g
)0, (ufc_long)0,

922 (
ufc_l⁄g
)0, (ufc_long)0, (ufc_long)5);

926 
	`°r˝y
 (
q
, 
	`ouçut_c⁄vîsi⁄
(
t
[0],Å[1], 
ß…
));

927 
	`°r˝y
 (
ªs
+13, 
q
+2);

929 
	`˛órmem
(
kèb
,  ktab);

930 ()
	`°∫˝y
(
kèb
, 
key
, 8);

931 
	`ufc_mk_keyèb
(
kèb
);

933  
ªs
;

934 
	}
}

940 
	$ufc_£tup_∑ssw‹d
(
cookõ
, 
s
)

941 *
cookõ
;

942 *
s
;

943 { 
c
;

944 
i
;

945 
ufc_l⁄g
 
x
;

946 
ufc_l⁄g
 
dl1
, 
dl2
, 
dr1
, 
dr2
;

948 
	`£tup_ß…
(
s
);

949 
dl1
 = 
dl2
 = 
dr1
 = 
dr2
 = 0;

950 
i
 = 0, 
s
 +2; 
c
 = *s++; i++) {

951 
x
 = 
	`ascii_to_bö
(
c
);

952 
dl1
 |
ªvföÆ
[
i
][
x
][0];

953 
dl2
 |
ªvföÆ
[
i
][
x
][1];

954 
dr1
 |
ªvföÆ
[
i
][
x
][2];

955 
dr2
 |
ªvföÆ
[
i
][
x
][3];

957 
x
 = (
dl1
 ^ 
dl2
Ë& 
cuºít_ß…bôs
;

958 
x
 = (
dr1
 ^ 
dr2
Ë& 
cuºít_ß…bôs
;

959 
cookõ
[0] = 
dl1
 ^ 
x
; cookõ[1] = 
dl2
 ^ x;

960 
cookõ
[2] = 
dr1
 ^ 
x
; cookõ[3] = 
dr2
 ^ x;

961 
	}
}

963 
	$ufc_do_pw
(
cookõ
, 
guess
)

964 *
cookõ
;

965 *
guess
;

966 { 
kèb
[9];

967 
ufc_l⁄g
 *
s
;

968 
	`˛órmem
(
kèb
,  ktab);

969 ()
	`°∫˝y
(
kèb
, 
guess
, 8);

970 
	`ufc_mk_keyèb
(
kèb
);

971 
s
 = 
	`_ufc_doô
((
ufc_l⁄g
)0, (ufc_long)0,

972 (
ufc_l⁄g
)0, (ufc_long)0, (ufc_long)25);

973 
cookõ
[0] = 
s
[0]; cookie[1] = s[1];

974 
cookõ
[2] = 
s
[2]; cookie[3] = s[3];

975 
	}
}

	@Library/src/vms/dirent.c

3 
	~<ssdef.h
>

4 
	~<rmsdef.h
>

5 
	~"dúít.h
"

9 
	#NO_VERSIONS


	)

12 
DIR
 *
	$›ídú
(*
dú«me
)

14 
DIR
 
dú
;

15 *
˛o£bøckë
;

16 
°©us
;

17 
dsc$des¸ùt‹_s
 
íåy«me_desc
;

18 
dsc$des¸ùt‹_s
 
dú«me_desc
;

19 
DúE¡ry
[256];

20 
VMSíåy
[256];

21 
UnixE¡ry
[256];

22 
ödex
;

23 *
dŸ
;

30 
	`°r˝y
(
UnixE¡ry
,
dú«me
);

31 i‡(
UnixE¡ry
[
	`°æí
(UnixEntry)-1] != '/')

32 
	`°rˇt
(
UnixE¡ry
,"/");

34 
	`°r˝y
(
DúE¡ry
, 
	`HTVMS_«me
("",
UnixE¡ry
));

35 
	`°r˝y
(
dú
.
dú«me
, 
DúE¡ry
);

36 
ödex
 = 
	`°æí
(
DúE¡ry
) - 1;

38 i‡(
DúE¡ry
[
ödex
] == ']')

39 
DúE¡ry
[
ödex
] = '\0';

41 i‡((
dŸ
 = 
	`°ºchr
(
DúE¡ry
,'.')Ë=
NULL
)

43 *
›íbr
 = 
	`°ºchr
(
DúE¡ry
,'[');

44 i‡(!
›íbr
)

46 
	`°r˝y
(
dú
.
dú«me
, 
DúE¡ry
);

47 
	`°rˇt
(
dú
.
dú«me
, "[000000]");

48 
	`°rˇt
(
DúE¡ry
,"[000000]000000.dir");

52 
End
[256];

53 
	`°r˝y
(
End
,
›íbr
+1);

54 *(
›íbr
+1) = '\0';

55 
	`°rˇt
(
DúE¡ry
,"000000]");

56 
	`°rˇt
(
DúE¡ry
,
End
);

57 
	`°rˇt
(
DúE¡ry
,".dir");

62 *
dŸ
 = ']';

63 
	`°rˇt
(
DúE¡ry
,".dir");

66 
dú
.
c⁄ãxt
 = 0;

67 
dú«me_desc
.
dsc$w_Àngth
 = 
	`°æí
(
DúE¡ry
);

68 
dú«me_desc
.
dsc$b_dty≥
 = 
DSC$K_DTYPE_T
;

69 
dú«me_desc
.
dsc$b_˛ass
 = 
DSC$K_CLASS_S
;

70 
dú«me_desc
.
dsc$a_poöãr
 = &(
DúE¡ry
);

73 
íåy«me_desc
.
dsc$w_Àngth
 = 255;

74 
íåy«me_desc
.
dsc$b_dty≥
 = 
DSC$K_DTYPE_T
;

75 
íåy«me_desc
.
dsc$b_˛ass
 = 
DSC$K_CLASS_S
;

76 
íåy«me_desc
.
dsc$a_poöãr
 = 
VMSíåy
;

78 
°©us
 = 
	`LIB$FIND_FILE
(&(
dú«me_desc
),

79 &
íåy«me_desc
,

80 &(
dú
.
c⁄ãxt
),

82 i‡(!(
°©us
 & 0x01))

84 (
NULL
);

90 
˛o£bøckë
 = 
	`°rchr
(
dú
.
dú«me
,']');

91 *
˛o£bøckë
 = '.';

92 
˛o£bøckë
 = 
	`°r°r
(
dú
.
dú«me
,".dir");

93 *
˛o£bøckë
 = '\0';

94 
	`°rˇt
(
dú
.
dú«me
,"]");

97 #ifde‡
NO_VERSIONS


98 
	`°rˇt
(
dú
.
dú«me
,"*.*");

100 
	`°rˇt
(
dú
.
dú«me
,"*.*;*");

102 
dú
.
c⁄ãxt
 = 0;

103 
dú
.
dú«me_desc
.
dsc$w_Àngth
 = 
	`°æí
(dú.
dú«me
);

104 
dú
.
dú«me_desc
.
dsc$b_dty≥
 = 
DSC$K_DTYPE_T
;

105 
dú
.
dú«me_desc
.
dsc$b_˛ass
 = 
DSC$K_CLASS_S
;

106 
dú
.
dú«me_desc
.
dsc$a_poöãr
 = &(dú.
dú«me
);

107 (&
dú
);

108 
	}
}

110 
dúít
 *
	$ªaddú
(
DIR
 *
dúp
)

112 
dúít
 
íåy
;

113 
°©us
;

114 
dsc$des¸ùt‹_s
 
íåy«me_desc
;

115 *
•a˚
, *
¶ash
;

116 
VMSíåy
[256];

117 *
UnixE¡ry
;

119 
íåy«me_desc
.
dsc$w_Àngth
 = 255;

120 
íåy«me_desc
.
dsc$b_dty≥
 = 
DSC$K_DTYPE_T
;

121 
íåy«me_desc
.
dsc$b_˛ass
 = 
DSC$K_CLASS_S
;

122 
íåy«me_desc
.
dsc$a_poöãr
 = 
VMSíåy
;

124 
°©us
 = 
	`LIB$FIND_FILE
(&(
dúp
->
dú«me_desc
),

125 &
íåy«me_desc
,

126 &(
dúp
->
c⁄ãxt
),

128 i‡(
°©us
 =
RMS$_NMF
)

130 (
NULL
);

134 i‡(!(
°©us
 & 0x01)) (0);

135 #ifde‡
NO_VERSIONS


136 
•a˚
 = 
	`°rchr
(
VMSíåy
,';');

138 
•a˚
 = 
	`°rchr
(
VMSíåy
,' ');

140 i‡(
•a˚
)

141 *
•a˚
 = '\0';

144 
UnixE¡ry
 = 
	`HTVMS_wwwName
(
VMSíåy
);

145 
¶ash
 = 
	`°ºchr
(
UnixE¡ry
,'/') + 1;

146 
	`°r˝y
(
íåy
.
d_«me
,
¶ash
);

147 
íåy
.
d_«mÀn
 = 
	`°æí
”¡ry.
d_«me
);

148 
íåy
.
d_fûío
 = 1;

149 (&
íåy
);

151 
	}
}

153 
	$˛o£dú
(
DIR
 *
dúp
)

155 
°©us
;

157 
°©us
 = 
	`LIB$FIND_FILE_END
(&(
dúp
->
c⁄ãxt
));

158 i‡(!(
°©us
 & 0x01)Ë
	`exô
(status);

159 
dúp
->
c⁄ãxt
 = 0;

161 
	}
}

165 #i‚def 
_POSIX_SOURCE


166 
£ekdú
( );

167 
ãŒdú
( );

169 
ªwöddú
( );

171 #i‚def 
löt


172 
	#ªwöddú
(
dúp
Ë
	`£ekdú
((dúp), ()0)

	)

	@Library/src/vms/dirent.h

8 #i‚def 
__dúít_h


9 
	#__dúít_h


	)

11 
	~<ty≥s.h
>

13 #i‚def 
_POSIX_SOURCE


14 
	#d_öo
 
d_fûío


	)

15 #i‚def 
NULL


16 
	#NULL
 0

	)

23 
	~<des¸ù.h
>

25 
	s__dúdesc
 {

27 
	mdd_fd
;

28 
	mdd_loc
;

29 
	mdd_size
;

30 
	mdd_bsize
;

31 
	mdd_off
;

32 *
	mdd_buf
;

34 
	mc⁄ãxt
;

35 
	mdú«me
[255+1];

36 
dsc$des¸ùt‹_s
 
	mdú«me_desc
;

37 } 
	tDIR
;

39 
DIR
 *
›ídú
(*
dú«me
);

40 
dúít
 *
ªaddú
(
DIR
 *
dúp
);

41 
˛o£dú
(
DIR
 *
dúp
);

43 #i‚def 
_POSIX_SOURCE


44 
£ekdú
( );

45 
ãŒdú
( );

47 
ªwöddú
( );

49 #i‚def 
löt


50 
	#ªwöddú
(
dúp
Ë
	`£ekdú
((dúp), ()0)

	)

54 
	~"sys_dúít.h
"

	@Library/src/vms/getline.c

30 
	~<°ddef.h
>

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<î∫o.h
>

34 
	~"HTUtûs.h
"

42 
	$gëlöe
(**
löïå
, 
size_t
 *
n
, 
FILE
 *
°ªam
)

44 
löe
[256];

45 *
±r
;

46 
Àn
;

48 i‡(
löïå
 =
NULL
 || 
n
 == NULL)

50 
î∫o
 = 
EINVAL
;

54 i‡(
	`„º‹
 (
°ªam
))

57 i‡(
	`„of
(
°ªam
))

60 
	`fgës
(
löe
,256,
°ªam
);

62 
±r
 = 
	`°rchr
(
löe
,'\n');

63 i‡(
±r
)

64 *
±r
 = '\0';

66 
Àn
 = 
	`°æí
(
löe
);

68 i‡((
Àn
+1) < 256)

70 
±r
 = 
	`ªÆloc
(*
löïå
, 256);

71 i‡(
±r
 =
NULL
)

73 *
löïå
 = 
±r
;

74 *
n
 = 256;

77 
	`°r˝y
(*
löïå
,
löe
);

78 (
Àn
);

79 
	}
}

	@Library/src/vms/getpass.c

30 
	~<°dio.h
>

31 
	~<des¸ù.h
>

32 
	~<p¶def.h
>

33 
	~<iodef.h
>

34 
	~"HTUtûs.h
"

36 *
	$gë∑ss
 (c⁄° *
¥om±
)

38 *
buf
;

40 
ªsu…
;

41 
	`$DESCRIPTOR
(
dev«m
,"SYS$INPUT");

42 
ch™
;

43 
¥om±Àn
;

45 
ªsu…
;

46 
cou¡
;

47 
öfo
;

48 } 
iosb
;

50 
¥om±Àn
 = 
	`°æí
(
¥om±
);

52 
buf
 = 
	`mÆloc
(256);

53 i‡(
buf
 =
NULL
)

54 (
NULL
);

56 
ªsu…
 = 
	`SYS$ASSIGN
(&
dev«m
, &
ch™
, 
PSL$C_USER
, 0, 0);

58 
ªsu…
 = 
	`SYS$QIOW
(0, 
ch™
, 
IO$_READPROMPT
 | 
IO$M_PURGE
 |
IO$M_NOECHO
, &
iosb
, 0, 0,

59 
buf
, 255, 0, 0, 
¥om±
, 
¥om±Àn
);

61 
buf
[
iosb
.
cou¡
] = '\0';

63 
ªsu…
 = 
	`SYS$DASSGN
(
ch™
);

65  
buf
;

66 
	}
}

	@Library/src/vms/patchlevel.h

24 
	#PATCHLEVEL
 "UFC-¸y±,Ö©chÀvñ 1e, @(#Ì©chÀvñ.h 1.11 7/15/92"

	)

	@Library/src/vms/sys_dirent.h

20 #i‚def 
__sys_dúít_h


21 
	#__sys_dúít_h


	)

23 
	sdúít
 {

25 
off_t
 
	md_off
;

27 
	md_fûío
;

29 
	md_ª˛í
;

31 
	md_«mÀn
;

32 
	md_«me
[255+1];

35 #i‚def 
_POSIX_SOURCE


40 
	#MAXNAMLEN
 255

	)

47 #unde‡
DIRSIZ


48 
	#DIRSIZ
(
dp
) \

49 ((((
dúít
Ë- (
MAXNAMLEN
+1Ë+ ((
dp
)->
d_«mÀn
+1)Ë+3Ë& ~3)

	)

	@Library/src/vms/ufc-crypt.h

42 #ifde‡
¸ay


44 
	tufc_l⁄g
;

45 
	tl⁄g64
;

46 
	#_UFC_64_


	)

49 #ifde‡
c⁄vex


51 
	tufc_l⁄g
;

52 
	tl⁄g64
;

53 
	#_UFC_64_


	)

56 #ifde‡
k§


63 
	tufc_l⁄g
;

64 
	tl⁄g64
;

65 
	#_UFC_64_


	)

72 #ifde‡
GCC3232


73 
	tufc_l⁄g
;

74 
	tl⁄g32
;

75 
	#_UFC_32_


	)

78 #ifde‡
GCC3264


79 
	tufc_l⁄g
;

80 
	tl⁄g64
;

81 
	#_UFC_64_


	)

84 #ifde‡
GCC6432


85 
	tufc_l⁄g
;

86 
	tl⁄g32
;

87 
	#_UFC_32_


	)

90 #ifde‡
GCC6464


91 
	tufc_l⁄g
;

92 
	tl⁄g64
;

93 
	#_UFC_64_


	)

100 #i‚de‡
_UFC_64_


101 #i‚de‡
_UFC_32_


102 
	#_UFC_32_


	)

103 
	tufc_l⁄g
;

104 
	tl⁄g32
;

	@Library/src/windows/config.h

6 #i‚de‡
__CHAR_UNSIGNED__


24 
	#HAVE_STRFTIME
 1

	)

37 
	#HAVE_VPRINTF
 1

	)

40 
	#mode_t
 

	)

58 
	#STDC_HEADERS
 1

	)

80 
	#HT_EXPAT
 1

	)

83 
	#HT_ZLIB
 1

	)

86 
	#HT_MD5
 1

	)

89 
	#HT_POSIX_REGEX
 1

	)

109 
	#W3C_PACKAGE
 "w3c-libwww"

	)

112 
	#W3C_VERSION
 "5.3.1"

	)

115 
	#W3C_ICONS
 "/u§/loˇl/sh¨e/w3c-ic⁄s"

	)

118 
	#W3C_TCL
 "/u§/loˇl/lib/libt˛7.5.a"

	)

121 
	#CACHE_FILE_PREFIX
 "/u§/w§c/"

	)

127 
	#HT_NO_NAGLE
 1

	)

136 
	#BOOLEAN


	)

145 
	#TELNET_PROGRAM
 "ã ë"

	)

163 
	#HAVE_LONG_TIME_T
 1

	)

169 
	#SIZEOF_CHAR
 1

	)

172 
	#SIZEOF_CHAR_P
 4

	)

175 
	#SIZEOF_INT
 4

	)

178 
	#SIZEOF_LONG
 4

	)

181 
	#HAVE_CHDIR
 1

	)

187 
	#HAVE_GETCWD
 1

	)

193 
	#HAVE_GETHOSTNAME
 1

	)

205 
	#HAVE_GETSOCKOPT
 1

	)

217 
	#HAVE_MEMCPY
 1

	)

220 
	#HAVE_MKTIME
 1

	)

232 
	#HAVE_SETSOCKOPT
 1

	)

235 
	#HAVE_SOCKET
 1

	)

238 
	#HAVE_STRCHR
 1

	)

241 
	#HAVE_STRERROR
 1

	)

244 
	#HAVE_STRTOL
 1

	)

284 
	#HAVE_DIRECT_H
 1

	)

299 
	#HAVE_FCNTL_H
 1

	)

314 
	#HAVE_LIMITS_H
 1

	)

317 
	#HAVE_MALLOC_H
 1

	)

344 
	#HAVE_REGEX_H
 1

	)

362 
	#HAVE_STDIO_H
 1

	)

365 
	#HAVE_STDLIB_H
 1

	)

368 
	#HAVE_STRING_H
 1

	)

407 
	#HAVE_SYS_STAT_H
 1

	)

416 
	#HAVE_SYS_TYPES_H
 1

	)

431 
	#HAVE_TIME_H
 1

	)

467 
	#HAVE_TIMEZONE
 1

	)

473 
	#HAVE_DAYLIGHT
 1

	)

	@Library/src/windows/windll.c

1 
	~<wödows.h
>

3 
BOOL
 
WINAPI
 
	$DŒMaö
 (
HINSTANCE
 
hDLL
, 
DWORD
 
dwRós⁄
, 
LPVOID
 
ÕRe£rved
)

6 
	}
}

	@Library/src/windows/wwwdll.c

7 (
	tTTYPröt_t
)(
	tèrgë
, c⁄° * 
	tfmt
, ...);

8 
TTYPröt_t
* 
PTTYPröt
;

9 
WWW_Tø˚Fœg
 = 0;

	@Library/src/wwwsys.h

115 #i‚de‡
SYSDEP_H


116 
	#SYSDEP_H


	)

131 #ifde‡
HAVE_CONFIG_H


132 
	~<wwwc⁄f.h
>

145 #i‡
deföed
(
_WINDOWS
Ë|| deföed(
_CONSOLE
)

146 
	#WWW_MSWINDOWS


	)

149 #i‡
deföed
(
_WINDOWS
Ë&& !deföed (
_CONSOLE
)

150 
	#WWW_WIN_WINDOW


	)

153 #i‡
deföed
(
_CONSOLE
)

154 
	#WWW_WIN_CONSOLE


	)

157 #ifde‡
WWW_MSWINDOWS


159 
	~<wödows.h
>

160 
	~<io.h
>

161 
	~<¥o˚ss.h
>

162 
	~<wösock.h
>

164 
	~"wödows/c⁄fig.h
"

166 
	#NETREAD
(
s
,
b
,
l
Ë
	`ªcv
((s),(b),÷),0)

	)

167 
	#NETWRITE
(
s
,
b
,
l
Ë
	`£nd
((s),(b),÷),0)

	)

168 
	#NETCLOSE
(
s
Ë
	`˛o£sockë
(s)

	)

169 
	#IOCTL
(
s
,
c
,
a
Ë
	`io˘lsockë
(s,c, (*Ëa)

	)

171 
	#MKDIR
(
a
,
b
Ë
	`mkdú
(◊))

	)

172 
	#REMOVE
(
a
Ë
	`ªmove
(◊))

	)

173 
	#DEFAULT_SUFFIXES
 "."

	)

175 #i‚de‡
_CONSOLE


176 
	#NO_STDIO


	)

179 
	#SOCKET
 
SOCKET


	)

180 
	#INVSOC
 
INVALID_SOCKET


	)

182 
	#DESIRED_WINSOCK_VERSION
 0x0101

	)

183 
	#MINIMUM_WINSOCK_VERSION
 0x0101

	)

194 
	#NO_UNIX_IO


	)

196 
	#_IFMT
 0170000

	)

197 
	#_IFDIR
 0040000

	)

198 
	#_IFCHR
 0020000

	)

199 
	#_IFBLK
 0060000

	)

200 
	#_IFREG
 0100000

	)

201 
	#_IFLNK
 0120000

	)

202 
	#_IFSOCK
 0140000

	)

203 
	#_IFIFO
 0010000

	)

205 
	#S_ISUID
 0004000

	)

206 
	#S_ISGID
 0002000

	)

207 
	#S_ISVTX
 0001000

	)

209 #ifde‡
S_IREAD


210 #unde‡
S_IREAD


211 
	#S_IREAD
 0000400

	)

214 #ifde‡
S_IWRITE


215 #unde‡
S_IWRITE


216 
	#S_IWRITE
 0000200

	)

219 #ifde‡
S_IEXEC


220 #unde‡
S_IEXEC


221 
	#S_IEXEC
 0000100

	)

224 
	#S_ENFMT
 0002000

	)

226 #ifde‡
S_IFMT


227 #unde‡
S_IFMT


228 
	#S_IFMT
 
_IFMT


	)

231 #ifde‡
S_IDIR


232 #unde‡
S_IDIR


233 
	#S_IFDIR
 
_IFDIR


	)

236 #ifde‡
S_IFCHR


237 #unde‡
S_IFCHR


238 
	#S_IFCHR
 
_IFCHR


	)

241 #ifde‡
S_IBLK


242 #unde‡
S_IBLK


243 
	#S_IFBLK
 
_IFBLK


	)

246 #ifde‡
S_IREG


247 #unde‡
S_IREG


248 
	#S_IFREG
 
_IFREG


	)

251 
	#S_IFLNK
 
_IFLNK


	)

253 #ifde‡
S_IFIFO


254 #unde‡
S_IFIFO


255 
	#S_IFIFO
 
_IFIFO


	)

258 
	#S_IRWXU
 0000700

	)

259 
	#S_IRUSR
 0000400

	)

260 
	#S_IWUSR
 0000200

	)

261 
	#S_IXUSR
 0000100

	)

262 
	#S_IRWXG
 0000070

	)

263 
	#S_IRGRP
 0000040

	)

264 
	#S_IWGRP
 0000020

	)

265 
	#S_IXGRP
 0000010

	)

266 
	#S_IRWXO
 0000007

	)

267 
	#S_IROTH
 0000004

	)

268 
	#S_IWOTH
 0000002

	)

269 
	#S_IXOTH
 0000001

	)

271 
	#S_ISREG
(
m
Ë(((m)&
_IFMT
Ë=
_IFREG
)

	)

273 
	#DIR_SEPARATOR


	)

274 
	#DIR_SEPARATOR_CHAR
 '\\'

	)

275 
	#DIR_SEPARATOR_STR
 "\\"

	)

287 
	#so˚ºno
 
	`WSAGëLa°Eº‹
()

	)

288 
	#ERRNO_DONE


	)

296 
	#EWOULDBLOCK
 
WSAEWOULDBLOCK


	)

297 
	#EINPROGRESS
 
WSAEINPROGRESS


	)

298 
	#ECONNREFUSED
 
WSAECONNREFUSED


	)

299 
	#ETIMEDOUT
 
WSAETIMEDOUT


	)

300 
	#ENETUNREACH
 
WSAENETUNREACH


	)

301 
	#EHOSTUNREACH
 
WSAEHOSTUNREACH


	)

302 
	#EHOSTDOWN
 
WSAEHOSTDOWN


	)

303 
	#EISCONN
 
WSAEISCONN


	)

304 
	#EINVAL
 
WSAEINVAL


	)

305 
	#ECONNRESET
 
WSAECONNRESET


	)

306 
	#ECONNABORTED
 
WSAECONNABORTED


	)

307 
	#ESHUTDOWN
 
WSAESHUTDOWN


	)

310 
	#NO_GROUPS


	)

312 #ifde‡
_WIN32


313 
	#MKDIR
(
a
,
b
Ë
	`mkdú
(◊)Ë

	)

314 
	#SLEEP
(
n
Ë
	`SÀï
(“)*1000)

	)

316 
	#MKDIR
(
a
,
b
Ë
	`_mkdú
(◊)Ë

	)

335 #ifde‡
__MINGW32__


337 
	~<wösock2.h
>

339 
	#WWW_MSWINDOWS


	)

341 
	#WWW_WIN_WINDOW


	)

345 #i‚de‡
_WINSOCKAPI_


346 
	#_WINSOCKAPI_


	)

349 
	#NETREAD
(
s
,
b
,
l
Ë
	`ªcv
((s),(b),÷),0)

	)

350 
	#NETWRITE
(
s
,
b
,
l
Ë
	`£nd
((s),(b),÷),0)

	)

351 
	#NETCLOSE
(
s
Ë
	`˛o£sockë
(s)

	)

352 
	#IOCTL
(
s
,
c
,
a
Ë
	`io˘lsockë
(s,c, (*Ëa)

	)

354 
	#MKDIR
(
a
,
b
Ë
	`mkdú
◊)

	)

355 
	#REMOVE
(
a
Ë
	`ªmove
(◊))

	)

356 
	#DEFAULT_SUFFIXES
 "."

	)

358 
	#SOCKET
 
SOCKET


	)

359 
	#INVSOC
 
INVALID_SOCKET


	)

361 
	#DESIRED_WINSOCK_VERSION
 0x0101

	)

362 
	#MINIMUM_WINSOCK_VERSION
 0x0101

	)

364 
	#DIR_SEPARATOR


	)

365 
	#DIR_SEPARATOR_CHAR
 '\\'

	)

366 
	#DIR_SEPARATOR_STR
 "\\"

	)

368 
	#so˚ºno
 
	`WSAGëLa°Eº‹
()

	)

369 
	#ERRNO_DONE


	)

372 
	#EWOULDBLOCK
 
WSAEWOULDBLOCK


	)

373 
	#EINPROGRESS
 
WSAEINPROGRESS


	)

374 
	#ECONNREFUSED
 
WSAECONNREFUSED


	)

375 
	#ETIMEDOUT
 
WSAETIMEDOUT


	)

376 
	#ENETUNREACH
 
WSAENETUNREACH


	)

377 
	#EHOSTUNREACH
 
WSAEHOSTUNREACH


	)

378 
	#EHOSTDOWN
 
WSAEHOSTDOWN


	)

379 
	#EISCONN
 
WSAEISCONN


	)

381 
	#ECONNRESET
 
WSAECONNRESET


	)

382 
	#ECONNABORTED
 
WSAECONNABORTED


	)

383 
	#ESHUTDOWN
 
WSAESHUTDOWN


	)

386 #ifde‡
GETGROUPS_T


387 #unde‡
GETGROUPS_T


390 
	#HT_LSTAT
 
°©


	)

416 #ifde‡
__MWERKS__


417 
	~<gusi.h
>

418 
	~<dúít.h
>

419 
	~<î∫o.h
>

420 
	~<sys/î∫o.h
>

421 
	~<sioux.h
>

423 
	#INCLUDES_DONE


	)

424 
	#TCP_INCLUDES_DONE


	)

426 
	#GUSI


	)

428 #unde‡
HAVE_GETDOMAINNAME


429 #unde‡
HAVE_GETPASS


430 #unde‡
HAVE_GETWD


432 
	#HAVE_GETCWD


	)

433 
	#USE_DIRENT


	)

434 
	#NO_GROUPS


	)

435 
	#GOT_READ_DIR


	)

437 #unde‡
HAVE_TIMEZONE


438 
	#NO_GMTOFF


	)

439 
	#HAVE_STRERROR


	)

440 
	#HAVE_GETHOSTNAME


	)

442 
	#d_öo
 
d_fûío


	)

444 
	#SLEEP
(
n
Ë
	`GUSIDeÁu…Spö
–
SP_SLEEP
,Ç/60)

	)

446 
	#MKDIR
(
a
,
b
Ë
	`mkdú
◊)

	)

448 
	#HAVE_STRFTIME


449 
	#HAVE_MKTIME


450 
	#HAVE_STRCHR


451 
	#STDC_HEADERS


452 
	#HAVE_MEMCPY


453 
	#TTY_IS_SELECTABLE


454 
	#HAVE_READDIR


455 
	#HAVE_DIRENT_INO


456 
	#HAVE_DIRENT_H


457 

	)

474 #ifde‡
≠∂ec


475 #unde‡
HAVE_SYSTEM


476 
	#DEBUG


	)

478 
	#NO_UNIX_IO


	)

479 #unde‡
HAVE_GETPID


480 
	#NO_GETWD


	)

482 
	#NETCLOSE
 
s_˛o£


	)

483 
	#NETREAD
 
s_ªad


	)

484 
	#NETWRITE
 
s_wrôe


	)

486 
	#_ANSI_SOURCE


	)

487 
	#GUI


	)

488 
	#LINEFEED
 10

	)

489 
	#ANON_FTP_HOSTNAME


	)

490 #i‚de‡
NO_SOCKET_DEFS


491 
	~<MacSockDefs.h
>

494 
	~<sockë.ext.h
>

495 
	~<°rög.h
>

532 #ifde‡
VMS


533 
	~"HTVMSUtûs.h
"

534 
	#CACHE_FILE_PREFIX
 "SYS$LOGIN:Z_"

	)

535 
	#DEFAULT_SUFFIXES
 "._"

	)

537 
	#HAVE_CUSERID


	)

539 #ifde‡
WIN_TCP


540 
	#NETREAD
(
s
,
b
,
l
Ë((s)>10 ? 
	`√åód
((s),(b),÷)Ë: 
	`ªad
((s),(b),÷)))

	)

541 
	#NETWRITE
(
s
,
b
,
l
Ë((s)>10 ? 
	`√twrôe
((s),(b),÷)Ë: 
	`wrôe
((s),(b),÷)))

	)

542 
	#NETCLOSE
(
s
Ë((s)>10 ? 
	`√t˛o£
(sË: 
	`˛o£
(s))

	)

545 #ifde‡
MULTINET


546 #unde‡
NETCLOSE


547 #unde‡
NETREAD


548 #unde‡
NETWRITE


549 
	#NETREAD
(
s
,
b
,
l
Ë((s)>10 ? 
	`sockë_ªad
((s),(b),÷)Ë: 
	`ªad
((s),(b),÷)))

	)

550 
	#NETWRITE
(
s
,
b
,
l
Ë((s)>10 ? 
	`sockë_wrôe
((s),(b),(l)) : \

551 
	`wrôe
((
s
),(
b
),(
l
)))

	)

552 
	#NETCLOSE
(
s
Ë((s)>10 ? 
	`sockë_˛o£
(sË: 
	`˛o£
(s))

	)

553 
	#IOCTL
(
s
,
c
,
a
Ë
	`sockë_io˘l
(s,c,a);

	)

556 #ifde‡
DECNET


557 
	#DNP_OBJ
 80

	)

559 #unde‡
SELECT


560 
	#NETREAD
(
s
,
b
,
l
Ë((s)>10 ? 
	`ªcv
((s),(b),÷),0Ë: 
	`ªad
((s),(b),÷)))

	)

561 
	#NETWRITE
(
s
,
b
,
l
Ë((s)>10 ? 
	`£nd
((s),(b),÷),0Ë: 
	`wrôe
((s),(b),÷)))

	)

562 
	#NETCLOSE
(
s
Ë((s)>10 ? 
	`sockë_˛o£
(sË: 
	`˛o£
(s))

	)

564 #unde‡
HAVE_GETHOSTNAME


567 #unde‡
HAVE_GETDOMAINNAME


571 #ifde‡
MULTINET


572 
	~<time.h
>

573 #ifde‡
__TIME_T


574 
	#__TYPES


	)

575 
	#__TYPES_LOADED


	)

577 
	~<mu…öë_roŸ:[mu…öë.ö˛ude.sys]ty≥s.h
>

578 
	~<mu…öë_roŸ:[mu…öë.ö˛ude]î∫o.h
>

579 #ifde‡
__TYPES


580 
	#__TIME_T


	)

582 #ifde‡
__TIME_LOADED


583 
	#__TIME


	)

585 
	~<mu…öë_roŸ:[mu…öë.ö˛ude.sys]time.h
>

587 
	~<ty≥s.h
>

588 
	~<î∫o.h
>

589 
	~<time.h
>

592 #ö˛udê
°rög


594 #i‚de‡
STDIO_H


595 
	~<°dio
>

596 
	#STDIO_H


	)

599 #ö˛udê
fûe


601 #i‚de‡
DECNET


602 #ö˛udê
unixio


605 
	#INCLUDES_DONE


	)

607 #ifde‡
MULTINET


608 
	~<mu…öë_roŸ:[mu…öë.ö˛ude.sys]sockë.h
>

609 #ifde‡
__TIME_LOADED


610 
	#__TIME


	)

612 
	~<mu…öë_roŸ:[mu…öë.ö˛ude.√töë]ö.h
>

613 
	~<mu…öë_roŸ:[mu…öë.ö˛ude.¨∑]öë.h
>

614 
	~<mu…öë_roŸ:[mu…öë.ö˛ude]√tdb.h
>

615 
	~<mu…öë_roŸ:[mu…öë.ö˛ude.sys]io˘l.h
>

618 #ifde‡
DECNET


619 
	~<ty≥s.h
>

620 
	~<sockë.h
>

621 
	~<dn
>

622 
	~<d√tdb
>

625 #ifde‡
CADDR_T


626 
	#__CADDR_T


	)

628 
	~<sockë.h
>

629 
	~<ö.h
>

630 
	~<öë.h
>

631 
	~<√tdb.h
>

632 
	~<ucx$öëdef.h
>

637 
	#TCP_INCLUDES_DONE


	)

639 #ifde‡
UCX


640 
	#SIMPLE_TELNET


	)

649 
	#USE_DIRENT


	)

650 
	#GOT_READ_DIR


	)

651 
	~<dúít.h
>

652 
	#DIR
 
dúít


	)

653 
	#R_OK
 4

	)

661 #ifde‡
VAXC


662 
	#GLOBALDEF
 
globÆdef


	)

663 
	#GLOBALREF
 
globÆªf


	)

673 #i‚de‡
GLOBALREF


674 
	#GLOBALDEF


	)

675 
	#GLOBALREF
 

	)

685 #ifde‡
VMS


686 
	tmode_t
;

687 
	#HT_STAT
 
HTSèt


	)

688 
	#HT_LSTAT
 
HTSèt


	)

690 #i‚de‡
HT_STAT


691 
	#HT_STAT
 
°©


	)

693 #i‚de‡
HT_LSTAT


694 
	#HT_LSTAT
 
l°©


	)

710 #ifde‡
VMS


711 
	~<°dio.h
>

712 
	~<°dlib.h
>

713 
	~<unixlib.h
>

714 
	~<˘y≥.h
>

715 #i‡
deföed
(
VAXC
Ë&& !deföed(
__DECC
)

716 
	#mÆloc
 
VAXC$MALLOC_OPT


	)

717 
	#ˇŒoc
 
VAXC$CALLOC_OPT


	)

718 
	#‰ì
 
VAXC$FREE_OPT


	)

719 
	#c‰ì
 
VAXC$CFREE_OPT


	)

720 
	#ªÆloc
 
VAXC$REALLOC_OPT


	)

722 
	#u∆ök
 
ªmove


	)

723 
	#gmtime
 
loˇ…ime


	)

724 
	~<°©.h
>

725 
	#S_ISDIR
(
m
Ë(((m)&
S_IFMT
Ë=
S_IFDIR
)

	)

726 
	#S_ISREG
(
m
Ë(((m)&
S_IFMT
Ë=
S_IFREG
)

	)

727 
	#puãnv
 
HTVMS_puãnv


	)

736 #ifde‡
VMS


737 #i‚de‡
DECC


738 #unde‡
HAVE_STRFTIME


740 #unde‡
HAVE_MKTIME


741 #unde‡
HAVE_TIMEGM


742 
	#NO_GMTOFF


	)

743 #unde‡
HAVE_TIMEZONE


753 #ifde‡
VMS


754 #i‚de‡
__DECC


755 
uî∫o
;

756 vﬁ©ûê
nosh¨e
 
sockë_î∫o
;

758 vﬁ©ûê
nosh¨e
 
vm£ºno
;

759 vﬁ©ûê
nosh¨e
 
î∫o
;

760 
	#ERRNO_DONE


	)

781 #ifde‡
HAVE_STDIO_H


782 
	~<°dio.h
>

786 #ifde‡
HAVE_SYS_TYPES_H


787 
	~<sys/ty≥s.h
>

789 #ifde‡
HAVE_TYPES_H


790 
	~<ty≥s.h
>

795 #ifde‡
HAVE_UNISTD_H


796 
	~<uni°d.h
>

798 #ifde‡
HAVE_SYS_UNISTD_H


799 
	~<sys/uni°d.h
>

804 #ifde‡
HAVE_FCNTL_H


805 
	~<f˙é.h
>

807 #ifde‡
HAVE_SYS_FCNTL_H


808 
	~<sys/f˙é.h
>

813 #ifde‡
HAVE_SYS_MACHINE_H


814 
	~<sys/machöe.h
>

818 #ifde‡
HAVE_SYS_LIMITS_H


819 
	~<sys/limôs.h
>

821 #ifde‡
HAVE_LIMITS_H


822 
	~<limôs.h
>

827 #ifde‡
HAVE_SYS_STAT_H


828 
	~<sys/°©.h
>

830 #ifde‡
HAVE_STAT_H


831 
	~<°©.h
>

836 #i‡
deföed
(
__GLIBC__
)

837 #unde‡
S_IFMT


838 #unde‡
S_IFDIR


839 
	#S_IFMT
 
__S_IFMT


	)

840 
	#S_IFDIR
 
__S_IFDIR


	)

844 #ifde‡
HAVE_NETINET_IN_H


845 
	~<√töë/ö.h
>

847 #ifde‡
HAVE_IN_H


848 
	~<ö.h
>

853 #ifde‡
HAVE_NETINET_TCP_H


854 
	~<√töë/t˝.h
>

856 #ifde‡
HAVE_TCP_H


857 
	~<t˝.h
>

862 #ifde‡
HAVE_SYS_FILE_H


863 
	~<sys/fûe.h
>

867 #ifde‡
HAVE_SYS_SYSTEMINFO_H


868 
	~<sys/sy°emöfo.h
>

872 #ifde‡
HAVE_SYS_IOCTL_H


873 
	~<sys/io˘l.h
>

877 #ifde‡
HAVE_TERMIOS_H


878 
	~<ãrmios.h
>

882 #ifde‡
TIME_WITH_SYS_TIME


883 
	~<sys/time.h
>

884 
	~<time.h
>

886 #ifde‡
HAVE_SYS_TIME_H


887 
	~<sys/time.h
>

889 #ifde‡
HAVE_TIME_H


890 
	~<time.h
>

896 #ifde‡
HAVE_STRING_H


897 
	~<°rög.h
>

899 #ifde‡
HAVE_STRINGS_H


900 
	~<°rögs.h
>

905 #ifde‡
HAVE_SYSLOG_H


906 
	~<sy¶og.h
>

908 #ifde‡
HAVE_SYS_SYSLOG_H


909 
	~<sys/sockë.h
>

914 #ifde‡
HAVE_SYS_SOCKET_H


915 
	~<sys/sockë.h
>

917 #ifde‡
HAVE_SOCKET_H


918 
	~<sockë.h
>

923 #ifde‡
HAVE_SOCKET_EXT_H


924 
	~<sockë.ext.h
>

928 #ifde‡
HAVE_APPKIT_APPKIT_H


929 
	~<≠pkô/≠pkô.h
>

931 #ifde‡
HAVE_APPKIT_H


932 
	~<≠pkô.h
>

937 #ifde‡
HAVE_DN_H


938 
	~<dn.h
>

942 #ifde‡
HAVE_SYS_IPC_H


943 
	~<sys/ùc.h
>

947 #ifde‡
HAVE_ERRNO_H


948 
	~<î∫o.h
>

950 #ifde‡
HAVE_SYS_ERRNO_H


951 
	~<sys/î∫o.h
>

953 #ifde‡
HAVE_NET_ERRNO_H


954 
	~<√t/î∫o.h
>

960 #ifde‡
HAVE_PWD_H


961 
	~<pwd.h
>

965 #ifde‡
HAVE_GRP_H


966 
	~<gΩ.h
>

970 #ifde‡
HAVE_ARPA_INET_H


971 
	~<¨∑/öë.h
>

973 #ifde‡
HAVE_INET_H


974 
	~<öë.h
>

979 #ifde‡
HAVE_NETDB_H


980 
	~<√tdb.h
>

984 #ifde‡
HAVE_MANIFEST_H


985 
	~<m™i„°.h
>

989 #ifde‡
HAVE_BSDTYPES_H


990 
	~<bsdty≥s.h
>

994 #ifde‡
HAVE_STDEFS_H


995 
	~<°defs.h
>

999 #ifde‡
HAVE_BSDTIME_H


1000 
	~<bsdtime.h
>

1004 #ifde‡
HAVE_SYS_SELECT_H


1005 
	~<sys/£À˘.h
>

1007 #ifde‡
HAVE_SELECT_H


1008 
	~<£À˘.h
>

1013 #ifde‡
HAVE_DNETDB_H


1014 
	~<d√tdb.h
>

1018 #ifde‡
HAVE_UCX_INETDEF_H


1019 
	~<ucx$öëdef.h
>

1023 #ifde‡
HAVE_LIBC_H


1024 
	~<libc.h
>

1028 #ifde‡
HAVE_STDLIB_H


1029 
	~<°dlib.h
>

1033 #ifde‡
HAVE_MALLOC_H


1034 
	~<mÆloc.h
>

1038 #ifde‡
HAVE_MEMORY_H


1039 
	~<mem‹y.h
>

1043 #ifde‡
HAVE_UNIXLIB_H


1044 
	~<unixlib.h
>

1048 #ifde‡
HAVE_DIRECT_H


1049 
	~<dúe˘.h
>

1053 #ifde‡
HAVE_CTYPE_H


1054 
	~<˘y≥.h
>

1058 #ifde‡
CURSES


1059 #ifde‡
HAVE_CURSESX_H


1060 
	~<cur£sX.h
>

1062 #ifde‡
HAVE_CURSES_H


1063 
	~<cur£s.h
>

1069 #ifde‡
HAVE_SYS_RESOURCE_H


1070 
	~<sys/ªsour˚.h
>

1072 #ifde‡
HAVE_RESOURCE_H


1073 
	~<ªsour˚.h
>

1078 #ifde‡
HAVE_DIRENT_H


1079 
	~<dúít.h
>

1080 
	#NAMLEN
(
dúít
Ë
	`°æí
((dúít)->
d_«me
)

	)

1082 
	#dúít
 
dúe˘


	)

1083 
	#NAMLEN
(
dúít
Ë(dúít)->
d_«mÀn


	)

1084 #ifde‡
HAVE_SYS_NDIR_H


1085 
	~<sys/ndú.h
>

1087 #ifde‡
HAVE_SYS_DIR_H


1088 
	~<sys/dú.h
>

1090 #ifde‡
HAVE_DIR_H


1091 
	~<dú.h
>

1093 #ifde‡
HAVE_NDIR_H


1094 
	~<ndú.h
>

1098 #i‡!
deföed
(
HAVE_STRCHR
)

1099 
	#°rchr
 
ödex


	)

1100 
	#°ºchr
 
rödex


	)

1102 #i‡!
deföed
(
HAVE_MEMCPY
)

1103 
	#mem˝y
(
d
, 
s
, 
n
Ë
	`bc›y
((s), (d), (n))

	)

1104 
	#memmove
(
d
, 
s
, 
n
Ë
	`bc›y
((s), (d), (n))

	)

1108 #i‡
deföed
(
STDC_HEADERS
Ë|| deföed(
__STDC__
)

1109 
	~<°d¨g.h
>

1111 #i‚de‡
WWW_MSWINDOWS


1112 
	~<v¨¨gs.h
>

1117 #ifde‡
HAVE_SYS_WAIT_H


1118 
	~<sys/waô.h
>

1120 #i‚de‡
WEXITSTATUS


1121 
	#WEXITSTATUS
(
°©_vÆ
Ë((()(°©_vÆË>> 8Ë& 255)

	)

1123 #i‚de‡
WIFEXITED


1124 
	#WIFEXITED
(
°©_vÆ
Ë(((°©_vÆË& 255Ë=0)

	)

1127 #ifde‡
HT_POSIX_REGEX


1128 #ifde‡
HAVE_RXPOSIX_H


1129 
	~<rxposix.h
>

1131 #ifde‡
HAVE_REGEX_H


1132 
	~<ªgex.h
>

1135 
	#W3C_DEFAULT_REGEX_FLAGS
 (
REG_EXTENDED
 | 
REG_NEWLINE
)

	)

1144 #i‚de‡
__MINGW32__


1145 #i‚de‡
BOOLEAN


1146 
	tBOOLEAN
;

1150 #i‚de‡
CURSES


1151 #i‚de‡
TRUE


1152 
	#TRUE
 (
BOOLEAN
)1

	)

1153 
	#FALSE
 (
BOOLEAN
)0

	)

1157 #i‡!
deföed
(
BOOL
Ë&& !deföed(
WWW_MSWINDOWS
)

1158 
	#BOOL
 
BOOLEAN


	)

1161 #i‚de‡
YES


1162 
	#YES
 (
BOOL
)1

	)

1163 
	#NO
 (
BOOL
)0

	)

1196 #i‚de‡
NULL


1197 
	#NULL
 ((*)0)

	)

1208 #i‚de‡
SLEEP


1209 
	#SLEEP
(
n
Ë
	`¶ìp
“)

	)

1224 #ifde‡
SOCKS


1225 #ifde‡
SOCKS4


1226 
	#c⁄√˘
 
Rc⁄√˘


	)

1227 
	#gësock«me
 
Rgësock«me


	)

1228 
	#gë≥î«me
 
Rgë≥î«me


	)

1229 
	#böd
 
Rböd


	)

1230 
	#ac˚±
 
Rac˚±


	)

1231 
	#li°í
 
Rli°í


	)

1232 
	#£À˘
 
R£À˘


	)

1233 
	#ªcv‰om
 
Rªcv‰om


	)

1234 
	#£ndto
 
R£ndto


	)

1235 
	#ªcv
 
Rªcv


	)

1236 
	#£nd
 
R£nd


	)

1237 
	#ªad
 
Rªad


	)

1238 
	#wrôe
 
Rwrôe


	)

1239 
	#ºesvp‹t
 
Rºesvp‹t


	)

1240 
	#shutdown
 
Rshutdown


	)

1241 
	#li°í
 
Rli°í


	)

1242 
	#˛o£
 
R˛o£


	)

1243 
	#dup
 
Rdup


	)

1244 
	#dup2
 
Rdup2


	)

1245 
	#f˛o£
 
Rf˛o£


	)

1246 
	#gëho°by«me
 
Rgëho°by«me


	)

1248 #ifde‡
SOCKS5


1249 
	#c⁄√˘
 
SOCKSc⁄√˘


	)

1250 
	#gësock«me
 
SOCKSgësock«me


	)

1251 
	#gë≥î«me
 
SOCKSgë≥î«me


	)

1252 
	#böd
 
SOCKSböd


	)

1253 
	#ac˚±
 
SOCKSac˚±


	)

1254 
	#li°í
 
SOCKSli°í


	)

1255 
	#£À˘
 
SOCKS£À˘


	)

1256 
	#ªcv‰om
 
SOCKSªcv‰om


	)

1257 
	#£ndto
 
SOCKS£ndto


	)

1258 
	#ªcv
 
SOCKSªcv


	)

1259 
	#£nd
 
SOCKS£nd


	)

1260 
	#ªad
 
SOCKSªad


	)

1261 
	#wrôe
 
SOCKSwrôe


	)

1262 
	#ºesvp‹t
 
SOCKSºesvp‹t


	)

1263 
	#shutdown
 
SOCKSshutdown


	)

1264 
	#li°í
 
SOCKSli°í


	)

1265 
	#˛o£
 
SOCKS˛o£


	)

1266 
	#dup
 
SOCKSdup


	)

1267 
	#dup2
 
SOCKSdup2


	)

1268 
	#f˛o£
 
SOCKSf˛o£


	)

1269 
	#gëho°by«me
 
SOCKSgëho°by«me


	)

1280 #ifde‡
DECNET


1281 
sockaddr_dn
 
	tSockA
;

1283 
sockaddr_ö
 
	tSockA
;

1292 #i‚de‡
NETCLOSE


1293 
	#NETCLOSE
 
˛o£


	)

1296 #i‚de‡
NETREAD


1297 
	#NETREAD
 
ªad


	)

1300 #i‚de‡
NETWRITE


1301 
	#NETWRITE
 
wrôe


	)

1304 #i‚de‡
NETWRITEV


1305 
	#NETWRITEV
 
wrôev


	)

1318 #i‚de‡
ERRNO_DONE


1319 
î∫o
;

1320 
	#so˚ºno
 
î∫o


	)

1323 #i‚de‡
HAVE_STRERROR


1324 *
sys_îæi°
[];

1325 
sys_√º
;

1336 #i‚de‡
SOCKET


1337 
	#SOCKET
 

	)

1338 
	#INVSOC
 (-1Ë

	)

1341 #ifde‡
__svr4__


1342 
	#HT_BACKLOG
 32

	)

1344 
	#HT_BACKLOG
 5

	)

1354 #i‚de‡
_WINSOCKAPI_


1355 
	#FD_READ
 0x01

	)

1356 
	#FD_WRITE
 0x02

	)

1357 
	#FD_OOB
 0x04

	)

1358 
	#FD_ACCEPT
 0x08

	)

1359 
	#FD_CONNECT
 0x10

	)

1360 
	#FD_CLOSE
 0x20

	)

1370 #i‚de‡
HT_MAX_PATH


1371 #ifde‡
MAXPATHLEN


1372 
	#HT_MAX_PATH
 
MAXPATHLEN


	)

1374 #ifde‡
PATH_MAX


1375 
	#HT_MAX_PATH
 
PATH_MAX


	)

1377 
	#HT_MAX_PATH
 1024

	)

1382 #i‚de‡
HT_MAX_TMPNAM


1383 #ifde‡
L_tm≤am


1384 
	#HT_MAX_TMPNAM
 
L_tm≤am


	)

1386 
	#HT_MAX_TMPNAM
 128

	)

1402 #ifde‡
LIBWWW_SMALL


1403 
	#HT_XL_HASH_SIZE
 101

	)

1404 
	#HT_L_HASH_SIZE
 67

	)

1405 
	#HT_M_HASH_SIZE
 31

	)

1406 
	#HT_S_HASH_SIZE
 5

	)

1408 #ifde‡
LIBWWW_LARGE


1409 
	#HT_XL_HASH_SIZE
 1499

	)

1410 
	#HT_L_HASH_SIZE
 599

	)

1411 
	#HT_M_HASH_SIZE
 101

	)

1412 
	#HT_S_HASH_SIZE
 67

	)

1414 #ifde‡
LIBWWW_EXTRA_LARGE


1415 
	#HT_XL_HASH_SIZE
 9973

	)

1416 
	#HT_L_HASH_SIZE
 1499

	)

1417 
	#HT_M_HASH_SIZE
 599

	)

1418 
	#HT_S_HASH_SIZE
 101

	)

1420 
	#HT_XL_HASH_SIZE
 599

	)

1421 
	#HT_L_HASH_SIZE
 101

	)

1422 
	#HT_M_HASH_SIZE
 67

	)

1423 
	#HT_S_HASH_SIZE
 11

	)

1434 #ifde‡
GETGROUPS_T


1435 #i‚de‡
NGROUPS


1436 #ifde‡
NGROUPS_MAX


1437 
	#NGROUPS
 
NGROUPS_MAX


	)

1439 
	#NGROUPS
 20

	)

1450 #i‚de‡
MAXHOSTNAMELEN


1451 
	#MAXHOSTNAMELEN
 64

	)

1460 #i‚de‡
MKDIR


1461 
	#MKDIR
(
a
,
b
Ë
	`mkdú
(◊), (b))

	)

1464 #i‚de‡
RMDIR


1465 
	#RMDIR
(
a
Ë
	`rmdú
(◊))

	)

1468 #i‚de‡
REMOVE


1469 
	#REMOVE
(
a
Ë
	`u∆ök
(◊))

	)

1472 #i‚de‡
DEFAULT_SUFFIXES


1473 
	#DEFAULT_SUFFIXES
 ".,_"

	)

1476 #i‚de‡
DIR_SEPARATOR


1477 
	#DIR_SEPARATOR_CHAR
 '/'

	)

1478 
	#DIR_SEPARATOR_STR
 "/"

	)

1481 #i‚de‡
F_OK


1482 
	#R_OK
 4

	)

1483 
	#W_OK
 2

	)

1484 
	#X_OK
 1

	)

1485 
	#F_OK
 0

	)

1494 #i‚de‡
FD_SET


1495 
	#FD_SET
(
fd
, 
m
Ë(*(*)(mË|(1 << (fd)))

	)

1498 #i‚de‡
FD_CLR


1499 
	#FD_CLR
(
fd
, 
m
Ë(*(*)(mË&~(1 << (fd)))

	)

1502 #i‚de‡
FD_ZERO


1503 
	#FD_ZERO
(
m
Ë(*(*)(m)Ë0

	)

1506 #i‚de‡
FD_ISSET


1507 
	#FD_ISSET
(
fd
, 
m
Ë(*(*)(mË& (1 << (fd)))

	)

1516 #i‚de‡
TOASCII


1517 
	#TOASCII
(
c
Ë(c)

	)

1518 
	#FROMASCII
(
c
Ë(c)

	)

1531 #i‚de‡
CACHE_FILE_PREFIX


1532 #ifde‡
unix


1533 
	#CACHE_FILE_PREFIX
 "/u§/w§c/"

	)

1546 #ifde‡
HT_REENTRANT


1548 #ifde‡
_POSIX_LOGIN_NAME_MAX


1549 
	#HT_LOGNAME_MAX
 
_POSIX_LOGIN_NAME_MAX


	)

1551 #ifde‡
LOGNAME_MAX


1552 
	#HT_LOGNAME_MAX
 (
LOGNAME_MAX
+1)

	)

1554 
	#HT_LOGNAME_MAX
 64

	)

1558 
	#HOSTENT_MAX
 1024

	)

1559 
	#CTIME_MAX
 26

	)

1570 
	tms_t
;

	@LineMode/src/ConView.c

1 
	~"WWWLib.h
"

2 
	~"HTBrow£.h
"

4 
PRIVATE
 
	gWeHaveAVõw
 = 0;

6 
	s_HTVõw
 {

7 
FILE
 * 
	moutFûe
;

10 
PRIVATE
 
HTVõw
 
	gTheO∆yVõw
;

12 
PUBLIC
 
HTVõw
 * 
	$HTVõw_¸óã
(* 
«me
, 
rows
, 
cﬁs
, 
LöeMode
 * 
pLm
)

14 i‡(
WeHaveAVõw
)  0;

15 
WeHaveAVõw
 = 1;

16 
TheO∆yVõw
.
outFûe
 = 
°dout
;

17  &
TheO∆yVõw
;

18 
	}
}

20 
PUBLIC
 
BOOL
 
	$HTVõw_de°roy
(
HTVõw
 * 
pVõw
)

22 i‡(!
WeHaveAVõw
 || 
pVõw
 !&
TheO∆yVõw
)

23  
NO
;

24 
WeHaveAVõw
 = 0;

25  
YES
;

26 
	}
}

28 
PUBLIC
 
	$OuçutD©a
(
HTVõw
 * 
pVõw
, c⁄° * 
fmt
, ...)

30 
ªt
;

31 
va_li°
 
pArgs
;

32 
	`va_°¨t
(
pArgs
, 
fmt
);

33 
ªt
 = 
	`vÂrötf
(
pVõw
->
outFûe
, 
fmt
, 
pArgs
);

34 
	`va_íd
(
pArgs
);

35  
ªt
;

36 
	}
}

	@LineMode/src/DefaultStyles.c

10 
	~"WWWLib.h
"

11 
	~"HTF⁄t.h
"

12 
	~"HTStyÀ.h
"

13 
	~"GridStyÀ.h
"

15 
	~"GridText.h
"

19 
PRIVATE
 
HTTabSt›
 
	gèbs_8
[] = {

27 #ifde‡
NOT_USED


28 
PRIVATE
 
HTTabSt›
 
	gèbs_16
[] = {

35 
PRIVATE
 
HTTabSt›
 
	gèbs_24
[] = {

47 
PRIVATE
 
HTStyÀ
 
	gHTStyÀN‹mÆ
 = { 0, "Normal", "P",

48 
HT_FONT
, 1.0, 
HT_BLACK
, 0, 0,

49 3, 3, 0, 
HT_LEFT
, 1, 0, 
èbs_8
,

50 
YES
, YES, 1, 1, 0 };

52 
PRIVATE
 
HTStyÀ
 
	gHTStyÀLi°
 = { &
HTStyÀN‹mÆ
, "List", "UL",

53 
HT_FONT
, 1.0, 
HT_BLACK
, 0, 0,

54 6, 6, 0, 
HT_LEFT
, 1, 0, 0,

55 
YES
, YES, 1, 1, 0 };

57 
PRIVATE
 
HTStyÀ
 
	gHTStyÀMíu
 = {

58 &
HTStyÀLi°
, "Menu", "MENU",

59 
HT_FONT
, 1.0, 
HT_BLACK
, 0, 0,

60 1, 1, 0, 
HT_LEFT
, 1, 0, 0,

61 
YES
, YES, 0, 0, 0

64 
PRIVATE
 
HTStyÀ
 
	gHTStyÀDúe˘
 = {

65 &
HTStyÀMíu
, "Dir", "DIR",

66 
HT_FONT
, 1.0, 
HT_BLACK
, 0, 0,

67 0, 0, 0, 
HT_LEFT
, 1, 0, 
èbs_24
,

68 
YES
, YES, 0, 0, 0

71 
PRIVATE
 
HTStyÀ
 
	gHTStyÀGlosßry
 = {

72 &
HTStyÀDúe˘
, "Glossary", "DL",

73 
HT_FONT
, 1.0, 
HT_BLACK
, 0, 0,

74 2, 25, 0, 
HT_LEFT
, 1, 0, 0,

75 
YES
, YES, 1, 1, 0

77 
PRIVATE
 
HTStyÀ
 
	gHTStyÀGlosßryCom∑˘
 = {

78 &
HTStyÀGlosßry
, "GlossaryCompact", "DLC",

79 
HT_FONT
, 1.0, 
HT_BLACK
, 0, 0,

80 0, 24, 0, 
HT_LEFT
, 1, 0, 0,

81 
YES
, YES, 0, 0, 0

83 
PRIVATE
 
HTStyÀ
 
	gHTStyÀExam∂e
 =

84 { &
HTStyÀGlosßryCom∑˘
, "Example", "XMP",

85 
HT_FONT
, 1.0, 
HT_BLACK
, 0, 0,

86 0, 0, 0, 
HT_LEFT
, 1, 0, 
èbs_8
,

87 
NO
, NO, 1, 1, 0

90 
PRIVATE
 
HTStyÀ
 
	gHTStyÀPªf‹m©ãd
 =

91 { &
HTStyÀExam∂e
, "Preformatted", "PRE",

92 
HT_FONT
, 1.0, 
HT_BLACK
, 0, 0,

93 0, 0, 0, 
HT_LEFT
, 1, 0, 
èbs_8
,

94 
NO
, 
YES
, 1, 1, 0

97 
PRIVATE
 
HTStyÀ
 
	gHTStyÀLi°ög
 =

98 { &
HTStyÀPªf‹m©ãd
, "Listing", "LISTING",

99 
HT_FONT
, 1.0, 
HT_BLACK
, 0, 0,

100 0, 0, 0, 
HT_LEFT
, 1, 0, 
èbs_8
,

101 
NO
, NO, 1, 1, 0 };

103 
PRIVATE
 
HTStyÀ
 
	gHTStyÀAddªss
 =

104 { &
HTStyÀLi°ög
, "Address", "ADDRESS",

105 
HT_FONT
, 1.0, 
HT_BLACK
, 0, 0,

106 0, 0, 0, 
HT_RIGHT
, 1, 0, 0,

107 
NO
, NO, 1, 1, 0 };

109 
PRIVATE
 
HTStyÀ
 
	gHTStyÀBlockQuŸe
 =

110 { &
HTStyÀAddªss
, "BlockQuote", "BLOCKQUOTE",

111 
HT_FONT
, 1.0, 
HT_BLACK
, 0, 0,

112 7, 5, 5, 
HT_LEFT
, 1, 0, 0,

113 
NO
, NO, 1, 1, 0 };

115 
PRIVATE
 
HTStyÀ
 
	gHTStyÀHódög1
 =

116 { &
HTStyÀBlockQuŸe
, "Heading1", "H1",

117 
HT_FONT
+
HT_CAPITALS
+
HT_BOLD
, 1.0, 
HT_BLACK
, 0, 0,

118 0, 0, 0, 
HT_CENTER
, 1, 0, 0,

119 
YES
, YES, 1, 1, 0 };

121 
PRIVATE
 
HTStyÀ
 
	gHTStyÀHódög2
 =

122 { &
HTStyÀHódög1
, "Heading2", "H2",

123 
HT_FONT
+
HT_CAPITALS
, 1.0, 
HT_BLACK
, 0, 0,

124 0, 0, 0, 
HT_LEFT
, 1, 0, 0,

125 
YES
, YES, 1, 1, 0 };

127 
PRIVATE
 
HTStyÀ
 
	gHTStyÀHódög3
 = { &
HTStyÀHódög2
, "Heading3", "H3",

128 
HT_FONT
+
HT_BOLD
, 1.0, 
HT_BLACK
, 0, 0,

129 2, 2, 0, 
HT_LEFT
, 1, 0, 0,

130 
YES
, YES, 1, 0, 0 };

132 
PRIVATE
 
HTStyÀ
 
	gHTStyÀHódög4
 = { &
HTStyÀHódög3
, "Heading4", "H4",

133 
HT_FONT
, 1.0, 
HT_BLACK
, 0, 0,

134 4, 4, 0, 
HT_LEFT
, 1, 0, 0,

135 
YES
, YES, 1, 0, 0 };

137 
PRIVATE
 
HTStyÀ
 
	gHTStyÀHódög5
 = { &
HTStyÀHódög4
, "Heading5", "H5",

138 
HT_FONT
, 1.0, 
HT_BLACK
, 0, 0,

139 6, 6, 0, 
HT_LEFT
, 1, 0, 0,

140 
YES
, YES, 1, 0, 0 };

142 
PRIVATE
 
HTStyÀ
 
	gHTStyÀHódög6
 = { &
HTStyÀHódög5
, "Heading6", "H6",

143 
HT_FONT
, 1.0, 
HT_BLACK
, 0, 0,

144 8, 8, 0, 
HT_LEFT
, 1, 0, 0,

145 
YES
, YES, 1, 0, 0 };

147 
PRIVATE
 
HTStyÀ
 
	gHTStyÀHódög7
 = { &
HTStyÀHódög6
, "Heading7", "H7",

148 
HT_FONT
, 1.0, 
HT_BLACK
, 0, 0,

149 10, 10, 0, 
HT_LEFT
, 1, 0, 0,

150 
YES
, YES, 1, 0, 0 };

154 
PRIVATE
 
HTStyÀShìt
 
	gshìt
 = { "deÁu….°yÀ", &
HTStyÀHódög7
 };

156 
PUBLIC
 
HTStyÀShìt
 * 
	g°yÀShìt
 = &
shìt
;

	@LineMode/src/GridStyle.c

15 
	~"WWWLib.h
"

16 
	~"HTUtûs.h
"

17 
	~"GridStyÀ.h
"

28 
	tHTCo‹d
;

29 
	tHTCﬁ‹
;

32 
	mköd
;

33 
HTCo‹d
 
	mposôi⁄
;

34 } 
	tHTTabSt›
;

36 
	tHTLMF⁄t
;

38 
	#HT_NON_BREAK_SPACE
 (()1Ë

	)

40 
	#HT_FONT
 0

	)

41 
	#HT_CAPITALS
 1

	)

42 
	#HT_BOLD
 2

	)

43 
	#HT_UNDERLINE
 4

	)

44 
	#HT_INVERSE
 8

	)

45 
	#HT_DOUBLE
 0x10

	)

47 
	#HT_BLACK
 0

	)

48 
	#HT_WHITE
 1

	)

50 
	s_HTStyÀ
 {

54 
_HTStyÀ
 *
	m√xt
;

55 * 
	m«me
;

56 * 
	mSGMLTag
;

61 
HTF⁄t
 
	mf⁄t
;

62 
HTCo‹d
 
	mf⁄tSize
;

63 
HTCﬁ‹
 
	mcﬁ‹
;

64 
	msu≥rs¸ùt
;

66 
HTAnch‹
 *
	m™ch‹
;

70 
HTCo‹d
 
	mödít1°
;

72 
HTCo‹d
 
	mÀ·Indít
;

73 
HTCo‹d
 
	mrightIndít
;

74 
	mÆignmít
;

75 
HTCo‹d
 
	mlöeHt
;

76 
HTCo‹d
 
	mdes˚¡Löe
;

77 
HTTabSt›
 *
	mèbs
;

79 
BOOL
 
	mw‹dWøp
;

80 
BOOL
 
	mHT_FREEF‹m©
;

81 
HTCo‹d
 
	m•a˚Bef‹e
;

82 
HTCo‹d
 
	m•a˚A·î
;

83 
	m∑øFœgs
;

85 
	#PARA_KEEP
 1

	)

86 
	#PARA_WITH_NEXT
 2

	)

88 
	#HT_JUSTIFY
 0

	)

89 
	#HT_LEFT
 1

	)

90 
	#HT_RIGHT
 2

	)

91 
	#HT_CENTER
 3

	)

99 
PUBLIC
 
HTStyÀ
* 
	$HTStyÀNew
 ()

101 
HTStyÀ
 *
°yÀ
;

102 i‡((
°yÀ
 = (
HTStyÀ
 *Ë
	`HT_CALLOC
(1, (HTStyÀ))Ë=
NULL
)

103 
	`HT_OUTOFMEM
("HTStyleNew");

104  
°yÀ
;

105 
	}
}

109 
PUBLIC
 
HTStyÀ
* 
	$HTStyÀNewNamed
 (c⁄° * 
«me
)

111 
HTStyÀ
 * 
£lf
 = 
	`HTStyÀNew
();

112 
	`SåAŒocC›y
(
£lf
->
«me
,Çame);

113  
£lf
;

114 
	}
}

119 
PUBLIC
 
HTStyÀ
 * 
	$HTStyÀFªe
 (
HTStyÀ
 * 
£lf
)

121 i‡(
£lf
->
«me
Ë
	`HT_FREE
(self->name);

122 i‡(
£lf
->
SGMLTag
Ë
	`HT_FREE
(self->SGMLTag);

123 
	`HT_FREE
(
£lf
);

125 
	}
}

131 #ifde‡
HTML2_ONLY


133 
PUBLIC
 
HTStyÀ
 * 
	$HTModfyStyÀ
 (
HTStyÀ
 * 
ﬁd
, * 
√°ög
,

134 
ñemít_numbî
)

137 
HTStyÀ
 * 
s
;

138 i‡((
s
 = (
HTStyÀ
 *Ë
	`HT_MALLOC
((*s))Ë=
NULL
)

139 
	`HT_OUTOFMEM
("new style");

141 *
s
 = *
ﬁd
;

142 
ñemít_numbî
) {

143 
HTML_UL
:

144 
HTML_OL
:

146 
dóu…
: ;

148  
s
;

149 
	}
}

159 
HTStyÀ
 * 
	$HTStyÀNamed
 (
HTStyÀShìt
 * 
£lf
, c⁄° * 
«me
)

161 
HTStyÀ
 * 
sˇn
;

162 
sˇn
=
£lf
->
°yÀs
; sˇn; sˇn=sˇn->
√xt
)

163 i‡(0==
	`°rcmp
(
sˇn
->
«me
,Çame))  scan;

164 
	`HTTRACE
(
SGML_TRACE
, "StyÀShìt: Nÿ°yÀÇamed `%s'\n" 
_
 
«me
);

166 
	}
}

173 
HTStyÀShìt
 * 
	$HTStyÀShìtAddStyÀ
 (
HTStyÀShìt
 * 
£lf
, 
HTStyÀ
 * 
°yÀ
)

175 
°yÀ
->
√xt
 = 0;

176 i‡(!
£lf
->
°yÀs
) {

177 
£lf
->
°yÀs
 = 
°yÀ
;

179 
HTStyÀ
 * 
sˇn
;

180 
sˇn
=
£lf
->
°yÀs
; sˇn->
√xt
; scan=scan->next);

181 
sˇn
->
√xt
=
°yÀ
;

183  
£lf
;

184 
	}
}

189 
HTStyÀShìt
 * 
	$HTStyÀShìtRemoveStyÀ
 (
HTStyÀShìt
 * 
£lf
, 
HTStyÀ
 * 
°yÀ
)

191 i‡(
£lf
->
°yÀs
 =
°yÀ
) {

192 
£lf
->
°yÀs
 = 
°yÀ
->
√xt
;

193  
£lf
;

195 
HTStyÀ
 * 
sˇn
;

196 
sˇn
 = 
£lf
->
°yÀs
; sˇn; sˇ¿sˇn->
√xt
) {

197 i‡(
sˇn
->
√xt
 =
°yÀ
) {

198 
sˇn
->
√xt
 = 
°yÀ
->next;

199  
£lf
;

204 
	}
}

209 
HTStyÀShìt
 * 
	$HTStyÀShìtNew
 ()

211 
HTStyÀShìt
 * 
°yÀ
;

212 i‡((
°yÀ
 = (
HTStyÀShìt
 *Ë
	`HT_CALLOC
(1, (HTStyÀShìt))Ë=
NULL
)

213 
	`HT_OUTOFMEM
("HTStyleSheetNew");

214  
°yÀ
;

215 
	}
}

220 
HTStyÀShìt
 * 
	$HTStyÀShìtFªe
 (
HTStyÀShìt
 * 
£lf
)

222 
HTStyÀ
 * 
°yÀ
;

223 (
°yÀ
=
£lf
->
°yÀs
)!=0) {

224 
£lf
->
°yÀs
 = 
°yÀ
->
√xt
;

225 
	`HTStyÀFªe
(
°yÀ
);

227 
	`HT_FREE
(
£lf
);

229 
	}
}

239 #ifde‡
NEXT_SUPRESS


240 
HTStyÀShìt
 * 
	$HTStyÀShìtRód
(
HTStyÀShìt
 * 
£lf
, 
NXSåóm
 * 
°ªam
)

242 
numStyÀs
;

243 
i
;

244 
HTStyÀ
 * 
°yÀ
;

245 
°yÀName
[80];

246 
	`NXSˇnf
(
°ªam
, " %d ", &
numStyÀs
);

247 
	`HTTRACE
(
SGML_TRACE
, "StyÀshìt: Ródög %d styÀs\n" 
_
 
numStyÀs
);

248 
i
=0; i<
numStyÀs
; i++) {

249 
	`NXSˇnf
(
°ªam
, "%s", 
°yÀName
);

250 
°yÀ
 = 
	`HTStyÀNamed
(
£lf
, 
°yÀName
);

251 i‡(!
°yÀ
) {

252 
°yÀ
 = 
	`HTStyÀNewNamed
(
°yÀName
);

253 (Ë
	`HTStyÀShìtAddStyÀ
(
£lf
, 
°yÀ
);

255 (Ë
	`HTStyÀRód
(
°yÀ
, 
°ªam
);

256 i‡(
SGML_TRACE
)

257 
	`HTStyÀDump
(
°yÀ
);

259  
£lf
;

260 
	}
}

268 
HTStyÀShìt
 * 
	$HTStyÀShìtWrôe
(
HTStyÀShìt
 * 
£lf
, 
NXSåóm
 * 
°ªam
)

270 
numStyÀs
 = 0;

271 
HTStyÀ
 * 
°yÀ
;

273 
°yÀ
=
£lf
->
°yÀs
; styÀ; styÀ=°yÀ->
√xt
Ë
numStyÀs
++;

274 
	`NXPrötf
(
°ªam
, "%d\n", 
numStyÀs
);

276 
	`HTTRACE
(
SGML_TRACE
, "StyÀShìt: Wrôög %d styÀs\n" 
_
 
numStyÀs
);

277 
°yÀ
=
£lf
->
°yÀs
; styÀ; styÀ=°yÀ->
√xt
) {

278 
	`NXPrötf
(
°ªam
, "%†", 
°yÀ
->
«me
);

279 (Ë
	`HTStyÀWrôe
(
°yÀ
, 
°ªam
);

281  
£lf
;

282 
	}
}

	@LineMode/src/GridStyle.h

48 #i‚de‡
GridStyÀ_H


49 
	#GridStyÀ_H


	)

50 
	~"HText.h
"

51 
	~"HTF⁄t.h
"

52 
	~"HTStyÀ.h
"

54 
	tHTCo‹d
;

56 
	tHTCﬁ‹
;

59 
	mköd
;

60 
HTCo‹d
 
	mposôi⁄
;

61 } 
	tHTTabSt›
;

63 
	#STYLE_NAME_LENGTH
 80

	)

71 
	s_HTStyÀ
 {

74 
_HTStyÀ
 * 
	m√xt
;

75 * 
	m«me
;

76 * 
	mSGMLTag
;

80 
HTF⁄t
 
	mf⁄t
;

81 
HTCo‹d
 
	mf⁄tSize
;

82 
HTCﬁ‹
 
	mcﬁ‹
;

83 
	msu≥rs¸ùt
;

85 
HTAnch‹
*
	m™ch‹
;

88 
HTCo‹d
 
	mödít1°
;

89 
HTCo‹d
 
	mÀ·Indít
;

90 
HTCo‹d
 
	mrightIndít
;

91 
	mÆignmít
;

92 
HTCo‹d
 
	mlöeHt
;

93 
HTCo‹d
 
	mdes˚¡Löe
;

94 
HTTabSt›
 *
	mèbs
;

96 
BOOL
 
	mw‹dWøp
;

97 
BOOL
 
	m‰ìF‹m©
;

98 
HTCo‹d
 
	m•a˚Bef‹e
;

99 
HTCo‹d
 
	m•a˚A·î
;

100 
	m∑øFœgs
;

103 
	#PARA_KEEP
 1

	)

104 
	#PARA_WITH_NEXT
 2

	)

106 
	#HT_JUSTIFY
 0

	)

107 
	#HT_LEFT
 1

	)

108 
	#HT_RIGHT
 2

	)

109 
	#HT_CENTER
 3

	)

111 #ifde‡
NOT_IN_GRIDSTYLE


128 
HTStyÀ
 * 
HTStyÀModify
 (HTStyÀ * 
°yÀ
,

129 
HTNe°ög
 * 
√°ög
,

130 
ñemít_numbî
);

133 
HTStyÀ
 * 
HTStyÀNew
 ();

134 
HTStyÀ
 * 
HTStyÀNewNamed
 (c⁄° * 
«me
);

135 
HTStyÀ
 * 
HTStyÀFªe
 (HTStyÀ * 
£lf
);

140 
	s_HTStyÀShìt
 {

141 * 
	m«me
;

142 
HTStyÀ
 * 
	m°yÀs
;

145 #ifde‡
NOT_IN_GRIDSTYLE


148 
HTStyÀShìt
 * 
HTStyÀShìtNew
 ();

149 
HTStyÀShìt
 * 
HTStyÀShìtFªe
 (HTStyÀShìà* 
£lf
);

150 
HTStyÀ
 * 
HTStyÀNamed
 (
HTStyÀShìt
 * 
£lf
, c⁄° * 
«me
);

151 
HTStyÀ
 * 
HTStyÀM©chög
 (
HTStyÀShìt
 *
£lf
, HTStyÀ * 
°yÀ
);

153 
HTStyÀShìt
 * 
HTStyÀShìtAddStyÀ
 (HTStyÀShìà* 
£lf
, 
HTStyÀ
 * 
°yÀ
);

154 
HTStyÀShìt
 * 
HTStyÀShìtRemoveStyÀ
 (HTStyÀShìà* 
£lf
, 
HTStyÀ
 * 
°yÀ
);

156 
	#CLEAR_POINTER
 ((*)-1Ë

	)

	@LineMode/src/GridText.c

12 
	~<as£π.h
>

14 
	~"WWWLib.h
"

15 
	~"WWWCache.h
"

16 
	~"WWWAµ.h
"

17 
	~"WWWHTML.h
"

18 
	~"HTBrow£.h
"

19 
	~"HTF⁄t.h
"

20 
	~"GridStyÀ.h
"

21 
	~"GridText.h
"

24 #ifde‡
CYRILLIC


25 
	~"a_°dio.h
"

28 
	#MAX_LINE
 
HTS¸ìnWidth


	)

29 
	#LOADED_LIMIT
 40

	)

31 #ifde‡
CURSES


32 
	#DISPLAY_LINES
 (
HTS¸ìnHeight
)

	)

33 
	#TITLE_LINES
 0

	)

35 
	#DISPLAY_LINES
 (
HTS¸ìnHeight
 - 2Ë

	)

36 
	#TITLE_LINES
 1

	)

39 
	s_HTSåóm
 {

40 c⁄° 
HTSåómCœss
 * 
	miß
;

46 
HTStyÀShìt
 * 
°yÀShìt
;

50 
PUBLIC
 
HText
 * 
	gHTMaöText
 = 0;

51 
PUBLIC
 
HTP¨ítAnch‹
 * 
	gHTMaöAnch‹
 = 0;

53 
	s_löe
 {

54 
_löe
 *
	m√xt
;

55 
_löe
 *
	m¥ev
;

56 
	moff£t
;

57 
	msize
;

58 
BOOL
 
	m•lô_a·î
;

59 
BOOL
 
	mbuŒë
;

60 
	md©a
[1];

61 } 
	tHTLöe
;

63 
	#LINE_SIZE
(
l
Ë((
HTLöe
)+÷)Ë

	)

65 
	s_TextAnch‹
 {

66 
_TextAnch‹
 * 
	m√xt
;

67 
	mnumbî
;

68 
	m°¨t
;

69 
	mexã¡
;

70 
HTChûdAnch‹
 * 
	m™ch‹
;

71 } 
	tTextAnch‹
;

79 
	s_HText
 {

80 
HTP¨ítAnch‹
 * 
	mnode_™ch‹
;

81 * 
	mtôÀ
;

82 
HTLöe
 * 
	mœ°_löe
;

83 
	mlöes
;

84 
	mch¨s
;

85 
TextAnch‹
 * 
	mfú°_™ch‹
;

86 
TextAnch‹
 * 
	mœ°_™ch‹
;

87 
	mœ°_™ch‹_numbî
;

88 
TextAnch‹
 * 
	mcuºít_™ch‹
;

90 
HTStyÀ
 * 
	m°yÀ
;

91 
	mdi•œy_⁄_the_Êy
;

92 
BOOL
 
	mÆl_∑ges
;

93 
	mt›_of_s¸ìn
;

94 
HTLöe
 * 
	mt›_of_s¸ìn_löe
;

95 
HTLöe
 * 
	m√xt_löe
;

96 
	m≥rmissibÀ_•lô
;

97 
BOOL
 
	mö_löe_1
;

98 
BOOL
 
	m°Æe
;

100 
HTSåóm
* 
	mèrgë
;

101 
HTSåómCœss
 
	mèrgëCœss
;

102 
LöeMode
 * 
	mpLm
;

105 
PRIVATE
 
HTTabSt›
 
	gèbs_8
[] = {

114 
	#PUTC
(
c
Ë(*
ãxt
->
èrgëCœss
.
put_ch¨a˘î
)—ext->
èrgë
, c)

	)

115 
	#PUTS
(
s
Ë(*
ãxt
->
èrgëCœss
.
put_°rög
)—ext->
èrgë
, s)

	)

120 
	#SPACES
(
n
Ë(&
•a˚_°rög
[
HTS¸ìnWidth
 - (n)])

	)

122 
PRIVATE
 * 
	g•a˚_°rög
;

124 
PRIVATE
 
HTStyÀ
 
	gdeÁu…_°yÀ
 =

126 (
HTF⁄t
)0, 1.0, 
HT_BLACK
, 0, 0,

127 0, 0, 0, 
HT_LEFT
, 1, 0, 
èbs_8
,

128 
NO
, NO, 0, 0, 0 };

131 
PUBLIC
 
˛ór_s¸ìn
 ();

133 
PRIVATE
 
HTLi°
 * 
	glﬂded_ãxts
;

141 
LöeMode
 * 
C⁄ãxt_gëLöeMode
(
HTReque°
 * 
ªque°
);

142 
PUBLIC
 
HText
 * 
	$LMHText_√w
 (

143 
HTReque°
 * 
ªque°
,

144 
HTP¨ítAnch‹
 * 
™ch‹
,

145 
HTSåóm
 *
out°rm
)

147 
HTLöe
 * 
löe
;

148 
HText
 * 
£lf
;

149 i‡((
£lf
 = (
HText
 *Ë
	`HT_CALLOC
(1, (*£lf))Ë=
NULL
)

151  
£lf
;

153 
£lf
->
pLm
 = 
	`C⁄ãxt_gëLöeMode
(
ªque°
);

154 i‡(!
lﬂded_ãxts
Ëlﬂded_ãxt†
	`HTLi°_√w
();

155 
	`HTLi°_addObje˘
(
lﬂded_ãxts
, 
£lf
);

156 i‡(
	`HTLi°_cou¡
(
lﬂded_ãxts
Ë>
LOADED_LIMIT
) {

157 
	`HTTRACE
(
CACHE_TRACE
, "MemoryCache. Freeing off cached doc.\n");

158 
	`HText_‰ì
((
HText
 *)
	`HTLi°_ªmoveFú°Obje˘
(
lﬂded_ãxts
));

161 i‡((
löe
 = 
£lf
->
œ°_löe
 = (
HTLöe
 *Ë
	`HT_MALLOC
(
	`LINE_SIZE
(
MAX_LINE
))Ë=
NULL
)

162 
	`HT_OUTOFMEM
("HText_New");

163 
löe
->
√xt
 =Üöe->
¥ev
 =Üine;

164 
löe
->
off£t
 =Üöe->
size
 = 0;

165 
£lf
->
löes
 = sñf->
ch¨s
 = 0;

166 
£lf
->
tôÀ
 = 0;

167 
£lf
->
fú°_™ch‹
 = sñf->
œ°_™ch‹
 = sñf->
cuºít_™ch‹
 = 0;

168 
£lf
->
°yÀ
 = &
deÁu…_°yÀ
;

169 
£lf
->
t›_of_s¸ìn
 = 0;

170 
£lf
->
node_™ch‹
 = 
™ch‹
;

171 
£lf
->
œ°_™ch‹_numbî
 = 0;

172 
£lf
->
°Æe
 = 
YES
;

174 
£lf
->
èrgë
 = 
NULL
;

176 
	`HTAnch‹_£tDocumít
(
™ch‹
, (*Ë
£lf
);

178 
	`˛ór_s¸ìn
();

179 
HTMaöText
 = 
£lf
;

180 
HTMaöAnch‹
 = 
™ch‹
;

181 
£lf
->
di•œy_⁄_the_Êy
 = 
DISPLAY_LINES
;

182 
£lf
->
Æl_∑ges
 = 
NO
;

184 i‡(!
•a˚_°rög
) {

185 *
p
;

186 i‡((
•a˚_°rög
 = (*Ë
	`HT_MALLOC
(
HTS¸ìnWidth
+1)Ë=
NULL
)

187 
	`HT_OUTOFMEM
("HText_New");

188 
p
=
•a˚_°rög
;Ö<•a˚_°rög+
HTS¸ìnWidth
;Ö++)

189 *
p
 = ' ';

190 
•a˚_°rög
[
HTS¸ìnWidth
] = '\0';

193  
£lf
;

194 
	}
}

203 
PUBLIC
 
HText
 * 
	$LMHText_√w2
 (
HTReque°
 * 
ªque°
,

204 
HTP¨ítAnch‹
 * 
™ch‹
,

205 
HTSåóm
 * 
°ªam
)

207 
HText
 * 
me
 = 
	`LMHText_√w
(
ªque°
, 
™ch‹
, 
°ªam
);

209 i‡(
°ªam
) {

210 
me
->
èrgë
 = 
°ªam
;

211 
me
->
èrgëCœss
 = *
°ªam
->
iß
;

212 
me
->
Æl_∑ges
 = 
YES
;

214  
me
;

215 
	}
}

221 
PUBLIC
 
	$hy≥r_‰ì
 (
HText
 * 
£lf
)

223 i‡(
£lf
) {

225 
HTLöe
 * 
œ°
 = 
£lf
->
œ°_löe
;

226 i‡(
œ°
) {

227 
œ°
->
√xt
->
¥ev
 =Üast->prev;

228 
œ°
->
¥ev
->
√xt
 =Üast->next;

229 
£lf
->
œ°_löe
 = 
œ°
->
¥ev
;

230 i‡(
œ°
 =
£lf
->
œ°_löe
) ;

231 
	`HT_FREE
(
œ°
);

235 
£lf
->
fú°_™ch‹
) {

236 
TextAnch‹
 * 
œ°
 = 
£lf
->
fú°_™ch‹
;

237 
£lf
->
fú°_™ch‹
 = 
œ°
->
√xt
;

238 
	`HT_FREE
(
œ°
);

240 i‡(
£lf
 =
HTMaöText
ËHTMaöTexà
NULL
;

241 
	`HT_FREE
(
£lf
->
œ°_löe
);

242 
	`HT_FREE
(
£lf
);

244 
	}
}

250 
PUBLIC
 
	$HText_‰ì
 (
HText
 * 
£lf
)

252 i‡(
£lf
) {

253 
	`HTAnch‹_£tDocumít
(
£lf
->
node_™ch‹
, 
NULL
);

254 
	`hy≥r_‰ì
(
£lf
);

256 
	}
}

258 
PUBLIC
 
BOOL
 
	$LMHText_dñëe
 (
HText
 * 
£lf
)

260 i‡(
£lf
) {

261 
	`HTAnch‹_£tDocumít
(
£lf
->
node_™ch‹
, 
NULL
);

262 
	`hy≥r_‰ì
(
£lf
);

263  
YES
;

265  
NO
;

266 
	}
}

271 
PUBLIC
 
BOOL
 
	$HText_‰ìAŒ
 ()

273 i‡(
lﬂded_ãxts
) {

274 
HTLi°
 * 
cur
 = 
lﬂded_ãxts
;

275 
HText
 * 
¥es
;

276 (
¥es
 = (
HText
 *Ë
	`HTLi°_√xtObje˘
(
cur
)))

277 
	`HText_‰ì
(
¥es
);

278 
	`HTLi°_dñëe
(
lﬂded_ãxts
);

279  
YES
;

281  
NO
;

282 
	}
}

292 
PUBLIC
 
	$˛ór_s¸ìn
 ()

294 i‡(
WWWTRACE
)

296 #ifde‡
CURSES


297 i‡(
w_ãxt
 !
NULL
) {

298 
	`wmove
(
w_ãxt
,0,0);

299 
	`w˛ór
(
w_ãxt
);

302 i‡(
HTMaöText
ËHTMaöText->
°Æe
 = 
YES
;

303 
	}
}

309 
PRIVATE
 
	$di•œy_löe
 (
HText
 * 
ãxt
, 
HTLöe
 * 
löe
)

311 #ifde‡
CURSES


312 
y
, 
x
;

314 
	`wadd°r
(
w_ãxt
, 
	`SPACES
(
löe
->
off£t
));

315 
	`wadd°r
(
w_ãxt
, 
löe
->
d©a
);

316 
	`gëyx
(
w_ãxt
, 
y
, 
x
);

317 i‡(
y
 < 
DISPLAY_LINES
-1) {

318 
	`wmove
(
w_ãxt
, ++
y
, 0);

321 i‡(!
ãxt
->
èrgë
)

323 #ifde‡
CYRILLIC


325 
	`a_¥öt
(
	`SPACES
(
löe
->
off£t
),
H
,
°dout
);

326 
	`a_¥öt
(
löe
->
d©a
,
H
,
°dout
);

327 
	`Âutc
('\n',
°dout
);

329 
	`OuçutD©a
(
	`LöeMode_gëVõw
(
ãxt
->
pLm
), "%s%s\n", 
	`SPACES
(
löe
->
off£t
),Üöe->
d©a
);

333 
	`PUTS
(
	`SPACES
(
löe
->
off£t
));

334 
	`PUTS
(
löe
->
d©a
);

335 
	`PUTC
('\n');

339 
	}
}

344 
PRIVATE
 
	$di•œy_tôÀ
 (
HText
 * 
ãxt
)

346 c⁄° * 
tôÀ
 = 
	`HTAnch‹_tôÀ
(
ãxt
->
node_™ch‹
);

347 
≥r˚¡
[20], 
f‹m©
[20];

348 i‡(
ãxt
->
löes
 > (
DISPLAY_LINES
-1)) {

349 #ifde‡
NOPE


350 
	`•rötf
(
≥r˚¡
, " (p%d of %d)",

351 (
ãxt
->
t›_of_s¸ìn
/(
DISPLAY_LINES
-1)) + 1,

352 (
ãxt
->
löes
-1)/(
DISPLAY_LINES
-1) + 1);

353 
	`•rötf
(
≥r˚¡
, " (%d%%)",

354 100*(
ãxt
->
t›_of_s¸ìn
+
DISPLAY_LINES
-1)/

355 (
ãxt
->
löes
));

357 
	`•rötf
(
≥r˚¡
, " (%d/%d)",

358 
ãxt
->
t›_of_s¸ìn
+
DISPLAY_LINES
-1,

359 
ãxt
->
löes
);

362 
≥r˚¡
[0] = 0;

365 
	`•rötf
(
f‹m©
, "%%%d.%ds%%s\n",

366 ()(
HTS¸ìnWidth
-
	`°æí
(
≥r˚¡
)),

367 ()(
HTS¸ìnWidth
-
	`°æí
(
≥r˚¡
)) );

368 #ifde‡
CURSES


369 
	`mvw¥ötw
(
w_t›
, 0, 0, 
f‹m©
, 
tôÀ
, 
≥r˚¡
);

370 
	`wª‰esh
(
w_t›
);

372 i‡(!
ãxt
->
èrgë
Ë
	`OuçutD©a
(
	`LöeMode_gëVõw
—ext->
pLm
), 
f‹m©
, 
tôÀ
, 
≥r˚¡
);

374 * 
löe
;

375 i‡((
löe
 = (*Ë
	`HT_MALLOC
(
HTS¸ìnWidth
+10)Ë=
NULL
)

376 
	`HT_OUTOFMEM
("display_titile");

377 
	`•rötf
(
löe
, 
f‹m©
, 
tôÀ
, 
≥r˚¡
);

378 
	`PUTS
(
löe
);

379 
	`HT_FREE
(
löe
);

382 
	}
}

388 
PRIVATE
 
	$fûl_s¸ìn
 (
HText
 * 
ãxt
, 
n
)

390 i‡(
n
<=0 ||Ç>1000) ;

391 i‡(
ãxt
->
èrgë
) ;

392 #ifde‡
CURSES


393 
	`wadd°r
(
w_ãxt
, 
íd_m¨k
);

394 
	`w˛πobŸ
(
w_ãxt
);

395 
	`wª‰esh
(
w_ãxt
);

397 #i‚de‡
VIOLA


398 i‡(!
ãxt
->
èrgë
Ë
	`OuçutD©a
(
	`LöeMode_gëVõw
—ext->
pLm
), "%s\n", 
íd_m¨k
);

399 { 
	`PUTS
(
íd_m¨k
); 
	`PUTC
('\n'); }

400 
n
--;

402 ; 
n
;Ç--) {

403 i‡(!
ãxt
->
èrgë
Ë
	`OuçutD©a
(
	`LöeMode_gëVõw
—ext->
pLm
), "\n");

404 
	`PUTC
('\n');

408 
	}
}

414 
PRIVATE
 
	$di•œy_∑ge
 (
HText
 * 
ãxt
, 
löe_numbî
)

416 
HTLöe
 * 
löe
 = 
ãxt
->
œ°_löe
->
¥ev
;

417 
i
;

418 c⁄° * 
tôÀ
 = 
	`HTAnch‹_tôÀ
(
ãxt
->
node_™ch‹
);

419 
löes_of_ãxt
 = 
tôÀ
 ? (
DISPLAY_LINES
-
TITLE_LINES
) : DISPLAY_LINES;

420 
œ°_s¸ìn
 = 
ãxt
->
löes
 - 
löes_of_ãxt
;

424 i‡(
ãxt
->
löes
 <
löes_of_ãxt
Ë
löe_numbî
 = 0;

425 i‡(
löe_numbî
>
œ°_s¸ìn
)Üine_number =Üast_screen;

426 i‡(
löe_numbî
 < 0)Üine_number = 0;

428 
i
=0, 
löe
 = 
ãxt
->
œ°_löe
->
√xt
;

429 
i
<
löe_numbî
 && (
löe
!=
ãxt
->
œ°_löe
);

430 
i
++, 
löe
ˆöe->
√xt
Ë 
	`as£π
÷öe->√xà!
NULL
);

432 (
löe
!=
ãxt
->
œ°_löe
Ë&& (löe->
size
==0)) {

433 
	`as£π
(
löe
->
√xt
 !
NULL
);

434 
löe
 =Üöe->
√xt
;

435 
löe_numbî
 ++;

440 #i‚de‡
VM


441 i‡(!
ãxt
->
°Æe
 && (
löe_numbî
>Òext->
t›_of_s¸ìn
) &&

442 (
löe_numbî
 < 
ãxt
->
t›_of_s¸ìn
 + 
DISPLAY_LINES
)) {

443 
löes_of_ãxt
 = 
löe_numbî
 - 
ãxt
->
t›_of_s¸ìn
;

444 
löe
 = 
ãxt
->
√xt_löe
;

445 
ãxt
->
t›_of_s¸ìn
 = 
löe_numbî
;

446 #ifde‡
CURSES


447 
	`s¸ﬁlok
(
w_ãxt
, 
TRUE
);

448 
i
 = 0; i < 
löes_of_ãxt
; i++) {

449 
	`s¸ﬁl
(
w_ãxt
);

455 
	`˛ór_s¸ìn
();

456 
ãxt
->
t›_of_s¸ìn
 = 
löe_numbî
;

457 i‡(
tôÀ
Ë
	`di•œy_tôÀ
(
ãxt
);

467 i‡(
löe
) {

468 
i
=0;

469 (
i
< 
löes_of_ãxt
Ë&& (
löe
 !
ãxt
->
œ°_löe
); i++) {

470 
	`as£π
(
löe
 !
NULL
);

471 
	`di•œy_löe
(
ãxt
, 
löe
);

472 
löe
 =Üöe->
√xt
;

474 
	`fûl_s¸ìn
(
ãxt
, 
löes_of_ãxt
 - 
i
);

477 
ãxt
->
√xt_löe
 = 
löe
;

478 
ãxt
->
°Æe
 = 
NO
;

479 
	}
}

487 
PUBLIC
 
	$HText_begöAµíd
 (
HText
 * 
ãxt
)

489 
ãxt
->
≥rmissibÀ_•lô
 = 0;

490 
ãxt
->
ö_löe_1
 = 
YES
;

491 
	}
}

513 
	#√w_löe
(
ãxt
Ë
	`•lô_löe
—ext, 0)

	)

515 
PRIVATE
 
	$•lô_löe
 (
HText
 * 
ãxt
, 
•lô
)

517 
HTStyÀ
 * 
°yÀ
 = 
ãxt
->style;

518 
•¨e
;

519 
ödít
 = (Ë(
ãxt
->
ö_löe_1
 ?Åext->
°yÀ
->
ödít1°


520 : 
ãxt
->
°yÀ
->
À·Indít
);

524 
HTLöe
 * 
¥evious
 = 
ãxt
->
œ°_löe
;

525 
HTLöe
 * 
löe
;

526 i‡((
löe
 = (
HTLöe
 *Ë
	`HT_MALLOC
(
	`LINE_SIZE
(
MAX_LINE
))Ë=
NULL
)

527 
	`HT_OUTOFMEM
("split_line");

529 
ãxt
->
löes
++;

531 
¥evious
->
√xt
->
¥ev
 = 
löe
;

532 
löe
->
¥ev
 = 
¥evious
;

533 
löe
->
√xt
 = 
¥evious
->next;

534 
¥evious
->
√xt
 = 
löe
;

535 
ãxt
->
œ°_löe
 = 
löe
;

536 
löe
->
size
 = 0;

537 
löe
->
off£t
 = 0;

541 i‡(
•lô
) {

542 * 
p
;

543 
¥evious
->
d©a
[¥evious->
size
] = 0;

544 
p
 = &
¥evious
->
d©a
[
•lô
]; *p;Ö++)

545 i‡(*
p
 != ' ') ;

546 
	`°r˝y
(
löe
->
d©a
, 
p
);

547 
löe
->
size
 = 
	`°æí
÷öe->
d©a
);

548 
¥evious
->
size
 = 
•lô
;

551 (
¥evious
->
size
 > 0) &&

552 (
¥evious
->
d©a
[¥evious->
size
-1] == ' '))

553 
¥evious
->
size
--;

555 i‡((
¥evious
 = (
HTLöe
 *)

556 
	`HT_REALLOC
(
¥evious
, 
	`LINE_SIZE
’ªvious->
size
)))==
NULL
)

557 
	`HT_OUTOFMEM
("split_line");

558 
¥evious
->
¥ev
->
√xt
 =Örevious;

559 
¥evious
->
√xt
->
¥ev
 =Örevious;

563 
¥evious
->
d©a
[¥evious->
size
] = 0;

568 
•¨e
 = (Ë(
HTS¸ìnWidth
 - 
°yÀ
->
rightIndít
 + styÀ->
À·Indít
 -

569 
¥evious
->
size
);

571 
°yÀ
->
Æignmít
) {

572 
HT_CENTER
 :

573 
¥evious
->
off£t
 =Öªvious->off£à+ 
ödít
 + 
•¨e
/2;

575 
HT_RIGHT
 :

576 
¥evious
->
off£t
 =Öªvious->off£à+ 
ödít
 + 
•¨e
;

578 
HT_LEFT
 :

579 
HT_JUSTIFY
 :

581 
¥evious
->
off£t
 =Öªvious->off£à+ 
ödít
;

585 
ãxt
->
ch¨s
 =Åext->ch¨†+ 
¥evious
->
size
 + 1;

586 
ãxt
->
ö_löe_1
 = 
NO
;

590 i‡(
ãxt
->
di•œy_⁄_the_Êy
) {

591 i‡(
ãxt
->
di•œy_⁄_the_Êy
 =
DISPLAY_LINES
) {

592 i‡(
¥evious
->
size
 == 0) {

593 
ãxt
->
t›_of_s¸ìn
++;

596 i‡(
	`HTAnch‹_tôÀ
(
ãxt
->
node_™ch‹
)) {

597 
	`di•œy_tôÀ
(
ãxt
);

598 
ãxt
->
di•œy_⁄_the_Êy
--;

601 
	`di•œy_löe
(
ãxt
, 
¥evious
);

602 
ãxt
->
di•œy_⁄_the_Êy
--;

605 i‡(!
ãxt
->
di•œy_⁄_the_Êy
 &&Åext->
Æl_∑ges
) {

606 
	`PUTS
("\f\n");

607 
ãxt
->
di•œy_⁄_the_Êy
 = 
DISPLAY_LINES
;

610 
	}
}

616 
PRIVATE
 
	$bœnk_löes
 (
HText
 * 
ãxt
, 
√wlöes
)

618 i‡(
ãxt
->
œ°_löe
->
size
 == 0) {

619 
HTLöe
 * 
löe
 = 
ãxt
->
œ°_löe
->
¥ev
;

620 (
löe
!=
ãxt
->
œ°_löe
Ë&& (löe->
size
 == 0)) {

621 i‡(
√wlöes
==0) ;

622 
√wlöes
--;

623 
löe
 =Üöe->
¥ev
;

626 
√wlöes
++;

629 ;
√wlöes
;newlines--) {

630 
	`√w_löe
(
ãxt
);

632 
ãxt
->
ö_löe_1
 = 
YES
;

633 
	}
}

641 
PUBLIC
 
	$HText_≠≥ndP¨agøph
 (
HText
 * 
ãxt
)

643 
a·î
 = (Ë
ãxt
->
°yÀ
->
•a˚A·î
;

644 
bef‹e
 = (Ë
ãxt
->
°yÀ
->
•a˚Bef‹e
;

645 
	`bœnk_löes
(
ãxt
, 
a·î
>
bef‹e
 ?áfter : before);

646 
	}
}

654 
PUBLIC
 
	$HText_£tStyÀ
 (
HText
 * 
ãxt
, 
HTStyÀ
 * 
°yÀ
)

656 
a·î
, 
bef‹e
;

658 i‡(!
°yÀ
) ;

659 
a·î
 = (Ë
ãxt
->
°yÀ
->
•a˚A·î
;

660 
bef‹e
 = (Ë
°yÀ
->
•a˚Bef‹e
;

661 
	`HTTRACE
(
SGML_TRACE
, "Rídîög... Ch™gêtÿ°yÀ %s\n" 
_
 
°yÀ
->
«me
);

662 
	`bœnk_löes
 (
ãxt
, 
a·î
>
bef‹e
 ?áfter : before);

663 
ãxt
->
°yÀ
 = style;

664 
	}
}

670 
PUBLIC
 
	$HText_≠≥ndCh¨a˘î
 (
HText
 * 
ãxt
, 
ch
)

672 
HTLöe
 * 
löe
 = 
ãxt
->
œ°_löe
;

673 
HTStyÀ
 * 
°yÀ
 = 
ãxt
->style;

674 
ödít
 = ()(
ãxt
->
ö_löe_1
 ? 
°yÀ
->
ödít1°
 : styÀ->
À·Indít
);

678 i‡(
ch
 == '\n') {

679 
	`√w_löe
(
ãxt
);

680 
ãxt
->
ö_löe_1
 = 
YES
;

687 i‡(
ch
 == '\t') {

688 
HTTabSt›
 * 
èb
;

689 
èrgë
;

690 
hîe
 = 
löe
->
size
 +Üöe->
off£t
 +
ödít
;

691 i‡(
°yÀ
->
èbs
) {

692 
èb
 = 
°yÀ
->
èbs
;

693 
èb
->
posôi⁄
 <
hîe
;

694 
èb
++)

695 i‡(!
èb
->
posôi⁄
) {

696 
	`√w_löe
(
ãxt
);

699 
èrgë
 = (Ë
èb
->
posôi⁄
;

700 } i‡(
ãxt
->
ö_löe_1
) {

701 i‡(
hîe
 >
°yÀ
->
À·Indít
) {

702 
	`√w_löe
(
ãxt
);

705 
èrgë
 = (Ë
°yÀ
->
À·Indít
;

708 #ifde‡
DEFAULT_TABS_8


709 
èrgë
 = ((
löe
->
off£t
 +Üöe->
size
 + 8) & (-8))

710 + 
°yÀ
->
À·Indít
;

712 
	`√w_löe
(
ãxt
);

716 i‡(
èrgë
 > 
HTS¸ìnWidth
 - 
°yÀ
->
rightIndít
) {

717 
	`√w_löe
(
ãxt
);

720 
ãxt
->
≥rmissibÀ_•lô
 = 
löe
->
size
;

721 i‡(
löe
->
size
 =0Ëlöe->
off£t
 =Üöe->off£à+ 
èrgë
 - 
hîe
;

722 ; 
hîe
<
èrgë
; here++) {

723 
löe
->
d©a
[löe->
size
++] = ' ';

731 i‡(
ch
==' ') {

732 
ãxt
->
≥rmissibÀ_•lô
 = 
löe
->
size
;

737 i‡(
ödít
 + 
löe
->
off£t
 +Üöe->
size
 + 
°yÀ
->
rightIndít


738 >
HTS¸ìnWidth
) {

739 i‡(
°yÀ
->
w‹dWøp
) {

740 if(
ãxt
->
≥rmissibÀ_•lô
 > 
löe
->
size
)

741 
ãxt
->
≥rmissibÀ_•lô
 = 
löe
->
size
;

742 
	`•lô_löe
(
ãxt
,Åext->
≥rmissibÀ_•lô
);

743 i‡(
ch
==' ') ;

744 } 
	`√w_löe
(
ãxt
);

749 i‡(
ch
 =
HT_NON_BREAK_SPACE
) {

750 
ch
 = ' ';

753 
HTLöe
 * 
löe
 = 
ãxt
->
œ°_löe
;

754 
HTF⁄t
 
f⁄t
 = 
°yÀ
->font;

755 
löe
->
d©a
[löe->
size
++] =

756 
f⁄t
 & 
HT_CAPITALS
 ? 
	`TOUPPER
(
ch
) : ch;

757 i‡(
f⁄t
 & 
HT_DOUBLE
)

758 
	`HText_≠≥ndCh¨a˘î
(
ãxt
, 
HT_NON_BREAK_SPACE
);

761 
	}
}

763 
PUBLIC
 
	$HText_≠≥ndText
 (
HText
 * 
ãxt
, c⁄° * 
°r
)

765 c⁄° * 
p
;

766 
p
=
°r
; *p;Ö++) {

767 
	`HText_≠≥ndCh¨a˘î
(
ãxt
, *
p
);

769 
	}
}

772 
PUBLIC
 
	$HText_ídAµíd
 (
HText
 * 
ãxt
)

774 
	`√w_löe
(
ãxt
);

776 i‡(
ãxt
->
di•œy_⁄_the_Êy
) {

777 
	`fûl_s¸ìn
(
ãxt
,Åext->
di•œy_⁄_the_Êy
);

778 
ãxt
->
di•œy_⁄_the_Êy
 = 0;

779 
ãxt
->
√xt_löe
 =Åext->
œ°_löe
;

780 
ãxt
->
°Æe
 = 
NO
;

782 
	}
}

789 
PUBLIC
 
	$LMHText_begöAnch‹
 (
HText
 * 
ãxt
,

790 
ñem_num
, 
©å_num
, 
HTChûdAnch‹
 * 
™c
,

791 c⁄° 
BOOL
 *
¥e£¡
, c⁄° **
vÆue
)

793 
TextAnch‹
 * 
a
;

796 i‡(
ñem_num
 !
HTML_A
)

799 i‡((
a
 = (
TextAnch‹
 *Ë
	`HT_MALLOC
((*a))Ë=
NULL
)

800 
	`HT_OUTOFMEM
("HText_beginAnchor");

801 
a
->
°¨t
 = 
ãxt
->
ch¨s
 +Åext->
œ°_löe
->
size
;

802 
a
->
exã¡
 = 0;

803 i‡(
ãxt
->
œ°_™ch‹
) {

804 
ãxt
->
œ°_™ch‹
->
√xt
 = 
a
;

806 
ãxt
->
fú°_™ch‹
 = 
a
;

808 
a
->
√xt
 = 0;

809 
a
->
™ch‹
 = 
™c
;

810 
ãxt
->
œ°_™ch‹
 = 
a
;

811 
ãxt
->
cuºít_™ch‹
 = 
a
;

813 i‡(
	`HTAnch‹_fﬁlowMaöLök
((
HTAnch‹
*)
™c
)) {

814 
a
->
numbî
 = ++(
ãxt
->
œ°_™ch‹_numbî
);

816 
a
->
numbî
 = 0;

818 
	}
}

821 
PUBLIC
 
	$LMHText_ídAnch‹
 (
HText
 * 
ãxt
)

823 
TextAnch‹
 * 
a
 = 
ãxt
->
cuºít_™ch‹
;

824 
m¨kî
[100];

826 i‡(!
a
)

829 i‡(
a
->
numbî
 && 
di•œy_™ch‹s
) {

830 
	`•rötf
(
m¨kî
, 
íd_ª„ªn˚
, 
a
->
numbî
);

831 
	`HText_≠≥ndText
(
ãxt
, 
m¨kî
);

833 
a
->
exã¡
 = 
ãxt
->
ch¨s
 +Åext->
œ°_löe
->
size
 -á->
°¨t
;

834 
ãxt
->
cuºít_™ch‹
 = 0;

835 
	}
}

839 
PUBLIC
 
	$LMHText_addText
 (
HText
 * 
ãxt
, c⁄° * 
°r
, 
Àngth
)

841 c⁄° * 
p
;

842 
i
;

843 
i
=0,
p
=
°r
; i<
Àngth
; ++i,++p) {

844 
	`HText_≠≥ndCh¨a˘î
(
ãxt
, *
p
);

846 
	}
}

850 
PUBLIC
 
	$HText_≠≥ndImage
 (

851 
HText
 * 
ãxt
,

852 
HTChûdAnch‹
 * 
™c
,

853 c⁄° * 
Æt
,

854 c⁄° * 
Æignmít
,

855 
BOOL
 
isM≠
)

857 
	`HText_≠≥ndText
(
ãxt
, 
Æt
?ált : "[IMAGE]");

858 
	}
}

860 
PUBLIC
 
	$HText_≠≥ndObje˘
 (
HText
 * 
ãxt
, 
ñemít_numbî
,

861 c⁄° 
BOOL
 * 
¥e£¡
, c⁄° ** 
vÆue
)

863 
	}
}

865 
PUBLIC
 
	$HText_≠≥ndLök
 (
HText
 * 
ãxt
, 
HTChûdAnch‹
 * 
™ch‹
,

866 c⁄° 
BOOL
 * 
¥e£¡
, c⁄° ** 
vÆue
)

868 
	}
}

872 
PUBLIC
 
HTP¨ítAnch‹
 * 
	$HText_nodeAnch‹
 (
HText
 * 
ãxt
)

874  
ãxt
->
node_™ch‹
;

875 
	}
}

884 
PUBLIC
 
HTChûdAnch‹
 * 
	$HText_chûdNumbî
 (
HText
 * 
ãxt
, 
numbî
)

886 
TextAnch‹
 * 
a
;

887 
a
 = 
ãxt
->
fú°_™ch‹
;á;á =á->
√xt
) {

888 i‡(
a
->
numbî
 =numbîËá->
™ch‹
;

890  (
HTChûdAnch‹
 *)0;

891 
	}
}

893 
PUBLIC
 
	$HText_£tSèÀ
 (
HText
 * 
ãxt
)

895 i‡(
ãxt
)

896 
ãxt
->
°Æe
 = 
YES
;

897 
	}
}

899 
PUBLIC
 
	$HText_ª‰esh
 (
HText
 * 
ãxt
)

901 i‡(
ãxt
 &&Åext->
°Æe
)

902 
	`di•œy_∑ge
(
ãxt
,Åext->
t›_of_s¸ìn
);

903 
	}
}

905 
PUBLIC
 
	$HText_sour˚Anch‹s
 (
HText
 * 
ãxt
)

907  (
ãxt
 ?Åext->
œ°_™ch‹_numbî
 : -1);

908 
	}
}

910 
PUBLIC
 
BOOL
 
	$HText_ˇnS¸ﬁlUp
 (
HText
 * 
ãxt
)

912  (
ãxt
 &&Åext->
t›_of_s¸ìn
 != 0);

913 
	}
}

915 
PUBLIC
 
BOOL
 
	$HText_ˇnS¸ﬁlDown
 (
HText
 * 
ãxt
)

917  (
ãxt
 && (ãxt->
t›_of_s¸ìn
 + 
DISPLAY_LINES
 -

918 (
ãxt
->
tôÀ
 ? 
TITLE_LINES
 : 0)Ë<Åext->
löes
);

919 
	}
}

923 
PUBLIC
 
	$HText_s¸ﬁlT›
 (
HText
 * 
ãxt
)

925 
	`di•œy_∑ge
(
ãxt
, 0);

926 
	}
}

928 
PUBLIC
 
	$HText_s¸ﬁlDown
 (
HText
 * 
ãxt
)

930 
	`di•œy_∑ge
(
ãxt
,Åext->
t›_of_s¸ìn
 + 
DISPLAY_LINES
 -1);

931 
	}
}

933 
PUBLIC
 
	$HText_s¸ﬁlUp
 (
HText
 * 
ãxt
)

935 
	`di•œy_∑ge
(
ãxt
,Åext->
t›_of_s¸ìn
 - 
DISPLAY_LINES
 +1);

936 
	}
}

938 
PUBLIC
 
	$HText_s¸ﬁlBŸtom
 (
HText
 * 
ãxt
)

940 
	`di•œy_∑ge
(
ãxt
,Åext->
löes
 - 
DISPLAY_LINES
 +1);

941 
	}
}

951 
PRIVATE
 
	$löe_f‹_ch¨
 (
HText
 * 
ãxt
, 
ch¨_num
)

953 
löe_numbî
 =0;

954 
ch¨a˘îs
 = 0;

955 
HTLöe
 * 
löe
 = 
ãxt
->
œ°_löe
->
√xt
;

957 i‡(
löe
 =
ãxt
->
œ°_löe
)  0;

958 
ch¨a˘îs
 = ch¨a˘î†+ 
löe
->
size
 + 1;

959 i‡(
ch¨a˘îs
 > 
ch¨_num
Ë 
löe_numbî
;

960 
löe_numbî
 ++;

961 
löe
 =Üöe->
√xt
;

963 
	}
}

965 
PUBLIC
 
BOOL
 
	$HText_£À˘
 (
HText
 * 
ãxt
)

967 i‡(
ãxt
) {

968 
HTMaöText
 = 
ãxt
;

969 
HTMaöAnch‹
 = 
ãxt
->
node_™ch‹
;

970 
	`di•œy_∑ge
(
ãxt
,Åext->
t›_of_s¸ìn
);

971  
YES
;

973 
	`HTTRACE
(
SGML_TRACE
, "Rendering... NothingÅo select!\n");

974  
NO
;

975 
	}
}

977 
PUBLIC
 
BOOL
 
	$HText_£À˘Anch‹
 (
HText
 * 
ãxt
, 
HTChûdAnch‹
 * 
™ch‹
)

979 
TextAnch‹
 * 
a
;

981 
a
=
ãxt
->
fú°_™ch‹
;á;á˜->
√xt
) {

982 i‡(
a
->
™ch‹
 ==ánchor) ;

984 i‡(!
a
) {

985 
	`HTTRACE
(
SGML_TRACE
, "Rendering... No suchánchor inÅhisÅext!\n");

986  
NO
;

989 i‡(
ãxt
 !
HTMaöText
) {

990 
HTMaöText
 = 
ãxt
;

991 
HTMaöAnch‹
 = 
ãxt
->
node_™ch‹
;

995 
l
 = 
	`löe_f‹_ch¨
(
ãxt
, 
a
->
°¨t
);

996 
	`HTTRACE
(
SGML_TRACE
, "Rídîög... Sñe˘ögánch‹ [%d]áàch¨ %d,Üöê%d\n" 
_


997 
a
->
numbî
 
_
á->
°¨t
 _ 
l
);

999 i‡–!
ãxt
->
°Æe
 &&

1000 (
l
 >
ãxt
->
t›_of_s¸ìn
) &&

1001 –
l
 < 
ãxt
->
t›_of_s¸ìn
 + 
DISPLAY_LINES
-1))

1002  
YES
;

1003 
	`di•œy_∑ge
(
ãxt
, 
l
 - (
DISPLAY_LINES
/3));

1005  
YES
;

1006 
	}
}

1020 
PUBLIC
 
	$HText_≠∂yStyÀ
 (
HText
 * 
me
, 
HTStyÀ
 * 
°yÀ
)

1023 
	}
}

1028 
PUBLIC
 
	$HText_upd©eStyÀ
 (
HText
 * 
me
, 
HTStyÀ
 * 
°yÀ
)

1031 
	}
}

1036 
PUBLIC
 
HTStyÀ
 * 
	$HText_£À˘i⁄StyÀ
 (

1037 
HText
 * 
me
,

1038 
HTStyÀShìt
 * 
shìt
)

1041 
	}
}

1046 
PUBLIC
 
	$HText_ª∂a˚Sñ
 (

1047 
HText
 * 
me
,

1048 c⁄° * 
aSåög
,

1049 
HTStyÀ
 * 
aStyÀ
)

1051 
	}
}

1057 
PUBLIC
 
	$HTextAµlyToSimû¨
 (
HText
 * 
me
, 
HTStyÀ
 * 
°yÀ
)

1060 
	}
}

1066 
PUBLIC
 
	$HTextSñe˘Un°yÀd
 (
HText
 * 
me
, 
HTStyÀShìt
 * 
shìt
)

1069 
	}
}

1074 
PUBLIC
 
	$HText_u∆ökSñe˘i⁄
 (
HText
 * 
me
)

1077 
	}
}

1079 
PUBLIC
 
HTAnch‹
 * 
	$HText_ª„ªn˚Sñe˘ed
 (
HText
 * 
me
)

1082 
	}
}

1085 #ifde‡
CURSES


1086 
PUBLIC
 
	$HText_gëT›OfS¸ìn
 (
HText
 * 
ãxt
)

1088  
ãxt
->
t›_of_s¸ìn
;

1089 
	}
}

1091 
PUBLIC
 
	$HText_gëLöes
 (
HText
 * 
ãxt
)

1093  
ãxt
->
löes
;

1094 
	}
}

1096 
PUBLIC
 
HTAnch‹
 * 
	$HText_lökSñTo
 (
HText
 * 
me
, 
HTAnch‹
 * 
™ch‹
)

1099 
	}
}

1103 
PUBLIC
 
	$LMHText_begöEÀmít
 (
HText
 * 
ãxt
,

1104 
ñem_num
, c⁄° 
BOOL
 * 
¥e£¡
, c⁄° ** 
vÆue
)

1107 
	}
}

1109 
PUBLIC
 
	$LMHText_ídEÀmít
 (
HText
 * 
ãxt
, 
ñem_num
)

1111 
ñem_num
) {

1112 
HTML_A
:

1113 
	`LMHText_ídAnch‹
 (
ãxt
);

1119 
	}
}

	@LineMode/src/GridText.h

25 
	~"WWWLib.h
"

26 
	~"HText.h
"

28 
HTChûdAnch‹
 * 
HText_chûdNumbî
 (
HText
 * 
ãxt
, 
n
);

31 
hy≥r‰ì
 (
HText
 * 
me
);

34 
BOOL
 
HText_ˇnS¸ﬁlUp
 (
HText
 * 
ãxt
);

35 
BOOL
 
HText_ˇnS¸ﬁlDown
 (
HText
 * 
ãxt
);

38 
HText_s¸ﬁlUp
 (
HText
 * 
ãxt
);

39 
HText_s¸ﬁlDown
 (
HText
 * 
ãxt
);

40 
HText_s¸ﬁlT›
 (
HText
 * 
ãxt
);

41 
HText_s¸ﬁlBŸtom
 (
HText
 * 
ãxt
);

43 
HText_sour˚Anch‹s
 (
HText
 * 
ãxt
);

44 
HText_£tSèÀ
 (
HText
 * 
ãxt
);

45 
HText_ª‰esh
 (
HText
 * 
ãxt
);

47 #ifde‡
CURSES


48 
HText_gëT›OfS¸ìn
 (
HText
 * 
ãxt
);

49 
HText_gëLöes
 (
HText
 * 
ãxt
);

63 
BOOL
 
HText_‰ìAŒ
 ();

75 
HText
* 
LMHText_√w
 (
HTReque°
 * 
ªq
,

76 
HTP¨ítAnch‹
 * 
™ch‹
,
HTSåóm
 * 
ouçut_°ªam
);

77 
HText
* 
LMHText_√w2
 (
HTReque°
 * 
ªq
,

78 
HTP¨ítAnch‹
 * 
™ch‹
,
HTSåóm
 * 
ouçut_°ªam
);

79 
HText_‰ì
 (
HText
 * 
£lf
);

80 
BOOL
 
LMHText_dñëe
 (
HText
 * 
£lf
);

81 
LMHText_addText
 (
HText
 * 
ãxt
, c⁄° * 
°r
, 
Àngth
);

82 
LMHText_≠≥ndText
 (
HText
 * 
ãxt
, c⁄° * 
°r
);

83 
LMHText_begöAnch‹
 (
HText
 *
ãxt
,

84 
ñem_num
, 
©å_num
, 
HTChûdAnch‹
* 
™c
,

85 c⁄° 
BOOL
* 
¥e£¡
, c⁄° ** 
vÆue
);

	@LineMode/src/HTBrowse.c

55 
	~"WWWLib.h
"

56 
	~"WWWMIME.h
"

57 
	~"WWWCache.h
"

58 
	~"WWWAµ.h
"

59 
	~"WWWTøns.h
"

60 
	~"WWWInô.h
"

62 
	~"GridText.h
"

63 
	~"HTBrow£.h
"

65 
	~"CSLAµ.h
"

66 
	~"CSLL.h
"

67 
	~"CSU£r.h
"

68 
	~"CSU§L°.h
"

70 #i‚de‡
W3C_VERSION


71 
	#W3C_VERSION
 "Un•ecifõd"

	)

74 
	#APP_NAME
 "W3CLöeMode"

	)

75 
	#APP_VERSION
 
W3C_VERSION


	)

78 
	#MANUAL
 "hâp://www.w3.‹g/LöeMode/U£r/QuickGuide.html"

	)

81 
	#C_HELP
 "hâp://www.w3.‹g/LöeMode/U£r/Comm™ds.html"

	)

84 
	#L_HELP
 "hâp://www.w3.‹g/LöeMode/U£r/Comm™dLöe.html"

	)

86 
	#DEFAULT_OUTPUT_FILE
 "www.out"

	)

87 
	#DEFAULT_RULE_FILE
 "www.c⁄f"

	)

88 
	#DEFAULT_LOG_FILE
 "www.log"

	)

89 
	#DEFAULT_MEMLOG
 "www.mem"

	)

90 
	#DEFAULT_USERLIST_FILE
 "PICSu§s.html"

	)

93 
	#HT_MEMLOG


	)

96 
	#PROMPT
 "%s"

	)

97 
	#REF_MARK
 "[%d]"

	)

98 
	#END_MARK
 "[END]"

	)

100 
	#SCREEN_WIDTH
 79

	)

101 
	#MIN_SCREEN_WIDTH
 10

	)

102 
	#MAX_SCREEN_WIDTH
 150

	)

103 
	#SCREEN_HEIGHT
 24

	)

104 
	#MIN_SCREEN_HEIGHT
 5

	)

105 
	#MAX_SCREEN_HEIGHT
 200

	)

107 
	#MAX_HISTORY
 20

	)

109 
	#RESPONSE_LENGTH
 1024

	)

111 
	#SHOW_MSG
 (
WWWTRACE
 || 
	`HTAÀπ_öãø˘ive
())

	)

112 
	#CHECK_INPUT
(
a
, 
b
Ë(!
	`°∫ˇ£comp
 (◊), (b), 
	`°æí
((b))))

	)

114 
	#DEFAULT_I_TIMEOUT
 1000

	)

115 
	#DEFAULT_NI_TIMEOUT
 10000

	)

117 
	#DEFAULT_FORMAT
 
WWW_PRESENT


	)

119 #i‡
deföed
(
__svr4__
)

120 
	#CATCH_SIG


	)

124 #ifde‡
CYRILLIC


125 
	~"a_°dio.h
"

126 
ARc
 
	g¨c
;

130 
PUBLIC
 
	gHTS¸ìnWidth
 = 
SCREEN_WIDTH
;

131 
PUBLIC
 
	gHTS¸ìnHeight
 = -1;

134 
PUBLIC
 
BOOL
 
	gdi•œy_™ch‹s
 = 
YES
;

135 
PUBLIC
 * 
	g°¨t_ª„ªn˚
 = 
NULL
;

136 
PUBLIC
 * 
	gíd_ª„ªn˚
 = 
REF_MARK
;

137 
PUBLIC
 * 
	gª„ªn˚_m¨k
 = "[%d] ";

138 
PUBLIC
 * 
	gíd_m¨k
 = 
END_MARK
;

140 
	e_LMFœgs
 {

141 
	mLM_FILTER
 = 0x1,

142 
	mLM_REFS
 = 0x2,

143 
	mLM_REFORMAT
 = 0x4,

144 
	mLM_PREEMTIVE
= 0x8

145 } 
	tLMFœgs
;

147 
	s_LöeMode
 {

148 
HTReque°
 * 
	mc⁄sﬁe
;

149 
HTP¨ítAnch‹
 * 
	m™ch‹
;

150 
HTLi°
 * 
	ma˘ive
;

151 
HTLi°
 * 
	m¥e£¡îs
;

152 
HTHi°‹y
 * 
	mhi°‹y
;

153 * 
	mcwd
;

154 * 
	mruÀs
;

155 * 
	mlogfûe
;

156 
HTLog
 * 
	mlog
;

157 * 
	mouçutfûe
;

158 * 
	mho°
;

159 
	måa˚
;

160 
	mtimî
;

161 
HTF‹m©
 
	mf‹m©
;

162 
LMFœgs
 
	mÊags
;

163 
HTVõw
 * 
	mpVõw
;

164 * 
	mu£rLi°
;

165 
CSU£r_t
 * 
	mpCSU£r
;

166 
BOOL
 
	mnoPICSPassw‹ds
;

169 
	e_LMSèã
 {

170 
	mLM_UPDATE
 = 0x1,

171 
	mLM_NO_UPDATE
= 0x2,

172 
	mLM_DONE
 = 0x4,

173 
	mLM_INACTIVE
 = 0x8,

174 
	mLM_IGNORE
 = 0x10

175 } 
	tLMSèã
;

177 
	s_C⁄ãxt
 {

178 
LMSèã
 
	m°©e
;

179 
HTReque°
 * 
	mªque°
;

180 
LöeMode
 * 
	mlm
;

181 
HTP¨ítAnch‹
 * 
	msour˚
;

182 } 
	tC⁄ãxt
;

184 
PRIVATE
 
sˇn_comm™d
 (
SOCKET
 
s
, * 
∑øm
, 
HTEvítTy≥
 
ty≥
);

186 
PRIVATE
 
HTEvít
 * 
	gC⁄sﬁeEvít
 = 
NULL
;

188 #i‚de‡
WWW_WIN_WINDOW


189 
PRIVATE
 
FILE
 * 
	gOUTPUT
 = 
NULL
;

192 
PRIVATE
 
I≈utP¨£r_t
 
	g∑r£_comm™d
;

193 
I≈utP¨£r_t
 * 
	gPI≈utP¨£r
 = &
∑r£_comm™d
;

196 
PRIVATE
 
HTNëBef‹e
 
	gMem‹yCacheFûãr
;

197 
PRIVATE
 
HTNëA·î
 
	gãrmö©e_h™dÀr
;

200 
HText
 * 
HTMaöText
;

201 
HTP¨ítAnch‹
 * 
HTMaöAnch‹
;

202 
LMHText_begöEÀmít
 (
HText
 * 
ãxt
,

203 
ñem_num
, c⁄° 
BOOL
 * 
¥e£¡
, c⁄° ** 
vÆue
);

204 
LMHText_ídEÀmít
 (
HText
 * 
ãxt
, 
ñem_num
);

208 
PUBLIC
 
	$HTW©ch
(
id
, * 
obj
, c⁄° * 
fmt
, ...)

210 
va_li°
 
pArgs
;

211 
	`va_°¨t
(
pArgs
, 
fmt
);

212 
	`Ârötf
(
°dîr
, "id: %x obj: %p: ", 
id
, 
obj
);

213  
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
);

214 
	}
}

219 
PRIVATE
 
C⁄ãxt
 * 
	$C⁄ãxt_√w
 (
LöeMode
 *
lm
, 
HTReque°
 *
ªque°
, 
LMSèã
 
°©e
)

221 
C⁄ãxt
 * 
me
;

222 i‡((
me
 = (
C⁄ãxt
 *Ë
	`HT_CALLOC
(1,  (C⁄ãxt))Ë=
NULL
)

223 
	`HT_OUTOFMEM
("Context_new");

224 
me
->
°©e
 = state;

225 
me
->
ªque°
 =Ñequest;

226 
me
->
lm
 =Üm;

227 
	`HTReque°_£tC⁄ãxt
(
ªque°
, (*Ë
me
);

228 
	`HTLi°_addObje˘
(
lm
->
a˘ive
, (*Ë
me
);

229  
me
;

230 
	}
}

235 
PRIVATE
 
BOOL
 
	$C⁄ãxt_dñëe
 (
C⁄ãxt
 * 
ﬁd
)

237 
	`HT_FREE
(
ﬁd
);

238  
YES
;

239 
	}
}

241 
PUBLIC
 
LöeMode
 * 
	$C⁄ãxt_gëLöeMode
(
HTReque°
 * 
ªque°
)

243  ((
C⁄ãxt
 *Ë
	`HTReque°_c⁄ãxt
(
ªque°
))->
lm
;

244 
	}
}

250 
CSDi•osôi⁄_ˇŒback
 
	gPICSCÆlback
;

251 
PRIVATE
 
HTReque°
 * 
	$Thªad_√w
 (
LöeMode
 * 
lm
, 
BOOL
 
I¡îa˘ive
, 
LMSèã
 
°©e
)

253 
HTReque°
 * 
√wªq
 = 
	`HTReque°_√w
();

254 i‡(!
lm
Ë 
NULL
;

255 
	`C⁄ãxt_√w
(
lm
, 
√wªq
, 
°©e
);

256 i‡(
I¡îa˘ive
Ë
	`HTReque°_£tC⁄vîsi⁄
(
√wªq
, 
lm
->
¥e£¡îs
, 
NO
);

257 i‡(
lm
->
Êags
 & 
LM_PREEMTIVE
Ë
	`HTReque°_£tPªem±ive
(
√wªq
, 
YES
);

258 
	`HTReque°_addRqHd
(
√wªq
, 
HT_C_HOST
);

259 
	`CSAµ_ªgi°îReq
(
√wªq
, 
lm
->
pCSU£r
, 
PICSCÆlback
,

260 
CSAµ_ˇŒOnBad
, (*)
lm
);

261  
√wªq
;

262 
	}
}

267 
PRIVATE
 
	$Thªad_˛ónup
 (
LöeMode
 * 
lm
)

269 i‡(
lm
 &&Üm->
a˘ive
) {

270 
HTLi°
 * 
cur
 = 
lm
->
a˘ive
;

271 
C⁄ãxt
 * 
¥es
;

272 (
¥es
 = (
C⁄ãxt
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

273 i‡(
¥es
->
°©e
&
LM_DONE
 &&Öªs->°©e&
LM_INACTIVE
) {

274 i‡((
	`HTLi°_ªmoveObje˘
(
lm
->
a˘ive
, 
¥es
)Ë=
NO
)

275 
	`HTTRACE
(
APP_TRACE
, "NOT FOUND\n");

276 
	`HTReque°_dñëe
(
¥es
->
ªque°
);

277 
	`C⁄ãxt_dñëe
(
¥es
);

278 
cur
 = 
lm
->
a˘ive
;

282 
	}
}

287 
PRIVATE
 
	$Thªad_dñëeAŒ
 (
LöeMode
 * 
lm
)

289 i‡(
lm
 &&Üm->
a˘ive
) {

290 
HTLi°
 * 
cur
 = 
lm
->
a˘ive
;

291 
C⁄ãxt
 * 
¥es
;

292 (
¥es
 = (
C⁄ãxt
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

293 i‡(
¥es
->
ªque°
) {

294 
	`HTReque°_dñëe
(
¥es
->
ªque°
);

295 
	`C⁄ãxt_dñëe
(
¥es
);

298 
	`HTLi°_dñëe
(
lm
->
a˘ive
);

299 
lm
->
a˘ive
 = 
NULL
;

301 
	}
}

306 
PRIVATE
 
LöeMode
 * 
	$LöeMode_√w
 ()

308 
LöeMode
 * 
me
;

309 i‡((
me
 = (
LöeMode
 *Ë
	`HT_CALLOC
(1, (LöeMode))Ë=
NULL
)

310 
	`HT_OUTOFMEM
("LineMode_new");

311 
me
->
cwd
 = 
	`HTGëCuºítDúe˘‹yURL
();

312 
me
->
a˘ive
 = 
	`HTLi°_√w
();

313 
me
->
c⁄sﬁe
 = 
	`HTReque°_√w
();

314 
	`C⁄ãxt_√w
(
me
, me->
c⁄sﬁe
, 
LM_UPDATE
);

315 
me
->
åa˚
 = 
SHOW_ALL_TRACE
;

316 
me
->
timî
 = -1;

317 
me
->
pCSU£r
 = 0;

318 i‡(!(
me
->
pVõw
 = 
	`HTVõw_¸óã
("'nother Window", 25, 80, me)))

320  
me
;

321 
	}
}

326 
PRIVATE
 
BOOL
 
	$LöeMode_dñëe
 (
LöeMode
 * 
lm
)

328 i‡(
lm
) {

329 
	`Thªad_dñëeAŒ
(
lm
);

330 
	`HTPª£¡©i⁄_dñëeAŒ
(
lm
->
¥e£¡îs
);

331 
	`HTHi°‹y_dñëe
(
lm
->
hi°‹y
);

332 
	`HT_FREE
(
lm
->
cwd
);

333 i‡(
lm
->
log
Ë
	`HTLog_˛o£
(lm->log);

334 i‡(
lm
->
pCSU£r
)

335 
	`CSLﬂdedU£r_ªmove
(
lm
->
pCSU£r
);

336 
	`HTVõw_de°roy
(
lm
->
pVõw
);

337 #i‚de‡
WWW_WIN_WINDOW


338 i‡(
OUTPUT
 && OUTPUT !
°dout
Ë
	`f˛o£
(OUTPUT);

340 
	`HText_‰ìAŒ
();

341 
	`HT_FREE
(
lm
);

342  
YES
;

344  
NO
;

345 
	}
}

347 
PUBLIC
 
HTReque°
 * 
	$LöeMode_gëC⁄sﬁe
(
LöeMode
 * 
pLm
)

349  
pLm
->
c⁄sﬁe
;

350 
	}
}

352 
PUBLIC
 
HTVõw
 * 
	$LöeMode_gëVõw
(
LöeMode
 * 
pLm
)

354  
pLm
 ?ÖLm->
pVõw
 : 0;

355 
	}
}

357 
PRIVATE
 
BOOL
 
	$LöeMode_lﬂd
(
LöeMode
 * 
lm
, 
HTP¨ítAnch‹
 * 
™ch‹
,

358 * 
uæ
, 
BOOL
 
¥ìm±ive
, 
HTReque°
 ** 
pPReq
)

360 * 
fuŒURL
;

361 
HTP¨ítAnch‹
 * 
pAnch‹
;

363 *
pPReq
 = 
	`Thªad_√w
(
lm
, 
YES
, 
LM_UPDATE
);

364 i‡(
¥ìm±ive
)

365 
	`HTReque°_£tPªem±ive
(*
pPReq
, 
YES
);

366 i‡(
™ch‹
)

367  
	`HTLﬂdRñ©ive
(
uæ
, 
™ch‹
, *
pPReq
);

368 
fuŒURL
 = 
	`HTP¨£
(
uæ
, 
lm
->
cwd
, 
PARSE_ALL
);

369 
pAnch‹
 = (
HTP¨ítAnch‹
 *Ë
	`HTAnch‹_födAddªss
(
fuŒURL
);

370 
	`HT_FREE
(
fuŒURL
);

371  
	`HTLﬂdAnch‹
((
HTAnch‹
 *Ë
pAnch‹
, *
pPReq
);

372 
	}
}

374 
PRIVATE
 
	$CÀ™up
 (
LöeMode
 * 
me
, 
°©us
)

376 i‡(
	`HTAÀπ_öãø˘ive
())

377 
	`OuçutD©a
(
me
->
pVõw
, "\n");

378 
	`CSLﬂdedU£r_dñëeAŒ
();

379 
	`CSAµ_uƒegi°îAµ
();

381 
	`LöeMode_dñëe
(
me
);

382 
	`HTProfûe_dñëe
();

383 #ifde‡
HT_MEMLOG


384 
	`HTMemLog_˛o£
();

387 #ifde‡
VMS


388 
	`exô
(
°©us
 ? status : 1);

390 
	`exô
(
°©us
 ? status : 0);

392 
	}
}

397 
PRIVATE
 
	$s¸size
 (* 
p_height
, * 
p_width
)

399 #i‡
	`deföed
(
HAVE_IOCTL
Ë&& deföed(
HAVE_WINSIZE
Ë&& deföed(
TIOCGWINSZ
)

400 *
s
;

402 
wösize
 
w
;

403 i‡(
	`io˘l
(2, 
TIOCGWINSZ
, &
w
Ë=0 && w.
ws_row
 > 0)

404 *
p_height
 = 
w
.
ws_row
;

405 i‡((
s
 = 
	`gëív
("LINES")Ë!
NULL
)

406 *
p_height
 = 
	`©oi
(
s
);

408 *
p_height
 = 
SCREEN_HEIGHT
;

410 i‡(
	`io˘l
(2, 
TIOCGWINSZ
, &
w
Ë=0 && w.
ws_cﬁ
 > 0)

411 *
p_width
 = 
w
.
ws_cﬁ
;

412 i‡((
s
 = 
	`gëív
("COLUMNS")Ë!
NULL
)

413 *
p_width
 = 
	`©oi
(
s
);

415 *
p_width
 = 80;

417 *
p_height
 = 
SCREEN_HEIGHT
;

418 *
p_width
 = 
SCREEN_WIDTH
;

420 
	}
}

422 #ifde‡
CATCH_SIG


423 
	~<sig«l.h
>

428 
PRIVATE
 
	$SëSig«l
 ()

434 i‡(
	`sig«l
(
SIGPIPE
, 
SIG_IGN
Ë=
SIG_ERR
) {

435 
	`HTTRACE
(
APP_TRACE
, "HTSignal.... Can't catch SIGPIPE\n");

437 
	`HTTRACE
(
APP_TRACE
, "HTSignal.... Ignoring SIGPIPE\n");

440 #ifde‡
HT_MEMLOG


441 
	`HTMemLog_Êush
();

444 
	}
}

450 
PRIVATE
 
	$Vîsi⁄Info
 (
LöeMode
 * 
lm
)

452 
HTVõw
 * 
pVõw
 = 
lm
 ?Üm->pVõw : 
NULL
;

453 
	`OuçutD©a
(
pVõw
, "\n\nW3C Reference Software\n\n");

454 
	`OuçutD©a
(
pVõw
, "\tW3C LöêModêBrow£∏vîsi⁄ %s.\n", 
APP_VERSION
);

455 
	`OuçutD©a
(
pVõw
, "\tW3C Re„ªn˚ Libøry vîsi⁄ %s.\n\n",
	`HTLib_vîsi⁄
());

456 
	`OuçutD©a
(
pVõw
, "Please send feedbackÅo <libwww@w3.org>\n");

457 
	}
}

463 
PRIVATE
 
	$Re„ªn˚_Li°
 (
LöeMode
 * 
lm
, 
BOOL
 
tôÀs
)

465 
ªfs
 = 
	`HText_sour˚Anch‹s
(
HTMaöText
);

466 i‡(
ªfs
 <= 0) {

467 
	`OuçutD©a
(
lm
->
pVõw
, "\n\nThereáreÇoÑeferences fromÅhis document.\n\n");

469 
˙t
;

470 
	`OuçutD©a
(
lm
->
pVõw
, "\n*** References fromÅhis document ***\n");

471 
˙t
=1; c¡<=
ªfs
; cnt++) {

472 
HTLök
 * 
lök
 =

473 
	`HTAnch‹_maöLök
((
HTAnch‹
*)
	`HText_chûdNumbî
(
HTMaöText
,
˙t
));

474 
HTAnch‹
 * 
de°
 = 
	`HTLök_de°ö©i⁄
(
lök
);

475 
HTP¨ítAnch‹
 * 
∑ª¡
 = 
	`HTAnch‹_∑ª¡
(
de°
);

476 * 
addªss
 = 
	`HTAnch‹_addªss
(
de°
);

477 c⁄° * 
tôÀ
 = 
tôÀs
 ? 
	`HTAnch‹_tôÀ
(
∑ª¡
Ë: 
NULL
;

478 
	`OuçutD©a
(
lm
->
pVõw
, 
ª„ªn˚_m¨k
, 
˙t
);

479 
	`OuçutD©a
(
lm
->
pVõw
, "%s%s\n",

480 ((
HTAnch‹
*)
∑ª¡
!=
de°
Ë&& 
tôÀ
 ? "in " : "",

481 (*)(
tôÀ
 ?ÅôÀ : 
addªss
));

482 
	`HT_FREE
(
addªss
);

484 #i‚de‡
WWW_WIN_WINDOW


485 
	`fÊush
(
OUTPUT
);

488 
	}
}

494 
PRIVATE
 
	$Hi°‹y_Li°
 (
LöeMode
 * 
lm
)

496 
cuºít
 = 
	`HTHi°‹y_posôi⁄
(
lm
->
hi°‹y
);

497 
max
 = 
	`HTHi°‹y_cou¡
(
lm
->
hi°‹y
);

498 
˙t
;

499 
	`OuçutD©a
(
lm
->
pVõw
, "\n Documents you have visited: ");

500 i‡(
max
 > 
MAX_HISTORY
) {

501 
max
 = 
MAX_HISTORY
;

502 
	`OuçutD©a
(
lm
->
pVõw
, "(truncated)\n");

504 
	`OuçutD©a
(
lm
->
pVõw
, "\n");

505 
˙t
=1; c¡<=
max
; cnt++) {

506 
HTAnch‹
 *
™ch‹
 = 
	`HTHi°‹y_li°
(
lm
->
hi°‹y
, 
˙t
);

507 *
addªss
 = 
	`HTAnch‹_addªss
(
™ch‹
);

508 
HTP¨ítAnch‹
 *
∑ª¡
 = 
	`HTAnch‹_∑ª¡
(
™ch‹
);

509 c⁄° *
tôÀ
 = 
	`HTAnch‹_tôÀ
(
∑ª¡
);

510 
	`OuçutD©a
(
lm
->
pVõw
, "%s R %d\t%s%s\n",

511 (
˙t
==
cuºít
) ? "*" : " ",

512 
˙t
,

513 ((
HTAnch‹
*)
∑ª¡
!=
™ch‹
Ë&& 
tôÀ
 ? "in " : "",

514 
tôÀ
 ?ÅôÀ : 
addªss
);

515 
	`HT_FREE
(
addªss
);

517 
	`OuçutD©a
(
lm
->
pVõw
, "\n");

518 
	}
}

523 
PRIVATE
 * 
	$AskU£r
 (
HTReque°
 * 
ªque°
, c⁄° * 
Msg
,

524 c⁄° * 
deÊt
)

526 
buf„r
[200];

527 *
ª∂y
 = 
NULL
;

528 
	`HTPröt
("%†", 
Msg
 ? Msg : "UNKNOWN");

529 i‡(
deÊt
)

530 
	`HTPröt
("(RETURN f‹ [%s]Ë", 
deÊt
);

532 #i‚de‡
NO_STDIO


533 i‡(!
	`fgës
(
buf„r
, 200, 
°dö
))

534  
NULL
;

535 
buf„r
[
	`°æí
(buffer)-1] = '\0';

536 i‡(*
buf„r
)

537 
	`SåAŒocC›y
(
ª∂y
, 
buf„r
);

538 i‡(
deÊt
)

539 
	`SåAŒocC›y
(
ª∂y
, 
deÊt
);

541  
ª∂y
;

542 
	}
}

544 
PRIVATE
 
BOOL
 
	$c⁄fúm
 (
HTReque°
 * 
ªque°
, c⁄° * 
Msg
)

546 
ª•⁄£
[4];

547 
	`HTPröt
("%†(y/nË", 
Msg
 ? Msg : "UNKNOWN");

548 #i‚de‡
NO_STDIO


549 i‡(
	`fgës
(
ª•⁄£
, 4, 
°dö
))

552 *
±r
 = 
ª•⁄£
;

553 *
±r
) {

554 i‡(*
±r
 == '\n') {

555 *
±r
 = '\0';

558 *
±r
 = 
	`TOUPPER
(*ptr);

559 
±r
++;

561  (!
	`°rcmp
(
ª•⁄£
, "YES"Ë|| !°rcmp‘e•⁄£, "Y")Ë? 
YES
 : 
NO
;

563  
NO
;

564 
	}
}

570 
PRIVATE
 
	$MakeComm™dLöe
 (
LöeMode
 * 
lm
, 
BOOL
 
is_ödex
)

573 i‡(
	`HTAnch‹_hasChûdªn
(
HTMaöAnch‹
)) {

574 
ªfs
 = 
	`HText_sour˚Anch‹s
(
HTMaöText
);

575 i‡(
ªfs
>1)

576 
	`OuçutD©a
(
lm
->
pVõw
, "1-%d, ", 
ªfs
);

578 
	`OuçutD©a
(
lm
->
pVõw
, "1, ");

580 i‡(
	`HText_ˇnS¸ﬁlUp
(
HTMaöText
)) {

581 
	`OuçutD©a
(
lm
->
pVõw
, "Top, ");

582 
	`OuçutD©a
(
lm
->
pVõw
, "Up, ");

584 i‡(
	`HText_ˇnS¸ﬁlDown
(
HTMaöText
)) {

585 
	`OuçutD©a
(
lm
->
pVõw
, "BOttom, ");

586 
	`OuçutD©a
(
lm
->
pVõw
, "Down or <RETURN> for more,");

590 
	`OuçutD©a
(
lm
->
pVõw
, "\n");

591 i‡(
	`HTHi°‹y_ˇnBackåack
(
lm
->
hi°‹y
))

592 
	`OuçutD©a
(
lm
->
pVõw
, "Back, ");

593 i‡(
	`HTHi°‹y_ˇnF‹w¨d
(
lm
->
hi°‹y
))

594 
	`OuçutD©a
(
lm
->
pVõw
, "Forward, ");

595 i‡(
is_ödex
)

596 
	`OuçutD©a
(
lm
->
pVõw
, "FIND <keywords>, ");

597 
	`OuçutD©a
(
lm
->
pVõw
, "Quit, or Help: ");

598 
	`fÊush
(
°dout
);

600 
	}
}

606 
PRIVATE
 
	$PutAnch‹
 (
LöeMode
 * 
lm
, 
HTReque°
 * 
ªque°
)

608 * 
de°
 = 
	`AskU£r
(
ªque°
, "De°ö©i⁄: ", 
NULL
);

615 i‡(
de°
) {

616 
HTReque°
 * 
√w_ªque°
 = 
	`Thªad_√w
(
lm
, 
YES
, 
LM_UPDATE
);

617 
	`HTPutDocumítRñ©ive
(
HTMaöAnch‹
, 
de°
, HTMaöAnch‹, 
√w_ªque°
);

618 
	`HT_FREE
(
de°
);

620  
YES
;

621 
	}
}

626 
PRIVATE
 
	$DñëeAnch‹
 (
LöeMode
 * 
lm
, 
HTReque°
 * 
ªque°
)

628 
°©us
 = 
HT_INTERNAL
;

629 
BOOL
 
doô
 = 
	`c⁄fúm
(
ªque°
, "DeleteÅhe current document?");

630 i‡(
doô
) {

631 
HTReque°
 * 
√w_ªque°
 = 
	`Thªad_√w
(
lm
, 
YES
, 
LM_UPDATE
);

632 
°©us
 = 
	`HTDñëeAnch‹
((
HTAnch‹
 *Ë
HTMaöAnch‹
, 
√w_ªque°
);

634  
°©us
;

635 
	}
}

641 
PRIVATE
 
BOOL
 
	$SaveOuçutSåóm
 (
HTReque°
 * 
ªq
, * 
This
, * 
Next
)

643 
FILE
 *
Â
;

644 *
‚ame
;

645 *
fmode
;

648 i‡(*(
This
+1) == '>') {

649 
fmode
 = "ab";

650 
‚ame
 = *(
This
+2Ë? (This+2Ë: 
Next
;

651 } i‡(*(
This
+1) == '!') {

652 
fmode
 = "wb";

653 
‚ame
 = *(
This
+2Ë? (This+2Ë: 
Next
;

655 
fmode
 = "wb";

656 
‚ame
 = *(
This
+1Ë? (This+1Ë: 
Next
;

657 i‡(
‚ame
) {

658 i‡((
Â
 = 
	`f›í
(
‚ame
, "r")Ë!
NULL
) {

659 
	`f˛o£
(
Â
);

660 i‡(!
	`c⁄fúm
(
ªq
, "FileÉxists - overwrite?"))

661  
NO
;

665 i‡(!
‚ame
)

666  
NO
;

667 i‡((
Â
 = 
	`f›í
(
‚ame
, 
fmode
)Ë=
NULL
) {

668 i‡(
SHOW_MSG
Ë
	`HTPröt
("C™'àac˚s†fûê(%s)\n", 
‚ame
);

669  
NO
;

671 
	`HTReque°_£tOuçutSåóm
(
ªq
, 
	`HTFWrôî_√w
‘eq, 
Â
, 
NO
));

672 i‡(
SHOW_MSG
Ë
	`HTPröt
("SavögÅÿfûê`%s\'\n", 
‚ame
);

673  (
	`HTLﬂdAnch‹
((
HTAnch‹
*Ë
HTMaöAnch‹
, 
ªq
Ë!
HT_WOULD_BLOCK
);

674 
	}
}

676 
CSEº‹_t
 
	$LﬂdedU£rsCÆlback
(
CSU£r_t
 * 
pCSU£r
, 
ödex
, * 
pVoid
)

678 
LöeMode
 * 
lm
 = (LöeModê*)
pVoid
;

679 
	`OuçutD©a
(
lm
->
pVõw
, "%d: %s\n", 
ödex
, 
	`CSU£r_«me
(
pCSU£r
));

680  
CSEº‹_OK
;

681 
	}
}

683 
CSEº‹_t
 
	$U£rLi°CÆlback
(* 
u£∫ame
, * 
uæ
, 
ödex
, * 
pVoid
)

685 
LöeMode
 * 
lm
 = (LöeModê*)
pVoid
;

686 
	`OuçutD©a
(
lm
->
pVõw
, "%d: %†%s\n", 
ödex
, 
u£∫ame
, 
uæ
);

687  
CSEº‹_OK
;

688 
	}
}

690 
PRIVATE
 
BOOL
 
	$ShowPICSU£rs
(
LöeMode
 * 
lm
)

692 
	`OuçutD©a
(
lm
->
pVõw
, "Loaded users:\n");

693 
	`CSLﬂdedU£r_íum
(&
LﬂdedU£rsCÆlback
, (*)
lm
);

694 
	`OuçutD©a
(
lm
->
pVõw
, "Listed users:\n");

695 
	`CSU£rLi°_íum
(&
U£rLi°CÆlback
, (*)
lm
);

696  
YES
;

697 
	}
}

699 
PRIVATE
 
	$PICS_u£rCÆlback
(
CSU£r_t
 * 
pCSU£r
, * 
pVoid
)

701 
LöeMode
 * 
lm
 = (LöeModê*)
pVoid
;

702 * 
u£rName
;

703 * 
∑ssw‹d
 = 
NULL
;

704 
HTAÀπCÆlback
 *
cbf
;

705 
ªt
;

706 
HTAÀπP¨
 * 
ª∂y
;

708 i‡(
lm
->
noPICSPassw‹ds
) {

709 
lm
->
pCSU£r
 =ÖCSUser;

712 i‡(!(
cbf
 = 
	`HTAÀπ_föd
(
HT_A_USER_PW
)))

714 
ª∂y
 = 
	`HTAÀπ_√wRïly
();

715 
u£rName
 = 
	`CSU£r_«me
(
pCSU£r
);

716 i‡((
ªt
 = (*
cbf
)(
lm
->
c⁄sﬁe
, 
HT_A_USER_PW
,

717 
HT_MSG_NULL
, 
u£rName
, 
NULL
, 
ª∂y
))) {

718 
u£rName
 = 
	`HTAÀπ_ª∂yMesßge
(
ª∂y
);

719 
∑ssw‹d
 = 
	`HTAÀπ_ª∂ySe¸ë
(
ª∂y
);

721 
	`HTAÀπ_dñëeRïly
(
ª∂y
);

722 i‡(!
ªt
) {

723 
	`HTPröt
("PICS set user *canceled*.\n");

726 
ªt
 = -1;

727 i‡(!
u£rName
)

728 
	`HTPröt
("PICS cannot setÅoÇoÇame.\n");

729 i‡(
	`CSU£r_checkPassw‹d
(
pCSU£r
, 
∑ssw‹d
Ë=
NO
)

730 
	`HTPröt
("PICSÖassword wasÇot valid.\n");

732 
ªt
 = 0;

733 
lm
->
pCSU£r
 =ÖCSUser;

735 
	`HT_FREE
(
u£rName
);

736 
	`HT_FREE
(
∑ssw‹d
);

737  
ªt
;

738 
	}
}

740 
PRIVATE
 
BOOL
 
	$SëPICSU£r
(
LöeMode
 * 
lm
, * 
u£rName
)

742 * 
∑ssw‹d
 = 
NULL
;

743 
HTAÀπCÆlback
 *
cbf
;

744 
BOOL
 
ªt
;

745 
HTAÀπP¨
 * 
ª∂y
;

747 i‡(!(
cbf
 = 
	`HTAÀπ_föd
(
HT_A_USER_PW
)))

748  
NO
;

749 
ª∂y
 = 
	`HTAÀπ_√wRïly
();

750 i‡((
ªt
 = (*
cbf
)(
lm
->
c⁄sﬁe
, 
HT_A_USER_PW
,

751 
HT_MSG_NULL
, 
u£rName
, 
NULL
, 
ª∂y
))) {

752 
u£rName
 = 
	`HTAÀπ_ª∂yMesßge
(
ª∂y
);

753 
∑ssw‹d
 = 
	`HTAÀπ_ª∂ySe¸ë
(
ª∂y
);

755 
	`HTAÀπ_dñëeRïly
(
ª∂y
);

756 i‡(!
ªt
) {

757 
	`HTPröt
("PICS set user *canceled*.\n");

758  
NO
;

760 
ªt
 = 
NO
;

761 i‡(!
u£rName
)

762 
	`HTPröt
("Canceled.\n");

763 i‡(!(
lm
->
pCSU£r
 = 
	`CSAµ_ªgi°îU£rByName
(
u£rName
, 
∑ssw‹d
))) {

764 * 
uæ
;

765 i‡((
uæ
 = 
	`CSU£rLi°_födURL
(
u£rName
)Ë=
NULL
)

766 
	`HTPröt
("PICS u£∏\"%s\" i†unknown.\n", 
u£rName
);

767 i‡(!
	`CSLﬂdedU£r_lﬂd
(
uæ
, 
lm
->
cwd
))

768 
	`HTPröt
("C™'àlﬂd PICS u£∏\"%s\".\n", 
u£rName
);

769 i‡((
	`CSLﬂdedU£r_föd
(
u£rName
)Ë=
NO
)

770 
	`HTPröt
("PICS u£∏\"%s\"ÇŸ found i¿\"%s\".\n", 
u£rName
, 
uæ
);

771 i‡(!(
lm
->
pCSU£r
 = 
	`CSAµ_ªgi°îU£rByName
(
u£rName
, 
∑ssw‹d
)))

772 
	`HTPröt
("FaûedÅÿ£àPICS u£∏tÿ\"%s\".\n", 
u£rName
);

773 
ªt
 = 
YES
;

774 
	`HT_FREE
(
uæ
);

776 
	`HT_FREE
(
u£rName
);

777 
	`HT_FREE
(
∑ssw‹d
);

778  
ªt
;

779 
	}
}

781 
PRIVATE
 
BOOL
 
	$LﬂdPICSU£r
(
LöeMode
 * 
lm
, * 
uæ
)

783 
CSU£r_t
 * 
pCSU£r
;

784 i‡(!(
pCSU£r
 = 
	`CSLﬂdedU£r_lﬂd
(
uæ
, 
lm
->
cwd
)))

785  
NO
;

786 
lm
->
pCSU£r
 =ÖCSUser;

787  
YES
;

788 
	}
}

790 
CSEº‹_t
 
	$PICSCÆlback
(
HTReque°
* 
pReq
, 
CSLabñ_t
 * 
pCSLabñ
,

791 
CSU£r_t
 * 
pCSU£r
, 
CSEº‹_t
 
di•osôi⁄
, * 
pVoid
)

793 
LöeMode
 * 
lm
 = (LöeModê*)
pVoid
;

794 * 
mesg
;

795 
di•osôi⁄
) {

796 
CSEº‹_RATING_RANGE
:

798 * 
œbñSå
 = 
	`CSLabñ_gëR©ögSå
(
pCSLabñ
);

799 * 
u£rSå
 = 
	`CSU£r_gëR©ögSå
(
pCSU£r
);

800 * 
™ch‹Så
 = 
	`HTAnch‹_addªss
((
HTAnch‹
*)
	`HTReque°_™ch‹
(
pReq
));

801 
	`OuçutD©a
(
lm
->
pVõw
, "PICS user %s isÇotállowedÅo see document: %s\n",

802 
	`CSU£r_«me
(
pCSU£r
), 
™ch‹Så
);

803 
	`OuçutD©a
(
lm
->
pVõw
, " %s's \"%s\"Ñating for service %s (%s) didÇot include %s\n",

804 
	`CSU£r_«me
(
pCSU£r
),

805 
	`CSLabñ_gëR©ögName
(
pCSLabñ
),

806 
	`CSLabñ_gëSîvi˚Name
(
pCSLabñ
),

807 
u£rSå
, 
œbñSå
);

808 
	`HT_FREE
(
u£rSå
);

809 
	`HT_FREE
(
œbñSå
);

810 
	`HT_FREE
(
™ch‹Så
);

812  
di•osôi⁄
;

813 
CSEº‹_BUREAU_NONE
: 
mesg
="label bureau wasÇot contacted"; ;

814 
CSEº‹_RATING_VALUE
: 
mesg
="value"; ;

815 
CSEº‹_RATING_MISSING
: 
mesg
="ratingÇot found"; ;

816 
CSEº‹_SINGLELABEL_MISSING
: 
mesg
="no single-labels found"; ;

817 
CSEº‹_SERVICE_MISSING
: 
mesg
="serviceÇotávailable";;

818 
CSEº‹_SERVICE_NONE
: 
mesg
="no servicesávailable for document"; ;

819 
CSEº‹_RATING_NONE
: 
mesg
="noÑatings iná service"; ;

820 
CSEº‹_BAD_DATE
: 
mesg
="labels were out of date"; ;

821 :
	`HTPröt
("PICSCÆlback: oddÉº‹ code: %d\n", 
di•osôi⁄
);  disposition;

823 
	`OuçutD©a
(
lm
->
pVõw
, "PICS dißŒowed documít: %s\n", 
mesg
);

824  
di•osôi⁄
;

825 
	}
}

840 
PRIVATE
 
	$∑r£_comm™d
 (* 
choi˚
, 
SOCKET
 
s
, 
HTReque°
 *
ªq
, 
HTEvítTy≥
 
ty≥
)

842 * 
the_choi˚
=
NULL
;

843 * 
tokí
=
NULL
;

844 * 
this_comm™d
;

845 * 
√xt_w‹d
;

846 * 
Ÿhî_w‹ds
;

847 
BOOL
 
is_ödex
 = 
	`HTAnch‹_isIndex
(
HTMaöAnch‹
);

848 
BOOL
 
found
 = 
YES
;

849 
BOOL
 
OutSour˚
 = 
NO
;

850 
°©us
 = 
YES
;

851 
HTReque°
 * 
cur_ªq
 = 
NULL
;

852 
C⁄ãxt
 * 
cur_c⁄ãxt
 = 
NULL
;

853 
LöeMode
 * 
lm
 = 
NULL
;

855 
cur_ªq
 = 
ªq
;

856 
cur_c⁄ãxt
 = (
C⁄ãxt
 *Ë
	`HTReque°_c⁄ãxt
(
ªq
);

857 
lm
 = 
cur_c⁄ãxt
->lm;

859 
	`SåAŒocC›y
 (
the_choi˚
, 
choi˚
);

860 i‡(*
the_choi˚
 &&Åhe_choi˚[
	`°æí
(the_choice)-1] == '\n')

861 
the_choi˚
[
	`°æí
(the_choice)-1] = '\0';

863 
tokí
 = 
	`°πok
 (
choi˚
, " \t\n\r");

864 
this_comm™d
 = 
the_choi˚
;

865 i‡(
tokí
) {

866 
√xt_w‹d
 = 
	`°πok
 (
NULL
, " \t\n\r");

867 
Ÿhî_w‹ds
 = 
the_choi˚
 + (
√xt_w‹d
 - 
choi˚
);

870 
down
;

873 
lo›
:

874 
	`TOUPPER
(*
tokí
)) {

886 
ªf_num
;

887 
	`ssˇnf
(
tokí
,"%d",&
ªf_num
);

888 i‡(
ªf_num
>0 &&Ñef_num<=
	`HText_sour˚Anch‹s
(
HTMaöText
)) {

889 
HTChûdAnch‹
 *
sour˚
 = 
	`HText_chûdNumbî
(
HTMaöText
, 
ªf_num
);

890 i‡(
sour˚
) {

891 
HTLök
 * 
lök
 = 
	`HTAnch‹_maöLök
((
HTAnch‹
 *Ë
sour˚
);

892 
HTAnch‹
 * 
de°ö©i⁄
 = 
	`HTLök_de°ö©i⁄
(
lök
);

893 
ªq
 = 
	`Thªad_√w
(
lm
, 
YES
, 
LM_UPDATE
);

896 
	`HTReque°_£tP¨ít
(
ªq
, 
	`HTAnch‹_∑ª¡
((
HTAnch‹
*)
sour˚
));

897 
	`HTLﬂdAnch‹
(
de°ö©i⁄
, 
ªq
);

899 
°©us
 = 
NO
;

902 i‡(
SHOW_MSG
)

903 
	`HTPröt
("Warning: Invalid Reference Number: (%d)\n",

904 
ªf_num
);

910 i‡(
	`CHECK_INPUT
("BACK", 
tokí
)) {

911 i‡(
	`HTHi°‹y_ˇnBackåack
(
lm
->
hi°‹y
)) {

912 
ªq
 = 
	`Thªad_√w
(
lm
, 
YES
, 
LM_NO_UPDATE
);

913 
°©us
 = 
	`HTLﬂdAnch‹
(
	`HTHi°‹y_back
(
lm
->
hi°‹y
), 
ªq
);

915 
	`OuçutD©a
(
lm
->
pVõw
, "\nThis isÅhe first document in historyÜist\n");

917 } i‡(
	`CHECK_INPUT
("BOTTOM", 
tokí
)) {

918 
	`HText_s¸ﬁlBŸtom
(
HTMaöText
);

919 } i‡(
	`CHECK_INPUT
("BYE", 
tokí
)) {

920 
	`HTNë_kûlAŒ
();

921 
°©us
 = 
NO
;

923 
found
 = 
NO
;

927 #ifde‡
HAVE_CHDIR


928 i‡(
	`CHECK_INPUT
("CD", 
tokí
)) {

929 
lcd
;

932 i‡(
	`CHECK_INPUT
("CLEAR", 
tokí
)) {

933 
	`HTHi°‹y_ªmoveFrom
(
lm
->
hi°‹y
, 1);

935 
found
 = 
NO
;

939 i‡(
	`CHECK_INPUT
("DELETE", 
tokí
)) {

940 
°©us
 = 
	`DñëeAnch‹
(
lm
, 
ªq
);

941 } i‡(
	`CHECK_INPUT
("DOWN", 
tokí
)) {

942 
down
:

943 i‡(
	`HText_ˇnS¸ﬁlDown
(
HTMaöText
))

944 
	`HText_s¸ﬁlDown
(
HTMaöText
);

946 
found
 = 
NO
;

950 i‡(
	`CHECK_INPUT
("EDIT", 
tokí
)) {

951 
°©us
 = 
	`PutAnch‹
(
lm
, 
ªq
);

952 } i‡(
	`CHECK_INPUT
("EXIT", 
tokí
)) {

953 
	`HTNë_kûlAŒ
();

954 
°©us
 = 
NO
;

956 
found
 = 
NO
;

960 i‡(
is_ödex
 && 
	`CHECK_INPUT
("FIND", 
tokí
)) {

961 
föd
:

963 i‡(
√xt_w‹d
) {

964 
ªq
 = 
	`Thªad_√w
(
lm
, 
YES
, 
LM_UPDATE
);

965 
°©us
 = 
	`HTSórchSåög
(
Ÿhî_w‹ds
,

966 (
HTAnch‹
 *Ë
HTMaöAnch‹
, 
ªq
);

969 } i‡(
	`CHECK_INPUT
("FLUSH", 
tokí
)) {

970 i‡(
	`c⁄fúm
(
ªq
, "Flush Pîsi°íàCache?"Ë=
YES
)

971 
	`HTCache_ÊushAŒ
();

973 } i‡(
	`CHECK_INPUT
("FORWARD", 
tokí
)) {

974 i‡(
	`HTHi°‹y_ˇnF‹w¨d
(
lm
->
hi°‹y
)) {

975 
ªq
 = 
	`Thªad_√w
(
lm
, 
YES
, 
LM_NO_UPDATE
);

976 
°©us
 = 
	`HTLﬂdAnch‹
(
	`HTHi°‹y_f‹w¨d
(
lm
->
hi°‹y
), 
ªq
);

978 
	`OuçutD©a
(
lm
->
pVõw
, "\nThis isÅheÜast document in historyÜist.\n");

981 
found
 = 
NO
;

985 i‡(
	`CHECK_INPUT
("GOTO", 
tokí
)) {

986 i‡(
√xt_w‹d
)

987 
°©us
 = 
	`LöeMode_lﬂd
(
lm
, 
HTMaöAnch‹
, 
√xt_w‹d
, 
NO
, &
ªq
);

989 
found
 = 
NO
;

993 
°©us
 = 
	`LöeMode_lﬂd
(
lm
, 
HTMaöAnch‹
, 
C_HELP
, 
YES
, &
ªq
);

997 i‡(
	`CHECK_INPUT
("HELP", 
tokí
)) {

998 
°©us
 = 
	`LöeMode_lﬂd
(
lm
, 
HTMaöAnch‹
, 
C_HELP
, 
YES
, &
ªq
);

999 } i‡(
	`CHECK_INPUT
("HOME", 
tokí
)) {

1000 i‡(!
	`HTHi°‹y_ˇnBackåack
(
lm
->
hi°‹y
)) {

1001 
	`HText_s¸ﬁlT›
(
HTMaöText
);

1003 
ªq
 = 
	`Thªad_√w
(
lm
, 
YES
, 
LM_NO_UPDATE
);

1004 
°©us
 = 
	`HTLﬂdAnch‹
(
	`HTHi°‹y_föd
(
lm
->
hi°‹y
, 1), 
ªq
);

1007 
found
 = 
NO
;

1011 i‡(
is_ödex
 && 
	`CHECK_INPUT
("KEYWORDS", 
tokí
)) {

1012 
föd
;

1014 
found
 = 
NO
;

1018 i‡(
	`CHECK_INPUT
("LIST", 
tokí
)) {

1019 
	`Re„ªn˚_Li°
(
lm
, !
OutSour˚
);

1021 #ifde‡
HAVE_CHDIR


1022 i‡(
	`CHECK_INPUT
 ("LCD", 
tokí
)) {

1023 
lcd
:

1024 i‡(!
√xt_w‹d
) {

1025 
	`OuçutD©a
(
lm
->
pVõw
, "\nName ofÅheÇewÜocal directory missing.\n");

1026 } i‡(
	`chdú
 (
√xt_w‹d
)) {

1027 
	`OuçutD©a
(
lm
->
pVõw
, "\n ");

1028 
	`≥º‹
 (
√xt_w‹d
);

1030 #ifde‡
HAVE_GETCWD


1031 
	`OuçutD©a
(
lm
->
pVõw
, "\nLocal directory isÇow:\n %s\n",

1032 
	`gëcwd
 (
choi˚
, (choice)));

1034 #ifde‡
HAVE_GETWD


1035 
	`OuçutD©a
(
lm
->
pVõw
, "\nLocal directory isÇow:\n %s\n",

1036 (*Ë
	`gëwd
 (
choi˚
));

1039 i‡(
SHOW_MSG
)

1040 
	`HTPröt
("ThisÖlatform doesn't support getwd or getcwd\n");

1046 i‡(
	`CHECK_INPUT
("LUSER", 
tokí
)) {

1047 i‡(
√xt_w‹d
) {

1048 
	`LﬂdPICSU£r
(
lm
, 
√xt_w‹d
);

1050 
	`HTPröt
("URLÇeeded\n");

1053 
found
 = 
NO
;

1057 i‡(
	`CHECK_INPUT
("MANUAL", 
tokí
)) {

1058 
°©us
 = 
	`LöeMode_lﬂd
(
lm
, 
HTMaöAnch‹
, 
MANUAL
, 
YES
, &
ªq
);

1060 
found
 = 
NO
;

1064 i‡(
	`CHECK_INPUT
("OPTIONS", 
tokí
)) {

1065 
ªq
 = 
	`Thªad_√w
(
lm
, 
YES
, 
LM_NO_UPDATE
);

1066 
°©us
 = 
	`HTO±i⁄sAnch‹
((
HTAnch‹
*)

1067 (
HTMaöAnch‹
 ? HTMaöAnch‹:
lm
->
™ch‹
),

1068 
ªq
);

1070 
found
 = 
NO
;

1074 i‡(
	`CHECK_INPUT
("POST", 
tokí
)) {

1075 
°©us
 = 
	`PutAnch‹
(
lm
, 
ªq
);

1078 #ifde‡
HAVE_SYSTEM


1079 i‡(!
lm
->
ho°
 && 
	`CHECK_INPUT
("PRINT", 
tokí
)) {

1080 * 
addªss
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
HTMaöAnch‹
);

1081 * 
comm™d
;

1082 * 
tm∂©e
 = (*Ë
	`gëív
("WWW_PRINT_COMMAND");

1083 
ªsu…
;

1085 i‡(!
tm∂©e
)Åmplate = "www -n -na -p66 '%s' |Üpr";

1086 i‡((
comm™d
 = (*Ë
	`HT_MALLOC
(
	`°æí
(
addªss
)+°æí(
tm∂©e
)+20)Ë=
NULL
)

1087 
	`HT_OUTOFMEM
("command");

1088 
	`•rötf
(
comm™d
, 
tm∂©e
, 
addªss
);

1089 
ªsu…
 = 
	`sy°em
(
comm™d
);

1090 
	`HT_FREE
(
addªss
);

1091 
	`HT_FREE
(
comm™d
);

1092 i‡(
ªsu…
Ë
	`OuçutD©a
(
lm
->
pVõw
, " %s\¿Ñëu∫†%d\n", 
comm™d
,Ñesult);

1097 #ifde‡
SLAVE_PRINTER


1098 
	#SLAVE_PRINTER_ON
 "\033\133\065\151"

	)

1099 
	#SLAVE_PRINTER_OFF
 "\033\133\064\151"

	)

1101 i‡(
	`CHECK_INPUT
("PS", 
tokí
)) {

1102 
	`OuçutD©a
(
lm
->
pVõw
, "%s",
SLAVE_PRINTER_ON
);

1103 
	`OuçutD©a
(
lm
->
pVõw
, "\f");

1104 
	`HText_s¸ﬁlT›
(
HTMaöText
);

1105 
	`HText_ˇnS¸ﬁlDown
(
HTMaöText
)) {

1106 
	`HText_s¸ﬁlDown
(
HTMaöText
);

1108 
	`OuçutD©a
(
lm
->
pVõw
, "\f");

1109 
	`OuçutD©a
(
lm
->
pVõw
, "%s",
SLAVE_PRINTER_OFF
);

1110 
	`HText_s¸ﬁlT›
(
HTMaöText
);

1113 i‡(
	`CHECK_INPUT
("PUT", 
tokí
)) {

1114 
°©us
 = 
	`PutAnch‹
(
lm
, 
ªq
);

1116 
found
 = 
NO
;

1120 i‡(
	`CHECK_INPUT
("QUIT", 
tokí
)) {

1126 i‡(
lm
->
ho°
 && (
	`°rˇ£comp
(
tokí
, "quit") != 0) ) {

1127 
	`OuçutD©a
(
lm
->
pVõw
, "\n PleaseÅype \"quit\" in fullÅoÜeave www.\n");

1129 
	`HTNë_kûlAŒ
();

1130 
°©us
 = 
NO
;

1133 
found
 = 
NO
;

1137 i‡(
	`CHECK_INPUT
("RECALL", 
tokí
)) {

1138 i‡(
	`HTHi°‹y_cou¡
(
lm
->
hi°‹y
) <= 1) {

1139 
	`OuçutD©a
(
lm
->
pVõw
, "\n No other documentsÅoÑecall.\n");

1143 i‡(
√xt_w‹d
) {

1144 
˙t
;

1145 i‡((
˙t
 = 
	`©oi
(
√xt_w‹d
)) > 0) {

1146 
ªq
 = 
	`Thªad_√w
(
lm
, 
YES
, 
LM_NO_UPDATE
);

1147 
°©us
 = 
	`HTLﬂdAnch‹
(
	`HTHi°‹y_föd
(
lm
->
hi°‹y
,
˙t
), 
ªq
);

1149 i‡(
SHOW_MSG
)

1150 
	`HTPröt
("Bad comm™d (%s), f‹Üi° o‡comm™d†ty≥ hñp\n", 
this_comm™d
);

1153 
	`Hi°‹y_Li°
(
lm
);

1156 } i‡(
	`CHECK_INPUT
("REFRESH", 
tokí
)) {

1157 
	`HText_£tSèÀ
(
HTMaöText
);

1158 
	`HText_ª‰esh
(
HTMaöText
);

1160 } i‡(
	`CHECK_INPUT
("REVALIDATE", 
tokí
)) {

1161 
ªq
 = 
	`Thªad_√w
(
lm
, 
YES
, 
LM_NO_UPDATE
);

1166 
	`HTReque°_£tRñﬂdMode
(
ªq
, 
HT_CACHE_END_VALIDATE
);

1167 
°©us
 = 
	`HTLﬂdAnch‹
((
HTAnch‹
*Ë(
HTMaöAnch‹
 ? HTMainAnchor :

1168 
lm
->
™ch‹
), 
ªq
);

1169 } i‡(
	`CHECK_INPUT
("RELOAD", 
tokí
)) {

1170 
ªq
 = 
	`Thªad_√w
(
lm
, 
YES
, 
LM_NO_UPDATE
);

1175 
	`HTReque°_£tRñﬂdMode
(
ªq
, 
HT_CACHE_FLUSH
);

1176 
°©us
 = 
	`HTLﬂdAnch‹
((
HTAnch‹
*Ë(
HTMaöAnch‹
 ? HTMainAnchor :

1177 
lm
->
™ch‹
), 
ªq
);

1179 
found
 = 
NO
;

1183 i‡(
	`CHECK_INPUT
("SOURCE", 
tokí
)) {

1184 i‡(
√xt_w‹d
) {

1185 
OutSour˚
 = 
YES
;

1186 
tokí
 = 
√xt_w‹d
;

1187 
√xt_w‹d
 = 
	`°πok
 (
NULL
, " \t\n\r");

1188 
this_comm™d
 = 
the_choi˚
 + (
tokí
 - 
choi˚
);

1189 
Ÿhî_w‹ds
 = 
the_choi˚
 + (
√xt_w‹d
 - 
choi˚
);

1190 
lo›
;

1192 } i‡(
	`CHECK_INPUT
("SET", 
tokí
)) {

1193 
HTLi°
 * 
ruÀs
 = 
	`HTRuÀ_globÆ
();

1194 
	`HTRuÀ_∑r£Löe
(
ruÀs
, 
Ÿhî_w‹ds
);

1196 
found
 = 
NO
;

1200 i‡(
	`CHECK_INPUT
("TOP", 
tokí
)) {

1201 
	`HText_s¸ﬁlT›
(
HTMaöText
);

1203 
found
 = 
NO
;

1207 i‡(
	`CHECK_INPUT
("UP", 
tokí
)) {

1208 
	`HText_s¸ﬁlUp
(
HTMaöText
);

1209 } i‡(
	`CHECK_INPUT
("USER", 
tokí
)) {

1210 i‡(
√xt_w‹d
) {

1211 i‡(!
	`°rˇ£comp
(
√xt_w‹d
, "?")) {

1212 
	`ShowPICSU£rs
(
lm
);

1213 
	`SëPICSU£r
(
lm
, 0);

1215 
	`SëPICSU£r
(
lm
, 
√xt_w‹d
);

1218 
	`SëPICSU£r
(
lm
, 0);

1221 
found
 = 
NO
;

1225 i‡(
	`CHECK_INPUT
("VALIDATE", 
tokí
)) {

1226 
ªq
 = 
	`Thªad_√w
(
lm
, 
YES
, 
LM_NO_UPDATE
);

1231 
	`HTReque°_£tRñﬂdMode
(
ªq
, 
HT_CACHE_VALIDATE
);

1232 
°©us
 = 
	`HTLﬂdAnch‹
((
HTAnch‹
*Ë(
HTMaöAnch‹
 ? HTMainAnchor :

1233 
lm
->
™ch‹
), 
ªq
);

1234 } i‡(
	`CHECK_INPUT
("VERBOSE", 
tokí
)) {

1235 
WWWTRACE
 = WWWTRACE ? 0 : 
lm
->
åa˚
;

1236 
	`OuçutD©a
(
lm
->
pVõw
, "\¿ Vîbo£ modê%s.\n", 
WWWTRACE
 ? "ON":"OFF");

1237 } i‡(
	`CHECK_INPUT
("VERSION", 
tokí
)) {

1238 
	`Vîsi⁄Info
(
lm
);

1240 
found
 = 
NO
;

1244 i‡(
	`CHECK_INPUT
("WHICH", 
tokí
)) {

1245 
HTVõw
 * 
pVõw
 = 
lm
 ?Üm->pVõw : 
NULL
;

1246 * 
cuºít_addªss
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
HTMaöAnch‹
);

1247 c⁄° * 
tôÀ
 = 
	`HTAnch‹_tôÀ
(
HTMaöAnch‹
);

1248 i‡(
tôÀ
)

1249 
	`OuçutD©a
(
pVõw
, "\n\nYouáreÑeading\n\t`%s\'\nwitháddress\n\t%s\n\n",

1250 
tôÀ
, 
cuºít_addªss
);

1252 
found
 = 
NO
;

1256 
	`HText_£tSèÀ
(
HTMaöText
);

1257 
	`HText_ª‰esh
(
HTMaöText
);

1258 
	`HTNë_kûlAŒ
();

1262 i‡(!
lm
->
ho°
) {

1263 
HText
 *
curText
 = 
HTMaöText
;

1264 
ªq
 = 
	`Thªad_√w
(
lm
, 
NO
, 
LM_NO_UPDATE
);

1265 
	`HTReque°_£tRñﬂdMode
(
ªq
, 
HT_CACHE_FLUSH_MEM
);

1266 i‡(
OutSour˚
Ë
	`HTReque°_£tOuçutF‹m©
(
ªq
, 
WWW_SOURCE
);

1267 
	`SaveOuçutSåóm
(
ªq
, 
tokí
, 
√xt_w‹d
);

1268 
	`HText_£À˘
(
curText
);

1272 #ifde‡
GOT_PIPE


1274 i‡(!
lm
->
ho°
) {

1275 * 
addªss
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
HTMaöAnch‹
);

1276 * 
comm™d
;

1277 
ªsu…
;

1278 i‡((
comm™d
 = (*Ë
	`HT_MALLOC
(
	`°æí
(
addªss
Ë+°æí(
this_comm™d
)+30)Ë=
NULL
)

1279 
	`HT_OUTOFMEM
("command");

1280 
	`•rötf
(
comm™d
, "www %s \"%s\" %s",

1281 
OutSour˚
 ? "-sour˚" : "-¿-« -p", 
addªss
,
this_comm™d
);

1282 
	`OuçutD©a
(
lm
->
pVõw
, "Comm™d: %s\n", 
comm™d
);

1283 
ªsu…
 = 
	`sy°em
(
comm™d
);

1284 i‡(
ªsu…
Ë
	`OuçutD©a
(
lm
->
pVõw
, " %†Ñëu∫†%d\n", 
comm™d
,Ñesult);

1285 
	`HT_FREE
(
comm™d
);

1286 
	`HT_FREE
(
addªss
);

1291 #ifde‡
HAVE_SYSTEM


1293 i‡(!
lm
->
ho°
) {

1294 
ªsu…
;

1295 i‡(
SHOW_MSG
Ë
	`HTPröt
("Executög `%s\'\n", 
this_comm™d
);

1296 
ªsu…
 = 
	`sy°em
(
	`°rchr
(
this_comm™d
, '!') + 1);

1297 i‡(
ªsu…
Ë
	`OuçutD©a
(
lm
->
pVõw
, " %sÑeturns %d\n",

1298 
	`°rchr
(
this_comm™d
, '!'Ë+ 1, 
ªsu…
);

1303 
found
 = 
NO
;

1307 i‡(!
found
) {

1308 i‡(
is_ödex
 && *
tokí
) {

1309 
√xt_w‹d
 = 
Ÿhî_w‹ds
 = 
this_comm™d
;

1310 
found
 = 
YES
;

1311 
föd
;

1313 i‡(
SHOW_MSG
)

1314 
	`HTPröt
("Bad comm™d (%s), f‹Üi° o‡comm™d†ty≥ hñp\n", 
this_comm™d
);

1317 
	`MakeComm™dLöe
(
lm
, 
is_ödex
);

1318 
	`HT_FREE
(
the_choi˚
);

1324 i‡(
cur_ªq
 =
ªq
)

1325 
cur_c⁄ãxt
->
°©e
 |
LM_NO_UPDATE
;

1327 
cur_c⁄ãxt
->
°©e
 |
LM_INACTIVE
;

1328  (
°©us
==
YES
Ë? 
HT_OK
 : 
HT_ERROR
;

1329 
	}
}

1336 #ifde‡
WWW_WIN_CONSOLE


1337 
PUBLIC
 
BOOL
 
	$ªadC⁄sﬁe
(
HANDLE
 
c⁄In
, * 
buf
, 
Àn
, * 
pRed
)

1339 
DWORD
 
ªc‹dIndex
, 
buf„rIndex
, 
toRód
, 
ªd
;

1340 
PINPUT_RECORD
 
pI≈ut
;

1343 
	`GëNumbîOfC⁄sﬁeI≈utEvíts
(
c⁄In
, &
toRód
);

1344 i‡(
Àn
 < ()
toRód
)

1345 
toRód
 = 
Àn
;

1346 i‡((
pI≈ut
 = (
PINPUT_RECORD
Ë
	`HT_MALLOC
(
toRód
 * (
INPUT_RECORD
))Ë=
NULL
)

1347  (
FALSE
);

1348 
	`RódC⁄sﬁeI≈ut
(
c⁄In
, 
pI≈ut
, 
toRód
, &
ªd
);

1350 
ªc‹dIndex
 = 
buf„rIndex
 = 0;Ñec‹dIndex < 
ªd
;ÑecordIndex++) {

1353 
KEY_EVENT_RECORD
 
keyEvít
 = 
pI≈ut
[
ªc‹dIndex
].
Evít
.
KeyEvít
;

1354 i‡(
pI≈ut
[
ªc‹dIndex
].
EvítTy≥
 =
KEY_EVENT
 && 
keyEvít
.
bKeyDown
) {

1355 
keyEvít
.
wRïótCou¡
 && keyEvít.
uCh¨
.
AsciiCh¨
) {

1357 
buf
[
buf„rIndex
] = 
keyEvít
.
uCh¨
.
AsciiCh¨
;

1358 i‡(
buf
[
buf„rIndex
] == '\r')

1359 
buf
[
buf„rIndex
] = '\n';

1360 i‡(
buf
[
buf„rIndex
] == '\b')

1361 
	`OuçutD©a
(
lm
->
pVõw
, "\b ");

1362 
	`OuçutD©a
(
lm
->
pVõw
, "%c", 
buf
[
buf„rIndex
]);

1363 
buf„rIndex
++;

1364 
keyEvít
.
wRïótCou¡
--;

1368 i‡(
pI≈ut
[
ªc‹dIndex
].
EvítTy≥
 =
KEY_EVENT
 &&ÖI≈ut[ªc‹dIndex].
Evít
.
KeyEvít
.
bKeyDown
) {

1369 
pI≈ut
[
ªc‹dIndex
].
Evít
.
KeyEvít
.
wRïótCou¡
 &&ÖI≈ut[ªc‹dIndex].Evít.KeyEvít.
uCh¨
.
AsciiCh¨
) {

1371 
buf
[
buf„rIndex
] = 
pI≈ut
[
ªc‹dIndex
].
Evít
.
KeyEvít
.
uCh¨
.
AsciiCh¨
;

1372 i‡(
buf
[
buf„rIndex
] == '\r')

1373 
buf
[
buf„rIndex
] = '\n';

1374 i‡(
buf
[
buf„rIndex
] == '\b')

1375 
	`OuçutD©a
(
lm
->
pVõw
, "\b ");

1376 
	`OuçutD©a
(
lm
->
pVõw
, "%c", 
buf
[
buf„rIndex
]);

1377 
buf„rIndex
++;

1378 
pI≈ut
[
ªc‹dIndex
].
Evít
.
KeyEvít
.
wRïótCou¡
--;

1385 
	`HT_FREE
(
pI≈ut
);

1386 *
pRed
 = 
buf„rIndex
;

1387  (
TRUE
);

1388 
	}
}

1396 
PUBLIC
 
	$buf„rI≈ut
 (* 
buf
, 
Àn
, 
SOCKET
 
s
, 
HTReque°
 * 
ªq
, 
HTEvítTy≥
 
ty≥
)

1398 
°©
[
RESPONSE_LENGTH
];

1399 
iSèt
 = 0;

1400 
ign‹eNext
 = 0;

1401 
iBuf
;

1402 
iBuf
 = 0; iBu‡< 
Àn
; iBuf++) {

1403 
buf
[
iBuf
]) {

1406 i‡(
ign‹eNext
)

1407 
ign‹eNext
 = 0;

1409 
ªt
;

1410 
°©
[
iSèt
] = 0;

1411 
iSèt
 = 0;

1412 i‡((
ªt
 = (*
PI≈utP¨£r
)(
°©
, 
s
, 
ªq
, 
ty≥
)Ë!
HT_OK
)

1413  (
ªt
);

1417 i‡(
iSèt
)

1418 
iSèt
--;

1421 i‡(!
ign‹eNext
)

1422 
°©
[
iSèt
++] = 
buf
[
iBuf
];

1424 i‡(
iSèt
 =(
°©
)) {

1425 
	`HTPröt
("Read Console... BUFFER OVERRUN\n");

1426 
iSèt
 = 0;

1427 
ign‹eNext
 = 1;

1430  (
HT_OK
);

1431 
	}
}

1437 
PRIVATE
 
	$timeout_h™dÀr
 (
SOCKET
 
s
, * 
∑øm
, 
HTEvítTy≥
 
ty≥
)

1439 i‡(!
	`HTAÀπ_öãø˘ive
()) {

1440 
HTReque°
 * 
ªq
 = (HTReque° *Ë
∑øm
;

1441 
C⁄ãxt
 * 
c⁄ãxt
 = (C⁄ãxà*Ë
	`HTReque°_c⁄ãxt
(
ªq
);

1442 
LöeMode
 * 
lm
 = 
c⁄ãxt
->lm;

1443 i‡(
SHOW_MSG
Ë
	`HTPröt
("RequestÅimed out");

1444 
	`HTNë_kûlAŒ
();

1445 
	`CÀ™up
(
lm
, -1);

1447 i‡(
	`HTNë_cou¡
() > 0)

1448 i‡(
SHOW_MSG
Ë
	`HTPröt
(".");

1450 
	}
}

1452 
PRIVATE
 
	$sˇn_comm™d
 (
SOCKET
 
s
, * 
∑øm
, 
HTEvítTy≥
 
ty≥
)

1454 
HTReque°
 * 
ªq
 = (HTReque° *)
∑øm
;

1456 
buf
[
RESPONSE_LENGTH
];

1457 #ifde‡
WWW_MSWINDOWS


1458 
ªd
;

1459 
ªt
;

1463 i‡(
ty≥
 =
HTEvít_TIMEOUT
Ë 
	`timeout_h™dÀr
 (
s
, 
∑øm
,Åype);

1465 #ifde‡
WWW_MSWINDOWS


1467 #ifde‡
WWW_WIN_CONSOLE


1468 i‡(!
	`ªadC⁄sﬁe
((
HANDLE
)
s
, 
buf
, (buf), &
ªd
)) {

1469 
	`HTTRACE
(
PROT_TRACE
, "Read Console... READ ERROR\n");

1470  
HT_ERROR
;

1473 i‡(!
ªd
Ë (
HT_OK
);

1474 
ªt
 = 
	`buf„rI≈ut
(
buf
, 
ªd
, 
s
, 
ªq
, 
ty≥
);

1475 i‡(
ªt
 !
HT_OK
)  (ret);

1478 i‡(!
	`fgës
(
buf
, (buf), 
°dö
))

1479  
HT_ERROR
;

1480  ((*
PI≈utP¨£r
)(
buf
, 
s
, 
ªq
, 
ty≥
));

1482 
	}
}

1488 
PRIVATE
 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

1489 * 
∑øm
, 
°©us
)

1491 
C⁄ãxt
 * 
c⁄ãxt
 = (C⁄ãxà*Ë
	`HTReque°_c⁄ãxt
(
ªque°
);

1492 
LöeMode
 * 
lm
;

1493 
BOOL
 
is_ödex
;

1495 i‡(!
c⁄ãxt
)

1496  
HT_OK
;

1497 
lm
 = 
c⁄ãxt
->lm;

1498 i‡(
c⁄ãxt
->
°©e
 =
LM_IGNORE
Ë 
HT_OK
;

1499 i‡(
	`CSAµ_uƒegi°îReq
(
ªque°
Ë=
NO
 && 
lm
->
pCSU£r
)

1500 
	`HTPröt
("PICSÑequestÇot found\n");

1501 
is_ödex
 = 
	`HTAnch‹_isIndex
(
HTMaöAnch‹
);

1502 i‡(
°©us
 =
HT_LOADED
) {

1505 i‡(
	`HTAÀπ_öãø˘ive
()) {

1506 
	`HText_£tSèÀ
(
HTMaöText
);

1507 
	`MakeComm™dLöe
(
lm
, 
is_ödex
);

1509 i‡(
lm
->
Êags
 & 
LM_REFS
Ë
	`Re„ªn˚_Li°
÷m, 
NO
);

1510 
	`CÀ™up
(
lm
, 0);

1514 i‡(
c⁄ãxt
->
°©e
 & 
LM_UPDATE
)

1515 
	`HTHi°‹y_ª∂a˚
(
lm
->
hi°‹y
, (
HTAnch‹
 *Ë
HTMaöAnch‹
);

1518 i‡(!
	`HText_ˇnS¸ﬁlDown
(
HTMaöText
) &&

1519 !
	`HTAnch‹_hasChûdªn
(
HTMaöAnch‹
Ë&& !
is_ödex
 &&

1520 (!
	`HTHi°‹y_ˇnBackåack
(
lm
->
hi°‹y
))) {

1521  
HT_OK
;

1529 i‡(
	`HTAÀπ_öãø˘ive
()) {

1531 
	`MakeComm™dLöe
(
lm
, 
is_ödex
);

1533 i‡(
lm
->
Êags
 & 
LM_REFS
Ë
	`Re„ªn˚_Li°
÷m, 
NO
);

1534 
	`CÀ™up
(
lm
, 0);

1538 
c⁄ãxt
->
°©e
 |
LM_DONE
;

1539 
	`Thªad_˛ónup
(
lm
);

1540 i‡(!
	`HTAÀπ_öãø˘ive
()Ë
	`CÀ™up
(
lm
, -1);

1541  
HT_OK
;

1542 
	}
}

1553 
PRIVATE
 
	$Mem‹yCacheFûãr
 (
HTReque°
 * 
ªque°
, * 
∑øm
, 
mode
)

1555 
HTRñﬂd
 
vÆid©i⁄
 = 
	`HTReque°_ªlﬂdMode
(
ªque°
);

1556 
HTP¨ítAnch‹
 * 
™ch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

1557 * 
documít
 = 
	`HTAnch‹_documít
(
™ch‹
);

1562 i‡(
	`HTReque°_mëhod
(
ªque°
Ë!
METHOD_GET
) {

1563 
	`HTTRACE
(
APP_TRACE
, "Mem Cache... We only check GET methods\n");

1564  
HT_OK
;

1572 i‡(!
documít
 || 
vÆid©i⁄
 > 
HT_CACHE_FLUSH_MEM
) {

1573 
	`HTTRACE
(
APP_TRACE
, "Mem Cache... No fresh document...\n");

1574  
HT_OK
;

1582 i‡(
documít
 && 
vÆid©i⁄
 !
HT_CACHE_FLUSH_MEM
) {

1583 
HTP¨ítAnch‹
 * 
∑ª¡
 = 
	`HTReque°_™ch‹
(
ªque°
);

1584 
HTChûdAnch‹
 * 
chûd
 = 
	`HTReque°_chûdAnch‹
(
ªque°
);

1585 
HText
 * 
documít
 = 
	`HTAnch‹_documít
(
∑ª¡
);

1586 
	`HTTRACE
(
APP_TRACE
, "Mem Cache... Documíà%∞Æªady i¿mem‹y\n" 
_
 
documít
);

1592 i‡(
chûd
 && (
HTAnch‹
 *Ëchûd !(HTAnch‹ *Ë
∑ª¡
)

1593 
	`HText_£À˘Anch‹
(
documít
, 
chûd
);

1595 
	`HText_£À˘
(
documít
);

1596  
HT_LOADED
;

1598  
HT_OK
;

1599 
	}
}

1605 
	$maö
 (
¨gc
, ** 
¨gv
)

1607 
°©us
 = 0;

1608 
¨g
;

1609 
HTChunk
 * 
keyw‹ds
 = 
NULL
;

1610 
key˙t
 = 0;

1611 
HTReque°
 * 
ªque°
 = 
NULL
;

1612 
LöeMode
 * 
lm
;

1613 * 
picsU£r
 = 
NULL
;

1615 #i‚de‡
WWW_WIN_WINDOW


1616 
OUTPUT
 = 
°dout
;

1620 #ifde‡
GUSI


1621 
	`GUSISëup
(
GUSIwôhSIOUXSockës
);

1622 
	`GUSISëup
(
GUSIwôhI¡î√tSockës
);

1625 #ifde‡
__MWERKS__


1626 
	`InôGøf
((
På
Ë&
qd
.
theP‹t
);

1627 
	`InôF⁄ts
();

1628 
	`InôWödows
();

1629 
	`InôMíus
(); 
	`TEInô
();

1630 
	`InôDülogs
(
nû
);

1631 
	`InôCurs‹
();

1632 
SIOUXSëtögs
.
asktoßve⁄˛o£
 = 
Ál£
;

1633 
¨gc
=
	`ccomm™d
(&
¨gv
);

1637 #ifde‡
CYRILLIC


1638 
¨c
.
loˇÀ
=0;árc.
ícodög
=0;árc.
i_ícodög
=0; 
	`doöuŒ
();

1641 #ifde‡
HT_MEMLOG


1642 
	`HTMemLog_›í
(
DEFAULT_MEMLOG
, 8192, 
YES
);

1643 
	`HTTø˚D©a_£tCÆlback
(
HTMemLog_ˇŒback
);

1647 
	`HTProfûe_√wClõ¡
(
APP_NAME
, 
APP_VERSION
);

1650 
	`HTAÀπ_dñëeOpcode
(
HT_A_PROGRESS
);

1654 
HTLi°
 * 
c⁄vîãrs
 = 
	`HTF‹m©_c⁄vîsi⁄
();

1655 
	`HTMLInô
(
c⁄vîãrs
);

1659 
lm
 = 
	`LöeMode_√w
();

1660 
ªque°
 = 
	`Thªad_√w
(
lm
, 
NO
, 
LM_UPDATE
);

1663 
¨g
=1;árg<
¨gc
 ;árg++) {

1664 i‡(*
¨gv
[
¨g
] == '-') {

1667 i‡(
¨gv
[
¨g
][1] == '\0') {

1668 
lm
->
Êags
 |
LM_FILTER
;

1669 
	`HTAÀπ_£tI¡îa˘ive
(
NO
);

1672 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-n")) {

1673 
	`HTAÀπ_£tI¡îa˘ive
(
NO
);

1676 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-from")) {

1677 
lm
->
f‹m©
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

1678 
	`HTAtom_f‹
(
¨gv
[++
¨g
]Ë: 
WWW_HTML
;

1679 
	`HTAÀπ_£tI¡îa˘ive
(
NO
);

1682 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-to")) {

1683 
HTF‹m©
 
f‹m©
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

1684 
	`HTAtom_f‹
(
¨gv
[++
¨g
]Ë: 
DEFAULT_FORMAT
;

1685 
	`HTReque°_£tOuçutF‹m©
(
ªque°
, 
f‹m©
);

1686 
	`HTAÀπ_£tI¡îa˘ive
(
NO
);

1689 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-reformat")) {

1690 
	`HTReque°_£tOuçutF‹m©
(
ªque°
, 
WWW_HTML
);

1691 
lm
->
Êags
 |
LM_REFORMAT
;

1692 
	`HTAÀπ_£tI¡îa˘ive
(
NO
);

1695 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-list", 5)) {

1696 
lm
->
Êags
 |
LM_REFS
;

1697 
	`HTAÀπ_£tI¡îa˘ive
(
NO
);

1700 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-raw")) {

1701 
	`HTReque°_£tOuçutF‹m©
(
ªque°
, 
WWW_RAW
);

1702 
	`HTAÀπ_£tI¡îa˘ive
(
NO
);

1705 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-source")) {

1706 
	`HTReque°_£tOuçutF‹m©
(
ªque°
, 
WWW_SOURCE
);

1707 
	`HTAÀπ_£tI¡îa˘ive
(
NO
);

1710 } i‡(!
	`°rˇ£comp
(
¨gv
[
¨g
], "-head")) {

1711 
	`HTReque°_£tMëhod
(
ªque°
, 
METHOD_HEAD
);

1712 
	`HTReque°_£tOuçutF‹m©
(
ªque°
, 
WWW_MIME
);

1713 
	`HTAÀπ_£tI¡îa˘ive
(
NO
);

1716 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-o")) {

1717 
lm
->
ouçutfûe
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

1718 
¨gv
[++
¨g
] : 
DEFAULT_OUTPUT_FILE
;

1719 
	`HTAÀπ_£tI¡îa˘ive
(
NO
);

1722 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-version")) {

1723 
	`Vîsi⁄Info
(
lm
);

1724 
	`CÀ™up
(
lm
, 0);

1727 } i‡(!
	`°rcmp
(
¨gv
[
¨g
],"-?") || !strcmp(argv[arg],"-help")) {

1728 
lm
->
™ch‹
 = (
HTP¨ítAnch‹
 *Ë
	`HTAnch‹_födAddªss
(
L_HELP
);

1729 
key˙t
 = 1;

1731 #ifde‡
CYRILLIC


1734 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-koi2alt")) {

1735 
	`doü2k
(); 
	`OuçutD©a
(
lm
->
pVõw
, "Ahak2a!");

1739 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-p", 2)) {

1740 i‡(*(
¨gv
[
¨g
]+2)) {

1741 i‡(
	`ssˇnf
(
¨gv
[
¨g
]+2, "%d", &
HTS¸ìnHeight
) < 1)

1742 
HTS¸ìnHeight
 = -1;

1744 if(
HTS¸ìnHeight
 < 
MIN_SCREEN_HEIGHT
)

1745 
HTS¸ìnHeight
 = 
MIN_SCREEN_HEIGHT
;

1746 if(
HTS¸ìnHeight
 > 
MAX_SCREEN_HEIGHT
)

1747 
HTS¸ìnHeight
 = 
MAX_SCREEN_HEIGHT
;

1749 } i‡(
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') {

1750 i‡(
	`ssˇnf
(
¨gv
[++
¨g
], "%d", &
HTS¸ìnHeight
) < 1)

1751 
HTS¸ìnHeight
 = -1;

1753 if(
HTS¸ìnHeight
 < 
MIN_SCREEN_HEIGHT
)

1754 
HTS¸ìnHeight
 = 
MIN_SCREEN_HEIGHT
;

1755 if(
HTS¸ìnHeight
 > 
MAX_SCREEN_HEIGHT
)

1756 
HTS¸ìnHeight
 = 
MAX_SCREEN_HEIGHT
;

1761 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-w", 2)) {

1762 i‡(*(
¨gv
[
¨g
]+2)) {

1763 i‡(
	`ssˇnf
(
¨gv
[
¨g
]+2, "%d", &
HTS¸ìnWidth
) < 1)

1764 
HTS¸ìnWidth
 = 
SCREEN_WIDTH
;

1765 } i‡(
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') {

1766 i‡(
	`ssˇnf
(
¨gv
[++
¨g
], "%d", &
HTS¸ìnWidth
) < 1)

1767 
HTS¸ìnWidth
 = 
SCREEN_WIDTH
;

1769 if(
HTS¸ìnWidth
 < 
MIN_SCREEN_WIDTH
)

1770 
HTS¸ìnWidth
 = 
MIN_SCREEN_WIDTH
;

1771 if(
HTS¸ìnWidth
 > 
MAX_SCREEN_WIDTH
)

1772 
HTS¸ìnWidth
 = 
MAX_SCREEN_WIDTH
;

1775 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-h")) {

1776 i‡(
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') {

1777 
lm
->
ho°
 = 
¨gv
[++
¨g
];

1778 
	`HTLib_£tSecuª
(
YES
);

1782 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-l")) {

1783 
lm
->
logfûe
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

1784 
¨gv
[++
¨g
] : 
DEFAULT_LOG_FILE
;

1787 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-r")) {

1788 
lm
->
ruÀs
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

1789 
¨gv
[++
¨g
] : 
DEFAULT_RULE_FILE
;

1792 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-timeout")) {

1793 
timeout
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

1794 
	`©oi
(
¨gv
[++
¨g
]) : -1;

1795 i‡(
timeout
 > 0Ë
lm
->
timî
 =Åimeout;

1798 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-u")) {

1799 
picsU£r
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

1800 
¨gv
[++
¨g
] : "user";

1801 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-unp")) {

1802 
lm
->
noPICSPassw‹ds
 = 1;

1805 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-ul")) {

1806 
picsU£rLi°
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

1807 
¨gv
[++
¨g
] : "users.url";

1810 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-ul")) {

1811 
lm
->
u£rLi°
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

1812 
¨gv
[++
¨g
] : 
DEFAULT_USERLIST_FILE
;

1815 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-pics")) {

1816 
lm
->
u£rLi°
 = 
DEFAULT_USERLIST_FILE
;

1819 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-single")) {

1820 
	`HTReque°_£tPªem±ive
(
ªque°
, 
YES
);

1821 
lm
->
Êags
 |
LM_PREEMTIVE
;

1824 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-discon", 7)) {

1825 
	`HTCacheMode_£tDisc⁄√˘ed
(
HT_DISCONNECT_NORMAL
);

1828 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-nocache", 8)) {

1829 
	`HTCacheMode_£tE«bÀd
(
NO
);

1832 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-x", 2)) {

1833 *
p
 = 
¨gv
[
¨g
]+2;

1834 ;*
p
;p++) {

1835 
¨gv
[
¨g
][2]) {

1837 
	`HTCacheMode_£tExpúes
(
HT_EXPIRES_IGNORE
);

1840 
	`HTCacheMode_£tExpúes
(
HT_EXPIRES_NOTIFY
);

1843 
	`HTCacheMode_£tExpúes
(
HT_EXPIRES_AUTO
);

1846 i‡(
SHOW_MSG
)

1847 
	`HTPröt
("BadÖ¨amëî (%sËf‹ o±i⁄ -x\n", 
¨gv
[
¨g
]);

1853 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-a")) {

1854 i‡(
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-')

1855 
íd_ª„ªn˚
 = 
¨gv
[++
¨g
];

1858 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-ar")) {

1859 i‡(
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-')

1860 
ª„ªn˚_m¨k
 = 
¨gv
[++
¨g
];

1863 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-as")) {

1864 i‡(
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-')

1865 
°¨t_ª„ªn˚
 = 
¨gv
[++
¨g
];

1868 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-na")) {

1869 
di•œy_™ch‹s
 = 
NO
;

1871 #i‚de‡
NO_DIR_OPTIONS


1872 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-d", 2)) {

1873 *
p
 = 
¨gv
[
¨g
]+2;

1874 ;*
p
;p++) {

1875 
¨gv
[
¨g
][2]) {

1876 'r':
	`HTFûe_£tDúRódme
(
HT_DIR_README_NONE
); ;

1877 't':
	`HTFûe_£tDúRódme
(
HT_DIR_README_TOP
); ;

1878 'b':
	`HTFûe_£tDúRódme
(
HT_DIR_README_BOTTOM
);;

1879 'n':
	`HTFûe_£tDúAc˚ss
(
HT_DIR_FORBID
); ;

1880 's':
	`HTFûe_£tDúAc˚ss
(
HT_DIR_SELECTIVE
); ;

1881 'y':
	`HTFûe_£tDúAc˚ss
(
HT_DIR_OK
); ;

1883 i‡(
SHOW_MSG
)

1884 
	`HTPröt
("BadÖarameter (%s) in -d option\n",

1885 
¨gv
[
¨g
]);

1890 #ifde‡
WWWTRACE


1892 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-v", 2)) {

1893 
lm
->
åa˚
 = 
	`HTSëTø˚MesßgeMask
(
¨gv
[
¨g
]+2);

1896 i‡(
SHOW_MSG
Ë
	`HTPröt
("Bad Argumíà(%s)\n", 
¨gv
[
¨g
]);

1899 i‡(!
key˙t
) {

1900 * 
ªf
 = 
	`HTP¨£
(
¨gv
[
¨g
], 
lm
->
cwd
, 
PARSE_ALL
);

1901 
lm
->
™ch‹
 = 
	`HTAnch‹_∑ª¡
(
	`HTAnch‹_födAddªss
(
ªf
));

1902 
key˙t
 = 1;

1903 
	`HT_FREE
(
ªf
);

1905 *
esˇ≥d
 = 
	`HTEsˇ≥
(
¨gv
[
¨g
], 
URL_XALPHAS
);

1906 i‡(
key˙t
++ <= 1)

1907 
keyw‹ds
 = 
	`HTChunk_√w
(128);

1909 
	`HTChunk_putc
(
keyw‹ds
, ' ');

1910 
	`HTChunk_puts
(
keyw‹ds
, 
	`HTSåù
(
esˇ≥d
));

1911 
	`HT_FREE
(
esˇ≥d
);

1916 #ifde‡
CATCH_SIG


1917 
	`SëSig«l
();

1921 i‡(
	`HTAÀπ_öãø˘ive
 () ) {

1923 i‡(!
	`HText_ªgi°îCDCÆlback
 (
LMHText_√w
, 
LMHText_dñëe
)) {

1924 
	`HTPröt
("HTextÇew/delete callbackÑegistration failed.\n");

1925 
	`exô
 (1);

1929 i‡(!
	`HText_ªgi°îCDCÆlback
 (
LMHText_√w2
, 
LMHText_dñëe
)) {

1930 
	`HTPröt
("HTextÇew/delete callbackÑegistration failed.\n");

1931 
	`exô
 (1);

1934 i‡(!
	`HText_ªgi°îTextCÆlback
 (
LMHText_addText
)) {

1935 
	`HTPröt
("HTextáddText callbackÑegistration failed.\n");

1936 
	`exô
 (2);

1938 i‡(!
	`HText_ªgi°îLökCÆlback
 (
LMHText_begöAnch‹
)) {

1939 
	`HTPröt
("HTextÜink callbackÑegistration failed.\n");

1940 
	`exô
 (3);

1942 i‡(!
	`HText_ªgi°îEÀmítCÆlback
 (

1943 
LMHText_begöEÀmít
, 
LMHText_ídEÀmít
)) {

1944 
	`HTPröt
("HTextÉlement callbackÑegistration failed.\n");

1945 
	`exô
 (3);

1949 i‡(!
lm
->
™ch‹
Ëlm->™ch‹ = 
	`HTHomeAnch‹
();

1952 i‡(
	`HTAÀπ_öãø˘ive
()) {

1953 
lm
->
¥e£¡îs
 = 
	`HTLi°_√w
();

1954 
	`HTPª£¡îInô
(
lm
->
¥e£¡îs
);

1955 
	`HTReque°_£tC⁄vîsi⁄
(
ªque°
, 
lm
->
¥e£¡îs
, 
NO
);

1963 
	`HTF‹m©_addCodög
("*", 
HTIdítôyCodög
, HTIdentityCoding, 0.3);

1966 i‡(
HTS¸ìnHeight
 == -1) {

1967 i‡(
	`HTAÀπ_öãø˘ive
())

1968 
	`s¸size
(&
HTS¸ìnHeight
, &
HTS¸ìnWidth
);

1970 
HTS¸ìnHeight
 = 999999;

1974 i‡(
lm
->
ho°
 && 
	`HTFûe_dúAc˚ss
(Ë=
HT_DIR_OK
)

1975 
	`HTFûe_£tDúAc˚ss
(
HT_DIR_SELECTIVE
);

1978 i‡(!
	`HTAÀπ_öãø˘ive
()) {

1979 #i‚de‡
WWW_WIN_WINDOW


1980 i‡(
lm
->
ouçutfûe
) {

1981 i‡((
OUTPUT
 = 
	`f›í
(
lm
->
ouçutfûe
, "wb")Ë=
NULL
) {

1982 i‡(
SHOW_MSG
Ë
	`HTPröt
("Can't open `%s'\\n",

1983 
lm
->
ouçutfûe
);

1984 
OUTPUT
 = 
°dout
;

1987 
	`HTReque°_£tOuçutSåóm
(
ªque°
,

1988 
	`HTFWrôî_√w
(
ªque°
, 
OUTPUT
, 
YES
));

1995 i‡(
lm
->
Êags
 & 
LM_REFORMAT
) {

1996 
HTSåu˘uªd
 * 
html
 =

1997 
	`HTMLGíî©‹
(
ªque°
, 
NULL
, 
WWW_HTML
,

1998 
	`HTReque°_ouçutF‹m©
(
ªque°
),

1999 
	`HTReque°_ouçutSåóm
(
ªque°
));

2000 
	`HTReque°_£tOuçutSåóm
(
ªque°
, 
	`SGML_√w
(
	`HTML_dtd
(), 
html
));

2005 i‡(
lm
->
logfûe
) {

2006 
lm
->
log
 = 
	`HTLog_›í
÷m->
logfûe
, 
YES
, YES);

2007 i‡(
lm
->
log
Ë
	`HTNë_addA·î
(
HTLogFûãr
, 
NULL
,Üm->log, 
HT_ALL
, 
HT_FILTER_LATE
);

2011 i‡(
lm
->
Êags
 & 
LM_FILTER
) {

2012 #ifde‡
STDIN_FILENO


2013 
	`HTReque°_£tAnch‹
(
ªque°
, (
HTAnch‹
 *Ë
lm
->
™ch‹
);

2014 
	`HTReque°_£tPªem±ive
(
ªque°
, 
YES
);

2015 
	`HTLﬂdSockë
(
STDIN_FILENO
, 
ªque°
);

2017 
	`CÀ™up
(
lm
, 0);

2021 i‡(
lm
->
timî
 < 0) {

2022 
lm
->
timî
 = 
	`HTAÀπ_öãø˘ive
() ?

2023 
DEFAULT_I_TIMEOUT
 : 
DEFAULT_NI_TIMEOUT
;

2026 
	`HTDNS_£tTimeout
(3600);

2029 i‡(
lm
->
ruÀs
) {

2030 * 
ruÀs
 = 
	`HTP¨£
(
lm
->ruÀs,Üm->
cwd
, 
PARSE_ALL
);

2031 i‡(!
	`HTLﬂdRuÀs
(
ruÀs
))

2032 i‡(
SHOW_MSG
Ë
	`HTPröt
("Can'táccessÑules\n");

2033 
	`HT_FREE
(
ruÀs
);

2037 
	`CSAµ_ªgi°îAµ
(
PICSCÆlback
, 
CSAµ_ˇŒOnBad
, 
PICS_u£rCÆlback
,

2038 (*)
lm
);

2040 
	`HTNë_addBef‹e
(
Mem‹yCacheFûãr
, 
NULL
, NULL, 
HT_FILTER_EARLY
);

2041 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

2044 i‡(
picsU£r
 && !
	`LﬂdPICSU£r
(
lm
,ÖicsUser))

2045 
	`HTPröt
("U«bÀÅÿlﬂd PICS u£∏\"%s\".\n", 
picsU£r
);

2048 i‡(
lm
->
u£rLi°
)

2049 
	`LﬂdPICSU£r
(
lm
,Üm->
u£rLi°
);

2053 
	`CSAµ_uƒegi°îReq
(
ªque°
);

2054 
	`CSAµ_ªgi°îReq
(
ªque°
, 
lm
->
pCSU£r
, 
PICSCÆlback
,

2055 
CSAµ_ˇŒOnBad
, (*)
lm
);

2058 i‡(
keyw‹ds
)

2059 
°©us
 = 
	`HTSórchAnch‹
(
keyw‹ds
, (
HTAnch‹
 *Ë
lm
->
™ch‹
, 
ªque°
);

2061 
°©us
 = 
	`HTLﬂdAnch‹
((
HTAnch‹
 *Ë
lm
->
™ch‹
, 
ªque°
);

2063 i‡(
keyw‹ds
Ë
	`HTChunk_dñëe
(keywords);

2064 i‡(
°©us
 !
YES
) {

2065 i‡(
SHOW_MSG
Ë
	`HTPröt
("Couldn'tÜoad homeÖage\n");

2066 
	`CSAµ_uƒegi°îDeÁu…U£r
();

2067 
	`CSAµ_uƒegi°îAµ
();

2068 
	`CÀ™up
(
lm
, -1);

2072 i‡(
	`HTAÀπ_öãø˘ive
()) {

2075 
lm
->
hi°‹y
 = 
	`HTHi°‹y_√w
();

2081 
C⁄sﬁeEvít
 = 
	`HTEvít_√w
(
sˇn_comm™d
, 
lm
->
c⁄sﬁe
, 
HT_PRIORITY_MAX
,Üm->
timî
);

2082 #ifde‡
STDIN_FILENO


2083 i‡(
	`ißây
(
STDIN_FILENO
)) {

2084 
	`HTEvítLi°_ªgi°î
(
STDIN_FILENO
, 
HTEvít_READ
, 
C⁄sﬁeEvít
);

2087 
	`HTEvítLi°_ªgi°î
(
	`GëStdH™dÀ
(
STD_INPUT_HANDLE
), 
HTEvít_READ
, 
C⁄sﬁeEvít
);

2092 
	`HTEvítLi°_lo›
(
ªque°
);

2095 
	`CÀ™up
(
lm
, 0);

2097 
	}
}

	@LineMode/src/HTBrowse.h

24 #i‚de‡
HTBROWSE_H


25 
	#HTBROWSE_H


	)

27 
HTS¸ìnWidth
;

28 
HTS¸ìnHeight
;

31 
BOOL
 
di•œy_™ch‹s
;

32 * 
°¨t_ª„ªn˚
;

33 * 
íd_ª„ªn˚
;

34 * 
ª„ªn˚_m¨k
;

35 * 
íd_m¨k
;

37 
_LöeMode
 
	tLöeMode
;

38 
_HTVõw
 
	tHTVõw
;

40 
OuçutD©a
(
HTVõw
 * 
pVõw
, c⁄° * 
fmt
, ...);

44 
	tI≈utP¨£r_t
 (* 
	tbuf
, 
	tSOCKET
 
	ts
, 
	tHTReque°
 * 
	tªq
, 
	tHTEvítTy≥
 
	tty≥
);

45 
I≈utP¨£r_t
 * 
PI≈utP¨£r
;

46 
PUBLIC
 
buf„rI≈ut
 (* 
buf
, 
Àn
, 
SOCKET
 
s
, 
HTReque°
 * 
ªq
, 
HTEvítTy≥
 
ty≥
);

47 
LöeMode
 * 
C⁄ãxt_gëLöeMode
(
HTReque°
 * 
ªque°
);

48 
HTReque°
 * 
LöeMode_gëC⁄sﬁe
(
LöeMode
 * 
pLm
);

49 
HTVõw
 * 
LöeMode_gëVõw
(
LöeMode
 * 
pLm
);

50 
HTVõw
 * 
HTVõw_¸óã
(* 
«me
, 
rows
, 
cﬁs
, 
LöeMode
 * 
pLm
);

51 
BOOL
 
HTVõw_de°roy
(
HTVõw
 * 
pVõw
);

	@LineMode/src/HTFont.h

22 #i‚de‡
HTFONT_H


23 
	#HTFONT_H


	)

25 
	tHTLMF⁄t
;

26 
	tHTF⁄t
;

28 
	#HT_NON_BREAK_SPACE
 (()1Ë

	)

30 
	#HT_FONT
 0

	)

31 
	#HT_CAPITALS
 1

	)

32 
	#HT_BOLD
 2

	)

33 
	#HT_UNDERLINE
 4

	)

34 
	#HT_INVERSE
 8

	)

35 
	#HT_DOUBLE
 0x10

	)

37 
	#HT_BLACK
 0

	)

38 
	#HT_WHITE
 1

	)

	@LineMode/src/a_stdio.c

4 
	~<°dio.h
>

5 
	~"a_°dio.h
"

7 
	ge_nuŒ
[] = {

25 
	gÆt2koi8
[] = {

43 
	gkoi82Æt
[] = {

61 
	g°rù8
[] = {

79 *
	gícode
,*
	gi_ícode
=
Æt2koi8
; 
	gí˘y≥
=1,
	gi_í˘y≥
;

80 
	$do_nuŒ
(Ë{ 
ícode
=
e_nuŒ
; 
í˘y≥
=0;  0; 
	}
}

81 
	$do_k2a
(Ë{ 
ícode
=
koi82Æt
;
í˘y≥
=1;  0; 
	}
}

82 
	$do_a2k
(Ë{ 
ícode
=
Æt2koi8
;
í˘y≥
=2;  0; 
	}
}

83 
	$do_°rù8
(Ë{ 
ícode
=
°rù8
; 
í˘y≥
=3;  0; 
	}
}

84 
	$do_íc
(
_
) {

85 if(
_
<4)

86 
_
) {

87 0: 
	`do_nuŒ
(); ; 1: 
	`do_k2a
(); ;

88 2: 
	`do_a2k
 (); ; 3: 
	`do_°rù8
(); ;

90  
í˘y≥
;

91 
	}
}

92 
	$doõnc
(
_
) {

93 if(
_
<2Ë{ 
i_í˘y≥
=_;

94 
_
) {

95 0: 
i_ícode
=
e_nuŒ
; 
	`do_nuŒ
(); ;

96 1: 
i_ícode
=
Æt2koi8
; 
	`do_k2a
(); ;

98  
i_í˘y≥
;

99 
	}
}

100 
	$doöuŒ
(Ë{ 
	`doõnc
(0);  0; 
	}
}

101 
	$doü2k
(Ë{ 
	`doõnc
(1);  0; 
	}
}

102 
	#PRINT
(
∑r1
,
∑r2
,
c⁄d
)

	)

103 
	$a_¥öt
(*
°r
, 
_
, 
FILE
 *
Â
)

104 { 
i
; if(
°r
==0)  1;

105 ;*
°r
!='\0' && 
_
>0;++str,--_) {

106 if((
i
=()*
°r
)<0Ëi=
ícode
[i+128]; 

107 if(
i
>127Ëi=
ícode
[i-128];

108 if(
	`Âutc
(
i
,
Â
)==
EOF
)  0;

111 
	}
}

112 
PRINT
(
_
,, *
°r
!='\0')

113 
PRINT
(
size
, 
nmemb
, size*nmemb > 0)

114 
	$awrôe
(c⁄° *
°r
, 
size
, 
nmemb
, 
FILE
 *
Â
)

116 
i
, 
_
=
size
*
nmemb
; if(
°r
==0)  0;

117 ;
_
 > 0;++
°r
,--_) {

118 if((
i
=()*(*)
°r
)<0Ëi=
ícode
[i+128];

120 if(
i
>127Ëi=
ícode
[i-128];

121 if(
	`Âutc
(
i
,
Â
)==
EOF
Ë (
size
*
nmemb
-
_
)/size;

123  
nmemb
;

124 
	}
}

125 
	$≠utc
(
ch
, 
FILE
 *
Â
)

127 
i
;

128 if((
i
=()
ch
)<0Ëi=
ícode
[i+128]; 

129 if(
i
>127Ëi=
ícode
[i-128];

130 if(
	`Âutc
(
i
,
Â
)==
EOF
)  EOF;

131  
ch
;

132 
	}
}

133 *
	$agës
(*
°r
, 
_
, 
FILE
 *
Â
)

134 { *
pc
=
°r
; 
i
,
j
=0;

135 if(
	`fgës
(
°r
,
_
,
Â
)==0)  0;

136 ;*
°r
!='\0' && 
j
<
_
;++j,++
pc
) {

137 if((
i
=()*
pc
)<0Ë*
°r
++=
i_ícode
[i+128];

139 if(
i
>127Ë*
°r
++=
i_ícode
[i-128];

142 if(
i
>0 && i<10Ë{ if(
j
>0Ë--
°r
; ; }

143 *
°r
++=
i
;

144 } *
°r
='\0';

145  
°r
;

146 
	}
}

147 
	$™¥öt
(*
°r
, 
psize
, 
FILE
 *
Â
)

149 if(
	`fwrôe
(
°r
,
psize
,1,
Â
)!=1)  0;

151 
	}
}

	@LineMode/src/a_stdio.h

4 #i‚de‡
A_STDIO_H


5 
	#A_STDIO_H


	)

6 
	~<°dio.h
>

7 
	#H
 64000

	)

8 
a_¥öt
(*, , 
FILE
 *
Â
);

9 *
agës
(*, 
psize
, 
FILE
 *
Â
);

10 
≠utc
(, 
FILE
 *);

11 
awrôe
(c⁄° *
°r
, 
size
, 
nmemb
, 
FILE
 *
Â
);

12 
™¥öt
(*
°r
, 
psize
, 
FILE
 *
Â
);

13 
do_nuŒ
(),
do_k2a
(),
do_a2k
(),
do_°rù8
(),
do_íc
(),
doõnc
();

14 
doöuŒ
(),
doü2k
();

15 
a_•awn
(*
¨gv
[], *
f_°dö
, *
f_°dout
,

16 *
f_°dîr
);

17 
	sARc
 {

18 
	mloˇÀ
,

19 
	mícodög
,

20 
	mi_ícodög
;

23 
ARc
 
¨c
;

	@PICS-client/src/CSApp.c

14 
	~<°dio.h
>

15 
	~<°rög.h
>

16 
	~"WWWLib.h
"

17 
	~"WWWAµ.h
"

18 
	~"WWWFûe.h
"

19 
	~"HTHódî.h
"

20 
	~"CSLAµ.h
"

21 
	~"CSP¨£.h
"

22 
	~"CSLUtûs.h
"

23 
	~"CSLL.h
"

24 
	~"CSU£r.h
"

25 
	~"CSU£rSt.h
"

26 
	~"CSU§L°.h
"

30 
HTReque°
 * 
	mpReq
;

31 íum {
	mªqSèã_NEW
, 
	mªqSèã_PROT_REQ
, 
	mªqSèã_BUREAU_START
,

32 
	mªqSèã_BUREAU_MIDDLE
, 
	mªqSèã_BUREAU_DONE
,

33 
	mªqSèã_BUREAU_ERR
} 
	mªqSèã
;

35 
CSDi•osôi⁄_¸ôîü
 
	m¸ôîü
;

36 
CSDi•osôi⁄_ˇŒback
 * 
	mpCÆlback
;

37 
CSEº‹_t
 
	mdi•osôi⁄
;

38 
CSLabñ_t
 * 
	mpCSLabñ
;

39 
CSU£r_t
 * 
	mpCSU£r
;

40 * 
	mpVoid
;

41 
HTP¨ítAnch‹
 * 
	m™ch‹
;

42 
HTF‹m©
 
	mouçutF‹m©
;

43 
HTSåóm
 * 
	mouçutSåóm
;

44 
HTMëhod
 
	mmëhod
;

45 } 
	tReqP¨ms_t
;

47 
ReqP¨ms_t
 
	gDeÁu…ReqP¨ms
 = {0, 
ªqSèã_NEW
, 
CSAµ_√vîCÆl
,

48 0, 
CSEº‹_APP
, 0, 0, 0};

52 
PRIVATE
 * 
	gS_mimeLabñ
 = "PICS-Label";

53 
PRIVATE
 * 
	gS_machRód
 = "application/x-pics-machine-readable";

54 
PRIVATE
 * 
	gS_œbñ
 = "application/pics-label";

55 
PRIVATE
 * 
	gS_u£r
 = "application/x-pics-user";

56 
PRIVATE
 * 
	gS_URLLi°
 = "application/x-url-list";

57 
PRIVATE
 
HTLi°
 * 
	gLi°WôhHódîGíî©‹
 = 
NULL
;

61 
PRIVATE
 
BOOL
 
	$LﬂdURLToC⁄vîãr
(c⁄° * 
uæ
, c⁄° * 
ªœãdName
,

62 c⁄° * 
ty≥
, 
HTC⁄vîãr
 * 
c⁄vîãr
,

63 c⁄° * 
îrMesßge
)

65 
BOOL
 
ªt
;

66 * 
fuŒURL
;

67 
HTReque°
 * 
pReque°
;

68 
HTP¨ítAnch‹
 * 
pP¨ítAnch‹
;

69 
HTLi°
 * 
c⁄vîsi⁄s
 = 
	`HTLi°_√w
();

71 
pReque°
 = 
	`HTReque°_√w
();

72 
fuŒURL
 = 
	`HTP¨£
(
uæ
, 
ªœãdName
, 
PARSE_ALL
);

73 
pP¨ítAnch‹
 = (
HTP¨ítAnch‹
 *Ë
	`HTAnch‹_födAddªss
(
fuŒURL
);

74 
	`HTReque°_£tPªem±ive
(
pReque°
, 
YES
);

75 i‡(
c⁄vîãr
) {

76 
	`HTC⁄vîsi⁄_add
(
c⁄vîsi⁄s
, 
ty≥
, "*/*", 
c⁄vîãr
, 1.0, 0.0, 0.0);

77 
	`HTReque°_£tC⁄vîsi⁄
(
pReque°
, 
c⁄vîsi⁄s
, 
YES
);

79 i‡((
ªt
 = 
	`HTLﬂdAnch‹
((
HTAnch‹
 *Ë
pP¨ítAnch‹
, 
pReque°
)Ë!
YES
)

80 
	`HTPröt
("PICS: C™'àac˚s†%s.\n", 
îrMesßge
);

81 i‡(
c⁄vîãr
)

82 
	`HTC⁄vîsi⁄_dñëeAŒ
(
c⁄vîsi⁄s
);

84 
	`HTLi°_dñëe
(
c⁄vîsi⁄s
);

85 
	`HTReque°_dñëe
(
pReque°
);

86 
	`HT_FREE
(
fuŒURL
);

87  
ªt
;

88 
	}
}

93 
PUBLIC
 
BOOL
 
	$CSU£rLi°_lﬂd
(* 
uæ
, * 
ªœãdName
)

95  
	`LﬂdURLToC⁄vîãr
(
uæ
, 
ªœãdName
, 
S_URLLi°
, 
CSU£rLi°s
,

97 
	}
}

103 
CSU£r_t
 * 
	mpCSU£r
;

104 * 
	muæ
;

105 } 
	tCSLﬂdedU£r_t
;

106 
PRIVATE
 
HTLi°
 * 
	gLﬂdedU£rs
 = 0;

108 
PRIVATE
 
CSLﬂdedU£r_t
 * 
	$CSLﬂdedU£r_√w
(
CSU£r_t
 * 
pCSU£r
, * 
uæ
)

110 
CSLﬂdedU£r_t
 * 
pCSLﬂdedU£r
;

111 i‡((
pCSLﬂdedU£r
 = (
CSLﬂdedU£r_t
 *)
	`HT_MALLOC
((CSLﬂdedU£r_t))Ë=
NULL
)

112 
	`HT_OUTOFMEM
("CSLoadedUser_t");

113 
pCSLﬂdedU£r
->
pCSU£r
 =ÖCSUser;

114 
pCSLﬂdedU£r
->
uæ
 = 0;

115 
	`SåAŒocC›y
(
pCSLﬂdedU£r
->
uæ
, url);

116  
pCSLﬂdedU£r
;

117 
	}
}

119 
PRIVATE
 
	$CSLﬂdedU£r_dñëe
(
CSLﬂdedU£r_t
 * 
pCSLﬂdedU£r
)

121 
	`CSU£r_‰ì
(
pCSLﬂdedU£r
->
pCSU£r
);

122 
	`HT_FREE
(
pCSLﬂdedU£r
->
uæ
);

123 
	`HT_FREE
(
pCSLﬂdedU£r
);

124 
	}
}

126 
PRIVATE
 
CSLﬂdedU£r_t
 * 
	$CSLﬂdedU£r_födU£r
(
CSU£r_t
 * 
pCSU£r
)

128 
HTLi°
 * 
cur
 = 
LﬂdedU£rs
;

129 
CSLﬂdedU£r_t
 * 
pCSLﬂdedU£r
;

130 (
pCSLﬂdedU£r
 = (
CSLﬂdedU£r_t
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

131 i‡(
pCSLﬂdedU£r
->
pCSU£r
 ==ÖCSUser)

132  
pCSLﬂdedU£r
;

135 
	}
}

137 
PRIVATE
 
CSLﬂdedU£r_t
 * 
	$CSLﬂdedU£r_födName
(* 
«me
)

139 
HTLi°
 * 
cur
 = 
LﬂdedU£rs
;

140 
CSLﬂdedU£r_t
 * 
pCSLﬂdedU£r
;

141 (
pCSLﬂdedU£r
 = (
CSLﬂdedU£r_t
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

142 i‡(!
	`°rˇ£comp
(
	`CSU£r_«me
(
pCSLﬂdedU£r
->
pCSU£r
), 
«me
))

143  
pCSLﬂdedU£r
;

146 
	}
}

148 
PUBLIC
 
BOOL
 
	$CSLﬂdedU£r_ªmove
(
CSU£r_t
 * 
pCSU£r
)

150 
CSLﬂdedU£r_t
 * 
pCSLﬂdedU£r
;

151 i‡(!(
pCSLﬂdedU£r
 = 
	`CSLﬂdedU£r_födU£r
(
pCSU£r
)))

152  
NO
;

153 
	`HTLi°_ªmoveObje˘
(
LﬂdedU£rs
, (*)
pCSLﬂdedU£r
);

154 
	`CSLﬂdedU£r_dñëe
(
pCSLﬂdedU£r
);

155  
YES
;

156 
	}
}

159 
PUBLIC
 
BOOL
 
	$CSLﬂdedU£r_föd
(* 
«me
)

161  (
	`CSLﬂdedU£r_födName
(
«me
) != 0);

162 
	}
}

164 
PRIVATE
 
CSLﬂdedU£r_t
 * 
	$CSLﬂdedU£r_födUæ
(* 
uæ
)

166 
HTLi°
 * 
cur
 = 
LﬂdedU£rs
;

167 
CSLﬂdedU£r_t
 * 
pCSLﬂdedU£r
;

168 (
pCSLﬂdedU£r
 = (
CSLﬂdedU£r_t
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

169 i‡(!
	`°rˇ£comp
(
pCSLﬂdedU£r
->
uæ
, url))

170  
pCSLﬂdedU£r
;

173 
	}
}

175 
CSAµ_u£rCÆlback
 * 
	gPU£rCÆlback
 = 0;

177 
PUBLIC
 
BOOL
 
	$CSLﬂdedU£r_add
(
CSU£r_t
 * 
pCSU£r
, * 
uæ
)

179 
ˇŒBackRë
;

180 
CSLﬂdedU£r_t
 * 
pCSLﬂdedU£r
;

181 
ˇŒBackRë
 = (*
PU£rCÆlback
)(
pCSU£r
, 
DeÁu…ReqP¨ms
.
pVoid
);

182 
ˇŒBackRë
) {

184 
DeÁu…ReqP¨ms
.
pCSU£r
 =ÖCSUser;

185 
	`HTTRACE
(
PICS_TRACE
, "PICS: Sëtög deÁu… u£∏tÿ\"%s\".\n" 
_
 
	`CSU£r_«me
(
pCSU£r
));

188 
	`HTTRACE
(
PICS_TRACE
, "PICS: Lﬂded u£∏\"%s\".\n" 
_
 
	`CSU£r_«me
(
pCSU£r
));

191 
	`HTTRACE
(
PICS_TRACE
, "PICS: U£∏\"%s\"ÇŸÜﬂded.\n" 
_
 
	`CSU£r_«me
(
pCSU£r
));

192  
YES
;

194 
	`HTTRACE
(
PICS_TRACE
, "PICS: Ab‹tögÜﬂd u£∏\"%s\".\n" 
_
 
	`CSU£r_«me
(
pCSU£r
));

195  
NO
;

197 i‡((
pCSLﬂdedU£r
 = 
	`CSLﬂdedU£r_födName
(
	`CSU£r_«me
(
pCSU£r
)))) {

198 
	`HTPröt
("PICS: ReplacingÖrevious user \"%s\".\n",

199 
	`CSU£r_«me
(
pCSU£r
));

200 
	`HTLi°_ªmoveObje˘
(
LﬂdedU£rs
, (*)
pCSLﬂdedU£r
);

202 
pCSLﬂdedU£r
 = 
	`CSLﬂdedU£r_√w
(
pCSU£r
, 
uæ
);

203  (
	`HTLi°_addObje˘
(
LﬂdedU£rs
, (*)
pCSLﬂdedU£r
));

204 
	}
}

206 
PUBLIC
 
BOOL
 
	$CSLﬂdedU£r_dñëeAŒ
 ()

208 
CSLﬂdedU£r_t
 * 
pCSLﬂdedU£r
;

210 (
pCSLﬂdedU£r
 = (
CSLﬂdedU£r_t
 *Ë
	`HTLi°_ªmoveLa°Obje˘
(
LﬂdedU£rs
))) {

211 
	`CSLﬂdedU£r_dñëe
(
pCSLﬂdedU£r
);

213 
	`HTLi°_dñëe
(
LﬂdedU£rs
);

214 
LﬂdedU£rs
 = 
NULL
;

215  
YES
;

216 
	}
}

218 
PUBLIC
 
	$CSLﬂdedU£r_íum
(
CSLﬂdedU£rCÆlback
 * 
pCÆlback
, * 
pVoid
)

220 
HTLi°
 * 
cur
 = 
LﬂdedU£rs
;

221 
CSLﬂdedU£r_t
 * 
pCSLﬂdedU£r
;

222 
ªtVÆ
, 
i
 = 0;

223 (
pCSLﬂdedU£r
 = (
CSLﬂdedU£r_t
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

224 i‡((
ªtVÆ
 = (*
pCÆlback
)(
pCSLﬂdedU£r
->
pCSU£r
, 
i
, 
pVoid
)Ë!
CSEº‹_OK
)

225  (
ªtVÆ
);

226 
i
++;

229 
	}
}

231 
PUBLIC
 
CSU£r_t
 * 
	$CSLﬂdedU£r_lﬂd
(* 
uæ
, * 
ªœãdName
)

233 
BOOL
 
îr
 = 0;

234 * 
fuŒURL
 = 
	`HTP¨£
(
uæ
, 
ªœãdName
, 
PARSE_ALL
);

235 
CSLﬂdedU£r_t
 * 
pCSLﬂdedU£r
;

236 i‡(!
	`LﬂdURLToC⁄vîãr
(
fuŒURL
, 0, 0, 0, "PICS user file"))

239 
îr
 = 1;

240 i‡((
pCSLﬂdedU£r
 = 
	`CSLﬂdedU£r_födUæ
(
fuŒURL
)Ë=
NULL
)

241 
îr
 = 1;

242 
	`HT_FREE
(
fuŒURL
);

243  
îr
 ? 0 : 
pCSLﬂdedU£r
->
pCSU£r
;

244 
	}
}

247 
HTLi°
 * 
	gReqP¨ms
 = 0;

249 
PRIVATE
 
ReqP¨ms_t
 * 
	$ReqP¨ms_√w
(
HTReque°
 * 
pReq
, 
CSU£r_t
 * 
pCSU£r
, 
CSDi•osôi⁄_ˇŒback
 * 
pCÆlback
, 
CSDi•osôi⁄_¸ôîü
 
¸ôîü
, * 
pVoid
)

251 
ReqP¨ms_t
 * 
me
;

252 i‡((
me
 = (
ReqP¨ms_t
 *Ë
	`HT_CALLOC
(1, (ReqP¨ms_t))Ë=
NULL
)

253 
	`HT_OUTOFMEM
("ReqParms_t");

254 
me
->
pReq
 =ÖReq;

255 
me
->
di•osôi⁄
 = 
CSEº‹_APP
;

256 
me
->
ªqSèã
 = 
ªqSèã_NEW
;

257 
me
->
pCSU£r
 =ÖCSUser;

258 
me
->
pCÆlback
 =ÖCallback;

259 
me
->
¸ôîü
 = criteria;

260 
me
->
pVoid
 =ÖVoid;

261  
me
;

262 
	}
}

264 
PRIVATE
 
	$ReqP¨ms_‰ì
(
ReqP¨ms_t
 * 
pReqP¨ms
)

266 
	`HT_FREE
(
pReqP¨ms
);

267 
	}
}

269 
PRIVATE
 
ReqP¨ms_t
 * 
	$ReqP¨ms_c›y
(
ReqP¨ms_t
 * 
ﬁd
)

271 
ReqP¨ms_t
 * 
me
;

272 i‡((
me
 = (
ReqP¨ms_t
 *Ë
	`HT_CALLOC
(1, (ReqP¨ms_t))Ë=
NULL
)

273 
	`HT_OUTOFMEM
("ReqParms_t");

274 
me
->
pReq
 = 
ﬁd
->pReq;

275 
me
->
di•osôi⁄
 = 
ﬁd
->disposition;

276 
me
->
ªqSèã
 = 
ﬁd
->reqState;

277 
me
->
pCSU£r
 = 
ﬁd
->pCSUser;

278 
me
->
pCÆlback
 = 
ﬁd
->pCallback;

279 
me
->
¸ôîü
 = 
ﬁd
->criteria;

280 
me
->
pVoid
 = 
ﬁd
->pVoid;

281  
me
;

282 
	}
}

284 
PRIVATE
 
ReqP¨ms_t
 * 
	$ReqP¨ms_gëReq
(
HTReque°
 * 
pReq
)

286 
HTLi°
 * 
cur
 = 
ReqP¨ms
;

287 
ReqP¨ms_t
 * 
pReqP¨ms
;

288 (
pReqP¨ms
 = (
ReqP¨ms_t
 *Ë
	`HTLi°_√xtObje˘
(
cur
)))

289 i‡(
pReqP¨ms
->
pReq
 ==ÖReq)

290  
pReqP¨ms
;

292 
	}
}

304 
PRIVATE
 
BOOL
 
	$ReqP¨ms_ˇche
(
ReqP¨ms_t
 * 
pReqP¨ms
, 
CSLabñ_t
 * 
pCSLabñ
)

306  
NO
;

307 
	}
}

309 
PRIVATE
 
BOOL
 
	$ReqP¨ms_checkCache
(
ReqP¨ms_t
 * 
pReqP¨ms
, * 
pRë
)

311  
NO
;

312 
	}
}

314 
PUBLIC
 
BOOL
 
	$CSAµ_œbñ
(
HTReque°
 * 
pReq
, 
CSLabñ_t
 * 
pCSLabñ
)

316 
ReqP¨ms_t
 * 
pReqP¨ms
;

317 i‡(!(
pReqP¨ms
 = 
	`ReqP¨ms_gëReq
(
pReq
)))

318 
pReqP¨ms
 = &
DeÁu…ReqP¨ms
;

327 
pReqP¨ms
->
pCSLabñ
 =ÖCSLabel;

328 
pReqP¨ms
->
di•osôi⁄
 = 
	`CSCheckLabñ_checkLabñAndU£r
(
pCSLabñ
,

329 
pReqP¨ms
->
pCSU£r
);

330 
	`ReqP¨ms_ˇche
(
pReqP¨ms
, 
pCSLabñ
);

331  
YES
;

332 
	}
}

334 
PRIVATE
 
	$ReqP¨ms_checkDi•osôi⁄
(
ReqP¨ms_t
 * 
pReqP¨ms
)

336 
kûl
;

337 
kûl
 = 
pReqP¨ms
->
di•osôi⁄
 !
CSEº‹_OK
;

338 i‡((
kûl
 && 
pReqP¨ms
->
¸ôîü
 & 
CSAµ_ˇŒOnBad
) ||

339 (!
kûl
 && 
pReqP¨ms
->
¸ôîü
 & 
CSAµ_ˇŒOnGood
))

340 
pReqP¨ms
->
di•osôi⁄
 = (*pReqP¨ms->
pCÆlback
)’ReqP¨ms->
pReq
,

341 
pReqP¨ms
->
pCSLabñ
,

342 
pReqP¨ms
->
pCSU£r
,

343 
pReqP¨ms
->
di•osôi⁄
,

344 
pReqP¨ms
->
pVoid
);

345  (
pReqP¨ms
->
di•osôi⁄
 =
CSEº‹_OK
 ? 
HT_OK
 : 
HT_INTERRUPTED
);

346 
	`CSLabñ_‰ì
(
pReqP¨ms
->
pCSLabñ
);

347 i‡(
pReqP¨ms
->
di•osôi⁄
 =
CSEº‹_OK
)

348  
HT_OK
;

349  
HT_OK
;

350 
	}
}

352 
PRIVATE
 
BOOL
 
	$ReqP¨ms_ªmoveReque°
(
ReqP¨ms_t
 * 
pReqP¨ms
)

354 
	`HTLi°_ªmoveObje˘
(
ReqP¨ms
, (*)
pReqP¨ms
);

355 
	`ReqP¨ms_‰ì
(
pReqP¨ms
);

356  
YES
;

357 
	}
}

377 
PUBLIC
 
BOOL
 
	$CSAµ_ªgi°îDeÁu…U£rByName
(* 
u£r
, * 
∑ssw‹d
)

379 
CSU£r_t
 * 
pCSU£r
;

380 
CSLﬂdedU£r_t
 * 
pCSLﬂdedU£r
;

381 i‡(!(
pCSLﬂdedU£r
 = 
	`CSLﬂdedU£r_födName
(
u£r
))) {

382 
	`HTTRACE
(
PICS_TRACE
, "PICS: U£∏\"%s\"ÇŸ found.\n" 
_
 
	`CSU£r_«me
(
pCSU£r
));

383  
NO
;

385 
pCSU£r
 = 
pCSLﬂdedU£r
->pCSUser;

386 i‡(
	`CSU£r_checkPassw‹d
(
pCSU£r
, 
∑ssw‹d
Ë=
NO
) {

387 
	`HTPröt
("PICS: BadÖassw‹d f‹ u£∏\"%s\".\n", 
	`CSU£r_«me
(
pCSU£r
));

388  
NO
;

390 
DeÁu…ReqP¨ms
.
pCSU£r
 =ÖCSUser;

391  
YES
;

392 
	}
}

394 
PUBLIC
 
CSU£r_t
 * 
	$CSAµ_ªgi°îU£rByName
(* 
u£r
, * 
∑ssw‹d
)

396 
CSLﬂdedU£r_t
 * 
pCSLﬂdedU£r
;

397 i‡(!(
pCSLﬂdedU£r
 = 
	`CSLﬂdedU£r_födName
(
u£r
)))

399 i‡(
	`CSU£r_checkPassw‹d
(
pCSLﬂdedU£r
->
pCSU£r
, 
∑ssw‹d
Ë=
NO
) {

400 
	`HTPröt
("PICS: BadÖassword for user \"%s\"\n",

401 
	`CSU£r_«me
(
pCSLﬂdedU£r
->
pCSU£r
));

404  
pCSLﬂdedU£r
->
pCSU£r
;

405 
	}
}

407 
PUBLIC
 
BOOL
 
	$CSAµ_£tDeÁu…U£r
(
CSU£r_t
 * 
pCSU£r
)

409 i‡(!
pCSU£r
)

410  
NO
;

411 
DeÁu…ReqP¨ms
.
pCSU£r
 =ÖCSUser;

412  
YES
;

413 
	}
}

415 
PUBLIC
 
BOOL
 
	$CSAµ_checkHU£r
(
CSU£r_t
 * 
pCSU£r
)

417  
YES
;

418 
	}
}

420 
PUBLIC
 
BOOL
 
	$CSAµ_uƒegi°îDeÁu…U£r
()

422 
DeÁu…ReqP¨ms
.
pCSU£r
 = 0;

423  
YES
;

424 
	}
}

426 
PUBLIC
 
BOOL
 
	$CSAµ_uƒegi°îU£r
(
CSU£r_t
 * 
pCSU£r
)

428 i‡(
DeÁu…ReqP¨ms
.
pCSU£r
 ==ÖCSUser)

429 
DeÁu…ReqP¨ms
.
pCSU£r
 = 0;

430  
	`CSLﬂdedU£r_ªmove
(
pCSU£r
);

431 
	}
}

434 
	#PUTBLOCK
(
b
, 
l
Ë(*
èrgë
->
iß
->
put_block
)—¨gë, b,Ü)

	)

435 
	s_HTSåóm
 {

436 c⁄° 
HTSåómCœss
 * 
	miß
;

441 
PRIVATE
 
HTNëA·î
 
	gCSAµ_buªauEº‹
;

442 
PRIVATE
 
	$CSAµ_buªauA·î
 (
HTReque°
 * 
pReq
, 
HTRe•⁄£
 * 
ª•⁄£
,

443 * 
c⁄ãxt
, 
°©us
)

445 
ReqP¨ms_t
 * 
pReqP¨ms
 = (ReqP¨ms_à*)
c⁄ãxt
;

448 
pReqP¨ms
->
ªqSèã
 = 
ªqSèã_BUREAU_DONE
;

449 
	`HTReque°_dñëeA·î
(
pReq
, 
CSAµ_buªauA·î
);

450 
	`HTReque°_dñëeA·î
(
pReq
, 
CSAµ_buªauEº‹
);

451 
	`HTTRACE
(
PICS_TRACE
, "PICS: Lﬂd wa†%sOK\n" 
_


452 
pReqP¨ms
->
di•osôi⁄
 =
CSEº‹_OK
 ? "" : "!");

453 
	`ReqP¨ms_ªmoveReque°
(
pReqP¨ms
);

454 i‡(
pReqP¨ms
->
di•osôi⁄
 !
CSEº‹_OK
)

455  
HT_OK
;

457 
	`HTReque°_£tOuçutF‹m©
(
pReq
, 
pReqP¨ms
->
ouçutF‹m©
);

458 
	`HTReque°_£tOuçutSåóm
(
pReq
, 
pReqP¨ms
->
ouçutSåóm
);

459 
	`HTReque°_£tMëhod
(
pReq
, 
pReqP¨ms
->
mëhod
);

460  
	`HTLﬂdAnch‹
((
HTAnch‹
 *)
pReqP¨ms
->
™ch‹
, 
pReq
);

461 
	}
}

463 
PRIVATE
 
	$CSAµ_buªauEº‹
 (
HTReque°
 * 
pReq
, 
HTRe•⁄£
 * 
ª•⁄£
,

464 * 
c⁄ãxt
, 
°©us
)

466 
ReqP¨ms_t
 * 
pReqP¨ms
 = (ReqP¨ms_à*)
c⁄ãxt
;

469 
pReqP¨ms
->
ªqSèã
 = 
ªqSèã_BUREAU_ERR
;

470 
	`HTPröt
("PICS: couldn't findÜabel service.\n");

471  
HT_OK
;

472 
	}
}

474 
PRIVATE
 
	$CSAµ_√tBef‹e
 (
HTReque°
 * 
pReq
, * 
∑øm
, 
mode
)

476 
HTP¨ítAnch‹
 * 
pP¨ítAnch‹
;

477 
ReqP¨ms_t
 * 
pReqP¨ms
;

478 * 
buªau
;

479 * 
uæ
;

480 * 
±r
;

481 
ªt
;

490 i‡((
pReqP¨ms
 = 
	`ReqP¨ms_gëReq
(
pReq
))) {

491 i‡(
pReqP¨ms
->
ªqSèã
 =
ªqSèã_BUREAU_START
)

492  
HT_OK
;

494 i‡(!
DeÁu…ReqP¨ms
.
pCSU£r
)

495  
HT_OK
;

496 
pReqP¨ms
 = 
	`ReqP¨ms_c›y
(&
DeÁu…ReqP¨ms
);

497 
pReqP¨ms
->
pReq
 =ÖReq;

499 i‡(!(
buªau
 = 
	`CSU£r_buªau
(
pReqP¨ms
->
pCSU£r
))) {

500 
	`HTReque°_£tGíî©‹
(
pReq
, 
Li°WôhHódîGíî©‹
, 
NO
);

501  
HT_OK
;

503 i‡(
	`ReqP¨ms_checkCache
(
pReqP¨ms
, &
ªt
))

504  
ªt
;

505 
uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
*)
	`HTReque°_™ch‹
(
pReq
));

506 
±r
 = 
	`CSU£r_gëLabñs
(
pReqP¨ms
->
pCSU£r
, 
uæ
, 
CSO±i⁄_n‹mÆ
,

507 
CSCom∂ëíess_fuŒ
);

508 
pReqP¨ms
->
™ch‹
 = 
	`HTReque°_™ch‹
(
pReq
);

509 
pReqP¨ms
->
ouçutF‹m©
 = 
	`HTReque°_ouçutF‹m©
(
pReq
);

510 
	`HTReque°_£tOuçutF‹m©
(
pReq
, 
WWW_SOURCE
);

511 
pReqP¨ms
->
ouçutSåóm
 = 
	`HTReque°_ouçutSåóm
(
pReq
);

512 
	`HTReque°_£tOuçutSåóm
(
pReq
, 
	`CSP¨£Labñ
(pReq, 0, 0, 0, 0));

514 
pReqP¨ms
->
ªqSèã
 = 
ªqSèã_BUREAU_START
;

515 
	`HTReque°_£tPªem±ive
(
pReq
, 
YES
);

516 
	`HTTRACE
(
PICS_TRACE
, "PICS:ÜabñÑeque°:\n%s\n" 
_
 
±r
);

519 
	`HTReque°_addA·î
(
pReq
, 
CSAµ_buªauA·î
, 
NULL
, (*Ë
pReqP¨ms
, 
HT_LOADED
,

520 
HT_FILTER_MIDDLE
, 
YES
);

521 
	`HTReque°_addA·î
(
pReq
, 
CSAµ_buªauEº‹
, 
NULL
, (*Ë
pReqP¨ms
, 
HT_ERROR
,

522 
HT_FILTER_MIDDLE
, 
YES
);

524 
pP¨ítAnch‹
 = (
HTP¨ítAnch‹
 *Ë
	`HTAnch‹_födAddªss
(
±r
);

525 i‡((
ªt
 = 
	`HTLﬂdAnch‹
((
HTAnch‹
 *Ë
pP¨ítAnch‹
, 
pReq
)Ë!
YES
)

526 
	`HTPröt
("PICS: C™'àac˚s†œbñ buªauáà%s.\n", 
±r
);

527  
HT_OK
;

528 
	}
}

531 
PRIVATE
 
	$CSAµ_hódîGíî©‹
 (
HTReque°
 * 
pReq
, 
HTSåóm
 * 
èrgë
)

533 * 
å™¶©ed
;

534 
HTP¨ítAnch‹
 *
™ch‹
 = 
	`HTReque°_™ch‹
(
pReq
);

535 * 
uæ
;

536 
ReqP¨ms_t
 * 
pReqP¨ms
 = 
	`ReqP¨ms_gëReq
(
pReq
);

543 i‡(!
pReqP¨ms
 ||ÖReqP¨ms->
ªqSèã
 !
ªqSèã_NEW
 || !pReqP¨ms->
pCSU£r
)

544 
	`HTPröt
("PICS: CSApp_headerGeneratorÖrob\n");

546 i‡(!
pReqP¨ms
->
pCSU£r
) {

547 
	`HTTRACE
(
PICS_TRACE
, "PICS: No user selected\n");

548  
HT_OK
;

550 i‡(
	`CSU£r_buªau
(
pReqP¨ms
->
pCSU£r
))

551  
HT_OK
;

553 
uæ
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
™ch‹
);

554 i‡((
å™¶©ed
 = 
	`CSU£r_ac˚±Labñs
(
pReqP¨ms
->
pCSU£r
, 
CSCom∂ëíess_fuŒ
))) {

555 
	`HTTRACE
(
PICS_TRACE
, "PICS: Ac˚± \"%s\".\n" 
_
 
å™¶©ed
);

556 
	`PUTBLOCK
(
å™¶©ed
, 
	`°æí
(translated));

557 
	`HT_FREE
(
å™¶©ed
);

559 
	`HT_FREE
(
uæ
);

560  
HT_OK
;

561 
	}
}

564 
PRIVATE
 
	$CSAµ_hódîP¨£r
 (
HTReque°
 * 
pReq
, 
HTRe•⁄£
 * 
ª•⁄£
,

565 * 
tokí
, * 
vÆue
)

567 
CSP¨£_t
 * 
pCSP¨£
;

568 
ReqP¨ms_t
 * 
pReqP¨ms
 = 
	`ReqP¨ms_gëReq
(
pReq
);

570 i‡(!
pReqP¨ms
) {

571 
pReqP¨ms
 = &
DeÁu…ReqP¨ms
;

572 
DeÁu…ReqP¨ms
.
pReq
 =ÖReq;

574 i‡(!
pReqP¨ms
->
pCSU£r
)

575  
HT_OK
;

577 
pCSP¨£
 = 
	`CSP¨£_√wLabñ
(0, 0);

579 
	`CSP¨£_∑r£Chunk
(
pCSP¨£
, 
vÆue
, (Ë
	`°æí
(value), 0);

580 
pReqP¨ms
->
di•osôi⁄
 =

581 
	`CSCheckLabñ_checkLabñAndU£r
(
	`CSP¨£_gëLabñ
(
pCSP¨£
),

582 
pReqP¨ms
->
pCSU£r
);

584 
pReqP¨ms
->
pCSLabñ
 = 
	`CSP¨£_gëLabñ
(
pCSP¨£
);

585 
	`CSP¨£_dñëe
(
pCSP¨£
);

586 
	`HTTRACE
(
PICS_TRACE
, "PICS: PICS mimêhódî \"%s\" gŸ %d.\n" 
_
 
vÆue
 _ 
pReqP¨ms
->
di•osôi⁄
);

587  
	`ReqP¨ms_checkDi•osôi⁄
(
pReqP¨ms
);

588 
	}
}

591 
PUBLIC
 
BOOL
 
	$CSAµ_ªgi°îAµ
(
CSDi•osôi⁄_ˇŒback
 * 
pCÆlback
,

592 
CSDi•osôi⁄_¸ôîü
 
¸ôîü
,

593 
CSAµ_u£rCÆlback
 * 
pU£rCÆlback
, * 
pVoid
)

595 
HTLi°
* 
c⁄vîsi⁄s
;

597 
PU£rCÆlback
 = 
pU£rCÆlback
;

600 
DeÁu…ReqP¨ms
.
pCÆlback
 =ÖCallback;

601 
DeÁu…ReqP¨ms
.
¸ôîü
 = criteria;

602 
DeÁu…ReqP¨ms
.
pVoid
 =ÖVoid;

605 i‡(!
Li°WôhHódîGíî©‹
)

606 
Li°WôhHódîGíî©‹
 = 
	`HTLi°_√w
();

607 
	`HTLi°_addObje˘
(
Li°WôhHódîGíî©‹
, (*)
CSAµ_hódîGíî©‹
);

609 
	`HTNë_addBef‹e
(
CSAµ_√tBef‹e
, 
NULL
, NULL, 5);

610 
	`HTHódî_addP¨£r
(
S_mimeLabñ
, 
FALSE
, 
CSAµ_hódîP¨£r
);

613 
c⁄vîsi⁄s
 = 
	`HTF‹m©_c⁄vîsi⁄
();

615 
	`HTC⁄vîsi⁄_add
(
c⁄vîsi⁄s
, 
S_machRód
, "*/*", 
CSP¨£MachRód
,

617 
	`HTC⁄vîsi⁄_add
(
c⁄vîsi⁄s
, 
S_œbñ
, "*/*", 
CSP¨£Labñ
, 1.0, 0.0, 0.0);

619 
	`HTC⁄vîsi⁄_add
(
c⁄vîsi⁄s
, 
S_u£r
, "*/*", 
CSP¨£U£r
, 1.0, 0.0, 0.0);

621 
	`HTBöd_add
("øt", 
S_machRód
, "7bô", 
NULL
, NULL, 1.0);

622 
	`HTBöd_add
("pcu", 
S_u£r
, "7bô", 
NULL
, NULL, 1.0);

623 
	`HTBöd_add
("œb", 
S_œbñ
, "7bô", 
NULL
, NULL, 1.0);

624 
	`HTBöd_add
("uæ", 
S_URLLi°
, "7bô", 
NULL
, NULL, 1.0);

626 i‡(!
LﬂdedU£rs
)

627 
LﬂdedU£rs
 = 
	`HTLi°_√w
();

628  
YES
;

629 
	}
}

635 
PUBLIC
 
BOOL
 
	$CSAµ_uƒegi°îAµ
()

637 
	`HTHódî_dñëeGíî©‹
(
CSAµ_hódîGíî©‹
);

638 
	`HTHódî_dñëeP¨£r
(
S_mimeLabñ
);

639  
YES
;

640 
	}
}

642 
PUBLIC
 
BOOL
 
	$CSAµ_ªgi°îReq
(
HTReque°
* 
pReq
, 
CSU£r_t
 * 
pCSU£r
, 
CSDi•osôi⁄_ˇŒback
 
pCÆlback
, 
CSDi•osôi⁄_¸ôîü
 
¸ôîü
, * 
pVoid
)

644 
ReqP¨ms_t
 * 
pReqP¨ms
;

645 i‡((
pReqP¨ms
 = 
	`ReqP¨ms_gëReq
(
pReq
))) {

646  
NO
;

648 i‡(!
pReq
 || !
pCSU£r
)

649  
NO
;

650 
pReqP¨ms
 = 
	`ReqP¨ms_√w
(
pReq
, 
pCSU£r
, 
pCÆlback
, 
¸ôîü
, 
pVoid
);

651 i‡(!
ReqP¨ms
)

652 
ReqP¨ms
 = 
	`HTLi°_√w
();

653 
	`HTLi°_addObje˘
(
ReqP¨ms
, (*)
pReqP¨ms
);

654  
YES
;

655 
	}
}

657 
PUBLIC
 
BOOL
 
	$CSAµ_uƒegi°îReq
(
HTReque°
* 
pReq
)

659 
ReqP¨ms_t
 * 
pReqP¨ms
;

660 i‡((
pReqP¨ms
 = 
	`ReqP¨ms_gëReq
(
pReq
)Ë=
NULL
) {

661  
NO
;

663 
	`HTLi°_ªmoveObje˘
(
ReqP¨ms
, (*)
pReqP¨ms
);

664 
	`ReqP¨ms_‰ì
(
pReqP¨ms
);

665  
YES
;

666 
	}
}

668 
PUBLIC
 
HTReque°
 * 
	$CSAµ_‹igöÆReque°
(
HTReque°
* 
pReq
)

676  
pReq
;

677 
	}
}

680 
PUBLIC
 * 
	$CSAµ_libøryVîsi⁄
()

683 
	}
}

	@PICS-client/src/CSChkLab.c

1 
	~"WWWLib.h
"

2 
	~"CSLUtûs.h
"

3 
	~"CSU£r.h
"

4 
	~"CSU£rSt.h
"

5 
	~"CSLL.h
"

6 
	~"CSLLSt.h
"

8 
CSLabñ_dump
(
CSLabñ_t
 * 
pCSLabñ
);

10 
	sSèã_P¨ms_s
 {

11 
CSLabñ_t
 * 
	mpCSLabñ
;

12 
CSU£r_t
 * 
	mpCSU£r
;

13 
	mm©chedSîvi˚s
;

14 
	mm©chedR©ögs
;

15 
CSEº‹_t
 
	môî©‹Eº‹
;

18 
PRIVATE
 
CSLabñ_ˇŒback_t
 
	gCSCheckLabñ_checkR©ögs
;

19 
PRIVATE
 
CSEº‹_t
 
	$CSCheckLabñ_checkR©ögs
(
CSLabñ_t
 * 
pCSLabñ
, 
Sèã_P¨ms_t
 * 
pP¨ms
, c⁄° * 
idítifõr
, * 
pVoid
)

21 
U£rSîvi˚R©ög_t
 * 
pU£rSîvi˚R©ög
 = 
	`CSU£r_gëU£rSîvi˚R©ög
(
pP¨ms
->
pCSU£r
);

22 
CSEº‹_t
 
ªt
;

23 
FVÆ_t
 
fVÆ
;

24 
fVÆ
 = 
	`CSLabñ_øtögsIn˛udeR™ges
(
pCSLabñ
, 
pU£rSîvi˚R©ög
->
ønges
);

25 
ªt
 = 
	`FVÆ_isZîo
(&
fVÆ
Ë? 
CSEº‹_OK
 : 
CSEº‹_RATING_RANGE
;

26 i‡(
ªt
 !
CSEº‹_OK
)

27 
	`HTTRACE
(
PICS_TRACE
, "PICS: Ac˚s†díü»- sîvi˚:\"%s\"ÜabñÇumbî:%dÑ©ög idítifõr:\"%s\"\n" 
_


28 
	`CSLabñ_gëSîvi˚Name
(
pCSLabñ
Ë
_


29 
	`CSLabñ_gëLabñNumbî
(
pCSLabñ
Ë
_


30 
	`CSLabñ_gëR©ögName
(
pCSLabñ
));

31  
ªt
;

32 
	}
}

34 
PRIVATE
 
CSU£r_ˇŒback_t
 
	gCSCheckLabñ_födLabñSîvi˚R©ög
;

35 
PRIVATE
 
CSEº‹_t
 
	$CSCheckLabñ_födLabñSîvi˚R©ög
(
CSU£r_t
 * 
pCSU£r
, 
Sèã_P¨ms_t
 * 
pP¨ms
, c⁄° * 
idítifõr
, * 
pVoid
)

37 
U£rSîvi˚R©ög_t
 * 
pU£rSîvi˚R©ög
 = 
	`CSU£r_gëU£rSîvi˚R©ög
(
pP¨ms
->
pCSU£r
);

38 
CSEº‹_t
 
ªt
;

39 i‡((
ªt
 = 
	`CSLabñ_ôî©eLabñR©ögs
(
pP¨ms
->
pCSLabñ
, 
CSCheckLabñ_checkR©ögs
,ÖP¨ms, 
	`SVÆ_vÆue
(&
pU£rSîvi˚R©ög
->
idítifõr
), 0)Ë!
CSEº‹_SERVICE_MISSING
)

40 
pP¨ms
->
m©chedR©ögs
++;

42 i‡(!
	`BVÆ_vÆue
(&
pU£rSîvi˚R©ög
->
missög_sˇÀ
))

43 
ªt
 = 
CSEº‹_OK
;

44  
ªt
;

45 
	}
}

47 
PRIVATE
 
CSLabñ_ˇŒback_t
 
	gCSCheckLabñ_checkSögÀLabñ
;

48 
PRIVATE
 
CSEº‹_t
 
	$CSCheckLabñ_checkSögÀLabñ
(
CSLabñ_t
 * 
pCSLabñ
, 
Sèã_P¨ms_t
 * 
pP¨ms
, c⁄° * 
idítifõr
, * 
pVoid
)

50  
	`CSU£r_ôî©eSîvi˚R©ögs
(
pP¨ms
->
pCSU£r
, 
CSCheckLabñ_födLabñSîvi˚R©ög
,ÖParms, 0, 0);

51 
	}
}

53 
PRIVATE
 
CSLabñ_ˇŒback_t
 
	gCSCheckLabñ_checkLabñ
;

54 
PRIVATE
 
CSEº‹_t
 
	$CSCheckLabñ_checkLabñ
(
CSLabñ_t
 * 
pCSLabñ
, 
Sèã_P¨ms_t
 * 
pP¨ms
, c⁄° * 
idítifõr
, * 
pVoid
)

56  
	`CSLabñ_ôî©eSögÀLabñs
(
pP¨ms
->
pCSLabñ
, 
CSCheckLabñ_checkSögÀLabñ
,ÖParms, 0, 0);

57 
	}
}

59 
PRIVATE
 
CSLabñ_ˇŒback_t
 
	gCSCheckLabñ_checkSîvi˚
;

60 
PRIVATE
 
CSEº‹_t
 
	$CSCheckLabñ_checkSîvi˚
(
CSLabñ_t
 * 
pCSLabñ
, 
Sèã_P¨ms_t
 * 
pP¨ms
, c⁄° * 
idítifõr
, * 
pVoid
)

62  
	`CSLabñ_ôî©eLabñs
(
pP¨ms
->
pCSLabñ
, 
CSCheckLabñ_checkLabñ
,ÖParms, 0, 0);

63 
	}
}

65 
PRIVATE
 
CSU£r_ˇŒback_t
 
	gCSCheckLabñ_födLabñSîvi˚
;

66 
PRIVATE
 
CSEº‹_t
 
	$CSCheckLabñ_födLabñSîvi˚
(
CSU£r_t
 * 
pCSU£r
, 
Sèã_P¨ms_t
 * 
pP¨ms
, c⁄° * 
idítifõr
, * 
pVoid
)

68 
U£rSîvi˚_t
 * 
pU£rSîvi˚
 = 
	`CSU£r_gëU£rSîvi˚
(
pP¨ms
->
pCSU£r
);

69 
CSEº‹_t
 
ªt
;

70 i‡((
ªt
 = 
	`CSLabñ_ôî©eSîvi˚s
(
pP¨ms
->
pCSLabñ
, 
CSCheckLabñ_checkSîvi˚
,ÖP¨ms, 
	`SVÆ_vÆue
(&
pU£rSîvi˚
->
øtög_£rvi˚
), 0)Ë=
CSEº‹_SERVICE_MISSING
)

71  
	`BVÆ_vÆue
(&
pU£rSîvi˚
->
missög_£rvi˚
Ë? 
CSEº‹_SERVICE_MISSING
 : 
CSEº‹_OK
;

72 i‡(
ªt
 =
CSEº‹_OK
)

73 
pP¨ms
->
m©chedSîvi˚s
++;

74  
ªt
;

75 
	}
}

77 
PUBLIC
 
CSEº‹_t
 
	$CSCheckLabñ_checkLabñAndU£r
(
CSLabñ_t
 * 
pCSLabñ
, 
CSU£r_t
 * 
pCSU£r
)

79 
CSEº‹_t
 
ªt
;

80 
Sèã_P¨ms_t
 
∑rms
 = {0, 0, 0, 0, 
CSEº‹_OK
};

81 
∑rms
.
pCSLabñ
 =ÖCSLabel;

82 
∑rms
.
pCSU£r
 =ÖCSUser;

83 
∑rms
.
ôî©‹Eº‹
 = 
CSEº‹_SERVICE_NONE
;

87 i‡(
PICS_TRACE
Ë
	`CSLabñ_dump
(
∑rms
.
pCSLabñ
);

92 i‡((
ªt
 = 
	`CSU£r_ôî©eSîvi˚s
(
∑rms
.
pCSU£r
, 
CSCheckLabñ_födLabñSîvi˚
, &∑rms, 0, 0)Ë!
CSEº‹_OK
)

93  
ªt
;

94 i‡(
	`FVÆ_öôülized
(&
	`CSU£r_gëCSU£rD©a
(
pCSU£r
)->
möimum_£rvi˚s
) &&

95 
∑rms
.
m©chedSîvi˚s
 < 
	`FVÆ_vÆue
(&
	`CSU£r_gëCSU£rD©a
(
pCSU£r
)->

96 
möimum_£rvi˚s
))

97  
CSEº‹_SERVICE_NONE
;

98  
CSEº‹_OK
;

99 
	}
}

101 
PUBLIC
 
CSEº‹_t
 
	$CSCheckLabñ_∑r£AndVÆid©eLabñSå
(c⁄° * 
œbñ
, 
CSU£r_t
 * 
pCSU£r
)

103 
CSP¨£_t
 * 
pCSP¨£
 = 
	`CSP¨£_√wLabñ
(0, 0);

104 
CSEº‹_t
 
ªt
;

106 
	`CSP¨£_∑r£Chunk
(
pCSP¨£
, 
œbñ
, (Ë
	`°æí
(label), 0);

107 
ªt
 = 
	`CSCheckLabñ_checkLabñAndU£r
(
	`CSP¨£_gëLabñ
(
pCSP¨£
), 
pCSU£r
);

109 
	`CSP¨£_dñëeLabñ
(
pCSP¨£
);

110  
ªt
;

111 
	}
}

	@PICS-client/src/CSKwik.c

1 
	~"WWWLib.h
"

4 
	s_HTSåóm
 {

5 c⁄° 
HTSåómCœss
 * 
	miß
;

8 
PRIVATE
 
	$Kwik_put_block
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
)

10 * 
•a˚
;

11 i‡((
•a˚
 = (*Ë
	`HT_CALLOC
(
l
+1, ())Ë=
NULL
)

12 
	`HT_OUTOFMEM
("char");

13 
	`mem˝y
(
•a˚
, 
b
, 
l
);

14 
	`HTPröt
(
•a˚
);

15 
	`HT_FREE
(
•a˚
);

16  
HT_OK
;

17 
	}
}

19 
PRIVATE
 
	$Kwik_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

21  
	`Kwik_put_block
(
me
, &
c
, 1);

22 
	}
}

24 
PRIVATE
 
	$Kwik_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

26 
	`HTPröt
(
s
);

27  
HT_OK
;

28 
	}
}

30 
PRIVATE
 
	$Kwik_Êush
 (
HTSåóm
 * 
me
)

32  
HT_OK
;

33 
	}
}

35 
PUBLIC
 
	$Kwik_‰ì
 (
HTSåóm
 * 
me
)

37 
	`HT_FREE
(
me
);

38  
HT_OK
;

39 
	}
}

41 
PRIVATE
 
	$Kwik_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

43 
	`HT_FREE
(
me
);

44  
HT_OK
;

45 
	}
}

47 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gKwikCœss
 =

50 
Kwik_Êush
,

51 
Kwik_‰ì
,

52 
Kwik_ab‹t
,

53 
Kwik_put_ch¨a˘î
,

54 
Kwik_put_°rög
,

55 
Kwik_put_block


58 
PUBLIC
 
HTSåóm
 * 
	$Kwik_√w
 ()

60 
HTSåóm
 * 
me
;

61 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

62 
	`HT_OUTOFMEM
("Kwik");

63 
me
->
iß
 = &
KwikCœss
;

64  
me
;

65 
	}
}

	@PICS-client/src/CSLApp.h

19 #i‚de‡
CSLAPP_H


20 
	#CSLAPP_H


	)

21 
	~"WWWC‹e.h
"

22 
	~"CSLUtûs.h
"

60 
	mCSAµ_√vîCÆl
 = 0, 
	mCSAµ_ˇŒOnBad
 = 1, 
	mCSAµ_ˇŒOnGood
 = 2

61 } 
	tCSDi•osôi⁄_¸ôîü
;

62 
	$CSEº‹_t
 (
	tCSDi•osôi⁄_ˇŒback
)(
	tHTReque°
* 
	tpReq
, 
	tCSLabñ_t
 * 
	tpCSLabñ
,

63 
	tCSU£r_t
 * 
	tpCSU£r
, 
	tCSEº‹_t
 
	tdi•osôi⁄
,

64 * 
	tpVoid
);

73 
CSU£r_t
 * 
	`CSLﬂdedU£r_lﬂd
(* 
uæ
, * 
ªœãdName
);

74 
BOOL
 
	`CSLﬂdedU£r_add
(
CSU£r_t
 * 
pCSU£r
, * 
uæ
);

75 
BOOL
 
	`CSLﬂdedU£r_ªmove
(
CSU£r_t
 * 
pCSU£r
);

76 
BOOL
 
	`CSLﬂdedU£r_föd
(* 
«me
);

77 
BOOL
 
	`CSLﬂdedU£r_dñëeAŒ
 ();

88 
	$CSEº‹_t
 (
	tCSLﬂdedU£rCÆlback
)(
	tCSU£r_t
 * 
	tpCSU£r
,

89 
	tödex
, * 
	tpVoid
);

90 
	`CSLﬂdedU£r_íum
(
CSLﬂdedU£rCÆlback
 * 
pCÆlback
,

91 * 
pVoid
);

107 
BOOL
 
	`CSU£rLi°_lﬂd
(* 
uæ
, * 
ªœãdName
);

129 
	$CSEº‹_t
 (
	tCSU£rLi°CÆlback
)(* 
	tu£∫ame
, * 
	tuæ
,

130 
	tödex
, * 
	tpVoid
);

131 
	`CSU£rLi°_íum
(
CSU£rLi°CÆlback
 * 
pCÆlback
, * 
pVoid
);

139 
BOOL
 
	`CSAµ_ªgi°îDeÁu…U£rByName
(* 
u£r
, * 
∑ssw‹d
);

140 
CSU£r_t
 * 
	`CSAµ_ªgi°îU£rByName
(* 
u£r
, * 
∑ssw‹d
);

141 
BOOL
 
	`CSAµ_£tDeÁu…U£r
(
CSU£r_t
 * 
pCSU£r
);

142 
BOOL
 
	`CSAµ_checkU£r
(
CSU£r_t
 * 
pCSU£r
);

143 
BOOL
 
	`CSAµ_uƒegi°îDeÁu…U£r
();

144 
BOOL
 
	`CSAµ_uƒegi°îU£r
(
CSU£r_t
 * 
pCSU£r
);

177 (
	tCSAµ_u£rCÆlback
)(
	tCSU£r_t
 * 
	tpCSU£r
, * 
	tpVoid
);

178 
BOOL
 
	`CSAµ_ªgi°îAµ
(
CSDi•osôi⁄_ˇŒback
 * 
pCÆlback
,

179 
CSDi•osôi⁄_¸ôîü
 
¸ôîü
,

180 
CSAµ_u£rCÆlback
 * 
pU£rCÆlback
,

181 * 
pVoid
);

182 
BOOL
 
	`CSAµ_uƒegi°îAµ
();

201 
BOOL
 
	`CSAµ_ªgi°îReq
(
HTReque°
* 
pReq
, 
CSU£r_t
 * 
pCSU£r
,

202 
CSDi•osôi⁄_ˇŒback
 
ˇŒback
,

203 
CSDi•osôi⁄_¸ôîü
 
¸ôîü
,

204 * 
pVoid
);

206 
BOOL
 
	`CSAµ_uƒegi°îReq
(
HTReque°
* 
pReq
);

208 
HTReque°
 * 
	`CSAµ_‹igöÆReque°
(HTReque°* 
pReq
);

219 
BOOL
 
	`CSAµ_œbñ
(
HTReque°
 * 
pReq
, 
CSLabñ_t
 * 
pCSLabñ
);

231 * 
	`CSAµ_libøryVîsi⁄
();

233 
HTC⁄vîãr
 
CSP¨£MachRód
;

234 
HTC⁄vîãr
 
CSP¨£U£r
;

235 
HTC⁄vîãr
 
CSP¨£Labñ
;

237 
	`CSLabñ_ouçut
(
CSLabñ_t
 * 
pCSLabñ
, 
HTSåóm
 * 
pSåóm
);

	@PICS-client/src/CSLL.h

25 #i‚de‡
CSLL_H


26 
	#CSLL_H


	)

41 
	mCSLLTC_LIST
 = 1,

42 
	mCSLLTC_SERVICE
,

43 
	mCSLLTC_LABEL
,

44 
	mCSLLTC_LABTREE
,

45 
	mCSLLTC_SINGLE
,

46 
	mCSLLTC_RATING
,

47 
	mCSLLTC_RANGE
,

48 
	mCSLLTC_AWKWARD
,

49 
	mCSLLTC_NORAT
,

50 
	mCSLLTC_SRVERR
,

51 
	mCSLLTC_LABERR
,

52 
	mCSLLTC_EXTEN
,

53 
	mCSLLTC_EXTDATA
,

54 
	mCSLLTC_COUNT


55 } 
	tCSLLTC_t
;

65 
CSLLD©a_s
 
	tCSLLD©a_t
;

66 
	#CSLabñ_œbñNumbî
(
S
Ë(S->
cuºítLabñNumbî
)

	)

77 
SèãRë_t
 
	tLabñT¨gëCÆlback_t
(
	tCSLabñ_t
 * 
	tpCSLabñ
,

78 
	tCSP¨£_t
 * 
	tpCSP¨£
,

79 
	tCSLLTC_t
 
	tèrgë
, 
	tBOOL
 
	t˛o£d
,

80 * 
	tpVoid
);

91 
SèãRë_t
 
	tLLEº‹H™dÀr_t
(
	tCSLabñ_t
 * 
	tpCSLabñ
,

92 
	tCSP¨£_t
 * 
	tpCSP¨£
, c⁄° * 
	ttokí
,

93 
	tdem¨k
, 
	tSèãRë_t
 
	tîr‹Code
);

106 
CSP¨£_t
 * 
CSP¨£_√wLabñ
(

107 
LabñT¨gëCÆlback_t
 * 
pLabñT¨gëCÆlback
,

108 
LLEº‹H™dÀr_t
 * 
pLLEº‹H™dÀr
);

109 
BOOL
 
CSP¨£_dñëeLabñ
(
CSP¨£_t
 *);

110 
CSLabñ_t
 * 
CSP¨£_gëLabñ
(
CSP¨£_t
 * 
me
);

111 
CSLabñ_t
 * 
CSLabñ_c›y
(CSLabñ_à* 
ﬁd
);

112 
CSLabñ_‰ì
(
CSLabñ_t
 * 
me
);

114 * 
CSLabñ_gëSîvi˚Name
(
CSLabñ_t
 * 
pCSLabñ
);

115 
CSLabñ_gëLabñNumbî
(
CSLabñ_t
 * 
pCSLabñ
);

116 * 
CSLabñ_gëR©ögName
(
CSLabñ_t
 * 
pCSLabñ
);

117 * 
CSLabñ_gëR©ögSå
(
CSLabñ_t
 * 
pCSLabñ
);

118 
R™ge_t
 * 
CSLabñ_gëLabñR©ögR™ge
(
CSLabñ_t
 * 
pCSLabñ
);

134 
CSEº‹_t
 
	tCSLabñ_ˇŒback_t
(
	tCSLabñ_t
 *, 
	tSèã_P¨ms_t
 *,

135 c⁄° *, * 
	tpVoid
);

136 
CSEº‹_t
 
	tCSLabñ_ôî©‹_t
(
	tCSLabñ_t
 *,

137 
	tCSLabñ_ˇŒback_t
 *,

138 
	tSèã_P¨ms_t
 *, const *,

139 * 
	tpVoid
);

147 
CSLabñ_ôî©‹_t
 
CSLabñ_ôî©eSîvi˚s
;

148 
CSLabñ_ôî©‹_t
 
CSLabñ_ôî©eLabñs
;

149 
CSLabñ_ôî©‹_t
 
CSLabñ_ôî©eSögÀLabñs
;

150 
CSLabñ_ôî©‹_t
 
CSLabñ_ôî©eLabñR©ögs
;

161 
HTLi°
 * 
CSLLD©a_gëAŒSögÀLabñs
(
CSLabñ_t
 * 
pCSLabñ
);

162 
FVÆ_t
 
CSLabñ_øtögsIn˛udeFVÆ
(
CSLabñ_t
 * 
pCSLabñ
,

163 
FVÆ_t
 * 
u£rVÆue
);

164 
FVÆ_t
 
CSLabñ_øtögsIn˛udeR™ge
(
CSLabñ_t
 * 
pCSLabñ
,

165 
R™ge_t
 * 
pU£rR™ge
);

166 
FVÆ_t
 
CSLabñ_øtögsIn˛udeR™ges
(
CSLabñ_t
 * 
pCSLabñ
,

167 
HTLi°
 * 
u£rR™ges
);

	@PICS-client/src/CSLLOut.c

1 
	~"WWWLib.h
"

2 
	~"CSLUtûs.h
"

3 
	~"CSLL.h
"

4 
	~"CSLLSt.h
"

7 
	s_HTSåóm
 {

8 c⁄° 
HTSåómCœss
 * 
	miß
;

12 
PUBLIC
 
BOOL
 
	$ps
(
HTSåóm
 * 
pSåóm
, c⁄° * 
fmt
, ...)

14 
va_li°
 
li°
;

15 
•a˚
[257];

17 
	`va_°¨t
(
li°
, 
fmt
);

18 
	`v•rötf
(
•a˚
, 
fmt
, 
li°
);

19 
	`va_íd
(
li°
);

20  ((*
pSåóm
->
iß
->
put_°rög
)’Såóm, 
•a˚
));

21 
	}
}

23 
	sSèã_P¨ms_s
 {

24 
CSLabñ_t
 * 
	mpCSLabñ
;

25 
HTSåóm
 * 
	mpSåóm
;

28 
	#OUTPUT_OPTION_TOKEN_BVAL
(
°r
, 
loˇl
) \

29 i‡(
	`BVÆ_öôülized
(
loˇl
))\

30 
	`ps
(
pSåóm
, 
°r
" %†", 
	`BVÆ_vÆue
(
loˇl
Ë? "YES" : "NO");

	)

31 
	#OUTPUT_OPTION_TOKEN_FVAL
(
°r
, 
loˇl
) \

32 i‡(
	`FVÆ_öôülized
(
loˇl
))\

33 
	`ps
(
pSåóm
, 
°r
" %.1‡", 
	`FVÆ_vÆue
(
loˇl
));

	)

34 
	#OUTPUT_OPTION_TOKEN_SVAL
(
°r
, 
loˇl
) \

35 i‡(
	`SVÆ_öôülized
(
loˇl
))\

36 
	`ps
(
pSåóm
, 
°r
" \"%s\" ", 
	`SVÆ_vÆue
(
loˇl
));

	)

37 
	#OUTPUT_OPTION_TOKEN_DVAL
(
°r
, 
loˇl
) \

38 i‡(
	`DVÆ_öôülized
(
loˇl
))\

39 
	`ps
(
pSåóm
, 
°r
" \"%s\" ", 
	`DVÆ_vÆue
(
loˇl
));

	)

40 
PRIVATE
 
	$LabñO±i⁄s_ouçut
(
LabñO±i⁄s_t
 * 
me
, 
HTSåóm
 * 
pSåóm
)

42 
HTLi°
 * 
commíts
;

43 * 
commít
;

44 
	`OUTPUT_OPTION_TOKEN_DVAL
("©", &
me
->
©
)

45 
	`OUTPUT_OPTION_TOKEN_SVAL
("by", &
me
->
by
)

46 
	`OUTPUT_OPTION_TOKEN_SVAL
("com∂ëe_œbñ", &
me
->
com∂ëe_œbñ
)

47 
	`OUTPUT_OPTION_TOKEN_SVAL
("f‹", &
me
->
fur
)

48 
	`OUTPUT_OPTION_TOKEN_BVAL
("gíîic", &
me
->
gíîic
)

49 
	`OUTPUT_OPTION_TOKEN_SVAL
("MIC-md5", &
me
->
MIC_md5
)

50 
	`OUTPUT_OPTION_TOKEN_DVAL
("⁄", &
me
->
⁄
)

51 
	`OUTPUT_OPTION_TOKEN_SVAL
("sig«tuª-PKCS", &
me
->
sig«tuª_PKCS
)

52 
	`OUTPUT_OPTION_TOKEN_DVAL
("u¡û", &
me
->
u¡û
)

53 
commíts
 = 
me
->comments;

54 (
commít
 = (*)
	`HTLi°_√xtObje˘
(
commíts
)))

55 
	`ps
(
pSåóm
, "commíà\"%s\" ", 
commít
);

56  
HT_OK
;

57 
	}
}

59 
PRIVATE
 
	$R™ge_ouçut
(
R™ge_t
 * 
pR™ge
, 
HTSåóm
 * 
pSåóm
)

61 
	`ps
(
pSåóm
, "%.1f", 
	`FVÆ_vÆue
(&
pR™ge
->
mö
));

62 i‡(
	`FVÆ_öôülized
(&
pR™ge
->
max
))

63 
	`ps
(
pSåóm
, ":%.1f", 
	`FVÆ_vÆue
(&
pR™ge
->
max
));

64 
	`ps
(
pSåóm
, " ");

65  
HT_OK
;

66 
	}
}

68 
	#LPARENSTR
 "("

	)

69 
	#RPARENSTR
 ")"

	)

71 
PRIVATE
 
CSLabñ_ˇŒback_t
 
	gCSLLOut_ouçutR©ögs
;

72 
PRIVATE
 
CSEº‹_t
 
	$CSLLOut_ouçutR©ögs
(
CSLabñ_t
 * 
pCSLabñ
, 
Sèã_P¨ms_t
 * 
pP¨ms
, c⁄° * 
idítifõr
, * 
pVoid
)

74 
R™ge_t
 * 
pR™ge
;

75 
LabñR©ög_t
 * 
pLabñR©ög
 = 
	`CSLabñ_gëLabñR©ög
(
pCSLabñ
);

76 
	`ps
(
pP¨ms
->
pSåóm
, "%†", 
	`SVÆ_vÆue
(&
pLabñR©ög
->
idítifõr
));

77 i‡(
	`FVÆ_öôülized
(&
pLabñR©ög
->
vÆue
))

78 
	`ps
(
pP¨ms
->
pSåóm
, "%.1‡", 
	`FVÆ_vÆue
(&
pLabñR©ög
->
vÆue
));

79 i‡(
pLabñR©ög
->
ønges
) {

80 
HTLi°
 * 
ønges
 = 
pLabñR©ög
->ranges;

81 
	`ps
(
pP¨ms
->
pSåóm
, 
LPARENSTR
);

82 (
pR™ge
 = (
R™ge_t
 *Ë
	`HTLi°_√xtObje˘
(
ønges
)))

83 
	`R™ge_ouçut
(
pR™ge
, 
pP¨ms
->
pSåóm
);

84 
	`ps
(
pP¨ms
->
pSåóm
, 
RPARENSTR
);

86  
HT_OK
;

87 
	}
}

89 
PRIVATE
 
CSLabñ_ˇŒback_t
 
	gCSLLOut_ouçutSögÀLabñ
;

90 
PRIVATE
 
CSEº‹_t
 
	$CSLLOut_ouçutSögÀLabñ
(
CSLabñ_t
 * 
pCSLabñ
, 
Sèã_P¨ms_t
 * 
pP¨ms
, c⁄° * 
idítifõr
, * 
pVoid
)

92 
CSEº‹_t
 
ªt
;

93 
SögÀLabñ_t
 * 
pSögÀLabñ
 = 
	`CSLabñ_gëSögÀLabñ
(
pCSLabñ
);

94 
	`LabñO±i⁄s_ouçut
(
pSögÀLabñ
->
pLabñO±i⁄s
, 
pP¨ms
->
pSåóm
);

95 
	`ps
(
pP¨ms
->
pSåóm
, "∏"
LPARENSTR
);

96 
ªt
 = 
	`CSLabñ_ôî©eLabñR©ögs
(
pP¨ms
->
pCSLabñ
, 
CSLLOut_ouçutR©ögs
,ÖParms, 0, 0);

97 
	`ps
(
pP¨ms
->
pSåóm
, 
RPARENSTR
" ");

98  
ªt
;

99 
	}
}

101 
PRIVATE
 
CSLabñ_ˇŒback_t
 
	gCSLLOut_ouçutLabñ
;

102 
PRIVATE
 
CSEº‹_t
 
	$CSLLOut_ouçutLabñ
(
CSLabñ_t
 * 
pCSLabñ
, 
Sèã_P¨ms_t
 * 
pP¨ms
, c⁄° * 
idítifõr
, * 
pVoid
)

104 
CSEº‹_t
 
ªt
;

105 
Labñ_t
 * 
pLabñ
 = 
	`CSLabñ_gëLabñ
(
pCSLabñ
);

106 i‡(
pLabñ
->
sögÀLabñs
)

107 
	`ps
(
pP¨ms
->
pSåóm
, 
LPARENSTR
" ");

108 
ªt
 = 
	`CSLabñ_ôî©eSögÀLabñs
(
pP¨ms
->
pCSLabñ
, 
CSLLOut_ouçutSögÀLabñ
,ÖParms, 0, 0);

109 i‡(
pLabñ
->
sögÀLabñs
)

110 
	`ps
(
pP¨ms
->
pSåóm
, 
RPARENSTR
" ");

111  
ªt
;

112 
	}
}

114 
PRIVATE
 
CSLabñ_ˇŒback_t
 
	gCSLLOut_ouçutSîvi˚
;

115 
PRIVATE
 
CSEº‹_t
 
	$CSLLOut_ouçutSîvi˚
(
CSLabñ_t
 * 
pCSLabñ
, 
Sèã_P¨ms_t
 * 
pP¨ms
, c⁄° * 
idítifõr
, * 
pVoid
)

117 
CSEº‹_t
 
ªt
;

118 
Sîvi˚Info_t
 * 
pSîvi˚Info
 = 
	`CSLabñ_gëSîvi˚Info
(
pCSLabñ
);

119 i‡(!
	`SVÆ_öôülized
(&
pSîvi˚Info
->
øtög_£rvi˚
)) {

120 
	`ps
(
pP¨ms
->
pSåóm
, "%s ", "<serviceÉrror>");

121  
HT_OK
;

123 
	`ps
(
pP¨ms
->
pSåóm
, "\"%s\" ", 
	`SVÆ_vÆue
(&
pSîvi˚Info
->
øtög_£rvi˚
));

124 
	`LabñO±i⁄s_ouçut
(
pSîvi˚Info
->
pLabñO±i⁄s
, 
pP¨ms
->
pSåóm
);

125 
	`ps
(
pP¨ms
->
pSåóm
, "l ");

126 
ªt
 = 
	`CSLabñ_ôî©eLabñs
(
pP¨ms
->
pCSLabñ
, 
CSLLOut_ouçutLabñ
,ÖP¨ms, 0, 
pVoid
);

127  
ªt
;

128 
	}
}

130 
PUBLIC
 
	$CSLabñ_ouçut
(
CSLabñ_t
 * 
pCSLabñ
, 
HTSåóm
 * 
pSåóm
)

132 
CSEº‹_t
 
ªt
;

133 
Sèã_P¨ms_t
 
∑rms
;

134 
∑rms
.
pCSLabñ
 =ÖCSLabel;

135 
∑rms
.
pSåóm
 =ÖStream;

136 
	`ps
(
∑rms
.
pSåóm
, 
LPARENSTR
"PICS-%.1‡", 
	`FVÆ_vÆue
(&
	`CSLabñ_gëCSLLD©a
(
pCSLabñ
)->
vîsi⁄
));

137 
ªt
 = 
	`CSLabñ_ôî©eSîvi˚s
(
∑rms
.
pCSLabñ
, 
CSLLOut_ouçutSîvi˚
, &parms, 0, 0);

138 
	`ps
(
∑rms
.
pSåóm
, 
RPARENSTR
"\n");

139  
ªt
;

140 
	}
}

142 
HTSåóm
 * 
Kwik_√w
 ();

143 
Kwik_‰ì
 (
HTSåóm
 * 
me
);

145 
PUBLIC
 
	$CSLabñ_dump
(
CSLabñ_t
 * 
pCSLabñ
)

147 
HTSåóm
 * 
pKwik
 = 
	`Kwik_√w
();

148 
CSLabñ_t
 * 
pCSLabñC›y
 = 
	`CSLabñ_c›y
(
pCSLabñ
);

149 
	`CSLabñ_ouçut
(
pCSLabñC›y
, 
pKwik
);

150 
	`CSLabñ_‰ì
(
pCSLabñC›y
);

151 
	`Kwik_‰ì
(
pKwik
);

152 
	}
}

	@PICS-client/src/CSLLSt.h

32 #i‚de‡
CSLLST_H


33 
	#CSLLST


	)

46 
LabñEº‹Code_t
 
	mîr‹Code
;

47 
HTLi°
 * 
	mex∂™©i⁄s
;

48 } 
	tLabñEº‹_t
;

57 
Exãnsi⁄D©a_s
 
	tExãnsi⁄D©a_t
;

58 
	sExãnsi⁄D©a_s
 {

59 * 
	mãxt
;

60 
BOOL
 
	mquŸed
;

61 
HTLi°
 * 
	mm‹eD©a
;

62 
Exãnsi⁄D©a_t
 * 
	mpP¨ítExãnsi⁄D©a
;

73 
BOOL
 
	mm™d©‹y
;

74 
SVÆ_t
 
	muæ
;

75 
HTLi°
 * 
	mexãnsi⁄D©a
;

76 } 
	tExãnsi⁄_t
;

85 
LabñO±i⁄s_s
 
	tLabñO±i⁄s_t
;

86 
	sLabñO±i⁄s_s
 {

87 
DVÆ_t
 
	m©
;

88 
SVÆ_t
 
	mby
;

89 
SVÆ_t
 
	mcom∂ëe_œbñ
;

90 
BVÆ_t
 
	mgíîic
;

91 
SVÆ_t
 
	mfur
;

92 
SVÆ_t
 
	mMIC_md5
;

93 
DVÆ_t
 
	m⁄
;

94 
SVÆ_t
 
	msig«tuª_PKCS
;

95 
DVÆ_t
 
	mu¡û
;

96 
HTLi°
 * 
	mcommíts
;

97 
HTLi°
 * 
	mexãnsi⁄s
;

99 
LabñO±i⁄s_t
 * 
	mpP¨ítLabñO±i⁄s
;

111 
SVÆ_t
 
	midítifõr
;

112 
FVÆ_t
 
	mvÆue
;

113 
HTLi°
 * 
	mønges
;

114 } 
	tLabñR©ög_t
;

124 
LabñO±i⁄s_t
 * 
	mpLabñO±i⁄s
;

125 
HTLi°
 * 
	mœbñR©ögs
;

126 } 
	tSögÀLabñ_t
;

137 
LabñEº‹_t
 * 
	mpLabñEº‹
;

138 
HTLi°
 * 
	msögÀLabñs
;

139 
SögÀLabñ_t
 * 
	mpSögÀLabñ
;

140 } 
	tLabñ_t
;

150 
SVÆ_t
 
	møtög_£rvi˚
;

151 
LabñO±i⁄s_t
 * 
	mpLabñO±i⁄s
;

152 
LabñEº‹_t
 * 
	mpLabñEº‹
;

153 
HTLi°
 * 
	mœbñs
;

154 } 
	tSîvi˚Info_t
;

163 
	sCSLLD©a_s
 {

164 
FVÆ_t
 
	mvîsi⁄
;

165 
LabñEº‹_t
 * 
	mpLabñEº‹
;

166 
HTLi°
 * 
	m£rvi˚Infos
;

169 
BOOL
 
	mcom∂ëe
;

170 
BOOL
 
	mhasTªe
;

171 
	mm™d©‹yExãnsi⁄s
;

181 
CSLLD©a_t
 * 
CSLabñ_gëCSLLD©a
(
CSLabñ_t
 * 
me
);

182 
LabñEº‹_t
 * 
CSLabñ_gëLabñEº‹
(
CSLabñ_t
 * 
pCSLabñ
);

183 
LabñO±i⁄s_t
 * 
CSLabñ_gëLabñO±i⁄s
(
CSLabñ_t
 * 
pCSLabñ
);

184 
Sîvi˚Info_t
 * 
CSLabñ_gëSîvi˚Info
(
CSLabñ_t
 * 
pCSLabñ
);

185 
Labñ_t
 * 
CSLabñ_gëLabñ
(
CSLabñ_t
 * 
pCSLabñ
);

186 
SögÀLabñ_t
 * 
CSLabñ_gëSögÀLabñ
(
CSLabñ_t
 * 
pCSLabñ
);

187 
LabñR©ög_t
 * 
CSLabñ_gëLabñR©ög
(
CSLabñ_t
 * 
pCSLabñ
);

	@PICS-client/src/CSLLURLs.c

1 
	~"WWWLib.h
"

2 
	~"CSLUtûs.h
"

3 
	~"CSLL.h
"

4 
	~"CSLLSt.h
"

6 
	sSèã_P¨ms_s
 {

7 
CSLabñ_t
 * 
	mpCSLabñ
;

8 
HTLi°
 * 
	mpLi°
;

11 
PRIVATE
 
CSLabñ_ˇŒback_t
 
	gCSLLHTLi°_ouçutSögÀLabñ
;

12 
PRIVATE
 
CSEº‹_t
 
	$CSLLHTLi°_ouçutSögÀLabñ
(
CSLabñ_t
 * 
pCSLabñ
, 
Sèã_P¨ms_t
 * 
pP¨ms
, c⁄° * 
idítifõr
, * 
pVoid
)

14 
SögÀLabñ_t
 * 
pSögÀLabñ
 = 
	`CSLabñ_gëSögÀLabñ
(
pCSLabñ
);

15 
	`HTLi°_≠≥ndObje˘
(
pP¨ms
->
pLi°
, (*)
pSögÀLabñ
);

16  
CSEº‹_OK
;

17 
	}
}

19 
PRIVATE
 
CSLabñ_ˇŒback_t
 
	gCSLLHTLi°_ouçutLabñ
;

20 
PRIVATE
 
CSEº‹_t
 
	$CSLLHTLi°_ouçutLabñ
(
CSLabñ_t
 * 
pCSLabñ
, 
Sèã_P¨ms_t
 * 
pP¨ms
, c⁄° * 
idítifõr
, * 
pVoid
)

22  
	`CSLabñ_ôî©eSögÀLabñs
(
pP¨ms
->
pCSLabñ
, 
CSLLHTLi°_ouçutSögÀLabñ
,ÖP¨ms, 0, 
pVoid
);

23 
	}
}

25 
PRIVATE
 
CSLabñ_ˇŒback_t
 
	gCSLLHTLi°_ouçutSîvi˚
;

26 
PRIVATE
 
CSEº‹_t
 
	$CSLLHTLi°_ouçutSîvi˚
(
CSLabñ_t
 * 
pCSLabñ
, 
Sèã_P¨ms_t
 * 
pP¨ms
, c⁄° * 
idítifõr
, * 
pVoid
)

28  
	`CSLabñ_ôî©eLabñs
(
pP¨ms
->
pCSLabñ
, 
CSLLHTLi°_ouçutLabñ
,ÖP¨ms, 0, 
pVoid
);

29 
	}
}

31 
PUBLIC
 
HTLi°
 * 
	$CSLLD©a_gëAŒSögÀLabñs
(
CSLabñ_t
 * 
pCSLabñ
)

33 
CSEº‹_t
 
îr
;

34 
Sèã_P¨ms_t
 
∑rms
;

36 i‡(
	`CSLabñ_gëCSLLD©a
(
pCSLabñ
)->
hasTªe
)

38 
∑rms
.
pCSLabñ
 =ÖCSLabel;

39 
∑rms
.
pLi°
 = 
	`HTLi°_√w
();

40 
îr
 = 
	`CSLabñ_ôî©eSîvi˚s
(
∑rms
.
pCSLabñ
, 
CSLLHTLi°_ouçutSîvi˚
, &parms, 0, 0);

41  
∑rms
.
pLi°
;

42 
	}
}

	@PICS-client/src/CSLUtils.h

24 #i‚de‡
CSLUTILS_H


25 
	#CSLUTILS_H


	)

31 
	~"HTUtûs.h
"

32 
	~"HTLi°.h
"

67 íum {
	mBVÆ_UNINITIALIZED
 = 0,
	mBVÆ_YES
 = 1, 
	mBVÆ_INITIALIZED
 = 2} 
	m°©e
;

68 } 
	tBVÆ_t
;

70 
BOOL
 
BVÆ_ªadVÆ
(
BVÆ_t
 * 
pBVÆ
, c⁄° * 
vÆueSå
);

71 
BOOL
 
BVÆ_öôülized
(c⁄° 
BVÆ_t
 * 
pBVÆ
);

72 
BOOL
 
BVÆ_vÆue
(c⁄° 
BVÆ_t
 * 
pBVÆ
);

73 
BVÆ_˛ór
(
BVÆ_t
 * 
pBVÆ
);

82 
BVÆ_£t
(
BVÆ_t
 * 
pBVÆ
, 
BOOL
 
vÆue
);

92 
	mvÆue
;

93 íum {
	mFVÆ_UNINITIALIZED
 = 0, 
	mFVÆ_VALUE
 = 1, 
	mFVÆ_NEGATIVE_INF
 = 2,

94 
	mFVÆ_POSITIVE_INF
 = 3} 
	m°©
;

95 } 
	tFVÆ_t
;

97 
BOOL
 
FVÆ_ªadVÆ
(
FVÆ_t
 * 
pFVÆ
, c⁄° * 
vÆueSå
);

98 
BOOL
 
FVÆ_öôülized
(c⁄° 
FVÆ_t
 * 
pFVÆ
);

99 
FVÆ_vÆue
(c⁄° 
FVÆ_t
 * 
pFVÆ
);

100 
FVÆ_˛ór
(
FVÆ_t
 * 
pFVÆ
);

115 
FVÆ_£t
(
FVÆ_t
 * 
pFVÆ
, 
vÆue
);

116 
FVÆ_£tInföôe
(
FVÆ_t
 * 
pFVÆ
, 
BOOL
 
√g©ive
);

117 
BOOL
 
FVÆ_isZîo
(c⁄° 
FVÆ_t
 * 
pFVÆ
);

118 
FVÆ_isInföôe
(c⁄° 
FVÆ_t
 * 
pFVÆ
);

119 
BOOL
 
FVÆ_√¨îZîo
(c⁄° 
FVÆ_t
 * 
pRef
, c⁄° FVÆ_à* 
pCheck
);

120 
FVÆ_t
 
FVÆ_möus
(c⁄° FVÆ_à* 
pBig
, c⁄° FVÆ_à* 
pSmÆl
);

121 * 
FVÆ_toSå
(
FVÆ_t
 * 
pFVÆ
);

129 
	#FVÆ_NEW_UNINITIALIZED
 {(Ë0.0, 
FVÆ_UNINITIALIZED
}

	)

130 
	#FVÆ_NEW_NEGATIVE_INF
 {(Ë0.0, 
FVÆ_NEGATIVE_INF
}

	)

131 
	#FVÆ_NEW_POSITIVE_INF
 {(Ë0.0, 
FVÆ_POSITIVE_INF
}

	)

132 
	#FVÆ_NEW_ZERO
 {(Ë0.0, 
FVÆ_VALUE
}

	)

143 * 
	mvÆue
;

144 
BOOL
 
	möôülized
;

145 } 
	tSVÆ_t
;

147 
BOOL
 
SVÆ_ªadVÆ
(
SVÆ_t
 * 
pSVÆ
, c⁄° * 
vÆueSå
);

148 
BOOL
 
SVÆ_öôülized
(c⁄° 
SVÆ_t
 * 
pSVÆ
);

149 * 
SVÆ_vÆue
(c⁄° 
SVÆ_t
 * 
pSVÆ
);

150 
SVÆ_˛ór
(
SVÆ_t
 * 
pSVÆ
);

160 * 
	mvÆue
;

161 
BOOL
 
	möôülized
;

162 
	myór
;

163 
	mm⁄th
;

164 
	mday
;

165 
	mhour
;

166 
	mmöuã
;

167 
	mtimeZ⁄eHours
;

168 
	mtimeZ⁄eMöuãs
;

169 } 
	tDVÆ_t
;

171 
BOOL
 
DVÆ_ªadVÆ
(
DVÆ_t
 * 
pDVÆ
, c⁄° * 
vÆueSå
);

172 
BOOL
 
DVÆ_öôülized
(c⁄° 
DVÆ_t
 * 
pDVÆ
);

173 * 
DVÆ_vÆue
(c⁄° 
DVÆ_t
 * 
pDVÆ
);

174 
DVÆ_˛ór
(
DVÆ_t
 * 
pDVÆ
);

183 
DVÆ_com∑ª
(c⁄° 
DVÆ_t
 * 
a
, c⁄° DVÆ_à* 
b
);

193 
FVÆ_t
 
	mmö
;

194 
FVÆ_t
 
	mmax
;

195 } 
	tR™ge_t
;

207 * 
R™ge_toSå
(
R™ge_t
 * 
pR™ge
);

208 
FVÆ_t
 
R™ge_g≠
(
R™ge_t
 * 
a
, R™ge_à* 
b
);

215 
	#R™ge_NEW_UNINITIALIZED
 {
FVÆ_NEW_UNINITIALIZED
, \

216 
FVÆ_NEW_UNINITIALIZED
}

	)

231 
CSP¨£_s
 
	tCSP¨£_t
;

232 íum {
	mCSDoM‹e_m‹e
, 
	mCSDoM‹e_d⁄e
, 
	mCSDoM‹e_îr‹
} 
	tCSDoM‹e_t
;

233 
CSDoM‹e_t
 
CSP¨£_∑r£Chunk
 (
CSP¨£_t
 * 
pCSP¨£
, c⁄° * 
±r
,

234 
Àn
, * 
pVoid
);

248 
	tCSP¨£TC_t
;

254 íum {
	mSèãRë_OK
 = 0, 
	mSèãRë_DONE
 = 1, 
	mSèãRë_WARN
 = 0x10,

255 
	mSèãRë_WARN_NO_MATCH
 = 0x11, 
	mSèãRë_WARN_BAD_PUNCT
 = 0x12,

256 
	mSèãRë_ERROR
 = 0x100, 
	mSèãRë_ERROR_BAD_CHAR
 = 0x101

257 } 
	tSèãRë_t
;

282 
T¨gëObje˘_s
 
	tT¨gëObje˘_t
;

283 
SèãRë_t
 
	tT¨gëCh™geCÆlback_t
(
	tCSP¨£_t
 * 
	tpCSP¨£
,

284 
	tT¨gëObje˘_t
 * 
	tpT¨gëObje˘
,

285 
	tCSP¨£TC_t
 
	tèrgëCh™ge
, 
	tBOOL
 
	t˛o£d
,

286 * 
	tpVoid
);

293 
SèãRë_t
 
	tP¨£Eº‹H™dÀr_t
(
	tCSP¨£_t
 * 
	tpCSP¨£
,

294 c⁄° * 
	ttokí
,

295 
	tdem¨k
, 
	tSèãRë_t
 
	tîr‹Code
);

304 íum {
	mCSCom∂ëíess_möimÆ
, 
	mCSCom∂ëíess_sh‹t
,

305 
	mCSCom∂ëíess_fuŒ
, 
	mCSCom∂ëíess_sig√d
} 
	tCSCom∂ëíess_t
;

306 * 
CSLi°_ac˚±Labñs
(
HTLi°
 * 
pSîvi˚Li°
,

307 
CSCom∂ëíess_t
 
com∂ëíess
);

316 íum {
	mCSO±i⁄_gíîic
, 
	mCSO±i⁄_n‹mÆ
, 
	mCSO±i⁄_åì
,

317 
	mCSO±i⁄_gíîicTªe
} 
	tCSO±i⁄_t
;

318 * 
CSLi°_gëLabñs
(
HTLi°
 * 
pSîvi˚Li°
, 
CSO±i⁄_t
 
›ti⁄
,

319 
CSCom∂ëíess_t
 
com∂ëíess
);

327 * 
CSLi°_po°Labñs
(
HTLi°
 * 
pSîvi˚Li°
, * 
uæ
,

328 
CSO±i⁄_t
 
›ti⁄
,

329 
CSCom∂ëíess_t
 
com∂ëíess
);

337 
CSLabñ_s
 
	tCSLabñ_t
;

345 
CSU£r_s
 
	tCSU£r_t
;

353 
CSMachRód_s
 
	tCSMachRód_t
;

362 
	mœbñEº‹_NA
 = 0,

363 
	mœbñEº‹_NO_RATINGS
,

364 
	mœbñEº‹_UNAVAILABLE
,

365 
	mœbñEº‹_DENIED
,

366 
	mœbñEº‹_NOT_LABELED
,

367 
	mœbñEº‹_UNKNOWN


368 } 
	tLabñEº‹Code_t
;

375 
Sèã_P¨ms_s
 
	tSèã_P¨ms_t
;

378 
	mCSEº‹_OK
 = 0,

379 
	mCSEº‹_YES
 = 0,

380 
	mCSEº‹_NO
 = 1,

381 
	mCSEº‹_BUREAU_NONE
,

382 
	mCSEº‹_RATING_VALUE
,

383 
	mCSEº‹_RATING_RANGE
,

384 
	mCSEº‹_RATING_MISSING
,

385 
	mCSEº‹_SINGLELABEL_MISSING
,

386 
	mCSEº‹_LABEL_MISSING
,

387 
	mCSEº‹_SERVICE_MISSING
,

388 
	mCSEº‹_CATEGORY_MISSING
,

389 
	mCSEº‹_ENUM_MISSING
,

390 
	mCSEº‹_BAD_PARAM
,

391 
	mCSEº‹_BAD_DATE
,

392 
	mCSEº‹_SERVICE_NONE
,

393 
	mCSEº‹_RATING_NONE
,

394 
	mCSEº‹_APP


395 } 
	tCSEº‹_t
;

	@PICS-client/src/CSLabel.c

1 
	~"wwwsys.h
"

3 
	~"HTLi°.h
"

4 
	~"HTSåög.h
"

5 
	~"CSP¨£.h
"

6 
	~"CSLL.h
"

7 
	~"CSLLSt.h
"

9 
	#GëCSLabñ
(
A
Ë((A)->
èrgë
.
pCSLabñ
)

	)

10 
	#SETNEXTSTATE
(
èrgë
, 
subSèã
) \

11 
pCSP¨£
->
pT¨gëObje˘
 = 
èrgë
; \

12 
pCSP¨£
->
cuºítSubSèã
 = 
subSèã
;

	)

20 #ifde‡
NO_CHAR_TEST


21 
	#ch¨SëOK
(
A
, 
B
, 
C
)

	)

22 
	#CHECK_CAR_SET
(
A
)

	)

23 
	#SET_CHAR_SET
(
A
)

	)

25 íum {
	mCh¨Së_ALPHAS
 = 1, 
	mCh¨Së_DIGITS
 = 2, 
	mCh¨Së_PLUSMINUS
 = 4, 
	mCh¨Së_FORSLASH
 = 8,

26 
	mCh¨Së_EXTENS
 = 0x10, 
	mCh¨Së_BASE64_EXTRAS
 = 0x20, 
	mCh¨Së_DATE_EXTRAS
 = 0x40, 
	mCh¨Së_URL_EXTRAS
 = 0x80,

28 
	mCh¨Së_NUMBER
 = 
Ch¨Së_DIGITS
 | 
Ch¨Së_PLUSMINUS
,

29 
	mCh¨Së_ALPHANUMPM
 = 
Ch¨Së_ALPHAS
 | 
Ch¨Së_DIGITS
 | 
Ch¨Së_PLUSMINUS
,

30 
	mCh¨Së_TRANSMIT_NAME
 = 
Ch¨Së_ALPHANUMPM
 | 
Ch¨Së_FORSLASH
,

31 
	mCh¨Së_EXT_ALPHANUM
 = 
Ch¨Së_ALPHANUMPM
 | 
Ch¨Së_EXTENS
,

32 
	mCh¨Së_BASE64
 = 
Ch¨Së_ALPHAS
 | 
Ch¨Së_DIGITS
 | 
Ch¨Së_BASE64_EXTRAS
,

33 
	mCh¨Së_URL
 = 
Ch¨Së_ALPHAS
 | 
Ch¨Së_DIGITS
 | 
Ch¨Së_URL_EXTRAS
,

34 
	mCh¨Së_DATE
 = 
Ch¨Së_DIGITS
 | 
Ch¨Së_DATE_EXTRAS
,

35 
	mCh¨Së_EXT_DATA
 = 
Ch¨Së_DATE
 | 
Ch¨Së_URL
 | 
Ch¨Së_NUMBER
 | 
Ch¨Së_EXT_ALPHANUM


36 } 
	tCh¨Së_t
;

38 
PRIVATE
 
BOOL
 
ch¨SëOK
(
CSP¨£_t
 * 
pCSP¨£
, * 
checkMe
, 
Ch¨Së_t
 
£t
);

39 
	#CHECK_CAR_SET
(
A
) \

40 i‡(!
	`ch¨SëOK
(
pCSP¨£
, 
tokí
, 
A
)) \

41  
SèãRë_ERROR_BAD_CHAR
;

	)

42 
	#SET_CHAR_SET
(
A
Ë
pCSLabñ
->
èrgëCh¨Së
 = A;

	)

49 
	sCSLabñ_s
 {

50 
CSLLD©a_t
 * 
	mpCSLLD©a
;

52 
LabñEº‹_t
 * 
	mpCuºítLabñEº‹
;

53 
LabñO±i⁄s_t
 * 
	mpCuºítLabñO±i⁄s
;

54 
Exãnsi⁄_t
 * 
	mpCuºítExãnsi⁄
;

55 
Exãnsi⁄D©a_t
 * 
	mpCuºítExãnsi⁄D©a
;

57 
Sîvi˚Info_t
 * 
	mpCuºítSîvi˚Info
;

58 
Labñ_t
 * 
	mpCuºítLabñ
;

59 
	mcuºítLabñNumbî
;

60 
HTLi°
 * 
	mpCuºítLabñTªe
;

61 
SögÀLabñ_t
 * 
	mpCuºítSögÀLabñ
;

62 
LabñR©ög_t
 * 
	mpCuºítLabñR©ög
;

63 
R™ge_t
 * 
	mpCuºítR™ge
;

64 #i‚de‡
NO_CHAR_TEST


65 
Ch¨Së_t
 
	mèrgëCh¨Së
;

68 
LabñT¨gëCÆlback_t
 * 
	mpLabñT¨gëCÆlback
;

69 
LLEº‹H™dÀr_t
 * 
	mpLLEº‹H™dÀr
;

73 
PRIVATE
 
T¨gëObje˘_t
 
	gLabñLi°_èrgëObje˘
;

74 
PRIVATE
 
T¨gëObje˘_t
 
	gSîvi˚Info_èrgëObje˘
;

75 
PRIVATE
 
T¨gëObje˘_t
 
	gSîvi˚NoR©_èrgëObje˘
;

76 
PRIVATE
 
T¨gëObje˘_t
 
	gSîvi˚Eº‹_èrgëObje˘
;

77 
PRIVATE
 
T¨gëObje˘_t
 
	gLabñ_èrgëObje˘
;

78 
PRIVATE
 
T¨gëObje˘_t
 
	gLabñEº‹_èrgëObje˘
;

79 
PRIVATE
 
T¨gëObje˘_t
 
	gLabñTªe_èrgëObje˘
;

80 
PRIVATE
 
T¨gëObje˘_t
 
	gSögÀLabñ_èrgëObje˘
;

81 
PRIVATE
 
T¨gëObje˘_t
 
	gLabñR©ög_èrgëObje˘
;

82 
PRIVATE
 
T¨gëObje˘_t
 
	gLabñR©ögR™ge_èrgëObje˘
;

83 
PRIVATE
 
T¨gëObje˘_t
 
	gExãnsi⁄_èrgëObje˘
;

84 
PRIVATE
 
T¨gëObje˘_t
 
	gExãnsi⁄D©a_èrgëObje˘
;

85 
PRIVATE
 
T¨gëObje˘_t
 
	gAwkw¨d_èrgëObje˘
;

86 
PRIVATE
 
Check_t
 
	ghasTokí
;

87 
PRIVATE
 
Check_t
 
	gLabñLi°_gëVîsi⁄
;

88 
PRIVATE
 
Check_t
 
	gSîvi˚Info_gëSîvi˚Id
;

89 
PRIVATE
 
Check_t
 
	gîr‹_gëEx∂
;

90 
PRIVATE
 
Check_t
 
	ggëO±i⁄
;

91 
PRIVATE
 
Check_t
 
	ggëO±i⁄VÆue
;

92 
PRIVATE
 
Check_t
 
	gLabñR©ög_gëId
;

93 
PRIVATE
 
Check_t
 
	gLabñR©ög_gëVÆue
;

94 
PRIVATE
 
Check_t
 
	gLabñR©ögR™ge_gë
;

95 
PRIVATE
 
Check_t
 
	gisQuŸed
;

96 
PRIVATE
 
Check_t
 
	gExãnsi⁄_gëURL
;

97 
PRIVATE
 
Check_t
 
	gExãnsi⁄D©a_gëD©a
;

98 
PRIVATE
 
O≥n_t
 
	gLabñLi°_›í
;

99 
PRIVATE
 
O≥n_t
 
	gSîvi˚Info_›í
;

100 
PRIVATE
 
O≥n_t
 
	gîr‹_›í
;

101 
PRIVATE
 
O≥n_t
 
	gLabñ_›í
;

102 
PRIVATE
 
O≥n_t
 
	gLabñTªe_›í
;

103 
PRIVATE
 
O≥n_t
 
	gSögÀLabñ_›í
;

104 
PRIVATE
 
O≥n_t
 
	gLabñR©ög_›í
;

105 
PRIVATE
 
O≥n_t
 
	gLabñR©ögR™ge_›í
;

106 
PRIVATE
 
O≥n_t
 
	gAwkw¨d_›í
;

107 
PRIVATE
 
O≥n_t
 
	gExãnsi⁄_›í
;

108 
PRIVATE
 
O≥n_t
 
	gExãnsi⁄D©a_›í
;

109 
PRIVATE
 
Clo£_t
 
	gLabñLi°_˛o£
;

110 
PRIVATE
 
Clo£_t
 
	gSîvi˚Info_˛o£
;

111 
PRIVATE
 
Clo£_t
 
	gîr‹_˛o£
;

112 
PRIVATE
 
Clo£_t
 
	gLabñ_˛o£
;

113 
PRIVATE
 
Clo£_t
 
	gLabñTªe_˛o£
;

114 
PRIVATE
 
Clo£_t
 
	gSögÀLabñ_˛o£
;

115 
PRIVATE
 
Clo£_t
 
	gLabñR©ög_˛o£
;

116 
PRIVATE
 
Clo£_t
 
	gLabñR©ögR™ge_˛o£
;

117 
PRIVATE
 
Clo£_t
 
	gAwkw¨d_˛o£
;

118 
PRIVATE
 
Clo£_t
 
	gExãnsi⁄_˛o£
;

119 
PRIVATE
 
Clo£_t
 
	gExãnsi⁄D©a_˛o£
;

120 
PRIVATE
 
De°roy_t
 
	gLabñLi°_de°roy
;

121 
PRIVATE
 
De°roy_t
 
	gSîvi˚Info_de°roy
;

122 
PRIVATE
 
De°roy_t
 
	gLabñ_de°roy
;

123 
PRIVATE
 
De°roy_t
 
	gLabñTªe_de°roy
;

124 
PRIVATE
 
De°roy_t
 
	gSögÀLabñ_de°roy
;

125 
PRIVATE
 
De°roy_t
 
	gLabñR©ög_de°roy
;

126 
PRIVATE
 
De°roy_t
 
	gLabñR©ögR™ge_de°roy
;

127 
PRIVATE
 
De°roy_t
 
	gAwkw¨d_de°roy
;

128 
PRIVATE
 
De°roy_t
 
	gîr‹_de°roy
;

129 
PRIVATE
 
De°roy_t
 
	gExãnsi⁄_de°roy
;

130 
PRIVATE
 
De°roy_t
 
	gExãnsi⁄D©a_de°roy
;

131 
PRIVATE
 
Pªp_t
 
	gSîvi˚Info_˛órO±s
;

132 
PRIVATE
 
Pªp_t
 
	gLabñR©ög_√xt
;

133 
PRIVATE
 
Pªp_t
 
	gExãnsi⁄_m™d©‹y
;

134 
PRIVATE
 
Pªp_t
 
	gExãnsi⁄_√xt
;

135 
PRIVATE
 
Pªp_t
 
	gExãnsi⁄D©a_√xt
;

136 
PRIVATE
 
Pªp_t
 
	gSögÀLabñ_doClo£
;

137 
PRIVATE
 
Pªp_t
 
	gLabñ_doClo£
;

139 
PRIVATE
 
T¨gëCh™geCÆlback_t
 
	gèrgëCh™geCÆlback
;

140 
PRIVATE
 
P¨£Eº‹H™dÀr_t
 
	g∑r£Eº‹H™dÀr
;

147 
PRIVATE
 
SèãTokí_t
 
	gLabñLi°_°©eTokís
[] = {

150 { "›í", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
LabñLi°_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

151 {"gë vîsi⁄", 
SubSèã_A
, 
Pun˘_WHITE
, &
LabñLi°_gëVîsi⁄
, 0, 0, 0, &
Sîvi˚Info_èrgëObje˘
, 
SubSèã_N
, 0, 0},

152 {"íd o‡li°", 
SubSèã_C
, 
Pun˘_RPAREN
, 0, 0, 0, 0, &
LabñLi°_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_CLOSE
, 0}

154 
PRIVATE
 
T¨gëObje˘_t
 
	gLabñLi°_èrgëObje˘
 = {"LabñLi°", &
LabñLi°_›í
, &
LabñLi°_˛o£
, &
LabñLi°_de°roy
, 
LabñLi°_°©eTokís
, 
øysize
(LabñLi°_°©eTokís), 
CSLLTC_LIST
};

156 
PRIVATE
 
SèãTokí_t
 
	gSîvi˚Info_°©eTokís
[] = {

163 { "›í", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
Sîvi˚Info_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

164 { "îr‹ w/ÿid", 
SubSèã_A
, 
Pun˘_LPAREN
, 0, "îr‹", 0, 0, &
Sîvi˚NoR©_èrgëObje˘
, 
SubSèã_N
, 0, 0},

165 { "£rvi˚ id", 
SubSèã_A
, 
Pun˘_WHITE
, &
Sîvi˚Info_gëSîvi˚Id
, 0, 0, 0, &
Sîvi˚Info_èrgëObje˘
, 
SubSèã_B
, 0, 0},

166 { "£rvi˚Éº‹", 
SubSèã_B
, 
Pun˘_LPAREN
, 0, "îr‹", 0, 0, &
Sîvi˚Eº‹_èrgëObje˘
, 
SubSèã_N
, 0, 0},

167 { "£rvi˚ o±i⁄", 
SubSèã_B
, 
Pun˘_WHITE
, &
gëO±i⁄
, 0, 0, 0, &
Sîvi˚Info_èrgëObje˘
, 
SubSèã_C
, 0, 0},

168 {"£rvi˚Éxãnsi⁄", 
SubSèã_B
, 
Pun˘_LPAREN
, 0, "exãnsi⁄", 0, 0, &
Exãnsi⁄_èrgëObje˘
, 
SubSèã_N
, 0, 0},

169 { "œbñ-m¨k clo£", 
SubSèã_B
, 
Pun˘_RPAREN
, 0, "l", "œbñs", 0, &
LabñLi°_èrgëObje˘
, 
SubSèã_C
, 
Comm™d_CLOSE
|
Comm™d_CHAIN
, 0},

170 { "œbñ-m¨k", 
SubSèã_B
, 
Pun˘_WHITE
|
Pun˘_LPAREN
, 0, "l", "œbñs", 0, &
Labñ_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_CHAIN
, &
Sîvi˚Info_˛órO±s
},

171 { "›ti⁄ vÆue", 
SubSèã_C
, 
Pun˘_WHITE
, &
gëO±i⁄VÆue
, 0, 0, 0, &
Sîvi˚Info_èrgëObje˘
, 
SubSèã_B
, 0, 0},

173 { "˛o£", 
SubSèã_D
, 
Pun˘_ALL
, 0, 0, 0, 0, &
LabñLi°_èrgëObje˘
, 
SubSèã_C
, 
Comm™d_MATCHANY
|
Comm™d_CLOSE
|
Comm™d_CHAIN
, 0},

174 { "ª-íãr", 
SubSèã_E
, 
Pun˘_ALL
, 0, 0, 0, 0, &
Sîvi˚Info_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_MATCHANY
|
Comm™d_CLOSE
|
Comm™d_CHAIN
, 0},

175 { "tÿno-øt", 
SubSèã_F
, 
Pun˘_ALL
, 0, 0, 0, 0, &
Sîvi˚Info_èrgëObje˘
, 
SubSèã_G
, 
Comm™d_MATCHANY
|
Comm™d_CLOSE
|
Comm™d_CHAIN
, 0},

176 { "no-øà›íî", 
SubSèã_G
, 
Pun˘_ALL
, 0, 0, 0, 0, &
Sîvi˚NoR©_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0}

178 
PRIVATE
 
T¨gëObje˘_t
 
	gSîvi˚Info_èrgëObje˘
 = {"Sîvi˚Info", 
Sîvi˚Info_›í
, &
Sîvi˚Info_˛o£
, &
Sîvi˚Info_de°roy
, 
Sîvi˚Info_°©eTokís
, 
øysize
(Sîvi˚Info_°©eTokís), 
CSLLTC_SERVICE
};

180 
PRIVATE
 
SèãTokí_t
 
	gLabñ_°©eTokís
[] = {

184 { "›í", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
Labñ_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

185 { "sögÀÜabñ m¨k", 
SubSèã_A
, 
Pun˘_WHITE
, 0, "l", "œbñs", 0, &
Labñ_èrgëObje˘
, SubState_A, 0, 0},

186 { "åìÜabñ m¨k", 
SubSèã_A
, 
Pun˘_LPAREN
, 0, "l", "œbñs", 0, &
LabñTªe_èrgëObje˘
, 
SubSèã_N
, 0, 0},

187 { "°¨àåì", 
SubSèã_A
, 
Pun˘_LPAREN
, 0, 0, 0, 0, &
LabñTªe_èrgëObje˘
, 
SubSèã_N
, 0, 0},

188 { "œbñÉº‹", 
SubSèã_A
, 
Pun˘_LPAREN
, 0, "îr‹", 0, 0, &
LabñEº‹_èrgëObje˘
, 
SubSèã_N
, 0, 0},

189 {"SögÀLabñ o±i⁄", 
SubSèã_A
, 
Pun˘_WHITE
, &
gëO±i⁄
, 0, 0, 0, &
SögÀLabñ_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_CHAIN
, 0},

190 { "œbñÉxãnsi⁄", 
SubSèã_A
, 
Pun˘_LPAREN
, 0, "exãnsi⁄", 0, 0, &
SögÀLabñ_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_CHAIN
, 0},

191 { "øtögs", 
SubSèã_A
, 
Pun˘_LPAREN
, 0, "r", "øtögs", 0, &
SögÀLabñ_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_CHAIN
, 0},

193 { "tÿawkw¨d", 
SubSèã_C
, 
Pun˘_ALL
, 0, 0, 0, 0, &
Awkw¨d_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_CLOSE
, 0},

194 { "awkw¨dÅÿîr‹", 
SubSèã_D
, 
Pun˘_ALL
, 0, 0, 0, 0, &
LabñEº‹_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0}

196 
PRIVATE
 
T¨gëObje˘_t
 
	gLabñ_èrgëObje˘
 = {"Labñ", &
Labñ_›í
, &
Labñ_˛o£
, &
Labñ_de°roy
, 
Labñ_°©eTokís
, 
øysize
(Labñ_°©eTokís), 
CSLLTC_LABEL
};

198 
PRIVATE
 
SèãTokí_t
 
	gLabñTªe_°©eTokís
[] = {

200 { "›í", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
LabñTªe_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

201 { "œbñÉº‹", 
SubSèã_A
, 
Pun˘_LPAREN
, 0, "îr‹", 0, 0, &
LabñEº‹_èrgëObje˘
, 
SubSèã_N
, 0, 0},

202 {"SögÀLabñ o±i⁄", 
SubSèã_A
, 
Pun˘_WHITE
, &
gëO±i⁄
, 0, 0, 0, &
SögÀLabñ_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_CHAIN
, 0},

203 { "øtögw‹d", 
SubSèã_A
, 
Pun˘_LPAREN
, 0, "r", "øtögs", 0, &
SögÀLabñ_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_CHAIN
, 0},

204 { "íd o‡åì", 
SubSèã_A
, 
Pun˘_RPAREN
, 0, 0, 0, 0, &
Labñ_èrgëObje˘
, 
SubSèã_C
, 
Comm™d_CLOSE
|
Comm™d_CHAIN
, 0}

206 
PRIVATE
 
T¨gëObje˘_t
 
	gLabñTªe_èrgëObje˘
 = {"LabñTªe", &
LabñTªe_›í
, &
LabñTªe_˛o£
, &
LabñTªe_de°roy
, 
LabñTªe_°©eTokís
, 
øysize
(LabñTªe_°©eTokís), 
CSLLTC_LABTREE
};

208 
PRIVATE
 
SèãTokí_t
 
	gSögÀLabñ_°©eTokís
[] = {

211 { "›í", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
SögÀLabñ_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

212 {"œbñÉxãnsi⁄", 
SubSèã_A
, 
Pun˘_LPAREN
, 0, "exãnsi⁄", 0, 0, &
Exãnsi⁄_èrgëObje˘
, 
SubSèã_N
, 0, 0},

213 { "œbñ o±i⁄", 
SubSèã_A
, 
Pun˘_WHITE
, &
gëO±i⁄
, 0, 0, 0, &
SögÀLabñ_èrgëObje˘
, 
SubSèã_B
, 0, 0},

214 { "øtögw‹d", 
SubSèã_A
, 
Pun˘_LPAREN
, 0, "r", "øtögs", 0, &
LabñR©ög_èrgëObje˘
, 
SubSèã_N
, 0, 0},

215 { "›ti⁄ vÆue", 
SubSèã_B
, 
Pun˘_WHITE
, &
gëO±i⁄VÆue
, 0, 0, 0, &
SögÀLabñ_èrgëObje˘
, 
SubSèã_A
, 0, 0}

217 
PRIVATE
 
T¨gëObje˘_t
 
	gSögÀLabñ_èrgëObje˘
 = {"SögÀLabñ", &
SögÀLabñ_›í
, &
SögÀLabñ_˛o£
, &
SögÀLabñ_de°roy
, 
SögÀLabñ_°©eTokís
, 
øysize
(SögÀLabñ_°©eTokís), 
CSLLTC_SINGLE
};

219 
PRIVATE
 
SèãTokí_t
 
	gLabñR©ög_°©eTokís
[] = {

224 { "›í", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
LabñR©ög_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

225 { "id bef‹êvÆue", 
SubSèã_A
, 
Pun˘_WHITE
, &
LabñR©ög_gëId
, 0, 0, 0, &
LabñR©ög_èrgëObje˘
, 
SubSèã_B
, 0, 0},

226 { "id bef‹êønge", 
SubSèã_A
, 
Pun˘_LPAREN
, &
LabñR©ög_gëId
, 0, 0, 0, &
LabñR©ögR™ge_èrgëObje˘
, 
SubSèã_N
, 0, 0},

227 { "vÆuê√xt", 
SubSèã_B
, 
Pun˘_WHITE
, &
LabñR©ög_gëVÆue
, 0, 0, 0, &
LabñR©ög_èrgëObje˘
, 
SubSèã_D
, 0, 0},

228 { "vÆuê˛o£", 
SubSèã_B
, 
Pun˘_RPAREN
, &
LabñR©ög_gëVÆue
, 0, 0, 0, 0, 
SubSèã_X
, 
Comm™d_CLOSE
, &
LabñR©ög_√xt
},

229 { "˛o£", 
SubSèã_C
, 
Pun˘_RPAREN
, 0, 0, 0, 0, 0, 
SubSèã_X
, 
Comm™d_CLOSE
, &
LabñR©ög_√xt
},

230 {"vÆuêa·îÑ™ge", 
SubSèã_C
, 
Pun˘_WHITE
|
Pun˘_LPAREN
, &
hasTokí
, 0, 0, 0, &
LabñR©ög_èrgëObje˘
, 
SubSèã_D
, 
Comm™d_CHAIN
, 0},

232 { "ª-íãr", 
SubSèã_D
, 
Pun˘_ALL
, 0, 0, 0, 0, &
LabñR©ög_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_MATCHANY
|
Comm™d_CLOSE
|
Comm™d_CHAIN
, 0}

234 
PRIVATE
 
T¨gëObje˘_t
 
	gLabñR©ög_èrgëObje˘
 = {"LabñR©ög", &
LabñR©ög_›í
, &
LabñR©ög_˛o£
, &
LabñR©ög_de°roy
, 
LabñR©ög_°©eTokís
, 
øysize
(LabñR©ög_°©eTokís), 
CSLLTC_RATING
};

236 
PRIVATE
 
SèãTokí_t
 
	gLabñR©ögR™ge_°©eTokís
[] = {

237 { "›í", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
LabñR©ögR™ge_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

238 { "øngêd©a", 
SubSèã_A
, 
Pun˘_WHITE
, &
LabñR©ögR™ge_gë
, 0, 0, 0, &
LabñR©ögR™ge_èrgëObje˘
, SubState_A, 0, 0},

239 {"øngê˛o£", 
SubSèã_A
, 
Pun˘_RPAREN
, &
LabñR©ögR™ge_gë
, 0, 0, 0, &
LabñR©ög_èrgëObje˘
, 
SubSèã_C
, 
Comm™d_CLOSE
, 0}

241 
PRIVATE
 
T¨gëObje˘_t
 
	gLabñR©ögR™ge_èrgëObje˘
 = {"LabñR©ögR™ge", &
LabñR©ögR™ge_›í
, &
LabñR©ögR™ge_˛o£
, &
LabñR©ögR™ge_de°roy
, 
LabñR©ögR™ge_°©eTokís
, 
øysize
(LabñR©ögR™ge_°©eTokís), 
CSLLTC_RANGE
};

244 
PRIVATE
 
SèãTokí_t
 
	gAwkw¨d_°©eTokís
[] = {

245 { "›í", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
Awkw¨d_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

246 { "°¨àåì", 
SubSèã_A
, 
Pun˘_LPAREN
, 0, 0, 0, 0, &
LabñTªe_èrgëObje˘
, 
SubSèã_N
, 0, 0},

247 { "œbñÉº‹", 
SubSèã_A
, 
Pun˘_LPAREN
, 0, "îr‹", 0, 0, &
Awkw¨d_èrgëObje˘
, 
SubSèã_B
, 0, 0},

248 { "œbñ o±i⁄", 
SubSèã_A
, 
Pun˘_WHITE
, &
gëO±i⁄
, 0, 0, 0, &
Labñ_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_CHAIN
, 0},

249 {"œbñÉxãnsi⁄", 
SubSèã_A
, 
Pun˘_LPAREN
, 0, "exãnsi⁄", 0, 0, &
Labñ_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_CHAIN
, 0},

250 { "øtög", 
SubSèã_A
, 
Pun˘_LPAREN
, 0, "r", "øtögs", 0, &
Labñ_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_CHAIN
, 0},

251 { "√w sîvi˚ id", 
SubSèã_A
, 
Pun˘_WHITE
, &
isQuŸed
, 0, 0, 0, &
Sîvi˚Info_èrgëObje˘
, 
SubSèã_E
, 
Comm™d_CHAIN
, 0},

252 { "˛o£", 
SubSèã_A
, 
Pun˘_RPAREN
, 0, 0, 0, 0, &
Sîvi˚Info_èrgëObje˘
, 
SubSèã_D
, 
Comm™d_CHAIN
, 0},

254 { "ªq-díõd", 
SubSèã_B
, 
Pun˘_WHITE
, 0, "ªque°-díõd", 0, 0, &
Labñ_èrgëObje˘
, 
SubSèã_D
, 
Comm™d_CHAIN
, 0},

255 { "ªq-díõd clo£", 
SubSèã_B
, 
Pun˘_RPAREN
, 0, "ªque°-díõd", 0, 0, &
Labñ_èrgëObje˘
, 
SubSèã_D
, 
Comm™d_CHAIN
, 0},

256 { "nŸ-œbñed", 
SubSèã_B
, 
Pun˘_WHITE
, 0, "nŸ-œbñed", 0, 0, &
Labñ_èrgëObje˘
, 
SubSèã_D
, 
Comm™d_CHAIN
, 0},

257 {"nŸ-œbñed clo£", 
SubSèã_B
, 
Pun˘_RPAREN
, 0, "nŸ-œbñed", 0, 0, &
Labñ_èrgëObje˘
, 
SubSèã_D
, 
Comm™d_CHAIN
, 0},

258 { "no-øtögs", 
SubSèã_B
, 
Pun˘_WHITE
, 0, "no-øtögs", 0, 0, &
Sîvi˚Info_èrgëObje˘
, 
SubSèã_F
, 
Comm™d_CHAIN
, 0},

259 { "no-øtög†˛o£", 
SubSèã_B
, 
Pun˘_RPAREN
, 0, "no-øtögs", 0, 0, &
Sîvi˚Info_èrgëObje˘
, 
SubSèã_F
, 
Comm™d_CHAIN
, 0}

261 
PRIVATE
 
T¨gëObje˘_t
 
	gAwkw¨d_èrgëObje˘
 = {"Awkw¨d", &
Awkw¨d_›í
, &
Awkw¨d_˛o£
, &
Awkw¨d_de°roy
, 
Awkw¨d_°©eTokís
, 
øysize
(Awkward_stateTokens), 0};

264 
PRIVATE
 
SèãTokí_t
 
	gSîvi˚NoR©_°©eTokís
[] = {

265 { "›í", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
Sîvi˚NoR©_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

266 { "no-øtögs", 
SubSèã_A
, 
Pun˘_WHITE
, 0, "no-øtögs", 0, 0, &
Sîvi˚NoR©_èrgëObje˘
, 
SubSèã_B
, 0, 0},

267 { "no-øtög†˛o£", 
SubSèã_A
, 
Pun˘_RPAREN
, 0, "no-øtögs", 0, 0, &
Sîvi˚Info_èrgëObje˘
, 
SubSèã_D
, 
Comm™d_CLOSE
|
Comm™d_CHAIN
, 0},

268 { "ex∂™©i⁄", 
SubSèã_B
, 
Pun˘_WHITE
, &
îr‹_gëEx∂
, 0, 0, 0, &
Sîvi˚NoR©_èrgëObje˘
, SubState_B, 0, 0},

269 {"ex∂™©i⁄ clo£", 
SubSèã_B
, 
Pun˘_RPAREN
, &
îr‹_gëEx∂
, 0, 0, 0, &
Sîvi˚Info_èrgëObje˘
, 
SubSèã_D
, 
Comm™d_CLOSE
|
Comm™d_CHAIN
, 0}

271 
PRIVATE
 
T¨gëObje˘_t
 
	gSîvi˚NoR©_èrgëObje˘
 = {"Sîvi˚NoR©", &
îr‹_›í
, &
îr‹_˛o£
, &
îr‹_de°roy
, 
Sîvi˚NoR©_°©eTokís
, 
øysize
(Sîvi˚NoR©_°©eTokís), 
CSLLTC_NORAT
};

273 
PRIVATE
 
SèãTokí_t
 
	gSîvi˚Eº‹_°©eTokís
[] = {

274 { "›í", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
Sîvi˚Eº‹_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

275 { "ªq-díõd", 
SubSèã_A
, 
Pun˘_WHITE
, 0, "ªque°-díõd", 0, 0, &
Sîvi˚Eº‹_èrgëObje˘
, 
SubSèã_B
, 0, 0},

276 { "ªq-díõd clo£", 
SubSèã_A
, 
Pun˘_RPAREN
, 0, "ªque°-díõd", 0, 0, &
Sîvi˚Info_èrgëObje˘
, 
SubSèã_D
, 
Comm™d_CLOSE
|
Comm™d_CHAIN
, 0},

277 { "£rvi˚-u«vaû", 
SubSèã_A
, 
Pun˘_WHITE
, 0,"£rvi˚-u«vaûabÀ", 0, 0, &
Sîvi˚Eº‹_èrgëObje˘
, 
SubSèã_B
, 0, 0},

278 {"£rvi˚-u«vaû clo£", 
SubSèã_A
, 
Pun˘_RPAREN
, 0,"£rvi˚-u«vaûabÀ", 0, 0, &
Sîvi˚Info_èrgëObje˘
, 
SubSèã_D
, 
Comm™d_CLOSE
|
Comm™d_CHAIN
, 0},

279 { "ex∂™©i⁄", 
SubSèã_B
, 
Pun˘_WHITE
, &
îr‹_gëEx∂
, 0, 0, 0, &
Sîvi˚Eº‹_èrgëObje˘
, SubState_B, 0, 0},

280 { "ex∂™©i⁄ clo£", 
SubSèã_B
, 
Pun˘_RPAREN
, &
îr‹_gëEx∂
, 0, 0, 0, &
Sîvi˚Info_èrgëObje˘
, 
SubSèã_D
, 
Comm™d_CLOSE
|
Comm™d_CHAIN
, 0}

282 
PRIVATE
 
T¨gëObje˘_t
 
	gSîvi˚Eº‹_èrgëObje˘
 = {"Sîvi˚Eº‹", &
îr‹_›í
, &
îr‹_˛o£
, &
îr‹_de°roy
, 
Sîvi˚Eº‹_°©eTokís
, 
øysize
(Sîvi˚Eº‹_°©eTokís), 
CSLLTC_SRVERR
};

284 
PRIVATE
 
SèãTokí_t
 
	gLabñEº‹_°©eTokís
[] = {

285 { "›í", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
LabñEº‹_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

286 { "ªq-díõd", 
SubSèã_A
, 
Pun˘_WHITE
, 0, "ªque°-díõd", 0, 0, &
LabñEº‹_èrgëObje˘
, 
SubSèã_B
, 0, 0},

287 { "ªq-díõd clo£", 
SubSèã_A
, 
Pun˘_RPAREN
, 0, "ªque°-díõd", 0, 0, &
Labñ_èrgëObje˘
, 
SubSèã_C
, 
Comm™d_CLOSE
|
Comm™d_CHAIN
, 0},

288 { "nŸ-œbñed", 
SubSèã_A
, 
Pun˘_WHITE
, 0, "nŸ-œbñed", 0, 0, &
LabñEº‹_èrgëObje˘
, 
SubSèã_B
, 0, 0},

289 {"nŸ-œbñed clo£", 
SubSèã_A
, 
Pun˘_RPAREN
, 0, "nŸ-œbñed", 0, 0, &
Labñ_èrgëObje˘
, 
SubSèã_C
, 
Comm™d_CLOSE
|
Comm™d_CHAIN
, 0},

290 { "ex∂™©i⁄", 
SubSèã_B
, 
Pun˘_WHITE
, &
îr‹_gëEx∂
, 0, 0, 0, &
LabñEº‹_èrgëObje˘
, SubState_B, 0, 0},

291 {"ex∂™©i⁄ clo£", 
SubSèã_B
, 
Pun˘_RPAREN
, &
îr‹_gëEx∂
, 0, 0, 0, &
Labñ_èrgëObje˘
, 
SubSèã_C
, 
Comm™d_CLOSE
|
Comm™d_CHAIN
, 0}

293 
PRIVATE
 
T¨gëObje˘_t
 
	gLabñEº‹_èrgëObje˘
 = {"LabñEº‹", &
îr‹_›í
, &
îr‹_˛o£
, &
îr‹_de°roy
, 
LabñEº‹_°©eTokís
, 
øysize
(LabñEº‹_°©eTokís), 
CSLLTC_LABERR
};

295 
PRIVATE
 
SèãTokí_t
 
	gExãnsi⁄_°©eTokís
[] = {

299 { "›í", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
Exãnsi⁄_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

300 { "m™d©‹y", 
SubSèã_A
, 
Pun˘_WHITE
, 0, "m™d©‹y", 0, 0, &
Exãnsi⁄_èrgëObje˘
, 
SubSèã_B
, 0, &
Exãnsi⁄_m™d©‹y
},

301 { "›ti⁄Æ", 
SubSèã_A
, 
Pun˘_WHITE
, 0, "›ti⁄Æ", 0, 0, &
Exãnsi⁄_èrgëObje˘
, 
SubSèã_B
, 0, 0},

302 { "URL", 
SubSèã_B
, 
Pun˘_WHITE
, &
Exãnsi⁄_gëURL
, 0, 0, 0, &
Exãnsi⁄D©a_èrgëObje˘
, 
SubSèã_N
, 0, 0},

303 { "URL o≥n", 
SubSèã_B
, 
Pun˘_LPAREN
, &
Exãnsi⁄_gëURL
, 0, 0, 0, &
Exãnsi⁄D©a_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_CHAIN
|
Comm™d_NOTOKEN
, 0},

304 { "URL clo£", 
SubSèã_B
, 
Pun˘_RPAREN
, &
Exãnsi⁄_gëURL
, 0, 0, 0, 0, 
SubSèã_X
, 
Comm™d_CLOSE
, &
Exãnsi⁄_√xt
},

306 { "m‹êd©a", 
SubSèã_C
, 
Pun˘_WHITE
|
Pun˘_LPAREN
|
Pun˘_RPAREN
, &
hasTokí
, 0, 0, 0, &
Exãnsi⁄D©a_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_CHAIN
, 0},

307 { "√°", 
SubSèã_C
, 
Pun˘_LPAREN
, 0, 0, 0, 0, &
Exãnsi⁄D©a_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_CHAIN
, 0},

308 { "˛o£", 
SubSèã_C
, 
Pun˘_RPAREN
, 0, 0, 0, 0, 0, 
SubSèã_X
, 
Comm™d_CLOSE
, &
Exãnsi⁄_√xt
}

310 
PRIVATE
 
T¨gëObje˘_t
 
	gExãnsi⁄_èrgëObje˘
 = {"Exãnsi⁄", &
Exãnsi⁄_›í
, &
Exãnsi⁄_˛o£
, &
Exãnsi⁄_de°roy
, 
Exãnsi⁄_°©eTokís
, 
øysize
(Exãnsi⁄_°©eTokís), 
CSLLTC_EXTEN
};

312 
PRIVATE
 
SèãTokí_t
 
	gExãnsi⁄D©a_°©eTokís
[] = {

315 { "›í", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
Exãnsi⁄D©a_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

316 { "Õ¨í", 
SubSèã_A
, 
Pun˘_LPAREN
, 0, 0, 0, 0, &
Exãnsi⁄D©a_èrgëObje˘
, 
SubSèã_N
, 0, 0},

317 { "˛o£", 
SubSèã_A
, 
Pun˘_RPAREN
, 0, 0, 0, 0, 0, 
SubSèã_X
, 
Comm™d_CLOSE
, &
Exãnsi⁄D©a_√xt
},

318 { "d©a", 
SubSèã_A
, 
Pun˘_WHITE
, &
Exãnsi⁄D©a_gëD©a
, 0, 0, 0, 0, 
SubSèã_X
, 
Comm™d_CLOSE
, &
Exãnsi⁄D©a_√xt
},

319 {"d©®pun˘", 
SubSèã_A
, 
Pun˘_LPAREN
|
Pun˘_RPAREN
, &
Exãnsi⁄D©a_gëD©a
, 0, 0, 0, 0, 
SubSèã_X
, 
Comm™d_CLOSE
|
Comm™d_CHAIN
|
Comm™d_NOTOKEN
, &
Exãnsi⁄D©a_√xt
},

321 { "m‹êd©a", 
SubSèã_B
, 
Pun˘_WHITE
|
Pun˘_LPAREN
|
Pun˘_RPAREN
, &
hasTokí
, 0, 0, 0, &
Exãnsi⁄D©a_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_CHAIN
, 0},

322 { "√°", 
SubSèã_B
, 
Pun˘_LPAREN
, 0, 0, 0, 0, &
Exãnsi⁄D©a_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_CHAIN
, 0},

323 { "˛o£", 
SubSèã_B
, 
Pun˘_RPAREN
, 0, 0, 0, 0, 0, 
SubSèã_X
, 
Comm™d_CLOSE
, &
Exãnsi⁄D©a_√xt
}

325 
PRIVATE
 
T¨gëObje˘_t
 
	gExãnsi⁄D©a_èrgëObje˘
 = {"Exãnsi⁄D©a", &
Exãnsi⁄D©a_›í
, &
Exãnsi⁄D©a_˛o£
, &
Exãnsi⁄D©a_de°roy
, 
Exãnsi⁄D©a_°©eTokís
, 
øysize
(Exãnsi⁄D©a_°©eTokís), 
CSLLTC_EXTDATA
};

331 
CSLabñ_t
 * 
	mpCSLabñ
;

332 
CSLLD©a_t
 * 
	mpCSLLD©a
;

333 } 
	tCSLabñAssoc_t
;

335 
PRIVATE
 
HTLi°
 * 
	gCSLabñAssocs
 = 0;

337 
PRIVATE
 
	$CSLabñAssoc_add
(
CSLabñ_t
 * 
pCSLabñ
, 
CSLLD©a_t
 * 
pCSLLD©a
)

339 
CSLabñAssoc_t
 * 
pEÀmít
;

340 i‡((
pEÀmít
 = (
CSLabñAssoc_t
 *Ë
	`HT_CALLOC
(1, (CSLabñAssoc_t))Ë=
NULL
)

341 
	`HT_OUTOFMEM
("CSLabelAssoc_t");

342 
pEÀmít
->
pCSLabñ
 =ÖCSLabel;

343 
pEÀmít
->
pCSLLD©a
 =ÖCSLLData;

344 i‡(!
CSLabñAssocs
)

345 
CSLabñAssocs
 = 
	`HTLi°_√w
();

346 
	`HTLi°_≠≥ndObje˘
(
CSLabñAssocs
, (*)
pEÀmít
);

347 
	}
}

349 
PRIVATE
 
CSLabñAssoc_t
 * 
	$CSLabñAssoc_födByD©a
(
CSLLD©a_t
 * 
pCSLLD©a
)

351 
HTLi°
 * 
assocs
 = 
CSLabñAssocs
;

352 
CSLabñAssoc_t
 * 
pEÀmít
;

353 (
pEÀmít
 = (
CSLabñAssoc_t
 *Ë
	`HTLi°_√xtObje˘
(
assocs
)))

354 i‡(
pEÀmít
->
pCSLLD©a
 ==ÖCSLLData)

355  
pEÀmít
;

357 
	}
}

359 
PRIVATE
 
CSLabñAssoc_t
 * 
	$CSLabñAssoc_födBySèã
(
CSLabñ_t
 * 
pCSLabñ
)

361 
HTLi°
 * 
assocs
 = 
CSLabñAssocs
;

362 
CSLabñAssoc_t
 * 
pEÀmít
;

363 (
pEÀmít
 = (
CSLabñAssoc_t
 *Ë
	`HTLi°_√xtObje˘
(
assocs
)))

364 i‡(
pEÀmít
->
pCSLabñ
 ==ÖCSLabel)

365  
pEÀmít
;

367 
	}
}

369 
PRIVATE
 
	$CSLabñAssoc_ªmoveBySèã
(
CSLabñ_t
 * 
pCSLabñ
)

371 
CSLabñAssoc_t
 * 
pEÀmít
 = 
	`CSLabñAssoc_födBySèã
(
pCSLabñ
);

372 i‡(!
pEÀmít
)

374 
	`HTLi°_ªmoveObje˘
(
CSLabñAssocs
, (*)
pEÀmít
);

375 
	`HT_FREE
(
pEÀmít
);

376 
	}
}

381 
PRIVATE
 
LabñEº‹_t
 * 
	$LabñEº‹_√w
()

383 
LabñEº‹_t
 * 
me
;

384 i‡((
me
 = (
LabñEº‹_t
 *Ë
	`HT_CALLOC
(1, (LabñEº‹_t))Ë=
NULL
)

385 
	`HT_OUTOFMEM
("LabelError_t");

386 
me
->
ex∂™©i⁄s
 = 
	`HTLi°_√w
();

387  
me
;

388 
	}
}

390 
PRIVATE
 
	$LabñEº‹_‰ì
(
LabñEº‹_t
 * 
me
)

392 * 
ex∂™©i⁄
;

393 i‡(!
me
)

395 (
ex∂™©i⁄
 = (*Ë
	`HTLi°_ªmoveLa°Obje˘
(
me
->
ex∂™©i⁄s
)))

396 
	`HT_FREE
(
ex∂™©i⁄
);

397 
	`HT_FREE
(
me
);

398 
	}
}

400 
PRIVATE
 
LabñO±i⁄s_t
 * 
	$LabñO±i⁄s_√w
(
LabñO±i⁄s_t
 * 
pP¨ítLabñO±i⁄s
)

402 
LabñO±i⁄s_t
 * 
me
;

403 i‡((
me
 = (
LabñO±i⁄s_t
 *Ë
	`HT_CALLOC
(1, (LabñO±i⁄s_t))Ë=
NULL
)

404 
	`HT_OUTOFMEM
("LabelOptions_t");

405 
me
->
pP¨ítLabñO±i⁄s
 =ÖParentLabelOptions;

406  
me
;

407 
	}
}

409 
PRIVATE
 
	$LabñO±i⁄s_‰ì
(
LabñO±i⁄s_t
 * 
me
)

411 * 
commít
;

412 
	`DVÆ_˛ór
(&
me
->
©
);

413 
	`SVÆ_˛ór
(&
me
->
by
);

414 
	`SVÆ_˛ór
(&
me
->
com∂ëe_œbñ
);

415 
	`BVÆ_˛ór
(&
me
->
gíîic
);

416 
	`SVÆ_˛ór
(&
me
->
fur
);

417 
	`SVÆ_˛ór
(&
me
->
MIC_md5
);

418 
	`DVÆ_˛ór
(&
me
->
⁄
);

419 
	`SVÆ_˛ór
(&
me
->
sig«tuª_PKCS
);

420 
	`DVÆ_˛ór
(&
me
->
u¡û
);

421 (
commít
 = 
	`HTLi°_ªmoveLa°Obje˘
(
me
->
commíts
)))

422 
	`HT_FREE
(
commít
);

423 
	`HT_FREE
(
me
);

424 
	}
}

426 
PRIVATE
 
Exãnsi⁄D©a_t
 * 
	$Exãnsi⁄D©a_√w
()

428 
Exãnsi⁄D©a_t
 * 
me
;

429 i‡((
me
 = (
Exãnsi⁄D©a_t
 *Ë
	`HT_CALLOC
(1, (Exãnsi⁄D©a_t))Ë=
NULL
)

430 
	`HT_OUTOFMEM
("ExtensionData_t");

431  
me
;

432 
	}
}

434 
PRIVATE
 
	$Exãnsi⁄D©a_‰ì
(
Exãnsi⁄D©a_t
 * 
me
)

436 
Exãnsi⁄D©a_t
 * 
pExãnsi⁄D©a
;

437 (
pExãnsi⁄D©a
 = (
Exãnsi⁄D©a_t
 *Ë
	`HTLi°_ªmoveLa°Obje˘
(
me
->
m‹eD©a
)))

438 
	`Exãnsi⁄D©a_‰ì
(
pExãnsi⁄D©a
);

439 
	`HT_FREE
(
me
->
ãxt
);

440 
	`HT_FREE
(
me
);

441 
	}
}

443 
PRIVATE
 
Exãnsi⁄_t
 * 
	$Exãnsi⁄_√w
()

445 
Exãnsi⁄_t
 * 
me
;

446 i‡((
me
 = (
Exãnsi⁄_t
 *Ë
	`HT_CALLOC
(1, (Exãnsi⁄_t))Ë=
NULL
)

447 
	`HT_OUTOFMEM
("Extension_t");

448  
me
;

449 
	}
}

451 
PRIVATE
 
	$Exãnsi⁄_‰ì
(
Exãnsi⁄_t
 * 
me
)

453 
Exãnsi⁄D©a_t
 * 
pExãnsi⁄D©a
;

454 (
pExãnsi⁄D©a
 = (
Exãnsi⁄D©a_t
 *Ë
	`HTLi°_ªmoveLa°Obje˘
(
me
->
exãnsi⁄D©a
)))

455 
	`Exãnsi⁄D©a_‰ì
(
pExãnsi⁄D©a
);

456 
	`SVÆ_˛ór
(&
me
->
uæ
);

457 
	`HT_FREE
(
me
);

458 
	}
}

460 
PRIVATE
 
LabñR©ög_t
 * 
	$LabñR©ög_√w
()

462 
LabñR©ög_t
 * 
me
;

463 i‡((
me
 = (
LabñR©ög_t
 *Ë
	`HT_CALLOC
(1, (LabñR©ög_t))Ë=
NULL
)

464 
	`HT_OUTOFMEM
("LabelRating_t");

466  
me
;

467 
	}
}

469 
PRIVATE
 
	$LabñR©ög_‰ì
(
LabñR©ög_t
 * 
me
)

471 
R™ge_t
 * 
pR™ge
;

472 (
pR™ge
 = (
R™ge_t
 *Ë
	`HTLi°_ªmoveLa°Obje˘
(
me
->
ønges
)))

473 
	`HT_FREE
(
pR™ge
);

474 
	`SVÆ_˛ór
(&
me
->
idítifõr
);

475 
	`HT_FREE
(
me
);

476 
	}
}

478 
PRIVATE
 
SögÀLabñ_t
 * 
	$SögÀLabñ_√w
(
LabñO±i⁄s_t
 * 
pLabñO±i⁄s
, LabñO±i⁄s_à* 
pP¨ítLabñO±i⁄s
)

480 
SögÀLabñ_t
 * 
me
;

481 i‡((
me
 = (
SögÀLabñ_t
 *Ë
	`HT_CALLOC
(1, (SögÀLabñ_t))Ë=
NULL
)

482 
	`HT_OUTOFMEM
("SingleLabel_t");

483 
me
->
œbñR©ögs
 = 
	`HTLi°_√w
();

484 
me
->
pLabñO±i⁄s
 =ÖLabñO±i⁄†?ÖLabñO±i⁄†: 
	`LabñO±i⁄s_√w
(
pP¨ítLabñO±i⁄s
);

485  
me
;

486 
	}
}

488 
PRIVATE
 
	$SögÀLabñ_‰ì
(
SögÀLabñ_t
 * 
me
)

490 
LabñR©ög_t
 * 
pLabñR©ög
;

491 (
pLabñR©ög
 = (
LabñR©ög_t
 *Ë
	`HTLi°_ªmoveLa°Obje˘
(
me
->
œbñR©ögs
)))

492 
	`LabñR©ög_‰ì
(
pLabñR©ög
);

493 
	`LabñO±i⁄s_‰ì
(
me
->
pLabñO±i⁄s
);

494 
	`HT_FREE
(
me
);

495 
	}
}

497 
PRIVATE
 
Labñ_t
 * 
	$Labñ_√w
()

499 
Labñ_t
 * 
me
;

500 i‡((
me
 = (
Labñ_t
 *Ë
	`HT_CALLOC
(1, (Labñ_t))Ë=
NULL
)

501 
	`HT_OUTOFMEM
("Label_t");

503  
me
;

504 
	}
}

506 
PRIVATE
 
	$Labñ_‰ì
(
Labñ_t
 * 
me
)

508 
SögÀLabñ_t
 * 
pSögÀLabñ
;

509 i‡(
me
->
pSögÀLabñ
)

510 
	`SögÀLabñ_‰ì
(
me
->
pSögÀLabñ
);

512 (
pSögÀLabñ
 = (
SögÀLabñ_t
 *Ë
	`HTLi°_ªmoveLa°Obje˘
(
me
->
sögÀLabñs
)))

513 
	`SögÀLabñ_‰ì
(
pSögÀLabñ
);

514 
	`LabñEº‹_‰ì
(
me
->
pLabñEº‹
);

515 
	`HT_FREE
(
me
);

516 
	}
}

518 
PRIVATE
 
Sîvi˚Info_t
 * 
	$Sîvi˚Info_√w
()

520 
Sîvi˚Info_t
 * 
me
;

521 i‡((
me
 = (
Sîvi˚Info_t
 *Ë
	`HT_CALLOC
(1, (Sîvi˚Info_t))Ë=
NULL
)

522 
	`HT_OUTOFMEM
("ServiceInfo_t");

523 
me
->
œbñs
 = 
	`HTLi°_√w
();

524 
me
->
pLabñO±i⁄s
 = 
	`LabñO±i⁄s_√w
(0);

525  
me
;

526 
	}
}

528 
PRIVATE
 
	$Sîvi˚Info_‰ì
(
Sîvi˚Info_t
 * 
me
)

530 
Labñ_t
 * 
pLabñ
;

531 (
pLabñ
 = (
Labñ_t
 *Ë
	`HTLi°_ªmoveLa°Obje˘
(
me
->
œbñs
)))

532 
	`Labñ_‰ì
(
pLabñ
);

533 
	`SVÆ_˛ór
(&
me
->
øtög_£rvi˚
);

534 
	`LabñO±i⁄s_‰ì
(
me
->
pLabñO±i⁄s
);

535 
	`LabñEº‹_‰ì
(
me
->
pLabñEº‹
);

536 
	`HT_FREE
(
me
);

537 
	}
}

539 
PRIVATE
 
CSLLD©a_t
 * 
	$CSLLD©a_√w
()

541 
CSLLD©a_t
 * 
me
;

542 i‡((
me
 = (
CSLLD©a_t
 *Ë
	`HT_CALLOC
(1, (CSLLD©a_t))Ë=
NULL
)

543 
	`HT_OUTOFMEM
("CSLLData_t");

544 
me
->
£rvi˚Infos
 = 
	`HTLi°_√w
();

545  
me
;

546 
	}
}

548 
PRIVATE
 
	$CSLLD©a_‰ì
(
CSLLD©a_t
 * 
me
)

550 
Sîvi˚Info_t
 * 
pSîvi˚Info
;

551 i‡(
	`CSLabñAssoc_födByD©a
(
me
))

553 (
pSîvi˚Info
 = (
Sîvi˚Info_t
 *Ë
	`HTLi°_ªmoveLa°Obje˘
(
me
->
£rvi˚Infos
)))

554 
	`Sîvi˚Info_‰ì
(
pSîvi˚Info
);

555 
	`FVÆ_˛ór
(&
me
->
vîsi⁄
);

556 
	`LabñEº‹_‰ì
(
me
->
pLabñEº‹
);

557 
	`HT_FREE
(
me
);

558 
	}
}

561 
PUBLIC
 
CSLabñ_t
 * 
	$CSLabñ_√w
(
CSLLD©a_t
 * 
pCSLLD©a
, 
LabñT¨gëCÆlback_t
 * 
pLabñT¨gëCÆlback
,

562 
LLEº‹H™dÀr_t
 * 
pLLEº‹H™dÀr
)

564 
CSLabñ_t
 * 
me
;

565 i‡((
me
 = (
CSLabñ_t
 *Ë
	`HT_CALLOC
(1, (CSLabñ_t))Ë=
NULL
)

566 
	`HT_OUTOFMEM
("CSLabel_t");

567 
me
->
pCSLLD©a
 =ÖCSLLData;

568 
me
->
pLabñT¨gëCÆlback
 =ÖLabelTargetCallback;

569 
me
->
pLLEº‹H™dÀr
 =ÖLLErrorHandler;

570 
	`CSLabñAssoc_add
(
me
, 
pCSLLD©a
);

571  
me
;

572 
	}
}

574 
PUBLIC
 
CSLabñ_t
 * 
	$CSLabñ_c›y
(
CSLabñ_t
 * 
ﬁd
)

576 
CSLabñ_t
 * 
me
 = 
	`CSLabñ_√w
(
ﬁd
->
pCSLLD©a
, old->
pLabñT¨gëCÆlback
, old->
pLLEº‹H™dÀr
);

577 
	`mem˝y
(
me
, 
ﬁd
, (
CSLabñ_t
));

578  
me
;

579 
	}
}

581 
PUBLIC
 
	$CSLabñ_‰ì
(
CSLabñ_t
 * 
me
)

583 
CSLLD©a_t
 * 
pCSLLD©a
 = 
me
->pCSLLData;

584 
	`CSLabñAssoc_ªmoveBySèã
(
me
);

585 
	`HT_FREE
(
me
);

586 
	`CSLLD©a_‰ì
(
pCSLLD©a
);

587 
	}
}

589 
PUBLIC
 
CSLLD©a_t
 * 
	$CSLabñ_gëCSLLD©a
(
CSLabñ_t
 * 
me
)

590 { 
me
->
pCSLLD©a
;
	}
}

591 
PUBLIC
 
LabñEº‹_t
 * 
	$CSLabñ_gëLabñEº‹
(
CSLabñ_t
 * 
pCSLabñ
)

592 { 
pCSLabñ
->
pCuºítLabñEº‹
;
	}
}

593 
PUBLIC
 
LabñO±i⁄s_t
 * 
	$CSLabñ_gëLabñO±i⁄s
(
CSLabñ_t
 * 
pCSLabñ
)

594 { 
pCSLabñ
->
pCuºítLabñO±i⁄s
;
	}
}

595 
PUBLIC
 
Sîvi˚Info_t
 * 
	$CSLabñ_gëSîvi˚Info
(
CSLabñ_t
 * 
pCSLabñ
)

596 { 
pCSLabñ
->
pCuºítSîvi˚Info
;
	}
}

597 
PUBLIC
 * 
	$CSLabñ_gëSîvi˚Name
(
CSLabñ_t
 * 
pCSLabñ
)

598 { 
pCSLabñ
->
pCuºítSîvi˚Info
 ?

599 
	`SVÆ_vÆue
(&
pCSLabñ
->
pCuºítSîvi˚Info
->
øtög_£rvi˚
): 0;
	}
}

600 
PUBLIC
 
Labñ_t
 * 
	$CSLabñ_gëLabñ
(
CSLabñ_t
 * 
pCSLabñ
)

601 { 
pCSLabñ
->
pCuºítLabñ
;
	}
}

602 
PUBLIC
 
	$CSLabñ_gëLabñNumbî
(
CSLabñ_t
 * 
pCSLabñ
)

603 { 
pCSLabñ
->
cuºítLabñNumbî
;
	}
}

604 
PUBLIC
 
SögÀLabñ_t
 * 
	$CSLabñ_gëSögÀLabñ
(
CSLabñ_t
 * 
pCSLabñ
)

605 { 
pCSLabñ
->
pCuºítSögÀLabñ
;
	}
}

606 
PUBLIC
 
LabñR©ög_t
 * 
	$CSLabñ_gëLabñR©ög
(
CSLabñ_t
 * 
pCSLabñ
)

607 { 
pCSLabñ
->
pCuºítLabñR©ög
;
	}
}

608 
PUBLIC
 * 
	$CSLabñ_gëR©ögName
(
CSLabñ_t
 * 
pCSLabñ
)

609 { 
pCSLabñ
->
pCuºítLabñR©ög
 ?

610 
	`SVÆ_vÆue
(&
pCSLabñ
->
pCuºítLabñR©ög
->
idítifõr
): 0;
	}
}

611 
PUBLIC
 
R™ge_t
 * 
	$CSLabñ_gëLabñR©ögR™ge
(
CSLabñ_t
 * 
pCSLabñ
)

612 { 
pCSLabñ
->
pCuºítR™ge
;
	}
}

613 
PUBLIC
 * 
	$CSLabñ_gëR©ögSå
(
CSLabñ_t
 * 
pCSLabñ
)

615 
HTChunk
 * 
pChunk
;

616 
HTLi°
 * 
ønges
;

617 
R™ge_t
 * 
curR™ge
;

618 
FVÆ_t
 
fVÆ
;

619 
cou¡
 = 0;

620 
fVÆ
 = 
	`CSLabñ_gëLabñR©ög
(
pCSLabñ
)->
vÆue
;

621 i‡(
	`FVÆ_öôülized
(&
fVÆ
))

622  
	`FVÆ_toSå
(&
fVÆ
);

623 
pChunk
 = 
	`HTChunk_√w
(20);

624 
ønges
 = 
	`CSLabñ_gëLabñR©ög
(
pCSLabñ
)->ranges;

625 (
curR™ge
 = (
R™ge_t
 *Ë
	`HTLi°_√xtObje˘
(
ønges
))) {

626 * 
±r
;

627 
cou¡
++;

628 
±r
 = 
	`R™ge_toSå
(
curR™ge
);

629 i‡(
cou¡
 > 1)

630 
	`HTChunk_puts
(
pChunk
, " ");

631 
	`HTChunk_puts
(
pChunk
, 
±r
);

632 
	`HT_FREE
(
±r
);

634  
	`HTChunk_toCSåög
(
pChunk
);

635 
	}
}

637 
PUBLIC
 
CSP¨£_t
 * 
	$CSP¨£_√wLabñ
(
LabñT¨gëCÆlback_t
 * 
pLabñT¨gëCÆlback
,

638 
LLEº‹H™dÀr_t
 * 
pLLEº‹H™dÀr
)

640 
CSP¨£_t
 * 
me
 = 
	`CSP¨£_√w
();

641 
me
->
pP¨£C⁄ãxt
->
ígöeOf
 = &
CSP¨£_èrgëP¨£r
;

642 
me
->
pP¨£C⁄ãxt
->
pT¨gëCh™geCÆlback
 = &
èrgëCh™geCÆlback
;

643 
me
->
pP¨£C⁄ãxt
->
pP¨£Eº‹H™dÀr
 = &
∑r£Eº‹H™dÀr
;

644 
me
->
èrgë
.
pCSLabñ
 = 
	`CSLabñ_√w
(
	`CSLLD©a_√w
(), 
pLabñT¨gëCÆlback
, 
pLLEº‹H™dÀr
);

645 
me
->
pT¨gëObje˘
 = &
LabñLi°_èrgëObje˘
;

646 
me
->
cuºítSubSèã
 = 
SubSèã_N
;

647  
me
;

648 
	}
}

650 
PUBLIC
 
CSLabñ_t
 * 
	$CSP¨£_gëLabñ
(
CSP¨£_t
 * 
me
)

652  (
me
->
èrgë
.
pCSLabñ
);

653 
	}
}

655 
PUBLIC
 
BOOL
 
	$CSP¨£_dñëeLabñ
(
CSP¨£_t
 * 
pCSP¨£
)

657 
CSLabñ_t
 * 
me
 = 
	`GëCSLabñ
(
pCSP¨£
);

658 
	`CSLLD©a_‰ì
(
	`CSLabñ_gëCSLLD©a
(
me
));

659 
	`CSLabñ_‰ì
(
me
);

660 
	`CSP¨£_dñëe
(
pCSP¨£
);

661  
YES
;

662 
	}
}

665 
PRIVATE
 
SèãRë_t
 
	$èrgëCh™geCÆlback
(
CSP¨£_t
 * 
pCSP¨£
, 
T¨gëObje˘_t
 * 
pT¨gëObje˘
, 
CSP¨£TC_t
 
èrgë
, 
BOOL
 
˛o£d
, * 
pVoid
)

668 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

669 i‡(
pCSLabñ
->
pLabñT¨gëCÆlback
)

670  (*
pCSLabñ
->
pLabñT¨gëCÆlback
)’CSLabñ, 
pCSP¨£
, (
CSLLTC_t
)
èrgë
, 
˛o£d
, 
pVoid
);

671  
SèãRë_OK
;

672 
	}
}

674 
PRIVATE
 
SèãRë_t
 
	$∑r£Eº‹H™dÀr
(
CSP¨£_t
 * 
pCSP¨£
, c⁄° * 
tokí
, 
dem¨k
, 
SèãRë_t
 
îr‹Code
)

676 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

677 i‡(
pCSLabñ
->
pLLEº‹H™dÀr
)

678  (*
pCSLabñ
->
pLLEº‹H™dÀr
)’CSLabñ, 
pCSP¨£
, 
tokí
, 
dem¨k
, 
îr‹Code
);

679  
îr‹Code
;

680 
	}
}

684 #i‚de‡
NO_CHAR_TEST


685 
PRIVATE
 
BOOL
 
	$ch¨SëOK
(
CSP¨£_t
 * 
pCSP¨£
, * 
checkMe
, 
Ch¨Së_t
 
£t
)

687 ;*
checkMe
;checkMe++) {

688 i‡(
£t
 & 
Ch¨Së_ALPHAS
 &&

689 ((*
checkMe
 >= 'A' && *checkMe <= 'Z') ||

690 (*
checkMe
 >= 'a' && *checkMe <= 'z')))

692 i‡(
£t
 & 
Ch¨Së_DIGITS
 &&

693 ((*
checkMe
 >= '0' && *checkMe <= '9') || *checkMe == '.'))

695 i‡(
£t
 & 
Ch¨Së_PLUSMINUS
 &&

696 ((*
checkMe
 == '+' || *checkMe == '-')))

698 i‡(
£t
 & 
Ch¨Së_FORSLASH
 &&

699 *
checkMe
 == '/')

701 i‡(
£t
 & 
Ch¨Së_BASE64_EXTRAS
 &&

702 ((*
checkMe
 == '+' || *checkMe == '/' || *checkMe == '=')))

704 i‡(
£t
 & 
Ch¨Së_DATE_EXTRAS
 &&

705 (*
checkMe
 == '.' || *checkMe == ':' ||

706 *
checkMe
 == '-' || *checkMe == 'T'))

709 i‡(
£t
 & 
Ch¨Së_URL_EXTRAS
 &&

710 (*
checkMe
 == ':' || *checkMe == '?' ||

711 *
checkMe
 == '#' || *checkMe == '%' ||

712 *
checkMe
 == '/' || *checkMe == '.' ||

713 *
checkMe
 == '-' || *checkMe == '_' ||

714 *
checkMe
 == '~' || *checkMe == '\\'))

717 i‡(
£t
 & 
Ch¨Së_EXTENS
 &&

718 (*
checkMe
 == '.' || *checkMe == ' ' ||

719 *
checkMe
 == ',' || *checkMe == ';' ||

720 *
checkMe
 == ':' || *checkMe == '&' ||

721 *
checkMe
 == '=' || *checkMe == '?' ||

722 *
checkMe
 == '!' || *checkMe == '*' ||

723 *
checkMe
 == '~' || *checkMe == '@' ||

724 *
checkMe
 == '#' || *checkMe == '\''||

725 *
checkMe
 == '/' || *checkMe == '-'))

727 
pCSP¨£
->
pP¨£C⁄ãxt
->
pTokíEº‹
 = 
checkMe
;

728  
FALSE
;

730  
TRUE
;

731 
	}
}

734 
PRIVATE
 
SèãRë_t
 
	$isQuŸed
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

736 
P¨£C⁄ãxt_t
 * 
pP¨£C⁄ãxt
 = 
pCSP¨£
->pParseContext;

737 i‡(!
pP¨£C⁄ãxt
->
ob£rvedQuŸes
)

738  
SèãRë_WARN_NO_MATCH
;

739 i‡(
	`Pun˘_badDem¨k
(
pSèãTokí
->
vÆidPun˘u©i⁄
, 
dem¨k
))

740  
SèãRë_WARN_BAD_PUNCT
;

741  
SèãRë_OK
;

742 
	}
}

744 
PRIVATE
 
SèãRë_t
 
	$hasTokí
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

746  
tokí
 ? 
SèãRë_OK
 : 
SèãRë_WARN_NO_MATCH
;

747 
	}
}

749 
PRIVATE
 
SèãRë_t
 
	$˛órTokí
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

751 
	`HTChunk_˛ór
(
pCSP¨£
->
tokí
);

752  
SèãRë_OK
;

753 
	}
}

761 
	#CSOff£tOf
(
s
,
m
Ë(
size_t
)&(((†*)0)->m)

	)

762 
	#CHECK_OPTION_TOKEN_BVAL1
(
ãxt
, 
poöãr
) \

763 i‡(!
	`°rˇ£comp
(
tokí
, 
ãxt
)) {\

764 
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆT¨gë
.
pT¨gëBVÆ
 = 
poöãr
;\

765 
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆTy≥
 = 
VÆTy≥_BVAL
;\

767 }

	)

769 
	#CHECK_OPTION_TOKEN_FVAL1
(
ãxt
, 
poöãr
) \

770 i‡(!
	`°rˇ£comp
(
tokí
, 
ãxt
)) {\

771 
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆT¨gë
.
pT¨gëFVÆ
 = 
poöãr
;\

772 
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆTy≥
 = 
VÆTy≥_FVAL
;\

774 }

	)

776 
	#CHECK_OPTION_TOKEN_SVAL1
(
ãxt
, 
poöãr
, 
ch¨Së
) \

777 i‡(!
	`°rˇ£comp
(
tokí
, 
ãxt
)) {\

778 
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆT¨gë
.
pT¨gëSVÆ
 = 
poöãr
;\

779 
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆTy≥
 = 
VÆTy≥_SVAL
;\

780 
	`SET_CHAR_SET
(
ch¨Së
)\

782 }

	)

784 
	#CHECK_OPTION_TOKEN_DVAL1
(
ãxt
, 
poöãr
) \

785 i‡(!
	`°rˇ£comp
(
tokí
, 
ãxt
)) {\

786 
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆT¨gë
.
pT¨gëDVÆ
 = 
poöãr
;\

787 
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆTy≥
 = 
VÆTy≥_DVAL
;\

789 }

	)

791 
PRIVATE
 
SèãRë_t
 
	$gëO±i⁄
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

793 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

794 
LabñO±i⁄s_t
 * 
me
 = 
pCSLabñ
->
pCuºítLabñO±i⁄s
;

795 i‡(!
tokí
)

796  
SèãRë_WARN_NO_MATCH
;

797 i‡(!
me
)

798 
me
 = 
pCSLabñ
->
pCuºítLabñO±i⁄s
 = 
	`LabñO±i⁄s_√w
’CSLabñ->
pCuºítSîvi˚Info
->
pLabñO±i⁄s
);

800 
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆTy≥
 = 
VÆTy≥_NONE
;

802 
	`CHECK_OPTION_TOKEN_DVAL1
("©", &
me
->
©
)

803 
	`CHECK_OPTION_TOKEN_SVAL1
("by", &
me
->
by
, 
Ch¨Së_EXT_ALPHANUM
)

804 
	`CHECK_OPTION_TOKEN_SVAL1
("com∂ëe_œbñ", &
me
->
com∂ëe_œbñ
, 
Ch¨Së_URL
)

805 
	`CHECK_OPTION_TOKEN_SVAL1
("fuŒ", &
me
->
com∂ëe_œbñ
, 
Ch¨Së_URL
)

806 
	`CHECK_OPTION_TOKEN_SVAL1
("f‹", &
me
->
fur
, 
Ch¨Së_URL
)

807 
	`CHECK_OPTION_TOKEN_BVAL1
("gíîic", &
me
->
gíîic
)

808 
	`CHECK_OPTION_TOKEN_BVAL1
("gí", &
me
->
gíîic
)

809 
	`CHECK_OPTION_TOKEN_SVAL1
("MIC-md5", &
me
->
MIC_md5
, 
Ch¨Së_BASE64
)

810 
	`CHECK_OPTION_TOKEN_SVAL1
("md5", &
me
->
MIC_md5
, 
Ch¨Së_BASE64
)

811 
	`CHECK_OPTION_TOKEN_DVAL1
("⁄", &
me
->
⁄
)

812 
	`CHECK_OPTION_TOKEN_SVAL1
("sig«tuª-PKCS", &
me
->
sig«tuª_PKCS
, 
Ch¨Së_BASE64
)

813 
	`CHECK_OPTION_TOKEN_DVAL1
("u¡û", &
me
->
u¡û
)

814 
	`CHECK_OPTION_TOKEN_DVAL1
("exp", &
me
->
u¡û
)

815 i‡(!
	`°rˇ£comp
(
tokí
, "comment")) {

816 
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆT¨gë
.
pT¨gëLi°
 = &
me
->
commíts
;

817 
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆTy≥
 = 
VÆTy≥_COMMENT
;

821 i‡(
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆTy≥
 =
VÆTy≥_NONE
)

822  
SèãRë_WARN_NO_MATCH
;

823 i‡(
	`Pun˘_badDem¨k
(
pSèãTokí
->
vÆidPun˘u©i⁄
, 
dem¨k
))

824  
SèãRë_WARN_BAD_PUNCT
;

825  
SèãRë_OK
;

826 
	}
}

828 
PRIVATE
 
SèãRë_t
 
	$gëO±i⁄VÆue
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

830 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

832 
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆTy≥
) {

833 
VÆTy≥_BVAL
:

834 
	`BVÆ_ªadVÆ
(
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆT¨gë
.
pT¨gëBVÆ
, 
tokí
);

835 
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆTy≥
 = 
VÆTy≥_NONE
;

837 
VÆTy≥_FVAL
:

838 
	`CHECK_CAR_SET
(
Ch¨Së_NUMBER
)

839 
	`FVÆ_ªadVÆ
(
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆT¨gë
.
pT¨gëFVÆ
, 
tokí
);

840 
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆTy≥
 = 
VÆTy≥_NONE
;

842 
VÆTy≥_SVAL
:

843 
	`CHECK_CAR_SET
(
pCSLabñ
->
èrgëCh¨Së
)

844 
	`SVÆ_ªadVÆ
(
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆT¨gë
.
pT¨gëSVÆ
, 
tokí
);

845 
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆTy≥
 = 
VÆTy≥_NONE
;

847 
VÆTy≥_DVAL
:

848 
	`CHECK_CAR_SET
(
Ch¨Së_DATE
)

849 
	`DVÆ_ªadVÆ
(
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆT¨gë
.
pT¨gëDVÆ
, 
tokí
);

850 
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆTy≥
 = 
VÆTy≥_NONE
;

852 
VÆTy≥_COMMENT
:

853 
	`CHECK_CAR_SET
(
Ch¨Së_EXT_ALPHANUM
)

855 * 
±r
 = 0;

856 
	`SåAŒocC›y
(
±r
, 
tokí
);

857 
	`HTLi°_≠≥ndObje˘
(*
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆT¨gë
.
pT¨gëLi°
, (*)
±r
);

863  
SèãRë_OK
;

864 
	}
}

866 
PRIVATE
 
SèãRë_t
 
	$LabñLi°_›í
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

868  
SèãRë_OK
;

869 
	}
}

871 
PRIVATE
 
SèãRë_t
 
	$LabñLi°_gëVîsi⁄
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

873 c⁄° 
vîsi⁄Pªfix
[] = "PICS-";

874 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

876 i‡(!
tokí
)

877  
SèãRë_WARN_NO_MATCH
;

878 i‡(
	`°∫ˇ£comp
(
tokí
, 
vîsi⁄Pªfix
, (versionPrefix)-1))

879  
SèãRë_WARN_NO_MATCH
;

880 
tokí
 +(
vîsi⁄Pªfix
)-1;

881 
	`CHECK_CAR_SET
(
Ch¨Së_NUMBER
)

882 
	`FVÆ_ªadVÆ
(&
pCSLabñ
->
pCSLLD©a
->
vîsi⁄
, 
tokí
);

883  
SèãRë_OK
;

884 
	}
}

886 
PRIVATE
 
SèãRë_t
 
	$LabñLi°_˛o£
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

888  
SèãRë_DONE
;

889 
	}
}

891 
PRIVATE
 
	$LabñLi°_de°roy
(
CSP¨£_t
 * 
pCSP¨£
)

893 
	}
}

895 
PRIVATE
 
SèãRë_t
 
	$Sîvi˚Info_›í
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

897 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

899 
pCSLabñ
->
pCuºítSîvi˚Info
 = 
	`Sîvi˚Info_√w
();

900 
pCSLabñ
->
cuºítLabñNumbî
 = 0;

901 
	`HTLi°_≠≥ndObje˘
(
pCSLabñ
->
pCSLLD©a
->
£rvi˚Infos
, (*ÌCSLabñ->
pCuºítSîvi˚Info
);

902 
pCSLabñ
->
pCuºítLabñO±i⁄s
 =ÖCSLabñ->
pCuºítSîvi˚Info
->
pLabñO±i⁄s
;

903  
SèãRë_OK
;

904 
	}
}

906 
PRIVATE
 
SèãRë_t
 
	$Sîvi˚Info_gëSîvi˚Id
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

908 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

909 
P¨£C⁄ãxt_t
 * 
pP¨£C⁄ãxt
 = 
pCSP¨£
->pParseContext;

911 i‡(!
tokí
 || !
pP¨£C⁄ãxt
->
ob£rvedQuŸes
)

912  
SèãRë_WARN_NO_MATCH
;

913 i‡(
	`Pun˘_badDem¨k
(
pSèãTokí
->
vÆidPun˘u©i⁄
, 
dem¨k
))

914  
SèãRë_WARN_BAD_PUNCT
;

915 
	`CHECK_CAR_SET
(
Ch¨Së_URL
)

916 
	`SVÆ_ªadVÆ
(&
pCSLabñ
->
pCuºítSîvi˚Info
->
øtög_£rvi˚
, 
tokí
);

917  
SèãRë_OK
;

918 
	}
}

920 
PRIVATE
 
SèãRë_t
 
	$Sîvi˚Info_˛o£
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

922 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

924 
pCSLabñ
->
pCuºítSîvi˚Info
 = 0;

925  
SèãRë_OK
;

926 
	}
}

928 
PRIVATE
 
	$Sîvi˚Info_de°roy
(
CSP¨£_t
 * 
pCSP¨£
)

930 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

931 
	`HTLi°_ªmoveObje˘
(
pCSLabñ
->
pCSLLD©a
->
£rvi˚Infos
, (*ÌCSLabñ->
pCuºítSîvi˚Info
);

932 
	`Sîvi˚Info_‰ì
(
pCSLabñ
->
pCuºítSîvi˚Info
);

933 
pCSLabñ
->
pCuºítSîvi˚Info
 = 0;

934 
	}
}

936 
PRIVATE
 
SèãRë_t
 
	$Sîvi˚Info_˛órO±s
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

938 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

939 
pCSLabñ
->
pCuºítLabñO±i⁄s
 = 0;

940  
SèãRë_OK
;

941 
	}
}

943 
PRIVATE
 
SèãRë_t
 
	$Labñ_›í
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

945 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

947 
pCSLabñ
->
pCuºítLabñ
 = 
	`Labñ_√w
();

948 
pCSLabñ
->
cuºítLabñNumbî
++;

949 
	`HTLi°_≠≥ndObje˘
(
pCSLabñ
->
pCuºítSîvi˚Info
->
œbñs
, (*ÌCSLabñ->
pCuºítLabñ
);

950  
SèãRë_OK
;

951 
	}
}

953 
PRIVATE
 
SèãRë_t
 
	$Labñ_˛o£
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

955 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

957 
pCSLabñ
->
pCuºítLabñ
 = 0;

958  
SèãRë_OK
;

959 
	}
}

961 
PRIVATE
 
	$Labñ_de°roy
(
CSP¨£_t
 * 
pCSP¨£
)

963 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

964 
	`HTLi°_ªmoveObje˘
(
pCSLabñ
->
pCuºítSîvi˚Info
->
œbñs
,ÖCSLabñ->
pCuºítLabñ
);

965 
	`Labñ_‰ì
(
pCSLabñ
->
pCuºítLabñ
);

966 
pCSLabñ
->
pCuºítLabñ
 = 0;

967 
	}
}

969 
PRIVATE
 
SèãRë_t
 
	$LabñTªe_›í
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

971 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

973 
pCSLabñ
->
pCSLLD©a
->
hasTªe
 = 1;

974 
pCSLabñ
->
pCuºítLabñTªe
 =ÖCSLabñ->
pCuºítLabñ
->
sögÀLabñs
 = 
	`HTLi°_√w
();

975  
SèãRë_OK
;

976 
	}
}

978 
PRIVATE
 
SèãRë_t
 
	$LabñTªe_˛o£
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

980 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

982 
pCSLabñ
->
pCuºítLabñTªe
 = 0;

983  
SèãRë_OK
;

984 
	}
}

986 
PRIVATE
 
	$LabñTªe_de°roy
(
CSP¨£_t
 * 
pCSP¨£
)

988 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

989 
SögÀLabñ_t
 * 
pSögÀLabñ
;

990 (
pSögÀLabñ
 = (
SögÀLabñ_t
 *Ë
	`HTLi°_ªmoveLa°Obje˘
(
pCSLabñ
->
pCuºítLabñ
->
sögÀLabñs
)))

991 
	`SögÀLabñ_‰ì
(
pSögÀLabñ
);

992 
	`HTLi°_dñëe
(
pCSLabñ
->
pCuºítLabñ
->
sögÀLabñs
);

993 
pCSLabñ
->
pCuºítLabñ
->
sögÀLabñs
 = 0;

994 
	}
}

996 
PRIVATE
 
SèãRë_t
 
	$SögÀLabñ_›í
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

998 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

1000 
pCSLabñ
->
pCuºítSögÀLabñ
 = 
	`SögÀLabñ_√w
’CSLabñ->
pCuºítLabñO±i⁄s
,ÖCSLabñ->
pCuºítSîvi˚Info
->
pLabñO±i⁄s
);

1001 i‡(
pCSLabñ
->
pCuºítLabñ
->
sögÀLabñs
)

1002 
	`HTLi°_≠≥ndObje˘
(
pCSLabñ
->
pCuºítLabñ
->
sögÀLabñs
, (*ÌCSLabñ->
pCuºítSögÀLabñ
);

1004 
pCSLabñ
->
pCuºítLabñ
->
pSögÀLabñ
 =ÖCSLabñ->
pCuºítSögÀLabñ
;

1005 
pCSLabñ
->
pCuºítLabñO±i⁄s
 =ÖCSLabñ->
pCuºítSögÀLabñ
->
pLabñO±i⁄s
;

1006  
SèãRë_OK
;

1007 
	}
}

1009 
PRIVATE
 
SèãRë_t
 
	$SögÀLabñ_˛o£
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

1011 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

1013 
pCSLabñ
->
pCuºítSögÀLabñ
 = 0;

1014  
SèãRë_OK
;

1015 
	}
}

1017 
PRIVATE
 
	$SögÀLabñ_de°roy
(
CSP¨£_t
 * 
pCSP¨£
)

1019 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

1020 i‡(
pCSLabñ
->
pCuºítLabñ
->
pSögÀLabñ
)

1021 
pCSLabñ
->
pCuºítLabñ
->
pSögÀLabñ
 = 0;

1023 
	`HTLi°_ªmoveObje˘
(
pCSLabñ
->
pCuºítLabñ
->
sögÀLabñs
, (*ÌCSLabñ->
pCuºítSögÀLabñ
);

1024 
	`SögÀLabñ_‰ì
(
pCSLabñ
->
pCuºítSögÀLabñ
);

1025 
pCSLabñ
->
pCuºítSögÀLabñ
 = 0;

1026 
	}
}

1028 
PRIVATE
 
SèãRë_t
 
	$LabñR©ög_›í
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

1030 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

1032 i‡(!
pCSLabñ
->
pCuºítSögÀLabñ
)

1033 
	`SögÀLabñ_›í
(
pCSP¨£
, 
tokí
, 
dem¨k
);

1034 
pCSLabñ
->
pCuºítLabñR©ög
 = 
	`LabñR©ög_√w
();

1035 
	`HTLi°_≠≥ndObje˘
(
pCSLabñ
->
pCuºítSögÀLabñ
->
œbñR©ögs
, (*ÌCSLabñ->
pCuºítLabñR©ög
);

1036 
pCSLabñ
->
pCuºítLabñO±i⁄s
 = 0;

1037  
SèãRë_OK
;

1038 
	}
}

1040 
PRIVATE
 
SèãRë_t
 
	$LabñR©ög_gëId
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

1042 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

1044 i‡(
	`Pun˘_badDem¨k
(
pSèãTokí
->
vÆidPun˘u©i⁄
, 
dem¨k
))

1045  
SèãRë_WARN_BAD_PUNCT
;

1046 
	`CHECK_CAR_SET
(
Ch¨Së_TRANSMIT_NAME
)

1047 
	`SVÆ_ªadVÆ
(&
pCSLabñ
->
pCuºítLabñR©ög
->
idítifõr
, 
tokí
);

1048  
SèãRë_OK
;

1049 
	}
}

1051 
PRIVATE
 
SèãRë_t
 
	$LabñR©ög_gëVÆue
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

1053 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

1055 i‡(
	`Pun˘_badDem¨k
(
pSèãTokí
->
vÆidPun˘u©i⁄
, 
dem¨k
))

1056  
SèãRë_WARN_BAD_PUNCT
;

1057 
	`FVÆ_ªadVÆ
(&
pCSLabñ
->
pCuºítLabñR©ög
->
vÆue
, 
tokí
);

1058  
SèãRë_OK
;

1059 
	}
}

1061 
PRIVATE
 
SèãRë_t
 
	$LabñR©ög_˛o£
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

1063 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

1065 
pCSLabñ
->
pCuºítLabñR©ög
 = 0;

1066  
SèãRë_OK
;

1067 
	}
}

1069 
PRIVATE
 
	$LabñR©ög_de°roy
(
CSP¨£_t
 * 
pCSP¨£
)

1071 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

1072 
	`HTLi°_ªmoveObje˘
(
pCSLabñ
->
pCuºítSögÀLabñ
->
œbñR©ögs
, (*ÌCSLabñ->
pCuºítLabñR©ög
);

1073 
	`LabñR©ög_‰ì
(
pCSLabñ
->
pCuºítLabñR©ög
);

1074 
pCSLabñ
->
pCuºítLabñR©ög
 = 0;

1075 
	}
}

1077 
PRIVATE
 
SèãRë_t
 
	$LabñR©ög_√xt
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

1079 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

1081 
	`SögÀLabñ_doClo£
(
pCSP¨£
, 
tokí
, 
dem¨k
);

1082 i‡(
pCSLabñ
->
pCuºítLabñTªe
) {

1083 
	`SETNEXTSTATE
(&
LabñTªe_èrgëObje˘
, 
SubSèã_A
);

1085 
	`Labñ_doClo£
(
pCSP¨£
, 
tokí
, 
dem¨k
);

1086 
	`SETNEXTSTATE
(&
Awkw¨d_èrgëObje˘
, 
SubSèã_A
);

1088  
SèãRë_OK
;

1089 
	}
}

1091 
PRIVATE
 
SèãRë_t
 
	$LabñR©ögR™ge_›í
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

1093 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

1095 
pCSLabñ
->
pCuºítR™ge
 = 0;

1096 
pCSLabñ
->
pCuºítLabñR©ög
->
ønges
 = 
	`HTLi°_√w
();

1097  
SèãRë_OK
;

1098 
	}
}

1100 
PRIVATE
 
SèãRë_t
 
	$LabñR©ögR™ge_gë
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

1102 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

1103 
LabñR©ög_t
 * 
pLabñR©ög
 = 
pCSLabñ
->
pCuºítLabñR©ög
;

1104 
R™ge_t
 * 
me
;

1105 * 
±r
, * 
backPå
;

1106 i‡(!
tokí
)

1107  
SèãRë_WARN_NO_MATCH
;

1108 i‡(
	`Pun˘_badDem¨k
(
pSèãTokí
->
vÆidPun˘u©i⁄
, 
dem¨k
))

1109  
SèãRë_WARN_BAD_PUNCT
;

1110 i‡((
me
 = (
R™ge_t
 *Ë
	`HT_CALLOC
(1, (R™ge_t))Ë=
NULL
)

1111 
	`HT_OUTOFMEM
("Range_t");

1113 
	`HTLi°_≠≥ndObje˘
(
pLabñR©ög
->
ønges
, (*)
me
);

1114 
backPå
 = 
±r
 = 
tokí
;

1115 *
±r
) {

1116 i‡(*
±r
 == ':') {

1117 *
±r
 = 0;

1118 
±r
++;

1121 
±r
++;

1123 
	`FVÆ_ªadVÆ
(&
me
->
mö
, 
backPå
);

1124 i‡(*
±r
)

1125 
	`FVÆ_ªadVÆ
(&
me
->
max
, 
±r
);

1126  
SèãRë_OK
;

1127 
	}
}

1129 
PRIVATE
 
SèãRë_t
 
	$LabñR©ögR™ge_˛o£
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

1131 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

1133 
pCSLabñ
->
pCuºítR™ge
 = 0;

1134  
SèãRë_OK
;

1135 
	}
}

1137 
PRIVATE
 
	$LabñR©ögR™ge_de°roy
(
CSP¨£_t
 * 
pCSP¨£
)

1139 
	}
}

1141 
PRIVATE
 
SèãRë_t
 
	$Awkw¨d_›í
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

1143  
SèãRë_OK
;

1144 
	}
}

1146 
PRIVATE
 
SèãRë_t
 
	$Awkw¨d_˛o£
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

1148  
SèãRë_OK
;

1149 
	}
}

1151 
PRIVATE
 
	$Awkw¨d_de°roy
(
CSP¨£_t
 * 
pCSP¨£
)

1153 
	}
}

1155 
PRIVATE
 
SèãRë_t
 
	$îr‹_›í
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

1157 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

1159 
pCSLabñ
->
pCuºítLabñEº‹
 = 
	`LabñEº‹_√w
();

1160 i‡(
pCSLabñ
->
pCuºítLabñ
)

1161 
pCSLabñ
->
pCuºítLabñ
->
pLabñEº‹
 =ÖCSLabñ->
pCuºítLabñEº‹
;

1163 
pCSLabñ
->
pCuºítSîvi˚Info
->
pLabñEº‹
 =ÖCSLabñ->
pCuºítLabñEº‹
;

1164  
SèãRë_OK
;

1165 
	}
}

1167 
PRIVATE
 
SèãRë_t
 
	$îr‹_gëEx∂
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

1169 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

1170 
P¨£C⁄ãxt_t
 * 
pP¨£C⁄ãxt
 = 
pCSP¨£
->pParseContext;

1171 * 
ex∂aö©i⁄
 = 0;

1173 i‡(!
tokí
 || !
pP¨£C⁄ãxt
->
ob£rvedQuŸes
)

1174  
SèãRë_WARN_NO_MATCH
;

1175 i‡(
	`Pun˘_badDem¨k
(
pSèãTokí
->
vÆidPun˘u©i⁄
, 
dem¨k
))

1176  
SèãRë_WARN_BAD_PUNCT
;

1177 
	`CHECK_CAR_SET
(
Ch¨Së_EXT_ALPHANUM
)

1178 
	`SåAŒocC›y
(
ex∂aö©i⁄
, 
tokí
);

1179 
	`HTLi°_≠≥ndObje˘
(
pCSLabñ
->
pCuºítLabñEº‹
->
ex∂™©i⁄s
, 
ex∂aö©i⁄
);

1180  
SèãRë_OK
;

1181 
	}
}

1183 
PRIVATE
 
SèãRë_t
 
	$îr‹_˛o£
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

1185 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

1187 
pCSLabñ
->
pCuºítLabñEº‹
 = 0;

1188 i‡(
pCSLabñ
->
pCuºítLabñ
)

1189 
pCSLabñ
->
pCuºítLabñ
->
pLabñEº‹
 =ÖCSLabñ->
pCuºítLabñEº‹
;

1191 
pCSLabñ
->
pCuºítSîvi˚Info
->
pLabñEº‹
 =ÖCSLabñ->
pCuºítLabñEº‹
;

1192  
SèãRë_OK
;

1193 
	}
}

1195 
PRIVATE
 
	$îr‹_de°roy
(
CSP¨£_t
 * 
pCSP¨£
)

1197 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

1198 i‡(
pCSLabñ
->
pCuºítLabñ
)

1199 
pCSLabñ
->
pCuºítLabñ
->
pLabñEº‹
 = 0;

1201 
pCSLabñ
->
pCuºítSîvi˚Info
->
pLabñEº‹
 = 0;

1202 
	`LabñEº‹_‰ì
(
pCSLabñ
->
pCuºítLabñEº‹
);

1203 
	}
}

1205 
PRIVATE
 
SèãRë_t
 
	$Exãnsi⁄_›í
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

1207 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

1208 
Exãnsi⁄_t
 * 
me
 = 
	`Exãnsi⁄_√w
();

1209 
pCSLabñ
->
pCuºítExãnsi⁄
 = 
me
;

1210 i‡(!
pCSLabñ
->
pCuºítLabñO±i⁄s
->
exãnsi⁄s
)

1211 
pCSLabñ
->
pCuºítLabñO±i⁄s
->
exãnsi⁄s
 = 
	`HTLi°_√w
();

1212 
	`HTLi°_≠≥ndObje˘
(
pCSLabñ
->
pCuºítLabñO±i⁄s
->
exãnsi⁄s
, (*)
me
);

1213  
SèãRë_OK
;

1214 
	}
}

1216 
PRIVATE
 
SèãRë_t
 
	$Exãnsi⁄_m™d©‹y
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

1218 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

1219 
pCSLabñ
->
pCuºítExãnsi⁄
->
m™d©‹y
 = 1;

1220 
pCSLabñ
->
pCSLLD©a
->
m™d©‹yExãnsi⁄s
++;

1221  
SèãRë_OK
;

1222 
	}
}

1224 
PRIVATE
 
SèãRë_t
 
	$Exãnsi⁄_gëURL
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

1226 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

1227 i‡(!
tokí
 || !
pCSP¨£
->
pP¨£C⁄ãxt
->
ob£rvedQuŸes
)

1228  
SèãRë_WARN_NO_MATCH
;

1229 i‡(
	`Pun˘_badDem¨k
(
pSèãTokí
->
vÆidPun˘u©i⁄
, 
dem¨k
))

1230  
SèãRë_WARN_BAD_PUNCT
;

1231 
	`CHECK_CAR_SET
(
Ch¨Së_URL
)

1232 
	`SVÆ_ªadVÆ
(&
pCSLabñ
->
pCuºítExãnsi⁄
->
uæ
, 
tokí
);

1233  
SèãRë_OK
;

1234 
	}
}

1236 
PRIVATE
 
SèãRë_t
 
	$Exãnsi⁄_˛o£
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

1238 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

1239 
pCSLabñ
->
pCuºítExãnsi⁄
 = 0;

1240  
SèãRë_OK
;

1241 
	}
}

1243 
PRIVATE
 
	$Exãnsi⁄_de°roy
(
CSP¨£_t
 * 
pCSP¨£
)

1245 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

1246 
	`HTLi°_ªmoveObje˘
(
pCSLabñ
->
pCuºítLabñO±i⁄s
->
exãnsi⁄s
, (*ÌCSLabñ->
pCuºítExãnsi⁄
);

1247 i‡(!
	`HTLi°_cou¡
(
pCSLabñ
->
pCuºítLabñO±i⁄s
->
exãnsi⁄s
)) {

1248 
	`HTLi°_dñëe
(
pCSLabñ
->
pCuºítLabñO±i⁄s
->
exãnsi⁄s
);

1249 
pCSLabñ
->
pCuºítLabñO±i⁄s
->
exãnsi⁄s
 = 0;

1251 
	`Exãnsi⁄_‰ì
(
pCSLabñ
->
pCuºítExãnsi⁄
);

1252 
pCSLabñ
->
pCuºítExãnsi⁄
 = 0;

1253 
	}
}

1255 
PRIVATE
 
SèãRë_t
 
	$Exãnsi⁄_√xt
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

1257 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

1258 i‡(
pCSLabñ
->
pCuºítSögÀLabñ
) {

1259 
	`SETNEXTSTATE
(&
SögÀLabñ_èrgëObje˘
, 
SubSèã_A
);

1261 
	`SETNEXTSTATE
(&
Sîvi˚Info_èrgëObje˘
, 
SubSèã_B
);

1263  
SèãRë_OK
;

1264 
	}
}

1266 
PRIVATE
 
SèãRë_t
 
	$Exãnsi⁄D©a_›í
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

1268 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

1269 
Exãnsi⁄D©a_t
 * 
me
 = 
	`Exãnsi⁄D©a_√w
();

1271 
me
->
pP¨ítExãnsi⁄D©a
 = 
pCSLabñ
->
pCuºítExãnsi⁄D©a
;

1272 if(
pCSLabñ
->
pCuºítExãnsi⁄D©a
) {

1273 i‡(!
pCSLabñ
->
pCuºítExãnsi⁄D©a
->
m‹eD©a
)

1274 
pCSLabñ
->
pCuºítExãnsi⁄D©a
->
m‹eD©a
 = 
	`HTLi°_√w
();

1275 
	`HTLi°_≠≥ndObje˘
(
pCSLabñ
->
pCuºítExãnsi⁄D©a
->
m‹eD©a
, (*)
me
);

1277 i‡(!
pCSLabñ
->
pCuºítExãnsi⁄
->
exãnsi⁄D©a
)

1278 
pCSLabñ
->
pCuºítExãnsi⁄
->
exãnsi⁄D©a
 = 
	`HTLi°_√w
();

1279 
	`HTLi°_≠≥ndObje˘
(
pCSLabñ
->
pCuºítExãnsi⁄
->
exãnsi⁄D©a
, (*)
me
);

1281 
pCSLabñ
->
pCuºítExãnsi⁄D©a
 = 
me
;

1282  
SèãRë_OK
;

1283 
	}
}

1285 
PRIVATE
 
SèãRë_t
 
	$Exãnsi⁄D©a_√xt
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

1287 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

1289 i‡(
pCSLabñ
->
pCuºítExãnsi⁄D©a
) {

1290 
	`SETNEXTSTATE
(&
Exãnsi⁄D©a_èrgëObje˘
, 
SubSèã_B
);

1292 
	`SETNEXTSTATE
(&
Exãnsi⁄_èrgëObje˘
, 
SubSèã_C
);

1294  
SèãRë_OK
;

1295 
	}
}

1297 
PRIVATE
 
SèãRë_t
 
	$Exãnsi⁄D©a_˛o£
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

1299 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

1300 
pCSLabñ
->
pCuºítExãnsi⁄D©a
 =ÖCSLabñ->pCuºítExãnsi⁄D©a->
pP¨ítExãnsi⁄D©a
;

1301  
SèãRë_OK
;

1302 
	}
}

1304 
PRIVATE
 
	$Exãnsi⁄D©a_de°roy
(
CSP¨£_t
 * 
pCSP¨£
)

1306 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

1307 
HTLi°
 ** 
pHﬁdîLi°
 = 
pCSLabñ
->
pCuºítExãnsi⁄D©a
->
pP¨ítExãnsi⁄D©a
 ?

1308 &
pCSLabñ
->
pCuºítExãnsi⁄D©a
->
pP¨ítExãnsi⁄D©a
->
m‹eD©a
 :

1309 &
pCSLabñ
->
pCuºítExãnsi⁄
->
exãnsi⁄D©a
;

1310 
	`HTLi°_ªmoveObje˘
(*
pHﬁdîLi°
, (*)
pCSLabñ
->
pCuºítExãnsi⁄D©a
);

1311 i‡(!
	`HTLi°_cou¡
(*
pHﬁdîLi°
)) {

1312 
	`HTLi°_dñëe
(*
pHﬁdîLi°
);

1313 *
pHﬁdîLi°
 = 0;

1315 
	`Exãnsi⁄D©a_‰ì
(
pCSLabñ
->
pCuºítExãnsi⁄D©a
);

1316 
pCSLabñ
->
pCuºítExãnsi⁄D©a
 = 0;

1317 
	}
}

1319 
PRIVATE
 
SèãRë_t
 
	$Exãnsi⁄D©a_gëD©a
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

1321 
CSLabñ_t
 * 
pCSLabñ
 = 
	`GëCSLabñ
(
pCSP¨£
);

1322 
Exãnsi⁄D©a_t
 * 
me
;

1323 i‡(!
tokí
)

1324  
SèãRë_WARN_NO_MATCH
;

1325 i‡(
	`Pun˘_badDem¨k
(
pSèãTokí
->
vÆidPun˘u©i⁄
, 
dem¨k
))

1326  
SèãRë_WARN_BAD_PUNCT
;

1327 
	`CHECK_CAR_SET
(
Ch¨Së_EXT_DATA
)

1328 
me
 = 
pCSLabñ
->
pCuºítExãnsi⁄D©a
;

1330 
	`SåAŒocC›y
(
me
->
ãxt
, 
tokí
);

1331 
me
->
quŸed
 = 
pCSP¨£
->
pP¨£C⁄ãxt
->
ob£rvedQuŸes
;

1332  
SèãRë_OK
;

1333 
	}
}

1335 
PRIVATE
 
SèãRë_t
 
	$LabñR©ög_doClo£
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

1337 i‡(
pCSP¨£
->
pP¨£C⁄ãxt
->
pT¨gëCh™geCÆlback
 &&

1338 (*
pCSP¨£
->
pP¨£C⁄ãxt
->
pT¨gëCh™geCÆlback
)’CSP¨£, &
LabñR©ög_èrgëObje˘
, 
CSLLTC_RATING
, 2Ë=
SèãRë_ERROR
)

1339  
NowIn_ERROR
;

1340  
	`LabñR©ög_˛o£
(
pCSP¨£
, 
tokí
, 
dem¨k
);

1341 
	}
}

1343 
PRIVATE
 
SèãRë_t
 
	$SögÀLabñ_doClo£
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

1345 i‡(
pCSP¨£
->
pP¨£C⁄ãxt
->
pT¨gëCh™geCÆlback
 &&

1346 (*
pCSP¨£
->
pP¨£C⁄ãxt
->
pT¨gëCh™geCÆlback
)’CSP¨£, &
SögÀLabñ_èrgëObje˘
, 
CSLLTC_SINGLE
, 2, 0Ë=
SèãRë_ERROR
)

1347  
NowIn_ERROR
;

1348  
	`SögÀLabñ_˛o£
(
pCSP¨£
, 
tokí
, 
dem¨k
);

1349 
	}
}

1351 
PRIVATE
 
SèãRë_t
 
	$LabñTªe_doClo£
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

1353 i‡(
pCSP¨£
->
pP¨£C⁄ãxt
->
pT¨gëCh™geCÆlback
 &&

1354 (*
pCSP¨£
->
pP¨£C⁄ãxt
->
pT¨gëCh™geCÆlback
)’CSP¨£, &
LabñTªe_èrgëObje˘
, 
CSLLTC_LABTREE
, 2Ë=
SèãRë_ERROR
)

1355  
NowIn_ERROR
;

1356  
	`LabñTªe_˛o£
(
pCSP¨£
, 
tokí
, 
dem¨k
);

1357 
	}
}

1359 
PRIVATE
 
SèãRë_t
 
	$Labñ_doClo£
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

1361 i‡(
pCSP¨£
->
pP¨£C⁄ãxt
->
pT¨gëCh™geCÆlback
 &&

1362 (*
pCSP¨£
->
pP¨£C⁄ãxt
->
pT¨gëCh™geCÆlback
)’CSP¨£, &
Labñ_èrgëObje˘
, 
CSLLTC_LABEL
, 2, 0Ë=
SèãRë_ERROR
)

1363  
NowIn_ERROR
;

1364  
	`Labñ_˛o£
(
pCSP¨£
, 
tokí
, 
dem¨k
);

1365 
	}
}

1367 
PRIVATE
 
SèãRë_t
 
	$Sîvi˚Info_doClo£
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

1369 i‡(
pCSP¨£
->
pP¨£C⁄ãxt
->
pT¨gëCh™geCÆlback
 &&

1370 (*
pCSP¨£
->
pP¨£C⁄ãxt
->
pT¨gëCh™geCÆlback
)’CSP¨£, &
Sîvi˚Info_èrgëObje˘
, 
CSLLTC_SERVICE
, 2Ë=
SèãRë_ERROR
)

1371  
NowIn_ERROR
;

1372  
	`Sîvi˚Info_˛o£
(
pCSP¨£
, 
tokí
, 
dem¨k
);

1373 
	}
}

1384 
PUBLIC
 
CSEº‹_t
 
	$CSLabñ_ôî©eSîvi˚s
(
CSLabñ_t
 * 
pCSLabñ
, 
CSLabñ_ˇŒback_t
 * 
pIãøt‹CB
, 
Sèã_P¨ms_t
 * 
pP¨ms
, c⁄° * 
idítifõr
, * 
pVoid
)

1386 
HTLi°
 * 
£rvi˚Infos
;

1387 
CSEº‹_t
 
ªt
 = 
CSEº‹_OK
;

1388 
cou¡
 = 0;

1389 i‡(!
pIãøt‹CB
 ||

1390 !
pCSLabñ
 ||

1391 !
pCSLabñ
->
pCSLLD©a
->
£rvi˚Infos
)

1392  
CSEº‹_BAD_PARAM
;

1393 
£rvi˚Infos
 = 
pCSLabñ
->
pCSLLD©a
->serviceInfos;

1394 
ªt
 =
CSEº‹_OK
 &&

1395 (
pCSLabñ
->
pCuºítSîvi˚Info
 = (
Sîvi˚Info_t
 *Ë
	`HTLi°_√xtObje˘
(
£rvi˚Infos
))) {

1396 i‡(
idítifõr
 &&

1397 (!
	`SVÆ_öôülized
(&
pCSLabñ
->
pCuºítSîvi˚Info
->
øtög_£rvi˚
) ||

1398 
	`°rˇ£comp
(
	`SVÆ_vÆue
(&
pCSLabñ
->
pCuºítSîvi˚Info
->
øtög_£rvi˚
), 
idítifõr
)))

1400 
ªt
 = (*
pIãøt‹CB
)(
pCSLabñ
, 
pP¨ms
, 
idítifõr
, 
pVoid
);

1401 
cou¡
++;

1403 i‡(!
cou¡
)

1404  
CSEº‹_SERVICE_MISSING
;

1405  
ªt
;

1406 
	}
}

1410 
PUBLIC
 
CSEº‹_t
 
	$CSLabñ_ôî©eLabñs
(
CSLabñ_t
 * 
pCSLabñ
, 
CSLabñ_ˇŒback_t
 * 
pIãøt‹CB
, 
Sèã_P¨ms_t
 * 
pP¨ms
, c⁄° * 
idítifõr
, * 
pVoid
)

1412 
HTLi°
 * 
œbñs
;

1413 
CSEº‹_t
 
ªt

CSEº‹_OK
;

1414 
cou¡
 = 0;

1415 i‡(!
pIãøt‹CB
 ||

1416 !
pCSLabñ
 ||

1417 !
pCSLabñ
->
pCuºítSîvi˚Info
 ||

1418 !
pCSLabñ
->
pCuºítSîvi˚Info
->
œbñs
)

1419  
CSEº‹_BAD_PARAM
;

1420 
œbñs
 = 
pCSLabñ
->
pCuºítSîvi˚Info
->labels;

1421 
ªt
 =
CSEº‹_OK
 && (
pCSLabñ
->
pCuºítLabñ
 = (
Labñ_t
 *Ë
	`HTLi°_√xtObje˘
(
œbñs
))) {

1422 
ªt
 = (*
pIãøt‹CB
)(
pCSLabñ
, 
pP¨ms
, 
idítifõr
, 
pVoid
);

1423 
cou¡
++;

1425 i‡(!
cou¡
)

1426  
CSEº‹_LABEL_MISSING
;

1427  
ªt
;

1428 
	}
}

1432 
PUBLIC
 
CSEº‹_t
 
	$CSLabñ_ôî©eSögÀLabñs
(
CSLabñ_t
 * 
pCSLabñ
, 
CSLabñ_ˇŒback_t
 * 
pIãøt‹CB
, 
Sèã_P¨ms_t
 * 
pP¨ms
, c⁄° * 
idítifõr
, * 
pVoid
)

1434 
CSEº‹_t
 
ªt

CSEº‹_OK
;

1435 
cou¡
 = 0;

1436 i‡(!
pIãøt‹CB
 ||

1437 !
pCSLabñ
 ||

1438 !
pCSLabñ
->
pCuºítSîvi˚Info
 ||

1439 !
pCSLabñ
->
pCuºítSîvi˚Info
->
œbñs
)

1440  
CSEº‹_BAD_PARAM
;

1442 i‡(
pCSLabñ
->
pCuºítLabñ
->
pSögÀLabñ
) {

1443 
pCSLabñ
->
pCuºítSögÀLabñ
 =ÖCSLabñ->
pCuºítLabñ
->
pSögÀLabñ
;

1444 
ªt
 = (*
pIãøt‹CB
)(
pCSLabñ
, 
pP¨ms
, 
idítifõr
, 
pVoid
);

1445 
cou¡
++;

1448 
HTLi°
 * 
sögÀLabñs
 = 
pCSLabñ
->
pCuºítLabñ
->singleLabels;

1449 
ªt
 =
CSEº‹_OK
 && (
pCSLabñ
->
pCuºítSögÀLabñ
 = (
SögÀLabñ_t
 *Ë
	`HTLi°_√xtObje˘
(
sögÀLabñs
))) {

1450 
ªt
 = (*
pIãøt‹CB
)(
pCSLabñ
, 
pP¨ms
, 
idítifõr
, 
pVoid
);

1451 
cou¡
++;

1455 i‡(!
cou¡
)

1456  
CSEº‹_SINGLELABEL_MISSING
;

1457  
ªt
;

1458 
	}
}

1462 
PUBLIC
 
CSEº‹_t
 
	$CSLabñ_ôî©eLabñR©ögs
(
CSLabñ_t
 * 
pCSLabñ
, 
CSLabñ_ˇŒback_t
 * 
pIãøt‹CB
, 
Sèã_P¨ms_t
 * 
pP¨ms
, c⁄° * 
idítifõr
, * 
pVoid
)

1464 
HTLi°
 * 
œbñR©ögs
;

1465 
CSEº‹_t
 
ªt
 = 
CSEº‹_OK
;

1466 
cou¡
 = 0;

1467 i‡(!
pIãøt‹CB
 ||

1468 !
pCSLabñ
 ||

1469 !
pCSLabñ
->
pCuºítSîvi˚Info
 ||

1470 !
pCSLabñ
->
pCuºítSîvi˚Info
->
œbñs
 ||

1471 !
pCSLabñ
->
pCuºítLabñ
 ||

1472 !
pCSLabñ
->
pCuºítSögÀLabñ
 ||

1473 !
pCSLabñ
->
pCuºítSögÀLabñ
->
œbñR©ögs
)

1474  
CSEº‹_BAD_PARAM
;

1475 
œbñR©ögs
 = 
pCSLabñ
->
pCuºítSögÀLabñ
->labelRatings;

1476 
ªt
 =
CSEº‹_OK
 && (
pCSLabñ
->
pCuºítLabñR©ög
 = (
LabñR©ög_t
 *Ë
	`HTLi°_√xtObje˘
(
œbñR©ögs
)))

1477 i‡(!
idítifõr
 || !
	`°rˇ£comp
(
	`SVÆ_vÆue
(&
pCSLabñ
->
pCuºítLabñR©ög
->identifier), identifier)) {

1478 
ªt
 = (*
pIãøt‹CB
)(
pCSLabñ
, 
pP¨ms
, 
idítifõr
, 
pVoid
);

1479 
cou¡
++;

1481 i‡(!
cou¡
)

1482  
CSEº‹_RATING_MISSING
;

1483  
ªt
;

1484 
	}
}

1490 
PUBLIC
 
FVÆ_t
 
	$CSLabñ_øtögsIn˛udeFVÆ
(
CSLabñ_t
 * 
pCSLabñ
, 
FVÆ_t
 * 
u£rVÆue
)

1492 
R™ge_t
 
∑rm
 = 
R™ge_NEW_UNINITIALIZED
;

1493 
∑rm
.
mö
 = *
u£rVÆue
;

1494  
	`CSLabñ_øtögsIn˛udeR™ge
(
pCSLabñ
, &
∑rm
);

1495 
	}
}

1497 
PUBLIC
 
FVÆ_t
 
	$CSLabñ_øtögsIn˛udeR™ge
(
CSLabñ_t
 * 
pCSLabñ
, 
R™ge_t
 * 
pU£rR™ge
)

1499 
HTLi°
 * 
œbñR™ges
 = 
pCSLabñ
->
pCuºítLabñR©ög
->
ønges
;

1500 
FVÆ_t
 
vÆue
 = 
pCSLabñ
->
pCuºítLabñR©ög
->value;

1501 
FVÆ_t
 
ªt
;

1502 
R™ge_t
 * 
pLabñR™ge
;

1503 i‡(
	`FVÆ_öôülized
(&
vÆue
)) {

1504 
R™ge_t
 
∑rm
 = 
R™ge_NEW_UNINITIALIZED
;

1505 
∑rm
.
mö
 = 
vÆue
;

1506  
	`R™ge_g≠
(&
∑rm
, 
pU£rR™ge
);

1508 (
pLabñR™ge
 = (
R™ge_t
 *)
	`HTLi°_√xtObje˘
(
œbñR™ges
))) {

1509 
FVÆ_t
 
thisO√
 = 
	`R™ge_g≠
(
pLabñR™ge
, 
pU£rR™ge
);

1510 i‡(
	`FVÆ_isZîo
(&
thisO√
))

1511  
thisO√
;

1512 i‡(
	`FVÆ_√¨îZîo
(&
thisO√
, &
ªt
))

1513 
ªt
 = 
thisO√
;

1515  
ªt
;

1516 
	}
}

1518 
PUBLIC
 
FVÆ_t
 
	$CSLabñ_øtögsIn˛udeR™ges
(
CSLabñ_t
 * 
pCSLabñ
, 
HTLi°
 * 
u£rR™ges
)

1520 
FVÆ_t
 
ªt
;

1521 
R™ge_t
 * 
pU£rR™ge
;

1522 
BOOL
 
ªtInôülized
 = 
NO
;

1523 (
pU£rR™ge
 = (
R™ge_t
 *)
	`HTLi°_√xtObje˘
(
u£rR™ges
))) {

1524 
FVÆ_t
 
thisO√
 = 
	`CSLabñ_øtögsIn˛udeR™ge
(
pCSLabñ
, 
pU£rR™ge
);

1525 i‡(
	`FVÆ_isZîo
(&
thisO√
))

1526  
thisO√
;

1527 i‡(
ªtInôülized
) {

1528 i‡(
	`FVÆ_√¨îZîo
(&
thisO√
, &
ªt
))

1529 
ªt
 = 
thisO√
;

1531 
ªt
 = 
thisO√
;

1532 
ªtInôülized
 = 
YES
;

1535  
ªt
;

1536 
	}
}

	@PICS-client/src/CSMR.h

28 #i‚de‡
CSMR_H


29 
	#CSMR_H


	)

41 
	mCSMRTC_MACHREAD
 = 1,

42 
	mCSMRTC_VERSION
,

43 
	mCSMRTC_SYSTEM
,

44 
	mCSMRTC_SERVICE
,

45 
	mCSMRTC_ICON
,

46 
	mCSMSRC_NAME
,

47 
	mCSMSRC_VALUE
,

48 
	mCSMSRC_DESC
,

49 
	mCSMRTC_DEF
,

50 
	mCSMRTC_MIN
,

51 
	mCSMRTC_MAX
,

52 
	mCSMRTC_MULTI
,

53 
	mCSMRTC_UNORD
,

54 
	mCSMRTC_INT
,

55 
	mCSMRTC_LABL
,

56 
	mCSMRTC_CAT
,

57 
	mCSMRTC_TRANS
,

58 
	mCSMRTC_ENUM
,

59 
	mCSMRTC_COUNT


60 } 
	tCSMRTC_t
;

70 
CSMachRódD©a_s
 
	tCSMachRódD©a_t
;

81 
SèãRë_t
 
	tMachRódT¨gëCÆlback_t
(
	tCSMachRód_t
 * 
	tpCSMachRód
,

82 
	tCSP¨£_t
 * 
	tpCSP¨£
,

83 
	tCSMRTC_t
 
	tèrgë
, 
	tBOOL
 
	t˛o£d
,

84 * 
	tpVoid
);

95 
SèãRë_t
 
	tMREº‹H™dÀr_t
(
	tCSMachRód_t
 * 
	tpCSMachRód
,

96 
	tCSP¨£_t
 * 
	tpCSP¨£
, c⁄° * 
	ttokí
,

97 
	tdem¨k
, 
	tSèãRë_t
 
	tîr‹Code
);

110 
CSP¨£_t
 * 
CSP¨£_√wMachRód
(

111 
MachRódT¨gëCÆlback_t
 * 
pMachRódT¨gëCÆlback
,

112 
MREº‹H™dÀr_t
 * 
pMREº‹H™dÀr
);

113 
BOOL
 
CSP¨£_dñëeMachRód
(
CSP¨£_t
 *);

114 
CSMachRód_t
 * 
CSP¨£_gëMachRód
(
CSP¨£_t
 * 
me
);

115 * 
CSMachRód_gëSy°em
(
CSMachRód_t
 * 
pCSMachRód
);

116 * 
CSMachRód_gëSîvi˚
(
CSMachRód_t
 * 
pCSMachRód
);

135 
CSEº‹_t
 
	tCSMachRód_ˇŒback_t
(
	tCSMachRód_t
 *,

136 
	tSèã_P¨ms_t
 *,

137 c⁄° *, * 
	tpVoid
);

138 
CSEº‹_t
 
	tCSMachRód_ôî©‹_t
(
	tCSMachRód_t
 *,

139 
	tCSMachRód_ˇŒback_t
 *,

140 
	tSèã_P¨ms_t
 *, const *,

141 * 
	tpVoid
);

143 
CSMachRód_ôî©‹_t
 
CSMachRód_ôî©eC©eg‹õs
;

144 
CSMachRód_ôî©‹_t
 
CSMachRód_ôî©eLabñs
;

	@PICS-client/src/CSMRSt.h

33 #i‚de‡
CSMRST_H


34 
	#CSMRST_H


	)

41 
SVÆ_t
 
	m«me
;

42 
SVÆ_t
 
	mdes¸ùti⁄
;

43 
FVÆ_t
 
	mvÆue
;

44 
SVÆ_t
 
	mic⁄
;

45 } 
	tMachRód_íum_t
;

47 
MachRód_ˇãg‹y_s
 
	tMachRód_ˇãg‹y_t
;

48 
	sMachRód_ˇãg‹y_s
 {

49 
SVÆ_t
 
	må™smô
;

50 
SVÆ_t
 
	mic⁄
;

51 
SVÆ_t
 
	m«me
;

52 
SVÆ_t
 
	mdes¸ùti⁄
;

53 
FVÆ_t
 
	mmö
;

54 
FVÆ_t
 
	mmax
;

55 
BVÆ_t
 
	mmu…i
;

56 
BVÆ_t
 
	mun‹d
;

57 
BVÆ_t
 
	möãgî
;

58 
BVÆ_t
 
	mœbñed
;

59 
HTLi°
 * 
	mmachRód_íums
;

60 
HTLi°
 * 
	mmachRód_ˇãg‹õs
;

61 
MachRód_ˇãg‹y_t
 * 
	mpP¨ít
;

64 
	sCSMachRódD©a_s
 {

65 
FVÆ_t
 
	mvîsi⁄
;

66 
SVÆ_t
 
	msy°em
;

67 
SVÆ_t
 
	m£rvi˚
;

68 
SVÆ_t
 
	mic⁄
;

69 
SVÆ_t
 
	m«me
;

70 
SVÆ_t
 
	mdes¸ùti⁄
;

71 
FVÆ_t
 
	mmö
;

72 
FVÆ_t
 
	mmax
;

73 
BVÆ_t
 
	mmu…i
;

74 
BVÆ_t
 
	mun‹d
;

75 
BVÆ_t
 
	möãgî
;

76 
BVÆ_t
 
	mœbñed
;

77 
HTLi°
 * 
	mmachRód_ˇãg‹õs
;

86 
CSMachRódD©a_t
 * 
CSMachRód_gëCSMachRódD©a
(

87 
CSMachRód_t
 * 
pCSMachRód
);

88 
MachRód_ˇãg‹y_t
 * 
CSMachRód_gëMachRódC©eg‹y
(

89 
CSMachRód_t
 * 
pCSMachRód
);

90 
MachRód_íum_t
 * 
CSMachRód_gëMachRódEnum
(

91 
CSMachRód_t
 * 
pCSMachRód
);

	@PICS-client/src/CSMacRed.c

1 
	~"wwwsys.h
"

2 
	~"HTUtûs.h
"

3 
	~"HTSåög.h
"

4 
	~"CSP¨£.h
"

5 
	~"CSMR.h
"

6 
	~"CSMRSt.h
"

8 
	#GëCSMachRód
(
A
Ë((A)->
èrgë
.
pCSMachRód
)

	)

9 
	#SETNEXTSTATE
(
èrgë
, 
subSèã
) \

10 
pCSP¨£
->
pT¨gëObje˘
 = 
èrgë
; \

11 
pCSP¨£
->
cuºítSubSèã
 = 
subSèã
;

	)

14 
	sCSMachRód_s
 {

15 
CSMachRódD©a_t
 * 
	mpCSMachRódD©a
;

17 
MachRód_ˇãg‹y_t
 * 
	mpCuºítMachRód_ˇãg‹y
;

18 
MachRód_íum_t
 * 
	mpCuºítMachRód_íum
;

19 
BOOL
 
	möDeÁu…
;

21 
MachRódT¨gëCÆlback_t
 * 
	mpMachRódT¨gëCÆlback
;

22 
MREº‹H™dÀr_t
 * 
	mpMREº‹H™dÀr
;

25 
PRIVATE
 
T¨gëObje˘_t
 
	gMachRód_èrgëObje˘
;

26 
PRIVATE
 
T¨gëObje˘_t
 
	gVîsi⁄_èrgëObje˘
;

27 
PRIVATE
 
T¨gëObje˘_t
 
	gSy°em_èrgëObje˘
;

28 
PRIVATE
 
T¨gëObje˘_t
 
	gSîvi˚_èrgëObje˘
;

29 
PRIVATE
 
T¨gëObje˘_t
 
	gIc⁄_èrgëObje˘
;

30 
PRIVATE
 
T¨gëObje˘_t
 
	gName_èrgëObje˘
;

31 
PRIVATE
 
T¨gëObje˘_t
 
	gDes¸ùti⁄_èrgëObje˘
;

32 
PRIVATE
 
T¨gëObje˘_t
 
	gDeÁu…_èrgëObje˘
;

33 
PRIVATE
 
T¨gëObje˘_t
 
	gMö_èrgëObje˘
;

34 
PRIVATE
 
T¨gëObje˘_t
 
	gMax_èrgëObje˘
;

35 
PRIVATE
 
T¨gëObje˘_t
 
	gMu…i_èrgëObje˘
;

36 
PRIVATE
 
T¨gëObje˘_t
 
	gUn‹d_èrgëObje˘
;

37 
PRIVATE
 
T¨gëObje˘_t
 
	gI¡egî_èrgëObje˘
;

38 
PRIVATE
 
T¨gëObje˘_t
 
	gLabñed_èrgëObje˘
;

39 
PRIVATE
 
T¨gëObje˘_t
 
	gC©eg‹y_èrgëObje˘
;

40 
PRIVATE
 
T¨gëObje˘_t
 
	gTønsmô_as_èrgëObje˘
;

41 
PRIVATE
 
T¨gëObje˘_t
 
	gEnum_èrgëObje˘
;

42 
PRIVATE
 
T¨gëObje˘_t
 
	gVÆue_èrgëObje˘
;

43 
PRIVATE
 
Pªp_t
 
	gpo°VÆueSèã
;

44 
PRIVATE
 
Pªp_t
 
	gC©eg‹y_√xt
;

45 
PRIVATE
 
Pªp_t
 
	gMu…i_£tTrue
;

46 
PRIVATE
 
Pªp_t
 
	gUn‹d_£tTrue
;

47 
PRIVATE
 
Pªp_t
 
	gI¡egî_£tTrue
;

48 
PRIVATE
 
Pªp_t
 
	gLabñed_£tTrue
;

49 
PRIVATE
 
Check_t
 
	gVîsi⁄_gë
;

50 
PRIVATE
 
Check_t
 
	gSy°em_gë
;

51 
PRIVATE
 
Check_t
 
	gSîvi˚_gë
;

52 
PRIVATE
 
Check_t
 
	gIc⁄_gë
;

53 
PRIVATE
 
Check_t
 
	gName_gë
;

54 
PRIVATE
 
Check_t
 
	gDes¸ùti⁄_gë
;

55 
PRIVATE
 
Check_t
 
	gMö_gë
;

56 
PRIVATE
 
Check_t
 
	gMax_gë
;

57 
PRIVATE
 
Check_t
 
	gMu…i_gë
;

58 
PRIVATE
 
Check_t
 
	gUn‹d_gë
;

59 
PRIVATE
 
Check_t
 
	gI¡egî_gë
;

60 
PRIVATE
 
Check_t
 
	gLabñed_gë
;

61 
PRIVATE
 
Check_t
 
	gTønsmô_as_gë
;

62 
PRIVATE
 
Check_t
 
	gVÆue_gë
;

63 
PRIVATE
 
O≥n_t
 
	gMachRód_›í
;

64 
PRIVATE
 
O≥n_t
 
	gC©eg‹y_›í
;

65 
PRIVATE
 
O≥n_t
 
	gDeÁu…_›í
;

66 
PRIVATE
 
O≥n_t
 
	gEnum_›í
;

67 
PRIVATE
 
Clo£_t
 
	gMachRód_˛o£
;

68 
PRIVATE
 
Clo£_t
 
	gC©eg‹y_˛o£
;

69 
PRIVATE
 
Clo£_t
 
	gDeÁu…_˛o£
;

70 
PRIVATE
 
Clo£_t
 
	gEnum_˛o£
;

71 
PRIVATE
 
De°roy_t
 
	gMachRód_de°roy
;

72 
PRIVATE
 
De°roy_t
 
	gC©eg‹y_de°roy
;

73 
PRIVATE
 
De°roy_t
 
	gDeÁu…_de°roy
;

74 
PRIVATE
 
De°roy_t
 
	gEnum_de°roy
;

76 
PRIVATE
 
T¨gëCh™geCÆlback_t
 
	gèrgëCh™geCÆlback
;

77 
PRIVATE
 
P¨£Eº‹H™dÀr_t
 
	g∑r£Eº‹H™dÀr
;

84 
PRIVATE
 
SèãTokí_t
 
	gMachRód_°©eTokís
[] = {

92 { "íãr", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
MachRód_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

93 {"√ed vîsi⁄ së", 
SubSèã_A
, 
Pun˘_LPAREN
, 0, 0, 0, 0, &
Vîsi⁄_èrgëObje˘
, 
SubSèã_N
, 0, 0},

94 { "√ed sy°em së", 
SubSèã_B
, 
Pun˘_LPAREN
, 0, 0, 0, 0, &
Sy°em_èrgëObje˘
, 
SubSèã_N
, 0, 0},

95 {"√ed sîvi˚ së", 
SubSèã_C
, 
Pun˘_LPAREN
, 0, 0, 0, 0, &
Sîvi˚_èrgëObje˘
, 
SubSèã_N
, 0, 0},

96 {"√ed o±i⁄†£t", 
SubSèã_D
, 
Pun˘_LPAREN
, 0, 0, 0, 0, &
MachRód_èrgëObje˘
, 
SubSèã_E
, 0, 0},

97 { "ic⁄", 
SubSèã_E
, 
Pun˘_WHITE
, 0, "ic⁄", 0, 0, &
Ic⁄_èrgëObje˘
, 
SubSèã_N
, 0, 0},

98 { "«me", 
SubSèã_E
, 
Pun˘_WHITE
, 0, "«me", 0, 0, &
Name_èrgëObje˘
, 
SubSèã_N
, 0, 0},

99 { "des¸ùti⁄", 
SubSèã_E
, 
Pun˘_WHITE
, 0, "des¸ùti⁄", 0, 0, &
Des¸ùti⁄_èrgëObje˘
, 
SubSèã_N
, 0, 0},

100 { "deÁu…", 
SubSèã_E
, 
Pun˘_LPAREN
, 0, "deÁu…", 0, 0, &
DeÁu…_èrgëObje˘
, 
SubSèã_N
, 0, 0},

101 { "ˇãg‹y", 
SubSèã_E
, 
Pun˘_LPAREN
, 0, "ˇãg‹y", 0, 0, &
C©eg‹y_èrgëObje˘
, 
SubSèã_N
, 0, 0},

102 { "›í c©eg‹y", 
SubSèã_F
, 
Pun˘_LPAREN
, 0, 0, 0, 0, &
MachRód_èrgëObje˘
, 
SubSèã_G
, 0, 0},

103 { "íd", 
SubSèã_F
, 
Pun˘_RPAREN
, 0, 0, 0, 0, &
MachRód_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_CLOSE
, 0},

104 { "ˇãg‹y", 
SubSèã_G
, 
Pun˘_LPAREN
, 0, "ˇãg‹y", 0, 0, &
C©eg‹y_èrgëObje˘
, 
SubSèã_N
, 0, 0}

106 
PRIVATE
 
T¨gëObje˘_t
 
	gMachRód_èrgëObje˘
 = {"MachRód", &
MachRód_›í
, &
MachRód_˛o£
, &
MachRód_de°roy
, 
MachRód_°©eTokís
, 
øysize
(MachRód_°©eTokís), 
CSMRTC_MACHREAD
};

108 
PRIVATE
 
SèãTokí_t
 
	gVîsi⁄_°©eTokís
[] = {

111 {"íãr", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
Vîsi⁄_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

112 { "ãxt", 
SubSèã_A
, 
Pun˘_WHITE
, 0, "PICS-vîsi⁄", 0, 0, &
Vîsi⁄_èrgëObje˘
, 
SubSèã_B
, 0, 0},

113 {"vÆue", 
SubSèã_B
, 
Pun˘_RPAREN
, &
Vîsi⁄_gë
, 0, 0, 0, &
MachRód_èrgëObje˘
, SubSèã_B, 
Comm™d_CLOSE
, 0}

115 
PRIVATE
 
T¨gëObje˘_t
 
	gVîsi⁄_èrgëObje˘
 = {"Vîsi⁄", 0, 0, 0, 
Vîsi⁄_°©eTokís
, 
øysize
(Vîsi⁄_°©eTokís), 
CSMRTC_VERSION
};

117 
PRIVATE
 
SèãTokí_t
 
	gSy°em_°©eTokís
[] = {

120 {"íãr", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
Sy°em_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

121 { "ãxt", 
SubSèã_A
, 
Pun˘_WHITE
, 0, "øtög-sy°em", 0, 0, &
Sy°em_èrgëObje˘
, 
SubSèã_B
, 0, 0},

122 {"vÆue", 
SubSèã_B
, 
Pun˘_RPAREN
, &
Sy°em_gë
, 0, 0, 0, &
MachRód_èrgëObje˘
, 
SubSèã_C
, 
Comm™d_CLOSE
, 0}

124 
PRIVATE
 
T¨gëObje˘_t
 
	gSy°em_èrgëObje˘
 = {"Sy°em", 0, 0, 0, 
Sy°em_°©eTokís
, 
øysize
(Sy°em_°©eTokís), 
CSMRTC_SYSTEM
};

126 
PRIVATE
 
SèãTokí_t
 
	gSîvi˚_°©eTokís
[] = {

129 {"íãr", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
Sîvi˚_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

130 { "ãxt", 
SubSèã_A
, 
Pun˘_WHITE
, 0, "øtög-£rvi˚", 0, 0, &
Sîvi˚_èrgëObje˘
, 
SubSèã_B
, 0, 0},

131 {"vÆue", 
SubSèã_B
, 
Pun˘_RPAREN
, &
Sîvi˚_gë
, 0, 0, 0, &
MachRód_èrgëObje˘
, 
SubSèã_D
, 
Comm™d_CLOSE
, 0}

133 
PRIVATE
 
T¨gëObje˘_t
 
	gSîvi˚_èrgëObje˘
 = {"Sîvi˚", 0, 0, 0, 
Sîvi˚_°©eTokís
, 
øysize
(Sîvi˚_°©eTokís), 
CSMRTC_SERVICE
};

135 
PRIVATE
 
SèãTokí_t
 
	gIc⁄_°©eTokís
[] = {

137 {"íãr", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
Ic⁄_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

138 {"vÆue", 
SubSèã_A
, 
Pun˘_RPAREN
, &
Ic⁄_gë
, 0, 0, 0, 0, 
SubSèã_X
, 
Comm™d_CLOSE
, &
po°VÆueSèã
}

140 
PRIVATE
 
T¨gëObje˘_t
 
	gIc⁄_èrgëObje˘
 = {"Ic⁄", 0, 0, 0, 
Ic⁄_°©eTokís
, 
øysize
(Ic⁄_°©eTokís), 
CSMRTC_ICON
};

142 
PRIVATE
 
SèãTokí_t
 
	gName_°©eTokís
[] = {

144 {"íãr", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
Name_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

145 {"vÆue", 
SubSèã_A
, 
Pun˘_RPAREN
, &
Name_gë
, 0, 0, 0, 0, 
SubSèã_X
, 
Comm™d_CLOSE
, &
po°VÆueSèã
}

147 
PRIVATE
 
T¨gëObje˘_t
 
	gName_èrgëObje˘
 = {"Name", 0, 0, 0, 
Name_°©eTokís
, 
øysize
(Name_°©eTokís), 
CSMSRC_NAME
};

149 
PRIVATE
 
SèãTokí_t
 
	gVÆue_°©eTokís
[] = {

151 {"íãr", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
VÆue_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

152 {"vÆue", 
SubSèã_A
, 
Pun˘_RPAREN
, &
VÆue_gë
, 0, 0, 0, &
Enum_èrgëObje˘
, 
SubSèã_G
, 
Comm™d_CLOSE
, 0}

154 
PRIVATE
 
T¨gëObje˘_t
 
	gVÆue_èrgëObje˘
 = {"Name", 0, 0, 0, 
VÆue_°©eTokís
, 
øysize
(VÆue_°©eTokís), 
CSMSRC_VALUE
};

156 
PRIVATE
 
SèãTokí_t
 
	gDes¸ùti⁄_°©eTokís
[] = {

158 {"íãr", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
Des¸ùti⁄_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

159 {"vÆue", 
SubSèã_A
, 
Pun˘_RPAREN
, &
Des¸ùti⁄_gë
, 0, 0, 0, 0, 
SubSèã_X
, 
Comm™d_CLOSE
, &
po°VÆueSèã
}

161 
PRIVATE
 
T¨gëObje˘_t
 
	gDes¸ùti⁄_èrgëObje˘
 = {"Des¸ùti⁄", 0, 0, 0, 
Des¸ùti⁄_°©eTokís
, 
øysize
(Des¸ùti⁄_°©eTokís), 
CSMSRC_DESC
};

163 
PRIVATE
 
SèãTokí_t
 
	gDeÁu…_°©eTokís
[] = {

166 { "íãr", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
DeÁu…_èrgëObje˘
, 
SubSèã_B
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

167 { "›í", 
SubSèã_A
, 
Pun˘_LPAREN
, 0, 0, 0, 0, &
DeÁu…_èrgëObje˘
, 
SubSèã_B
, 0, 0},

168 { "˛o£", 
SubSèã_A
, 
Pun˘_RPAREN
, 0, 0, 0, 0, &
MachRód_èrgëObje˘
, 
SubSèã_D
, 
Comm™d_CLOSE
, 0},

169 { "mö", 
SubSèã_B
, 
Pun˘_WHITE
, 0, "mö", 0, 0, &
Mö_èrgëObje˘
, 
SubSèã_N
, 0, 0},

170 { "max", 
SubSèã_B
, 
Pun˘_WHITE
, 0, "max", 0, 0, &
Max_èrgëObje˘
, 
SubSèã_N
, 0, 0},

171 { "mu…i", 
SubSèã_B
, 
Pun˘_WHITE
|
Pun˘_RPAREN
, 0, "mu…ivÆue", 0, 0, &
Mu…i_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_CHAIN
, 0},

172 { "un‹d", 
SubSèã_B
, 
Pun˘_WHITE
|
Pun˘_RPAREN
, 0, "un‹dîed", 0, 0, &
Un‹d_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_CHAIN
, 0},

173 {"öãgî", 
SubSèã_B
, 
Pun˘_WHITE
|
Pun˘_RPAREN
, 0, "öãgî", 0, 0, &
I¡egî_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_CHAIN
, 0},

174 {"œbñed", 
SubSèã_B
, 
Pun˘_WHITE
|
Pun˘_RPAREN
, 0, "œbñ-⁄ly", 0, 0, &
Labñed_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_CHAIN
, 0},

176 
PRIVATE
 
T¨gëObje˘_t
 
	gDeÁu…_èrgëObje˘
 = {"DeÁu…", &
DeÁu…_›í
, &
DeÁu…_˛o£
, &
DeÁu…_de°roy
, 
DeÁu…_°©eTokís
, 
øysize
(DeÁu…_°©eTokís), 
CSMRTC_DEF
};

178 
PRIVATE
 
SèãTokí_t
 
	gMö_°©eTokís
[] = {

180 {"íãr", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
Mö_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

181 {"vÆue", 
SubSèã_A
, 
Pun˘_RPAREN
, &
Mö_gë
, 0, 0, 0, 0, 
SubSèã_X
, 
Comm™d_CLOSE
, &
po°VÆueSèã
}

183 
PRIVATE
 
T¨gëObje˘_t
 
	gMö_èrgëObje˘
 = {"Mö", 0, 0, 0, 
Mö_°©eTokís
, 
øysize
(Mö_°©eTokís), 
CSMRTC_MIN
};

185 
PRIVATE
 
SèãTokí_t
 
	gMax_°©eTokís
[] = {

187 {"íãr", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
Max_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

188 {"vÆue", 
SubSèã_A
, 
Pun˘_RPAREN
, &
Max_gë
, 0, 0, 0, 0, 
SubSèã_X
, 
Comm™d_CLOSE
, &
po°VÆueSèã
}

190 
PRIVATE
 
T¨gëObje˘_t
 
	gMax_èrgëObje˘
 = {"Max", 0, 0, 0, 
Max_°©eTokís
, 
øysize
(Max_°©eTokís), 
CSMRTC_MAX
};

192 
PRIVATE
 
SèãTokí_t
 
	gMu…i_°©eTokís
[] = {

195 { "íãr", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
Mu…i_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

196 {"bö¨y", 
SubSèã_A
, 
Pun˘_WHITE
, 0, "mu…ivÆue", 0, 0, &
Mu…i_èrgëObje˘
, 
SubSèã_B
, 0, 0},

197 { "u«ry", 
SubSèã_A
, 
Pun˘_RPAREN
, 0, "mu…ivÆue", 0, 0, 0, 
SubSèã_X
, 
Comm™d_CLOSE
, &
Mu…i_£tTrue
},

198 { "vÆue", 
SubSèã_B
, 
Pun˘_RPAREN
, &
Mu…i_gë
, 0, 0, 0, 0, 
SubSèã_X
, 
Comm™d_CLOSE
, &
po°VÆueSèã
}

200 
PRIVATE
 
T¨gëObje˘_t
 
	gMu…i_èrgëObje˘
 = {"Mu…i", 0, 0, 0, 
Mu…i_°©eTokís
, 
øysize
(Mu…i_°©eTokís), 
CSMRTC_MULTI
};

202 
PRIVATE
 
SèãTokí_t
 
	gUn‹d_°©eTokís
[] = {

205 { "íãr", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
Un‹d_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

206 {"bö¨y", 
SubSèã_A
, 
Pun˘_WHITE
, 0, "un‹dîed", 0, 0, &
Un‹d_èrgëObje˘
, 
SubSèã_B
, 0, 0},

207 { "u«ry", 
SubSèã_A
, 
Pun˘_RPAREN
, 0, "un‹dîed", 0, 0, 0, 
SubSèã_X
, 
Comm™d_CLOSE
, &
Un‹d_£tTrue
},

208 { "vÆue", 
SubSèã_B
, 
Pun˘_RPAREN
, &
Un‹d_gë
, 0, 0, 0, 0, 
SubSèã_X
, 
Comm™d_CLOSE
, &
po°VÆueSèã
}

210 
PRIVATE
 
T¨gëObje˘_t
 
	gUn‹d_èrgëObje˘
 = {"Un‹d", 0, 0, 0, 
Un‹d_°©eTokís
, 
øysize
(Un‹d_°©eTokís), 
CSMRTC_UNORD
};

212 
PRIVATE
 
SèãTokí_t
 
	gI¡egî_°©eTokís
[] = {

215 { "íãr", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
I¡egî_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

216 {"bö¨y", 
SubSèã_A
, 
Pun˘_WHITE
, 0, "öãgî", 0, 0, &
I¡egî_èrgëObje˘
, 
SubSèã_B
, 0, 0},

217 { "u«ry", 
SubSèã_A
, 
Pun˘_RPAREN
, 0, "öãgî", 0, 0, 0, 
SubSèã_X
, 
Comm™d_CLOSE
, &
I¡egî_£tTrue
},

218 { "vÆue", 
SubSèã_B
, 
Pun˘_RPAREN
, &
I¡egî_gë
, 0, 0, 0, 0, 
SubSèã_X
, 
Comm™d_CLOSE
, &
po°VÆueSèã
}

220 
PRIVATE
 
T¨gëObje˘_t
 
	gI¡egî_èrgëObje˘
 = {"I¡egî", 0, 0, 0, 
I¡egî_°©eTokís
, 
øysize
(I¡egî_°©eTokís), 
CSMRTC_INT
};

222 
PRIVATE
 
SèãTokí_t
 
	gLabñed_°©eTokís
[] = {

225 { "íãr", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
Labñed_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

226 {"bö¨y", 
SubSèã_A
, 
Pun˘_WHITE
, 0, "œbñ-⁄ly", 0, 0, &
Labñed_èrgëObje˘
, 
SubSèã_B
, 0, 0},

227 { "u«ry", 
SubSèã_A
, 
Pun˘_RPAREN
, 0, "œbñ-⁄ly", 0, 0, 0, 
SubSèã_X
, 
Comm™d_CLOSE
, &
Labñed_£tTrue
},

228 { "vÆue", 
SubSèã_B
, 
Pun˘_RPAREN
, &
Labñed_gë
, 0, 0, 0, 0, 
SubSèã_X
, 
Comm™d_CLOSE
, &
po°VÆueSèã
}

230 
PRIVATE
 
T¨gëObje˘_t
 
	gLabñed_èrgëObje˘
 = {"Labñed", 0, 0, 0, 
Labñed_°©eTokís
, 
øysize
(Labñed_°©eTokís), 
CSMRTC_LABL
};

232 
PRIVATE
 
SèãTokí_t
 
	gC©eg‹y_°©eTokís
[] = {

240 { "íãr", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
Tønsmô_as_èrgëObje˘
, SubSèã_N, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

241 {"√ed o±i⁄†£t", 
SubSèã_B
, 
Pun˘_LPAREN
, 0, 0, 0, 0, &
C©eg‹y_èrgëObje˘
, 
SubSèã_C
, 0, 0},

242 { "íd", 
SubSèã_B
, 
Pun˘_RPAREN
, 0, 0, 0, 0, 0, 
SubSèã_X
, 
Comm™d_CLOSE
, &
C©eg‹y_√xt
},

243 { "ic⁄", 
SubSèã_C
, 
Pun˘_WHITE
, 0, "ic⁄", 0, 0, &
Ic⁄_èrgëObje˘
, 
SubSèã_N
, 0, 0},

244 { "«me", 
SubSèã_C
, 
Pun˘_WHITE
, 0, "«me", 0, 0, &
Name_èrgëObje˘
, 
SubSèã_N
, 0, 0},

245 { "des¸ùti⁄", 
SubSèã_C
, 
Pun˘_WHITE
, 0, "des¸ùti⁄", 0, 0, &
Des¸ùti⁄_èrgëObje˘
, 
SubSèã_N
, 0, 0},

246 { "mö", 
SubSèã_C
, 
Pun˘_WHITE
, 0, "mö", 0, 0, &
Mö_èrgëObje˘
, 
SubSèã_N
, 0, 0},

247 { "max", 
SubSèã_C
, 
Pun˘_WHITE
, 0, "max", 0, 0, &
Max_èrgëObje˘
, 
SubSèã_N
, 0, 0},

248 { "mu…i", 
SubSèã_C
, 
Pun˘_WHITE
|
Pun˘_RPAREN
, 0, "mu…ivÆue", 0, 0, &
Mu…i_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_CHAIN
, 0},

249 { "un‹d", 
SubSèã_C
, 
Pun˘_WHITE
|
Pun˘_RPAREN
, 0, "un‹dîed", 0, 0, &
Un‹d_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_CHAIN
, 0},

250 {"öãgî", 
SubSèã_C
, 
Pun˘_WHITE
|
Pun˘_RPAREN
, 0, "öãgî", 0, 0, &
I¡egî_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_CHAIN
, 0},

251 {"œbñed", 
SubSèã_C
, 
Pun˘_WHITE
|
Pun˘_RPAREN
, 0, "œbñ-⁄ly", 0, 0, &
Labñed_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_CHAIN
, 0},

252 { "íum", 
SubSèã_C
, 
Pun˘_LPAREN
, 0, "œbñ", 0, 0, &
Enum_èrgëObje˘
, 
SubSèã_N
, 0, 0},

253 { "ˇãg‹y", 
SubSèã_C
, 
Pun˘_LPAREN
, 0, "ˇãg‹y", 0, 0, &
C©eg‹y_èrgëObje˘
, 
SubSèã_N
, 0, 0},

254 {"›íÉnum o∏ˇt", 
SubSèã_D
, 
Pun˘_LPAREN
, 0, 0, 0, 0, &
C©eg‹y_èrgëObje˘
, 
SubSèã_E
, 0, 0},

255 { "íd", 
SubSèã_D
, 
Pun˘_RPAREN
, 0, 0, 0, 0, 0, 
SubSèã_X
, 
Comm™d_CLOSE
, &
C©eg‹y_√xt
},

256 { "íum", 
SubSèã_E
, 
Pun˘_LPAREN
, 0, "œbñ", 0, 0, &
Enum_èrgëObje˘
, 
SubSèã_N
, 0, 0},

257 { "ˇãg‹y", 
SubSèã_E
, 
Pun˘_LPAREN
, 0, "ˇãg‹y", 0, 0, &
C©eg‹y_èrgëObje˘
, 
SubSèã_N
, 0, 0},

258 { "íd", 
SubSèã_E
, 
Pun˘_RPAREN
, 0, 0, 0, 0, 0, 
SubSèã_X
, 
Comm™d_CLOSE
, &
C©eg‹y_√xt
},

259 { "›í o∏ˇt", 
SubSèã_F
, 
Pun˘_LPAREN
, 0, 0, 0, 0, &
C©eg‹y_èrgëObje˘
, 
SubSèã_G
, 0, 0},

260 { "íd", 
SubSèã_F
, 
Pun˘_RPAREN
, 0, 0, 0, 0, 0, 
SubSèã_X
, 
Comm™d_CLOSE
, &
C©eg‹y_√xt
},

261 { "ˇãg‹y", 
SubSèã_G
, 
Pun˘_LPAREN
, 0, "ˇãg‹y", 0, 0, &
C©eg‹y_èrgëObje˘
, 
SubSèã_N
, 0, 0},

263 { "tÿMachRód", 
SubSèã_H
, 
Pun˘_ALL
, 0, 0, 0, 0, &
MachRód_èrgëObje˘
, 
SubSèã_F
, 
Comm™d_CHAIN
, 0}

265 
PRIVATE
 
T¨gëObje˘_t
 
	gC©eg‹y_èrgëObje˘
 = {"C©eg‹y", &
C©eg‹y_›í
, &
C©eg‹y_˛o£
, &
C©eg‹y_de°roy
, 
C©eg‹y_°©eTokís
, 
øysize
(C©eg‹y_°©eTokís), 
CSMRTC_CAT
};

267 
PRIVATE
 
SèãTokí_t
 
	gTønsmô_as_°©eTokís
[] = {

270 {"íãr", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
Tønsmô_as_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

271 { "ãxt", 
SubSèã_A
, 
Pun˘_WHITE
, 0, "å™smô-as", 0, 0, &
Tønsmô_as_èrgëObje˘
, 
SubSèã_B
, 0, 0},

272 {"vÆue", 
SubSèã_B
, 
Pun˘_RPAREN
, &
Tønsmô_as_gë
, 0, 0, 0, &
C©eg‹y_èrgëObje˘
, SubSèã_B, 
Comm™d_CLOSE
, 0}

274 
PRIVATE
 
T¨gëObje˘_t
 
	gTønsmô_as_èrgëObje˘
 = {"Tønsmô_as", 0, 0, 0, 
Tønsmô_as_°©eTokís
, 
øysize
(Tønsmô_as_°©eTokís), 
CSMRTC_TRANS
};

276 
PRIVATE
 
SèãTokí_t
 
	gEnum_°©eTokís
[] = {

288 { "íãr", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
Enum_èrgëObje˘
, 
SubSèã_B
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

289 { "«me", 
SubSèã_B
, 
Pun˘_WHITE
, 0, "«me", 0, 0, &
Name_èrgëObje˘
, 
SubSèã_N
, 0, 0},

290 { "›í", 
SubSèã_C
, 
Pun˘_LPAREN
, 0, 0, 0, 0, &
Enum_èrgëObje˘
, 
SubSèã_D
, 0, 0},

291 {"des¸ùti⁄", 
SubSèã_D
, 
Pun˘_WHITE
, 0, "des¸ùti⁄", 0, 0, &
Des¸ùti⁄_èrgëObje˘
, 
SubSèã_N
, 0, 0},

292 { "vÆue", 
SubSèã_D
, 
Pun˘_WHITE
, 0, "vÆue", 0, 0, &
VÆue_èrgëObje˘
, 
SubSèã_N
, 0, 0},

293 { "›í", 
SubSèã_E
, 
Pun˘_LPAREN
, 0, 0, 0, 0, &
Enum_èrgëObje˘
, 
SubSèã_F
, 0, 0},

294 { "vÆue", 
SubSèã_F
, 
Pun˘_WHITE
, 0, "vÆue", 0, 0, &
VÆue_èrgëObje˘
, 
SubSèã_N
, 0, 0},

295 { "›í", 
SubSèã_G
, 
Pun˘_LPAREN
, 0, 0, 0, 0, &
Enum_èrgëObje˘
, 
SubSèã_H
, 0, 0},

296 { "˛o£", 
SubSèã_G
, 
Pun˘_RPAREN
, 0, 0, 0, 0, &
C©eg‹y_èrgëObje˘
, 
SubSèã_B
, 
Comm™d_CLOSE
, 0},

297 { "ic⁄", 
SubSèã_H
, 
Pun˘_WHITE
, 0, "ic⁄", 0, 0, &
Ic⁄_èrgëObje˘
, 
SubSèã_N
, 0, 0},

298 { "˛o£", 
SubSèã_I
, 
Pun˘_RPAREN
, 0, 0, 0, 0, &
C©eg‹y_èrgëObje˘
, 
SubSèã_B
, 
Comm™d_CLOSE
, 0}

300 
PRIVATE
 
T¨gëObje˘_t
 
	gEnum_èrgëObje˘
 = {"Enum", &
Enum_›í
, &
Enum_˛o£
, &
Enum_de°roy
, 
Enum_°©eTokís
, 
øysize
(Enum_°©eTokís), 
CSMRTC_ENUM
};

306 
CSMachRód_t
 * 
	mpCSMachRód
;

307 
CSMachRódD©a_t
 * 
	mpCSMachRódD©a
;

308 } 
	tCSMachRódAssoc_t
;

310 
PRIVATE
 
HTLi°
 * 
	gCSMachRódAssocs
 = 0;

312 
PRIVATE
 
	$CSMachRódAssoc_add
(
CSMachRód_t
 * 
pCSMachRód
, 
CSMachRódD©a_t
 * 
pCSMachRódD©a
)

314 
CSMachRódAssoc_t
 * 
pEÀmít
;

315 i‡((
pEÀmít
 = (
CSMachRódAssoc_t
 *Ë
	`HT_CALLOC
(1, (CSMachRódAssoc_t))Ë=
NULL
)

316 
	`HT_OUTOFMEM
("CSMachReadAssoc_t");

317 
pEÀmít
->
pCSMachRód
 =ÖCSMachRead;

318 
pEÀmít
->
pCSMachRódD©a
 =ÖCSMachReadData;

319 i‡(!
CSMachRódAssocs
)

320 
CSMachRódAssocs
 = 
	`HTLi°_√w
();

321 
	`HTLi°_≠≥ndObje˘
(
CSMachRódAssocs
, (*)
pEÀmít
);

322 
	}
}

324 
PRIVATE
 
CSMachRódAssoc_t
 * 
	$CSMachRódAssoc_födByD©a
(
CSMachRódD©a_t
 * 
pCSMachRódD©a
)

326 
HTLi°
 * 
assocs
 = 
CSMachRódAssocs
;

327 
CSMachRódAssoc_t
 * 
pEÀmít
;

328 (
pEÀmít
 = (
CSMachRódAssoc_t
 *Ë
	`HTLi°_√xtObje˘
(
assocs
)))

329 i‡(
pEÀmít
->
pCSMachRódD©a
 ==ÖCSMachReadData)

330  
pEÀmít
;

332 
	}
}

334 
PRIVATE
 
CSMachRódAssoc_t
 * 
	$CSMachRódAssoc_födBySèã
(
CSMachRód_t
 * 
pCSMachRód
)

336 
HTLi°
 * 
assocs
 = 
CSMachRódAssocs
;

337 
CSMachRódAssoc_t
 * 
pEÀmít
;

338 (
pEÀmít
 = (
CSMachRódAssoc_t
 *Ë
	`HTLi°_√xtObje˘
(
assocs
)))

339 i‡(
pEÀmít
->
pCSMachRód
 ==ÖCSMachRead)

340  
pEÀmít
;

342 
	}
}

344 
PRIVATE
 
	$CSMachRódAssoc_ªmoveBySèã
(
CSMachRód_t
 * 
pCSMachRód
)

346 
CSMachRódAssoc_t
 * 
pEÀmít
 = 
	`CSMachRódAssoc_födBySèã
(
pCSMachRód
);

347 i‡(!
pEÀmít
)

349 
	`HTLi°_ªmoveObje˘
(
CSMachRódAssocs
, (*)
pEÀmít
);

350 
	`HT_FREE
(
pEÀmít
);

351 
	}
}

354 
PRIVATE
 
MachRód_íum_t
 * 
	$MachRód_íum_√w
()

356 
MachRód_íum_t
 * 
me
;

357 i‡((
me
 = (
MachRód_íum_t
 *Ë
	`HT_CALLOC
(1, (MachRód_íum_t))Ë=
NULL
)

358 
	`HT_OUTOFMEM
("MachRead_enum_t");

359  
me
;

360 
	}
}

362 
PUBLIC
 
	$MachRód_íum_‰ì
(
MachRód_íum_t
 * 
me
)

364 
	`SVÆ_˛ór
(&
me
->
«me
);

365 
	`SVÆ_˛ór
(&
me
->
des¸ùti⁄
);

366 
	`FVÆ_˛ór
(&
me
->
vÆue
);

367 
	`SVÆ_˛ór
(&
me
->
ic⁄
);

368 
	}
}

370 
PRIVATE
 
MachRód_ˇãg‹y_t
 * 
	$MachRód_ˇãg‹y_√w
()

372 
MachRód_ˇãg‹y_t
 * 
me
;

373 i‡((
me
 = (
MachRód_ˇãg‹y_t
 *Ë
	`HT_CALLOC
(1, (MachRód_ˇãg‹y_t))Ë=
NULL
)

374 
	`HT_OUTOFMEM
("MachRead_category_t");

375  
me
;

376 
	}
}

378 
PUBLIC
 
	$MachRód_ˇãg‹y_‰ì
(
MachRód_ˇãg‹y_t
 * 
me
)

380 
MachRód_íum_t
 * 
pMachRód_íum
;

381 
MachRód_ˇãg‹y_t
 * 
pMachRód_ˇãg‹y
;

382 (
pMachRód_íum
 = (
MachRód_íum_t
 *Ë
	`HTLi°_ªmoveLa°Obje˘
(
me
->
machRód_íums
)))

383 
	`MachRód_íum_‰ì
(
pMachRód_íum
);

384 (
pMachRód_ˇãg‹y
 = (
MachRód_ˇãg‹y_t
 *Ë
	`HTLi°_ªmoveLa°Obje˘
(
me
->
machRód_ˇãg‹õs
)))

385 
	`MachRód_ˇãg‹y_‰ì
(
pMachRód_ˇãg‹y
);

386 
	`HTLi°_dñëe
(
me
->
machRód_íums
);

387 
	`HTLi°_dñëe
(
me
->
machRód_ˇãg‹õs
);

388 
	`SVÆ_˛ór
(&
me
->
å™smô
);

389 
	`SVÆ_˛ór
(&
me
->
ic⁄
);

390 
	`SVÆ_˛ór
(&
me
->
«me
);

391 
	`SVÆ_˛ór
(&
me
->
des¸ùti⁄
);

392 
	`FVÆ_˛ór
(&
me
->
mö
);

393 
	`FVÆ_˛ór
(&
me
->
max
);

394 
	`BVÆ_˛ór
(&
me
->
mu…i
);

395 
	`BVÆ_˛ór
(&
me
->
un‹d
);

396 
	`BVÆ_˛ór
(&
me
->
öãgî
);

397 
	`BVÆ_˛ór
(&
me
->
œbñed
);

398 
	}
}

400 
PUBLIC
 
CSMachRódD©a_t
 * 
	$CSMachRódD©a_√w
()

402 
CSMachRódD©a_t
 * 
me
;

403 i‡((
me
 = (
CSMachRódD©a_t
 *Ë
	`HT_CALLOC
(1, (CSMachRódD©a_t))Ë=
NULL
)

404 
	`HT_OUTOFMEM
("CSMachReadData_t");

405 
me
->
machRód_ˇãg‹õs
 = 
	`HTLi°_√w
();

406  
me
;

407 
	}
}

409 
PUBLIC
 
	$CSMachRódD©a_‰ì
(
CSMachRódD©a_t
 * 
me
)

411 
MachRód_ˇãg‹y_t
 * 
pMachRód_ˇãg‹y
;

412 i‡(
	`CSMachRódAssoc_födByD©a
(
me
))

414 (
pMachRód_ˇãg‹y
 = (
MachRód_ˇãg‹y_t
 *Ë
	`HTLi°_ªmoveLa°Obje˘
(
me
->
machRód_ˇãg‹õs
)))

415 
	`MachRód_ˇãg‹y_‰ì
(
pMachRód_ˇãg‹y
);

416 
	`FVÆ_˛ór
(&
me
->
vîsi⁄
);

417 
	`SVÆ_˛ór
(&
me
->
sy°em
);

418 
	`SVÆ_˛ór
(&
me
->
£rvi˚
);

419 
	`SVÆ_˛ór
(&
me
->
ic⁄
);

420 
	`SVÆ_˛ór
(&
me
->
«me
);

421 
	`SVÆ_˛ór
(&
me
->
des¸ùti⁄
);

422 
	`FVÆ_˛ór
(&
me
->
mö
);

423 
	`FVÆ_˛ór
(&
me
->
max
);

424 
	`BVÆ_˛ór
(&
me
->
mu…i
);

425 
	`BVÆ_˛ór
(&
me
->
un‹d
);

426 
	`BVÆ_˛ór
(&
me
->
öãgî
);

427 
	`BVÆ_˛ór
(&
me
->
œbñed
);

428 
	`HT_FREE
(
me
);

429 
	}
}

431 
PUBLIC
 
CSMachRód_t
 * 
	$CSMachRód_√w
(
CSMachRódD©a_t
 * 
pCSMachRódD©a
, 
MachRódT¨gëCÆlback_t
 * 
pMachRódT¨gëCÆlback
,

432 
MREº‹H™dÀr_t
 * 
pMREº‹H™dÀr
)

434 
CSMachRód_t
 * 
me
;

435 i‡((
me
 = (
CSMachRód_t
 *Ë
	`HT_CALLOC
(1, (CSMachRód_t))Ë=
NULL
)

436 
	`HT_OUTOFMEM
("CSMachRead_t");

437 
me
->
pCSMachRódD©a
 =ÖCSMachReadData;

438 
me
->
pMachRódT¨gëCÆlback
 =ÖMachReadTargetCallback;

439 
me
->
pMREº‹H™dÀr
 =ÖMRErrorHandler;

440 
	`CSMachRódAssoc_add
(
me
, 
pCSMachRódD©a
);

441  
me
;

442 
	}
}

444 
PUBLIC
 
CSMachRód_t
 * 
	$CSMachRód_c›y
(
CSMachRód_t
 * 
ﬁd
)

446 
CSMachRód_t
 * 
me
;

447 
me
 = 
	`CSMachRód_√w
(
ﬁd
->
pCSMachRódD©a
, old->
pMachRódT¨gëCÆlback
,

448 
ﬁd
->
pMREº‹H™dÀr
);

449 
	`mem˝y
(
me
, 
ﬁd
, (
CSMachRód_t
));

450  
me
;

451 
	}
}

453 
PUBLIC
 
	$CSMachRód_‰ì
(
CSMachRód_t
 * 
me
)

455 
CSMachRódD©a_t
 * 
pCSMachRódD©a
 = 
me
->pCSMachReadData;

456 
	`CSMachRódAssoc_ªmoveBySèã
(
me
);

457 
	`HT_FREE
(
me
);

458 
	`CSMachRódD©a_‰ì
(
pCSMachRódD©a
);

459 
	}
}

461 
PUBLIC
 * 
	$CSMachRód_gëSy°em
(
CSMachRód_t
 * 
me
Ë{ 
	`SVÆ_vÆue
(&me->
pCSMachRódD©a
->
sy°em
);
	}
}

462 
PUBLIC
 * 
	$CSMachRód_gëSîvi˚
(
CSMachRód_t
 * 
me
Ë{ 
	`SVÆ_vÆue
(&me->
pCSMachRódD©a
->
£rvi˚
);
	}
}

463 
PUBLIC
 
CSMachRódD©a_t
 * 
	$CSMachRód_gëCSMachRódD©a
(
CSMachRód_t
 * 
me
Ë{ me->
pCSMachRódD©a
;
	}
}

464 
PUBLIC
 
MachRód_ˇãg‹y_t
 * 
	$CSMachRód_gëMachRódC©eg‹y
(
CSMachRód_t
 * 
pCSMachRód
Ë{ÖCSMachRód->
pCuºítMachRód_ˇãg‹y
;
	}
}

465 
PUBLIC
 
MachRód_íum_t
 * 
	$CSMachRód_gëMachRódEnum
(
CSMachRód_t
 * 
pCSMachRód
Ë{ÖCSMachRód->
pCuºítMachRód_íum
;
	}
}

467 
PUBLIC
 
CSP¨£_t
 * 
	$CSP¨£_√wMachRód
(
MachRódT¨gëCÆlback_t
 * 
pMachRódT¨gëCÆlback
,

468 
MREº‹H™dÀr_t
 * 
pMREº‹H™dÀr
)

470 
CSP¨£_t
 * 
me
 = 
	`CSP¨£_√w
();

471 
me
->
pP¨£C⁄ãxt
->
ígöeOf
 = &
CSP¨£_èrgëP¨£r
;

472 
me
->
pP¨£C⁄ãxt
->
pT¨gëCh™geCÆlback
 = &
èrgëCh™geCÆlback
;

473 
me
->
pP¨£C⁄ãxt
->
pP¨£Eº‹H™dÀr
 = &
∑r£Eº‹H™dÀr
;

474 
me
->
èrgë
.
pCSMachRód
 = 
	`CSMachRód_√w
(
	`CSMachRódD©a_√w
(), 
pMachRódT¨gëCÆlback
, 
pMREº‹H™dÀr
);

475 
me
->
pT¨gëObje˘
 = &
MachRód_èrgëObje˘
;

476 
me
->
cuºítSubSèã
 = 
SubSèã_N
;

477  
me
;

478 
	}
}

480 
PUBLIC
 
CSMachRód_t
 * 
	$CSP¨£_gëMachRód
(
CSP¨£_t
 * 
me
)

482  (
me
->
èrgë
.
pCSMachRód
);

483 
	}
}

485 
PUBLIC
 
BOOL
 
	$CSP¨£_dñëeMachRód
(
CSP¨£_t
 * 
pCSP¨£
)

487 
CSMachRód_t
 * 
me
 = 
	`GëCSMachRód
(
pCSP¨£
);

488 
	`CSMachRódD©a_‰ì
(
	`CSMachRód_gëCSMachRódD©a
(
me
));

489 
	`CSMachRód_‰ì
(
me
);

490  
YES
;

491 
	}
}

494 
PRIVATE
 
SèãRë_t
 
	$èrgëCh™geCÆlback
(
CSP¨£_t
 * 
pCSP¨£
, 
T¨gëObje˘_t
 * 
pT¨gëObje˘
, 
CSP¨£TC_t
 
èrgë
, 
BOOL
 
˛o£d
, * 
pVoid
)

497 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

498 i‡(
pCSMachRód
->
pMachRódT¨gëCÆlback
)

499  (*
pCSMachRód
->
pMachRódT¨gëCÆlback
)’CSMachRód, 
pCSP¨£
, (
CSMRTC_t
)
èrgë
, 
˛o£d
, 
pVoid
);

500  
SèãRë_OK
;

501 
	}
}

503 
PRIVATE
 
SèãRë_t
 
	$∑r£Eº‹H™dÀr
(
CSP¨£_t
 * 
pCSP¨£
, c⁄° * 
tokí
, 
dem¨k
, 
SèãRë_t
 
îr‹Code
)

505 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

506 i‡(
pCSMachRód
->
pMREº‹H™dÀr
)

507  (*
pCSMachRód
->
pMREº‹H™dÀr
)’CSMachRód, 
pCSP¨£
, 
tokí
, 
dem¨k
, 
îr‹Code
);

508  
îr‹Code
;

509 
	}
}

513 
PRIVATE
 
SèãRë_t
 
	$po°VÆueSèã
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

515 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

517 i‡(
pCSMachRód
->
öDeÁu…
) {

518 
	`SETNEXTSTATE
(&
DeÁu…_èrgëObje˘
, 
SubSèã_A
);

519  
SèãRë_OK
;

521 i‡(
pCSMachRód
->
pCuºítMachRód_íum
) {

522 i‡(
	`SVÆ_öôülized
(&
pCSMachRód
->
pCuºítMachRód_íum
->
ic⁄
)) {

523 
	`SETNEXTSTATE
(&
Enum_èrgëObje˘
, 
SubSèã_I
);

524  
SèãRë_OK
;

526 i‡(
	`FVÆ_öôülized
(&
pCSMachRód
->
pCuºítMachRód_íum
->
vÆue
)) {

527 
	`SETNEXTSTATE
(&
Enum_èrgëObje˘
, 
SubSèã_G
);

528  
SèãRë_OK
;

530 i‡(
	`SVÆ_öôülized
(&
pCSMachRód
->
pCuºítMachRód_íum
->
des¸ùti⁄
)) {

531 
	`SETNEXTSTATE
(&
Enum_èrgëObje˘
, 
SubSèã_E
);

532  
SèãRë_OK
;

534 
	`SETNEXTSTATE
(&
Enum_èrgëObje˘
, 
SubSèã_C
);

535  
SèãRë_OK
;

537 i‡(
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
){

538 
	`SETNEXTSTATE
(&
C©eg‹y_èrgëObje˘
, 
SubSèã_B
);

539  
SèãRë_OK
;

541 
	`SETNEXTSTATE
(&
MachRód_èrgëObje˘
, 
SubSèã_D
);

542  
SèãRë_OK
;

543 
	}
}

545 
PRIVATE
 
SèãRë_t
 
	$C©eg‹y_√xt
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

547 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

548 i‡(
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
) {

549 
	`SETNEXTSTATE
(&
C©eg‹y_èrgëObje˘
, 
SubSèã_F
);

550  
SèãRë_OK
;

552 
	`SETNEXTSTATE
(&
C©eg‹y_èrgëObje˘
, 
SubSèã_H
);

553  
SèãRë_OK
;

554 
	}
}

556 
PRIVATE
 
SèãRë_t
 
	$Mu…i_£tTrue
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

558 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

559 i‡(
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
) {

560 
	`BVÆ_£t
(&
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
->
mu…i
, 
YES
);

562 
	`BVÆ_£t
(&
pCSMachRód
->
pCSMachRódD©a
->
mu…i
, 
YES
);

564  
	`po°VÆueSèã
(
pCSP¨£
, 
tokí
, 
dem¨k
);

565 
	}
}

567 
PRIVATE
 
SèãRë_t
 
	$Un‹d_£tTrue
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

569 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

570 i‡(
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
) {

571 
	`BVÆ_£t
(&
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
->
un‹d
, 
YES
);

573 
	`BVÆ_£t
(&
pCSMachRód
->
pCSMachRódD©a
->
un‹d
, 
YES
);

575  
	`po°VÆueSèã
(
pCSP¨£
, 
tokí
, 
dem¨k
);

576 
	}
}

578 
PRIVATE
 
SèãRë_t
 
	$I¡egî_£tTrue
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

580 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

581 i‡(
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
) {

582 
	`BVÆ_£t
(&
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
->
öãgî
, 
YES
);

584 
	`BVÆ_£t
(&
pCSMachRód
->
pCSMachRódD©a
->
öãgî
, 
YES
);

586  
	`po°VÆueSèã
(
pCSP¨£
, 
tokí
, 
dem¨k
);

587 
	}
}

589 
PRIVATE
 
SèãRë_t
 
	$Labñed_£tTrue
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

591 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

592 i‡(
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
) {

593 
	`BVÆ_£t
(&
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
->
œbñed
, 
YES
);

595 
	`BVÆ_£t
(&
pCSMachRód
->
pCSMachRódD©a
->
œbñed
, 
YES
);

597  
	`po°VÆueSèã
(
pCSP¨£
, 
tokí
, 
dem¨k
);

598 
	}
}

600 
PRIVATE
 
SèãRë_t
 
	$Vîsi⁄_gë
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

602 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

603 i‡(!
	`FVÆ_ªadVÆ
(&
pCSMachRód
->
pCSMachRódD©a
->
vîsi⁄
, 
tokí
))

604  
SèãRë_WARN_NO_MATCH
;

605  
SèãRë_OK
;

606 
	}
}

608 
PRIVATE
 
SèãRë_t
 
	$Sy°em_gë
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

610 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

611 i‡(!
	`SVÆ_ªadVÆ
(&
pCSMachRód
->
pCSMachRódD©a
->
sy°em
, 
tokí
))

612  
SèãRë_WARN_NO_MATCH
;

613  
SèãRë_OK
;

614 
	}
}

616 
PRIVATE
 
SèãRë_t
 
	$Sîvi˚_gë
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

618 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

619 i‡(!
	`SVÆ_ªadVÆ
(&
pCSMachRód
->
pCSMachRódD©a
->
£rvi˚
, 
tokí
))

620  
SèãRë_WARN_NO_MATCH
;

621  
SèãRë_OK
;

622 
	}
}

624 
PRIVATE
 
SèãRë_t
 
	$Ic⁄_gë
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

626 
SVÆ_t
 * 
pSVÆ
;

627 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

628 i‡(
pCSMachRód
->
pCuºítMachRód_íum
)

629 
pSVÆ
 = &
pCSMachRód
->
pCuºítMachRód_íum
->
ic⁄
;

630 i‡(
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
)

631 
pSVÆ
 = &
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
->
ic⁄
;

633 
pSVÆ
 = &
pCSMachRód
->
pCSMachRódD©a
->
ic⁄
;

634 i‡(!
	`SVÆ_ªadVÆ
(
pSVÆ
, 
tokí
))

635  
SèãRë_WARN_NO_MATCH
;

636  
SèãRë_OK
;

637 
	}
}

639 
PRIVATE
 
SèãRë_t
 
	$Name_gë
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

641 
SVÆ_t
 * 
pSVÆ
;

642 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

643 i‡(
pCSMachRód
->
pCuºítMachRód_íum
)

644 
pSVÆ
 = &
pCSMachRód
->
pCuºítMachRód_íum
->
«me
;

645 i‡(
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
)

646 
pSVÆ
 = &
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
->
«me
;

648 
pSVÆ
 = &
pCSMachRód
->
pCSMachRódD©a
->
«me
;

649 i‡(!
	`SVÆ_ªadVÆ
(
pSVÆ
, 
tokí
))

650  
SèãRë_WARN_NO_MATCH
;

651  
SèãRë_OK
;

652 
	}
}

654 
PRIVATE
 
SèãRë_t
 
	$Des¸ùti⁄_gë
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

656 
SVÆ_t
 * 
pSVÆ
;

657 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

658 i‡(
pCSMachRód
->
pCuºítMachRód_íum
)

659 
pSVÆ
 = &
pCSMachRód
->
pCuºítMachRód_íum
->
des¸ùti⁄
;

660 i‡(
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
)

661 
pSVÆ
 = &
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
->
des¸ùti⁄
;

663 
pSVÆ
 = &
pCSMachRód
->
pCSMachRódD©a
->
des¸ùti⁄
;

664 i‡(!
	`SVÆ_ªadVÆ
(
pSVÆ
, 
tokí
))

665  
SèãRë_WARN_NO_MATCH
;

666  
SèãRë_OK
;

667 
	}
}

669 
PRIVATE
 
SèãRë_t
 
	$Mö_gë
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

671 
FVÆ_t
 * 
pFVÆ
;

672 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

673 i‡(
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
)

674 
pFVÆ
 = &
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
->
mö
;

676 
pFVÆ
 = &
pCSMachRód
->
pCSMachRódD©a
->
mö
;

677 i‡(!
	`FVÆ_ªadVÆ
(
pFVÆ
, 
tokí
))

678  
SèãRë_WARN_NO_MATCH
;

679  
SèãRë_OK
;

680 
	}
}

682 
PRIVATE
 
SèãRë_t
 
	$Max_gë
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

684 
FVÆ_t
 * 
pFVÆ
;

685 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

686 i‡(
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
)

687 
pFVÆ
 = &
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
->
max
;

689 
pFVÆ
 = &
pCSMachRód
->
pCSMachRódD©a
->
max
;

690 i‡(!
	`FVÆ_ªadVÆ
(
pFVÆ
, 
tokí
))

691  
SèãRë_WARN_NO_MATCH
;

692  
SèãRë_OK
;

693 
	}
}

695 
PRIVATE
 
SèãRë_t
 
	$Mu…i_gë
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

697 
BVÆ_t
 * 
pBVÆ
;

698 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

699 i‡(
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
)

700 
pBVÆ
 = &
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
->
mu…i
;

702 
pBVÆ
 = &
pCSMachRód
->
pCSMachRódD©a
->
mu…i
;

703 i‡(!
	`BVÆ_ªadVÆ
(
pBVÆ
, 
tokí
))

704  
SèãRë_WARN_NO_MATCH
;

705  
SèãRë_OK
;

706 
	}
}

708 
PRIVATE
 
SèãRë_t
 
	$Un‹d_gë
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

710 
BVÆ_t
 * 
pBVÆ
;

711 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

712 i‡(
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
)

713 
pBVÆ
 = &
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
->
un‹d
;

715 
pBVÆ
 = &
pCSMachRód
->
pCSMachRódD©a
->
un‹d
;

716 i‡(!
	`BVÆ_ªadVÆ
(
pBVÆ
, 
tokí
))

717  
SèãRë_WARN_NO_MATCH
;

718  
SèãRë_OK
;

719 
	}
}

721 
PRIVATE
 
SèãRë_t
 
	$I¡egî_gë
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

723 
BVÆ_t
 * 
pBVÆ
;

724 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

725 i‡(
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
)

726 
pBVÆ
 = &
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
->
öãgî
;

728 
pBVÆ
 = &
pCSMachRód
->
pCSMachRódD©a
->
öãgî
;

729 i‡(!
	`BVÆ_ªadVÆ
(
pBVÆ
, 
tokí
))

730  
SèãRë_WARN_NO_MATCH
;

731  
SèãRë_OK
;

732 
	}
}

735 
PRIVATE
 
SèãRë_t
 
	$Labñed_gë
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

737 
BVÆ_t
 * 
pBVÆ
;

738 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

739 i‡(
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
)

740 
pBVÆ
 = &
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
->
œbñed
;

742 
pBVÆ
 = &
pCSMachRód
->
pCSMachRódD©a
->
œbñed
;

743 i‡(!
	`BVÆ_ªadVÆ
(
pBVÆ
, 
tokí
))

744  
SèãRë_WARN_NO_MATCH
;

745  
SèãRë_OK
;

746 
	}
}

748 
PRIVATE
 
SèãRë_t
 
	$Tønsmô_as_gë
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

750 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

751 i‡(!
	`SVÆ_ªadVÆ
(&
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
->
å™smô
, 
tokí
))

752  
SèãRë_WARN_NO_MATCH
;

753  
SèãRë_OK
;

754 
	}
}

756 
PRIVATE
 
SèãRë_t
 
	$VÆue_gë
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

758 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

759 i‡(!
	`FVÆ_ªadVÆ
(&
pCSMachRód
->
pCuºítMachRód_íum
->
vÆue
, 
tokí
))

760  
SèãRë_WARN_NO_MATCH
;

761  
SèãRë_OK
;

762 
	}
}

764 
PRIVATE
 
SèãRë_t
 
	$MachRód_›í
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

766  
SèãRë_OK
;

767 
	}
}

769 
PRIVATE
 
SèãRë_t
 
	$C©eg‹y_›í
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

771 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

772 
MachRód_ˇãg‹y_t
 * 
me
 = 
	`MachRód_ˇãg‹y_√w
();

773 
me
->
pP¨ít
 = 
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
;

774 
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
 = 
me
;

775 
	`HTLi°_≠≥ndObje˘
(
pCSMachRód
->
pCSMachRódD©a
->
machRód_ˇãg‹õs
, (*)
me
);

776  
SèãRë_OK
;

777 
	}
}

779 
PRIVATE
 
SèãRë_t
 
	$DeÁu…_›í
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

781 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

782 
pCSMachRód
->
öDeÁu…
 = 
YES
;

783  
SèãRë_OK
;

784 
	}
}

786 
PRIVATE
 
SèãRë_t
 
	$Enum_›í
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

788 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

789 
MachRód_íum_t
 * 
me
 = 
	`MachRód_íum_√w
();

790 
pCSMachRód
->
pCuºítMachRód_íum
 = 
me
;

791 i‡(!
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
->
machRód_íums
)

792 
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
->
machRód_íums
 = 
	`HTLi°_√w
();

793 
	`HTLi°_≠≥ndObje˘
(
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
->
machRód_íums
, (*)
me
);

794  
SèãRë_OK
;

795 
	}
}

797 
PRIVATE
 
SèãRë_t
 
	$MachRód_˛o£
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

799  
SèãRë_DONE
;

800 
	}
}

802 
PRIVATE
 
SèãRë_t
 
	$C©eg‹y_˛o£
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

804 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

805 
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
 =ÖCSMachRód->pCuºítMachRód_ˇãg‹y->
pP¨ít
;

806  
SèãRë_OK
;

807 
	}
}

809 
PRIVATE
 
SèãRë_t
 
	$DeÁu…_˛o£
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

811 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

812 
pCSMachRód
->
öDeÁu…
 = 
NO
;

813  
SèãRë_OK
;

814 
	}
}

816 
PRIVATE
 
SèãRë_t
 
	$Enum_˛o£
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

818 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

819 
pCSMachRód
->
pCuºítMachRód_íum
 = 0;

820  
SèãRë_OK
;

821 
	}
}

823 
PRIVATE
 
	$MachRód_de°roy
(
CSP¨£_t
 * 
pCSP¨£
)

825 
	}
}

827 
PRIVATE
 
	$C©eg‹y_de°roy
(
CSP¨£_t
 * 
pCSP¨£
)

829 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

830 
	`HTLi°_ªmoveObje˘
(
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
->
machRód_ˇãg‹õs
, (*)pCSMachRead->pCurrentMachRead_category);

831 
	`MachRód_ˇãg‹y_‰ì
(
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
);

832 
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
 = 0;

833 
	}
}

835 
PRIVATE
 
	$DeÁu…_de°roy
(
CSP¨£_t
 * 
pCSP¨£
)

837 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

838 
pCSMachRód
->
öDeÁu…
 = 
NO
;

839 
	}
}

841 
PRIVATE
 
	$Enum_de°roy
(
CSP¨£_t
 * 
pCSP¨£
)

843 
CSMachRód_t
 * 
pCSMachRód
 = 
	`GëCSMachRód
(
pCSP¨£
);

844 
	`HTLi°_ªmoveObje˘
(
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
->
machRód_íums
, (*ÌCSMachRód->
pCuºítMachRód_íum
);

845 i‡(!
	`HTLi°_cou¡
(
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
->
machRód_íums
)) {

846 
	`HTLi°_dñëe
(
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
->
machRód_íums
);

847 
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
->
machRód_íums
 = 0;

849 
	`MachRód_íum_‰ì
(
pCSMachRód
->
pCuºítMachRód_íum
);

850 
pCSMachRód
->
pCuºítMachRód_íum
 = 0;

851 
	}
}

856 
PUBLIC
 
CSEº‹_t
 
	$CSMachRód_ôî©eC©eg‹õs
(
CSMachRód_t
 * 
pCSMachRód
, 
CSMachRód_ˇŒback_t
 * 
pIãøt‹CB
, 
Sèã_P¨ms_t
 * 
pP¨ms
, c⁄° * 
idítifõr
, * 
pVoid
)

858 
HTLi°
 * 
machRód_ˇãg‹õs
;

859 
CSEº‹_t
 
ªt
 = 
CSEº‹_OK
;

860 
cou¡
 = 0;

861 i‡(!
pIãøt‹CB
 ||

862 !
pCSMachRód
 ||

863 !
pCSMachRód
->
pCSMachRódD©a
->
machRód_ˇãg‹õs
)

864  
CSEº‹_BAD_PARAM
;

865 
machRód_ˇãg‹õs
 = 
pCSMachRód
->
pCSMachRódD©a
->machRead_categories;

866 (
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
 = (
MachRód_ˇãg‹y_t
 *Ë
	`HTLi°_√xtObje˘
(
machRód_ˇãg‹õs
)Ë&& 
ªt
 =
CSEº‹_OK
)

867 i‡(!
idítifõr
 || !
	`°rˇ£comp
(
	`SVÆ_vÆue
(&
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
->
å™smô
), identifier)) {

868 
ªt
 = (*
pIãøt‹CB
)(
pCSMachRód
, 
pP¨ms
, 
idítifõr
, 
pVoid
Ë!
CSEº‹_OK
;

869 
cou¡
++;

871 i‡(!
cou¡
)

872  
CSEº‹_CATEGORY_MISSING
;

873  
ªt
;

874 
	}
}

876 
PUBLIC
 
CSEº‹_t
 
	$CSMachRód_ôî©eEnums
(
CSMachRód_t
 * 
pCSMachRód
, 
CSMachRód_ˇŒback_t
 * 
pIãøt‹CB
, 
Sèã_P¨ms_t
 * 
pP¨ms
, c⁄° * 
idítifõr
, * 
pVoid
)

878 
HTLi°
 * 
machRód_íums
;

879 
CSEº‹_t
 
ªt
 = 
CSEº‹_OK
;

880 
cou¡
 = 0;

881 i‡(!
pIãøt‹CB
 ||

882 !
pCSMachRód
 ||

883 !
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
 ||

884 !
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
->
machRód_íums
)

885  
CSEº‹_BAD_PARAM
;

886 
machRód_íums
 = 
pCSMachRód
->
pCuºítMachRód_ˇãg‹y
->machRead_enums;

887 (
pCSMachRód
->
pCuºítMachRód_íum
 = (
MachRód_íum_t
 *Ë
	`HTLi°_√xtObje˘
(
machRód_íums
)Ë&& 
ªt
 =
CSEº‹_OK
)

888 i‡(!
idítifõr
 || !
	`°rˇ£comp
(
	`SVÆ_vÆue
(&
pCSMachRód
->
pCuºítMachRód_íum
->
«me
), identifier)) {

889 
ªt
 = (*
pIãøt‹CB
)(
pCSMachRód
, 
pP¨ms
, 
idítifõr
, 
pVoid
Ë!
CSEº‹_OK
;

890 
cou¡
++;

892 i‡(!
cou¡
)

893  
CSEº‹_ENUM_MISSING
;

894  
ªt
;

895 
	}
}

	@PICS-client/src/CSMem.c

1 
	~"WWWLib.h
"

2 
	~"CSLUtûs.h
"

4 * 
	$CSAµ_ˇŒoc
 (
size_t
 
num
, size_à
size
, c⁄° * 
fûe
, c⁄° * 
func
)

6 * 
ªt
;

7 i‡((
ªt
 = 
	`HT_CALLOC
(
num
, 
size
)Ë=
NULL
)

8 
	`HT_OUTOFMEM
(
func
);

9  
ªt
;

10 
	}
}

12 
	$HT_FREE
 (*
memblock
)

14 
	`HT_FREE
(
memblock
);

15 
	}
}

20 
PUBLIC
 
BOOL
 
	$w¨n
(
CSP¨£_t
 * 
pCSP¨£
, 
Mesßge_t
 
mesßge
, ...)

22 
va_li°
 
li°
;

23 
•a˚
[257];

24 ** 
mesßges
 = 
	`CSP¨£_gëMesßges
();

25 
HTAÀπCÆlback
 *
cbf
 = 
	`HTAÀπ_föd
(
HT_A_CONFIRM
);

27 
	`va_°¨t
(
li°
, 
mesßge
);

28 i‡(
mesßge
 >
mesßge_COUNT
) {

29 
	`HTTø˚
("Yous gotáÉrror\n");

30  
YES
;

32 
	`v•rötf
(
•a˚
, 
mesßges
[
mesßge
], 
li°
);

33 
	`va_íd
(
li°
);

34 
	`HTTø˚
(
•a˚
);

35 
	`HTTø˚
("\n");

36 i‡(
cbf
 && (*cbf)(0, 
HT_A_CONFIRM
, 
HT_MSG_RULES
, 
NULL
, NULL, NULL))

37  
NO
;

38  
YES
;

39 
	}
}

	@PICS-client/src/CSParse.c

17 
	~"wwwsys.h
"

18 
	~"HTChunk.h
"

19 
	~"HTSåög.h
"

20 
	~"CSLUtûs.h
"

21 
	~"CSP¨£.h
"

23 
PUBLIC
 
	gP¨£Debug
 = 0;

25 
PUBLIC
 
BOOL
 
	$BVÆ_ªadVÆ
(
BVÆ_t
 * 
pBVÆ
, c⁄° * 
vÆueSå
)

27 i‡(!
	`°rˇ£comp
(
vÆueSå
, "true") ||

28 !
	`°rˇ£comp
(
vÆueSå
, "yes"))

29 
pBVÆ
->
°©e
 = 
BVÆ_YES
;

30 i‡(
	`°rˇ£comp
(
vÆueSå
, "false") &&

31 
	`°rˇ£comp
(
vÆueSå
, "no"))

32  
NO
;;

33 
pBVÆ
->
°©e
 |
BVÆ_INITIALIZED
;

34  
YES
;

35 
	}
}

37 
PUBLIC
 
BOOL
 
	$BVÆ_öôülized
(c⁄° 
BVÆ_t
 * 
pBVÆ
)

39  (
pBVÆ
->
°©e
 & 
BVÆ_INITIALIZED
);

40 
	}
}

42 
PUBLIC
 
BOOL
 
	$BVÆ_vÆue
(c⁄° 
BVÆ_t
 * 
pBVÆ
)

44  ((
pBVÆ
->
°©e
 & 
BVÆ_YES
) ? 1 : 0);

45 
	}
}

47 
PUBLIC
 
	$BVÆ_£t
(
BVÆ_t
 * 
pBVÆ
, 
BOOL
 
vÆue
)

49 i‡(
vÆue
)

50 
pBVÆ
->
°©e
 = 
BVÆ_YES
;

51 
pBVÆ
->
°©e
 |
BVÆ_INITIALIZED
;

53 
	}
}

55 
PUBLIC
 
	$BVÆ_˛ór
(
BVÆ_t
 * 
pBVÆ
)

57 i‡(
pBVÆ
)

58 
pBVÆ
->
°©e
 = 
BVÆ_UNINITIALIZED
;

60 
	}
}

62 
PUBLIC
 
BOOL
 
	$FVÆ_ªadVÆ
(
FVÆ_t
 * 
pFVÆ
, c⁄° * 
vÆueSå
)

64 i‡(!
	`°rˇ£comp
(
vÆueSå
, "+INF")) {

65 
pFVÆ
->
°©
 = 
FVÆ_POSITIVE_INF
;

66  
YES
;

68 i‡(!
	`°rˇ£comp
(
vÆueSå
, "-INF")) {

69 
pFVÆ
->
°©
 = 
FVÆ_NEGATIVE_INF
;

70  
YES
;

72 
pFVÆ
->
°©
 = 
FVÆ_VALUE
;

73 
	`ssˇnf
(
vÆueSå
, "%f", &
pFVÆ
->
vÆue
);

74  
YES
;

75 
	}
}

77 
PUBLIC
 
BOOL
 
	$FVÆ_öôülized
(c⁄° 
FVÆ_t
 * 
pFVÆ
)

79  (
pFVÆ
->
°©
 !
FVÆ_UNINITIALIZED
);

80 
	}
}

82 
PUBLIC
 
	$FVÆ_vÆue
(c⁄° 
FVÆ_t
 * 
pFVÆ
)

84  (
pFVÆ
->
vÆue
);

85 
	}
}

88 
PUBLIC
 
BOOL
 
	$FVÆ_ÀssTh™
(c⁄° 
FVÆ_t
 * 
pSmÆl
, c⁄° FVÆ_à* 
pBig
)

90 i‡(
pBig
->
°©
 =
FVÆ_UNINITIALIZED
 || 
pSmÆl
->stat == FVal_UNINITIALIZED)

91  
FALSE
;

92 i‡(
pBig
->
°©
 =
FVÆ_POSITIVE_INF
 || 
pSmÆl
->°© =
FVÆ_NEGATIVE_INF
) {

93 i‡(
pSmÆl
->
°©
 =
FVÆ_POSITIVE_INF
)

94  
FALSE
;

95  
TRUE
;

97 i‡(
pBig
->
°©
 =
FVÆ_NEGATIVE_INF
 || 
pSmÆl
->°© =
FVÆ_POSITIVE_INF
) {

98  
FALSE
;

100  
pSmÆl
->
vÆue
 < 
pBig
->value;

101 
	}
}

103 
PUBLIC
 
FVÆ_t
 
	$FVÆ_möus
(c⁄° 
FVÆ_t
 * 
pBig
, c⁄° FVÆ_à* 
pSmÆl
)

105 
FVÆ_t
 
ªt
 = 
FVÆ_NEW_UNINITIALIZED
;

107 i‡(
pBig
->
°©
 =
FVÆ_UNINITIALIZED
 || 
pSmÆl
->stat == FVal_UNINITIALIZED)

108  
ªt
;

109 
	`FVÆ_£t
(&
ªt
, ()0.0);

110 i‡(
pBig
->
°©
 =
FVÆ_POSITIVE_INF
 || 
pSmÆl
->°© =
FVÆ_NEGATIVE_INF
) {

111 i‡(
pSmÆl
->
°©
 !
FVÆ_POSITIVE_INF
)

112 
	`FVÆ_£tInföôe
(&
ªt
, 0);

113  
ªt
;

115 i‡(
pBig
->
°©
 =
FVÆ_NEGATIVE_INF
 || 
pSmÆl
->°© =
FVÆ_POSITIVE_INF
) {

116 i‡(
pSmÆl
->
°©
 !
FVÆ_NEGATIVE_INF
)

117 
	`FVÆ_£tInföôe
(&
ªt
, 0);

118  
ªt
;

120 
ªt
.
vÆue
 = 
pBig
->vÆuê- 
pSmÆl
->value;

121  (
ªt
);

122 
	}
}

124 
PUBLIC
 
BOOL
 
	$FVÆ_√¨îZîo
(c⁄° 
FVÆ_t
 * 
pRef
, c⁄° FVÆ_à* 
pCheck
)

126 i‡(
pRef
->
°©
 =
FVÆ_UNINITIALIZED
 || 
pCheck
->stat == FVal_UNINITIALIZED ||

127 
pCheck
->
°©
 =
FVÆ_POSITIVE_INF
 ||ÖCheck->°© =
FVÆ_NEGATIVE_INF
)

128  
NO
;

129 i‡(
pRef
->
°©
 =
FVÆ_POSITIVE_INF
 ||ÖRef->°© =
FVÆ_NEGATIVE_INF
)

130  
YES
;

131 i‡(
pRef
->
vÆue
 < 0.0) {

132 i‡(
pCheck
->
vÆue
 < 0.0)

133  
pCheck
->
vÆue
 > 
pRef
->value;

134  
pCheck
->
vÆue
 < -
pRef
->value;

136 i‡(
pCheck
->
vÆue
 < 0.0)

137  
pCheck
->
vÆue
 > -
pRef
->value;

138  
pCheck
->
vÆue
 < 
pRef
->value;

139 
	}
}

141 
PUBLIC
 
BOOL
 
	$FVÆ_isZîo
(c⁄° 
FVÆ_t
 * 
pFVÆ
)

143 i‡(
pFVÆ
->
°©
 =
FVÆ_VALUE
 &&ÖFVÆ->
vÆue
 == 0.0)

144  
YES
;

145  
NO
;

146 
	}
}

148 
PUBLIC
 
	$FVÆ_£t
(
FVÆ_t
 * 
pFVÆ
, 
vÆue
)

150 
pFVÆ
->
vÆue
 = value;

151 
pFVÆ
->
°©
 = 
FVÆ_VALUE
;

152 
	}
}

154 
PUBLIC
 
	$FVÆ_£tInföôe
(
FVÆ_t
 * 
pFVÆ
, 
BOOL
 
√g©ive
)

156 
pFVÆ
->
°©
 = 
√g©ive
 ? 
FVÆ_NEGATIVE_INF
 : 
FVÆ_POSITIVE_INF
;

157 
	}
}

159 
PUBLIC
 
	$FVÆ_isInföôe
(c⁄° 
FVÆ_t
 * 
pFVÆ
)

161  (
pFVÆ
->
°©
 =
FVÆ_POSITIVE_INF
 ? 1 :ÖFVÆ->°© =
FVÆ_NEGATIVE_INF
 ? -1 : 0);

162 
	}
}

164 
PUBLIC
 
	$FVÆ_˛ór
(
FVÆ_t
 * 
pFVÆ
)

166 i‡(
pFVÆ
)

167 
pFVÆ
->
°©
 = 
FVÆ_UNINITIALIZED
;

169 
	}
}

171 
PUBLIC
 * 
	$FVÆ_toSå
(
FVÆ_t
 * 
pFVÆ
)

173 * 
±r
;

174 i‡((
±r
 = (*)
	`HT_MALLOC
(40)Ë=
NULL
)

175 
	`HT_OUTOFMEM
("FVal buffer");

176 
	`•rötf
(
±r
, "%.1f", 
	`FVÆ_vÆue
(
pFVÆ
));

177  
±r
;

178 
	}
}

180 
PUBLIC
 
BOOL
 
	$SVÆ_ªadVÆ
(
SVÆ_t
 * 
pSVÆ
, c⁄° * 
vÆueSå
)

182 
pSVÆ
->
öôülized
 = 
YES
;

183 
	`SåAŒocC›y
(
pSVÆ
->
vÆue
, 
vÆueSå
);

184  
YES
;

185 
	}
}

187 
PUBLIC
 
BOOL
 
	$SVÆ_öôülized
(c⁄° 
SVÆ_t
 * 
pSVÆ
)

189  (
pSVÆ
->
öôülized
 !
NO
);

190 
	}
}

192 
PUBLIC
 * 
	$SVÆ_vÆue
(c⁄° 
SVÆ_t
 * 
pSVÆ
)

194  (
pSVÆ
->
vÆue
);

195 
	}
}

197 
PUBLIC
 
	$SVÆ_˛ór
(
SVÆ_t
 * 
pSVÆ
)

199 i‡(
	`SVÆ_öôülized
(
pSVÆ
)) {

200 
	`HT_FREE
(
pSVÆ
->
vÆue
);

201 
pSVÆ
->
öôülized
 = 
NO
;

204 
	}
}

207 
	gyór
;

208 
	gm⁄th
;

209 
	gday
;

210 
	ghour
;

211 
	gmöuã
;

212 
	gtimeZ⁄eHours
;

213 
	gtimeZ⁄eMöuãs
;

215 
PUBLIC
 
BOOL
 
	$DVÆ_ªadVÆ
(
DVÆ_t
 * 
pDVÆ
, c⁄° * 
vÆueSå
)

217 
•a˚
[] = "1994.11.05T08:15-0500";

218 
timeZ⁄eSign
;

219 
timeZ⁄eMöuãsMSB
;

220 i‡(
	`°æí
(
vÆueSå
) != 0x15)

221  
NO
;

222 
	`mem˝y
(
•a˚
, 
vÆueSå
, 0x15);

223 
timeZ⁄eSign
 = 
•a˚
[16];

224 
timeZ⁄eMöuãsMSB
 = 
•a˚
[19];

225 
•a˚
[4] = space[7] = space[10] = space[13] = space[16] = space[19] = 0;

226 
pDVÆ
->
yór
 = 
	`©oi
(
•a˚
);

227 
pDVÆ
->
m⁄th
 = 
	`©oi
(
•a˚
+5);

228 
pDVÆ
->
day
 = 
	`©oi
(
•a˚
+8);

229 
pDVÆ
->
hour
 = 
	`©oi
(
•a˚
+11);

230 
pDVÆ
->
möuã
 = 
	`©oi
(
•a˚
+14);

231 
pDVÆ
->
timeZ⁄eHours
 = 
	`©oi
(
•a˚
+17);

232 
•a˚
[19] = 
timeZ⁄eMöuãsMSB
;

233 
pDVÆ
->
timeZ⁄eMöuãs
 = 
	`©oi
(
•a˚
+19);

234 i‡(
timeZ⁄eSign
 == '-') {

235 
pDVÆ
->
timeZ⁄eHours
 = -pDVal->timeZoneHours;

236 
pDVÆ
->
timeZ⁄eMöuãs
 = -pDVal->timeZoneMinutes;

238 
	`SåAŒocC›y
(
pDVÆ
->
vÆue
, 
vÆueSå
);

239 
pDVÆ
->
öôülized
 = 
YES
;

240  
YES
;

241 
	}
}

243 
PUBLIC
 
BOOL
 
	$DVÆ_öôülized
(c⁄° 
DVÆ_t
 * 
pDVÆ
)

245  (
pDVÆ
->
öôülized
 !
NO
);

246 
	}
}

248 
PUBLIC
 
	$DVÆ_com∑ª
(c⁄° 
DVÆ_t
 * 
a
, c⁄° DVÆ_à* 
b
)

250 i‡(
a
->
yór
 > 
b
->year)  1;

251 i‡(
a
->
yór
 < 
b
->year)  -1;

252 i‡(
a
->
m⁄th
 > 
b
->month)  1;

253 i‡(
a
->
m⁄th
 < 
b
->month)  -1;

254 i‡(
a
->
day
 > 
b
->day)  1;

255 i‡(
a
->
day
 < 
b
->day)  -1;

256 i‡(
a
->
hour
+a->
timeZ⁄eHours
 > 
b
->hour+b->timeZoneHours)  1;

257 i‡(
a
->
hour
+a->
timeZ⁄eHours
 < 
b
->hour+b->timeZoneHours)  -1;

258 i‡(
a
->
möuã
+a->
timeZ⁄eMöuãs
 > 
b
->minute+b->timeZoneMinutes)  1;

259 i‡(
a
->
möuã
+a->
timeZ⁄eMöuãs
 < 
b
->minute+b->timeZoneMinutes)  -1;

261 
	}
}

263 
PUBLIC
 * 
	$DVÆ_vÆue
(c⁄° 
DVÆ_t
 * 
pDVÆ
)

265  (
pDVÆ
->
vÆue
);

266 
	}
}

268 
PUBLIC
 
	$DVÆ_˛ór
(
DVÆ_t
 * 
pDVÆ
)

270 i‡(
	`DVÆ_öôülized
(
pDVÆ
)) {

271 
	`HT_FREE
(
pDVÆ
->
vÆue
);

272 
pDVÆ
->
öôülized
 = 
NO
;

275 
	}
}

277 
PUBLIC
 * 
	$R™ge_toSå
(
R™ge_t
 * 
pR™ge
)

279 
HTChunk
 * 
pChunk
;

280 * 
±r
;

281 
pChunk
 = 
	`HTChunk_√w
(20);

282 
±r
 = 
	`FVÆ_toSå
(&
pR™ge
->
mö
);

283 
	`HTChunk_puts
(
pChunk
, 
±r
);

284 
	`HT_FREE
(
±r
);

285 i‡(
	`FVÆ_öôülized
(&
pR™ge
->
max
)) {

286 
±r
 = 
	`FVÆ_toSå
(&
pR™ge
->
max
);

287 
	`HTChunk_puts
(
pChunk
, ":");

288 
	`HTChunk_puts
(
pChunk
, 
±r
);

289 
	`HT_FREE
(
±r
);

291  
	`HTChunk_toCSåög
(
pChunk
);

292 
	}
}

298 
PUBLIC
 
FVÆ_t
 
	$R™ge_g≠
(
R™ge_t
 * 
a
, R™ge_à* 
b
)

300 
R™ge_t
 
aN
 = *
a
;

301 
R™ge_t
 
bN
 = *
b
;

302 
FVÆ_t
 
ªt
 = 
FVÆ_NEW_UNINITIALIZED
;

303 i‡(!
	`FVÆ_öôülized
(&
a
->
mö
Ë|| !FVÆ_öôülized(&
b
->min))

304  (
ªt
);

307 
	`FVÆ_£t
(&
ªt
, ()0.0);

310 i‡(
	`FVÆ_ÀssTh™
(&
aN
.
max
, &aN.
mö
)) {

311 
aN
.
max
 = 
a
->
mö
;

312 
aN
.
mö
 = 
a
->
max
;

314 i‡(
	`FVÆ_ÀssTh™
(&
bN
.
max
, &bN.
mö
)) {

315 
bN
.
max
 = 
b
->
mö
;

316 
bN
.
mö
 = 
b
->
max
;

320 i‡(!
	`FVÆ_öôülized
(&
aN
.
max
)) {

321 i‡(!
	`FVÆ_öôülized
(&
bN
.
max
))

322  
	`FVÆ_möus
(&
aN
.
mö
, &
bN
.min);

323 i‡(
	`FVÆ_ÀssTh™
(&
aN
.
mö
, &
bN
.min))

324  
	`FVÆ_möus
(&
bN
.
mö
, &
aN
.min);

325 i‡(
	`FVÆ_ÀssTh™
(&
bN
.
max
, &
aN
.
mö
))

326  
	`FVÆ_möus
(&
bN
.
max
, &
aN
.
mö
);

327  
ªt
;

331 
FVÆ_t
 
möDif
 = 
	`FVÆ_möus
(&
bN
.
mö
, &
aN
.min);

332 
FVÆ_t
 
maxDif
 = 
	`FVÆ_möus
(&
bN
.
max
, &
aN
.max);

333 
R™ge_t
 
comm⁄
;

334 
comm⁄
.
mö
 = 
	`FVÆ_ÀssTh™
(&
bN
.mö, &
aN
.min) ?áN.min : bN.min;

335 
comm⁄
.
max
 = 
	`FVÆ_ÀssTh™
(&
bN
.max, &
aN
.max) ? bN.max :áN.max;

336 i‡(!
	`FVÆ_ÀssTh™
(&
comm⁄
.
max
, &comm⁄.
mö
))

337  
ªt
;

339  
	`FVÆ_√¨îZîo
(&
möDif
, &
maxDif
) ? minDif : maxDif;

341 
	}
}

346 
PUBLIC
 
CSP¨£_t
 * 
	$CSP¨£_√w
()

348 
CSP¨£_t
 * 
me
;

349 i‡((
me
 = (
CSP¨£_t
 *Ë
	`HT_CALLOC
(1, (CSP¨£_t))Ë=
NULL
)

350 
	`HT_OUTOFMEM
("CSParse");

351 
me
->
nowIn
 = 
NowIn_NEEDOPEN
;

352 
me
->
tokí
 = 
	`HTChunk_√w
(0x10);

353 i‡((
me
->
pP¨£C⁄ãxt
 = (
P¨£C⁄ãxt_t
 *Ë
	`HT_CALLOC
(1, (P¨£C⁄ãxt_t))Ë=
NULL
)

354 
	`HT_OUTOFMEM
("ParseContext_t");

355  
me
;

356 
	}
}

358 
PUBLIC
 
	$CSP¨£_dñëe
(
CSP¨£_t
 * 
me
)

360 
	`HT_FREE
(
me
->
pP¨£C⁄ãxt
);

361 
	`HTChunk_dñëe
(
me
->
tokí
);

362 
	`HT_FREE
(
me
);

363 
	}
}

366 
PRIVATE
 
SèãRë_t
 
	$ˇŒEº‹H™dÀr
(
CSP¨£_t
 * 
pCSP¨£
,

367 c⁄° * 
îr‹Loˇti⁄
,

368 
dem¨k
, 
SèãRë_t
 
îr‹Code
)

370 * 
tokí
 = 
	`HTChunk_d©a
(
pCSP¨£
->token);

371 
pCSP¨£
->
pP¨£C⁄ãxt
->
pTokíEº‹
 = 
îr‹Loˇti⁄
;

372  (*
pCSP¨£
->
pP¨£C⁄ãxt
->
pP¨£Eº‹H™dÀr
)’CSP¨£, 
tokí
,

373 
dem¨k
, 
SèãRë_ERROR_BAD_CHAR
);

374 
	}
}

387 
PUBLIC
 
CSDoM‹e_t
 
	$CSP¨£_∑r£Chunk
 (
CSP¨£_t
 * 
pCSP¨£
, c⁄° * 
±r
, 
Àn
, * 
pVoid
)

389 
i
;

390 i‡(!
Àn
 || !
±r
)

391  
CSDoM‹e_îr‹
;

392 
i
 = 0; i < 
Àn
; i++) {

393 
pCSP¨£
->
off£t
++;

394 i‡(
pCSP¨£
->
quŸeSèã
) {

395 i‡(
pCSP¨£
->
quŸeSèã
 =
±r
[
i
]) {

396 
pCSP¨£
->
quŸeSèã
 = 0;

397 
pCSP¨£
->
dem¨k
 = ' ';

400 
	`HTChunk_putb
(
pCSP¨£
->
tokí
, 
±r
+
i
, 1);

403 i‡(
±r
[
i
] =
SQUOTE
 ||Öå[i] =
DQUOTE
) {

404 i‡(
pCSP¨£
->
dem¨k
) {

405 (
pCSP¨£
->
nowIn
 = (*pCSP¨£->
pP¨£C⁄ãxt
->
ígöeOf
)’CSP¨£, ' ', 
pVoid
)Ë=
NowIn_CHAIN
);

406 
	`HTChunk_˛ór
(
pCSP¨£
->
tokí
);

407 
pCSP¨£
->
dem¨k
 = 0;

408 } i‡(
	`HTChunk_size
(
pCSP¨£
->
tokí
) &&

410 
	`ˇŒEº‹H™dÀr
(
pCSP¨£
, 
±r
+
i
,Ötr[i],

411 
SèãRë_ERROR_BAD_CHAR
Ë!=
SèãRë_OK
)

412 
pCSP¨£
->
nowIn
 = 
NowIn_ERROR
;

413 
pCSP¨£
->
quŸeSèã
 = 
±r
[
i
];

414 
pCSP¨£
->
pP¨£C⁄ãxt
->
ob£rvedQuŸes
 = 
YES
;

417 
pCSP¨£
->
nowIn
) {

418 
NowIn_NEEDOPEN
:

419 i‡(
±r
[
i
] =
LPAREN
) {

420 
pCSP¨£
->
nowIn
 = 
NowIn_ENGINE
;

423 i‡(
	`is•a˚
((Ë
±r
[
i
]))

426 i‡(
	`ˇŒEº‹H™dÀr
(
pCSP¨£
, 
±r
+
i
,Ötr[i],

427 
SèãRë_ERROR_BAD_CHAR
Ë!=
SèãRë_OK
)

428 
pCSP¨£
->
nowIn
 = 
NowIn_ERROR
;

430 
NowIn_ENGINE
:

431 i‡(
	`is•a˚
((Ë
±r
[
i
])) {

432 i‡(
	`HTChunk_size
(
pCSP¨£
->
tokí
))

433 
pCSP¨£
->
dem¨k
 = ' ';

436 i‡(
±r
[
i
] =
LPAREN
 ||Öå[i] =
RPAREN
 || 
pCSP¨£
->
dem¨k
) {

438 i‡(
±r
[
i
] =
LPAREN
Ë
pCSP¨£
->
dem¨k
 = LPAREN;

439 i‡(
±r
[
i
] =
RPAREN
Ë
pCSP¨£
->
dem¨k
 = RPAREN;

441 (
pCSP¨£
->
nowIn
 = (*pCSP¨£->
pP¨£C⁄ãxt
->
ígöeOf
)’CSP¨£,ÖCSP¨£->
dem¨k
, 
pVoid
)Ë=
NowIn_CHAIN
);

442 
	`HTChunk_˛ór
(
pCSP¨£
->
tokí
);

443 
pCSP¨£
->
dem¨k
 = 0;

444 i‡(
±r
[
i
] =
LPAREN
 ||Öå[i] =
RPAREN
)

448 
	`HTChunk_putb
(
pCSP¨£
->
tokí
, 
±r
+
i
, 1);

450 
NowIn_NEEDCLOSE
:

451 i‡(
±r
[
i
] =
RPAREN
) {

452 
pCSP¨£
->
nowIn
 = 
NowIn_ENGINE
;

455 i‡(
	`is•a˚
((Ë
±r
[
i
]))

457 i‡(
	`ˇŒEº‹H™dÀr
(
pCSP¨£
, 
±r
+
i
,Ötr[i],

458 
SèãRë_ERROR_BAD_CHAR
Ë!=
SèãRë_OK
)

459 
pCSP¨£
->
nowIn
 = 
NowIn_ERROR
;

462 
NowIn_END
:

465 i‡(
	`is•a˚
(
±r
[
i
]))

468 i‡(
	`ˇŒEº‹H™dÀr
(
pCSP¨£
, 
±r
+
i
,Ötr[i],

469 
SèãRë_ERROR_BAD_CHAR
Ë!=
SèãRë_OK
)

470 
pCSP¨£
->
nowIn
 = 
NowIn_ERROR
;

473  
CSDoM‹e_d⁄e
;

475 
NowIn_MATCHCLOSE
:

476 i‡(
±r
[
i
] =
RPAREN
) {

477 i‡(!
pCSP¨£
->
dïth
)

478 
pCSP¨£
->
nowIn
 = 
NowIn_ENGINE
;

480 
pCSP¨£
->
dïth
--;

482 i‡(
±r
[
i
] =
LPAREN
)

483 
pCSP¨£
->
dïth
++;

485 
NowIn_ERROR
:

486  
CSDoM‹e_îr‹
;

489 
	`HTTRACE
(
PICS_TRACE
, "PICS: I¡î«»îr‹ i¿∑r£∏- badÇowIn:%d.\n" 
_


490 
pCSP¨£
->
nowIn
);

491  
CSDoM‹e_îr‹
;

495  
pCSP¨£
->
nowIn
 =
NowIn_END
 ? 
CSDoM‹e_d⁄e
 : 
CSDoM‹e_m‹e
;

496 
	}
}

498 
PUBLIC
 
BOOL
 
	$Pun˘_badDem¨k
(
Pun˘_t
 
vÆidPun˘u©i⁄
, 
dem¨k
)

500 
dem¨k
) {

501 ' ':  (!(
vÆidPun˘u©i⁄
 & 
Pun˘_WHITE
));

502 
LPAREN
:  (!(
vÆidPun˘u©i⁄
 & 
Pun˘_LPAREN
));

503 
RPAREN
:  (!(
vÆidPun˘u©i⁄
 & 
Pun˘_RPAREN
));

505  
YES
;

506 
	}
}

508 
PUBLIC
 * 
	$CSP¨£_subSèã2°r
(
SubSèã_t
 
subSèã
)

510 
•a˚
[33];

511 
•a˚
[0] = 0;

512 i‡(
subSèã
 =
SubSèã_N
)

513 
	`°r˝y
(
•a˚
, "N");

514 i‡(
subSèã
 =
SubSèã_X
)

515 
	`°r˝y
(
•a˚
, "X");

517 
i
;

518 
SubSèã_t
 
comp
;

519 
ch
[] = "A";

520 
i
 = 1, 
comp
 = 
SubSèã_A
; i < ((
SubSèã_t
)*8 - 1); i++, (*
ch
)++, comp<<=1)

521 i‡(
comp
 & 
subSèã
)

522 
	`°rˇt
(
•a˚
, 
ch
);

524  
•a˚
;

525 
	}
}

527 
PRIVATE
 
	$P¨£Tø˚
(c⁄° * 
fmt
, ...)

529 
va_li°
 
pArgs
;

530 
	`va_°¨t
(
pArgs
, 
fmt
);

531 i‡(!
P¨£Debug
)

533  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

534 
	}
}

536 
PUBLIC
 
NowIn_t
 
	$CSP¨£_èrgëP¨£r
(
CSP¨£_t
 * 
pCSP¨£
, 
dem¨k
, * 
pVoid
)

539 
T¨gëObje˘_t
 * 
pT¨gëObje˘
 = 
pCSP¨£
->pTargetObject;

540 
BOOL
 
ÁûedOnPun˘
 = 
NO
;

541 * 
tokí
 = 0;

542 
SèãRë_t
 
ªt
 = 
SèãRë_OK
;

543 
i
;

544 
NowIn_t
 
œ°Rë
 = 
NowIn_END
;

546 i‡(
	`HTChunk_size
(
pCSP¨£
->
tokí
)) {

547 
	`HTChunk_ãrmö©e
(
pCSP¨£
->
tokí
);

548 
tokí
 = 
	`HTChunk_d©a
(
pCSP¨£
->token);

550 
i
 = 0; i < 
pT¨gëObje˘
->
°©eTokíCou¡
; i++) {

551 
SèãTokí_t
 * 
pSèãTokí
 = 
pT¨gëObje˘
->
°©eTokís
 + 
i
;

552 
pCSP¨£
->
pSèãTokí
 =ÖStateToken;

554 i‡(!(
pCSP¨£
->
cuºítSubSèã
 & 
pSèãTokí
->
vÆidSubSèãs
))

556 i‡(
pSèãTokí
->
pCheck
) {

557 
SèãRë_t
 
checkRes
;

558 
checkRes
 = (*
pSèãTokí
->
pCheck
)(
pCSP¨£
,ÖSèãTokí, 
tokí
, 
dem¨k
);

559 
checkRes
) {

560 
SèãRë_WARN_BAD_PUNCT
:

561 
ÁûedOnPun˘
 = 
YES
;

562 
SèãRë_WARN_NO_MATCH
:

564 
SèãRë_ERROR_BAD_CHAR
:

565 (*
pCSP¨£
->
pP¨£C⁄ãxt
->
pP¨£Eº‹H™dÀr
)’CSP¨£, 
tokí
, 
dem¨k
, 
SèãRë_ERROR_BAD_CHAR
);

568  
NowIn_ERROR
;

573 i‡(!(
pSèãTokí
->
comm™d
 & 
Comm™d_MATCHANY
)) {

574 i‡(
tokí
 && 
pSèãTokí
->
«me1
) {

575 i‡(
	`°rˇ£comp
(
tokí
, 
pSèãTokí
->
«me1
Ë&& (!pSèãTokí->
«me2
 || strcasecomp(token,ÖStateToken->name2)))

578 i‡(
tokí
 !
pSèãTokí
->
«me1
)

582 i‡(
	`Pun˘_badDem¨k
(
pSèãTokí
->
vÆidPun˘u©i⁄
, 
dem¨k
)) {

583 
ÁûedOnPun˘
 = 
YES
;

588 i‡(
œ°Rë
 !
NowIn_CHAIN
)

589 
	`P¨£Tø˚
("%30†%¯", 
tokí
 ?Åokí : "", 
dem¨k
);

590 
	`P¨£Tø˚
("%10†- %s:%10†=> ", 
pCSP¨£
->
pT¨gëObje˘
->
nŸe
, 
	`CSP¨£_subSèã2°r
’CSP¨£->
cuºítSubSèã
), 
pSèãTokí
->note);

591 i‡(
pSèãTokí
->
comm™d
 & 
Comm™d_NOTOKEN
) {

592 
	`HTChunk_˛ór
(
pCSP¨£
->
tokí
);

593 
tokí
 = 0;

595 i‡(
pSèãTokí
->
comm™d
 & 
Comm™d_OPEN
 && 
pT¨gëObje˘
->
pO≥n
)

596 i‡((*
pT¨gëObje˘
->
pO≥n
)(
pCSP¨£
, 
tokí
, 
dem¨k
Ë=
SèãRë_ERROR
)

597  
NowIn_ERROR
;

598 i‡(
pSèãTokí
->
comm™d
 & (
Comm™d_OPEN
|
Comm™d_CLOSE
Ë&& 
pCSP¨£
->
pP¨£C⁄ãxt
->
pT¨gëCh™geCÆlback
) {

599 
	`P¨£Tø˚
("%3d", 
pSèãTokí
->
comm™d
 & 
Comm™d_CLOSE
 ? -
pT¨gëObje˘
->
èrgëCh™ge
 :ÖTargetObject->targetChange);

600 i‡((*
pCSP¨£
->
pP¨£C⁄ãxt
->
pT¨gëCh™geCÆlback
)’CSP¨£, 
pT¨gëObje˘
,ÖT¨gëObje˘->
èrgëCh™ge
,

601 (
BOOL
)(
pSèãTokí
->
comm™d
 & 
Comm™d_CLOSE
), 
pVoid
Ë=
SèãRë_ERROR
)

602  
NowIn_ERROR
;

604 
	`P¨£Tø˚
(" ");

605 i‡(
pSèãTokí
->
comm™d
 & 
Comm™d_CLOSE
 && 
pT¨gëObje˘
->
pClo£
)

606 
ªt
 = (*
pT¨gëObje˘
->
pClo£
)(
pCSP¨£
, 
tokí
, 
dem¨k
);

608 i‡(
pSèãTokí
->
pPªp
 && 
ªt
 !
NowIn_ERROR
)

609 
ªt
 = (*
pSèãTokí
->
pPªp
)(
pCSP¨£
, 
tokí
, 
dem¨k
);

610 i‡(
pSèãTokí
->
pNextT¨gëObje˘
)

611 
pCSP¨£
->
pT¨gëObje˘
 = 
pSèãTokí
->
pNextT¨gëObje˘
;

612 i‡(
pSèãTokí
->
√xtSubSèã
 !
SubSèã_X
)

613 
pCSP¨£
->
cuºítSubSèã
 = 
pSèãTokí
->
√xtSubSèã
;

614 
	`P¨£Tø˚
("%10†- %s", 
pCSP¨£
->
pT¨gëObje˘
->
nŸe
, 
	`CSP¨£_subSèã2°r
’CSP¨£->
cuºítSubSèã
));

615 i‡(
pSèãTokí
->
comm™d
 & 
Comm™d_CHAIN
) {

616 
	`P¨£Tø˚
(" -O-O-");

617  
œ°Rë
 = 
NowIn_CHAIN
;

619 
	`P¨£Tø˚
("\n");

620  
œ°Rë
 = 
ªt
 =
SèãRë_ERROR_BAD_CHAR
 ? 
NowIn_ERROR
 :Ñë =
SèãRë_DONE
 ? 
NowIn_END
 : 
NowIn_ENGINE
;

622 (*
pCSP¨£
->
pP¨£C⁄ãxt
->
pP¨£Eº‹H™dÀr
)’CSP¨£, 
tokí
, 
dem¨k
, 
ÁûedOnPun˘
 ? 
SèãRë_WARN_BAD_PUNCT
 : 
SèãRë_WARN_NO_MATCH
);

623 i‡(
pT¨gëObje˘
->
pDe°roy
)

624 (*
pT¨gëObje˘
->
pDe°roy
)(
pCSP¨£
);

625  
NowIn_ERROR
;

626 
	}
}

	@PICS-client/src/CSParse.h

28 #i‚de‡
CSPARSE_H


29 
	#CSPARSE_H


	)

30 
	~"CSLUtûs.h
"

31 
	~"HTChunk.h
"

40 
	mNowIn_INVALID
 = 0,

41 
	mNowIn_NEEDOPEN
,

42 
	mNowIn_ENGINE
,

43 
	mNowIn_NEEDCLOSE
,

44 
	mNowIn_END
,

45 
	mNowIn_MATCHCLOSE
,

46 
	mNowIn_ERROR
,

47 
	mNowIn_CHAIN


48 } 
	tNowIn_t
;

60 
CSP¨£_t
 * 
CSP¨£_√w
();

61 
CSP¨£_dñëe
(
CSP¨£_t
 * 
me
);

69 
	#LPAREN
 '('

	)

70 
	#RPAREN
 ')'

	)

71 
	#LCURLY
 '{'

	)

72 
	#RCURLY
 '}'

	)

73 
	#LBRACKET
 '['

	)

74 
	#RBRACKET
 ']'

	)

75 
	#SQUOTE
 0x27

	)

76 
	#DQUOTE
 0x22

	)

77 
	#LPARENSTR
 "("

	)

78 
	#RPARENSTR
 ")"

	)

79 
	#øysize
(
A
Ë((A)/(A[0]))

	)

89 íum {
	mPun˘_ZERO
 = 1, 
	mPun˘_WHITE
 = 2, 
	mPun˘_LPAREN
 = 4,

90 
	mPun˘_RPAREN
 = 8, 
	mPun˘_ALL
 = 0xf} 
	tPun˘_t
;

113 íum {
	mSubSèã_X
 = -1, 
	mSubSèã_N
 = 0x4000, 
	mSubSèã_A
 = 1,

114 
	mSubSèã_B
 = 2, 
	mSubSèã_C
 = 4, 
	mSubSèã_D
 = 8,

115 
	mSubSèã_E
 = 0x10, 
	mSubSèã_F
 = 0x20, 
	mSubSèã_G
 = 0x40,

116 
	mSubSèã_H
 = 0x80, 
	mSubSèã_I
 = 0x100} 
	tSubSèã_t
;

124 
SèãTokí_s
 
	tSèãTokí_t
;

132 
NowIn_t
 
	tEngöe_t
(
	tCSP¨£_t
 * 
	tpCSP¨£
, 
	tdem¨k
, * 
	tpVoid
);

139 
Engöe_t
 
	gCSP¨£_èrgëP¨£r
;

150 
SèãRë_t
 
	tCheck_t
(
	tCSP¨£_t
 * 
	tpCSP¨£
, 
	tSèãTokí_t
 * 
	tpSèãTokí
,

151 * 
	ttokí
, 
	tdem¨k
);

158 
BOOL
 
Pun˘_badDem¨k
(
Pun˘_t
 
vÆidPun˘u©i⁄
, 
dem¨k
);

166 
SèãRë_t
 
	tO≥n_t
(
	tCSP¨£_t
 * 
	tpCSP¨£
, * 
	ttokí
, 
	tdem¨k
);

174 
SèãRë_t
 
	tClo£_t
(
	tCSP¨£_t
 * 
	tpCSP¨£
, * 
	ttokí
, 
	tdem¨k
);

182 
SèãRë_t
 
	tPªp_t
(
	tCSP¨£_t
 * 
	tpCSP¨£
, * 
	ttokí
, 
	tdem¨k
);

190 
	tDe°roy_t
(
	tCSP¨£_t
 * 
	tpCSP¨£
);

206 íum {
	mComm™d_NONE
 = 0, 
	mComm™d_OPEN
 = 1, 
	mComm™d_CLOSE
 = 2,

207 
	mComm™d_CHAIN
 = 4, 
	mComm™d_NOTOKEN
 = 8,

208 
	mComm™d_MATCHANY
 = 0x10} 
	tComm™d_t
;

218 
	sSèãTokí_s
 {

219 * 
	mnŸe
;

220 
SubSèã_t
 
	mvÆidSubSèãs
;

221 
Pun˘_t
 
	mvÆidPun˘u©i⁄
;

222 
Check_t
 * 
	mpCheck
;

223 * 
	m«me1
;

224 * 
	m«me2
;

225 
CSP¨£TC_t
 
	mèrgëCh™ge
;

226 
T¨gëObje˘_t
 * 
	mpNextT¨gëObje˘
;

227 
SubSèã_t
 
	m√xtSubSèã
;

228 
Comm™d_t
 
	mcomm™d
;

229 
Pªp_t
 * 
	mpPªp
;

241 
	sT¨gëObje˘_s
 {

242 * 
	mnŸe
;

243 
O≥n_t
 * 
	mpO≥n
;

244 
Clo£_t
 * 
	mpClo£
;

245 
De°roy_t
 * 
	mpDe°roy
;

246 
SèãTokí_t
 * 
	m°©eTokís
;

247 
	m°©eTokíCou¡
;

248 
CSP¨£TC_t
 
	mèrgëCh™ge
;

258 
BVÆ_t
 * 
	mpT¨gëBVÆ
;

259 
FVÆ_t
 * 
	mpT¨gëFVÆ
;

260 
SVÆ_t
 * 
	mpT¨gëSVÆ
;

261 
DVÆ_t
 * 
	mpT¨gëDVÆ
;

262 
HTLi°
 ** 
	mpT¨gëLi°
;

263 } 
	tVÆT¨gë_t
;

272 íum {
	mVÆTy≥_NONE
, 
	mVÆTy≥_BVAL
, 
	mVÆTy≥_FVAL
,

273 
	mVÆTy≥_SVAL
, 
	mVÆTy≥_DVAL
,

274 
	mVÆTy≥_COMMENT
} 
	tVÆTy≥_t
;

284 
Engöe_t
 * 
	mígöeOf
;

285 
T¨gëCh™geCÆlback_t
 * 
	mpT¨gëCh™geCÆlback
;

286 
P¨£Eº‹H™dÀr_t
 * 
	mpP¨£Eº‹H™dÀr
;

289 
VÆT¨gë_t
 
	mvÆT¨gë
;

290 
VÆTy≥_t
 
	mvÆTy≥
;

292 * 
	mpTokíEº‹
;

294 
BOOL
 
	mob£rveQuŸes
;

295 
BOOL
 
	mob£rvedQuŸes
;

296 * 
	mÀgÆCh¨s
;

297 
	mÀgÆCh¨Cou¡
;

298 } 
	tP¨£C⁄ãxt_t
;

307 
	sCSP¨£_s
 {

308 
	mquŸeSèã
;

309 
NowIn_t
 
	mnowIn
;

310 
HTChunk
 * 
	mtokí
;

311 
	mdem¨k
;

312 
	moff£t
;

313 
	mdïth
;

314 
P¨£C⁄ãxt_t
 * 
	mpP¨£C⁄ãxt
;

316 
CSMachRód_t
 * 
	mpCSMachRód
;

317 
CSLabñ_t
 * 
	mpCSLabñ
;

318 
CSU£r_t
 * 
	mpCSU£r
;

319 } 
	mèrgë
;

320 
T¨gëObje˘_t
 * 
	mpT¨gëObje˘
;

321 
SubSèã_t
 
	mcuºítSubSèã
;

322 
SèãTokí_t
 * 
	mpSèãTokí
;

	@PICS-client/src/CSStream.c

16 
	~"WWWLib.h
"

17 
	~"HTProxy.h
"

18 
	~"CSLUtûs.h
"

19 
	~"CSMR.h
"

20 
	~"CSU£r.h
"

21 
	~"CSLL.h
"

22 
	~"CSLAµ.h
"

23 
	~"CSP¨£.h
"

25 
	s_HTSåóm
 {

26 c⁄° 
HTSåómCœss
 * 
	miß
;

27 
HTReque°
 * 
	mªque°
;

28 
HTSåóm
 * 
	mèrgë
;

29 
CSP¨£_t
 * 
	mpCSP¨£
;

32 
PRIVATE
 
	$CSP¨£_put_block
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
)

34 i‡(
PICS_TRACE
) {

35 * 
±r
;

36 i‡((
±r
 = (*Ë
	`HT_MALLOC
(
l
+1)Ë=
NULL
)

37 
	`HT_OUTOFMEM
("diagnostic buffer");

38 
	`°∫˝y
(
±r
, 
b
, 
l
);

39 
±r
[
l
] = 0;

40 
	`HTTRACE
(
PICS_TRACE
, "PICS:Ö¨£∏%∞∑rsög block \"%s\"\n" 
_
 
me
->
pCSP¨£
 _ 
±r
);

41 
	`HT_FREE
(
±r
);

43 i‡(
	`CSP¨£_∑r£Chunk
(
me
->
pCSP¨£
, 
b
, 
l
, 0Ë=
CSDoM‹e_îr‹
)

44  
HT_ERROR
;

45  
HT_OK
;

46 
	}
}

48 
PRIVATE
 
	$CSP¨£_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

50  
	`CSP¨£_put_block
(
me
, &
c
, 1);

51 
	}
}

53 
PRIVATE
 
	$CSP¨£_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

55  
	`CSP¨£_put_block
(
me
, 
s
, (Ë
	`°æí
(s));

56 
	}
}

58 
PRIVATE
 
	$CSP¨£_Êush
 (
HTSåóm
 * 
me
)

60  (*
me
->
èrgë
->
iß
->
Êush
)(me->target);

61 
	}
}

63 
PRIVATE
 
	$CSP¨£_‰ì
 (
HTSåóm
 * 
me
)

65 
°©us
 = 
HT_OK
;

66 i‡(
me
->
èrgë
) {

67 i‡((
°©us
 = (*
me
->
èrgë
->
iß
->
_‰ì
)(me->èrgë)Ë=
HT_WOULD_BLOCK
)

68  
HT_WOULD_BLOCK
;

70 
	`HTTRACE
(
APP_TRACE
, "Parser....... FREEING....\n");

71 
	`HTTRACE
(
PICS_TRACE
, "PICS: fªeögÖ¨£∏%p.\n" 
_
 
me
->
pCSP¨£
);

72 
	`CSP¨£_dñëe
(
me
->
pCSP¨£
);

73  
°©us
;

74 
	}
}

76 
PRIVATE
 
	$CSP¨£_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

78 
°©us
 = 
HT_ERROR
;

79 i‡(
me
->
èrgë
Ë
°©us
 = (*me->èrgë->
iß
->
ab‹t
)(me->èrgë, 
e
);

80 
	`HTTRACE
(
APP_TRACE
, "Rules....... ABORTING...\n");

81 
	`HT_FREE
(
me
);

82  
°©us
;

83 
	}
}

85 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gCSP¨£Cœss
 =

88 
CSP¨£_Êush
,

89 
CSP¨£_‰ì
,

90 
CSP¨£_ab‹t
,

91 
CSP¨£_put_ch¨a˘î
,

92 
CSP¨£_put_°rög
,

93 
CSP¨£_put_block


96 
PRIVATE
 
HTSåóm
 * 
	$CSP¨£C⁄vîãr_√w
 (
HTReque°
 * 
ªque°
,

97 
HTSåóm
 * 
ouçut_°ªam
)

99 
HTSåóm
 * 
me
;

100 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

101 
	`HT_OUTOFMEM
("CSParse");

102 
me
->
ªque°
 =Ñequest;

103 
me
->
èrgë
 = 
ouçut_°ªam
;

104  
me
;

105 
	}
}

107 
PRIVATE
 
	$CSP¨£MachRód_‰ì
 (
HTSåóm
 * 
me
)

109 
°©us
 = 
	`CSP¨£_‰ì
(
me
);

110 
	`CSP¨£_dñëeMachRód
(
me
->
pCSP¨£
);

111  
°©us
;

112 
	}
}

114 
PRIVATE
 
	$CSP¨£MachRód_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

116 
°©us
 = 
	`CSP¨£_‰ì
(
me
);

117 
	`CSP¨£_dñëeMachRód
(
me
->
pCSP¨£
);

118  
°©us
;

119 
	}
}

121 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gCSP¨£Cœss_machRód
 =

124 
CSP¨£_Êush
,

125 
CSP¨£MachRód_‰ì
,

126 
CSP¨£MachRód_ab‹t
,

127 
CSP¨£_put_ch¨a˘î
,

128 
CSP¨£_put_°rög
,

129 
CSP¨£_put_block


132 
PUBLIC
 
HTSåóm
 * 
	$CSP¨£MachRód
 (
HTReque°
 * 
ªque°
,

133 * 
∑øm
,

134 
HTF‹m©
 
öput_f‹m©
,

135 
HTF‹m©
 
ouçut_f‹m©
,

136 
HTSåóm
 * 
ouçut_°ªam
)

138 
HTSåóm
 * 
me
 = 
	`CSP¨£C⁄vîãr_√w
(
ªque°
, 
ouçut_°ªam
);

139 
me
->
iß
 = &
CSP¨£Cœss_machRód
;

140 
me
->
pCSP¨£
 = 
	`CSP¨£_√wMachRód
(0, 0);

141 
	`HTTRACE
(
PICS_TRACE
, "PICS: cª©ög MachRódÖ¨£∏%p.\n" 
_
 
me
->
pCSP¨£
);

142  
me
;

143 
	}
}

145 
PRIVATE
 
	$CSP¨£U£r_‰ì
 (
HTSåóm
 * 
me
)

148 * 
addr
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *)
	`HTReque°_™ch‹
(
me
->
ªque°
));

149 
	`CSLﬂdedU£r_add
(
	`CSP¨£_gëU£r
(
me
->
pCSP¨£
), 
addr
);

150 
	`HT_FREE
(
addr
);

151 
	`CSP¨£_‰ì
(
me
);

152 
	`HT_FREE
(
me
);

153  
HT_OK
;

154 
	}
}

156 
PRIVATE
 
	$CSP¨£U£r_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

158 
	`CSP¨£_dñëeU£r
(
me
->
pCSP¨£
);

159 
	`HT_FREE
(
me
);

160  
HT_OK
;

161 
	}
}

163 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gCSP¨£Cœss_u£r
 =

166 
CSP¨£_Êush
,

167 
CSP¨£U£r_‰ì
,

168 
CSP¨£U£r_ab‹t
,

169 
CSP¨£_put_ch¨a˘î
,

170 
CSP¨£_put_°rög
,

171 
CSP¨£_put_block


174 
PUBLIC
 
HTSåóm
 * 
	$CSP¨£U£r
 (
HTReque°
 * 
ªque°
,

175 * 
∑øm
,

176 
HTF‹m©
 
öput_f‹m©
,

177 
HTF‹m©
 
ouçut_f‹m©
,

178 
HTSåóm
 * 
ouçut_°ªam
)

180 
HTSåóm
 * 
me
 = 
	`CSP¨£C⁄vîãr_√w
(
ªque°
, 
ouçut_°ªam
);

181 
me
->
iß
 = &
CSP¨£Cœss_u£r
;

182 
me
->
pCSP¨£
 = 
	`CSP¨£_√wU£r
();

183 
me
->
ªque°
 =Ñequest;

188 
	`HTTRACE
(
PICS_TRACE
, "PICS: cª©ög u£∏∑r£∏%p.\n" 
_
 
me
->
pCSP¨£
);

189  
me
;

190 
	}
}

192 
PRIVATE
 
	$CSP¨£Labñ_‰ì
 (
HTSåóm
 * 
me
)

194 
	`CSAµ_œbñ
(
me
->
ªque°
, 
	`CSP¨£_gëLabñ
(me->
pCSP¨£
));

196 
	`CSP¨£_‰ì
(
me
);

197 
	`HT_FREE
(
me
);

198  
HT_OK
;

199 
	}
}

201 
PRIVATE
 
	$CSP¨£Labñ_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

203 
	`CSP¨£_dñëeLabñ
(
me
->
pCSP¨£
);

204 
	`CSP¨£_‰ì
(
me
);

205 
	`HT_FREE
(
me
);

206  
HT_OK
;

207 
	}
}

209 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gCSP¨£Cœss_œbñ
 =

212 
CSP¨£_Êush
,

213 
CSP¨£Labñ_‰ì
,

214 
CSP¨£Labñ_ab‹t
,

215 
CSP¨£_put_ch¨a˘î
,

216 
CSP¨£_put_°rög
,

217 
CSP¨£_put_block


220 
PRIVATE
 
SèãRë_t
 
	$∑r£Eº‹H™dÀr
(
CSLabñ_t
 * 
pCSLabñ
,

221 
CSP¨£_t
 * 
pCSP¨£
,

222 c⁄° * 
tokí
, 
dem¨k
,

223 
SèãRë_t
 
îr‹Code
)

225 
•a˚
[256];

226 i‡(
PICS_TRACE
)

227 
	`¥ötf
("%20†- %s:", 
pCSP¨£
->
pT¨gëObje˘
->
nŸe
,

228 
pCSP¨£
->
cuºítSubSèã
 =
SubSèã_X
 ? "SubState_X" :

229 
pCSP¨£
->
cuºítSubSèã
 =
SubSèã_N
 ? "SubState_N" :

230 
pCSP¨£
->
cuºítSubSèã
 =
SubSèã_A
 ? "SubState_A" :

231 
pCSP¨£
->
cuºítSubSèã
 =
SubSèã_B
 ? "SubState_B" :

232 
pCSP¨£
->
cuºítSubSèã
 =
SubSèã_C
 ? "SubState_C" :

233 
pCSP¨£
->
cuºítSubSèã
 =
SubSèã_D
 ? "SubState_D" :

234 
pCSP¨£
->
cuºítSubSèã
 =
SubSèã_E
 ? "SubState_E" :

235 
pCSP¨£
->
cuºítSubSèã
 =
SubSèã_F
 ? "SubState_F" :

236 
pCSP¨£
->
cuºítSubSèã
 =
SubSèã_G
 ? "SubState_G" :

237 
pCSP¨£
->
cuºítSubSèã
 =
SubSèã_H
 ? "SubState_H" :

240 
îr‹Code
) {

241 
SèãRë_WARN_NO_MATCH
:

242 i‡(
tokí
)

243 
	`•rötf
(
•a˚
, "U√x≥˘edÅokí \"%s\".\n", 
tokí
);

245 
	`•rötf
(
•a˚
, "UnexpectedÜack ofÅoken.\n");

247 
SèãRë_WARN_BAD_PUNCT
:

248 
	`•rötf
(
•a˚
, "U√xã˘edÖun˘u©i⁄ \"%c\"", 
dem¨k
);

249 i‡(
tokí
)

250 
	`¥ötf
("a·îÅokí \"%s\".\n", 
tokí
);

252 
	`¥ötf
(".\n");

254 
SèãRë_ERROR_BAD_CHAR
:

255 
	`•rötf
(
•a˚
, "Unextected character \"%c\" inÅoken \"%s\".\n",

256 *
pCSP¨£
->
pP¨£C⁄ãxt
->
pTokíEº‹
, 
tokí
);

259 
	`•rötf
(
•a˚
, "InternalÉrror: demark:\"%c\"Åoken:\"%s\".\n",

260 
dem¨k
, 
tokí
);

263 
	`HTTRACE
(
PICS_TRACE
, "%s" 
_
 
•a˚
);

264  
îr‹Code
;

265 
	}
}

267 
PUBLIC
 
HTSåóm
 * 
	$CSP¨£Labñ
 (
HTReque°
 * 
ªque°
,

268 * 
∑øm
,

269 
HTF‹m©
 
öput_f‹m©
,

270 
HTF‹m©
 
ouçut_f‹m©
,

271 
HTSåóm
 * 
ouçut_°ªam
)

273 
HTSåóm
 * 
me
 = 
	`CSP¨£C⁄vîãr_√w
(
ªque°
, 
ouçut_°ªam
);

274 
me
->
iß
 = &
CSP¨£Cœss_œbñ
;

275 
me
->
pCSP¨£
 = 
	`CSP¨£_√wLabñ
(0, &
∑r£Eº‹H™dÀr
);

276 
	`HTTRACE
(
PICS_TRACE
, "PICS: cª©ögÜabñÖ¨£∏%p.\n" 
_
 
me
->
pCSP¨£
);

277  
me
;

278 
	}
}

	@PICS-client/src/CSUser.c

1 
	~"wwwsys.h
"

2 
	~"HTUtûs.h
"

3 
	~"HTSåög.h
"

4 
	~"HTEsˇ≥.h
"

5 
	~"HTP¨£.h
"

6 
	~"CSP¨£.h
"

7 
	~"CSU£r.h
"

8 
	~"CSU£rSt.h
"

10 
	#GëCSU£r
(
A
Ë((A)->
èrgë
.
pCSU£r
)

	)

12 
	sCSU£r_s
 {

13 
CSU£rD©a_t
 * 
	mpCSU£rD©a
;

15 
U£rSîvi˚_t
 * 
	mpCuºítU£rSîvi˚
;

16 
U£rSîvi˚R©ög_t
 * 
	mpCuºítU£rSîvi˚R©ög
;

17 
R™ge_t
 * 
	mpCuºítR™ge
;

19 
	mcuºítLabñNumbî
;

21 
U£rT¨gëCÆlback_t
 * 
	mpU£rT¨gëCÆlback
;

22 
U£rEº‹H™dÀr_t
 * 
	mpU£rEº‹H™dÀr
;

25 
PRIVATE
 
T¨gëObje˘_t
 
	gU£r_èrgëObje˘
;

26 
PRIVATE
 
T¨gëObje˘_t
 
	gU£rSîvi˚_èrgëObje˘
;

27 
PRIVATE
 
T¨gëObje˘_t
 
	gU£rR©ögLi°_èrgëObje˘
;

28 
PRIVATE
 
T¨gëObje˘_t
 
	gU£rR©ög_èrgëObje˘
;

29 
PRIVATE
 
T¨gëObje˘_t
 
	gU£rR™ge_èrgëObje˘
;

30 
PRIVATE
 
Pªp_t
 
	gU£r_£tT¨gë
;

31 
PRIVATE
 
Pªp_t
 
	g˛órTokí
;

32 
PRIVATE
 
Check_t
 
	ggëProxy
;

33 
PRIVATE
 
Check_t
 
	ggëVÆue
;

34 
PRIVATE
 
Check_t
 
	gU£rSîvi˚_gëId
;

35 
PRIVATE
 
Check_t
 
	gU£rR©ög_gëId
;

36 
PRIVATE
 
Check_t
 
	gU£rR™ge_gë
;

37 
PRIVATE
 
O≥n_t
 
	gU£r_›í
;

38 
PRIVATE
 
O≥n_t
 
	gU£rSîvi˚_›í
;

39 
PRIVATE
 
O≥n_t
 
	gU£rR©ög_›í
;

40 
PRIVATE
 
O≥n_t
 
	gU£rR©ögLi°_›í
;

41 
PRIVATE
 
O≥n_t
 
	gU£rR™ge_›í
;

42 
PRIVATE
 
Clo£_t
 
	gU£r_˛o£
;

43 
PRIVATE
 
Clo£_t
 
	gU£rSîvi˚_˛o£
;

44 
PRIVATE
 
Clo£_t
 
	gU£rR©ögLi°_˛o£
;

45 
PRIVATE
 
Clo£_t
 
	gU£rR©ög_˛o£
;

46 
PRIVATE
 
Clo£_t
 
	gU£rR™ge_˛o£
;

47 
PRIVATE
 
De°roy_t
 
	gU£r_de°roy
;

48 
PRIVATE
 
De°roy_t
 
	gU£rSîvi˚_de°roy
;

49 
PRIVATE
 
De°roy_t
 
	gU£rR©ögLi°_de°roy
;

50 
PRIVATE
 
De°roy_t
 
	gU£rR©ög_de°roy
;

51 
PRIVATE
 
De°roy_t
 
	gU£rR™ge_de°roy
;

53 
PRIVATE
 
T¨gëCh™geCÆlback_t
 
	gèrgëCh™geCÆlback
;

54 
PRIVATE
 
P¨£Eº‹H™dÀr_t
 
	g∑r£Eº‹H™dÀr
;

61 
PRIVATE
 
SèãTokí_t
 
	gU£r_°©eTokís
[] = {

66 { "°¨t", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
U£r_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

67 { "›í", 
SubSèã_A
, 
Pun˘_LPAREN
, 0, 0, 0, 0, &
U£r_èrgëObje˘
, 
SubSèã_B
, 0, 0},

68 { "íd", 
SubSèã_A
, 
Pun˘_RPAREN
, 0, 0, 0, 0, &
U£r_èrgëObje˘
, SubSèã_A, 
Comm™d_CLOSE
, 0},

69 { "vîsi⁄", 
SubSèã_B
, 
Pun˘_WHITE
, 0, "vîsi⁄", 0, 0, &
U£r_èrgëObje˘
, 
SubSèã_C
, 0, &
U£r_£tT¨gë
},

70 { "u£r-«me", 
SubSèã_B
, 
Pun˘_WHITE
, 0, "u£r-«me", 0, 0, &
U£r_èrgëObje˘
, 
SubSèã_C
, 0, &
U£r_£tT¨gë
},

71 { "∑ssw‹d", 
SubSèã_B
, 
Pun˘_WHITE
, 0, "∑ssw‹d", 0, 0, &
U£r_èrgëObje˘
, 
SubSèã_C
, 0, &
U£r_£tT¨gë
},

72 { "su≥r-u£r", 
SubSèã_B
, 
Pun˘_WHITE
, 0, "su≥r-u£r", 0, 0, &
U£r_èrgëObje˘
, 
SubSèã_C
, 0, &
U£r_£tT¨gë
},

73 {"möimum-£rvi˚s", 
SubSèã_B
, 
Pun˘_WHITE
, 0, "möimum-£rvi˚s", 0, 0, &
U£r_èrgëObje˘
, 
SubSèã_C
, 0, &
U£r_£tT¨gë
},

74 { "missög-£rvi˚", 
SubSèã_B
, 
Pun˘_WHITE
, 0, "missög-£rvi˚", 0, 0, &
U£r_èrgëObje˘
, 
SubSèã_C
, 0, &
U£r_£tT¨gë
},

75 { "missög-sˇÀ", 
SubSèã_B
, 
Pun˘_WHITE
, 0, "missög-sˇÀ", 0, 0, &
U£r_èrgëObje˘
, 
SubSèã_C
, 0, &
U£r_£tT¨gë
},

76 { "ob£rve-d©es", 
SubSèã_B
, 
Pun˘_WHITE
, 0, "ob£rve-d©es", 0, 0, &
U£r_èrgëObje˘
, 
SubSèã_C
, 0, &
U£r_£tT¨gë
},

77 { "buªau", 
SubSèã_B
, 
Pun˘_WHITE
,0,"buªau","œbñ-buªau", 0, &
U£r_èrgëObje˘
, 
SubSèã_C
, 0, &
U£r_£tT¨gë
},

78 { "¥oxy", 
SubSèã_B
, 
Pun˘_WHITE
, 0, "¥oxy", 0, 0, &
U£r_èrgëObje˘
, 
SubSèã_D
, 0, 0},

79 { "øtög-£rvi˚", 
SubSèã_B
, 
Pun˘_WHITE
, 0, "øtög-£rvi˚", 0, 0, &
U£rSîvi˚_èrgëObje˘
, 
SubSèã_N
, 0, 0},

80 { "gë vÆue", 
SubSèã_C
, 
Pun˘_RPAREN
, &
gëVÆue
, 0, 0, 0, &
U£r_èrgëObje˘
, 
SubSèã_A
, 0, 0},

81 { "gëÖroxy", 
SubSèã_D
, 
Pun˘_RPAREN
, &
gëProxy
, 0, 0, 0, &
U£r_èrgëObje˘
, 
SubSèã_A
, 0, 0}

83 
PRIVATE
 
T¨gëObje˘_t
 
	gU£r_èrgëObje˘
 = {"U£r", &
U£r_›í
, &
U£r_˛o£
, &
U£r_de°roy
, 
U£r_°©eTokís
, 
øysize
(U£r_°©eTokís), 
CSU£rTC_USER
};

85 
PRIVATE
 
SèãTokí_t
 
	gU£rSîvi˚_°©eTokís
[] = {

90 { "°¨t", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
U£rSîvi˚_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

91 { "øtög sy°em", 
SubSèã_A
, 
Pun˘_LPAREN
, &
U£rSîvi˚_gëId
, 0, 0, 0, &
U£rSîvi˚_èrgëObje˘
, 
SubSèã_B
, 0, 0},

92 { "£rvi˚", 
SubSèã_B
, 
Pun˘_WHITE
, 0, "øtög-£rvi˚", 0, 0, &
U£rSîvi˚_èrgëObje˘
, 
SubSèã_C
, 0, &
U£r_£tT¨gë
},

93 {"missög-£rvi˚", 
SubSèã_B
, 
Pun˘_WHITE
, 0, "missög-£rvi˚", 0, 0, &
U£rSîvi˚_èrgëObje˘
, 
SubSèã_C
, 0, &
U£r_£tT¨gë
},

94 { "missög-sˇÀ", 
SubSèã_B
, 
Pun˘_WHITE
, 0, "missög-sˇÀ", 0, 0, &
U£rSîvi˚_èrgëObje˘
, 
SubSèã_C
, 0, &
U£r_£tT¨gë
},

95 { "ob£rve-d©es", 
SubSèã_B
, 
Pun˘_WHITE
, 0, "ob£rve-d©es", 0, 0, &
U£rSîvi˚_èrgëObje˘
, 
SubSèã_C
, 0, &
U£r_£tT¨gë
},

96 { "øtögs", 
SubSèã_B
, 
Pun˘_LPAREN
|
Pun˘_RPAREN
,0,"øtögs",0,0, &
U£rR©ögLi°_èrgëObje˘
, 
SubSèã_N
, 
Comm™d_CHAIN
, &
˛órTokí
},

97 { "gë vÆue", 
SubSèã_C
, 
Pun˘_RPAREN
, &
gëVÆue
, 0, 0, 0, &
U£rSîvi˚_èrgëObje˘
, 
SubSèã_D
, 0, 0},

98 { "íd", 
SubSèã_D
, 
Pun˘_RPAREN
, 0, 0, 0, 0, &
U£r_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_CLOSE
, 0},

99 { "√ed o≥n", 
SubSèã_D
, 
Pun˘_LPAREN
, 0, 0, 0, 0, &
U£rSîvi˚_èrgëObje˘
, 
SubSèã_B
, 0, 0}

101 
PRIVATE
 
T¨gëObje˘_t
 
	gU£rSîvi˚_èrgëObje˘
 = {"U£rSîvi˚", &
U£rSîvi˚_›í
, &
U£rSîvi˚_˛o£
, &
U£rSîvi˚_de°roy
, 
U£rSîvi˚_°©eTokís
, 
øysize
(U£rSîvi˚_°©eTokís), 
CSU£rTC_SERVICE
};

103 
PRIVATE
 
SèãTokí_t
 
	gU£rR©ögLi°_°©eTokís
[] = {

105 { "°¨t", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
U£rR©ögLi°_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

106 { "°¨àøtög", 
SubSèã_A
, 
Pun˘_LPAREN
, 0, 0, 0, 0, &
U£rR©ög_èrgëObje˘
, 
SubSèã_N
, 0, 0},

107 {"ídÑ©ögÜi°", 
SubSèã_A
, 
Pun˘_RPAREN
, 0, 0, 0, 0, &
U£rSîvi˚_èrgëObje˘
, 
SubSèã_D
, 
Comm™d_CLOSE
, 0}

109 
PRIVATE
 
T¨gëObje˘_t
 
	gU£rR©ögLi°_èrgëObje˘
 = {"U£rR©ögLi°", &
U£rR©ögLi°_›í
, &
U£rR©ögLi°_˛o£
, &
U£rR©ögLi°_de°roy
, 
U£rR©ögLi°_°©eTokís
, 
øysize
(U£rR©ögLi°_°©eTokís), 
CSU£rTC_RLIST
};

111 
PRIVATE
 
SèãTokí_t
 
	gU£rR©ög_°©eTokís
[] = {

116 { "°¨t", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
U£rR©ög_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

117 { "øngêid", 
SubSèã_A
, 
Pun˘_LPAREN
, &
U£rR©ög_gëId
, 0, 0, 0, &
U£rR©ög_èrgëObje˘
, 
SubSèã_B
, 0, 0},

118 { "missög-sˇÀ", 
SubSèã_B
, 
Pun˘_WHITE
, 0, "missög-sˇÀ", 0, 0, &
U£rR©ög_èrgëObje˘
, 
SubSèã_C
, 0, &
U£r_£tT¨gë
},

119 { "ob£rve-d©es", 
SubSèã_B
, 
Pun˘_WHITE
, 0, "ob£rve-d©es", 0, 0, &
U£rR©ög_èrgëObje˘
, 
SubSèã_C
, 0, &
U£r_£tT¨gë
},

120 { "ønges", 
SubSèã_B
, 
Pun˘_WHITE
, 0, "ønge", "ønges", 0, &
U£rR™ge_èrgëObje˘
, 
SubSèã_N
, 0, 0},

121 { "gë vÆue", 
SubSèã_C
, 
Pun˘_RPAREN
, &
gëVÆue
, 0, 0, 0, &
U£rR©ög_èrgëObje˘
, 
SubSèã_D
, 0, 0},

122 { "øtögÉnd", 
SubSèã_D
, 
Pun˘_RPAREN
, 0, 0, 0, 0, &
U£rR©ögLi°_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_CLOSE
, 0},

123 { "√ed o≥n", 
SubSèã_D
, 
Pun˘_LPAREN
, 0, 0, 0, 0, &
U£rR©ög_èrgëObje˘
, 
SubSèã_B
, 0, 0}

125 
PRIVATE
 
T¨gëObje˘_t
 
	gU£rR©ög_èrgëObje˘
 = {"U£rR©ög", &
U£rR©ög_›í
, &
U£rR©ög_˛o£
, &
U£rR©ög_de°roy
, 
U£rR©ög_°©eTokís
, 
øysize
(U£rR©ög_°©eTokís), 
CSU£rTC_RATING
};

127 
PRIVATE
 
SèãTokí_t
 
	gU£rR™ge_°©eTokís
[] = {

129 { "°¨t", 
SubSèã_N
, 
Pun˘_ALL
, 0, 0, 0, 0, &
U£rR™ge_èrgëObje˘
, 
SubSèã_A
, 
Comm™d_MATCHANY
|
Comm™d_OPEN
|
Comm™d_CHAIN
, 0},

130 { "vÆue", 
SubSèã_A
, 
Pun˘_WHITE
, &
U£rR™ge_gë
, 0, 0, 0, &
U£rR™ge_èrgëObje˘
, SubState_A, 0, 0},

131 { "vÆuêíd", 
SubSèã_A
, 
Pun˘_RPAREN
, &
U£rR™ge_gë
, 0, 0, 0, &
U£rR©ög_èrgëObje˘
, 
SubSèã_D
, 
Comm™d_CLOSE
, 0}

133 
PRIVATE
 
T¨gëObje˘_t
 
	gU£rR™ge_èrgëObje˘
 = {"U£rR™ge", &
U£rR™ge_›í
, &
U£rR™ge_˛o£
, &
U£rR™ge_de°roy
, 
U£rR™ge_°©eTokís
, 
øysize
(U£rR™ge_°©eTokís), 
CSU£rTC_RANGE
};

139 
CSU£r_t
 * 
	mpCSU£r
;

140 
CSU£rD©a_t
 * 
	mpCSU£rD©a
;

141 } 
	tCSU£rAssoc_t
;

143 
PRIVATE
 
HTLi°
 * 
	gCSU£rAssocs
 = 0;

145 
PRIVATE
 
	$CSU£rAssoc_add
(
CSU£r_t
 * 
pCSU£r
, 
CSU£rD©a_t
 * 
pCSU£rD©a
)

147 
CSU£rAssoc_t
 * 
pEÀmít
;

148 i‡((
pEÀmít
 = (
CSU£rAssoc_t
 *Ë
	`HT_CALLOC
(1, (CSU£rAssoc_t))Ë=
NULL
)

149 
	`HT_OUTOFMEM
("CSUserAssoc_t");

150 
pEÀmít
->
pCSU£r
 =ÖCSUser;

151 
pEÀmít
->
pCSU£rD©a
 =ÖCSUserData;

152 i‡(!
CSU£rAssocs
)

153 
CSU£rAssocs
 = 
	`HTLi°_√w
();

154 
	`HTLi°_≠≥ndObje˘
(
CSU£rAssocs
, (*)
pEÀmít
);

155 
	}
}

157 
PRIVATE
 
CSU£rAssoc_t
 * 
	$CSU£rAssoc_födByD©a
(
CSU£rD©a_t
 * 
pCSU£rD©a
)

159 
HTLi°
 * 
assocs
 = 
CSU£rAssocs
;

160 
CSU£rAssoc_t
 * 
pEÀmít
;

161 (
pEÀmít
 = (
CSU£rAssoc_t
 *Ë
	`HTLi°_√xtObje˘
(
assocs
)))

162 i‡(
pEÀmít
->
pCSU£rD©a
 ==ÖCSUserData)

163  
pEÀmít
;

165 
	}
}

167 
PRIVATE
 
CSU£rAssoc_t
 * 
	$CSU£rAssoc_födBySèã
(
CSU£r_t
 * 
pCSU£r
)

169 
HTLi°
 * 
assocs
 = 
CSU£rAssocs
;

170 
CSU£rAssoc_t
 * 
pEÀmít
;

171 (
pEÀmít
 = (
CSU£rAssoc_t
 *Ë
	`HTLi°_√xtObje˘
(
assocs
)))

172 i‡(
pEÀmít
->
pCSU£r
 ==ÖCSUser)

173  
pEÀmít
;

175 
	}
}

177 
PRIVATE
 
	$CSU£rAssoc_ªmoveBySèã
(
CSU£r_t
 * 
pCSU£r
)

179 
CSU£rAssoc_t
 * 
pEÀmít
 = 
	`CSU£rAssoc_födBySèã
(
pCSU£r
);

180 i‡(!
pEÀmít
)

182 
	`HTLi°_ªmoveObje˘
(
CSU£rAssocs
, (*)
pEÀmít
);

183 
	`HT_FREE
(
pEÀmít
);

184 
	}
}

187 
PRIVATE
 
U£rSîvi˚R©ög_t
 * 
	$U£rSîvi˚R©ög_√w
()

189 
U£rSîvi˚R©ög_t
 * 
me
;

190 i‡((
me
 = (
U£rSîvi˚R©ög_t
 *Ë
	`HT_CALLOC
(1, (U£rSîvi˚R©ög_t))Ë=
NULL
)

191 
	`HT_OUTOFMEM
("UserServiceRating_t");

192 
me
->
ønges
 = 
	`HTLi°_√w
();

193  
me
;

194 
	}
}

196 
PUBLIC
 
	$U£rSîvi˚R©ög_‰ì
(
U£rSîvi˚R©ög_t
 * 
me
)

198 
R™ge_t
 * 
pR™ge
;

199 (
pR™ge
 = (
R™ge_t
 *Ë
	`HTLi°_ªmoveLa°Obje˘
(
me
->
ønges
)))

200 
	`HT_FREE
(
pR™ge
);

201 
	`HTLi°_dñëe
(
me
->
ønges
);

202 
	`SVÆ_˛ór
(&
me
->
idítifõr
);

203 
	`BVÆ_˛ór
(&
me
->
missög_sˇÀ
);

204 
	`BVÆ_˛ór
(&
me
->
ob£rve_d©es
);

205 
	`HT_FREE
(
me
);

206 
	}
}

208 
PRIVATE
 
U£rSîvi˚_t
 * 
	$U£rSîvi˚_√w
()

210 
U£rSîvi˚_t
 * 
me
;

211 i‡((
me
 = (
U£rSîvi˚_t
 *Ë
	`HT_CALLOC
(1, (U£rSîvi˚_t))Ë=
NULL
)

212 
	`HT_OUTOFMEM
("UserService_t");

213  
me
;

214 
	}
}

216 
PUBLIC
 
	$U£rSîvi˚_‰ì
(
U£rSîvi˚_t
 * 
me
)

218 
U£rSîvi˚R©ög_t
 * 
pU£rSîvi˚R©ög
;

219 (
pU£rSîvi˚R©ög
 = (
U£rSîvi˚R©ög_t
 *Ë
	`HTLi°_ªmoveLa°Obje˘
(
me
->
u£rSîvi˚R©ögs
)))

220 
	`U£rSîvi˚R©ög_‰ì
(
pU£rSîvi˚R©ög
);

221 
	`HTLi°_dñëe
(
me
->
u£rSîvi˚R©ögs
);

222 
	`FVÆ_˛ór
(&
me
->
vîsi⁄
);

223 
	`SVÆ_˛ór
(&
me
->
øtög_sy°em
);

224 
	`SVÆ_˛ór
(&
me
->
øtög_£rvi˚
);

225 
	`BVÆ_˛ór
(&
me
->
missög_£rvi˚
);

226 
	`BVÆ_˛ór
(&
me
->
missög_sˇÀ
);

227 
	`BVÆ_˛ór
(&
me
->
ob£rve_d©es
);

228 
	`HT_FREE
(
me
);

229 
	}
}

231 
PUBLIC
 
CSU£rD©a_t
 * 
	$CSU£rD©a_√w
()

233 
CSU£rD©a_t
 * 
me
;

234 i‡((
me
 = (
CSU£rD©a_t
 *Ë
	`HT_CALLOC
(1, (CSU£rD©a_t))Ë=
NULL
)

235 
	`HT_OUTOFMEM
("CSUserData_t");

236 
me
->
u£rSîvi˚s
 = 
	`HTLi°_√w
();

237 
me
->
¥oxõs
 = 
	`HTLi°_√w
();

238  
me
;

239 
	}
}

241 
PUBLIC
 
	$CSU£rD©a_‰ì
(
CSU£rD©a_t
 * 
me
)

243 
U£rSîvi˚_t
 * 
pU£rSîvi˚
;

244 * 
¥oxy
;

245 i‡(
	`CSU£rAssoc_födByD©a
(
me
))

247 (
pU£rSîvi˚
 = (
U£rSîvi˚_t
 *Ë
	`HTLi°_ªmoveLa°Obje˘
(
me
->
u£rSîvi˚s
)))

248 
	`U£rSîvi˚_‰ì
(
pU£rSîvi˚
);

249 
	`HTLi°_‰ì
(
me
->
u£rSîvi˚s
);

250 (
¥oxy
 = (*Ë
	`HTLi°_ªmoveLa°Obje˘
(
me
->
¥oxõs
)))

251 
	`HT_FREE
(
¥oxy
);

252 
	`HTLi°_‰ì
(
me
->
¥oxõs
);

253 
	`FVÆ_˛ór
(&
me
->
vîsi⁄
);

254 
	`SVÆ_˛ór
(&
me
->
u£r_«me
);

255 
	`SVÆ_˛ór
(&
me
->
∑ssw‹d
);

256 
	`BVÆ_˛ór
(&
me
->
su≥r_u£r
);

257 
	`FVÆ_˛ór
(&
me
->
möimum_£rvi˚s
);

258 
	`BVÆ_˛ór
(&
me
->
missög_£rvi˚
);

259 
	`BVÆ_˛ór
(&
me
->
missög_sˇÀ
);

260 
	`BVÆ_˛ór
(&
me
->
ob£rve_d©es
);

261 
	`SVÆ_˛ór
(&
me
->
buªau
);

262 
	`HT_FREE
(
me
);

263 
	}
}

265 
PUBLIC
 
CSU£r_t
 * 
	$CSU£r_√w
(
CSU£rD©a_t
 * 
pCSU£rD©a
)

267 
CSU£r_t
 * 
me
;

268 i‡((
me
 = (
CSU£r_t
 *Ë
	`HT_CALLOC
(1, (CSU£r_t))Ë=
NULL
)

269 
	`HT_OUTOFMEM
("CSUser_t");

270 
me
->
pCSU£rD©a
 =ÖCSUserData;

271 
	`CSU£rAssoc_add
(
me
, 
pCSU£rD©a
);

272  
me
;

273 
	}
}

275 
PUBLIC
 
CSU£r_t
 * 
	$CSU£r_c›y
(
CSU£r_t
 * 
ﬁd
)

277 
CSU£r_t
 * 
me
;

278 
me
 = 
	`CSU£r_√w
(
ﬁd
->
pCSU£rD©a
);

279 
	`mem˝y
(
me
, 
ﬁd
, (
CSU£r_t
));

280  
me
;

281 
	}
}

283 
PUBLIC
 
	$CSU£r_‰ì
(
CSU£r_t
 * 
me
)

285 
CSU£rD©a_t
 * 
pCSU£rD©a
 = 
me
->pCSUserData;

286 
	`CSU£rAssoc_ªmoveBySèã
(
me
);

287 
	`HT_FREE
(
me
);

288 
	`CSU£rD©a_‰ì
(
pCSU£rD©a
);

289 
	}
}

291 
PUBLIC
 * 
	$CSU£r_«me
(
CSU£r_t
 * 
pCSU£r
Ë{ 
	`SVÆ_vÆue
(&pCSU£r->
pCSU£rD©a
->
u£r_«me
);
	}
}

292 
PUBLIC
 
BOOL
 
	$CSU£r_checkPassw‹d
(
CSU£r_t
 * 
pCSU£r
, * 
∑ssw‹d
Ë{ 
	`°rˇ£comp
(
	`SVÆ_vÆue
(&pCSU£r->
pCSU£rD©a
->∑ssw‹d),Öassw‹dË? 
NO
 : 
YES
;
	}
}

293 
PUBLIC
 * 
	$CSU£r_buªau
(
CSU£r_t
 * 
pCSU£r
Ë{ 
	`SVÆ_vÆue
(&pCSU£r->
pCSU£rD©a
->
buªau
);
	}
}

294 
PUBLIC
 
CSU£rD©a_t
 * 
	$CSU£r_gëCSU£rD©a
(
CSU£r_t
 * 
me
Ë{ me->
pCSU£rD©a
;
	}
}

295 
PUBLIC
 
U£rSîvi˚_t
 * 
	$CSU£r_gëU£rSîvi˚
(
CSU£r_t
 * 
pCSU£r
Ë{ÖCSU£r->
pCuºítU£rSîvi˚
;
	}
}

296 
PUBLIC
 
U£rSîvi˚R©ög_t
 * 
	$CSU£r_gëU£rSîvi˚R©ög
(
CSU£r_t
 * 
pCSU£r
Ë{ÖCSU£r->
pCuºítU£rSîvi˚R©ög
;
	}
}

297 
PUBLIC
 
R™ge_t
 * 
	$CSU£r_gëU£rR©ögR™ge
(
CSU£r_t
 * 
pCSU£r
Ë{ÖCSU£r->
pCuºítR™ge
;
	}
}

298 
PUBLIC
 * 
	$CSU£r_gëR©ögSå
(
CSU£r_t
 * 
pCSU£r
)

300 
HTChunk
 * 
pChunk
;

301 
HTLi°
 * 
ønges
;

302 
R™ge_t
 * 
curR™ge
;

303 
cou¡
 = 0;

304 
pChunk
 = 
	`HTChunk_√w
(20);

305 
ønges
 = 
	`CSU£r_gëU£rSîvi˚R©ög
(
pCSU£r
)->ranges;

306 (
curR™ge
 = (
R™ge_t
 *Ë
	`HTLi°_√xtObje˘
(
ønges
))) {

307 * 
±r
;

308 
cou¡
++;

309 
±r
 = 
	`R™ge_toSå
(
curR™ge
);

310 i‡(
cou¡
 > 1)

311 
	`HTChunk_puts
(
pChunk
, " ");

312 
	`HTChunk_puts
(
pChunk
, 
±r
);

313 
	`HT_FREE
(
±r
);

315  
	`HTChunk_toCSåög
(
pChunk
);

316 
	}
}

318 
PUBLIC
 
CSP¨£_t
 * 
	$CSP¨£_√wU£r
()

320 
CSP¨£_t
 * 
me
 = 
	`CSP¨£_√w
();

321 
me
->
pP¨£C⁄ãxt
->
ígöeOf
 = &
CSP¨£_èrgëP¨£r
;

322 
me
->
pP¨£C⁄ãxt
->
pT¨gëCh™geCÆlback
 = &
èrgëCh™geCÆlback
;

323 
me
->
pP¨£C⁄ãxt
->
pP¨£Eº‹H™dÀr
 = &
∑r£Eº‹H™dÀr
;

324 
me
->
èrgë
.
pCSU£r
 = 
	`CSU£r_√w
(
	`CSU£rD©a_√w
());

325 
me
->
pT¨gëObje˘
 = &
U£r_èrgëObje˘
;

326 
me
->
cuºítSubSèã
 = 
SubSèã_N
;

327  
me
;

328 
	}
}

330 
PUBLIC
 
CSU£r_t
 * 
	$CSP¨£_gëU£r
(
CSP¨£_t
 * 
me
)

332  (
me
->
èrgë
.
pCSU£r
);

333 
	}
}

335 
PUBLIC
 
BOOL
 
	$CSP¨£_dñëeU£r
(
CSP¨£_t
 * 
pCSP¨£
)

337 
CSU£r_t
 * 
me
 = 
	`GëCSU£r
(
pCSP¨£
);

338 
	`CSU£rD©a_‰ì
(
	`CSU£r_gëCSU£rD©a
(
me
));

339 
	`CSU£r_‰ì
(
me
);

340  
YES
;

341 
	}
}

344 
PRIVATE
 
SèãRë_t
 
	$èrgëCh™geCÆlback
(
CSP¨£_t
 * 
pCSP¨£
, 
T¨gëObje˘_t
 * 
pT¨gëObje˘
, 
CSP¨£TC_t
 
èrgë
, 
BOOL
 
˛o£d
, * 
pVoid
)

347 
CSU£r_t
 * 
pCSU£r
 = 
	`GëCSU£r
(
pCSP¨£
);

348 i‡(
pCSU£r
->
pU£rT¨gëCÆlback
)

349  (*
pCSU£r
->
pU£rT¨gëCÆlback
)’CSU£r, 
pCSP¨£
, (
CSU£rTC_t
)
èrgë
, 
˛o£d
, 
pVoid
);

350  
SèãRë_OK
;

351 
	}
}

353 
PRIVATE
 
SèãRë_t
 
	$∑r£Eº‹H™dÀr
(
CSP¨£_t
 * 
pCSP¨£
, c⁄° * 
tokí
, 
dem¨k
, 
SèãRë_t
 
îr‹Code
)

355 
CSU£r_t
 * 
pCSU£r
 = 
	`GëCSU£r
(
pCSP¨£
);

356 i‡(
pCSU£r
->
pU£rEº‹H™dÀr
)

357  (*
pCSU£r
->
pU£rEº‹H™dÀr
)’CSU£r, 
pCSP¨£
, 
tokí
, 
dem¨k
, 
îr‹Code
);

358  
îr‹Code
;

359 
	}
}

363 
PRIVATE
 
SèãRë_t
 
	$˛órTokí
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

365 
	`HTChunk_˛ór
(
pCSP¨£
->
tokí
);

366  
SèãRë_OK
;

367 
	}
}

369 
PRIVATE
 
SèãRë_t
 
	$gëProxy
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

371 
CSU£r_t
 * 
pCSU£r
 = 
	`GëCSU£r
(
pCSP¨£
);

372 
P¨£C⁄ãxt_t
 * 
pP¨£C⁄ãxt
 = 
pCSP¨£
->pParseContext;

373 * 
¥oxy
 = 0;

374 i‡(!
tokí
 || !
pP¨£C⁄ãxt
->
ob£rvedQuŸes
)

375  
SèãRë_WARN_NO_MATCH
;

376 i‡(
	`Pun˘_badDem¨k
(
pSèãTokí
->
vÆidPun˘u©i⁄
, 
dem¨k
))

377  
SèãRë_WARN_BAD_PUNCT
;

378 
	`SåAŒocC›y
(
¥oxy
, 
tokí
);

379 
	`HTLi°_≠≥ndObje˘
(
pCSU£r
->
pCSU£rD©a
->
¥oxõs
, (*)
¥oxy
);

380  
SèãRë_OK
;

381 
	}
}

383 
	#READY_BVAL
(
hﬁdî
, 
poöãr
) \

384 
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆT¨gë
.
pT¨gëBVÆ
 = &
CSU£r_gë
##
	`hﬁdî
(
pCSU£r
)->
poöãr
;ÖCSP¨£->pP¨£C⁄ãxt->
vÆTy≥
 = 
VÆTy≥_BVAL
;

	)

385 
	#READY_FVAL
(
hﬁdî
, 
poöãr
) \

386 
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆT¨gë
.
pT¨gëFVÆ
 = &
CSU£r_gë
##
	`hﬁdî
(
pCSU£r
)->
poöãr
;ÖCSP¨£->pP¨£C⁄ãxt->
vÆTy≥
 = 
VÆTy≥_FVAL
;

	)

387 
	#READY_DVAL
(
hﬁdî
, 
poöãr
) \

388 
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆT¨gë
.
pT¨gëDVÆ
 = &
CSU£r_gë
##
	`hﬁdî
(
pCSU£r
)->
poöãr
;ÖCSP¨£->pP¨£C⁄ãxt->
vÆTy≥
 = 
VÆTy≥_DVAL
;

	)

389 
	#READY_SVAL
(
hﬁdî
, 
poöãr
) \

390 
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆT¨gë
.
pT¨gëSVÆ
 = &
CSU£r_gë
##
	`hﬁdî
(
pCSU£r
)->
poöãr
;ÖCSP¨£->pP¨£C⁄ãxt->
vÆTy≥
 = 
VÆTy≥_SVAL
;

	)

392 
PRIVATE
 
SèãRë_t
 
	$U£r_£tT¨gë
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

394 
CSU£r_t
 * 
pCSU£r
 = 
	`GëCSU£r
(
pCSP¨£
);

395 
ˇ£Numbî
;

396 
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆTy≥
 = 
VÆTy≥_SVAL
;

398 i‡(
pCSP¨£
->
pT¨gëObje˘
 =&
U£r_èrgëObje˘
) {

399 
ˇ£Numbî
 = 
pCSP¨£
->
pSèãTokí
-
U£r_°©eTokís
;

400 
ˇ£Numbî
) {

401 3: 
	`READY_FVAL
(
CSU£rD©a
, 
vîsi⁄
); ;

402 4: 
	`READY_SVAL
(
CSU£rD©a
, 
u£r_«me
); ;

403 5: 
	`READY_SVAL
(
CSU£rD©a
, 
∑ssw‹d
); ;

404 6: 
	`READY_BVAL
(
CSU£rD©a
, 
su≥r_u£r
); ;

405 7: 
	`READY_FVAL
(
CSU£rD©a
, 
möimum_£rvi˚s
); ;

406 8: 
	`READY_BVAL
(
CSU£rD©a
, 
missög_£rvi˚
); ;

407 9: 
	`READY_BVAL
(
CSU£rD©a
, 
missög_sˇÀ
); ;

408 10: 
	`READY_BVAL
(
CSU£rD©a
, 
ob£rve_d©es
); ;

409 11: 
	`READY_SVAL
(
CSU£rD©a
, 
buªau
); ;

411 } i‡(
pCSP¨£
->
pT¨gëObje˘
 =&
U£rSîvi˚_èrgëObje˘
) {

412 
ˇ£Numbî
 = 
pCSP¨£
->
pSèãTokí
-
U£rSîvi˚_°©eTokís
;

413 
ˇ£Numbî
) {

414 2: 
	`READY_SVAL
(
U£rSîvi˚
, 
øtög_£rvi˚
); ;

415 3: 
	`READY_BVAL
(
U£rSîvi˚
, 
missög_£rvi˚
); ;

416 4: 
	`READY_BVAL
(
U£rSîvi˚
, 
missög_sˇÀ
); ;

417 5: 
	`READY_BVAL
(
U£rSîvi˚
, 
ob£rve_d©es
); ;

419 } i‡(
pCSP¨£
->
pT¨gëObje˘
 =&
U£rR©ög_èrgëObje˘
) {

420 
ˇ£Numbî
 = 
pCSP¨£
->
pSèãTokí
-
U£rR©ög_°©eTokís
;

421 
ˇ£Numbî
) {

422 2: 
	`READY_BVAL
(
U£rSîvi˚R©ög
, 
missög_sˇÀ
); ;

423 3: 
	`READY_BVAL
(
U£rSîvi˚R©ög
, 
ob£rve_d©es
); ;

426  
SèãRë_OK
;

427 
	}
}

429 
PRIVATE
 
SèãRë_t
 
	$gëVÆue
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

431 
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆTy≥
) {

432 
VÆTy≥_BVAL
:

433 
	`BVÆ_ªadVÆ
(
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆT¨gë
.
pT¨gëBVÆ
, 
tokí
);

434 
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆTy≥
 = 
VÆTy≥_NONE
;

436 
VÆTy≥_FVAL
:

437 
	`FVÆ_ªadVÆ
(
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆT¨gë
.
pT¨gëFVÆ
, 
tokí
);

438 
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆTy≥
 = 
VÆTy≥_NONE
;

440 
VÆTy≥_SVAL
:

441 
	`SVÆ_ªadVÆ
(
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆT¨gë
.
pT¨gëSVÆ
, 
tokí
);

442 
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆTy≥
 = 
VÆTy≥_NONE
;

444 
VÆTy≥_DVAL
:

445 
	`DVÆ_ªadVÆ
(
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆT¨gë
.
pT¨gëDVÆ
, 
tokí
);

446 
pCSP¨£
->
pP¨£C⁄ãxt
->
vÆTy≥
 = 
VÆTy≥_NONE
;

451  
SèãRë_OK
;

452 
	}
}

454 
PRIVATE
 
SèãRë_t
 
	$U£r_›í
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

456  
SèãRë_OK
;

457 
	}
}

459 
PRIVATE
 
SèãRë_t
 
	$U£r_˛o£
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

461  
SèãRë_DONE
;

462 
	}
}

464 
PRIVATE
 
	$U£r_de°roy
(
CSP¨£_t
 * 
pCSP¨£
)

467 
	}
}

469 
PRIVATE
 
SèãRë_t
 
	$U£rSîvi˚_›í
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

471 
CSU£r_t
 * 
pCSU£r
 = 
	`GëCSU£r
(
pCSP¨£
);

472 
pCSU£r
->
pCuºítU£rSîvi˚
 = 
	`U£rSîvi˚_√w
();

473 
	`HTLi°_≠≥ndObje˘
(
pCSU£r
->
pCSU£rD©a
->
u£rSîvi˚s
, (*ÌCSU£r->
pCuºítU£rSîvi˚
);

474  
SèãRë_OK
;

475 
	}
}

477 
PRIVATE
 
SèãRë_t
 
	$U£rSîvi˚_gëId
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

479 
CSU£r_t
 * 
pCSU£r
 = 
	`GëCSU£r
(
pCSP¨£
);

480 
P¨£C⁄ãxt_t
 * 
pP¨£C⁄ãxt
 = 
pCSP¨£
->pParseContext;

481 i‡(!
tokí
 || !
pP¨£C⁄ãxt
->
ob£rvedQuŸes
)

482  
SèãRë_WARN_NO_MATCH
;

483 i‡(
	`Pun˘_badDem¨k
(
pSèãTokí
->
vÆidPun˘u©i⁄
, 
dem¨k
))

484  
SèãRë_WARN_BAD_PUNCT
;

485 
	`SVÆ_ªadVÆ
(&
pCSU£r
->
pCuºítU£rSîvi˚
->
øtög_£rvi˚
, 
tokí
);

486  
SèãRë_OK
;

487 
	}
}

489 
PRIVATE
 
SèãRë_t
 
	$U£rSîvi˚_˛o£
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

491 
CSU£r_t
 * 
pCSU£r
 = 
	`GëCSU£r
(
pCSP¨£
);

492 
pCSU£r
->
pCuºítU£rSîvi˚
 = 0;

493  
SèãRë_OK
;

494 
	}
}

496 
PRIVATE
 
	$U£rSîvi˚_de°roy
(
CSP¨£_t
 * 
pCSP¨£
)

498 
CSU£r_t
 * 
pCSU£r
 = 
	`GëCSU£r
(
pCSP¨£
);

499 
	`HTLi°_ªmoveObje˘
(
pCSU£r
->
pCSU£rD©a
->
u£rSîvi˚s
, (*ÌCSU£r->
pCuºítU£rSîvi˚
);

500 
	`U£rSîvi˚_‰ì
(
pCSU£r
->
pCuºítU£rSîvi˚
);

501 
pCSU£r
->
pCuºítU£rSîvi˚
 = 0;

502 
	}
}

504 
PRIVATE
 
SèãRë_t
 
	$U£rR©ögLi°_›í
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

506 
CSU£r_t
 * 
pCSU£r
 = 
	`GëCSU£r
(
pCSP¨£
);

507 
pCSU£r
->
pCuºítU£rSîvi˚
->
u£rSîvi˚R©ögs
 = 
	`HTLi°_√w
();

508  
SèãRë_OK
;

509 
	}
}

511 
PRIVATE
 
SèãRë_t
 
	$U£rR©ögLi°_˛o£
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

513  
SèãRë_OK
;

514 
	}
}

516 
PRIVATE
 
	$U£rR©ögLi°_de°roy
(
CSP¨£_t
 * 
pCSP¨£
)

518 
CSU£r_t
 * 
pCSU£r
 = 
	`GëCSU£r
(
pCSP¨£
);

519 
U£rSîvi˚_t
 * 
pU£rSîvi˚
 = 
pCSU£r
->
pCuºítU£rSîvi˚
;

520 
U£rSîvi˚R©ög_t
 * 
pU£rSîvi˚R©ög
;

521 (
pU£rSîvi˚R©ög
 = (
U£rSîvi˚R©ög_t
 *Ë
	`HTLi°_ªmoveLa°Obje˘
(
pU£rSîvi˚
->
u£rSîvi˚R©ögs
)))

522 
	`U£rSîvi˚R©ög_‰ì
(
pU£rSîvi˚R©ög
);

523 
	`HTLi°_dñëe
(
pU£rSîvi˚
->
u£rSîvi˚R©ögs
);

524 
pU£rSîvi˚
->
u£rSîvi˚R©ögs
 = 0;

525 
	}
}

527 
PRIVATE
 
SèãRë_t
 
	$U£rR©ög_›í
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

529 
CSU£r_t
 * 
pCSU£r
 = 
	`GëCSU£r
(
pCSP¨£
);

530 
pCSU£r
->
pCuºítU£rSîvi˚R©ög
 = 
	`U£rSîvi˚R©ög_√w
();

531 
	`HTLi°_≠≥ndObje˘
(
pCSU£r
->
pCuºítU£rSîvi˚
->
u£rSîvi˚R©ögs
, (*ÌCSU£r->
pCuºítU£rSîvi˚R©ög
);

532  
SèãRë_OK
;

533 
	}
}

535 
PRIVATE
 
SèãRë_t
 
	$U£rR©ög_gëId
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

537 
CSU£r_t
 * 
pCSU£r
 = 
	`GëCSU£r
(
pCSP¨£
);

538 
P¨£C⁄ãxt_t
 * 
pP¨£C⁄ãxt
 = 
pCSP¨£
->pParseContext;

539 i‡(!
tokí
 || !
pP¨£C⁄ãxt
->
ob£rvedQuŸes
)

540  
SèãRë_WARN_NO_MATCH
;

541 i‡(
	`Pun˘_badDem¨k
(
pSèãTokí
->
vÆidPun˘u©i⁄
, 
dem¨k
))

542  
SèãRë_WARN_BAD_PUNCT
;

543 
	`SVÆ_ªadVÆ
(&
pCSU£r
->
pCuºítU£rSîvi˚R©ög
->
idítifõr
, 
tokí
);

544  
SèãRë_OK
;

545 
	}
}

547 
PRIVATE
 
SèãRë_t
 
	$U£rR©ög_˛o£
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

549 
CSU£r_t
 * 
pCSU£r
 = 
	`GëCSU£r
(
pCSP¨£
);

550 
pCSU£r
->
pCuºítU£rSîvi˚R©ög
 = 0;

551  
SèãRë_OK
;

552 
	}
}

554 
PRIVATE
 
	$U£rR©ög_de°roy
(
CSP¨£_t
 * 
pCSP¨£
)

556 
CSU£r_t
 * 
pCSU£r
 = 
	`GëCSU£r
(
pCSP¨£
);

557 
	`HTLi°_ªmoveObje˘
(
pCSU£r
->
pCuºítU£rSîvi˚
->
u£rSîvi˚R©ögs
, (*ÌCSU£r->
pCuºítU£rSîvi˚R©ög
);

558 
	`U£rSîvi˚R©ög_‰ì
(
pCSU£r
->
pCuºítU£rSîvi˚R©ög
);

559 
pCSU£r
->
pCuºítU£rSîvi˚R©ög
 = 0;

560 
	}
}

562 
PRIVATE
 
SèãRë_t
 
	$U£rR™ge_›í
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

564  
SèãRë_OK
;

565 
	}
}

567 
PRIVATE
 
SèãRë_t
 
	$U£rR™ge_gë
(
CSP¨£_t
 * 
pCSP¨£
, 
SèãTokí_t
 * 
pSèãTokí
, * 
tokí
, 
dem¨k
)

569 
CSU£r_t
 * 
pCSU£r
 = 
	`GëCSU£r
(
pCSP¨£
);

570 
U£rSîvi˚R©ög_t
 * 
pU£rSîvi˚R©ög
 = 
pCSU£r
->
pCuºítU£rSîvi˚R©ög
;

571 
R™ge_t
 * 
me
;

572 * 
±r
, * 
backPå
;

573 i‡(!
tokí
)

574  
SèãRë_WARN_NO_MATCH
;

575 i‡(
	`Pun˘_badDem¨k
(
pSèãTokí
->
vÆidPun˘u©i⁄
, 
dem¨k
))

576  
SèãRë_WARN_BAD_PUNCT
;

577 i‡((
me
 = (
R™ge_t
 *Ë
	`HT_CALLOC
(1, (R™ge_t))Ë=
NULL
)

578 
	`HT_OUTOFMEM
("Range_t");

580 
	`HTLi°_≠≥ndObje˘
(
pU£rSîvi˚R©ög
->
ønges
, (*)
me
);

581 
backPå
 = 
±r
 = 
tokí
;

582 *
±r
) {

583 i‡(*
±r
 == ':') {

584 *
±r
 = 0;

585 
±r
++;

588 
±r
++;

590 
	`FVÆ_ªadVÆ
(&
me
->
mö
, 
backPå
);

591 i‡(*
±r
)

592 
	`FVÆ_ªadVÆ
(&
me
->
max
, 
±r
);

593  
SèãRë_OK
;

594 
	}
}

596 
PRIVATE
 
SèãRë_t
 
	$U£rR™ge_˛o£
(
CSP¨£_t
 * 
pCSP¨£
, * 
tokí
, 
dem¨k
)

598  
SèãRë_OK
;

599 
	}
}

601 
PRIVATE
 
	$U£rR™ge_de°roy
(
CSP¨£_t
 * 
pCSP¨£
)

603 
	}
}

608 
PUBLIC
 
CSEº‹_t
 
	$CSU£r_ôî©eSîvi˚s
(
CSU£r_t
 * 
pCSU£r
, 
CSU£r_ˇŒback_t
 * 
pIãøt‹CB
, 
Sèã_P¨ms_t
 * 
pP¨ms
, c⁄° * 
idítifõr
, * 
pVoid
)

610 
HTLi°
 * 
u£rSîvi˚s
;

611 
CSEº‹_t
 
ªt
 = 
CSEº‹_OK
;

612 
cou¡
 = 0;

613 i‡(!
pIãøt‹CB
 ||

614 !
pCSU£r
 ||

615 !
pCSU£r
->
pCSU£rD©a
->
u£rSîvi˚s
)

616  
CSEº‹_BAD_PARAM
;

617 
u£rSîvi˚s
 = 
pCSU£r
->
pCSU£rD©a
->userServices;

618 
ªt
 =
CSEº‹_OK
 && (
pCSU£r
->
pCuºítU£rSîvi˚
 = (
U£rSîvi˚_t
 *Ë
	`HTLi°_√xtObje˘
(
u£rSîvi˚s
)))

619 i‡(!
idítifõr
 || !
	`°rˇ£comp
(
	`SVÆ_vÆue
(&
pCSU£r
->
pCuºítU£rSîvi˚
->
øtög_£rvi˚
), identifier)) {

620 
ªt
 = (*
pIãøt‹CB
)(
pCSU£r
, 
pP¨ms
, 
idítifõr
, 
pVoid
);

621 
cou¡
++;

623 i‡(!
cou¡
)

624  
CSEº‹_SERVICE_MISSING
;

625  
ªt
;

626 
	}
}

628 
PUBLIC
 
CSEº‹_t
 
	$CSU£r_ôî©eSîvi˚R©ögs
(
CSU£r_t
 * 
pCSU£r
, 
CSU£r_ˇŒback_t
 * 
pIãøt‹CB
, 
Sèã_P¨ms_t
 * 
pP¨ms
, c⁄° * 
idítifõr
, * 
pVoid
)

630 
HTLi°
 * 
u£rSîvi˚R©ögs
;

631 
CSEº‹_t
 
ªt
 = 
CSEº‹_OK
;

632 
cou¡
 = 0;

633 i‡(!
pIãøt‹CB
 ||

634 !
pCSU£r
 ||

635 !
pCSU£r
->
pCuºítU£rSîvi˚
 ||

636 !
pCSU£r
->
pCuºítU£rSîvi˚
->
u£rSîvi˚R©ögs
)

637  
CSEº‹_BAD_PARAM
;

638 
u£rSîvi˚R©ögs
 = 
pCSU£r
->
pCuºítU£rSîvi˚
->userServiceRatings;

639 
ªt
 =
CSEº‹_OK
 && (
pCSU£r
->
pCuºítU£rSîvi˚R©ög
 = (
U£rSîvi˚R©ög_t
 *Ë
	`HTLi°_√xtObje˘
(
u£rSîvi˚R©ögs
)))

640 i‡(!
idítifõr
 || !
	`°rˇ£comp
(
	`SVÆ_vÆue
(&
pCSU£r
->
pCuºítU£rSîvi˚R©ög
->identifier), identifier)) {

641 
ªt
 = (*
pIãøt‹CB
)(
pCSU£r
, 
pP¨ms
, 
idítifõr
, 
pVoid
);

642 
cou¡
++;

644 i‡(!
cou¡
)

645  
CSEº‹_RATING_MISSING
;

646  
ªt
;

647 
	}
}

650 
	#LCURLYSTR
 "{"

	)

651 
	#RCURLYSTR
 "}"

	)

653 
PRIVATE
 * 
	gCom∂ëíes£s
[] = {"minimal", "short", "full", "signed"};

655 
PRIVATE
 * 
	gO±i⁄s
[] = {"signed", "normal", "tree", "generic+tree"};

657 
PUBLIC
 * 
	$CSU£r_ac˚±Labñs
(
CSU£r_t
 * 
pCSU£r
,

658 
CSCom∂ëíess_t
 
com∂ëíess
)

660 
HTChunk
 * 
pChunk
 = 
	`HTChunk_√w
(0x40);

661 
HTLi°
 * 
u£rSîvi˚s
 = 
	`CSU£r_gëCSU£rD©a
(
pCSU£r
)->userServices;

662 
U£rSîvi˚_t
 * 
pU£rSîvi˚
;

663 
£rvi˚No
 = 0;

665 
	`HTChunk_puts
(
pChunk
,

666 "PrŸocﬁ-Reque°: "
LCURLYSTR
"PICS-1.1 "LCURLYSTR"params ");

667 
	`HTChunk_puts
(
pChunk
, 
Com∂ëíes£s
[
com∂ëíess
]);

668 
	`HTChunk_puts
(
pChunk
, " "
LCURLYSTR
"services ");

669 (
pU£rSîvi˚
 = (
U£rSîvi˚_t
 *Ë
	`HTLi°_√xtObje˘
(
u£rSîvi˚s
))){

670 i‡(
£rvi˚No
)

671 
	`HTChunk_puts
(
pChunk
, " ");

672 
	`HTChunk_puts
(
pChunk
, "\"");

673 
	`HTChunk_puts
(
pChunk
, 
	`SVÆ_vÆue
(&
pU£rSîvi˚
->
øtög_£rvi˚
));

674 
	`HTChunk_puts
(
pChunk
, "\"");

675 
£rvi˚No
++;

677 
	`HTChunk_puts
(
pChunk
, 
RCURLYSTR
 RCURLYSTR RCURLYSTR"\r\n");

678  
	`HTChunk_toCSåög
(
pChunk
);

679 
	}
}

681 
PUBLIC
 * 
	$CSU£r_gëLabñs
(
CSU£r_t
 * 
pCSU£r
, * 
uæ
,

682 
CSO±i⁄_t
 
›ti⁄
,

683 
CSCom∂ëíess_t
 
com∂ëíess
)

685 
HTChunk
 * 
pChunk
 = 
	`HTChunk_√w
(0x40);

686 
HTLi°
 * 
u£rSîvi˚s
 = 
	`CSU£r_gëCSU£rD©a
(
pCSU£r
)->userServices;

687 
U£rSîvi˚_t
 * 
pU£rSîvi˚
;

688 
£rvi˚No
 = 0;

689 * 
esˇ≥dURL
;

690 * 
buªau
;

692 i‡(!(
buªau
 = 
	`CSU£r_buªau
(
pCSU£r
)))

700 
	`HTChunk_puts
(
pChunk
, 
buªau
);

701 
	`HTChunk_puts
(
pChunk
, "?opt=");

702 
	`HTChunk_puts
(
pChunk
, 
O±i⁄s
[
›ti⁄
]);

703 
	`HTChunk_puts
(
pChunk
, "&format=");

704 
	`HTChunk_puts
(
pChunk
, 
Com∂ëíes£s
[
com∂ëíess
]);

705 
	`HTChunk_puts
(
pChunk
, "&u=");

706 
esˇ≥dURL
 = 
	`HTEsˇ≥
(
uæ
, 
URL_XPALPHAS
);

707 
	`HTChunk_puts
(
pChunk
, 
esˇ≥dURL
);

708 
	`HT_FREE
(
esˇ≥dURL
);

709 (
pU£rSîvi˚
 = (
U£rSîvi˚_t
 *Ë
	`HTLi°_√xtObje˘
(
u£rSîvi˚s
))){

710 
	`HTChunk_puts
(
pChunk
, "&s=");

712 
esˇ≥dURL
 = 
	`HTEsˇ≥
(
	`SVÆ_vÆue
(&
pU£rSîvi˚
->
øtög_£rvi˚
),

713 
URL_XPALPHAS
);

714 
	`HTChunk_puts
(
pChunk
, 
esˇ≥dURL
);

715 
	`HT_FREE
(
esˇ≥dURL
);

717 
£rvi˚No
++;

720  
	`HTChunk_toCSåög
(
pChunk
);

721 
	}
}

	@PICS-client/src/CSUser.h

25 #i‚de‡
CSUSER_H


26 
	#CSUSER_H


	)

41 
	mCSU£rTC_USER
 = 1,

42 
	mCSU£rTC_SERVICE
,

43 
	mCSU£rTC_RLIST
,

44 
	mCSU£rTC_RATING
,

45 
	mCSU£rTC_RANGE
,

46 
	mCSU£rTC_COUNT


47 } 
	tCSU£rTC_t
;

57 
CSU£rD©a_s
 
	tCSU£rD©a_t
;

68 
SèãRë_t
 
	tU£rT¨gëCÆlback_t
(
	tCSU£r_t
 * 
	tpCSU£r
,

69 
	tCSP¨£_t
 * 
	tpCSP¨£
,

70 
	tCSU£rTC_t
 
	tèrgë
, 
	tBOOL
 
	t˛o£d
,

71 * 
	tpVoid
);

82 
SèãRë_t
 
	tU£rEº‹H™dÀr_t
(
	tCSU£r_t
 * 
	tpCSU£r
, 
	tCSP¨£_t
 * 
	tpCSP¨£
,

83 c⁄° * 
	ttokí
, 
	tdem¨k
,

84 
	tSèãRë_t
 
	tîr‹Code
);

97 
CSP¨£_t
 * 
CSP¨£_√wU£r
();

98 
BOOL
 
CSP¨£_dñëeU£r
(
CSP¨£_t
 *);

99 
CSU£r_t
 * 
CSP¨£_gëU£r
(
CSP¨£_t
 * 
me
);

100 * 
CSU£r_«me
(
CSU£r_t
 * 
pCSU£r
);

101 
BOOL
 
CSU£r_checkPassw‹d
(
CSU£r_t
 * 
pCSU£r
, * 
∑ssw‹d
);

102 * 
CSU£r_buªau
(
CSU£r_t
 * 
pCSU£r
);

103 
CSU£r_‰ì
(
CSU£r_t
 * 
me
);

104 
R™ge_t
 * 
CSU£r_gëU£rR©ögR™ge
(
CSU£r_t
 * 
pCSU£r
);

105 * 
CSU£r_gëR©ögSå
(
CSU£r_t
 * 
pCSU£r
);

121 
CSEº‹_t
 
	tCSU£r_ˇŒback_t
(
	tCSU£r_t
 *,

122 
	tSèã_P¨ms_t
 *, const *,

123 * 
	tpVoid
);

124 
CSEº‹_t
 
	tCSU£r_ôî©‹_t
(
	tCSU£r_t
 *,

125 
	tCSU£r_ˇŒback_t
 *,

126 
	tSèã_P¨ms_t
 *, const *,

127 * 
	tpVoid
);

129 
CSU£r_ôî©‹_t
 
CSU£r_ôî©eSîvi˚s
;

130 
CSU£r_ôî©‹_t
 
CSU£r_ôî©eSîvi˚R©ögs
;

132 
CSEº‹_t
 
CSCheckLabñ_checkLabñAndU£r
(
CSLabñ_t
 * 
pCSLabñ
,

133 
CSU£r_t
 * 
pCSU£r
);

134 
CSEº‹_t
 
CSCheckLabñ_∑r£AndVÆid©eLabñSå
(c⁄° * 
œbñ
,

135 
CSU£r_t
 * 
pCSU£r
);

148 * 
CSU£r_ac˚±Labñs
(
CSU£r_t
 * 
pCSU£r
,

149 
CSCom∂ëíess_t
 
com∂ëíess
);

162 * 
CSU£r_gëLabñs
(
CSU£r_t
 * 
pCSU£r
, * 
uæ
,

163 
CSO±i⁄_t
 
›ti⁄
,

164 
CSCom∂ëíess_t
 
com∂ëíess
);

177 * 
CSU£r_po°Labñs
(
CSU£r_t
 * 
pCSU£r
, * 
uæ
,

178 
CSO±i⁄_t
 
›ti⁄
,

179 
CSCom∂ëíess_t
 
com∂ëíess
);

	@PICS-client/src/CSUserSt.h

30 #i‚de‡
CSUSERST_H


31 
	#CSUSERST_H


	)

38 
SVÆ_t
 
	midítifõr
;

39 
BVÆ_t
 
	mmissög_sˇÀ
;

40 
BVÆ_t
 
	mob£rve_d©es
;

41 
HTLi°
 * 
	mønges
;

42 } 
	tU£rSîvi˚R©ög_t
;

45 
FVÆ_t
 
	mvîsi⁄
;

46 
SVÆ_t
 
	møtög_sy°em
;

47 
SVÆ_t
 
	møtög_£rvi˚
;

48 
BVÆ_t
 
	mmissög_£rvi˚
;

49 
BVÆ_t
 
	mmissög_sˇÀ
;

50 
BVÆ_t
 
	mob£rve_d©es
;

51 
HTLi°
 * 
	mu£rSîvi˚R©ögs
;

52 } 
	tU£rSîvi˚_t
;

54 
	sCSU£rD©a_s
 {

55 
FVÆ_t
 
	mvîsi⁄
;

56 
SVÆ_t
 
	mu£r_«me
;

57 
SVÆ_t
 
	m∑ssw‹d
;

58 
BVÆ_t
 
	msu≥r_u£r
;

59 
FVÆ_t
 
	mmöimum_£rvi˚s
;

60 
BVÆ_t
 
	mmissög_£rvi˚
;

61 
BVÆ_t
 
	mmissög_sˇÀ
;

62 
BVÆ_t
 
	mob£rve_d©es
;

63 
SVÆ_t
 
	mbuªau
;

64 
HTLi°
 * 
	m¥oxõs
;

65 
HTLi°
 * 
	mu£rSîvi˚s
;

74 
CSU£rD©a_t
 * 
CSU£r_gëCSU£rD©a
(
CSU£r_t
 * 
me
);

75 
U£rSîvi˚_t
 * 
CSU£r_gëU£rSîvi˚
(
CSU£r_t
 * 
pCSU£r
);

76 
U£rSîvi˚R©ög_t
 * 
CSU£r_gëU£rSîvi˚R©ög
(
CSU£r_t
 * 
pCSU£r
);

	@PICS-client/src/CSUsrLst.c

5 
	~"WWWLib.h
"

6 
	~"CSLAµ.h
"

8 
	s_HTSåóm
 {

9 c⁄° 
HTSåómCœss
 * 
	miß
;

10 
HTReque°
 * 
	mªque°
;

11 
HTSåóm
 * 
	mèrgë
;

12 
HTChunk
 * 
	mbuf„r
;

13 
HTEOLSèã
 
	mEOL°©e
;

17 
HTLi°
 * 
	gU£rLi°
 = 0;

20 * 
	m«me
;

21 * 
	muæ
;

22 } 
	tU£rLi°Såu˘_t
;

24 
PRIVATE
 
BOOL
 
	$CSU£rLi°_addLöe
(
HTSåóm
 * 
me
)

26 
U£rLi°Såu˘_t
 * 
√wEl
;

27 * 
pURL
;

28 * 
íd
;

29 
íd
 = 
	`°ºchr
(
	`HTChunk_d©a
(
me
->
buf„r
), ' ');

30 
pURL
 = 
íd
 + 1;

31 *(
íd
-1) == ' ')

32 
íd
--;

33 *
íd
 = 0;

34 i‡((
√wEl
 = (
U£rLi°Såu˘_t
 *)
	`HT_CALLOC
(1, (U£rLi°Såu˘_t))Ë=
NULL
)

35 
	`HT_OUTOFMEM
("UserListStruct_t");

36 
	`SåAŒocC›y
(
√wEl
->
«me
, 
	`HTChunk_d©a
(
me
->
buf„r
));

37 
	`SåAŒocC›y
(
√wEl
->
uæ
, 
pURL
);

39 
	`HTLi°_addObje˘
(
U£rLi°
, (*)
√wEl
);

40  
YES
;

41 
	}
}

43 
PUBLIC
 
BOOL
 
	$CSU£rLi°_de°roy
()

45 * 
u£rName
;

47 (
u£rName
 = (*Ë
	`HTLi°_ªmoveLa°Obje˘
(
U£rLi°
)))

48 
	`HT_FREE
(
u£rName
);

49 
	`HTLi°_dñëe
(
U£rLi°
);

50 
U£rLi°
 = 
NULL
;

51  
YES
;

52 
	}
}

54 
PUBLIC
 * 
	$CSU£rLi°_födURL
(* 
u£∫ame
)

56 
HTLi°
 * 
cur
 = 
U£rLi°
;

57 
U£rLi°Såu˘_t
 * 
pU£r
;

58 (
pU£r
 = (
U£rLi°Såu˘_t
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

59 i‡(!
	`°rˇ£comp
(
u£∫ame
, 
pU£r
->
«me
))

60  
pU£r
->
uæ
;

63 
	}
}

65 
PUBLIC
 
	$CSU£rLi°_íum
(
CSU£rLi°CÆlback
* 
pCÆlback
, * 
pVoid
)

67 
HTLi°
 * 
cur
 = 
U£rLi°
;

68 
U£rLi°Såu˘_t
 * 
pU£r
;

69 
ªtVÆ
, 
i
 = 0;

70 (
pU£r
 = (
U£rLi°Såu˘_t
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

71 i‡((
ªtVÆ
 = (*
pCÆlback
)(
pU£r
->
«me
,ÖU£r->
uæ
, 
i
, 
pVoid
)Ë!
CSEº‹_OK
)

72  (
ªtVÆ
);

73 
i
++;

76 
	}
}

81 
PRIVATE
 
	$CSU£rLi°_put_block
 (
HTSåóm
 * 
me
, c⁄° * 
b
, 
l
)

83 
l
 > 0) {

84 i‡(
me
->
EOL°©e
 =
EOL_FCR
) {

85 i‡(*
b
 =
LF
)

86 
me
->
EOL°©e
 = 
EOL_FLF
;

87 i‡(
	`is•a˚
((Ë*
b
))

88 
me
->
EOL°©e
 = 
EOL_DOT
;

90 
	`CSU£rLi°_addLöe
(
me
);

91 
me
->
EOL°©e
 = 
EOL_BEGIN
;

92 
	`HTChunkCÀ¨
(
me
->
buf„r
);

95 } i‡(
me
->
EOL°©e
 =
EOL_FLF
) {

96 i‡(
	`is•a˚
((Ë*
b
))

97 
me
->
EOL°©e
 = 
EOL_DOT
;

99 
	`CSU£rLi°_addLöe
(
me
);

100 
me
->
EOL°©e
 = 
EOL_BEGIN
;

101 
	`HTChunkCÀ¨
(
me
->
buf„r
);

104 } i‡(
me
->
EOL°©e
 =
EOL_DOT
) {

105 i‡(
	`is•a˚
((Ë*
b
)) {

106 
me
->
EOL°©e
 = 
EOL_BEGIN
;

107 
	`HTChunkPutc
(
me
->
buf„r
, ' ');

109 
	`CSU£rLi°_addLöe
(
me
);

110 
me
->
EOL°©e
 = 
EOL_BEGIN
;

111 
	`HTChunkCÀ¨
(
me
->
buf„r
);

114 } i‡(*
b
 =
CR
) {

115 
me
->
EOL°©e
 = 
EOL_FCR
;

116 } i‡(*
b
 =
LF
) {

117 
me
->
EOL°©e
 = 
EOL_FLF
;

119 
	`HTChunkPutc
(
me
->
buf„r
, *
b
);

120 
l
--; 
b
++;

122 i‡(
	`HTChunk_size
(
me
->
buf„r
))

123 
	`CSU£rLi°_addLöe
(
me
);

124  
HT_OK
;

125 
	}
}

127 
PRIVATE
 
	$CSU£rLi°_put_ch¨a˘î
 (
HTSåóm
 * 
me
, 
c
)

129  
	`CSU£rLi°_put_block
(
me
, &
c
, 1);

130 
	}
}

132 
PRIVATE
 
	$CSU£rLi°_put_°rög
 (
HTSåóm
 * 
me
, c⁄° * 
s
)

134  
	`CSU£rLi°_put_block
(
me
, 
s
, (Ë
	`°æí
(s));

135 
	}
}

137 
PRIVATE
 
	$CSU£rLi°_Êush
 (
HTSåóm
 * 
me
)

139  (*
me
->
èrgë
->
iß
->
Êush
)(me->target);

140 
	}
}

142 
PRIVATE
 
	$CSU£rLi°_‰ì
 (
HTSåóm
 * 
me
)

144 
°©us
 = 
HT_OK
;

145 i‡(
me
->
èrgë
) {

146 i‡((
°©us
 = (*
me
->
èrgë
->
iß
->
_‰ì
)(me->èrgë)Ë=
HT_WOULD_BLOCK
)

147  
HT_WOULD_BLOCK
;

149 
	`HTTRACE
(
APP_TRACE
, "Rules....... FREEING....\n");

150 
	`HTChunkFªe
(
me
->
buf„r
);

152 
	`HT_FREE
(
me
);

153  
°©us
;

154 
	}
}

156 
PRIVATE
 
	$CSU£rLi°_ab‹t
 (
HTSåóm
 * 
me
, 
HTLi°
 * 
e
)

158 
°©us
 = 
HT_ERROR
;

159 i‡(
me
->
èrgë
Ë
°©us
 = (*me->èrgë->
iß
->
ab‹t
)(me->èrgë, 
e
);

160 
	`HTTRACE
(
APP_TRACE
, "Rules....... ABORTING...\n");

161 
	`HTChunkFªe
(
me
->
buf„r
);

163 
	`HT_FREE
(
me
);

164  
°©us
;

165 
	}
}

170 
PRIVATE
 c⁄° 
HTSåómCœss
 
	gCSU£rLi°Cœss
 =

173 
CSU£rLi°_Êush
,

174 
CSU£rLi°_‰ì
,

175 
CSU£rLi°_ab‹t
,

176 
CSU£rLi°_put_ch¨a˘î
,

177 
CSU£rLi°_put_°rög
,

178 
CSU£rLi°_put_block


181 
PUBLIC
 
HTSåóm
 * 
	$CSU£rLi°s
 (
HTReque°
 * 
ªque°
,

182 * 
∑øm
,

183 
HTF‹m©
 
öput_f‹m©
,

184 
HTF‹m©
 
ouçut_f‹m©
,

185 
HTSåóm
 * 
ouçut_°ªam
)

187 
HTSåóm
 * 
me
;

188 i‡((
me
 = (
HTSåóm
 *Ë
	`HT_CALLOC
(1, (HTSåóm))Ë=
NULL
)

189 
	`HT_OUTOFMEM
("CSUserLists");

190 
me
->
iß
 = &
CSU£rLi°Cœss
;

191 
me
->
ªque°
 =Ñequest;

192 
me
->
èrgë
 = 
ouçut_°ªam
;

193 
me
->
buf„r
 = 
	`HTChunkCª©e
(512);

195 i‡(!
U£rLi°
)

196 
U£rLi°
 = 
	`HTLi°_√w
();

197 
me
->
EOL°©e
 = 
EOL_BEGIN
;

202  
me
;

203 
	}
}

	@PICS-client/src/CSUsrLst.h

26 #i‚de‡
CSUSRLST_H


27 
	#CSUSRLST_H


	)

36 * 
	mu£r
;

37 * 
	mURL
;

38 } 
	tU£rLi°El_t
;

48 
HTLi°
 * 
CSU£rLi°_gë
();

49 
BOOL
 
CSU£rLi°_de°roy
();

50 * 
CSU£rLi°_födURL
(* 
u£∫ame
);

58 
HTSåóm
 * 
CSU£rLi°s
 (
HTReque°
 * 
ªque°
,

59 * 
∑øm
,

60 
HTF‹m©
 
öput_f‹m©
,

61 
HTF‹m©
 
ouçut_f‹m©
,

62 
HTSåóm
 * 
ouçut_°ªam
);

	@Robot/src/HTQueue.c

23 
	~"HTQueue.h
"

25 
HTLi°
 * 
	$HTQueue_√w
()

27  
	`HTLi°_√w
();

28 
	}
}

30 
BOOL
 
	$HTQueue_dñëe
(
HTLi°
 *
me
)

32  
	`HTLi°_dñëe
(
me
);

33 
	}
}

35 
BOOL
 
	$HTQueue_íqueue
(
HTLi°
 *
me
,*
√wObje˘
)

37  
	`HTLi°_addObje˘
(
me
,
√wObje˘
);

38 
	}
}

39 
BOOL
 
	$HTQueue_≠≥nd
(
HTLi°
 *
me
,*
√wObje˘
)

41  
	`HTLi°_≠≥ndObje˘
(
me
,
√wObje˘
);

42 
	}
}

44 
BOOL
 
	$HTQueue_dequeue
(
HTLi°
 *
me
)

46  
	`HTLi°_ªmoveFú°Obje˘
(
me
Ë? 
YES
 : 
NO
;

47 
	}
}

49 
BOOL
 
	$HTQueue_isEm±y
(
HTLi°
 *
me
)

51  
	`HTLi°_isEm±y
(
me
);

52 
	}
}

54 * 
	$HTQueue_hódOfQueue
(
HTLi°
 *
me
)

56  
	`HTLi°_fú°Obje˘
(
me
);

57 
	}
}

59 
	$HTQueue_cou¡
(
HTLi°
 *
me
)

61  
	`HTLi°_cou¡
(
me
);

62 
	}
}

	@Robot/src/HTQueue.h

20 #i‚de‡
HTQUEUE_H


21 
	#HTQUEUE_H


	)

23 
	~"WWWLib.h
"

31 
PUBLIC
 
HTLi°
 * 
HTQueue_√w
();

32 
PUBLIC
 
BOOL
 
HTQueue_dñëe
(
HTLi°
 *
me
);

33 
PUBLIC
 
BOOL
 
HTQueue_íqueue
(
HTLi°
 *
me
,*
√wObje˘
);

34 
PUBLIC
 
BOOL
 
HTQueue_≠≥nd
(
HTLi°
 *
me
,*
√wObje˘
);

35 
PUBLIC
 
BOOL
 
HTQueue_dequeue
(
HTLi°
 *
me
);

36 
PUBLIC
 
BOOL
 
HTQueue_isEm±y
(
HTLi°
 *
me
);

37 
PUBLIC
 * 
HTQueue_hódOfQueue
(
HTLi°
 *
me
);

38 
PUBLIC
 
HTQueue_cou¡
(
HTLi°
 *
me
);

	@Robot/src/HTRobMan.h

21 #i‚de‡
HTROBMAN_H


22 
	#HTROBMAN_H


	)

24 
	~"WWWLib.h
"

25 
	~"WWWAµ.h
"

26 
	~"WWWTøns.h
"

27 
	~"WWWInô.h
"

28 
	~"WWWSQL.h
"

30 
	~"HText.h
"

32 
	~"HTRobŸ.h
"

34 #i‚de‡
W3C_VERSION


35 
	#W3C_VERSION
 "Un•ecifõd"

	)

38 
	#APP_NAME
 "W3CRobŸ"

	)

39 
	#APP_VERSION
 
W3C_VERSION


	)

40 
	#COMMAND_LINE
 "hâp://www.w3.‹g/RobŸ/U£r/Comm™dLöe"

	)

41 
	#ROBOTS_TXT
 "/robŸs.txt"

	)

43 
	#DEFAULT_OUTPUT_FILE
 "robŸ.out"

	)

44 
	#DEFAULT_RULE_FILE
 "robŸ.c⁄f"

	)

45 
	#DEFAULT_LOG_FILE
 "log-˛f.txt"

	)

46 
	#DEFAULT_HIT_FILE
 "log-hô.txt"

	)

47 
	#DEFAULT_REL_FILE
 "log-ªl.txt"

	)

48 
	#DEFAULT_LM_FILE
 "log-œ°modifõd.txt"

	)

49 
	#DEFAULT_TITLE_FILE
 "log-tôÀ.txt"

	)

50 
	#DEFAULT_REFERER_FILE
 "log-ª„ªr.txt"

	)

51 
	#DEFAULT_REJECT_FILE
 "log-ªje˘.txt"

	)

52 
	#DEFAULT_NOTFOUND_FILE
 "log-nŸfound.txt"

	)

53 
	#DEFAULT_CONNEG_FILE
 "log-c⁄√g.txt"

	)

54 
	#DEFAULT_NOALTTAG_FILE
 "log-Æt.txt"

	)

55 
	#DEFAULT_FORMAT_FILE
 "log-f‹m©.txt"

	)

56 
	#DEFAULT_CHARSET_FILE
 "log-ch¨£t.txt"

	)

57 
	#DEFAULT_MEMLOG
 "robŸ.mem"

	)

58 
	#DEFAULT_PREFIX
 ""

	)

59 
	#DEFAULT_IMG_PREFIX
 ""

	)

60 
	#DEFAULT_DEPTH
 0

	)

61 
	#DEFAULT_DELAY
 50

	)

63 
	#DEFAULT_CACHE_SIZE
 20

	)

65 
	#DEFAULT_SQL_SERVER
 "loˇlho°"

	)

66 
	#DEFAULT_SQL_DB
 "webbŸ"

	)

67 
	#DEFAULT_SQL_USER
 "webbŸ"

	)

68 
	#DEFAULT_SQL_PW
 ""

	)

71 
	#HT_MEMLOG


	)

74 
	#MILLIES
 1000

	)

75 
	#DEFAULT_TIMEOUT
 20

	)

77 
	e_MRFœgs
 {

78 
	mMR_IMG
 = 0x1,

79 
	mMR_LINK
 = 0x2,

80 
	mMR_PREEMPTIVE
 = 0x4,

81 
	mMR_TIME
 = 0x8,

82 
	mMR_SAVE
 = 0x10,

83 
	mMR_QUIET
 = 0x20,

84 
	mMR_REAL_QUIET
 = 0x40,

85 
	mMR_VALIDATE
 = 0x80,

86 
	mMR_END_VALIDATE
 = 0x100,

87 
	mMR_KEEP_META
 = 0x200,

88 
	mMR_LOGGING
 = 0x400,

89 
	mMR_DISTRIBUTIONS
 = 0x800,

90 
	mMR_NOROBOTSTXT
 = 0x1000,

91 
	mMR_NOMETATAGS
 = 0x2000,

92 
	mMR_BFS
 = 0x4000,

93 
	mMR_REDIR
 = 0x8000

94 } 
	tMRFœgs
;

96 
	s_RobŸ
 {

97 
	mdïth
;

98 
	mndoc
;

99 *
	mcdïth
;

100 
	m˙t
;

101 
	mcödex
;

103 
HTLi°
 * 
	mhy≥rdoc
;

104 
HTLi°
 * 
	mhãxt
;

105 
HTLi°
 * 
	mfögîs
;

107 
HTLi°
 * 
	mqueue
;

108 
	mcq
;

110 
	mtimî
;

111 
	mwaôs
;

113 * 
	mcwd
;

114 * 
	mruÀs
;

115 * 
	m¥efix
;

116 * 
	mimg_¥efix
;

118 * 
	mlogfûe
;

119 
HTLog
 * 
	mlog
;

120 * 
	mªffûe
;

121 
HTLog
 * 
	mªf
;

122 * 
	mªje˘fûe
;

123 
HTLog
 * 
	mªje˘
;

124 * 
	mnŸfoundfûe
;

125 
HTLog
 * 
	mnŸfound
;

126 * 
	mc⁄√gfûe
;

127 
HTLog
 * 
	mc⁄√g
;

128 * 
	mnﬂ…ègfûe
;

129 
HTLog
 * 
	mnﬂ…èg
;

132 * 
	mhôfûe
;

133 * 
	mªlfûe
;

134 
HTLökTy≥
 
	mªœti⁄
;

135 * 
	mtôÀfûe
;

136 * 
	mmtfûe
;

137 * 
	mch¨£tfûe
;

138 * 
	mlmfûe
;

140 * 
	mouçutfûe
;

141 
FILE
 * 
	mouçut
;

143 * 
	mfuæ
;

145 
MRFœgs
 
	mÊags
;

147 
	mªdú_code
;

149 
	mgë_byãs
;

150 
	mgë_docs
;

152 
	mhód_byãs
;

153 
	mhód_docs
;

155 
	mŸhî_docs
;

157 
ms_t
 
	mtime
;

159 #ifde‡
HT_POSIX_REGEX


160 
ªgex_t
 * 
	mö˛ude
;

161 
ªgex_t
 * 
	mex˛ude
;

162 
ªgex_t
 * 
	mcheck
;

163 
ªgex_t
 * 
	mexc_robŸ
;

166 #ifde‡
HT_MYSQL


167 
HTSQLLog
 * 
	msqŒog
;

168 * 
	msql£rvî
;

169 * 
	msqldb
;

170 * 
	msqlu£r
;

171 * 
	msqÕw
;

172 * 
	msqÃñ©ive
;

173 
BOOL
 
	msqÀxã∫Æs
;

174 
	msqlÊags
;

177 } 
	tRobŸ
;

179 
	s_Fögî
 {

180 
RobŸ
 * 
	mrobŸ
;

181 
HTReque°
 * 
	mªque°
;

182 
HTP¨ítAnch‹
 * 
	mde°
;

183 } 
	tFögî
;

190 
	#NO_CODE
 -1

	)

191 
	#REDIR_CODE
 -2

	)

193 
	s_Hy≥rDoc
 {

194 
HTP¨ítAnch‹
 * 
	m™ch‹
;

195 
	mdïth
;

196 
	mhôs
;

197 
	mcode
;

198 
	mödex
;

199 * 
	mtôÀ
;

200 
HTMëhod
 
	mmëhod
;

201 } 
	tHy≥rDoc
;

207 
	s_HText
 {

208 
HTReque°
 * 
	mªque°
;

209 
BOOL
 
	mfﬁlow
;

215 
	s_MëaDi°
 {

216 
HTAtom
 * 
	m«me
;

217 
	mhôs
;

218 } 
	tMëaDi°
;

220 #ifde‡
HT_POSIX_REGEX


221 
PUBLIC
 
ªgex_t
 * 
gë_ªgty≥
 (
RobŸ
 * 
mr
, c⁄° * 
ªgex_°r
, 
cÊags
);

224 
PUBLIC
 
OuçutD©a
(c⁄° * 
fmt
, ...);

225 
PUBLIC
 
Hy≥rDoc
 * 
Hy≥rDoc_√w
 (
RobŸ
 * 
mr
,
HTP¨ítAnch‹
 * 
™ch‹
, 
dïth
);

226 
PUBLIC
 
BOOL
 
Hy≥rDoc_dñëe
 (
Hy≥rDoc
 * 
hd
);

227 
PUBLIC
 
RobŸ
 * 
RobŸ_√w
 ();

228 
PUBLIC
 
Fögî
 * 
Fögî_√w
 (
RobŸ
 * 
robŸ
, 
HTP¨ítAnch‹
 * 
de°
, 
HTMëhod
 
mëhod
);

229 
PUBLIC
 
BOOL
 
RobŸ_ªgi°îHTMLP¨£r
 ();

230 
PUBLIC
 
CÀ™up
 (
RobŸ
 * 
me
, 
°©us
);

231 
PUBLIC
 
Vîsi⁄Info
 ();

233 
PUBLIC
 
ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

234 * 
∑øm
, 
°©us
) ;

236 
PUBLIC
 
bfs_ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

237 * 
∑øm
, 
°©us
) ;

239 
PUBLIC
 
ªdúe˘i⁄_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

240 * 
∑øm
, 
°©us
) ;

242 
PUBLIC
 
Sîvög_queue
(
RobŸ
 *
mr
);

244 
PUBLIC
 *
gë_robŸs_txt
(*
uri
);

	@Robot/src/HTRobot.c

26 
	~"HTRobM™.h
"

27 
	~"HTQueue.h
"

28 
	~"HTAncM™.h
"

30 
	#SHOW_QUIET
(
mr
Ë((mrË&& !((mr)->
Êags
 & 
MR_QUIET
))

	)

31 
	#SHOW_REAL_QUIET
(
mr
Ë((mrË&& !((mr)->
Êags
 & 
MR_REAL_QUIET
))

	)

33 
PRIVATE
 
HTEº‹Mesßge
 
	gHTEº‹s
[
HTERR_ELEMENTS
] = {
HTERR_ENGLISH_INITIALIZER
};

38 
PRIVATE
 
HTCom∑ªr
 
	gHôS‹t
, 
	gF‹m©S‹t
, 
	gLa°ModifõdS‹t
, 
	gTôÀS‹t
;

43 
PRIVATE
 
HText_√w
 
	gRHText_√w
;

44 
PRIVATE
 
HText_dñëe
 
	gRHText_dñëe
;

45 
PRIVATE
 
HText_foundLök
 
	gRHText_foundLök
;

54 
PUBLIC
 
Hy≥rDoc
 * 
	$Hy≥rDoc_√w
 (
RobŸ
 * 
mr
,
HTP¨ítAnch‹
 * 
™ch‹
, 
dïth
)

56 
Hy≥rDoc
 * 
hd
;

57 i‡((
hd
 = (
Hy≥rDoc
 *Ë
	`HT_CALLOC
(1, (Hy≥rDoc))Ë=
NULL
)

58 
	`HT_OUTOFMEM
("HyperDoc_new");

59 
hd
->
dïth
 = depth;

60 
hd
->
hôs
 = 1;

62 
hd
->
code
 = 
NO_CODE
;

63 
hd
->
ödex
 = ++
mr
->
cödex
;

66 
hd
->
™ch‹
 =ánchor;

67 
	`HTAnch‹_£tDocumít
(
™ch‹
, (*Ë
hd
);

70 i‡(!
mr
->
hy≥rdoc
Ëmr->hy≥rdo¯
	`HTLi°_√w
();

71 
	`HTLi°_addObje˘
(
mr
->
hy≥rdoc
, (*Ë
hd
);

72  
hd
;

73 
	}
}

78 
PUBLIC
 
BOOL
 
	$Hy≥rDoc_dñëe
 (
Hy≥rDoc
 * 
hd
)

80 i‡(
hd
) {

81 
	`HT_FREE
 (
hd
);

82  
YES
;

84  
NO
;

85 
	}
}

90 
PRIVATE
 
BOOL
 
	$ˇlcuœã_hôs
 (
RobŸ
 * 
mr
, 
HTAºay
 * 
¨øy
)

92 i‡(
mr
 && 
¨øy
) {

93 
HTLog
 * 
log
 = 
	`HTLog_›í
(
mr
->
hôfûe
, 
YES
, YES);

94 i‡(
log
) {

95 ** 
d©a
 = 
NULL
;

96 
HTP¨ítAnch‹
 * 
™ch‹
 = 
NULL
;

97 
	`HTAºay_s‹t
(
¨øy
, 
HôS‹t
);

98 
™ch‹
 = (
HTP¨ítAnch‹
 *Ë
	`HTAºay_fú°Obje˘
(
¨øy
, 
d©a
);

99 
™ch‹
) {

100 * 
uri
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
™ch‹
);

101 
Hy≥rDoc
 * 
hd
 = (Hy≥rDo¯*Ë
	`HTAnch‹_documít
(
™ch‹
);

102 i‡(
uri
 && 
hd
Ë
	`HTLog_addText
(
log
, "%8d %s\n", hd->
hôs
, uri);

103 
	`HT_FREE
(
uri
);

104 
™ch‹
 = (
HTP¨ítAnch‹
 *Ë
	`HTAºay_√xtObje˘
(
¨øy
, 
d©a
);

107 
	`HTLog_˛o£
(
log
);

108  
YES
;

110  
NO
;

111 
	}
}

113 
PRIVATE
 
	$HôS‹t
 (c⁄° * 
a
, c⁄° * 
b
)

115 
Hy≥rDoc
 * 
Ø
 = 
	`HTAnch‹_documít
(*(
HTP¨ítAnch‹
 **Ë
a
);

116 
Hy≥rDoc
 * 
bb
 = 
	`HTAnch‹_documít
(*(
HTP¨ítAnch‹
 **Ë
b
);

117 i‡(
Ø
 && 
bb
Ë (bb->
hôs
 -áa->hits);

118  
bb
 - 
Ø
;

119 
	}
}

124 
PRIVATE
 
BOOL
 
	$ˇlcuœã_lökRñ©i⁄s
 (
RobŸ
 * 
mr
, 
HTAºay
 * 
¨øy
)

126 i‡(
mr
 && 
¨øy
) {

127 
HTLog
 * 
log
 = 
mr
->
ªlfûe
 ? 
	`HTLog_›í
(mr->ªlfûe, 
YES
, YESË: 
NULL
;

128 ** 
d©a
 = 
NULL
;

129 
HTP¨ítAnch‹
 * 
™ch‹
 = 
NULL
;

130 
™ch‹
 = (
HTP¨ítAnch‹
 *Ë
	`HTAºay_fú°Obje˘
(
¨øy
, 
d©a
);

131 
™ch‹
) {

137 i‡(
mr
->
ªœti⁄
) {

138 
HTLök
 * 
lök
 = 
	`HTAnch‹_födLökTy≥
((
HTAnch‹
 *Ë
™ch‹
, 
mr
->
ªœti⁄
);

139 i‡(
lök
) {

140 
HTP¨ítAnch‹
 * 
de°
 = 
	`HTAnch‹_∑ª¡
(
	`HTLök_de°ö©i⁄
(
lök
));

141 * 
§c_uri
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
™ch‹
);

142 * 
de°_uri
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
de°
);

143 i‡(
§c_uri
 && 
de°_uri
) {

144 #ifde‡
HT_MYSQL


145 i‡(
mr
->
sqŒog
) {

146 
	`HTSQLLog_addLökRñ©i⁄shù
 (
mr
->
sqŒog
,

147 
§c_uri
, 
de°_uri
,

148 
	`HTAtom_«me
(
mr
->
ªœti⁄
),

149 
NULL
);

152 i‡(
log
) {

153 
HTF‹m©
 
f‹m©
 = 
	`HTAnch‹_f‹m©
(
de°
);

154 
	`HTLog_addText
(
log
, "%s %s %s --> %s\n",

155 
	`HTAtom_«me
(
mr
->
ªœti⁄
),

156 
f‹m©
 !
WWW_UNKNOWN
 ?

157 
	`HTAtom_«me
(
f‹m©
) : "<unknown>",

158 
§c_uri
, 
de°_uri
);

162 
	`HT_FREE
(
§c_uri
);

163 
	`HT_FREE
(
de°_uri
);

167 
HTLök
 * 
lök
 = 
	`HTAnch‹_maöLök
((
HTAnch‹
 *Ë
™ch‹
);

168 
HTLi°
 * 
sublöks
 = 
	`HTAnch‹_subLöks
((
HTAnch‹
 *Ë
™ch‹
);

169 * 
§c_uri
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
™ch‹
);

170 
HTLökTy≥
 
lökty≥
;

173 i‡(
lök
 && (
lökty≥
 = 
	`HTLök_ty≥
(link))) {

174 
HTP¨ítAnch‹
 * 
de°
 = 
	`HTAnch‹_∑ª¡
(
	`HTLök_de°ö©i⁄
(
lök
));

175 * 
de°_uri
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
de°
);

176 i‡(
§c_uri
 && 
de°_uri
) {

177 #ifde‡
HT_MYSQL


178 i‡(
mr
->
sqŒog
) {

179 
	`HTSQLLog_addLökRñ©i⁄shù
 (
mr
->
sqŒog
,

180 
§c_uri
, 
de°_uri
,

181 
	`HTAtom_«me
(
lökty≥
),

182 
NULL
);

185 i‡(
log
) {

186 
HTF‹m©
 
f‹m©
 = 
	`HTAnch‹_f‹m©
(
de°
);

187 
	`HTLog_addText
(
log
, "%s %s %s --> %s\n",

188 
	`HTAtom_«me
(
lökty≥
),

189 
f‹m©
 !
WWW_UNKNOWN
 ?

190 
	`HTAtom_«me
(
f‹m©
) : "<unknown>",

191 
§c_uri
, 
de°_uri
);

194 
	`HT_FREE
(
de°_uri
);

198 i‡(
sublöks
) {

199 
HTLök
 * 
¥es
;

200 (
¥es
 = (
HTLök
 *Ë
	`HTLi°_√xtObje˘
(
sublöks
))) {

201 i‡((
lökty≥
 = 
	`HTLök_ty≥
(
¥es
))) {

202 
HTP¨ítAnch‹
 * 
de°
 = 
	`HTAnch‹_∑ª¡
(
	`HTLök_de°ö©i⁄
(
¥es
));

203 * 
de°_uri
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
de°
);

204 i‡(
§c_uri
 && 
de°_uri
) {

205 #ifde‡
HT_MYSQL


206 i‡(
mr
->
sqŒog
) {

207 
	`HTSQLLog_addLökRñ©i⁄shù
 (
mr
->
sqŒog
,

208 
§c_uri
, 
de°_uri
,

209 
	`HTAtom_«me
(
lökty≥
),

210 
NULL
);

213 i‡(
log
) {

214 
HTF‹m©
 
f‹m©
 = 
	`HTAnch‹_f‹m©
(
de°
);

215 
	`HTLog_addText
(
log
, "%s %s %s --> %s\n",

216 
	`HTAtom_«me
(
lökty≥
),

217 
f‹m©
 !
WWW_UNKNOWN
 ?

218 
	`HTAtom_«me
(
f‹m©
) : "<unknown>",

219 
§c_uri
, 
de°_uri
);

221 
	`HT_FREE
(
de°_uri
);

228 
	`HT_FREE
(
§c_uri
);

230 
™ch‹
 = (
HTP¨ítAnch‹
 *Ë
	`HTAºay_√xtObje˘
(
¨øy
, 
d©a
);

232 i‡(
log
Ë
	`HTLog_˛o£
(log);

233  
YES
;

235  
NO
;

236 
	}
}

241 
PRIVATE
 
BOOL
 
	$ˇlcuœã_lm
 (
RobŸ
 * 
mr
, 
HTAºay
 * 
¨øy
)

243 i‡(
mr
 && 
¨øy
) {

244 
HTLog
 * 
log
 = 
	`HTLog_›í
(
mr
->
lmfûe
, 
YES
, YES);

245 i‡(
log
) {

246 ** 
d©a
 = 
NULL
;

247 
HTP¨ítAnch‹
 * 
™ch‹
 = 
NULL
;

248 
	`HTAºay_s‹t
(
¨øy
, 
La°ModifõdS‹t
);

249 
™ch‹
 = (
HTP¨ítAnch‹
 *Ë
	`HTAºay_fú°Obje˘
(
¨øy
, 
d©a
);

250 
™ch‹
) {

251 * 
uri
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
™ch‹
);

252 
time_t
 
lm
 = 
	`HTAnch‹_œ°Modifõd
(
™ch‹
);

253 i‡(
uri
 && 
lm
 > 0)

254 
	`HTLog_addText
(
log
, "%†%s\n", 
	`HTD©eTimeSå
(&
lm
, 
NO
), 
uri
);

255 
	`HT_FREE
(
uri
);

256 
™ch‹
 = (
HTP¨ítAnch‹
 *Ë
	`HTAºay_√xtObje˘
(
¨øy
, 
d©a
);

259 
	`HTLog_˛o£
(
log
);

260  
YES
;

262  
NO
;

263 
	}
}

265 
PRIVATE
 
	$La°ModifõdS‹t
 (c⁄° * 
a
, c⁄° * 
b
)

267 
time_t
 
Ø
 = 
	`HTAnch‹_œ°Modifõd
(*(
HTP¨ítAnch‹
 **Ë
a
);

268 
time_t
 
bb
 = 
	`HTAnch‹_œ°Modifõd
(*(
HTP¨ítAnch‹
 **Ë
b
);

269  
bb
 - 
Ø
;

270 
	}
}

275 
PRIVATE
 
BOOL
 
	$ˇlcuœã_tôÀ
 (
RobŸ
 * 
mr
, 
HTAºay
 * 
¨øy
)

277 i‡(
mr
 && 
¨øy
) {

278 
HTLog
 * 
log
 = 
	`HTLog_›í
(
mr
->
tôÀfûe
, 
YES
, YES);

279 i‡(
log
) {

280 ** 
d©a
 = 
NULL
;

281 
HTP¨ítAnch‹
 * 
™ch‹
 = 
NULL
;

282 
	`HTAºay_s‹t
(
¨øy
, 
TôÀS‹t
);

283 
™ch‹
 = (
HTP¨ítAnch‹
 *Ë
	`HTAºay_fú°Obje˘
(
¨øy
, 
d©a
);

284 
™ch‹
) {

285 * 
uri
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
™ch‹
);

286 c⁄° * 
tôÀ
 = 
	`HTAnch‹_tôÀ
(
™ch‹
);

287 
HTCh¨£t
 
ch¨£t
 = 
	`HTAnch‹_ch¨£t
(
™ch‹
);

288 i‡(
uri
Ë
	`HTLog_addText
(
log
, "%s `%s\' %s\n",

289 
ch¨£t
 ? 
	`HTAtom_«me
(charset) : "<none>",

290 
tôÀ
 ?Åitle : "<none>",

291 
uri
);

292 
	`HT_FREE
(
uri
);

293 
™ch‹
 = (
HTP¨ítAnch‹
 *Ë
	`HTAºay_√xtObje˘
(
¨øy
, 
d©a
);

296 
	`HTLog_˛o£
(
log
);

297  
YES
;

299  
NO
;

300 
	}
}

302 
PRIVATE
 
	$TôÀS‹t
 (c⁄° * 
a
, c⁄° * 
b
)

304 c⁄° * 
Ø
 = 
	`HTAnch‹_tôÀ
(*(
HTP¨ítAnch‹
 **Ë
a
);

305 c⁄° * 
bb
 = 
	`HTAnch‹_tôÀ
(*(
HTP¨ítAnch‹
 **Ë
b
);

306  
	`°rˇ£comp
(
bb
?bb:"", 
Ø
?aa:"");

307 
	}
}

314 
PRIVATE
 
HTLi°
 * 
	$medüty≥_di°ributi⁄
 (
HTAºay
 * 
¨øy
)

316 i‡(
¨øy
) {

317 
HTLi°
 * 
mt
 = 
	`HTLi°_√w
();

318 
MëaDi°
 * 
¥es
 = 
NULL
;

319 ** 
d©a
 = 
NULL
;

320 
HTP¨ítAnch‹
 * 
™ch‹
 = 
NULL
;

321 
™ch‹
 = (
HTP¨ítAnch‹
 *Ë
	`HTAºay_fú°Obje˘
(
¨øy
, 
d©a
);

322 
™ch‹
) {

323 
HTF‹m©
 
f‹m©
 = 
	`HTAnch‹_f‹m©
(
™ch‹
);

324 i‡(
f‹m©
 && f‹m© !
WWW_UNKNOWN
) {

325 
HTLi°
 * 
cur
 = 
mt
;

328 (
¥es
 = (
MëaDi°
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

329 i‡(
¥es
->
«me
 =
f‹m©
) {

330 
¥es
->
hôs
++;

336 i‡(!
¥es
) {

337 i‡((
¥es
 = (
MëaDi°
 *Ë
	`HT_CALLOC
(1, (MëaDi°))Ë=
NULL
)

338 
	`HT_OUTOFMEM
("mediatype_distribution");

339 
¥es
->
«me
 = 
f‹m©
;

340 
¥es
->
hôs
 = 1;

341 
	`HTLi°_addObje˘
(
mt
, 
¥es
);

342 
	`HTLi°_ö£πi⁄S‹t
(
mt
, 
F‹m©S‹t
);

347 
™ch‹
 = (
HTP¨ítAnch‹
 *Ë
	`HTAºay_√xtObje˘
(
¨øy
, 
d©a
);

349  
mt
;

351  
NULL
;

352 
	}
}

359 
PRIVATE
 
HTLi°
 * 
	$ch¨£t_di°ributi⁄
 (
HTAºay
 * 
¨øy
)

361 i‡(
¨øy
) {

362 
HTLi°
 * 
cs
 = 
	`HTLi°_√w
();

363 
MëaDi°
 * 
¥es
 = 
NULL
;

364 ** 
d©a
 = 
NULL
;

365 
HTP¨ítAnch‹
 * 
™ch‹
 = 
NULL
;

366 
™ch‹
 = (
HTP¨ítAnch‹
 *Ë
	`HTAºay_fú°Obje˘
(
¨øy
, 
d©a
);

367 
™ch‹
) {

368 
HTCh¨£t
 
ch¨£t
 = 
	`HTAnch‹_ch¨£t
(
™ch‹
);

369 i‡(
ch¨£t
) {

370 
HTLi°
 * 
cur
 = 
cs
;

373 (
¥es
 = (
MëaDi°
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

374 i‡(
¥es
->
«me
 =
ch¨£t
) {

375 
¥es
->
hôs
++;

381 i‡(!
¥es
) {

382 i‡((
¥es
 = (
MëaDi°
 *Ë
	`HT_CALLOC
(1, (MëaDi°))Ë=
NULL
)

383 
	`HT_OUTOFMEM
("charset_distribution");

384 
¥es
->
«me
 = 
ch¨£t
;

385 
¥es
->
hôs
 = 1;

386 
	`HTLi°_addObje˘
(
cs
, 
¥es
);

387 
	`HTLi°_ö£πi⁄S‹t
(
cs
, 
F‹m©S‹t
);

392 
™ch‹
 = (
HTP¨ítAnch‹
 *Ë
	`HTAºay_√xtObje˘
(
¨øy
, 
d©a
);

394  
cs
;

396  
NULL
;

397 
	}
}

399 
PRIVATE
 
	$F‹m©S‹t
 (c⁄° * 
a
, c⁄° * 
b
)

401 
MëaDi°
 * 
Ø
 = (MëaDi° *Ë
a
;

402 
MëaDi°
 * 
bb
 = (MëaDi° *Ë
b
;

403  
	`°rcmp
(
	`HTAtom_«me
(
bb
->
«me
), HTAtom_«me(
Ø
->name));

404 
	}
}

406 
PRIVATE
 
BOOL
 
	$log_mëa_di°ributi⁄
 (c⁄° * 
logfûe
, 
HTLi°
 * 
di°ributi⁄
)

408 i‡(
logfûe
 && 
di°ributi⁄
) {

409 
HTLog
 * 
log
 = 
	`HTLog_›í
(
logfûe
, 
YES
, YES);

410 i‡(
log
) {

411 
HTLi°
 * 
cur
 = 
di°ributi⁄
;

412 
MëaDi°
 * 
¥es
;

413 (
¥es
 = (
MëaDi°
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

414 i‡(
¥es
->
«me
) {

415 
	`HTLog_addText
(
log
, "%8d %s\n", 
¥es
->
hôs
, 
	`HTAtom_«me
’ªs->
«me
));

418 
	`HTLog_˛o£
(
log
);

421  
NO
;

422 
	}
}

424 
PRIVATE
 
BOOL
 
	$dñëe_mëa_di°ributi⁄
 (
HTLi°
 * 
di°ributi⁄
)

426 i‡(
di°ributi⁄
) {

427 
HTLi°
 * 
cur
 = 
di°ributi⁄
;

428 
MëaDi°
 * 
¥es
;

429 (
¥es
 = (
MëaDi°
 *Ë
	`HTLi°_√xtObje˘
(
cur
)))

430 
	`HT_FREE
(
¥es
);

431 
	`HTLi°_dñëe
(
di°ributi⁄
);

432  
YES
;

434  
NO
;

435 
	}
}

442 
PRIVATE
 
BOOL
 
	$ˇlcuœã_°©i°ics
 (
RobŸ
 * 
mr
)

444 
tŸÆ_docs
 = 
mr
->
gë_docs
 + mr->
hód_docs
 + mr->
Ÿhî_docs
;

445 i‡(!
mr
Ë 
NO
;

448 i‡(
mr
->
time
 > 0) {

449 
ms_t
 
t
 = 
	`HTGëTimeInMûlis
(Ë- 
mr
->
time
;

450 i‡(
t
 > 0) {

451 
lﬂdÁ˘‹
 = (
mr
->
gë_byãs
 / (
t
 * 0.001));

452 
ªq¥£c
 = (
tŸÆ_docs
 / (
t
 * 0.001));

453 
£cs
 = 
t
 / 1000.0;

454 
byãs
[50];

455 i‡(
	`SHOW_REAL_QUIET
(
mr
))

456 
	`HTPröt
("\nAccessed %ld documents in %.2f seconds (%.2fÑequestsÖr sec)\n",

457 
tŸÆ_docs
, 
£cs
, 
ªq¥£c
);

459 
	`HTNumToSå
(
mr
->
gë_byãs
, 
byãs
, 50);

460 i‡(
	`SHOW_REAL_QUIET
(
mr
))

461 
	`HTPröt
("\tDidá GET on %ld document(s)ánd downloaded %s bytes of document bodies (%2.1f bytes/sec)\n",

462 
mr
->
gë_docs
, 
byãs
, 
lﬂdÁ˘‹
);

464 
	`HTNumToSå
(
mr
->
hód_byãs
, 
byãs
, 50);

465 i‡(
	`SHOW_REAL_QUIET
(
mr
))

466 
	`HTPröt
("\tDidá HEAD on %ld document(s) witháÅotal of %s bytes\n",

467 
mr
->
hód_docs
, 
byãs
);

472 i‡(
tŸÆ_docs
 > 1) {

473 
HTAºay
 * 
¨øy
 = 
	`HTAnch‹_gëAºay
(
tŸÆ_docs
);

474 i‡(
¨øy
) {

477 i‡(
mr
->
Êags
 & 
MR_DISTRIBUTIONS
) {

478 i‡(
	`SHOW_REAL_QUIET
(
mr
)Ë
	`HTPröt
("\nDistributions:\n");

482 i‡(
mr
->
hôfûe
) {

483 i‡(
	`SHOW_REAL_QUIET
(
mr
))

484 
	`HTPröt
("\tLogged hit count distribution in file `%s\'\n",

485 
mr
->
hôfûe
);

486 
	`ˇlcuœã_hôs
(
mr
, 
¨øy
);

490 #ifde‡
HT_MYSQL


491 i‡(
mr
->
ªlfûe
 || mr->
sqŒog
) {

493 i‡(
mr
->
ªlfûe
) {

495 i‡(
mr
->
ªlfûe
 && 
	`SHOW_REAL_QUIET
(mr))

496 
	`HTPröt
("\tLoggedÜinkÑelationship distribution in file `%s\'\n",

497 
mr
->
ªlfûe
);

498 
	`ˇlcuœã_lökRñ©i⁄s
(
mr
, 
¨øy
);

502 i‡(
mr
->
lmfûe
) {

503 i‡(
	`SHOW_REAL_QUIET
(
mr
))

504 
	`HTPröt
("\tLoggedÜast modified distribution in file `%s\'\n",

505 
mr
->
lmfûe
);

506 
	`ˇlcuœã_lm
(
mr
, 
¨øy
);

510 i‡(
mr
->
tôÀfûe
) {

511 i‡(
	`SHOW_REAL_QUIET
(
mr
))

512 
	`HTPröt
("\tLoggedÅitle distribution in file `%s\'\n",

513 
mr
->
tôÀfûe
);

514 
	`ˇlcuœã_tôÀ
(
mr
, 
¨øy
);

518 i‡(
mr
->
mtfûe
) {

519 
HTLi°
 * 
mtdi°
 = 
	`medüty≥_di°ributi⁄
(
¨øy
);

520 i‡(
mtdi°
) {

521 i‡(
	`SHOW_REAL_QUIET
(
mr
))

522 
	`HTPröt
("\tLogged mediaÅype distribution in file `%s\'\n",

523 
mr
->
mtfûe
);

524 
	`log_mëa_di°ributi⁄
(
mr
->
mtfûe
, 
mtdi°
);

525 
	`dñëe_mëa_di°ributi⁄
(
mtdi°
);

530 i‡(
mr
->
ch¨£tfûe
) {

531 
HTLi°
 * 
ch¨£tdi°
 = 
	`ch¨£t_di°ributi⁄
(
¨øy
);

532 i‡(
ch¨£tdi°
) {

533 i‡(
	`SHOW_REAL_QUIET
(
mr
))

534 
	`HTPröt
("\tLogged charset distribution in file `%s\'\n",

535 
mr
->
ch¨£tfûe
);

536 
	`log_mëa_di°ributi⁄
(
mr
->
ch¨£tfûe
, 
ch¨£tdi°
);

537 
	`dñëe_mëa_di°ributi⁄
(
ch¨£tdi°
);

545 
	`HTAºay_dñëe
(
¨øy
);

548  
YES
;

549 
	}
}

551 
PRIVATE
 
HTP¨ítAnch‹
 *

552 
	$gë_œ°_∑ª¡
(
HTP¨ítAnch‹
 *
™ch‹
)

554 
HTAnch‹
 *
™c
;

555 
HTLi°
 *
sour˚s
 = 
™ch‹
->sources;

557 (
™c
 = (
HTAnch‹
 *Ë
	`HTLi°_√xtObje˘
(
sour˚s
)Ë!
NULL
)

559 
HTP¨ítAnch‹
 *
∑nch‹
 = 
	`HTAnch‹_∑ª¡
(
™c
);

560  
∑nch‹
;

562  
NULL
;

563 
	}
}

565 
PRIVATE
 
HTLök
 *

566 
	$HTLök_föd_ty≥
(
HTAnch‹
 * 
§c
, HTAnch‹ * 
de°
, *
lökty≥
)

568 if(
§c
 && 
de°
 && 
lökty≥
)

570 
HTLök
 * 
lök
 = 
	`HTAnch‹_maöLök
(
§c
);

571 
HTLi°
 * 
sublöks
 = 
	`HTAnch‹_subLöks
(
§c
);

572 
HTLökTy≥
 
ty≥
 = (HTLökTy≥)
	`HTAtom_ˇ£F‹
(
lökty≥
);

573 
HTAnch‹
 *
sde°
 = 
	`HTLök_de°ö©i⁄
(
lök
);

574 i‡(
lök
 && 
sde°
 =
de°
 && 
ty≥
 =
	`HTLök_ty≥
(link))

575  
lök
;

576 i‡(
sublöks
) {

577 (
lök
 = (
HTLök
 *Ë
	`HTLi°_√xtObje˘
 (
sublöks
))) {

578 
sde°
 = 
	`HTLök_de°ö©i⁄
(
lök
);

579 i‡(
sde°
 =
de°
 && 
	`HTLök_ty≥
(
lök
Ë=
ty≥
)

580  
lök
;

585  
NULL
;

586 
	}
}

588 
PRIVATE
 

589 
	$upd©e_öcomög_löks
(
HTP¨ítAnch‹
 *
™ch‹
, HTP¨ítAnch‹ *
«nch‹
)

591 if(
™ch‹
 && 
«nch‹
) {

592 
HTAnch‹
 *
™c
;

593 
HTLi°
 *
sour˚s
 = 
™ch‹
->sources;

594 (
™c
 = (
HTAnch‹
 *Ë
	`HTLi°_√xtObje˘
(
sour˚s
)Ë!
NULL
) {

595 
HTP¨ítAnch‹
 *
∑nch‹
 = 
	`HTAnch‹_∑ª¡
(
™c
);

596 if((
	`HTLök_föd
((
HTAnch‹
 *)
∑nch‹
,(HTAnch‹ *)
™ch‹
)) &&

597 (!
	`HTLök_föd_ty≥
((
HTAnch‹
 *)
∑nch‹
,

598 (
HTAnch‹
 *)
«nch‹
,"redirection"))) {

599 
	`HTLök_add
((
HTAnch‹
 *)
∑nch‹
,(HTAnch‹ *)
«nch‹
,

600 (
HTLökTy≥
Ë
	`HTAtom_ˇ£F‹
("redirection"),

601 
METHOD_HEAD
);

605 
	}
}

607 
PRIVATE
 

608 
	$upd©e_hy≥rdoc
(
Hy≥rDoc
 *
hd
,
HTReque°
 *
ªque°
)

610 if(
hd
 && 
ªque°
) {

611 
HTP¨ítAnch‹
 *
™ch‹
 = 
hd
->anchor;

612 
HTP¨ítAnch‹
 *
«nch‹
 = 
	`HTReque°_™ch‹
(
ªque°
);

613 
HTP¨ítAnch‹
 *
∑ª¡
 = 
	`HTReque°_∑ª¡
(
ªque°
);

614 
Hy≥rDoc
 *
nhd
 = 
	`HTAnch‹_documít
(
«nch‹
);

616 *
tô
 = (*Ë
	`HTAnch‹_tôÀ
(
«nch‹
);

618 if(
nhd
 && 
tô
)

619 
	`SåAŒocC›y
(
nhd
->
tôÀ
,
tô
);

621 i‡(
™ch‹
 !
«nch‹
) {

622 if(
nhd
) {

623 if(
nhd
 !
hd
) {

624 
hd
->
code
 = 
REDIR_CODE
;

626 
	`HTAnch‹_£tDocumít
(
™ch‹
,(*)
nhd
);

628 if(!
	`HTLök_föd_ty≥
((
HTAnch‹
 *)
∑ª¡
,

629 (
HTAnch‹
 *)
«nch‹
,"redirection")) {

630 
	`HTLök_add
((
HTAnch‹
 *)
∑ª¡
,(HTAnch‹ *)
«nch‹
,

631 (
HTLökTy≥
Ë
	`HTAtom_ˇ£F‹
("redirection"),

632 
METHOD_HEAD
);

636 
hd
->
™ch‹
 = 
«nch‹
;

637 
	`HTAnch‹_£tDocumít
(
«nch‹
,(*Ë
hd
);

639 if(!
	`HTLök_föd_ty≥
((
HTAnch‹
 *)
∑ª¡
,(HTAnch‹ *)
«nch‹
,

641 
	`HTLök_add
((
HTAnch‹
 *)
∑ª¡
,(HTAnch‹ *)
«nch‹
,

642 (
HTLökTy≥
Ë
	`HTAtom_ˇ£F‹
("redirection") ,

643 
METHOD_HEAD
);

646 
	`upd©e_öcomög_löks
(
™ch‹
,
«nch‹
);

649 
	}
}

651 
PRIVATE
 

652 
	$£t_îr‹_°©e_hy≥rdoc
(
Hy≥rDoc
 * 
hd
, 
HTReque°
 *
ªque°
)

654 
HTLi°
 * 
cur
 = 
	`HTReque°_îr‹
(
ªque°
);

655 
HTEº‹
 *
¥es
;

656 
Fögî
 * 
fögî
 = (Fögî *Ë
	`HTReque°_c⁄ãxt
(
ªque°
);

657 
RobŸ
 * 
mr
 = 
fögî
->
robŸ
;

659 (
¥es
 = (
HTEº‹
 *Ë
	`HTLi°_√xtObje˘
(
cur
)Ë!
NULL
) {

660 
code
 =
HTEº‹s
[
	`HTEº‹_ödex
(
¥es
)].code;

662 
hd
->
code
 = code;

664 if((
mr
->
Êags
 & 
MR_REDIR
Ë&& 
code
 >= 200 && code < 300 )

665 
	`upd©e_hy≥rdoc
(
hd
,
ªque°
);

667 
	}
}

670 
PRIVATE
 

671 
	$ã°_f‹_bœnk_•a˚s
(*
uri
)

673 *
±r
 = 
uri
;

674 ;*
±r
!='\0';ptr++)

675 if(*
±r
 == ' ')

678 
	}
}

684 
PUBLIC
 
RobŸ
 * 
	$RobŸ_√w
 ()

686 
RobŸ
 * 
me
;

687 i‡((
me
 = (
RobŸ
 *Ë
	`HT_CALLOC
(1, (RobŸ))Ë=
NULL
)

688 
	`HT_OUTOFMEM
("Robot_new");

689 
me
->
hy≥rdoc
 = 
	`HTLi°_√w
();

690 
me
->
hãxt
 = 
	`HTLi°_√w
();

691 
me
->
timî
 = 
DEFAULT_TIMEOUT
*
MILLIES
;

692 
me
->
waôs
 = 0;

693 
me
->
cwd
 = 
	`HTGëCuºítDúe˘‹yURL
();

694 
me
->
ouçut
 = 
OUTPUT
;

695 
me
->
˙t
 = 0;

696 
me
->
ndoc
 = -1;

697 
me
->
fögîs
 = 
	`HTLi°_√w
();

700 
me
->
queue
 = 
	`HTQueue_√w
();

701 
me
->
cq
 = 0;

702 
me
->
fuæ
 = 
NULL
;

704  
me
;

705 
	}
}

710 
PRIVATE
 
BOOL
 
	$RobŸ_dñëe
 (
RobŸ
 * 
mr
)

712 i‡(
mr
) {

713 
	`HTLi°_dñëe
(
mr
->
fögîs
);

716 
	`ˇlcuœã_°©i°ics
(
mr
);

718 i‡(
mr
->
hy≥rdoc
) {

719 
HTLi°
 * 
cur
 = 
mr
->
hy≥rdoc
;

720 
Hy≥rDoc
 * 
¥es
;

721 (
¥es
 = (
Hy≥rDoc
 *Ë
	`HTLi°_√xtObje˘
(
cur
)))

722 
	`Hy≥rDoc_dñëe
(
¥es
);

723 
	`HTLi°_dñëe
(
mr
->
hy≥rdoc
);

725 i‡(
mr
->
hãxt
) {

726 
HTLi°
 * 
cur
 = 
mr
->
hãxt
;

727 
HText
 * 
¥es
;

728 (
¥es
 = (
HText
 *Ë
	`HTLi°_√xtObje˘
(
cur
)))

729 
	`RHText_dñëe
(
¥es
);

730 
	`HTLi°_dñëe
(
mr
->
hãxt
);

734 i‡(
mr
->
Êags
 & 
MR_LOGGING
) {

735 i‡(
	`SHOW_REAL_QUIET
(
mr
)Ë
	`HTPröt
("\nRaw Log files:\n");

738 i‡(
mr
->
log
) {

739 i‡(
	`SHOW_REAL_QUIET
(
mr
))

740 
	`HTPröt
("\tLogged %5dÉntries in generalÜog file `%s\'\n",

741 
	`HTLog_ac˚ssCou¡
(
mr
->
log
), mr->
logfûe
);

742 
	`HTLog_˛o£
(
mr
->
log
);

744 i‡(
mr
->
ªf
) {

745 i‡(
	`SHOW_REAL_QUIET
(
mr
))

746 
	`HTPröt
("\tLogged %5dÉntries inÑefererÜog file `%s\'\n",

747 
	`HTLog_ac˚ssCou¡
(
mr
->
ªf
), mr->
ªffûe
);

748 
	`HTLog_˛o£
(
mr
->
ªf
);

750 i‡(
mr
->
ªje˘
) {

751 i‡(
	`SHOW_REAL_QUIET
(
mr
))

752 
	`HTPröt
("\tLogged %5dÉntries inÑejectedÜog file `%s\'\n",

753 
	`HTLog_ac˚ssCou¡
(
mr
->
ªje˘
), mr->
ªje˘fûe
);

754 
	`HTLog_˛o£
(
mr
->
ªje˘
);

756 i‡(
mr
->
nŸfound
) {

757 i‡(
	`SHOW_REAL_QUIET
(
mr
))

758 
	`HTPröt
("\tLogged %5dÉntries inÇot foundÜog file `%s\'\n",

759 
	`HTLog_ac˚ssCou¡
(
mr
->
nŸfound
), mr->
nŸfoundfûe
);

760 
	`HTLog_˛o£
(
mr
->
nŸfound
);

762 i‡(
mr
->
c⁄√g
) {

763 i‡(
	`SHOW_REAL_QUIET
(
mr
))

764 
	`HTPröt
("\tLogged %5dÉntries in contentÇegotiationÜog file `%s\'\n",

765 
	`HTLog_ac˚ssCou¡
(
mr
->
c⁄√g
), mr->
c⁄√gfûe
);

766 
	`HTLog_˛o£
(
mr
->
c⁄√g
);

768 i‡(
mr
->
nﬂ…èg
) {

769 i‡(
	`SHOW_REAL_QUIET
(
mr
))

770 
	`HTPröt
("\tLogged %5dÉntries in missingáltÅagÜog file `%s\'\n",

771 
	`HTLog_ac˚ssCou¡
(
mr
->
nﬂ…èg
), mr->
nﬂ…ègfûe
);

772 
	`HTLog_˛o£
(
mr
->
nﬂ…èg
);

775 i‡(
mr
->
ouçut
 && mr->ouçuà!
STDOUT
Ë
	`f˛o£
(mr->output);

777 i‡(
mr
->
Êags
 & 
MR_TIME
) {

778 
time_t
 
loˇl
 = 
	`time
(
NULL
);

779 i‡(
	`SHOW_REAL_QUIET
(
mr
))

780 
	`HTPröt
("\nRobŸÅîmö©ed %s\n", 
	`HTD©eTimeSå
(&
loˇl
, 
YES
));

784 
	`HT_FREE
(
mr
->
cdïth
);

785 
	`HT_FREE
(
mr
->
fuæ
);

787 #ifde‡
HT_POSIX_REGEX


788 i‡(
mr
->
ö˛ude
) {

789 
	`ªg‰ì
(
mr
->
ö˛ude
);

790 
	`HT_FREE
(
mr
->
ö˛ude
);

792 i‡(
mr
->
ex˛ude
) {

793 
	`ªg‰ì
(
mr
->
ex˛ude
);

794 
	`HT_FREE
(
mr
->
ex˛ude
);

796 i‡(
mr
->
exc_robŸ
) {

797 
	`ªg‰ì
(
mr
->
exc_robŸ
);

798 
	`HT_FREE
(
mr
->
exc_robŸ
);

800 i‡(
mr
->
check
) {

801 
	`ªg‰ì
(
mr
->
check
);

802 
	`HT_FREE
(
mr
->
check
);

806 #ifde‡
HT_MYSQL


807 i‡(
mr
->
sqŒog
) {

808 
	`HTSQLLog_˛o£
(
mr
->
sqŒog
);

809 
mr
->
sqŒog
 = 
NULL
;

813 i‡(
mr
->
queue
Ë
	`HTQueue_dñëe
(mr->queue);

814 
	`HT_FREE
(
mr
->
cwd
);

815 
	`HT_FREE
(
mr
->
¥efix
);

816 
	`HT_FREE
(
mr
->
img_¥efix
);

817 
	`HT_FREE
(
mr
);

818  
YES
;

820  
NO
;

821 
	}
}

826 
PUBLIC
 
Fögî
 * 
	$Fögî_√w
 (
RobŸ
 * 
robŸ
, 
HTP¨ítAnch‹
 * 
de°
, 
HTMëhod
 
mëhod
)

828 
Fögî
 * 
me
;

829 
HTReque°
 * 
ªque°
 = 
	`HTReque°_√w
();

830 i‡((
me
 = (
Fögî
 *Ë
	`HT_CALLOC
(1, (Fögî))Ë=
NULL
)

831 
	`HT_OUTOFMEM
("Finger_new");

832 
me
->
robŸ
 =Ñobot;

833 
me
->
ªque°
 =Ñequest;

834 
me
->
de°
 = dest;

835 
	`HTLi°_addObje˘
(
robŸ
->
fögîs
, (*)
me
);

838 
	`HTReque°_£tC⁄ãxt
 (
ªque°
, 
me
);

841 i‡(
robŸ
->
Êags
 & 
MR_PREEMPTIVE
)

842 
	`HTReque°_£tPªem±ive
(
ªque°
, 
YES
);

843 i‡(
robŸ
->
Êags
 & 
MR_VALIDATE
)

844 
	`HTReque°_£tRñﬂdMode
(
ªque°
, 
HT_CACHE_VALIDATE
);

845 i‡(
robŸ
->
Êags
 & 
MR_END_VALIDATE
)

846 
	`HTReque°_£tRñﬂdMode
(
ªque°
, 
HT_CACHE_END_VALIDATE
);

849 
	`HTReque°_addRqHd
(
ªque°
, 
HT_C_HOST
);

852 
	`HTReque°_£tMëhod
(
ªque°
, 
mëhod
);

853 
robŸ
->
˙t
++;

854  
me
;

855 
	}
}

857 
PRIVATE
 
	$Fögî_dñëe
 (
Fögî
 * 
me
)

859 
	`HTLi°_ªmoveObje˘
(
me
->
robŸ
->
fögîs
, (*)me);

862 
me
->
robŸ
->
˙t
--;

865 i‡(!(
me
->
robŸ
->
Êags
 & 
MR_KEEP_META
))

866 
	`HTAnch‹_˛órHódî
(
	`HTReque°_™ch‹
(
me
->
ªque°
));

871 i‡(
me
->
ªque°
) {

872 i‡(
me
->
robŸ
->
˙t
 =1Ë
	`HTReque°_f‹˚Flush
(me->
ªque°
);

873 
	`HTReque°_dñëe
(
me
->
ªque°
);

874 
me
->
ªque°
 = 
NULL
;

880 
	`HT_FREE
(
me
);

881  
YES
;

882 
	}
}

884 
PRIVATE
 
BOOL
 
	$check_c⁄°øöts
(
RobŸ
 * 
mr
, *
¥efix
, *
uri
)

886 
BOOL
 
m©ch
 = 
YES
;

888 i‡(
¥efix
) {

889 
m©ch
 = 
	`HTSåM©ch
(
¥efix
, 
uri
Ë? 
YES
 : 
NO
;

892 #ifde‡
HT_POSIX_REGEX


894 i‡(
m©ch
 && 
mr
->
ö˛ude
) {

895 
m©ch
 = 
	`ªgexec
(
mr
->
ö˛ude
, 
uri
, 0, 
NULL
, 0Ë? 
NO
 : 
YES
;

897 i‡(
m©ch
 && 
mr
->
exc_robŸ
) {

898 
m©ch
 = 
	`ªgexec
(
mr
->
exc_robŸ
, 
uri
, 0, 
NULL
, 0Ë? 
YES
 : 
NO
;

900 i‡(
m©ch
 && 
mr
->
ex˛ude
) {

901 
m©ch
 = 
	`ªgexec
(
mr
->
ex˛ude
, 
uri
, 0, 
NULL
, 0Ë? 
YES
 : 
NO
;

905  
m©ch
;

906 
	}
}

912 
PUBLIC
 
	$CÀ™up
 (
RobŸ
 * 
me
, 
°©us
)

919 
	`RobŸ_dñëe
(
me
);

924 
	`HTProfûe_dñëe
();

926 #ifde‡
HT_MEMLOG


927 
	`HTMemLog_˛o£
();

930 #ifde‡
VMS


931 
	`exô
(
°©us
 ? status : 1);

933 
	`exô
(
°©us
 ? status : 0);

935 
	}
}

937 #ifde‡
HT_POSIX_REGEX


938 
PRIVATE
 * 
	$gë_ªgîr‹
 (
îrcode
, 
ªgex_t
 * 
compûed
)

940 
size_t
 
Àngth
 = 
	`ªgîr‹
 (
îrcode
, 
compûed
, 
NULL
, 0);

941 * 
°r
 = 
NULL
;

942 i‡((
°r
 = (*Ë
	`HT_MALLOC
(
Àngth
+1)Ë=
NULL
)

943 
	`HT_OUTOFMEM
("get_regerror");

944 (Ë
	`ªgîr‹
 (
îrcode
, 
compûed
, 
°r
, 
Àngth
);

945  
°r
;

946 
	}
}

948 
PUBLIC
 
ªgex_t
 * 
	$gë_ªgty≥
 (
RobŸ
 * 
mr
, c⁄° * 
ªgex_°r
, 
cÊags
)

950 
ªgex_t
 * 
ªgex
 = 
NULL
;

951 i‡(
ªgex_°r
 && *regex_str) {

952 
°©us
;

953 i‡((
ªgex
 = (
ªgex_t
 *Ë
	`HT_CALLOC
(1, ‘egex_t))Ë=
NULL
)

954 
	`HT_OUTOFMEM
("get_regtype");

955 i‡((
°©us
 = 
	`ªgcomp
(
ªgex
, 
ªgex_°r
, 
cÊags
))) {

956 * 
îr_msg
 = 
	`gë_ªgîr‹
(
°©us
, 
ªgex
);

957 i‡(
	`SHOW_REAL_QUIET
(
mr
))

958 
	`HTPröt
("Reguœ∏ex¥essi⁄Éº‹: %s\n", 
îr_msg
);

959 
	`HT_FREE
(
îr_msg
);

960 
	`CÀ™up
(
mr
, -1);

963  
ªgex
;

964 
	}
}

967 
PUBLIC
 
	$Vîsi⁄Info
 ()

969 
	`HTPröt
("\nW3C OpenSource Software");

970 
	`HTPröt
("\n-----------------------\n\n");

971 
	`HTPröt
("\tWebbŸ vîsi⁄ %s\n", 
APP_VERSION
);

972 
	`HTPröt
("\tusögÅhêW3CÜibwwwÜibøry vîsi⁄ %s.\n\n",
	`HTLib_vîsi⁄
());

973 
	`HTPröt
("\tSì \"%s\" f‹ hñp\n", 
COMMAND_LINE
);

974 
	`HTPröt
("\tSee \"http://www.w3.org/Robot/User/\" for user information\n");

975 
	`HTPröt
("\tSee \"http://www.w3.org/Robot/\" for general information\n\n");

976 
	`HTPröt
("\tPlease send feedbackÅoÅhe <www-lib@w3.org> mailingÜist,\n");

977 
	`HTPröt
("\tsee \"http://www.w3.org/Library/#Forums\" for details\n\n");

978 
	}
}

984 
PUBLIC
 
	$ªdúe˘i⁄_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

985 * 
∑øm
, 
°©us
)

987 
Fögî
 * 
fögî
 = (Fögî *Ë
	`HTReque°_c⁄ãxt
(
ªque°
);

988 
RobŸ
 * 
mr
 = 
fögî
->
robŸ
;

989 
HTP¨ítAnch‹
 * 
me
 = 
	`HTReque°_™ch‹
(
ªque°
);

990 
HTAnch‹
 * 
ªdúe˘i⁄
 = 
	`HTRe•⁄£_ªdúe˘i⁄
(
ª•⁄£
);

991 
HTP¨ítAnch‹
 * 
ªdúe˘i⁄_∑ª¡
 = 
	`HTAnch‹_∑ª¡
(
ªdúe˘i⁄
);

992 
Hy≥rDoc
 * 
ªdúe˘i⁄_hd
 = 
	`HTAnch‹_documít
(
ªdúe˘i⁄_∑ª¡
);

993 * 
uri
 = 
NULL
;

994 * 
ªdúe˘i⁄_∑ª¡_addr
 = 
NULL
;

995 
BOOL
 
m©ch
 = 
YES
;

996 
BOOL
 
check
 = 
NO
;

999 i‡(!
ªdúe˘i⁄
Ë 
HT_OK
;

1002 
uri
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
me
);

1003 
ªdúe˘i⁄_∑ª¡_addr
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
ªdúe˘i⁄_∑ª¡
);

1004 i‡(
	`SHOW_QUIET
(
mr
))

1005 
	`HTPröt
("Robot....... CheckingÑedirecting from `%s\'Åo `%s\'\n",

1006 
uri
, 
ªdúe˘i⁄_∑ª¡_addr
);

1009 #ifde‡
HT_MYSQL


1010 i‡(
mr
->
sqŒog
 && 
ªdúe˘i⁄_∑ª¡_addr
)

1011 
	`HTSQLLog_addLökRñ©i⁄shù
(
mr
->
sqŒog
, 
ªdúe˘i⁄_∑ª¡_addr
,

1012 
uri
, "ªdúe˘i⁄", 
NULL
);

1016 
m©ch
 = 
	`check_c⁄°øöts
(
mr
,mr->
¥efix
, 
ªdúe˘i⁄_∑ª¡_addr
);

1018 #ifde‡
HT_POSIX_REGEX


1020 i‡(
m©ch
 && 
mr
->
check
) {

1021 
check
 = 
	`ªgexec
(
mr
->check, 
uri
, 0, 
NULL
, 0Ë? 
NO
 : 
YES
;

1029 i‡(
m©ch
) {

1030 i‡((
ªdúe˘i⁄_hd
 = 
	`HTAnch‹_documít
(
ªdúe˘i⁄_∑ª¡
)Ë!
NULL
) {

1031 i‡(
	`SHOW_QUIET
(
mr
)Ë
	`HTPröt
("............ Already checked\n");

1032 
ªdúe˘i⁄_hd
->
hôs
++;

1033 
	`HT_FREE
(
ªdúe˘i⁄_∑ª¡_addr
);

1034 
	`HT_FREE
(
uri
);

1035  
HT_OK
;

1039 i‡(
mr
->
ªdú_code
==0 || mr->ªdú_code==
°©us
) {

1040 
Hy≥rDoc
 * 
me_hd
 = 
	`HTAnch‹_documít
(
me
);

1041 
Hy≥rDoc
 *
nhd
 = 
	`Hy≥rDoc_√w
(
mr
, 
ªdúe˘i⁄_∑ª¡
, 
me_hd
->
dïth
);

1043 if(
mr
->
Êags
 & 
MR_BFS
) {

1044 
nhd
->
mëhod
 = 
METHOD_HEAD
;

1045 
	`HTQueue_≠≥nd
(
mr
->
queue
, (*Ë
nhd
);

1046 (
mr
->
cq
)++;

1049 i‡(
check
) {

1050 i‡(
	`SHOW_QUIET
(
mr
)Ë
	`HTPröt
("CheckingÑedirection using HEAD\n");

1051 
	`HTReque°_£tMëhod
(
ªque°
, 
METHOD_HEAD
);

1053 
	`HT_FREE
(
ªdúe˘i⁄_∑ª¡_addr
);

1054 
	`HT_FREE
(
uri
);

1055  
	`HTRedúe˘Fûãr
(
ªque°
, 
ª•⁄£
, 
∑øm
, 
°©us
);

1058 i‡(
	`SHOW_QUIET
(
mr
)Ë
	`HTPröt
("............ doesÇot fulfill constraints\n");

1059 #ifde‡
HT_MYSQL


1060 i‡(
mr
->
ªje˘
 || mr->
sqŒog
)

1062 i‡(
mr
->
ªje˘
)

1065 i‡(
mr
->
ªje˘
 && 
ªdúe˘i⁄_∑ª¡_addr
)

1066 
	`HTLog_addText
(
mr
->
ªje˘
, "%†--> %s\n", 
ªdúe˘i⁄_∑ª¡_addr
, 
uri
);

1071 
	`HT_FREE
(
ªdúe˘i⁄_∑ª¡_addr
);

1072 
	`HT_FREE
(
uri
);

1073  
HT_OK
;

1074 
	}
}

1081 
PUBLIC
 
	$ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

1082 * 
∑øm
, 
°©us
)

1084 
Fögî
 * 
fögî
 = (Fögî *Ë
	`HTReque°_c⁄ãxt
(
ªque°
);

1085 
RobŸ
 * 
mr
 = 
fögî
->
robŸ
;

1086 i‡(
	`SHOW_QUIET
(
mr
)Ë
	`HTPröt
("RobŸ....... d⁄êwôh %s\n", 
	`HTAnch‹_physiˇl
(
fögî
->
de°
));

1088 #ifde‡
HT_MYSQL


1089 i‡(
mr
->
sqŒog
Ë
	`HTSQLLog_addE¡ry
(mr->sqŒog, 
ªque°
, 
°©us
);

1093 i‡(
mr
->
c⁄√g
) {

1094 
HTAssocLi°
 * 
cur
 = 
	`HTRe•⁄£_v¨ü¡
(
ª•⁄£
);

1095 i‡(
cur
) {

1096 
BOOL
 
fú°
 = 
YES
;

1097 
HTChunk
 * 
buf„r
 = 
	`HTChunk_√w
(128);

1098 * 
uri
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
fögî
->
de°
);

1099 
HTAssoc
 * 
¥es
;

1100 
	`HTChunk_puts
(
buf„r
, 
uri
);

1101 (
¥es
 = (
HTAssoc
 *Ë
	`HTAssocLi°_√xtObje˘
(
cur
))) {

1102 * 
vÆue
 = 
	`HTAssoc_vÆue
(
¥es
);

1103 i‡(
fú°
) {

1104 
	`HTChunk_puts
(
buf„r
, "\t(");

1105 
fú°
 = 
NO
;

1107 
	`HTChunk_puts
(
buf„r
, ", ");

1110 
	`HTChunk_puts
(
buf„r
, 
	`HTAssoc_«me
(
¥es
));

1113 i‡(
vÆue
 && *value) {

1114 
	`HTChunk_puts
(
buf„r
, "=");

1115 
	`HTChunk_puts
(
buf„r
, 
vÆue
);

1118 i‡(!
fú°
Ë
	`HTChunk_puts
(
buf„r
, ")");

1119 
	`HTLog_addLöe
(
mr
->
c⁄√g
, 
	`HTChunk_d©a
(
buf„r
));

1120 
	`HTChunk_dñëe
(
buf„r
);

1121 
	`HT_FREE
(
uri
);

1126 i‡(
	`HTReque°_mëhod
(
ªque°
Ë=
METHOD_GET
) {

1127 
Àngth
 = 
	`HTAnch‹_Àngth
(
	`HTReque°_™ch‹
(
ªque°
));

1128 i‡(
Àngth
 > 0Ë
mr
->
gë_byãs
 +=Üength;

1129 
mr
->
gë_docs
++;

1130 } i‡(
	`HTReque°_mëhod
(
ªque°
Ë=
METHOD_HEAD
) {

1131 
Àngth
 = 
	`HTAnch‹_Àngth
(
	`HTReque°_™ch‹
(
ªque°
));

1132 i‡(
Àngth
 > 0Ë
mr
->
hód_byãs
 +=Üength;

1133 
mr
->
hód_docs
++;

1135 
mr
->
Ÿhî_docs
++;

1138 i‡(!(
mr
->
Êags
 & 
MR_BFS
)) {

1141 
Hy≥rDoc
 * 
hd
 = 
	`HTAnch‹_documít
(
fögî
->
de°
);

1142 i‡(
hd
Ë
	`£t_îr‹_°©e_hy≥rdoc
(hd,
ªque°
);

1146 
	`Fögî_dñëe
(
fögî
);

1149 i‡(
mr
->
˙t
 <= 0) {

1150 i‡(
	`SHOW_QUIET
(
mr
)Ë
	`HTPröt
(" Everything is finished...\n");

1151 
	`CÀ™up
(
mr
, 0);

1155 i‡(
	`SHOW_QUIET
(
mr
)Ë
	`HTPröt
(" %d out°™dögÑeque°%s\n", mr->
˙t
, mr->cnt == 1 ? "" : "s");

1156  
HT_OK
;

1158 
	}
}

1160 
PUBLIC
 
	$bfs_ãrmö©e_h™dÀr
 (
HTReque°
 * 
ªque°
, 
HTRe•⁄£
 * 
ª•⁄£
,

1161 * 
∑øm
, 
°©us
)

1163 
Fögî
 * 
fögî
 = (Fögî *Ë
	`HTReque°_c⁄ãxt
(
ªque°
);

1164 
RobŸ
 * 
mr
 = 
fögî
->
robŸ
;

1165 
HTP¨ítAnch‹
 * 
de°
 = 
fögî
->dest;

1166 
Hy≥rDoc
 * 
hd
 = 
	`HTAnch‹_documít
(
de°
);

1167 
dïth
 = (
hd
 ? hd->depth : -1);

1169 i‡(
hd
Ë
	`£t_îr‹_°©e_hy≥rdoc
(hd,
ªque°
);

1171 if(
hd
 && (
	`HTReque°_mëhod
(
ªque°
)=
METHOD_HEAD
) &&

1172 (
dïth
 < 
mr
->depth))

1174 
hd
->
mëhod
 = 
METHOD_GET
;

1175 
	`HTQueue_≠≥nd
(
mr
->
queue
, (*)
hd
); (mr->
cq
)++;

1178 
	`Fögî_dñëe
(
fögî
);

1180 if(!(
mr
->
Êags
 & 
MR_PREEMPTIVE
))

1181 
	`Sîvög_queue
(
mr
);

1183  
HT_OK
;

1184 
	}
}

1186 
PUBLIC
 
	$Sîvög_queue
(
RobŸ
 *
mr
)

1188 
BOOL
 
ab‹t
 = 
NO
;

1189 
Fögî
 *
nfögî
;

1191 !
ab‹t
)

1193 if(!
	`HTQueue_isEm±y
(
mr
->
queue
))

1195 
HTReque°
 *
√wªq
;

1197 
Hy≥rDoc
 *
nhd
 = (Hy≥rDo¯*)
	`HTQueue_hódOfQueue
(
mr
->
queue
);

1199 if(
nhd
)

1201 *
uri
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *)
nhd
->
™ch‹
);

1202 
	`HTQueue_dequeue
(
mr
->
queue
); (mr->
cq
)--;

1204 
nfögî
 = 
	`Fögî_√w
(
mr
, 
nhd
->
™ch‹
,Çhd->
mëhod
);

1206 
√wªq
 = 
nfögî
->
ªque°
;

1208 if(
	`SHOW_QUIET
(
mr
)Ë
	`HTPröt
("Reque° from QUEUE %s\n",
uri
);

1209 
	`HT_FREE
(
uri
);

1210 if(
	`SHOW_QUIET
(
mr
)Ë
	`HTPröt
("%dÉÀmít†ö queuê\n", mr->
cq
);

1212 
	`HTReque°_£tP¨ít
(
√wªq
,
	`gë_œ°_∑ª¡
(
nhd
->
™ch‹
));

1216 if(
mr
->
waôs
)

1217 
	`¶ìp
(
mr
->
waôs
);

1220 i‡(
	`HTLﬂdAnch‹
((
HTAnch‹
 *)
nhd
->
™ch‹
 , 
√wªq
Ë!
YES
)

1222 i‡(
	`SHOW_QUIET
(
mr
)Ë
	`HTPröt
("notÅested!\n");

1223 
	`Fögî_dñëe
(
nfögî
);

1227 
ab‹t
 = 
YES
;

1230 
ab‹t
 = 
YES
;

1233 if(
	`SHOW_QUIET
(
mr
)Ë
	`HTPröt
("Queuêsize: %d \n", mr->
cq
);

1235 i‡(
mr
->
˙t
 <0 || (
ab‹t
 && (mr->
Êags
 & 
MR_PREEMPTIVE
)))

1237 if(
mr
->
˙t
 > 0)

1238 if(
	`SHOW_QUIET
(
mr
)Ë
	`HTPröt
("%dÑeque°†wîênŸ sîved\n", mr->
˙t
);

1240 i‡(
	`SHOW_QUIET
(
mr
)Ë
	`HTPröt
(" Everything is finished...\n");

1241 
	`CÀ™up
(
mr
, 0);

1243 
	}
}

1249 
PUBLIC
 
BOOL
 
	$RobŸ_ªgi°îHTMLP¨£r
 ()

1251 
	`HText_ªgi°îCDCÆlback
(
RHText_√w
, 
RHText_dñëe
);

1252 
	`HText_ªgi°îLökCÆlback
(
RHText_foundLök
);

1253  
YES
;

1254 
	}
}

1256 
PRIVATE
 
HText
 * 
	$RHText_√w
 (
HTReque°
 * 
ªque°
, 
HTP¨ítAnch‹
 * 
™ch‹
,

1257 
HTSåóm
 * 
°ªam
)

1259 
HText
 * 
me
;

1260 
Fögî
 * 
fögî
 = (Fögî *Ë
	`HTReque°_c⁄ãxt
(
ªque°
);

1261 
RobŸ
 * 
mr
 = 
fögî
->
robŸ
;

1262 * 
robŸs
 = 
NULL
;

1264 i‡((
me
 = (
HText
 *Ë
	`HT_CALLOC
(1, (HText))Ë=
NULL
)

1265 
	`HT_OUTOFMEM
("RHText_new");

1268 
me
->
ªque°
 =Ñequest;

1269 
me
->
fﬁlow
 = 
YES
;

1272 i‡(!(
mr
->
Êags
 & 
MR_NOMETATAGS
Ë&& (
robŸs
 = 
	`HTAnch‹_robŸs
(
™ch‹
)Ë!
NULL
) {

1273 * 
°rvÆ
 = 
NULL
;

1274 * 
±r
 = 
NULL
;

1275 * 
tokí
 = 
NULL
;

1276 
	`SåAŒocC›y
(
°rvÆ
, 
robŸs
);

1277 
±r
 = 
°rvÆ
;

1278 (
tokí
 = 
	`HTNextFõld
(&
±r
)Ë!
NULL
) {

1279 i‡(!
	`°rˇ£comp
(
tokí
, "nofollow")) {

1280 
me
->
fﬁlow
 = 
NO
;

1284 
	`HT_FREE
(
°rvÆ
);

1288 i‡(!
mr
->
hãxt
Ëmr->hãxà
	`HTLi°_√w
();

1289 
	`HTLi°_addObje˘
(
mr
->
hãxt
, (*Ë
me
);

1290  
me
;

1291 
	}
}

1293 
PRIVATE
 
BOOL
 
	$RHText_dñëe
 (
HText
 * 
me
) {

1294 i‡(
me
) {

1295 
	`HT_FREE
(
me
);

1296  
YES
;

1298  
NO
;

1299 
	}
}

1301 
PRIVATE
 
	$RHText_foundAnch‹
 (
HText
 * 
ãxt
, 
HTChûdAnch‹
 * 
™ch‹
)

1303 i‡(
ãxt
 && 
™ch‹
) {

1304 
Fögî
 * 
fögî
 = (Fögî *Ë
	`HTReque°_c⁄ãxt
(
ãxt
->
ªque°
);

1305 
RobŸ
 * 
mr
 = 
fögî
->
robŸ
;

1306 
HTAnch‹
 * 
de°
 = 
	`HTAnch‹_fﬁlowMaöLök
((HTAnch‹ *Ë
™ch‹
);

1307 
HTP¨ítAnch‹
 * 
de°_∑ª¡
 = 
	`HTAnch‹_∑ª¡
(
de°
);

1308 * 
uri
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
de°_∑ª¡
);

1309 
Hy≥rDoc
 * 
hd
 = 
	`HTAnch‹_documít
(
de°_∑ª¡
);

1310 
HTP¨ítAnch‹
 * 
ª„ªr
 = 
	`HTReque°_™ch‹
(
ãxt
->
ªque°
);

1311 
BOOL
 
m©ch
 = 
ãxt
->
fﬁlow
;

1312 
BOOL
 
check
 = 
NO
;

1315 
Hy≥rDoc
 * 
nhd
 = 
NULL
;

1316 
BOOL
 
fﬁlow
 = 
YES
;

1320 
HTP¨ítAnch‹
 * 
œ°_™ch‹
 = 
	`HTReque°_™ch‹
(
ãxt
->
ªque°
);

1321 
Hy≥rDoc
 * 
œ°_doc
 = 
	`HTAnch‹_documít
(
œ°_™ch‹
);

1322 
dïth
 = 
œ°_doc
 ?Üast_doc->depth+1 : 0;

1324 i‡(!
uri
) ;

1325 i‡(
	`SHOW_QUIET
(
mr
)Ë
	`HTPröt
("RobŸ....... Found `%s\' - \n", 
uri
 ? uri : "NULL\n");

1327 i‡(
hd
) {

1328 i‡(
	`SHOW_QUIET
(
mr
)Ë
	`HTPröt
("............ Already checked\n");

1329 
hd
->
hôs
++;

1330 #ifde‡
HT_MYSQL


1331 i‡(
mr
->
sqŒog
) {

1332 * 
ªf_addr
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
ª„ªr
);

1333 i‡(
ªf_addr
) {

1334 
	`HTSQLLog_addLökRñ©i⁄shù
(
mr
->
sqŒog
, 
ªf_addr
, 
uri
,

1335 "ª„ªr", 
NULL
);

1336 
	`HT_FREE
(
ªf_addr
);

1340 
	`HT_FREE
(
uri
);

1345 
m©ch
 = 
	`check_c⁄°øöts
(
mr
,mr->
¥efix
, 
uri
);

1347 #ifde‡
HT_POSIX_REGEX


1349 i‡(
m©ch
 && 
mr
->
check
) {

1350 
check
 = 
	`ªgexec
(
mr
->check, 
uri
, 0, 
NULL
, 0Ë? 
NO
 : 
YES
;

1356 if(
uri
 && 
	`ã°_f‹_bœnk_•a˚s
(uri))

1357 
fﬁlow
 = 
NO
;

1360 i‡(
mr
->
ndoc
 == 0)

1361 
fﬁlow
 = 
NO
;

1364 i‡(!
hd
 && 
de°_∑ª¡
) {

1365 
nhd
 = 
	`Hy≥rDoc_√w
(
mr
, 
de°_∑ª¡
, 
dïth
);

1366 
mr
->
cdïth
[
dïth
]++;

1370 i‡(
mr
->
Êags
 & 
MR_LINK
 && 
m©ch
 && 
de°_∑ª¡
 && 
fﬁlow
 && !
hd
) {

1371 i‡(
mr
->
Êags
 & 
MR_BFS
) {

1372 
nhd
->
mëhod
 = 
METHOD_HEAD
;

1373 
	`HTQueue_íqueue
(
mr
->
queue
, (*Ë
nhd
);

1374 (
mr
->
cq
)++;

1375 if(
mr
->
ndoc
 > 0) mr->ndoc--;

1377 
Fögî
 * 
√wfögî
 = 
	`Fögî_√w
(
mr
, 
de°_∑ª¡
, 
METHOD_GET
);

1378 
HTReque°
 * 
√wªq
 = 
√wfögî
->
ªque°
;

1379 
	`HTReque°_£tP¨ít
(
√wªq
, 
ª„ªr
);

1380 
nhd
->
mëhod
 = 
METHOD_GET
;

1382 i‡(
check
 || 
dïth
 >
mr
->depth) {

1383 i‡(
	`SHOW_QUIET
(
mr
)Ë
	`HTPröt
("lﬂdögáàdïth %d usög HEAD\n", 
dïth
);

1384 
	`HTReque°_£tMëhod
(
√wªq
, 
METHOD_HEAD
);

1385 
nhd
->
mëhod
 = 
METHOD_HEAD
;

1388 i‡(
	`SHOW_QUIET
(
mr
)Ë
	`HTPröt
("lﬂdögáàdïth %d\n", 
dïth
);

1390 i‡(
	`HTLﬂdAnch‹
((
HTAnch‹
 *Ë
de°_∑ª¡
, 
√wªq
Ë!
YES
) {

1391 i‡(
	`SHOW_QUIET
(
mr
)Ë
	`HTPröt
("notÅested!\n");

1392 
	`Fögî_dñëe
(
√wfögî
);

1397 i‡(
	`SHOW_QUIET
(
mr
)Ë
	`HTPröt
("............ doesÇot fulfill constraints\n");

1398 #ifde‡
HT_MYSQL


1399 i‡(
mr
->
ªje˘
 || mr->
sqŒog
) {

1401 i‡(
mr
->
ªje˘
) {

1403 i‡(
ª„ªr
) {

1404 * 
ªf_addr
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
ª„ªr
);

1405 i‡(
mr
->
ªje˘
 && 
ªf_addr
)

1406 
	`HTLog_addText
(
mr
->
ªje˘
, "%†--> %s\n", 
ªf_addr
, 
uri
);

1407 #ifde‡
HT_MYSQL


1408 i‡(
mr
->
sqŒog
 && mr->
sqÀxã∫Æs
 && 
ªf_addr
)

1409 
	`HTSQLLog_addLökRñ©i⁄shù
(
mr
->
sqŒog
,

1410 
ªf_addr
, 
uri
,

1411 "ª„ªr", 
NULL
);

1414 
	`HT_FREE
(
ªf_addr
);

1418 
	`HT_FREE
(
uri
);

1420 
	}
}

1422 
PRIVATE
 
	$RHText_foundImage
 (
HText
 * 
ãxt
, 
HTChûdAnch‹
 * 
™ch‹
,

1423 c⁄° *
Æt
, c⁄° * 
Æign
, 
BOOL
 
isM≠
)

1425 i‡(
ãxt
 && 
™ch‹
) {

1426 
Fögî
 * 
fögî
 = (Fögî *Ë
	`HTReque°_c⁄ãxt
(
ãxt
->
ªque°
);

1427 
RobŸ
 * 
mr
 = 
fögî
->
robŸ
;

1429 i‡(
mr
->
Êags
 & 
MR_IMG
) {

1430 
HTAnch‹
 * 
de°
 = 
	`HTAnch‹_fﬁlowMaöLök
((HTAnch‹ *Ë
™ch‹
);

1431 
HTP¨ítAnch‹
 * 
de°_∑ª¡
 = 
	`HTAnch‹_∑ª¡
(
de°
);

1432 * 
uri
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
de°_∑ª¡
);

1433 
Hy≥rDoc
 * 
hd
 = 
	`HTAnch‹_documít
(
de°_∑ª¡
);

1434 
HTP¨ítAnch‹
 * 
ª„ªr
 = 
	`HTReque°_™ch‹
(
ãxt
->
ªque°
);

1435 
BOOL
 
m©ch
 = 
YES
;

1437 i‡(!
uri
) ;

1438 i‡(
hd
) {

1439 i‡(
	`SHOW_QUIET
(
mr
)Ë
	`HTPröt
("............ Already checked\n");

1440 
hd
->
hôs
++;

1441 #ifde‡
HT_MYSQL


1442 i‡(
mr
->
sqŒog
) {

1443 * 
ªf_addr
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
ª„ªr
);

1444 i‡(
ªf_addr
) {

1445 
	`HTSQLLog_addLökRñ©i⁄shù
(
mr
->
sqŒog
,

1446 
ªf_addr
, 
uri
,

1447 "image", 
Æt
);

1448 
	`HT_FREE
(
ªf_addr
);

1452 
	`HT_FREE
(
uri
);

1457 
m©ch
 = 
	`check_c⁄°øöts
(
mr
, mr->
img_¥efix
, 
uri
);

1460 i‡(
m©ch
 && 
de°
) {

1461 
Fögî
 * 
√wfögî
 = 
	`Fögî_√w
(
mr
, 
de°_∑ª¡
,

1462 
mr
->
Êags
 & 
MR_SAVE
 ?

1463 
METHOD_GET
 : 
METHOD_HEAD
);

1464 
HTReque°
 * 
√wªq
 = 
√wfögî
->
ªque°
;

1465 
	`Hy≥rDoc_√w
(
mr
, 
de°_∑ª¡
, 1);

1466 
	`HTReque°_£tP¨ít
(
√wªq
, 
ª„ªr
);

1469 i‡(
mr
->
nﬂ…èg
 && (
Æt
==
NULL
 || *alt=='\0')) {

1470 i‡(
ª„ªr
) {

1471 * 
ªf_addr
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
ª„ªr
);

1472 i‡(
ªf_addr
Ë
	`HTLog_addText
(
mr
->
nﬂ…èg
, "%†--> %s\n",Ñef_addr, 
uri
);

1473 
	`HT_FREE
(
ªf_addr
);

1477 i‡(
	`SHOW_QUIET
(
mr
)Ë
	`HTPröt
("RobŸ....... Checkög Imagê`%s\'\n", 
uri
);

1478 i‡(
	`HTLﬂdAnch‹
((
HTAnch‹
 *Ë
de°
, 
√wªq
Ë!
YES
) {

1479 i‡(
	`SHOW_QUIET
(
mr
)Ë
	`HTPröt
("Robot....... ImageÇotÅested!\n");

1480 
	`Fögî_dñëe
(
√wfögî
);

1483 i‡(
	`SHOW_QUIET
(
mr
)Ë
	`HTPröt
("............ doesÇot fulfill constraints\n");

1484 #ifde‡
HT_MYSQL


1485 i‡(
mr
->
ªje˘
 || mr->
sqŒog
) {

1487 i‡(
mr
->
ªje˘
) {

1489 i‡(
ª„ªr
) {

1490 * 
ªf_addr
 = 
	`HTAnch‹_addªss
((
HTAnch‹
 *Ë
ª„ªr
);

1491 i‡(
mr
->
ªje˘
 && 
ªf_addr
)

1492 
	`HTLog_addText
(
mr
->
ªje˘
, "%†--> %s\n", 
ªf_addr
, 
uri
);

1493 #ifde‡
HT_MYSQL


1494 i‡(
mr
->
sqŒog
 && mr->
sqÀxã∫Æs
 && 
ªf_addr
)

1495 
	`HTSQLLog_addLökRñ©i⁄shù
(
mr
->
sqŒog
,

1496 
ªf_addr
, 
uri
,

1497 "image", 
Æt
);

1500 
	`HT_FREE
(
ªf_addr
);

1504 
	`HT_FREE
(
uri
);

1507 
	}
}

1509 
PRIVATE
 
	$RHText_foundLök
 (
HText
 * 
ãxt
,

1510 
ñemít_numbî
, 
©åibuã_numbî
,

1511 
HTChûdAnch‹
 * 
™ch‹
,

1512 c⁄° 
BOOL
 * 
¥e£¡
, c⁄° ** 
vÆue
)

1514 i‡(
ãxt
 && 
™ch‹
) {

1515 
Fögî
 * 
fögî
 = (Fögî *Ë
	`HTReque°_c⁄ãxt
(
ãxt
->
ªque°
);

1516 
RobŸ
 * 
mr
 = 
fögî
->
robŸ
;

1517 i‡(
	`SHOW_QUIET
(
mr
))

1518 
	`HTPröt
("Robot....... ReceivedÉlement %d,áttribute %d withánchor %p\n",

1519 
ñemít_numbî
, 
©åibuã_numbî
, 
™ch‹
);

1520 i‡((
ñemít_numbî
==
HTML_IMG
 && 
©åibuã_numbî
==
HTML_IMG_SRC
) ||

1521 (
ñemít_numbî
==
HTML_BODY
 && 
©åibuã_numbî
==
HTML_BODY_BACKGROUND
) ||

1522 (
ñemít_numbî
==
HTML_INPUT
 && 
©åibuã_numbî
==
HTML_INPUT_SRC
))

1523 
	`RHText_foundImage
(
ãxt
, 
™ch‹
, 
NULL
, NULL, 
NO
);

1525 
	`RHText_foundAnch‹
(
ãxt
, 
™ch‹
);

1527 
	}
}

1529 
PUBLIC
 * 
	$gë_robŸs_txt
(* 
uri
)

1531 *
°r
 = 
NULL
;

1532 
HTChunk
 * 
chunk
;

1533 
HTP¨ítAnch‹
 *
™ch‹
 = 
	`HTAnch‹_∑ª¡
(
	`HTAnch‹_födAddªss
(
uri
));

1534 
HTReque°
 *
ªque°
 = 
	`HTReque°_√w
();

1535 
	`HTReque°_£tOuçutF‹m©
(
ªque°
, 
WWW_SOURCE
);

1536 
	`HTReque°_£tPªem±ive
(
ªque°
, 
YES
);

1537 
	`HTReque°_£tMëhod
(
ªque°
, 
METHOD_GET
);

1538 
chunk
 = 
	`HTLﬂdAnch‹ToChunk
 ((
HTAnch‹
 *)
™ch‹
, 
ªque°
);

1539 
°r
 = 
	`HTChunk_toCSåög
(
chunk
);

1540 
	`HTReque°_dñëe
(
ªque°
);

1541  
°r
;

1542 
	}
}

	@Robot/src/HTRobot.h

27 #i‚de‡
HTROBOT_H


28 
	#HTROBOT_H


	)

36 
	#STDOUT
 
°dout


	)

37 
	#OUTPUT
 
°dout


	)

	@Robot/src/RobotMain.c

26 
	~"HTRobM™.h
"

27 
	~"RobŸTxt.h
"

29 
	#SHOW_QUIET
(
mr
Ë((mrË&& !((mr)->
Êags
 & 
MR_QUIET
))

	)

30 
	#SHOW_REAL_QUIET
(
mr
Ë((mrË&& !((mr)->
Êags
 & 
MR_REAL_QUIET
))

	)

36 
PRIVATE
 
	$¥öãr
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

38  (
	`vÂrötf
(
°dout
, 
fmt
, 
pArgs
));

39 
	}
}

41 
PRIVATE
 
	$åa˚r
 (c⁄° * 
fmt
, 
va_li°
 
pArgs
)

43  (
	`vÂrötf
(
°dîr
, 
fmt
, 
pArgs
));

44 
	}
}

46 
	$maö
 (
¨gc
, ** 
¨gv
)

48 
°©us
 = 0;

49 
¨g
;

50 
BOOL
 
ˇche
 = 
NO
;

51 
BOOL
 
Êush
 = 
NO
;

52 * 
ˇche_roŸ
 = 
NULL
;

53 
ˇche_size
 = 
DEFAULT_CACHE_SIZE
;

54 
HTChunk
 * 
keyw‹ds
 = 
NULL
;

55 
key˙t
 = 0;

56 
RobŸ
 * 
mr
 = 
NULL
;

57 
Fögî
 * 
fögî
 = 
NULL
;

58 
HTP¨ítAnch‹
 * 
°¨tAnch‹
 = 
NULL
;

61 #ifde‡
GUSI


62 
	`GUSISëup
(
GUSIwôhSIOUXSockës
);

63 
	`GUSISëup
(
GUSIwôhI¡î√tSockës
);

66 #ifde‡
__MWERKS__


67 
	`InôGøf
((
På
Ë&
qd
.
theP‹t
);

68 
	`InôF⁄ts
();

69 
	`InôWödows
();

70 
	`InôMíus
(); 
	`TEInô
();

71 
	`InôDülogs
(
nû
);

72 
	`InôCurs‹
();

73 
SIOUXSëtögs
.
asktoßve⁄˛o£
 = 
Ál£
;

74 
¨gc
=
	`ccomm™d
(&
¨gv
);

77 #ifde‡
HT_MEMLOG


78 
	`HTMemLog_›í
(
DEFAULT_MEMLOG
, 8192, 
YES
);

82 
	`HTProfûe_√wRobŸ
(
APP_NAME
, 
APP_VERSION
);

85 
	`HTPröt_£tCÆlback
(
¥öãr
);

86 
	`HTTø˚_£tCÆlback
(
åa˚r
);

89 
mr
 = 
	`RobŸ_√w
();

92 
¨g
=1;árg<
¨gc
;árg++) {

93 i‡(*
¨gv
[
¨g
] == '-') {

96 i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-n")) {

97 
	`HTAÀπ_£tI¡îa˘ive
(
NO
);

100 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-h") || !strcmp(argv[arg], "-?")) {

101 
	`Vîsi⁄Info
();

102 
	`CÀ™up
(
mr
, 0);

105 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-l")) {

106 
mr
->
logfûe
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

107 
¨gv
[++
¨g
] : 
DEFAULT_LOG_FILE
;

108 
mr
->
Êags
 |
MR_LOGGING
;

111 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-ref", 4)) {

112 
mr
->
ªffûe
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

113 
¨gv
[++
¨g
] : 
DEFAULT_REFERER_FILE
;

114 
mr
->
Êags
 |
MR_LOGGING
;

117 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-404", 4)) {

118 
mr
->
nŸfoundfûe
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

119 
¨gv
[++
¨g
] : 
DEFAULT_NOTFOUND_FILE
;

120 
mr
->
Êags
 |
MR_LOGGING
;

123 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-rej", 4)) {

124 
mr
->
ªje˘fûe
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

125 
¨gv
[++
¨g
] : 
DEFAULT_REJECT_FILE
;

126 
mr
->
Êags
 |
MR_LOGGING
;

129 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-alt", 4)) {

130 
mr
->
nﬂ…ègfûe
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

131 
¨gv
[++
¨g
] : 
DEFAULT_NOALTTAG_FILE
;

132 
mr
->
Êags
 |
MR_LOGGING
;

135 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-neg", 4)) {

136 
mr
->
c⁄√gfûe
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

137 
¨gv
[++
¨g
] : 
DEFAULT_CONNEG_FILE
;

138 
mr
->
Êags
 |
MR_LOGGING
;

141 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-hit")) {

142 
mr
->
hôfûe
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

143 
¨gv
[++
¨g
] : 
DEFAULT_HIT_FILE
;

144 
mr
->
Êags
 |
MR_DISTRIBUTIONS
;

147 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-rellog")) {

148 
mr
->
ªlfûe
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

149 
¨gv
[++
¨g
] : 
DEFAULT_REL_FILE
;

150 
mr
->
Êags
 |
MR_DISTRIBUTIONS
;

153 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-relation")) {

154 
mr
->
ªœti⁄
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

155 (
HTLökTy≥
Ë
	`HTAtom_ˇ£F‹
(
¨gv
[++
¨g
]Ë: 
NULL
;

156 
mr
->
Êags
 |
MR_DISTRIBUTIONS
;

159 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-lm")) {

160 
mr
->
lmfûe
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

161 
¨gv
[++
¨g
] : 
DEFAULT_LM_FILE
;

162 
mr
->
Êags
 |
MR_DISTRIBUTIONS
;

165 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-title")) {

166 
mr
->
tôÀfûe
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

167 
¨gv
[++
¨g
] : 
DEFAULT_TITLE_FILE
;

168 
mr
->
Êags
 |
MR_DISTRIBUTIONS
;

171 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-for", 4)) {

172 
mr
->
mtfûe
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

173 
¨gv
[++
¨g
] : 
DEFAULT_FORMAT_FILE
;

174 
mr
->
Êags
 |(
MR_KEEP_META
 | 
MR_DISTRIBUTIONS
);

177 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-char", 5)) {

178 
mr
->
ch¨£tfûe
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

179 
¨gv
[++
¨g
] : 
DEFAULT_CHARSET_FILE
;

180 
mr
->
Êags
 |(
MR_KEEP_META
 | 
MR_DISTRIBUTIONS
);

184 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-r")) {

185 
mr
->
ruÀs
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

186 
¨gv
[++
¨g
] : 
DEFAULT_RULE_FILE
;

189 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-nometatags")) {

190 
mr
->
Êags
 |
MR_NOMETATAGS
;

193 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-o")) {

194 
mr
->
ouçutfûe
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

195 
¨gv
[++
¨g
] : 
DEFAULT_OUTPUT_FILE
;

198 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-prefix")) {

199 * 
¥efix
 = 
NULL
;

200 
¥efix
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

201 
¨gv
[++
¨g
] : 
DEFAULT_PREFIX
;

202 i‡(*
¥efix
 && *prefix != '*') {

203 
	`SåAŒocC›y
(
mr
->
¥efix
,Örefix);

204 
	`SåAŒocC©
(
mr
->
¥efix
, "*");

208 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-timeout")) {

209 
timeout
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

210 
	`©oi
(
¨gv
[++
¨g
]Ë: 
DEFAULT_TIMEOUT
;

211 i‡(
timeout
 > 1Ë
mr
->
timî
 =Åimeout*
MILLIES
;

214 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-wait")) {

215 
waôs
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

216 
	`©oi
(
¨gv
[++
¨g
]) : 0;

217 i‡(
waôs
 > 0Ë
mr
->waits = waits;

220 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-nopipe")) {

221 
	`HTTP_£tC⁄√˘i⁄Mode
(
HTTP_11_NO_PIPELINING
);

224 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-delay")) {

225 
dñay
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

226 
	`©oi
(
¨gv
[++
¨g
]Ë: 
DEFAULT_DELAY
;

227 
	`HTHo°_£tDeÁu…WrôeDñay
(
dñay
);

230 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-cache")) {

231 
ˇche
 = 
YES
;

234 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-cacheroot")) {

235 
ˇche_roŸ
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

236 
¨gv
[++
¨g
] : 
NULL
;

239 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-flush")) {

240 
Êush
 = 
YES
;

243 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-validate")) {

244 
mr
->
Êags
 |
MR_VALIDATE
;

246 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-cache_size")) {

247 
ˇche_size
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

248 
	`©oi
(
¨gv
[++
¨g
]Ë: 
DEFAULT_CACHE_SIZE
;

251 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-endvalidate")) {

252 
mr
->
Êags
 |
MR_END_VALIDATE
;

255 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-single")) {

256 
mr
->
Êags
 |
MR_PREEMPTIVE
;

259 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-img")) {

260 
mr
->
Êags
 |
MR_IMG
;

263 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-saveimg")) {

264 
mr
->
Êags
 |(
MR_IMG
 | 
MR_SAVE
);

267 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-imgprefix")) {

268 * 
¥efix
 = 
NULL
;

269 
¥efix
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

270 
¨gv
[++
¨g
] : 
DEFAULT_IMG_PREFIX
;

271 i‡(*
¥efix
 && *prefix!='*') {

272 
	`SåAŒocC›y
(
mr
->
img_¥efix
, 
¥efix
);

273 
	`SåAŒocC©
(
mr
->
img_¥efix
, "*");

277 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-link") || !strcmp(argv[arg], "-depth")) {

278 
mr
->
Êags
 |
MR_LINK
;

279 
mr
->
dïth
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

280 
	`©oi
(
¨gv
[++
¨g
]Ë: 
DEFAULT_DEPTH
;

283 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-ndoc")) {

284 
mr
->
ndoc
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

285 
	`©oi
(
¨gv
[++
¨g
]) : -1 ;

288 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-ss")) {

289 
mr
->
Êags
 |
MR_TIME
;

292 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-version")) {

293 
	`Vîsi⁄Info
();

294 
	`CÀ™up
(
mr
, 0);

297 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-bfs")) {

298 
mr
->
Êags
 |
MR_BFS
;

301 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-q")) {

302 
mr
->
Êags
 |
MR_QUIET
;

305 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-Q")) {

306 
mr
->
Êags
 |
MR_REAL_QUIET
;

309 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-redir")) {

310 
mr
->
Êags
 |
MR_REDIR
;

311 
mr
->
ªdú_code
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

312 
	`©oi
(
¨gv
[++
¨g
]) : 0;

314 #ifde‡
WWWTRACE


316 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-v", 2)) {

317 
	`HTSëTø˚MesßgeMask
(
¨gv
[
¨g
]+2);

320 #ifde‡
HT_POSIX_REGEX


323 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-inc", 4)) {

324 i‡(
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') {

325 
mr
->
ö˛ude
 = 
	`gë_ªgty≥
(mr, 
¨gv
[++
¨g
], 
W3C_DEFAULT_REGEX_FLAGS
);

327 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-exc", 4)) {

328 i‡(
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') {

329 
mr
->
ex˛ude
 = 
	`gë_ªgty≥
(mr, 
¨gv
[++
¨g
], 
W3C_DEFAULT_REGEX_FLAGS
);

331 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-check", 6)) {

332 i‡(
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') {

333 
mr
->
check
 = 
	`gë_ªgty≥
(mr, 
¨gv
[++
¨g
], 
W3C_DEFAULT_REGEX_FLAGS
);

335 } i‡(!
	`°rcmp
(
¨gv
[
¨g
], "-norobotstxt")) {

336 
mr
->
Êags
 |
MR_NOROBOTSTXT
;

339 #ifde‡
HT_MYSQL


341 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-sqldb", 5)) {

342 
mr
->
sqldb
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

343 
¨gv
[++
¨g
] : 
DEFAULT_SQL_DB
;

345 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-sqlclearlinks", 10)) {

346 
mr
->
sqlÊags
 |
HTSQLLOG_CLEAR_LINKS_TABLE
;

348 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-sqlclearrequests", 12)) {

349 
mr
->
sqlÊags
 |
HTSQLLOG_CLEAR_REQUESTS_TABLE
;

351 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-sqlclearresources", 12)) {

352 
mr
->
sqlÊags
 |
HTSQLLOG_CLEAR_RESOURCES_TABLE
;

354 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-sqlclearuris", 10)) {

355 
mr
->
sqlÊags
 |
HTSQLLOG_CLEAR_URIS_TABLE
;

357 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-sqlexternals", 5)) {

358 
mr
->
sqÀxã∫Æs
 = 
YES
;

360 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-sqlpassword", 5)) {

361 
mr
->
sqÕw
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

362 
¨gv
[++
¨g
] : 
DEFAULT_SQL_PW
;

364 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-sqlrelative", 5)) {

365 
mr
->
sqÃñ©ive
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

366 
¨gv
[++
¨g
] : 
NULL
;

368 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-sqlserver", 5)) {

369 
mr
->
sql£rvî
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

370 
¨gv
[++
¨g
] : 
DEFAULT_SQL_SERVER
;

372 } i‡(!
	`°∫cmp
(
¨gv
[
¨g
], "-sqluser", 5)) {

373 
mr
->
sqlu£r
 = (
¨g
+1 < 
¨gc
 && *
¨gv
[arg+1] != '-') ?

374 
¨gv
[++
¨g
] : 
DEFAULT_SQL_USER
;

379 i‡(
	`SHOW_REAL_QUIET
(
mr
)Ë
	`HTPröt
("Bad Argumíà(%s)\n", 
¨gv
[
¨g
]);

382 i‡(!
key˙t
) {

383 
Hy≥rDoc
 *
hd
;

384 
mr
->
fuæ
 = 
	`HTP¨£
(
¨gv
[
¨g
], mr->
cwd
, 
PARSE_ALL
);

385 
°¨tAnch‹
 = 
	`HTAnch‹_∑ª¡
(
	`HTAnch‹_födAddªss
(
mr
->
fuæ
));

386 
hd
 = 
	`Hy≥rDoc_√w
(
mr
, 
°¨tAnch‹
, 0);

387 
hd
->
mëhod
 = 
METHOD_GET
;

388 
key˙t
 = 1;

390 *
esˇ≥d
 = 
	`HTEsˇ≥
(
¨gv
[
¨g
], 
URL_XALPHAS
);

391 i‡(
key˙t
++ <= 1)

392 
keyw‹ds
 = 
	`HTChunk_√w
(128);

394 
	`HTChunk_putc
(
keyw‹ds
, ' ');

395 
	`HTChunk_puts
(
keyw‹ds
, 
	`HTSåù
(
esˇ≥d
));

396 
	`HT_FREE
(
esˇ≥d
);

401 i‡(!
key˙t
) {

402 
	`Vîsi⁄Info
();

403 
	`CÀ™up
(
mr
, 0);

406 i‡(
mr
->
dïth
 !
DEFAULT_DEPTH
 &&

407 (
mr
->
¥efix
 =
NULL
 || *mr->prefix == '*')) {

408 i‡(
	`SHOW_REAL_QUIET
(
mr
))

409 
	`HTPröt
("A depth of moreÅhan 0ÑequiresÅhat youálso specifyá URIÖrefix.\n",

410 
mr
->
dïth
);

411 
	`CÀ™up
(
mr
, -1);

415 i‡(
mr
->
Êags
 & 
MR_TIME
) {

416 i‡(
	`SHOW_REAL_QUIET
(
mr
)) {

417 
time_t
 
loˇl
 = 
	`time
(
NULL
);

418 
	`HTPröt
("WelcomeÅoÅhe W3C mini Robot version %s - started on %s\n",

419 
APP_VERSION
, 
	`HTD©eTimeSå
(&
loˇl
, 
YES
));

424 i‡(
mr
->
ruÀs
) {

425 * 
ruÀs
 = 
	`HTP¨£
(
mr
->ruÀs, mr->
cwd
, 
PARSE_ALL
);

426 i‡(!
	`HTLﬂdRuÀsAutom©iˇŒy
(
ruÀs
))

427 i‡(
	`SHOW_REAL_QUIET
(
mr
)Ë
	`HTPröt
("Can'táccessÑules\n");

428 
	`HT_FREE
(
ruÀs
);

432 i‡(
mr
->
ouçutfûe
) {

433 i‡((
mr
->
ouçut
 = 
	`f›í
(mr->
ouçutfûe
, "wb")Ë=
NULL
) {

434 i‡(
	`SHOW_REAL_QUIET
(
mr
)Ë
	`HTPröt
("C™'à›í `%s'\n", mr->
ouçutfûe
);

435 
mr
->
ouçut
 = 
OUTPUT
;

440 i‡((
mr
->
cdïth
 = (*Ë
	`HT_CALLOC
(mr->
dïth
+2, ()))==
NULL
)

441 
	`HT_OUTOFMEM
("main");

444 i‡(
ˇche
) {

445 
	`HTCacheInô
(
ˇche_roŸ
, 
ˇche_size
);

448 i‡(
Êush
Ë
	`HTCache_ÊushAŒ
();

452 #ifde‡
HT_MYSQL


453 i‡(
mr
->
sql£rvî
) {

454 i‡((
mr
->
sqŒog
 =

455 
	`HTSQLLog_›í
(
mr
->
sql£rvî
,

456 
mr
->
sqlu£r
 ? mr->sqlu£∏: 
DEFAULT_SQL_USER
,

457 
mr
->
sqÕw
 ? mr->sqÕw : 
DEFAULT_SQL_PW
,

458 
mr
->
sqldb
 ? mr->sqldb : 
DEFAULT_SQL_DB
,

459 
mr
->
sqlÊags
)Ë!
NULL
) {

460 i‡(
mr
->
sqÃñ©ive
Ë
	`HTSQLLog_makeRñ©iveTo
(mr->
sqŒog
, mr->sqlrelative);

466 i‡(
mr
->
logfûe
) {

467 
mr
->
log
 = 
	`HTLog_›í
(mr->
logfûe
, 
YES
, YES);

468 i‡(
mr
->
log
Ë
	`HTNë_addA·î
(
HTLogFûãr
, 
NULL
, mr->log, 
HT_ALL
, 
HT_FILTER_LATE
);

472 i‡(
mr
->
ªffûe
) {

473 
mr
->
ªf
 = 
	`HTLog_›í
(mr->
ªffûe
, 
YES
, YES);

474 i‡(
mr
->
ªf
)

475 
	`HTNë_addA·î
(
HTRe„ªrFûãr
, 
NULL
, 
mr
->
ªf
, 
HT_ALL
, 
HT_FILTER_LATE
);

479 i‡(
mr
->
nŸfoundfûe
) {

480 
mr
->
nŸfound
 = 
	`HTLog_›í
(mr->
nŸfoundfûe
, 
YES
, YES);

481 i‡(
mr
->
nŸfound
)

482 
	`HTNë_addA·î
(
HTRe„ªrFûãr
, 
NULL
, 
mr
->
nŸfound
, -404, 
HT_FILTER_LATE
);

486 i‡(
mr
->
Êags
 & 
MR_REDIR
) {

487 
BOOL
 
i§edú
 = 
NO
;

488 i‡(
mr
->
ªdú_code
 =
HT_PERM_REDIRECT
 || mr->redir_code == 0) {

489 
	`HTNë_addA·î
(
ªdúe˘i⁄_h™dÀr
, "hâp://*" , 
NULL
, 
HT_PERM_REDIRECT
, 
HT_FILTER_LATE
);

490 
i§edú
 = 
YES
;

492 i‡(
mr
->
ªdú_code
 =
HT_TEMP_REDIRECT
 || mr->redir_code == 0) {

493 
	`HTNë_addA·î
(
ªdúe˘i⁄_h™dÀr
, "hâp://*", 
NULL
, 
HT_TEMP_REDIRECT
, 
HT_FILTER_LATE
);

494 
i§edú
 = 
YES
;

496 i‡(
mr
->
ªdú_code
 =
HT_FOUND
 || mr->redir_code == 0) {

497 
	`HTNë_addA·î
(
ªdúe˘i⁄_h™dÀr
, "hâp://*", 
NULL
, 
HT_FOUND
, 
HT_FILTER_LATE
);

498 
i§edú
 = 
YES
;

500 i‡(
mr
->
ªdú_code
 =
HT_SEE_OTHER
 || mr->redir_code == 0) {

501 
	`HTNë_addA·î
(
ªdúe˘i⁄_h™dÀr
, "hâp://*", 
NULL
, 
HT_SEE_OTHER
, 
HT_FILTER_LATE
);

502 
i§edú
 = 
YES
;

504 i‡(!
i§edú
) {

505 i‡(
	`SHOW_REAL_QUIET
(
mr
))

506 
	`HTPröt
("%d i†nŸá vÆidÑedúe˘i⁄ code\n", 
mr
->
ªdú_code
);

507 
	`CÀ™up
(
mr
, -1);

512 i‡(
mr
->
c⁄√gfûe
Ëmr->
c⁄√g
 = 
	`HTLog_›í
(mr->c⁄√gfûe, 
YES
, YES);

515 i‡(
mr
->
nﬂ…ègfûe
Ëmr->
nﬂ…èg
 = 
	`HTLog_›í
(mr->nﬂ…ègfûe, 
YES
, YES);

518 i‡(
mr
->
ªje˘fûe
Ëmr->
ªje˘
 = 
	`HTLog_›í
(mr->ªje˘fûe, 
YES
, YES);

520 #ifde‡
HT_POSIX_REGEX


521 if(!(
mr
->
Êags
 & 
MR_NOROBOTSTXT
))

523 *
ruri
 = 
	`HTP¨£
(
ROBOTS_TXT
, 
mr
->
fuæ
, 
PARSE_ALL
);

524 *
robŸ_°r
 = 
	`gë_robŸs_txt
(
ruri
);

525 *
ªg_exp_robŸ
 = 
robŸ_°r
 ?

526 
	`sˇn_robŸs_txt
(
robŸ_°r
,
APP_NAME
Ë: 
NULL
;

527 i‡(
	`SHOW_REAL_QUIET
(
mr
)Ë
	`HTPröt
("robŸs.txàuròi†`%s'\n", 
ruri
);

528 if(
robŸ_°r
)

529 
	`HT_FREE
(
robŸ_°r
);

530 if(
ªg_exp_robŸ
)

532 
mr
->
exc_robŸ
 = 
	`gë_ªgty≥
(mr, 
ªg_exp_robŸ
, 
W3C_DEFAULT_REGEX_FLAGS
);

533 
	`HT_FREE
(
ªg_exp_robŸ
);

535 
	`HT_FREE
(
ruri
);

540 
	`RobŸ_ªgi°îHTMLP¨£r
();

543 
	`HTNë_addA·î
(
ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

546 i‡(
mr
->
Êags
 & 
MR_BFS
)

547 
	`HTNë_addA·î
(
bfs_ãrmö©e_h™dÀr
, 
NULL
, NULL, 
HT_ALL
, 
HT_FILTER_LAST
);

550 
	`HTHo°_£tEvítTimeout
(
mr
->
timî
);

552 
mr
->
time
 = 
	`HTGëTimeInMûlis
();

555 
fögî
 = 
	`Fögî_√w
(
mr
, 
°¨tAnch‹
, 
METHOD_GET
);

561 
	`HTReque°_£tFlush
(
fögî
->
ªque°
, 
YES
);

567 i‡(
mr
->
Êags
 & 
MR_VALIDATE
)

568 
	`HTReque°_£tRñﬂdMode
(
fögî
->
ªque°
, 
HT_CACHE_VALIDATE
);

569 i‡(
mr
->
Êags
 & 
MR_END_VALIDATE
)

570 
	`HTReque°_£tRñﬂdMode
(
fögî
->
ªque°
, 
HT_CACHE_END_VALIDATE
);

575 i‡(
mr
->
Êags
 & 
MR_PREEMPTIVE
)

576 
	`HTReque°_£tPªem±ive
(
fögî
->
ªque°
, 
YES
);

578 i‡(
keyw‹ds
)

579 
°©us
 = 
	`HTSórchAnch‹
(
keyw‹ds
, (
HTAnch‹
 *)
°¨tAnch‹
, 
fögî
->
ªque°
);

581 
°©us
 = 
	`HTLﬂdAnch‹
((
HTAnch‹
 *)
°¨tAnch‹
, 
fögî
->
ªque°
);

583 i‡(
keyw‹ds
Ë
	`HTChunk_dñëe
(keywords);

584 i‡(
°©us
 !
YES
) {

585 i‡(
	`SHOW_REAL_QUIET
(
mr
)Ë
	`HTPröt
("Can'táccessÑesource\n");

586 
	`CÀ™up
(
mr
, -1);

591 if((
mr
->
Êags
 & 
MR_PREEMPTIVE
Ë&& (mr->Êag†& 
MR_BFS
))

592 
	`Sîvög_queue
(
mr
);

594 
	`HTEvítLi°_lo›
(
fögî
->
ªque°
);

598 
	`CÀ™up
(
mr
, 0);

600 
	}
}

	@Robot/src/RobotTxt.c

23 
	~"HTRobM™.h
"

24 
	~"RobŸTxt.h
"

26 
PUBLIC
 
U£rAgít
 * 
	$√w_u£r_agít
 ()

28 
U£rAgít
 * 
ua
;

29 i‡((
ua
 = (
U£rAgít
 *Ë
	`HT_CALLOC
(1, (U£rAgít))Ë=
NULL
)

30 
	`HT_OUTOFMEM
("new_user_agent");

31 
ua
->
dißŒow
 = 
	`HTLi°_√w
();

32  
ua
;

33 
	}
}

35 
PUBLIC
 * 
	$gë_«me_u£r_agít
 (
U£rAgít
 * 
ua
)

37  
ua
 ? ua->
«me
 : 
NULL
;

38 
	}
}

40 
PUBLIC
 
HTLi°
 * 
	$gë_dißŒow_u£r_agít
 (
U£rAgít
 * 
ua
)

42  
ua
 ? ua->
dißŒow
 : 
NULL
;

43 
	}
}

45 
PUBLIC
 
BOOL
 
	$£t_«me_u£r_agít
 (
U£rAgít
 * 
ua
, * 
«me
)

47 i‡(
ua
 && 
«me
) {

48 
	`SåAŒocC›y
(
ua
->
«me
,Çame);

49  
YES
;

51  
NO
;

52 
	}
}

54 
PUBLIC
 
BOOL
 
	$add_dißŒow_u£r_agít
 (
U£rAgít
 * 
ua
, * 
dißŒow
)

56 i‡(
ua
 && 
dißŒow
) {

57 * 
da
 = 
NULL
;

58 
	`SåAŒocC›y
(
da
, 
dißŒow
);

61  
	`HTLi°_addObje˘
(
ua
->
dißŒow
, 
da
);

63  
NO
;

64 
	}
}

66 
PUBLIC
 
BOOL
 
	$dñëe_u£r_agít
 (
U£rAgít
 * 
ua
)

68 i‡(
ua
) {

69 
	`HT_FREE
(
ua
->
«me
);

70 i‡(
ua
->
dißŒow
) {

71 
HTLi°
 *
cur
 = 
ua
->
dißŒow
;

72 *
¥es
;

73 (
¥es
 = (*Ë
	`HTLi°_√xtObje˘
(
cur
)))

74 
	`HT_FREE
(
¥es
);

75 
	`HTLi°_dñëe
(
ua
->
dißŒow
);

77  
YES
;

79  
NO
;

80 
	}
}

82 
PUBLIC
 
BOOL
 
	$dñëe_Æl_u£r_agíts
(
HTLi°
 *
u£r_agíts
)

84 i‡(
u£r_agíts
) {

85 
HTLi°
 *
cur
 = 
u£r_agíts
;

86 
U£rAgít
 *
¥es
;

87 (
¥es
 = (
U£rAgít
 *Ë
	`HTLi°_√xtObje˘
(
cur
)))

88 
	`dñëe_u£r_agít
(
¥es
);

89  
	`HTLi°_dñëe
(
u£r_agíts
);

91  
NO
;

92 
	}
}

94 
PUBLIC
 * 
	$gë_ªguœr_ex¥essi⁄
 (
HTLi°
 * 
u£r_agíts
, * 
«me_robŸ
)

96 i‡(
u£r_agíts
 && 
«me_robŸ
) {

97 
HTChunk
 *
ch
 = 
	`HTChunk_√w
 (1024);

98 
HTLi°
 *
cur
 = 
u£r_agíts
;

99 
U£rAgít
 *
¥es
;

100 
U£rAgít
 *
ua_gí
=
NULL
;

101 
found
=0;

103 (
¥es
 = (
U£rAgít
 *Ë
	`HTLi°_√xtObje˘
(
cur
))) {

104 *
«me
 = 
	`gë_«me_u£r_agít
(
¥es
);

106 if(!
	`°rcmp
(
«me
,"*"))

107 
ua_gí
 = 
¥es
;

109 if(!
	`°rcmp
(
«me
,
«me_robŸ
)) {

110 
	`put_°rög_dißŒow
(
ch
,
¥es
);

111 
found
 = 1;

114 if(!
found
 && 
ua_gí
Ë
	`put_°rög_dißŒow
(
ch
,ua_gen);

116  (
	`HTChunk_toCSåög
 (
ch
));

118  
NULL
;

119 
	}
}

121 
PUBLIC
 
BOOL
 
	$put_°rög_dißŒow
 (
HTChunk
 * 
ch
, 
U£rAgít
 * 
ua
)

123 i‡(
ch
 && 
ua
) {

124 
HTLi°
 *
cur
 = 
	`gë_dißŒow_u£r_agít
(
ua
);

125 *
¥es
;

126 
fú°
 = 1;

128 (
¥es
 = (*Ë
	`HTLi°_√xtObje˘
(
cur
))) {

129 if(!
fú°
)

130 
	`HTChunk_puts
 (
ch
,"|");

132 
fú°
 = 0;

133 
	`HTChunk_puts
 (
ch
,
¥es
);

135  
YES
;

137  
NO
;

138 
	}
}

140 
PUBLIC
 
	$¥öt_u£r_agít
(
U£rAgít
 *
ua
)

142 
HTLi°
 *
cur
 = 
ua
->
dißŒow
;

143 *
¥es
;

144 
	`HTTRACE
(
APP_TRACE
, "U£∏Agíà: %†\n" 
_
 
ua
->
«me
);

145 (
¥es
 = (*Ë
	`HTLi°_√xtObje˘
(
cur
)))

146 
	`HTTRACE
(
APP_TRACE
, "DißŒow : %†\n" 
_
 
¥es
);

147 
	}
}

149 
PUBLIC
 
	$¥öt_Æl_u£r_agíts
(
HTLi°
 * 
u£r_agíts
)

151 
HTLi°
 *
cur
 = 
u£r_agíts
;

152 
U£rAgít
 *
¥es
;

153 (
¥es
 = (
U£rAgít
 *Ë
	`HTLi°_√xtObje˘
(
cur
)))

155 
	`HTTRACE
(
APP_TRACE
, "\nNew User Agent\n");

156 
	`¥öt_u£r_agít
(
¥es
);

158 
	}
}

160 
PUBLIC
 
HTLi°
 * 
	$gë_Æl_u£r_agíts
(* 
rob_°r
)

162 i‡(
rob_°r
) {

163 * 
±r
 = 
rob_°r
;

164 
HTLi°
 * 
u£r_agíts
 = 
	`HTLi°_√w
();

167 
	`is•a˚
(()*
±r
))

168 
±r
++;

171 
±r
 = 
	`skù_commíts
(ptr);

173 if(!
	`gë_u£r_agíts
(
±r
,
u£r_agíts
))

174 
	`HTTRACE
(
APP_TRACE
, "Something is wrong inÑobots.txt\n");

176  
u£r_agíts
;

178  
NULL
;

179 
	}
}

181 
PUBLIC
 * 
	$skù_commíts
(*
±r
)

183 i‡(
±r
 && *ptr == '#') {

185 *
±r
 != '\n')

186 
±r
++;

187 
	`is•a˚
(()*
±r
))

188 
±r
++;

189 } *
±r
 == '#');

191  
±r
;

192 
	}
}

194 
PUBLIC
 
	$sˇn_«me_u¡û_eﬁöe
(*
robŸ_°r
, *
«me
)

196 *
±r
 = 
robŸ_°r
;

197 *
¡r
 = 
«me
;

198 *
±r
 != '\n' && *ptr != '#')

200 *
¡r
 = *
±r
;

201 
¡r
++; 
±r
++;

202 if(*
±r
 == '\0')

205 *
¡r
 = '\0';

206 
	}
}

208 
PUBLIC
 
	$sˇn_«me_u¡û_•a˚
(*
robŸ_°r
, *
«me
)

210 *
±r
 = 
robŸ_°r
;

211 *
¡r
 = 
«me
;

212 !
	`is•a˚
(()*
±r
) && *ptr != '#')

214 *
¡r
 = *
±r
;

215 
¡r
++; 
±r
++;

216 if(*
±r
 == '\0')

219 *
¡r
 = '\0';

220 
	}
}

222 
PUBLIC
 
BOOL
 
	$gë_u£r_agíts
(* 
±r
, 
HTLi°
 *
u£r_agíts
)

224 *
ua°r
 = "user-agent:";

225 *
dis°r
 = "disallow:";

226 
lua°r
 = 10;

227 
ldis°r
 = 9;

228 
«me
[2000];

229 
ödi˚s
[200];

230 
i
 = 0;

231 i‡(
±r
 && !
	`°∫ˇ£comp
’å,
ua°r
,
lua°r
)) {

232 
U£rAgít
 *
ua
 = 
NULL
;

234 
i
=0;

236 
ua
 = 
	`√w_u£r_agít
();

237 
	`HTLi°_≠≥ndObje˘
(
u£r_agíts
,(*)
ua
);

238 
ödi˚s
[
i
++] = 
	`HTLi°_ödexOf
(
u£r_agíts
, (*)
ua
);

239 
±r
 +
lua°r
 + 1;

240 
	`is•a˚
(()*
±r
))

241 
±r
++;

242 
	`sˇn_«me_u¡û_eﬁöe
(
±r
,
«me
);

243 
±r
 +
	`°æí
(
«me
) + 1;

244 
	`is•a˚
(()*
±r
))

245 
±r
++;

246 
±r
 = 
	`skù_commíts
(ptr);

247 
	`£t_«me_u£r_agít
(
ua
,
«me
);

248 } !
	`°∫ˇ£comp
(
±r
,
ua°r
,
lua°r
));

250 if(!
	`°∫ˇ£comp
(
±r
, 
dis°r
,
ldis°r
))

253 
±r
 +
ldis°r
 + 1;

254 
	`sˇn_«me_u¡û_•a˚
(
±r
,
«me
);

255 
±r
 +
	`°æí
(
«me
) + 1;

256 
	`is•a˚
(()*
±r
))

257 
±r
++;

258 
±r
 = 
	`skù_commíts
(ptr);

259 if(
i
==1)

260 
	`add_dißŒow_u£r_agít
(
ua
,
«me
);

263 
j
;

264 
j
 = 0 ; j < 
i
 ; j++)

266 
ua
 = 
	`HTLi°_obje˘At
(
u£r_agíts
, 
ödi˚s
[
j
]);

267 
	`add_dißŒow_u£r_agít
(
ua
,
«me
);

270 } !
	`°∫ˇ£comp
(
±r
,
dis°r
,
ldis°r
));

273  
NO
;

275 } !
	`°∫ˇ£comp
(
±r
,
ua°r
,
lua°r
));

276  
YES
;

279  
NO
;

280 
	}
}

282 
PUBLIC
 * 
	$sˇn_robŸs_txt
(*
rob_°r
, *
«me_robŸ
)

284 *
ªg_exp_ex˛ude
 = 
NULL
;

285 
HTLi°
 * 
u£r_agíts
 = 
	`gë_Æl_u£r_agíts
(
rob_°r
);

288 
ªg_exp_ex˛ude
 = 
	`gë_ªguœr_ex¥essi⁄
(
u£r_agíts
, 
«me_robŸ
);

289 
	`dñëe_Æl_u£r_agíts
(
u£r_agíts
);

291  
ªg_exp_ex˛ude
;

292 
	}
}

294 #ifde‡
ROBOTS_TXT_STANDALONE


297 
	$maö
(
¨gc
, *
¨gv
[])

299 *
ãxt
;

300 *
ªg_exp
;

301 *
fûíame

¨gc
 > 1 ? 
¨gv
[1] : "robots.txt";

302 
FILE
 *
Â
;

303 
°©
 
°©b
;

305 if(
	`°©
(
fûíame
, &
°©b
) == -1 ||

306 (
°©b
.
°_mode
 & 
S_IFMT
 ) !
S_IFREG
 ||

307 !(
Â
 = 
	`f›í
(
fûíame
, "r")))

309 if((
°©b
.
°_mode
 & 
S_IFMT
Ë=
S_IFREG
)

310 
	`≥º‹
(
fûíame
);

312 
	`HTTRACE
(
ALL_TRACE
, "%†:ÇŸáÑeguœ∏fûê\n" 
_
 
fûíame
);

316 if(!(
ãxt
 = 
	`mÆloc
(()(
°©b
.
°_size
 +1))))

318 
	`HTTRACE
(
ALL_TRACE
, "C™'àÆlo¯íough s∑˚ f‹ %s" 
_
 
fûíame
);

319 
	`f˛o£
(
Â
);

322 if(!
	`‰ód
(
ãxt
,(), 
°©b
.
°_size
 + 1, 
Â
))

323 
	`HTTRACE
(
APP_TRACE
, "Warning: mayÇot haveÑeadÉntire file!\n");

324 
ãxt
[
°©b
.
°_size
] = 0;

325 
	`f˛o£
(
Â
);

326 if(
¨gc
 > 2)

328 
ªg_exp
 = 
	`sˇn_robŸs_txt
(
ãxt
,
¨gv
[2]);

329 if(
ªg_exp
)

331 
	`HTTRACE
(
ALL_TRACE
, "REG EXP : %†\n" 
_
 
ªg_exp
);

332 
	`‰ì
(
ªg_exp
);

335 
	`‰ì
(
ãxt
);

338 
	}
}

	@Robot/src/RobotTxt.h

26 #i‚de‡
ROBOTTXT_H


27 
	#ROBOTTXT_H


	)

29 
	s_u£r_agít_
 {

30 * 
	m«me
;

31 
HTLi°
 * 
	mdißŒow
;

32 } 
	tU£rAgít
;

34 * 
skù_commíts
(*
±r
);

36 
U£rAgít
 * 
√w_u£r_agít
();

38 
BOOL
 
£t_«me_u£r_agít
(
U£rAgít
 *
ua
,*
«me
);

40 * 
gë_«me_u£r_agít
(
U£rAgít
 *
ua
);

42 
BOOL
 
add_dißŒow_u£r_agít
(
U£rAgít
 *
ua
, *
dißŒow
);

44 
HTLi°
 * 
gë_dißŒow_u£r_agít
(
U£rAgít
 *
ua
);

46 
BOOL
 
dñëe_u£r_agít
(
U£rAgít
 *
ua
);

48 
BOOL
 
dñëe_Æl_u£r_agíts
(
HTLi°
 *
u£r_agíts
);

50 
¥öt_u£r_agít
(
U£rAgít
 *
ua
);

52 
¥öt_Æl_u£r_agíts
(
HTLi°
 *
u£r_agíts
);

54 
HTLi°
 * 
gë_Æl_u£r_agíts
(*
rob_°r
);

56 
BOOL
 
gë_u£r_agíts
(* 
±r
, 
HTLi°
 *
u£r_agíts
);

58 
BOOL
 
put_°rög_dißŒow
(
HTChunk
 *
ch
, 
U£rAgít
 *
ua
);

60 * 
gë_ªguœr_ex¥essi⁄
(
HTLi°
* 
u£r_agíts
, *
«me_robŸ
);

62 * 
sˇn_robŸs_txt
(*
rob_°r
, *
«me_robŸ
);

	@acconfig.h

2 #unde‡
HT_DIRECT_WAIS


5 #unde‡
HT_MYSQL


8 #unde‡
HT_MD5


11 #unde‡
HT_DAV


14 #unde‡
HT_EXT


17 #unde‡
HT_EXPAT


20 #unde‡
HT_ZLIB


23 #unde‡
HT_POSIX_REGEX


26 #unde‡
HT_AUTOMATIC_RULES


29 #unde‡
SOCKS


30 #unde‡
SOCKS4


31 #unde‡
SOCKS5


34 #unde‡
LIBTCL


37 #unde‡
CYRILLIC


40 #unde‡
WWWLIB_SIG


43 #unde‡
HT_REENTRANT


46 #unde‡
HAVE_CTIME_R_2


49 #unde‡
HAVE_CTIME_R_3


52 #unde‡
HAVE_READDIR_R_2


55 #unde‡
HAVE_READDIR_R_3


58 #unde‡
HAVE_GETHOSTBYNAME_R_3


61 #unde‡
HAVE_GETHOSTBYNAME_R_5


64 #unde‡
HAVE_GETHOSTBYNAME_R_6


67 #unde‡
HAVE_GETHOSTBYADDR_R_5


70 #unde‡
HAVE_GETHOSTBYADDR_R_7


73 #unde‡
HAVE_GETHOSTBYADDR_R_8


76 #unde‡
GETLOGIN_R_RETURNS_INT


79 #unde‡
GETLOGIN_R_RETURNS_POINTER


82 #unde‡
W3C_PACKAGE


85 #unde‡
W3C_VERSION


88 #unde‡
W3C_ICONS


91 #unde‡
CACHE_FILE_PREFIX


94 #unde‡
TTY_IS_SELECTABLE


97 #unde‡
NOT_ASCII


100 #unde‡
HT_NO_NAGLE


103 #unde‡
HT_NO_PIPELINING


106 #unde‡
HT_FORCE_10


109 #unde‡
HT_NO_PIPELINING


112 #unde‡
HT_MUX


116 #unde‡
NO_EXTERN_TYPEDEF_FUNC


119 #unde‡
NO_PTR_UNDEF_STRUCT


122 #unde‡
BOOLEAN


125 #unde‡
RESOLV_CONF


128 #unde‡
RLOGIN_PROGRAM


131 #unde‡
TELNET_PROGRAM


134 #unde‡
TN3270_PROGRAM


137 #unde‡
TELNET_MINUS_L


140 #unde‡
u_ch¨


143 #unde‡
u∆ök


146 #unde‡
u_sh‹t


149 #unde‡
u_l⁄g


152 #unde‡
HAVE_LONG_TIME_T


155 #unde‡
HAVE_LONG_SIZE_T


157 @
	gBOTTOM
@

160 #unde‡
HAVE_SOCKET_ERRNO


163 #unde‡
HAVE_SYS_ERRLIST


166 #unde‡
HAVE_SYS_NERR


169 #unde‡
HAVE_TIMEZONE


172 #unde‡
HAVE_ALTZONE


175 #unde‡
HAVE_DAYLIGHT


178 #unde‡
HAVE_UXC_INETDEF_H


181 #unde‡
HAVE_DIRENT_INO


184 #unde‡
HAVE_TM_GMTOFF


187 #unde‡
HAVE_WINSIZE


190 #unde‡
NEGATIVE_TIMEZONE


193 #unde‡
NEED_SYS_ERRLIST_DECLARED


196 #unde‡
NEED_SYS_NERR_DECLARED


	@modules/expat/xmlparse/hashtable.c

31 
	~"xmldef.h
"

33 #ifde‡
XML_UNICODE_WCHAR_T


34 #i‚de‡
XML_UNICODE


35 
	#XML_UNICODE


	)

39 
	~"hashèbÀ.h
"

41 
	#INIT_SIZE
 64

	)

44 
	$keyeq
(
KEY
 
s1
, KEY 
s2
)

46 ; *
s1
 =*
s2
; s1++, s2++)

47 i‡(*
s1
 == 0)

50 
	}
}

53 
	$hash
(
KEY
 
s
)

55 
h
 = 0;

56 *
s
)

57 
h
 = (h << 5Ë+ h + ()*
s
++;

58  
h
;

59 
	}
}

61 
NAMED
 *
	$lookup
(
HASH_TABLE
 *
èbÀ
, 
KEY
 
«me
, 
size_t
 
¸óãSize
)

63 
size_t
 
i
;

64 i‡(
èbÀ
->
size
 == 0) {

65 i‡(!
¸óãSize
)

67 
èbÀ
->
v
 = 
	`ˇŒoc
(
INIT_SIZE
, (
NAMED
 *));

68 i‡(!
èbÀ
->
v
)

70 
èbÀ
->
size
 = 
INIT_SIZE
;

71 
èbÀ
->
u£dLim
 = 
INIT_SIZE
 / 2;

72 
i
 = 
	`hash
(
«me
Ë& (
èbÀ
->
size
 - 1);

75 
h
 = 
	`hash
(
«me
);

76 
i
 = 
h
 & (
èbÀ
->
size
 - 1);

77 
èbÀ
->
v
[
i
];

78 
i
 =0 ? i = 
èbÀ
->
size
 - 1 : --i) {

79 i‡(
	`keyeq
(
«me
, 
èbÀ
->
v
[
i
]->name))

80  
èbÀ
->
v
[
i
];

82 i‡(!
¸óãSize
)

84 i‡(
èbÀ
->
u£d
 =èbÀ->
u£dLim
) {

86 
size_t
 
√wSize
 = 
èbÀ
->
size
 * 2;

87 
NAMED
 **
√wV
 = 
	`ˇŒoc
(
√wSize
, (NAMED *));

88 i‡(!
√wV
)

90 
i
 = 0; i < 
èbÀ
->
size
; i++)

91 i‡(
èbÀ
->
v
[
i
]) {

92 
size_t
 
j
;

93 
j
 = 
	`hash
(
èbÀ
->
v
[
i
]->
«me
Ë& (
√wSize
 - 1);

94 
√wV
[
j
];

95 
j
 =0 ? j = 
√wSize
 - 1 : --j)

97 
√wV
[
j
] = 
èbÀ
->
v
[
i
];

99 
	`‰ì
(
èbÀ
->
v
);

100 
èbÀ
->
v
 = 
√wV
;

101 
èbÀ
->
size
 = 
√wSize
;

102 
èbÀ
->
u£dLim
 = 
√wSize
/2;

103 
i
 = 
h
 & (
èbÀ
->
size
 - 1);

104 
èbÀ
->
v
[
i
];

105 
i
 =0 ? i = 
èbÀ
->
size
 - 1 : --i)

109 
èbÀ
->
v
[
i
] = 
	`ˇŒoc
(1, 
¸óãSize
);

110 i‡(!
èbÀ
->
v
[
i
])

112 
èbÀ
->
v
[
i
]->
«me
 =Çame;

113 (
èbÀ
->
u£d
)++;

114  
èbÀ
->
v
[
i
];

115 
	}
}

117 
	$hashTabÀDe°roy
(
HASH_TABLE
 *
èbÀ
)

119 
size_t
 
i
;

120 
i
 = 0; i < 
èbÀ
->
size
; i++) {

121 
NAMED
 *
p
 = 
èbÀ
->
v
[
i
];

122 i‡(
p
)

123 
	`‰ì
(
p
);

125 
	`‰ì
(
èbÀ
->
v
);

126 
	}
}

128 
	$hashTabÀInô
(
HASH_TABLE
 *
p
)

130 
p
->
size
 = 0;

131 
p
->
u£dLim
 = 0;

132 
p
->
u£d
 = 0;

133 
p
->
v
 = 0;

134 
	}
}

136 
	$hashTabÀIãrInô
(
HASH_TABLE_ITER
 *
ôî
, c⁄° 
HASH_TABLE
 *
èbÀ
)

138 
ôî
->
p
 = 
èbÀ
->
v
;

139 
ôî
->
íd
 = iãr->
p
 + 
èbÀ
->
size
;

140 
	}
}

142 
NAMED
 *
	$hashTabÀIãrNext
(
HASH_TABLE_ITER
 *
ôî
)

144 
ôî
->
p
 !ôî->
íd
) {

145 
NAMED
 *
ãm
 = *(
ôî
->
p
)++;

146 i‡(
ãm
)

147  
ãm
;

150 
	}
}

	@modules/expat/xmlparse/hashtable.h

32 
	~<°ddef.h
>

34 #ifde‡
XML_UNICODE


36 #ifde‡
XML_UNICODE_WCHAR_T


37 c⁄° 
	twch¨_t
 *
	tKEY
;

39 c⁄° *
	tKEY
;

44 c⁄° *
	tKEY
;

49 
KEY
 
	m«me
;

50 } 
	tNAMED
;

53 
NAMED
 **
	mv
;

54 
size_t
 
	msize
;

55 
size_t
 
	mu£d
;

56 
size_t
 
	mu£dLim
;

57 } 
	tHASH_TABLE
;

59 
NAMED
 *
lookup
(
HASH_TABLE
 *
èbÀ
, 
KEY
 
«me
, 
size_t
 
¸óãSize
);

60 
hashTabÀInô
(
HASH_TABLE
 *);

61 
hashTabÀDe°roy
(
HASH_TABLE
 *);

64 
NAMED
 **
	mp
;

65 
NAMED
 **
	míd
;

66 } 
	tHASH_TABLE_ITER
;

68 
hashTabÀIãrInô
(
HASH_TABLE_ITER
 *, c⁄° 
HASH_TABLE
 *);

69 
NAMED
 *
hashTabÀIãrNext
(
HASH_TABLE_ITER
 *);

	@modules/expat/xmlparse/xmlparse.c

31 
	~"xmldef.h
"

32 
	~"xmÕ¨£.h
"

34 #ifde‡
XML_UNICODE


35 
	#XML_ENCODE_MAX
 
XML_UTF16_ENCODE_MAX


	)

36 
	#XmlC⁄vît
 
XmlUtf16C⁄vît


	)

37 
	#XmlGëI¡î«lEncodög
 
XmlGëUtf16I¡î«lEncodög


	)

38 
	#XmlGëI¡î«lEncodögNS
 
XmlGëUtf16I¡î«lEncodögNS


	)

39 
	#XmlEncode
 
XmlUtf16Encode


	)

40 
	#MUST_CONVERT
(
íc
, 
s
Ë(!”nc)->
isUtf16
 || ((()sË& 1))

	)

41 
	tICHAR
;

43 
	#XML_ENCODE_MAX
 
XML_UTF8_ENCODE_MAX


	)

44 
	#XmlC⁄vît
 
XmlUtf8C⁄vît


	)

45 
	#XmlGëI¡î«lEncodög
 
XmlGëUtf8I¡î«lEncodög


	)

46 
	#XmlGëI¡î«lEncodögNS
 
XmlGëUtf8I¡î«lEncodögNS


	)

47 
	#XmlEncode
 
XmlUtf8Encode


	)

48 
	#MUST_CONVERT
(
íc
, 
s
Ë(!”nc)->
isUtf8
)

	)

49 
	tICHAR
;

53 #i‚de‡
XML_NS


55 
	#XmlInôEncodögNS
 
XmlInôEncodög


	)

56 
	#XmlInôUnknownEncodögNS
 
XmlInôUnknownEncodög


	)

57 #unde‡
XmlGëI¡î«lEncodögNS


58 
	#XmlGëI¡î«lEncodögNS
 
XmlGëI¡î«lEncodög


	)

59 
	#XmlP¨£XmlDe˛NS
 
XmlP¨£XmlDe˛


	)

63 #ifde‡
XML_UNICODE_WCHAR_T


64 
	#XML_T
(
x
Ë
L
 ## 
	)
x

66 
	#XML_T
(
x
Ë
	)
x

70 
	#ROUND_UP
(
n
, 
sz
Ë((“Ë+ ((szË- 1)Ë& ~((szË- 1))

	)

72 
	~"xm…ok.h
"

73 
	~"xmÃﬁe.h
"

74 
	~"hashèbÀ.h
"

76 
	#INIT_TAG_BUF_SIZE
 32

	)

77 
	#INIT_DATA_BUF_SIZE
 1024

	)

78 
	#INIT_ATTS_SIZE
 16

	)

79 
	#INIT_BLOCK_SIZE
 1024

	)

80 
	#INIT_BUFFER_SIZE
 1024

	)

82 
	#EXPAND_SPARE
 24

	)

84 
	sbödög
 {

85 
¥efix
 *
	m¥efix
;

86 
bödög
 *
	m√xtTagBödög
;

87 
bödög
 *
	m¥evPªfixBödög
;

88 c⁄° 
©åibuã_id
 *
	m©tId
;

89 
XML_Ch¨
 *
	muri
;

90 
	muriLí
;

91 
	muriAŒoc
;

92 } 
	tBINDING
;

94 
	s¥efix
 {

95 c⁄° 
XML_Ch¨
 *
	m«me
;

96 
BINDING
 *
	mbödög
;

97 } 
	tPREFIX
;

100 c⁄° 
XML_Ch¨
 *
	m°r
;

101 c⁄° 
XML_Ch¨
 *
	mloˇlP¨t
;

102 
	muriLí
;

103 } 
	tTAG_NAME
;

105 
	sèg
 {

106 
èg
 *
	m∑ª¡
;

107 c⁄° *
	møwName
;

108 
	møwNameLígth
;

109 
TAG_NAME
 
	m«me
;

110 *
	mbuf
;

111 *
	mbufEnd
;

112 
BINDING
 *
	mbödögs
;

113 } 
	tTAG
;

116 c⁄° 
XML_Ch¨
 *
	m«me
;

117 c⁄° 
XML_Ch¨
 *
	mãxtPå
;

118 
	mãxtLí
;

119 c⁄° 
XML_Ch¨
 *
	msy°emId
;

120 c⁄° 
XML_Ch¨
 *
	mba£
;

121 c⁄° 
XML_Ch¨
 *
	mpublicId
;

122 c⁄° 
XML_Ch¨
 *
	mnŸ©i⁄
;

123 
	m›í
;

124 } 
	tENTITY
;

126 
	sblock
 {

127 
block
 *
	m√xt
;

128 
	msize
;

129 
XML_Ch¨
 
	ms
[1];

130 } 
	tBLOCK
;

133 
BLOCK
 *
	mblocks
;

134 
BLOCK
 *
	m‰ìBlocks
;

135 c⁄° 
XML_Ch¨
 *
	míd
;

136 
XML_Ch¨
 *
	m±r
;

137 
XML_Ch¨
 *
	m°¨t
;

138 } 
	tSTRING_POOL
;

142 
	s©åibuã_id
 {

143 
XML_Ch¨
 *
	m«me
;

144 
PREFIX
 *
	m¥efix
;

145 
	mmaybeTokíized
;

146 
	mxm s
;

147 } 
	tATTRIBUTE_ID
;

150 c⁄° 
ATTRIBUTE_ID
 *
	mid
;

151 
	misCd©a
;

152 c⁄° 
XML_Ch¨
 *
	mvÆue
;

153 } 
	tDEFAULT_ATTRIBUTE
;

156 c⁄° 
XML_Ch¨
 *
	m«me
;

157 
PREFIX
 *
	m¥efix
;

158 
	mnDeÁu…Aâs
;

159 
	mÆlocDeÁu…Aâs
;

160 
DEFAULT_ATTRIBUTE
 *
	mdeÁu…Aâs
;

161 } 
	tELEMENT_TYPE
;

164 
HASH_TABLE
 
	mgíîÆE¡ôõs
;

165 
HASH_TABLE
 
	mñemítTy≥s
;

166 
HASH_TABLE
 
	m©åibuãIds
;

167 
HASH_TABLE
 
	m¥efixes
;

168 
STRING_POOL
 
	mpoﬁ
;

169 
	mcom∂ëe
;

170 
	m°™dÆ⁄e
;

171 #ifde‡
XML_DTD


172 
HASH_TABLE
 
	m∑ømE¡ôõs
;

174 
PREFIX
 
	mdeÁu…Pªfix
;

175 } 
	tDTD
;

177 
	s›í_öã∫Æ_ítôy
 {

178 c⁄° *
	möã∫ÆEvítPå
;

179 c⁄° *
	möã∫ÆEvítEndPå
;

180 
›í_öã∫Æ_ítôy
 *
	m√xt
;

181 
ENTITY
 *
	mítôy
;

182 } 
	tOPEN_INTERNAL_ENTITY
;

184 
XML_Eº‹
 
	tPro˚ss‹
(
	tXML_P¨£r
 
	t∑r£r
,

185 c⁄° *
	t°¨t
,

186 c⁄° *
	tíd
,

187 c⁄° **
	tídPå
);

189 
Pro˚ss‹
 
	g¥ﬁogPro˚ss‹
;

190 
Pro˚ss‹
 
	g¥ﬁogInôPro˚ss‹
;

191 
Pro˚ss‹
 
	gc⁄ã¡Pro˚ss‹
;

192 
Pro˚ss‹
 
	gcd©aSe˘i⁄Pro˚ss‹
;

193 #ifde‡
XML_DTD


194 
Pro˚ss‹
 
	gign‹eSe˘i⁄Pro˚ss‹
;

196 
Pro˚ss‹
 
	gïûogPro˚ss‹
;

197 
Pro˚ss‹
 
	gîr‹Pro˚ss‹
;

198 
Pro˚ss‹
 
	gexã∫ÆE¡ôyInôPro˚ss‹
;

199 
Pro˚ss‹
 
	gexã∫ÆE¡ôyInôPro˚ss‹2
;

200 
Pro˚ss‹
 
	gexã∫ÆE¡ôyInôPro˚ss‹3
;

201 
Pro˚ss‹
 
	gexã∫ÆE¡ôyC⁄ã¡Pro˚ss‹
;

203 
XML_Eº‹


204 
h™dÀUnknownEncodög
(
XML_P¨£r
 
∑r£r
, c⁄° 
XML_Ch¨
 *
ícodögName
);

205 
XML_Eº‹


206 
¥o˚ssXmlDe˛
(
XML_P¨£r
 
∑r£r
, 
isGíîÆTextE¡ôy
, const *, const *);

207 
XML_Eº‹


208 
öôülizeEncodög
(
XML_P¨£r
 
∑r£r
);

209 
XML_Eº‹


210 
doPrﬁog
(
XML_P¨£r
 
∑r£r
, c⁄° 
ENCODING
 *
íc
, c⁄° *
s
,

211 c⁄° *
íd
, 
tok
, c⁄° *
√xt
, c⁄° **
√xtPå
);

212 
XML_Eº‹


213 
¥o˚ssI¡î«lP¨amE¡ôy
(
XML_P¨£r
 
∑r£r
, 
ENTITY
 *
ítôy
);

214 
XML_Eº‹


215 
doC⁄ã¡
(
XML_P¨£r
 
∑r£r
, 
°¨tTagLevñ
, c⁄° 
ENCODING
 *
íc
,

216 c⁄° *
°¨t
, c⁄° *
íd
, c⁄° **
ídPå
);

217 
XML_Eº‹


218 
doCd©aSe˘i⁄
(
XML_P¨£r
 
∑r£r
, c⁄° 
ENCODING
 *, c⁄° **
°¨tPå
, c⁄° *
íd
, c⁄° **
√xtPå
);

219 #ifde‡
XML_DTD


220 
XML_Eº‹


221 
doIgn‹eSe˘i⁄
(
XML_P¨£r
 
∑r£r
, c⁄° 
ENCODING
 *, c⁄° **
°¨tPå
, c⁄° *
íd
, c⁄° **
√xtPå
);

223 
XML_Eº‹
 
°‹eAâs
(
XML_P¨£r
 
∑r£r
, c⁄° 
ENCODING
 *, c⁄° *
s
,

224 
TAG_NAME
 *
ègNamePå
, 
BINDING
 **
bödögsPå
);

226 
addBödög
(
XML_P¨£r
 
∑r£r
, 
PREFIX
 *
¥efix
, c⁄° 
ATTRIBUTE_ID
 *
©tId
, c⁄° 
XML_Ch¨
 *
uri
, 
BINDING
 **
bödögsPå
);

228 
deföeAâribuã
(
ELEMENT_TYPE
 *
ty≥
, 
ATTRIBUTE_ID
 *, 
isCd©a
, c⁄° 
XML_Ch¨
 *
dÊtVÆue
);

229 
XML_Eº‹


230 
°‹eAâribuãVÆue
(
XML_P¨£r
 
∑r£r
, c⁄° 
ENCODING
 *, 
isCd©a
, const *, const *,

231 
STRING_POOL
 *);

232 
XML_Eº‹


233 
≠≥ndAâribuãVÆue
(
XML_P¨£r
 
∑r£r
, c⁄° 
ENCODING
 *, 
isCd©a
, const *, const *,

234 
STRING_POOL
 *);

235 
ATTRIBUTE_ID
 *

236 
gëAâribuãId
(
XML_P¨£r
 
∑r£r
, c⁄° 
ENCODING
 *
íc
, c⁄° *
°¨t
, c⁄° *
íd
);

237 
£tEÀmítTy≥Pªfix
(
XML_P¨£r
 
∑r£r
, 
ELEMENT_TYPE
 *);

238 
XML_Eº‹


239 
°‹eE¡ôyVÆue
(
XML_P¨£r
 
∑r£r
, c⁄° 
ENCODING
 *
íc
, c⁄° *
°¨t
, c⁄° *
íd
);

241 
ªp‹tPro˚ssögIn°ru˘i⁄
(
XML_P¨£r
 
∑r£r
, c⁄° 
ENCODING
 *
íc
, c⁄° *
°¨t
, c⁄° *
íd
);

243 
ªp‹tCommít
(
XML_P¨£r
 
∑r£r
, c⁄° 
ENCODING
 *
íc
, c⁄° *
°¨t
, c⁄° *
íd
);

245 
ªp‹tDeÁu…
(
XML_P¨£r
 
∑r£r
, c⁄° 
ENCODING
 *
íc
, c⁄° *
°¨t
, c⁄° *
íd
);

247 c⁄° 
XML_Ch¨
 *
gëC⁄ãxt
(
XML_P¨£r
 
∑r£r
);

248 
£tC⁄ãxt
(
XML_P¨£r
 
∑r£r
, c⁄° 
XML_Ch¨
 *
c⁄ãxt
);

249 
n‹mÆizePublicId
(
XML_Ch¨
 *
s
);

250 
dtdInô
(
DTD
 *);

251 
dtdDe°roy
(
DTD
 *);

252 
dtdC›y
(
DTD
 *
√wDtd
, c⁄° DTD *
ﬁdDtd
);

253 
c›yE¡ôyTabÀ
(
HASH_TABLE
 *, 
STRING_POOL
 *, const HASH_TABLE *);

254 #ifde‡
XML_DTD


255 
dtdSw≠
(
DTD
 *, DTD *);

257 
poﬁInô
(
STRING_POOL
 *);

258 
poﬁCÀ¨
(
STRING_POOL
 *);

259 
poﬁDe°roy
(
STRING_POOL
 *);

260 
XML_Ch¨
 *
poﬁAµíd
(
STRING_POOL
 *
poﬁ
, c⁄° 
ENCODING
 *
íc
,

261 c⁄° *
±r
, c⁄° *
íd
);

262 
XML_Ch¨
 *
poﬁSt‹eSåög
(
STRING_POOL
 *
poﬁ
, c⁄° 
ENCODING
 *
íc
,

263 c⁄° *
±r
, c⁄° *
íd
);

264 
poﬁGrow
(
STRING_POOL
 *
poﬁ
);

265 c⁄° 
XML_Ch¨
 *
poﬁC›ySåög
(
STRING_POOL
 *
poﬁ
, c⁄° XML_Ch¨ *
s
);

266 c⁄° 
XML_Ch¨
 *
poﬁC›ySåögN
(
STRING_POOL
 *
poﬁ
, c⁄° XML_Ch¨ *
s
, 
n
);

268 
	#poﬁSèπ
(
poﬁ
Ë(’oﬁ)->
°¨t
)

	)

269 
	#poﬁEnd
(
poﬁ
Ë(’oﬁ)->
±r
)

	)

270 
	#poﬁLígth
(
poﬁ
Ë(’oﬁ)->
±r
 - (poﬁ)->
°¨t
)

	)

271 
	#poﬁCh›
(
poﬁ
Ë(()--’oﬁ->
±r
))

	)

272 
	#poﬁLa°Ch¨
(
poﬁ
Ë((’oﬁ)->
±r
)[-1])

	)

273 
	#poﬁDisˇrd
(
poﬁ
Ë(’oﬁ)->
±r
 = (poﬁ)->
°¨t
)

	)

274 
	#poﬁFöish
(
poﬁ
Ë(’oﬁ)->
°¨t
 = (poﬁ)->
±r
)

	)

275 
	#poﬁAµídCh¨
(
poﬁ
, 
c
) \

276 (((
poﬁ
)->
±r
 =’oﬁ)->
íd
 && !
	`poﬁGrow
(pool)) \

278 : ((*((
poﬁ
)->
±r
)++ = 
c
), 1))

	)

282 *
	mm_u£rD©a
;

283 *
	mm_h™dÀrArg
;

284 *
	mm_buf„r
;

286 c⁄° *
	mm_buf„rPå
;

288 *
	mm_buf„rEnd
;

290 c⁄° *
	mm_buf„rLim
;

291 
	mm_∑r£EndByãIndex
;

292 c⁄° *
	mm_∑r£EndPå
;

293 
XML_Ch¨
 *
	mm_d©aBuf
;

294 
XML_Ch¨
 *
	mm_d©aBufEnd
;

295 
XML_SèπEÀmítH™dÀr
 
	mm_°¨tEÀmítH™dÀr
;

296 
XML_EndEÀmítH™dÀr
 
	mm_ídEÀmítH™dÀr
;

297 
XML_Ch¨a˘îD©aH™dÀr
 
	mm_ch¨a˘îD©aH™dÀr
;

298 
XML_Pro˚ssögIn°ru˘i⁄H™dÀr
 
	mm_¥o˚ssögIn°ru˘i⁄H™dÀr
;

299 
XML_CommítH™dÀr
 
	mm_commítH™dÀr
;

300 
XML_SèπCd©aSe˘i⁄H™dÀr
 
	mm_°¨tCd©aSe˘i⁄H™dÀr
;

301 
XML_EndCd©aSe˘i⁄H™dÀr
 
	mm_ídCd©aSe˘i⁄H™dÀr
;

302 
XML_DeÁu…H™dÀr
 
	mm_deÁu…H™dÀr
;

303 
XML_SèπDo˘y≥De˛H™dÀr
 
	mm_°¨tDo˘y≥De˛H™dÀr
;

304 
XML_EndDo˘y≥De˛H™dÀr
 
	mm_ídDo˘y≥De˛H™dÀr
;

305 
XML_U≈¨£dE¡ôyDe˛H™dÀr
 
	mm_u≈¨£dE¡ôyDe˛H™dÀr
;

306 
XML_NŸ©i⁄De˛H™dÀr
 
	mm_nŸ©i⁄De˛H™dÀr
;

307 
XML_SèπName•a˚De˛H™dÀr
 
	mm_°¨tName•a˚De˛H™dÀr
;

308 
XML_EndName•a˚De˛H™dÀr
 
	mm_ídName•a˚De˛H™dÀr
;

309 
XML_NŸSèndÆ⁄eH™dÀr
 
	mm_nŸSèndÆ⁄eH™dÀr
;

310 
XML_Exã∫ÆE¡ôyRefH™dÀr
 
	mm_exã∫ÆE¡ôyRefH™dÀr
;

311 *
	mm_exã∫ÆE¡ôyRefH™dÀrArg
;

312 
XML_UnknownEncodögH™dÀr
 
	mm_unknownEncodögH™dÀr
;

313 c⁄° 
ENCODING
 *
	mm_ícodög
;

314 
INIT_ENCODING
 
	mm_öôEncodög
;

315 c⁄° 
ENCODING
 *
	mm_öã∫ÆEncodög
;

316 c⁄° 
XML_Ch¨
 *
	mm_¥ŸocﬁEncodögName
;

317 
	mm_ns
;

318 *
	mm_unknownEncodögMem
;

319 *
	mm_unknownEncodögD©a
;

320 *
	mm_unknownEncodögH™dÀrD©a
;

321 (*
	mm_unknownEncodögRñó£
)(*);

322 
PROLOG_STATE
 
	mm_¥ﬁogSèã
;

323 
Pro˚ss‹
 *
	mm_¥o˚ss‹
;

324 
XML_Eº‹
 
	mm_îr‹Code
;

325 c⁄° *
	mm_evítPå
;

326 c⁄° *
	mm_evítEndPå
;

327 c⁄° *
	mm_posôi⁄På
;

328 
OPEN_INTERNAL_ENTITY
 *
	mm_›íI¡î«lE¡ôõs
;

329 
	mm_deÁu…Ex∑ndI¡î«lE¡ôõs
;

330 
	mm_ègLevñ
;

331 
ENTITY
 *
	mm_de˛E¡ôy
;

332 c⁄° 
XML_Ch¨
 *
	mm_de˛NŸ©i⁄Name
;

333 c⁄° 
XML_Ch¨
 *
	mm_de˛NŸ©i⁄PublicId
;

334 
ELEMENT_TYPE
 *
	mm_de˛EÀmítTy≥
;

335 
ATTRIBUTE_ID
 *
	mm_de˛AâribuãId
;

336 
	mm_de˛AâribuãIsCd©a
;

337 
DTD
 
	mm_dtd
;

338 c⁄° 
XML_Ch¨
 *
	mm_curBa£
;

339 
TAG
 *
	mm_ègSèck
;

340 
TAG
 *
	mm_‰ìTagLi°
;

341 
BINDING
 *
	mm_öhîôedBödögs
;

342 
BINDING
 *
	mm_‰ìBödögLi°
;

343 
	mm_©tsSize
;

344 
	mm_nS≥cifõdAâs
;

345 
ATTRIBUTE
 *
	mm_©ts
;

346 
POSITION
 
	mm_posôi⁄
;

347 
STRING_POOL
 
	mm_ãmpPoﬁ
;

348 
STRING_POOL
 
	mm_ãmp2Poﬁ
;

349 *
	mm_groupC⁄√˘‹
;

350 
	mm_groupSize
;

351 
	mm_hadExã∫ÆDo˘y≥
;

352 
XML_Ch¨
 
	mm_«me•a˚Sï¨©‹
;

353 #ifde‡
XML_DTD


354 
XML_P¨amE¡ôyP¨sög
 
	mm_∑ømE¡ôyP¨sög
;

355 
XML_P¨£r
 
	mm_∑ª¡P¨£r
;

357 } 
	tP¨£r
;

359 
	#u£rD©a
 (((
P¨£r
 *)
∑r£r
)->
m_u£rD©a
)

	)

360 
	#h™dÀrArg
 (((
P¨£r
 *)
∑r£r
)->
m_h™dÀrArg
)

	)

361 
	#°¨tEÀmítH™dÀr
 (((
P¨£r
 *)
∑r£r
)->
m_°¨tEÀmítH™dÀr
)

	)

362 
	#ídEÀmítH™dÀr
 (((
P¨£r
 *)
∑r£r
)->
m_ídEÀmítH™dÀr
)

	)

363 
	#ch¨a˘îD©aH™dÀr
 (((
P¨£r
 *)
∑r£r
)->
m_ch¨a˘îD©aH™dÀr
)

	)

364 
	#¥o˚ssögIn°ru˘i⁄H™dÀr
 (((
P¨£r
 *)
∑r£r
)->
m_¥o˚ssögIn°ru˘i⁄H™dÀr
)

	)

365 
	#commítH™dÀr
 (((
P¨£r
 *)
∑r£r
)->
m_commítH™dÀr
)

	)

366 
	#°¨tCd©aSe˘i⁄H™dÀr
 (((
P¨£r
 *)
∑r£r
)->
m_°¨tCd©aSe˘i⁄H™dÀr
)

	)

367 
	#ídCd©aSe˘i⁄H™dÀr
 (((
P¨£r
 *)
∑r£r
)->
m_ídCd©aSe˘i⁄H™dÀr
)

	)

368 
	#deÁu…H™dÀr
 (((
P¨£r
 *)
∑r£r
)->
m_deÁu…H™dÀr
)

	)

369 
	#°¨tDo˘y≥De˛H™dÀr
 (((
P¨£r
 *)
∑r£r
)->
m_°¨tDo˘y≥De˛H™dÀr
)

	)

370 
	#ídDo˘y≥De˛H™dÀr
 (((
P¨£r
 *)
∑r£r
)->
m_ídDo˘y≥De˛H™dÀr
)

	)

371 
	#u≈¨£dE¡ôyDe˛H™dÀr
 (((
P¨£r
 *)
∑r£r
)->
m_u≈¨£dE¡ôyDe˛H™dÀr
)

	)

372 
	#nŸ©i⁄De˛H™dÀr
 (((
P¨£r
 *)
∑r£r
)->
m_nŸ©i⁄De˛H™dÀr
)

	)

373 
	#°¨tName•a˚De˛H™dÀr
 (((
P¨£r
 *)
∑r£r
)->
m_°¨tName•a˚De˛H™dÀr
)

	)

374 
	#ídName•a˚De˛H™dÀr
 (((
P¨£r
 *)
∑r£r
)->
m_ídName•a˚De˛H™dÀr
)

	)

375 
	#nŸSèndÆ⁄eH™dÀr
 (((
P¨£r
 *)
∑r£r
)->
m_nŸSèndÆ⁄eH™dÀr
)

	)

376 
	#exã∫ÆE¡ôyRefH™dÀr
 (((
P¨£r
 *)
∑r£r
)->
m_exã∫ÆE¡ôyRefH™dÀr
)

	)

377 
	#exã∫ÆE¡ôyRefH™dÀrArg
 (((
P¨£r
 *)
∑r£r
)->
m_exã∫ÆE¡ôyRefH™dÀrArg
)

	)

378 
	#unknownEncodögH™dÀr
 (((
P¨£r
 *)
∑r£r
)->
m_unknownEncodögH™dÀr
)

	)

379 
	#ícodög
 (((
P¨£r
 *)
∑r£r
)->
m_ícodög
)

	)

380 
	#öôEncodög
 (((
P¨£r
 *)
∑r£r
)->
m_öôEncodög
)

	)

381 
	#öã∫ÆEncodög
 (((
P¨£r
 *)
∑r£r
)->
m_öã∫ÆEncodög
)

	)

382 
	#unknownEncodögMem
 (((
P¨£r
 *)
∑r£r
)->
m_unknownEncodögMem
)

	)

383 
	#unknownEncodögD©a
 (((
P¨£r
 *)
∑r£r
)->
m_unknownEncodögD©a
)

	)

384 
	#unknownEncodögH™dÀrD©a
 \

385 (((
P¨£r
 *)
∑r£r
)->
m_unknownEncodögH™dÀrD©a
)

	)

386 
	#unknownEncodögRñó£
 (((
P¨£r
 *)
∑r£r
)->
m_unknownEncodögRñó£
)

	)

387 
	#¥ŸocﬁEncodögName
 (((
P¨£r
 *)
∑r£r
)->
m_¥ŸocﬁEncodögName
)

	)

388 
	#ns
 (((
P¨£r
 *)
∑r£r
)->
m_ns
)

	)

389 
	#¥ﬁogSèã
 (((
P¨£r
 *)
∑r£r
)->
m_¥ﬁogSèã
)

	)

390 
	#¥o˚ss‹
 (((
P¨£r
 *)
∑r£r
)->
m_¥o˚ss‹
)

	)

391 
	#îr‹Code
 (((
P¨£r
 *)
∑r£r
)->
m_îr‹Code
)

	)

392 
	#evítPå
 (((
P¨£r
 *)
∑r£r
)->
m_evítPå
)

	)

393 
	#evítEndPå
 (((
P¨£r
 *)
∑r£r
)->
m_evítEndPå
)

	)

394 
	#posôi⁄På
 (((
P¨£r
 *)
∑r£r
)->
m_posôi⁄På
)

	)

395 
	#posôi⁄
 (((
P¨£r
 *)
∑r£r
)->
m_posôi⁄
)

	)

396 
	#›íI¡î«lE¡ôõs
 (((
P¨£r
 *)
∑r£r
)->
m_›íI¡î«lE¡ôõs
)

	)

397 
	#deÁu…Ex∑ndI¡î«lE¡ôõs
 (((
P¨£r
 *)
∑r£r
)->
m_deÁu…Ex∑ndI¡î«lE¡ôõs
)

	)

398 
	#ègLevñ
 (((
P¨£r
 *)
∑r£r
)->
m_ègLevñ
)

	)

399 
	#buf„r
 (((
P¨£r
 *)
∑r£r
)->
m_buf„r
)

	)

400 
	#buf„rPå
 (((
P¨£r
 *)
∑r£r
)->
m_buf„rPå
)

	)

401 
	#buf„rEnd
 (((
P¨£r
 *)
∑r£r
)->
m_buf„rEnd
)

	)

402 
	#∑r£EndByãIndex
 (((
P¨£r
 *)
∑r£r
)->
m_∑r£EndByãIndex
)

	)

403 
	#∑r£EndPå
 (((
P¨£r
 *)
∑r£r
)->
m_∑r£EndPå
)

	)

404 
	#buf„rLim
 (((
P¨£r
 *)
∑r£r
)->
m_buf„rLim
)

	)

405 
	#d©aBuf
 (((
P¨£r
 *)
∑r£r
)->
m_d©aBuf
)

	)

406 
	#d©aBufEnd
 (((
P¨£r
 *)
∑r£r
)->
m_d©aBufEnd
)

	)

407 
	#dtd
 (((
P¨£r
 *)
∑r£r
)->
m_dtd
)

	)

408 
	#curBa£
 (((
P¨£r
 *)
∑r£r
)->
m_curBa£
)

	)

409 
	#de˛E¡ôy
 (((
P¨£r
 *)
∑r£r
)->
m_de˛E¡ôy
)

	)

410 
	#de˛NŸ©i⁄Name
 (((
P¨£r
 *)
∑r£r
)->
m_de˛NŸ©i⁄Name
)

	)

411 
	#de˛NŸ©i⁄PublicId
 (((
P¨£r
 *)
∑r£r
)->
m_de˛NŸ©i⁄PublicId
)

	)

412 
	#de˛EÀmítTy≥
 (((
P¨£r
 *)
∑r£r
)->
m_de˛EÀmítTy≥
)

	)

413 
	#de˛AâribuãId
 (((
P¨£r
 *)
∑r£r
)->
m_de˛AâribuãId
)

	)

414 
	#de˛AâribuãIsCd©a
 (((
P¨£r
 *)
∑r£r
)->
m_de˛AâribuãIsCd©a
)

	)

415 
	#‰ìTagLi°
 (((
P¨£r
 *)
∑r£r
)->
m_‰ìTagLi°
)

	)

416 
	#‰ìBödögLi°
 (((
P¨£r
 *)
∑r£r
)->
m_‰ìBödögLi°
)

	)

417 
	#öhîôedBödögs
 (((
P¨£r
 *)
∑r£r
)->
m_öhîôedBödögs
)

	)

418 
	#ègSèck
 (((
P¨£r
 *)
∑r£r
)->
m_ègSèck
)

	)

419 
	#©ts
 (((
P¨£r
 *)
∑r£r
)->
m_©ts
)

	)

420 
	#©tsSize
 (((
P¨£r
 *)
∑r£r
)->
m_©tsSize
)

	)

421 
	#nS≥cifõdAâs
 (((
P¨£r
 *)
∑r£r
)->
m_nS≥cifõdAâs
)

	)

422 
	#ãmpPoﬁ
 (((
P¨£r
 *)
∑r£r
)->
m_ãmpPoﬁ
)

	)

423 
	#ãmp2Poﬁ
 (((
P¨£r
 *)
∑r£r
)->
m_ãmp2Poﬁ
)

	)

424 
	#groupC⁄√˘‹
 (((
P¨£r
 *)
∑r£r
)->
m_groupC⁄√˘‹
)

	)

425 
	#groupSize
 (((
P¨£r
 *)
∑r£r
)->
m_groupSize
)

	)

426 
	#hadExã∫ÆDo˘y≥
 (((
P¨£r
 *)
∑r£r
)->
m_hadExã∫ÆDo˘y≥
)

	)

427 
	#«me•a˚Sï¨©‹
 (((
P¨£r
 *)
∑r£r
)->
m_«me•a˚Sï¨©‹
)

	)

428 #ifde‡
XML_DTD


429 
	#∑ª¡P¨£r
 (((
P¨£r
 *)
∑r£r
)->
m_∑ª¡P¨£r
)

	)

430 
	#∑ømE¡ôyP¨sög
 (((
P¨£r
 *)
∑r£r
)->
m_∑ømE¡ôyP¨sög
)

	)

433 #ifde‡
_MSC_VER


434 #ifde‡
_DEBUG


435 
P¨£r
 *
	$asP¨£r
(
XML_P¨£r
 
∑r£r
)

437  
∑r£r
;

438 
	}
}

442 
XML_P¨£r
 
	$XML_P¨£rCª©e
(c⁄° 
XML_Ch¨
 *
ícodögName
)

444 
XML_P¨£r
 
∑r£r
 = 
	`mÆloc
((
P¨£r
));

445 i‡(!
∑r£r
)

446  
∑r£r
;

447 
¥o˚ss‹
 = 
¥ﬁogInôPro˚ss‹
;

448 
	`XmlPrﬁogSèãInô
(&
¥ﬁogSèã
);

449 
u£rD©a
 = 0;

450 
h™dÀrArg
 = 0;

451 
°¨tEÀmítH™dÀr
 = 0;

452 
ídEÀmítH™dÀr
 = 0;

453 
ch¨a˘îD©aH™dÀr
 = 0;

454 
¥o˚ssögIn°ru˘i⁄H™dÀr
 = 0;

455 
commítH™dÀr
 = 0;

456 
°¨tCd©aSe˘i⁄H™dÀr
 = 0;

457 
ídCd©aSe˘i⁄H™dÀr
 = 0;

458 
deÁu…H™dÀr
 = 0;

459 
°¨tDo˘y≥De˛H™dÀr
 = 0;

460 
ídDo˘y≥De˛H™dÀr
 = 0;

461 
u≈¨£dE¡ôyDe˛H™dÀr
 = 0;

462 
nŸ©i⁄De˛H™dÀr
 = 0;

463 
°¨tName•a˚De˛H™dÀr
 = 0;

464 
ídName•a˚De˛H™dÀr
 = 0;

465 
nŸSèndÆ⁄eH™dÀr
 = 0;

466 
exã∫ÆE¡ôyRefH™dÀr
 = 0;

467 
exã∫ÆE¡ôyRefH™dÀrArg
 = 
∑r£r
;

468 
unknownEncodögH™dÀr
 = 0;

469 
buf„r
 = 0;

470 
buf„rPå
 = 0;

471 
buf„rEnd
 = 0;

472 
∑r£EndByãIndex
 = 0;

473 
∑r£EndPå
 = 0;

474 
buf„rLim
 = 0;

475 
de˛EÀmítTy≥
 = 0;

476 
de˛AâribuãId
 = 0;

477 
de˛E¡ôy
 = 0;

478 
de˛NŸ©i⁄Name
 = 0;

479 
de˛NŸ©i⁄PublicId
 = 0;

480 
	`mem£t
(&
posôi⁄
, 0, (
POSITION
));

481 
îr‹Code
 = 
XML_ERROR_NONE
;

482 
evítPå
 = 0;

483 
evítEndPå
 = 0;

484 
posôi⁄På
 = 0;

485 
›íI¡î«lE¡ôõs
 = 0;

486 
ègLevñ
 = 0;

487 
ègSèck
 = 0;

488 
‰ìTagLi°
 = 0;

489 
‰ìBödögLi°
 = 0;

490 
öhîôedBödögs
 = 0;

491 
©tsSize
 = 
INIT_ATTS_SIZE
;

492 
©ts
 = 
	`mÆloc
(
©tsSize
 * (
ATTRIBUTE
));

493 
nS≥cifõdAâs
 = 0;

494 
d©aBuf
 = 
	`mÆloc
(
INIT_DATA_BUF_SIZE
 * (
XML_Ch¨
));

495 
groupSize
 = 0;

496 
groupC⁄√˘‹
 = 0;

497 
hadExã∫ÆDo˘y≥
 = 0;

498 
unknownEncodögMem
 = 0;

499 
unknownEncodögRñó£
 = 0;

500 
unknownEncodögD©a
 = 0;

501 
unknownEncodögH™dÀrD©a
 = 0;

502 
«me•a˚Sï¨©‹
 = '!';

503 #ifde‡
XML_DTD


504 
∑ª¡P¨£r
 = 0;

505 
∑ømE¡ôyP¨sög
 = 
XML_PARAM_ENTITY_PARSING_NEVER
;

507 
ns
 = 0;

508 
	`poﬁInô
(&
ãmpPoﬁ
);

509 
	`poﬁInô
(&
ãmp2Poﬁ
);

510 
¥ŸocﬁEncodögName
 = 
ícodögName
 ? 
	`poﬁC›ySåög
(&
ãmpPoﬁ
,ÉncodingName) : 0;

511 
curBa£
 = 0;

512 i‡(!
	`dtdInô
(&
dtd
Ë|| !
©ts
 || !
d©aBuf


513 || (
ícodögName
 && !
¥ŸocﬁEncodögName
)) {

514 
	`XML_P¨£rFªe
(
∑r£r
);

517 
d©aBufEnd
 = 
d©aBuf
 + 
INIT_DATA_BUF_SIZE
;

518 
	`XmlInôEncodög
(&
öôEncodög
, &
ícodög
, 0);

519 
öã∫ÆEncodög
 = 
	`XmlGëI¡î«lEncodög
();

520  
∑r£r
;

521 
	}
}

523 
XML_P¨£r
 
	$XML_P¨£rCª©eNS
(c⁄° 
XML_Ch¨
 *
ícodögName
, XML_Ch¨ 
nsSï
)

526 c⁄° 
XML_Ch¨
 
im∂icôC⁄ãxt
[] = {

527 
	`XML_T
('x'), XML_T('m'), XML_T('l'), XML_T('='),

528 
	`XML_T
('h'), XML_T('t'), XML_T('t'), XML_T('p'), XML_T(':'),

529 
	`XML_T
('/'), XML_T('/'), XML_T('w'), XML_T('w'), XML_T('w'),

530 
	`XML_T
('.'), XML_T('w'), XML_T('3'),

531 
	`XML_T
('.'), XML_T('o'), XML_T('r'), XML_T('g'),

532 
	`XML_T
('/'), XML_T('X'), XML_T('M'), XML_T('L'),

533 
	`XML_T
('/'), XML_T('1'), XML_T('9'), XML_T('9'), XML_T('8'),

534 
	`XML_T
('/'), XML_T('n'), XML_T('a'), XML_T('m'), XML_T('e'),

535 
	`XML_T
('s'), XML_T('p'), XML_T('a'), XML_T('c'), XML_T('e'),

536 
	`XML_T
('\0')

539 
XML_P¨£r
 
∑r£r
 = 
	`XML_P¨£rCª©e
(
ícodögName
);

540 i‡(
∑r£r
) {

541 
	`XmlInôEncodögNS
(&
öôEncodög
, &
ícodög
, 0);

542 
ns
 = 1;

543 
öã∫ÆEncodög
 = 
	`XmlGëI¡î«lEncodögNS
();

544 
«me•a˚Sï¨©‹
 = 
nsSï
;

546 i‡(!
	`£tC⁄ãxt
(
∑r£r
, 
im∂icôC⁄ãxt
)) {

547 
	`XML_P¨£rFªe
(
∑r£r
);

550  
∑r£r
;

551 
	}
}

553 
	$XML_SëEncodög
(
XML_P¨£r
 
∑r£r
, c⁄° 
XML_Ch¨
 *
ícodögName
)

555 i‡(!
ícodögName
)

556 
¥ŸocﬁEncodögName
 = 0;

558 
¥ŸocﬁEncodögName
 = 
	`poﬁC›ySåög
(&
ãmpPoﬁ
, 
ícodögName
);

559 i‡(!
¥ŸocﬁEncodögName
)

563 
	}
}

565 
XML_P¨£r
 
	$XML_Exã∫ÆE¡ôyP¨£rCª©e
(
XML_P¨£r
 
ﬁdP¨£r
,

566 c⁄° 
XML_Ch¨
 *
c⁄ãxt
,

567 c⁄° 
XML_Ch¨
 *
ícodögName
)

569 
XML_P¨£r
 
∑r£r
 = 
ﬁdP¨£r
;

570 
DTD
 *
ﬁdDtd
 = &
dtd
;

571 
XML_SèπEÀmítH™dÀr
 
ﬁdSèπEÀmítH™dÀr
 = 
°¨tEÀmítH™dÀr
;

572 
XML_EndEÀmítH™dÀr
 
ﬁdEndEÀmítH™dÀr
 = 
ídEÀmítH™dÀr
;

573 
XML_Ch¨a˘îD©aH™dÀr
 
ﬁdCh¨a˘îD©aH™dÀr
 = 
ch¨a˘îD©aH™dÀr
;

574 
XML_Pro˚ssögIn°ru˘i⁄H™dÀr
 
ﬁdPro˚ssögIn°ru˘i⁄H™dÀr
 = 
¥o˚ssögIn°ru˘i⁄H™dÀr
;

575 
XML_CommítH™dÀr
 
ﬁdCommítH™dÀr
 = 
commítH™dÀr
;

576 
XML_SèπCd©aSe˘i⁄H™dÀr
 
ﬁdSèπCd©aSe˘i⁄H™dÀr
 = 
°¨tCd©aSe˘i⁄H™dÀr
;

577 
XML_EndCd©aSe˘i⁄H™dÀr
 
ﬁdEndCd©aSe˘i⁄H™dÀr
 = 
ídCd©aSe˘i⁄H™dÀr
;

578 
XML_DeÁu…H™dÀr
 
ﬁdDeÁu…H™dÀr
 = 
deÁu…H™dÀr
;

579 
XML_SèπName•a˚De˛H™dÀr
 
ﬁdSèπName•a˚De˛H™dÀr
 = 
°¨tName•a˚De˛H™dÀr
;

580 
XML_EndName•a˚De˛H™dÀr
 
ﬁdEndName•a˚De˛H™dÀr
 = 
ídName•a˚De˛H™dÀr
;

581 
XML_NŸSèndÆ⁄eH™dÀr
 
ﬁdNŸSèndÆ⁄eH™dÀr
 = 
nŸSèndÆ⁄eH™dÀr
;

582 
XML_Exã∫ÆE¡ôyRefH™dÀr
 
ﬁdExã∫ÆE¡ôyRefH™dÀr
 = 
exã∫ÆE¡ôyRefH™dÀr
;

583 
XML_UnknownEncodögH™dÀr
 
ﬁdUnknownEncodögH™dÀr
 = 
unknownEncodögH™dÀr
;

584 *
ﬁdU£rD©a
 = 
u£rD©a
;

585 *
ﬁdH™dÀrArg
 = 
h™dÀrArg
;

586 
ﬁdDeÁu…Ex∑ndI¡î«lE¡ôõs
 = 
deÁu…Ex∑ndI¡î«lE¡ôõs
;

587 *
ﬁdExã∫ÆE¡ôyRefH™dÀrArg
 = 
exã∫ÆE¡ôyRefH™dÀrArg
;

588 #ifde‡
XML_DTD


589 
ﬁdP¨amE¡ôyP¨sög
 = 
∑ømE¡ôyP¨sög
;

591 
∑r£r
 = (
ns


592 ? 
	`XML_P¨£rCª©eNS
(
ícodögName
, 
«me•a˚Sï¨©‹
)

593 : 
	`XML_P¨£rCª©e
(
ícodögName
));

594 i‡(!
∑r£r
)

596 
°¨tEÀmítH™dÀr
 = 
ﬁdSèπEÀmítH™dÀr
;

597 
ídEÀmítH™dÀr
 = 
ﬁdEndEÀmítH™dÀr
;

598 
ch¨a˘îD©aH™dÀr
 = 
ﬁdCh¨a˘îD©aH™dÀr
;

599 
¥o˚ssögIn°ru˘i⁄H™dÀr
 = 
ﬁdPro˚ssögIn°ru˘i⁄H™dÀr
;

600 
commítH™dÀr
 = 
ﬁdCommítH™dÀr
;

601 
°¨tCd©aSe˘i⁄H™dÀr
 = 
ﬁdSèπCd©aSe˘i⁄H™dÀr
;

602 
ídCd©aSe˘i⁄H™dÀr
 = 
ﬁdEndCd©aSe˘i⁄H™dÀr
;

603 
deÁu…H™dÀr
 = 
ﬁdDeÁu…H™dÀr
;

604 
°¨tName•a˚De˛H™dÀr
 = 
ﬁdSèπName•a˚De˛H™dÀr
;

605 
ídName•a˚De˛H™dÀr
 = 
ﬁdEndName•a˚De˛H™dÀr
;

606 
nŸSèndÆ⁄eH™dÀr
 = 
ﬁdNŸSèndÆ⁄eH™dÀr
;

607 
exã∫ÆE¡ôyRefH™dÀr
 = 
ﬁdExã∫ÆE¡ôyRefH™dÀr
;

608 
unknownEncodögH™dÀr
 = 
ﬁdUnknownEncodögH™dÀr
;

609 
u£rD©a
 = 
ﬁdU£rD©a
;

610 i‡(
ﬁdU£rD©a
 =
ﬁdH™dÀrArg
)

611 
h™dÀrArg
 = 
u£rD©a
;

613 
h™dÀrArg
 = 
∑r£r
;

614 i‡(
ﬁdExã∫ÆE¡ôyRefH™dÀrArg
 !
ﬁdP¨£r
)

615 
exã∫ÆE¡ôyRefH™dÀrArg
 = 
ﬁdExã∫ÆE¡ôyRefH™dÀrArg
;

616 
deÁu…Ex∑ndI¡î«lE¡ôõs
 = 
ﬁdDeÁu…Ex∑ndI¡î«lE¡ôõs
;

617 #ifde‡
XML_DTD


618 
∑ømE¡ôyP¨sög
 = 
ﬁdP¨amE¡ôyP¨sög
;

619 i‡(
c⁄ãxt
) {

621 i‡(!
	`dtdC›y
(&
dtd
, 
ﬁdDtd
Ë|| !
	`£tC⁄ãxt
(
∑r£r
, 
c⁄ãxt
)) {

622 
	`XML_P¨£rFªe
(
∑r£r
);

625 
¥o˚ss‹
 = 
exã∫ÆE¡ôyInôPro˚ss‹
;

626 #ifde‡
XML_DTD


629 
	`dtdSw≠
(&
dtd
, 
ﬁdDtd
);

630 
∑ª¡P¨£r
 = 
ﬁdP¨£r
;

631 
	`XmlPrﬁogSèãInôExã∫ÆE¡ôy
(&
¥ﬁogSèã
);

632 
dtd
.
com∂ëe
 = 1;

633 
hadExã∫ÆDo˘y≥
 = 1;

636  
∑r£r
;

637 
	}
}

640 
	$de°royBödögs
(
BINDING
 *
bödögs
)

643 
BINDING
 *
b
 = 
bödögs
;

644 i‡(!
b
)

646 
bödögs
 = 
b
->
√xtTagBödög
;

647 
	`‰ì
(
b
->
uri
);

648 
	`‰ì
(
b
);

650 
	}
}

652 
	$XML_P¨£rFªe
(
XML_P¨£r
 
∑r£r
)

655 
TAG
 *
p
;

656 i‡(
ègSèck
 == 0) {

657 i‡(
‰ìTagLi°
 == 0)

659 
ègSèck
 = 
‰ìTagLi°
;

660 
‰ìTagLi°
 = 0;

662 
p
 = 
ègSèck
;

663 
ègSèck
 =ÅagSèck->
∑ª¡
;

664 
	`‰ì
(
p
->
buf
);

665 
	`de°royBödögs
(
p
->
bödögs
);

666 
	`‰ì
(
p
);

668 
	`de°royBödögs
(
‰ìBödögLi°
);

669 
	`de°royBödögs
(
öhîôedBödögs
);

670 
	`poﬁDe°roy
(&
ãmpPoﬁ
);

671 
	`poﬁDe°roy
(&
ãmp2Poﬁ
);

672 #ifde‡
XML_DTD


673 i‡(
∑ª¡P¨£r
) {

674 i‡(
hadExã∫ÆDo˘y≥
)

675 
dtd
.
com∂ëe
 = 0;

676 
	`dtdSw≠
(&
dtd
, &((
P¨£r
 *)
∑ª¡P¨£r
)->
m_dtd
);

679 
	`dtdDe°roy
(&
dtd
);

680 
	`‰ì
((*)
©ts
);

681 
	`‰ì
(
groupC⁄√˘‹
);

682 
	`‰ì
(
buf„r
);

683 
	`‰ì
(
d©aBuf
);

684 
	`‰ì
(
unknownEncodögMem
);

685 i‡(
unknownEncodögRñó£
)

686 
	`unknownEncodögRñó£
(
unknownEncodögD©a
);

687 
	`‰ì
(
∑r£r
);

688 
	}
}

690 
	$XML_U£P¨£rAsH™dÀrArg
(
XML_P¨£r
 
∑r£r
)

692 
h™dÀrArg
 = 
∑r£r
;

693 
	}
}

695 
	$XML_SëU£rD©a
(
XML_P¨£r
 
∑r£r
, *
p
)

697 i‡(
h™dÀrArg
 =
u£rD©a
)

698 
h™dÀrArg
 = 
u£rD©a
 = 
p
;

700 
u£rD©a
 = 
p
;

701 
	}
}

703 
	$XML_SëBa£
(
XML_P¨£r
 
∑r£r
, c⁄° 
XML_Ch¨
 *
p
)

705 i‡(
p
) {

706 
p
 = 
	`poﬁC›ySåög
(&
dtd
.
poﬁ
,Ö);

707 i‡(!
p
)

709 
curBa£
 = 
p
;

712 
curBa£
 = 0;

714 
	}
}

716 c⁄° 
XML_Ch¨
 *
	$XML_GëBa£
(
XML_P¨£r
 
∑r£r
)

718  
curBa£
;

719 
	}
}

721 
	$XML_GëS≥cifõdAâribuãCou¡
(
XML_P¨£r
 
∑r£r
)

723  
nS≥cifõdAâs
;

724 
	}
}

726 
	$XML_SëEÀmítH™dÀr
(
XML_P¨£r
 
∑r£r
,

727 
XML_SèπEÀmítH™dÀr
 
°¨t
,

728 
XML_EndEÀmítH™dÀr
 
íd
)

730 
°¨tEÀmítH™dÀr
 = 
°¨t
;

731 
ídEÀmítH™dÀr
 = 
íd
;

732 
	}
}

734 
	$XML_SëCh¨a˘îD©aH™dÀr
(
XML_P¨£r
 
∑r£r
,

735 
XML_Ch¨a˘îD©aH™dÀr
 
h™dÀr
)

737 
ch¨a˘îD©aH™dÀr
 = 
h™dÀr
;

738 
	}
}

740 
	$XML_SëPro˚ssögIn°ru˘i⁄H™dÀr
(
XML_P¨£r
 
∑r£r
,

741 
XML_Pro˚ssögIn°ru˘i⁄H™dÀr
 
h™dÀr
)

743 
¥o˚ssögIn°ru˘i⁄H™dÀr
 = 
h™dÀr
;

744 
	}
}

746 
	$XML_SëCommítH™dÀr
(
XML_P¨£r
 
∑r£r
,

747 
XML_CommítH™dÀr
 
h™dÀr
)

749 
commítH™dÀr
 = 
h™dÀr
;

750 
	}
}

752 
	$XML_SëCd©aSe˘i⁄H™dÀr
(
XML_P¨£r
 
∑r£r
,

753 
XML_SèπCd©aSe˘i⁄H™dÀr
 
°¨t
,

754 
XML_EndCd©aSe˘i⁄H™dÀr
 
íd
)

756 
°¨tCd©aSe˘i⁄H™dÀr
 = 
°¨t
;

757 
ídCd©aSe˘i⁄H™dÀr
 = 
íd
;

758 
	}
}

760 
	$XML_SëDeÁu…H™dÀr
(
XML_P¨£r
 
∑r£r
,

761 
XML_DeÁu…H™dÀr
 
h™dÀr
)

763 
deÁu…H™dÀr
 = 
h™dÀr
;

764 
deÁu…Ex∑ndI¡î«lE¡ôõs
 = 0;

765 
	}
}

767 
	$XML_SëDeÁu…H™dÀrEx∑nd
(
XML_P¨£r
 
∑r£r
,

768 
XML_DeÁu…H™dÀr
 
h™dÀr
)

770 
deÁu…H™dÀr
 = 
h™dÀr
;

771 
deÁu…Ex∑ndI¡î«lE¡ôõs
 = 1;

772 
	}
}

774 
	$XML_SëDo˘y≥De˛H™dÀr
(
XML_P¨£r
 
∑r£r
,

775 
XML_SèπDo˘y≥De˛H™dÀr
 
°¨t
,

776 
XML_EndDo˘y≥De˛H™dÀr
 
íd
)

778 
°¨tDo˘y≥De˛H™dÀr
 = 
°¨t
;

779 
ídDo˘y≥De˛H™dÀr
 = 
íd
;

780 
	}
}

782 
	$XML_SëU≈¨£dE¡ôyDe˛H™dÀr
(
XML_P¨£r
 
∑r£r
,

783 
XML_U≈¨£dE¡ôyDe˛H™dÀr
 
h™dÀr
)

785 
u≈¨£dE¡ôyDe˛H™dÀr
 = 
h™dÀr
;

786 
	}
}

788 
	$XML_SëNŸ©i⁄De˛H™dÀr
(
XML_P¨£r
 
∑r£r
,

789 
XML_NŸ©i⁄De˛H™dÀr
 
h™dÀr
)

791 
nŸ©i⁄De˛H™dÀr
 = 
h™dÀr
;

792 
	}
}

794 
	$XML_SëName•a˚De˛H™dÀr
(
XML_P¨£r
 
∑r£r
,

795 
XML_SèπName•a˚De˛H™dÀr
 
°¨t
,

796 
XML_EndName•a˚De˛H™dÀr
 
íd
)

798 
°¨tName•a˚De˛H™dÀr
 = 
°¨t
;

799 
ídName•a˚De˛H™dÀr
 = 
íd
;

800 
	}
}

802 
	$XML_SëNŸSèndÆ⁄eH™dÀr
(
XML_P¨£r
 
∑r£r
,

803 
XML_NŸSèndÆ⁄eH™dÀr
 
h™dÀr
)

805 
nŸSèndÆ⁄eH™dÀr
 = 
h™dÀr
;

806 
	}
}

808 
	$XML_SëExã∫ÆE¡ôyRefH™dÀr
(
XML_P¨£r
 
∑r£r
,

809 
XML_Exã∫ÆE¡ôyRefH™dÀr
 
h™dÀr
)

811 
exã∫ÆE¡ôyRefH™dÀr
 = 
h™dÀr
;

812 
	}
}

814 
	$XML_SëExã∫ÆE¡ôyRefH™dÀrArg
(
XML_P¨£r
 
∑r£r
, *
¨g
)

816 i‡(
¨g
)

817 
exã∫ÆE¡ôyRefH™dÀrArg
 = 
¨g
;

819 
exã∫ÆE¡ôyRefH™dÀrArg
 = 
∑r£r
;

820 
	}
}

822 
	$XML_SëUnknownEncodögH™dÀr
(
XML_P¨£r
 
∑r£r
,

823 
XML_UnknownEncodögH™dÀr
 
h™dÀr
,

824 *
d©a
)

826 
unknownEncodögH™dÀr
 = 
h™dÀr
;

827 
unknownEncodögH™dÀrD©a
 = 
d©a
;

828 
	}
}

830 
	$XML_SëP¨amE¡ôyP¨sög
(
XML_P¨£r
 
∑r£r
,

831 
XML_P¨amE¡ôyP¨sög
 
∑rsög
)

833 #ifde‡
XML_DTD


834 
∑ømE¡ôyP¨sög
 = 
∑rsög
;

837  
∑rsög
 =
XML_PARAM_ENTITY_PARSING_NEVER
;

839 
	}
}

841 
	$XML_P¨£
(
XML_P¨£r
 
∑r£r
, c⁄° *
s
, 
Àn
, 
isFöÆ
)

843 i‡(
Àn
 == 0) {

844 i‡(!
isFöÆ
)

846 
posôi⁄På
 = 
buf„rPå
;

847 
îr‹Code
 = 
	`¥o˚ss‹
(
∑r£r
, 
buf„rPå
, 
∑r£EndPå
 = 
buf„rEnd
, 0);

848 i‡(
îr‹Code
 =
XML_ERROR_NONE
)

850 
evítEndPå
 = 
evítPå
;

851 
¥o˚ss‹
 = 
îr‹Pro˚ss‹
;

854 i‡(
buf„rPå
 =
buf„rEnd
) {

855 c⁄° *
íd
;

856 
nLe·Ovî
;

857 
∑r£EndByãIndex
 +
Àn
;

858 
posôi⁄På
 = 
s
;

859 i‡(
isFöÆ
) {

860 
îr‹Code
 = 
	`¥o˚ss‹
(
∑r£r
, 
s
, 
∑r£EndPå
 = s + 
Àn
, 0);

861 i‡(
îr‹Code
 =
XML_ERROR_NONE
)

863 
evítEndPå
 = 
evítPå
;

864 
¥o˚ss‹
 = 
îr‹Pro˚ss‹
;

867 
îr‹Code
 = 
	`¥o˚ss‹
(
∑r£r
, 
s
, 
∑r£EndPå
 = s + 
Àn
, &
íd
);

868 i‡(
îr‹Code
 !
XML_ERROR_NONE
) {

869 
evítEndPå
 = 
evítPå
;

870 
¥o˚ss‹
 = 
îr‹Pro˚ss‹
;

873 
	`XmlUpd©ePosôi⁄
(
ícodög
, 
posôi⁄På
, 
íd
, &
posôi⁄
);

874 
nLe·Ovî
 = 
s
 + 
Àn
 - 
íd
;

875 i‡(
nLe·Ovî
) {

876 i‡(
buf„r
 =0 || 
nLe·Ovî
 > 
buf„rLim
 - buffer) {

878 
buf„r
 = buf„∏=0 ? 
	`mÆloc
(
Àn
 * 2Ë: 
	`ªÆloc
(buffer,Üen * 2);

880 i‡(!
buf„r
) {

881 
îr‹Code
 = 
XML_ERROR_NO_MEMORY
;

882 
evítPå
 = 
evítEndPå
 = 0;

883 
¥o˚ss‹
 = 
îr‹Pro˚ss‹
;

886 
buf„rLim
 = 
buf„r
 + 
Àn
 * 2;

888 
	`mem˝y
(
buf„r
, 
íd
, 
nLe·Ovî
);

889 
buf„rPå
 = 
buf„r
;

890 
buf„rEnd
 = 
buf„r
 + 
nLe·Ovî
;

895 
	`mem˝y
(
	`XML_GëBuf„r
(
∑r£r
, 
Àn
), 
s
,Üen);

896  
	`XML_P¨£Buf„r
(
∑r£r
, 
Àn
, 
isFöÆ
);

898 
	}
}

900 
	$XML_P¨£Buf„r
(
XML_P¨£r
 
∑r£r
, 
Àn
, 
isFöÆ
)

902 c⁄° *
°¨t
 = 
buf„rPå
;

903 
posôi⁄På
 = 
°¨t
;

904 
buf„rEnd
 +
Àn
;

905 
∑r£EndByãIndex
 +
Àn
;

906 
îr‹Code
 = 
	`¥o˚ss‹
(
∑r£r
, 
°¨t
, 
∑r£EndPå
 = 
buf„rEnd
,

907 
isFöÆ
 ? (c⁄° **)0 : &
buf„rPå
);

908 i‡(
îr‹Code
 =
XML_ERROR_NONE
) {

909 i‡(!
isFöÆ
)

910 
	`XmlUpd©ePosôi⁄
(
ícodög
, 
posôi⁄På
, 
buf„rPå
, &
posôi⁄
);

914 
evítEndPå
 = 
evítPå
;

915 
¥o˚ss‹
 = 
îr‹Pro˚ss‹
;

918 
	}
}

920 *
	$XML_GëBuf„r
(
XML_P¨£r
 
∑r£r
, 
Àn
)

922 i‡(
Àn
 > 
buf„rLim
 - 
buf„rEnd
) {

924 
√ededSize
 = 
Àn
 + (
buf„rEnd
 - 
buf„rPå
);

925 i‡(
√ededSize
 <
buf„rLim
 - 
buf„r
) {

926 
	`memmove
(
buf„r
, 
buf„rPå
, 
buf„rEnd
 - bufferPtr);

927 
buf„rEnd
 = 
buf„r
 + (buf„rEnd - 
buf„rPå
);

928 
buf„rPå
 = 
buf„r
;

931 *
√wBuf
;

932 
buf„rSize
 = 
buf„rLim
 - 
buf„rPå
;

933 i‡(
buf„rSize
 == 0)

934 
buf„rSize
 = 
INIT_BUFFER_SIZE
;

936 
buf„rSize
 *= 2;

937 } 
buf„rSize
 < 
√ededSize
);

938 
√wBuf
 = 
	`mÆloc
(
buf„rSize
);

939 i‡(
√wBuf
 == 0) {

940 
îr‹Code
 = 
XML_ERROR_NO_MEMORY
;

943 
buf„rLim
 = 
√wBuf
 + 
buf„rSize
;

944 i‡(
buf„rPå
) {

945 
	`mem˝y
(
√wBuf
, 
buf„rPå
, 
buf„rEnd
 - bufferPtr);

946 
	`‰ì
(
buf„r
);

948 
buf„rEnd
 = 
√wBuf
 + (buf„rEnd - 
buf„rPå
);

949 
buf„rPå
 = 
buf„r
 = 
√wBuf
;

952  
buf„rEnd
;

953 
	}
}

955 
XML_Eº‹
 
	$XML_GëEº‹Code
(
XML_P¨£r
 
∑r£r
)

957  
îr‹Code
;

958 
	}
}

960 
	$XML_GëCuºítByãIndex
(
XML_P¨£r
 
∑r£r
)

962 i‡(
evítPå
)

963  
∑r£EndByãIndex
 - (
∑r£EndPå
 - 
evítPå
);

965 
	}
}

967 
	$XML_GëCuºítByãCou¡
(
XML_P¨£r
 
∑r£r
)

969 i‡(
evítEndPå
 && 
evítPå
)

970  
evítEndPå
 - 
evítPå
;

972 
	}
}

974 
	$XML_GëCuºítLöeNumbî
(
XML_P¨£r
 
∑r£r
)

976 i‡(
evítPå
) {

977 
	`XmlUpd©ePosôi⁄
(
ícodög
, 
posôi⁄På
, 
evítPå
, &
posôi⁄
);

978 
posôi⁄På
 = 
evítPå
;

980  
posôi⁄
.
löeNumbî
 + 1;

981 
	}
}

983 
	$XML_GëCuºítCﬁumnNumbî
(
XML_P¨£r
 
∑r£r
)

985 i‡(
evítPå
) {

986 
	`XmlUpd©ePosôi⁄
(
ícodög
, 
posôi⁄På
, 
evítPå
, &
posôi⁄
);

987 
posôi⁄På
 = 
evítPå
;

989  
posôi⁄
.
cﬁumnNumbî
;

990 
	}
}

992 
	$XML_DeÁu…Cuºít
(
XML_P¨£r
 
∑r£r
)

994 i‡(
deÁu…H™dÀr
) {

995 i‡(
›íI¡î«lE¡ôõs
)

996 
	`ªp‹tDeÁu…
(
∑r£r
,

997 
öã∫ÆEncodög
,

998 
›íI¡î«lE¡ôõs
->
öã∫ÆEvítPå
,

999 
›íI¡î«lE¡ôõs
->
öã∫ÆEvítEndPå
);

1001 
	`ªp‹tDeÁu…
(
∑r£r
, 
ícodög
, 
evítPå
, 
evítEndPå
);

1003 
	}
}

1005 c⁄° 
XML_LCh¨
 *
	$XML_Eº‹Såög
(
code
)

1007 c⁄° 
XML_LCh¨
 *
mesßge
[] = {

1009 
	`XML_T
("out of memory"),

1010 
	`XML_T
("syntaxÉrror"),

1011 
	`XML_T
("noÉlement found"),

1012 
	`XML_T
("not well-formed"),

1013 
	`XML_T
("unclosedÅoken"),

1014 
	`XML_T
("unclosedÅoken"),

1015 
	`XML_T
("mismatchedÅag"),

1016 
	`XML_T
("duplicateáttribute"),

1017 
	`XML_T
("junkáfter documentÉlement"),

1018 
	`XML_T
("illegalÖarameterÉntityÑeference"),

1019 
	`XML_T
("undefinedÉntity"),

1020 
	`XML_T
("recursiveÉntityÑeference"),

1021 
	`XML_T
("asynchronousÉntity"),

1022 
	`XML_T
("referenceÅo invalid characterÇumber"),

1023 
	`XML_T
("referenceÅo binaryÉntity"),

1024 
	`XML_T
("referenceÅoÉxternalÉntity ináttribute"),

1025 
	`XML_T
("xmlÖrocessing instructionÇotát start ofÉxternalÉntity"),

1026 
	`XML_T
("unknownÉncoding"),

1027 
	`XML_T
("encoding specified in XML declaration is incorrect"),

1028 
	`XML_T
("unclosed CDATA section"),

1029 
	`XML_T
("error inÖrocessingÉxternalÉntityÑeference"),

1030 
	`XML_T
("document isÇot standalone")

1032 i‡(
code
 > 0 && codê< (
mesßge
)/(message[0]))

1033  
mesßge
[
code
];

1035 
	}
}

1038 
XML_Eº‹
 
	$c⁄ã¡Pro˚ss‹
(
XML_P¨£r
 
∑r£r
,

1039 c⁄° *
°¨t
,

1040 c⁄° *
íd
,

1041 c⁄° **
ídPå
)

1043  
	`doC⁄ã¡
(
∑r£r
, 0, 
ícodög
, 
°¨t
, 
íd
, 
ídPå
);

1044 
	}
}

1047 
XML_Eº‹
 
	$exã∫ÆE¡ôyInôPro˚ss‹
(
XML_P¨£r
 
∑r£r
,

1048 c⁄° *
°¨t
,

1049 c⁄° *
íd
,

1050 c⁄° **
ídPå
)

1052 
XML_Eº‹
 
ªsu…
 = 
	`öôülizeEncodög
(
∑r£r
);

1053 i‡(
ªsu…
 !
XML_ERROR_NONE
)

1054  
ªsu…
;

1055 
¥o˚ss‹
 = 
exã∫ÆE¡ôyInôPro˚ss‹2
;

1056  
	`exã∫ÆE¡ôyInôPro˚ss‹2
(
∑r£r
, 
°¨t
, 
íd
, 
ídPå
);

1057 
	}
}

1060 
XML_Eº‹
 
	$exã∫ÆE¡ôyInôPro˚ss‹2
(
XML_P¨£r
 
∑r£r
,

1061 c⁄° *
°¨t
,

1062 c⁄° *
íd
,

1063 c⁄° **
ídPå
)

1065 c⁄° *
√xt
;

1066 
tok
 = 
	`XmlC⁄ã¡Tok
(
ícodög
, 
°¨t
, 
íd
, &
√xt
);

1067 
tok
) {

1068 
XML_TOK_BOM
:

1069 
°¨t
 = 
√xt
;

1071 
XML_TOK_PARTIAL
:

1072 i‡(
ídPå
) {

1073 *
ídPå
 = 
°¨t
;

1074  
XML_ERROR_NONE
;

1076 
evítPå
 = 
°¨t
;

1077  
XML_ERROR_UNCLOSED_TOKEN
;

1078 
XML_TOK_PARTIAL_CHAR
:

1079 i‡(
ídPå
) {

1080 *
ídPå
 = 
°¨t
;

1081  
XML_ERROR_NONE
;

1083 
evítPå
 = 
°¨t
;

1084  
XML_ERROR_PARTIAL_CHAR
;

1086 
¥o˚ss‹
 = 
exã∫ÆE¡ôyInôPro˚ss‹3
;

1087  
	`exã∫ÆE¡ôyInôPro˚ss‹3
(
∑r£r
, 
°¨t
, 
íd
, 
ídPå
);

1088 
	}
}

1091 
XML_Eº‹
 
	$exã∫ÆE¡ôyInôPro˚ss‹3
(
XML_P¨£r
 
∑r£r
,

1092 c⁄° *
°¨t
,

1093 c⁄° *
íd
,

1094 c⁄° **
ídPå
)

1096 c⁄° *
√xt
;

1097 
tok
 = 
	`XmlC⁄ã¡Tok
(
ícodög
, 
°¨t
, 
íd
, &
√xt
);

1098 
tok
) {

1099 
XML_TOK_XML_DECL
:

1101 
XML_Eº‹
 
ªsu…
 = 
	`¥o˚ssXmlDe˛
(
∑r£r
, 1, 
°¨t
, 
√xt
);

1102 i‡(
ªsu…
 !
XML_ERROR_NONE
)

1103  
ªsu…
;

1104 
°¨t
 = 
√xt
;

1107 
XML_TOK_PARTIAL
:

1108 i‡(
ídPå
) {

1109 *
ídPå
 = 
°¨t
;

1110  
XML_ERROR_NONE
;

1112 
evítPå
 = 
°¨t
;

1113  
XML_ERROR_UNCLOSED_TOKEN
;

1114 
XML_TOK_PARTIAL_CHAR
:

1115 i‡(
ídPå
) {

1116 *
ídPå
 = 
°¨t
;

1117  
XML_ERROR_NONE
;

1119 
evítPå
 = 
°¨t
;

1120  
XML_ERROR_PARTIAL_CHAR
;

1122 
¥o˚ss‹
 = 
exã∫ÆE¡ôyC⁄ã¡Pro˚ss‹
;

1123 
ègLevñ
 = 1;

1124  
	`doC⁄ã¡
(
∑r£r
, 1, 
ícodög
, 
°¨t
, 
íd
, 
ídPå
);

1125 
	}
}

1128 
XML_Eº‹
 
	$exã∫ÆE¡ôyC⁄ã¡Pro˚ss‹
(
XML_P¨£r
 
∑r£r
,

1129 c⁄° *
°¨t
,

1130 c⁄° *
íd
,

1131 c⁄° **
ídPå
)

1133  
	`doC⁄ã¡
(
∑r£r
, 1, 
ícodög
, 
°¨t
, 
íd
, 
ídPå
);

1134 
	}
}

1136 
XML_Eº‹


1137 
	$doC⁄ã¡
(
XML_P¨£r
 
∑r£r
,

1138 
°¨tTagLevñ
,

1139 c⁄° 
ENCODING
 *
íc
,

1140 c⁄° *
s
,

1141 c⁄° *
íd
,

1142 c⁄° **
√xtPå
)

1144 c⁄° **
evítPP
;

1145 c⁄° **
evítEndPP
;

1146 i‡(
íc
 =
ícodög
) {

1147 
evítPP
 = &
evítPå
;

1148 
evítEndPP
 = &
evítEndPå
;

1151 
evítPP
 = &(
›íI¡î«lE¡ôõs
->
öã∫ÆEvítPå
);

1152 
evítEndPP
 = &(
›íI¡î«lE¡ôõs
->
öã∫ÆEvítEndPå
);

1154 *
evítPP
 = 
s
;

1156 c⁄° *
√xt
 = 
s
;

1157 
tok
 = 
	`XmlC⁄ã¡Tok
(
íc
, 
s
, 
íd
, &
√xt
);

1158 *
evítEndPP
 = 
√xt
;

1159 
tok
) {

1160 
XML_TOK_TRAILING_CR
:

1161 i‡(
√xtPå
) {

1162 *
√xtPå
 = 
s
;

1163  
XML_ERROR_NONE
;

1165 *
evítEndPP
 = 
íd
;

1166 i‡(
ch¨a˘îD©aH™dÀr
) {

1167 
XML_Ch¨
 
c
 = 0xA;

1168 
	`ch¨a˘îD©aH™dÀr
(
h™dÀrArg
, &
c
, 1);

1170 i‡(
deÁu…H™dÀr
)

1171 
	`ªp‹tDeÁu…
(
∑r£r
, 
íc
, 
s
, 
íd
);

1172 i‡(
°¨tTagLevñ
 == 0)

1173  
XML_ERROR_NO_ELEMENTS
;

1174 i‡(
ègLevñ
 !
°¨tTagLevñ
)

1175  
XML_ERROR_ASYNC_ENTITY
;

1176  
XML_ERROR_NONE
;

1177 
XML_TOK_NONE
:

1178 i‡(
√xtPå
) {

1179 *
√xtPå
 = 
s
;

1180  
XML_ERROR_NONE
;

1182 i‡(
°¨tTagLevñ
 > 0) {

1183 i‡(
ègLevñ
 !
°¨tTagLevñ
)

1184  
XML_ERROR_ASYNC_ENTITY
;

1185  
XML_ERROR_NONE
;

1187  
XML_ERROR_NO_ELEMENTS
;

1188 
XML_TOK_INVALID
:

1189 *
evítPP
 = 
√xt
;

1190  
XML_ERROR_INVALID_TOKEN
;

1191 
XML_TOK_PARTIAL
:

1192 i‡(
√xtPå
) {

1193 *
√xtPå
 = 
s
;

1194  
XML_ERROR_NONE
;

1196  
XML_ERROR_UNCLOSED_TOKEN
;

1197 
XML_TOK_PARTIAL_CHAR
:

1198 i‡(
√xtPå
) {

1199 *
√xtPå
 = 
s
;

1200  
XML_ERROR_NONE
;

1202  
XML_ERROR_PARTIAL_CHAR
;

1203 
XML_TOK_ENTITY_REF
:

1205 c⁄° 
XML_Ch¨
 *
«me
;

1206 
ENTITY
 *
ítôy
;

1207 
XML_Ch¨
 
ch
 = 
	`XmlPªdeföedE¡ôyName
(
íc
,

1208 
s
 + 
íc
->
möByãsPîCh¨
,

1209 
√xt
 - 
íc
->
möByãsPîCh¨
);

1210 i‡(
ch
) {

1211 i‡(
ch¨a˘îD©aH™dÀr
)

1212 
	`ch¨a˘îD©aH™dÀr
(
h™dÀrArg
, &
ch
, 1);

1213 i‡(
deÁu…H™dÀr
)

1214 
	`ªp‹tDeÁu…
(
∑r£r
, 
íc
, 
s
, 
√xt
);

1217 
«me
 = 
	`poﬁSt‹eSåög
(&
dtd
.
poﬁ
, 
íc
,

1218 
s
 + 
íc
->
möByãsPîCh¨
,

1219 
√xt
 - 
íc
->
möByãsPîCh¨
);

1220 i‡(!
«me
)

1221  
XML_ERROR_NO_MEMORY
;

1222 
ítôy
 = (
ENTITY
 *)
	`lookup
(&
dtd
.
gíîÆE¡ôõs
, 
«me
, 0);

1223 
	`poﬁDisˇrd
(&
dtd
.
poﬁ
);

1224 i‡(!
ítôy
) {

1225 i‡(
dtd
.
com∂ëe
 || dtd.
°™dÆ⁄e
)

1226  
XML_ERROR_UNDEFINED_ENTITY
;

1227 i‡(
deÁu…H™dÀr
)

1228 
	`ªp‹tDeÁu…
(
∑r£r
, 
íc
, 
s
, 
√xt
);

1231 i‡(
ítôy
->
›í
)

1232  
XML_ERROR_RECURSIVE_ENTITY_REF
;

1233 i‡(
ítôy
->
nŸ©i⁄
)

1234  
XML_ERROR_BINARY_ENTITY_REF
;

1235 i‡(
ítôy
) {

1236 i‡(
ítôy
->
ãxtPå
) {

1237 
XML_Eº‹
 
ªsu…
;

1238 
OPEN_INTERNAL_ENTITY
 
›íE¡ôy
;

1239 i‡(
deÁu…H™dÀr
 && !
deÁu…Ex∑ndI¡î«lE¡ôõs
) {

1240 
	`ªp‹tDeÁu…
(
∑r£r
, 
íc
, 
s
, 
√xt
);

1243 
ítôy
->
›í
 = 1;

1244 
›íE¡ôy
.
√xt
 = 
›íI¡î«lE¡ôõs
;

1245 
›íI¡î«lE¡ôõs
 = &
›íE¡ôy
;

1246 
›íE¡ôy
.
ítôy
 =Éntity;

1247 
›íE¡ôy
.
öã∫ÆEvítPå
 = 0;

1248 
›íE¡ôy
.
öã∫ÆEvítEndPå
 = 0;

1249 
ªsu…
 = 
	`doC⁄ã¡
(
∑r£r
,

1250 
ègLevñ
,

1251 
öã∫ÆEncodög
,

1252 (*)
ítôy
->
ãxtPå
,

1253 (*)(
ítôy
->
ãxtPå
 +É¡ôy->
ãxtLí
),

1255 
ítôy
->
›í
 = 0;

1256 
›íI¡î«lE¡ôõs
 = 
›íE¡ôy
.
√xt
;

1257 i‡(
ªsu…
)

1258  
ªsu…
;

1260 i‡(
exã∫ÆE¡ôyRefH™dÀr
) {

1261 c⁄° 
XML_Ch¨
 *
c⁄ãxt
;

1262 
ítôy
->
›í
 = 1;

1263 
c⁄ãxt
 = 
	`gëC⁄ãxt
(
∑r£r
);

1264 
ítôy
->
›í
 = 0;

1265 i‡(!
c⁄ãxt
)

1266  
XML_ERROR_NO_MEMORY
;

1267 i‡(!
	`exã∫ÆE¡ôyRefH™dÀr
(
exã∫ÆE¡ôyRefH™dÀrArg
,

1268 
c⁄ãxt
,

1269 
ítôy
->
ba£
,

1270 
ítôy
->
sy°emId
,

1271 
ítôy
->
publicId
))

1272  
XML_ERROR_EXTERNAL_ENTITY_HANDLING
;

1273 
	`poﬁDisˇrd
(&
ãmpPoﬁ
);

1275 i‡(
deÁu…H™dÀr
)

1276 
	`ªp‹tDeÁu…
(
∑r£r
, 
íc
, 
s
, 
√xt
);

1280 
XML_TOK_START_TAG_WITH_ATTS
:

1281 i‡(!
°¨tEÀmítH™dÀr
) {

1282 
XML_Eº‹
 
ªsu…
 = 
	`°‹eAâs
(
∑r£r
, 
íc
, 
s
, 0, 0);

1283 i‡(
ªsu…
)

1284  
ªsu…
;

1287 
XML_TOK_START_TAG_NO_ATTS
:

1289 
TAG
 *
èg
;

1290 i‡(
‰ìTagLi°
) {

1291 
èg
 = 
‰ìTagLi°
;

1292 
‰ìTagLi°
 = fªeTagLi°->
∑ª¡
;

1295 
èg
 = 
	`mÆloc
((
TAG
));

1296 i‡(!
èg
)

1297  
XML_ERROR_NO_MEMORY
;

1298 
èg
->
buf
 = 
	`mÆloc
(
INIT_TAG_BUF_SIZE
);

1299 i‡(!
èg
->
buf
)

1300  
XML_ERROR_NO_MEMORY
;

1301 
èg
->
bufEnd
 =Åag->
buf
 + 
INIT_TAG_BUF_SIZE
;

1303 
èg
->
bödögs
 = 0;

1304 
èg
->
∑ª¡
 = 
ègSèck
;

1305 
ègSèck
 = 
èg
;

1306 
èg
->
«me
.
loˇlP¨t
 = 0;

1307 
èg
->
øwName
 = 
s
 + 
íc
->
möByãsPîCh¨
;

1308 
èg
->
øwNameLígth
 = 
	`XmlNameLígth
(
íc
,Åag->
øwName
);

1309 i‡(
√xtPå
) {

1312 i‡(
èg
->
øwNameLígth
 + ()((
XML_Ch¨
Ë- 1Ë+ ()(XML_Ch¨Ë>Åag->
bufEnd
 -Åag->
buf
) {

1313 
bufSize
 = 
èg
->
øwNameLígth
 * 4;

1314 
bufSize
 = 
	`ROUND_UP
(bufSize, (
XML_Ch¨
));

1315 
èg
->
buf
 = 
	`ªÆloc
—ag->buf, 
bufSize
);

1316 i‡(!
èg
->
buf
)

1317  
XML_ERROR_NO_MEMORY
;

1318 
èg
->
bufEnd
 =Åag->
buf
 + 
bufSize
;

1320 
	`mem˝y
(
èg
->
buf
,Åag->
øwName
,Åag->
øwNameLígth
);

1321 
èg
->
øwName
 =Åag->
buf
;

1323 ++
ègLevñ
;

1324 i‡(
°¨tEÀmítH™dÀr
) {

1325 
XML_Eº‹
 
ªsu…
;

1326 
XML_Ch¨
 *
toPå
;

1328 c⁄° *
øwNameEnd
 = 
èg
->
øwName
 +Åag->
øwNameLígth
;

1329 c⁄° *
‰omPå
 = 
èg
->
øwName
;

1330 
bufSize
;

1331 i‡(
√xtPå
)

1332 
toPå
 = (
XML_Ch¨
 *)(
èg
->
buf
 + 
	`ROUND_UP
—ag->
øwNameLígth
, (XML_Char)));

1334 
toPå
 = (
XML_Ch¨
 *)
èg
->
buf
;

1335 
èg
->
«me
.
°r
 = 
toPå
;

1336 
	`XmlC⁄vît
(
íc
,

1337 &
‰omPå
, 
øwNameEnd
,

1338 (
ICHAR
 **)&
toPå
, (ICHAR *)
èg
->
bufEnd
 - 1);

1339 i‡(
‰omPå
 =
øwNameEnd
)

1341 
bufSize
 = (
èg
->
bufEnd
 -Åag->
buf
) << 1;

1342 
èg
->
buf
 = 
	`ªÆloc
—ag->buf, 
bufSize
);

1343 i‡(!
èg
->
buf
)

1344  
XML_ERROR_NO_MEMORY
;

1345 
èg
->
bufEnd
 =Åag->
buf
 + 
bufSize
;

1346 i‡(
√xtPå
)

1347 
èg
->
øwName
 =Åag->
buf
;

1349 *
toPå
 = 
	`XML_T
('\0');

1350 
ªsu…
 = 
	`°‹eAâs
(
∑r£r
, 
íc
, 
s
, &(
èg
->
«me
), &—ag->
bödögs
));

1351 i‡(
ªsu…
)

1352  
ªsu…
;

1353 
	`°¨tEÀmítH™dÀr
(
h™dÀrArg
, 
èg
->
«me
.
°r
, (c⁄° 
XML_Ch¨
 **)
©ts
);

1354 
	`poﬁCÀ¨
(&
ãmpPoﬁ
);

1357 
èg
->
«me
.
°r
 = 0;

1358 i‡(
deÁu…H™dÀr
)

1359 
	`ªp‹tDeÁu…
(
∑r£r
, 
íc
, 
s
, 
√xt
);

1363 
XML_TOK_EMPTY_ELEMENT_WITH_ATTS
:

1364 i‡(!
°¨tEÀmítH™dÀr
) {

1365 
XML_Eº‹
 
ªsu…
 = 
	`°‹eAâs
(
∑r£r
, 
íc
, 
s
, 0, 0);

1366 i‡(
ªsu…
)

1367  
ªsu…
;

1370 
XML_TOK_EMPTY_ELEMENT_NO_ATTS
:

1371 i‡(
°¨tEÀmítH™dÀr
 || 
ídEÀmítH™dÀr
) {

1372 c⁄° *
øwName
 = 
s
 + 
íc
->
möByãsPîCh¨
;

1373 
XML_Eº‹
 
ªsu…
;

1374 
BINDING
 *
bödögs
 = 0;

1375 
TAG_NAME
 
«me
;

1376 
«me
.
°r
 = 
	`poﬁSt‹eSåög
(&
ãmpPoﬁ
, 
íc
, 
øwName
,

1377 
øwName
 + 
	`XmlNameLígth
(
íc
,ÑawName));

1378 i‡(!
«me
.
°r
)

1379  
XML_ERROR_NO_MEMORY
;

1380 
	`poﬁFöish
(&
ãmpPoﬁ
);

1381 
ªsu…
 = 
	`°‹eAâs
(
∑r£r
, 
íc
, 
s
, &
«me
, &
bödögs
);

1382 i‡(
ªsu…
)

1383  
ªsu…
;

1384 
	`poﬁFöish
(&
ãmpPoﬁ
);

1385 i‡(
°¨tEÀmítH™dÀr
)

1386 
	`°¨tEÀmítH™dÀr
(
h™dÀrArg
, 
«me
.
°r
, (c⁄° 
XML_Ch¨
 **)
©ts
);

1387 i‡(
ídEÀmítH™dÀr
) {

1388 i‡(
°¨tEÀmítH™dÀr
)

1389 *
evítPP
 = *
evítEndPP
;

1390 
	`ídEÀmítH™dÀr
(
h™dÀrArg
, 
«me
.
°r
);

1392 
	`poﬁCÀ¨
(&
ãmpPoﬁ
);

1393 
bödögs
) {

1394 
BINDING
 *
b
 = 
bödögs
;

1395 i‡(
ídName•a˚De˛H™dÀr
)

1396 
	`ídName•a˚De˛H™dÀr
(
h™dÀrArg
, 
b
->
¥efix
->
«me
);

1397 
bödögs
 = bödögs->
√xtTagBödög
;

1398 
b
->
√xtTagBödög
 = 
‰ìBödögLi°
;

1399 
‰ìBödögLi°
 = 
b
;

1400 
b
->
¥efix
->
bödög
 = b->
¥evPªfixBödög
;

1403 i‡(
deÁu…H™dÀr
)

1404 
	`ªp‹tDeÁu…
(
∑r£r
, 
íc
, 
s
, 
√xt
);

1405 i‡(
ègLevñ
 == 0)

1406  
	`ïûogPro˚ss‹
(
∑r£r
, 
√xt
, 
íd
, 
√xtPå
);

1408 
XML_TOK_END_TAG
:

1409 i‡(
ègLevñ
 =
°¨tTagLevñ
)

1410  
XML_ERROR_ASYNC_ENTITY
;

1412 
Àn
;

1413 c⁄° *
øwName
;

1414 
TAG
 *
èg
 = 
ègSèck
;

1415 
ègSèck
 = 
èg
->
∑ª¡
;

1416 
èg
->
∑ª¡
 = 
‰ìTagLi°
;

1417 
‰ìTagLi°
 = 
èg
;

1418 
øwName
 = 
s
 + 
íc
->
möByãsPîCh¨
*2;

1419 
Àn
 = 
	`XmlNameLígth
(
íc
, 
øwName
);

1420 i‡(
Àn
 !
èg
->
øwNameLígth


1421 || 
	`memcmp
(
èg
->
øwName
,ÑawName, 
Àn
) != 0) {

1422 *
evítPP
 = 
øwName
;

1423  
XML_ERROR_TAG_MISMATCH
;

1425 --
ègLevñ
;

1426 i‡(
ídEÀmítH™dÀr
 && 
èg
->
«me
.
°r
) {

1427 i‡(
èg
->
«me
.
loˇlP¨t
) {

1428 
XML_Ch¨
 *
to
 = (XML_Ch¨ *)
èg
->
«me
.
°r
 +Åag->«me.
uriLí
;

1429 c⁄° 
XML_Ch¨
 *
‰om
 = 
èg
->
«me
.
loˇlP¨t
;

1430 (*
to
++ = *
‰om
++) != 0)

1433 
	`ídEÀmítH™dÀr
(
h™dÀrArg
, 
èg
->
«me
.
°r
);

1435 i‡(
deÁu…H™dÀr
)

1436 
	`ªp‹tDeÁu…
(
∑r£r
, 
íc
, 
s
, 
√xt
);

1437 
èg
->
bödögs
) {

1438 
BINDING
 *
b
 = 
èg
->
bödögs
;

1439 i‡(
ídName•a˚De˛H™dÀr
)

1440 
	`ídName•a˚De˛H™dÀr
(
h™dÀrArg
, 
b
->
¥efix
->
«me
);

1441 
èg
->
bödögs
 =Åag->bödögs->
√xtTagBödög
;

1442 
b
->
√xtTagBödög
 = 
‰ìBödögLi°
;

1443 
‰ìBödögLi°
 = 
b
;

1444 
b
->
¥efix
->
bödög
 = b->
¥evPªfixBödög
;

1446 i‡(
ègLevñ
 == 0)

1447  
	`ïûogPro˚ss‹
(
∑r£r
, 
√xt
, 
íd
, 
√xtPå
);

1450 
XML_TOK_CHAR_REF
:

1452 
n
 = 
	`XmlCh¨RefNumbî
(
íc
, 
s
);

1453 i‡(
n
 < 0)

1454  
XML_ERROR_BAD_CHAR_REF
;

1455 i‡(
ch¨a˘îD©aH™dÀr
) {

1456 
XML_Ch¨
 
buf
[
XML_ENCODE_MAX
];

1457 
	`ch¨a˘îD©aH™dÀr
(
h™dÀrArg
, 
buf
, 
	`XmlEncode
(
n
, (
ICHAR
 *)buf));

1459 i‡(
deÁu…H™dÀr
)

1460 
	`ªp‹tDeÁu…
(
∑r£r
, 
íc
, 
s
, 
√xt
);

1463 
XML_TOK_XML_DECL
:

1464  
XML_ERROR_MISPLACED_XML_PI
;

1465 
XML_TOK_DATA_NEWLINE
:

1466 i‡(
ch¨a˘îD©aH™dÀr
) {

1467 
XML_Ch¨
 
c
 = 0xA;

1468 
	`ch¨a˘îD©aH™dÀr
(
h™dÀrArg
, &
c
, 1);

1470 i‡(
deÁu…H™dÀr
)

1471 
	`ªp‹tDeÁu…
(
∑r£r
, 
íc
, 
s
, 
√xt
);

1473 
XML_TOK_CDATA_SECT_OPEN
:

1475 
XML_Eº‹
 
ªsu…
;

1476 i‡(
°¨tCd©aSe˘i⁄H™dÀr
)

1477 
	`°¨tCd©aSe˘i⁄H™dÀr
(
h™dÀrArg
);

1490 i‡(
ch¨a˘îD©aH™dÀr
)

1491 
	`ch¨a˘îD©aH™dÀr
(
h™dÀrArg
, 
d©aBuf
, 0);

1493 i‡(
deÁu…H™dÀr
)

1494 
	`ªp‹tDeÁu…
(
∑r£r
, 
íc
, 
s
, 
√xt
);

1495 
ªsu…
 = 
	`doCd©aSe˘i⁄
(
∑r£r
, 
íc
, &
√xt
, 
íd
, 
√xtPå
);

1496 i‡(!
√xt
) {

1497 
¥o˚ss‹
 = 
cd©aSe˘i⁄Pro˚ss‹
;

1498  
ªsu…
;

1502 
XML_TOK_TRAILING_RSQB
:

1503 i‡(
√xtPå
) {

1504 *
√xtPå
 = 
s
;

1505  
XML_ERROR_NONE
;

1507 i‡(
ch¨a˘îD©aH™dÀr
) {

1508 i‡(
	`MUST_CONVERT
(
íc
, 
s
)) {

1509 
ICHAR
 *
d©aPå
 = (ICHAR *)
d©aBuf
;

1510 
	`XmlC⁄vît
(
íc
, &
s
, 
íd
, &
d©aPå
, (
ICHAR
 *)
d©aBufEnd
);

1511 
	`ch¨a˘îD©aH™dÀr
(
h™dÀrArg
, 
d©aBuf
, 
d©aPå
 - (
ICHAR
 *)dataBuf);

1514 
	`ch¨a˘îD©aH™dÀr
(
h™dÀrArg
,

1515 (
XML_Ch¨
 *)
s
,

1516 (
XML_Ch¨
 *)
íd
 - (XML_Ch¨ *)
s
);

1518 i‡(
deÁu…H™dÀr
)

1519 
	`ªp‹tDeÁu…
(
∑r£r
, 
íc
, 
s
, 
íd
);

1520 i‡(
°¨tTagLevñ
 == 0) {

1521 *
evítPP
 = 
íd
;

1522  
XML_ERROR_NO_ELEMENTS
;

1524 i‡(
ègLevñ
 !
°¨tTagLevñ
) {

1525 *
evítPP
 = 
íd
;

1526  
XML_ERROR_ASYNC_ENTITY
;

1528  
XML_ERROR_NONE
;

1529 
XML_TOK_DATA_CHARS
:

1530 i‡(
ch¨a˘îD©aH™dÀr
) {

1531 i‡(
	`MUST_CONVERT
(
íc
, 
s
)) {

1533 
ICHAR
 *
d©aPå
 = (ICHAR *)
d©aBuf
;

1534 
	`XmlC⁄vît
(
íc
, &
s
, 
√xt
, &
d©aPå
, (
ICHAR
 *)
d©aBufEnd
);

1535 *
evítEndPP
 = 
s
;

1536 
	`ch¨a˘îD©aH™dÀr
(
h™dÀrArg
, 
d©aBuf
, 
d©aPå
 - (
ICHAR
 *)dataBuf);

1537 i‡(
s
 =
√xt
)

1539 *
evítPP
 = 
s
;

1543 
	`ch¨a˘îD©aH™dÀr
(
h™dÀrArg
,

1544 (
XML_Ch¨
 *)
s
,

1545 (
XML_Ch¨
 *)
√xt
 - (XML_Ch¨ *)
s
);

1547 i‡(
deÁu…H™dÀr
)

1548 
	`ªp‹tDeÁu…
(
∑r£r
, 
íc
, 
s
, 
√xt
);

1550 
XML_TOK_PI
:

1551 i‡(!
	`ªp‹tPro˚ssögIn°ru˘i⁄
(
∑r£r
, 
íc
, 
s
, 
√xt
))

1552  
XML_ERROR_NO_MEMORY
;

1554 
XML_TOK_COMMENT
:

1555 i‡(!
	`ªp‹tCommít
(
∑r£r
, 
íc
, 
s
, 
√xt
))

1556  
XML_ERROR_NO_MEMORY
;

1559 i‡(
deÁu…H™dÀr
)

1560 
	`ªp‹tDeÁu…
(
∑r£r
, 
íc
, 
s
, 
√xt
);

1563 *
evítPP
 = 
s
 = 
√xt
;

1566 
	}
}

1571 
XML_Eº‹
 
	$°‹eAâs
(
XML_P¨£r
 
∑r£r
, c⁄° 
ENCODING
 *
íc
,

1572 c⁄° *
©tSå
, 
TAG_NAME
 *
ègNamePå
,

1573 
BINDING
 **
bödögsPå
)

1575 
ELEMENT_TYPE
 *
ñemítTy≥
 = 0;

1576 
nDeÁu…Aâs
 = 0;

1577 c⁄° 
XML_Ch¨
 **
≠pAâs
;

1578 
©tIndex
 = 0;

1579 
i
;

1580 
n
;

1581 
nPªfixes
 = 0;

1582 
BINDING
 *
bödög
;

1583 c⁄° 
XML_Ch¨
 *
loˇlP¨t
;

1586 i‡(
ègNamePå
) {

1587 
ñemítTy≥
 = (
ELEMENT_TYPE
 *)
	`lookup
(&
dtd
.
ñemítTy≥s
, 
ègNamePå
->
°r
, 0);

1588 i‡(!
ñemítTy≥
) {

1589 
ègNamePå
->
°r
 = 
	`poﬁC›ySåög
(&
dtd
.
poﬁ
,ÅagNamePtr->str);

1590 i‡(!
ègNamePå
->
°r
)

1591  
XML_ERROR_NO_MEMORY
;

1592 
ñemítTy≥
 = (
ELEMENT_TYPE
 *)
	`lookup
(&
dtd
.
ñemítTy≥s
, 
ègNamePå
->
°r
, (ELEMENT_TYPE));

1593 i‡(!
ñemítTy≥
)

1594  
XML_ERROR_NO_MEMORY
;

1595 i‡(
ns
 && !
	`£tEÀmítTy≥Pªfix
(
∑r£r
, 
ñemítTy≥
))

1596  
XML_ERROR_NO_MEMORY
;

1598 
nDeÁu…Aâs
 = 
ñemítTy≥
->nDefaultAtts;

1601 
n
 = 
	`XmlGëAâribuãs
(
íc
, 
©tSå
, 
©tsSize
, 
©ts
);

1602 i‡(
n
 + 
nDeÁu…Aâs
 > 
©tsSize
) {

1603 
ﬁdAâsSize
 = 
©tsSize
;

1604 
©tsSize
 = 
n
 + 
nDeÁu…Aâs
 + 
INIT_ATTS_SIZE
;

1605 
©ts
 = 
	`ªÆloc
((*Ôâs, 
©tsSize
 * (
ATTRIBUTE
));

1606 i‡(!
©ts
)

1607  
XML_ERROR_NO_MEMORY
;

1608 i‡(
n
 > 
ﬁdAâsSize
)

1609 
	`XmlGëAâribuãs
(
íc
, 
©tSå
, 
n
, 
©ts
);

1611 
≠pAâs
 = (c⁄° 
XML_Ch¨
 **)
©ts
;

1612 
i
 = 0; i < 
n
; i++) {

1614 
ATTRIBUTE_ID
 *
©tId
 = 
	`gëAâribuãId
(
∑r£r
, 
íc
, 
©ts
[
i
].
«me
,

1615 
©ts
[
i
].
«me


1616 + 
	`XmlNameLígth
(
íc
, 
©ts
[
i
].
«me
));

1617 i‡(!
©tId
)

1618  
XML_ERROR_NO_MEMORY
;

1620 i‡((
©tId
->
«me
)[-1]) {

1621 i‡(
íc
 =
ícodög
)

1622 
evítPå
 = 
©ts
[
i
].
«me
;

1623  
XML_ERROR_DUPLICATE_ATTRIBUTE
;

1625 (
©tId
->
«me
)[-1] = 1;

1626 
≠pAâs
[
©tIndex
++] = 
©tId
->
«me
;

1627 i‡(!
©ts
[
i
].
n‹mÆized
) {

1628 
XML_Eº‹
 
ªsu…
;

1629 
isCd©a
 = 1;

1632 i‡(
©tId
->
maybeTokíized
) {

1633 
j
;

1634 
j
 = 0; j < 
nDeÁu…Aâs
; j++) {

1635 i‡(
©tId
 =
ñemítTy≥
->
deÁu…Aâs
[
j
].
id
) {

1636 
isCd©a
 = 
ñemítTy≥
->
deÁu…Aâs
[
j
].isCdata;

1643 
ªsu…
 = 
	`°‹eAâribuãVÆue
(
∑r£r
, 
íc
, 
isCd©a
,

1644 
©ts
[
i
].
vÆuePå
,áâs[i].
vÆueEnd
,

1645 &
ãmpPoﬁ
);

1646 i‡(
ªsu…
)

1647  
ªsu…
;

1648 i‡(
ègNamePå
) {

1649 
≠pAâs
[
©tIndex
] = 
	`poﬁSèπ
(&
ãmpPoﬁ
);

1650 
	`poﬁFöish
(&
ãmpPoﬁ
);

1653 
	`poﬁDisˇrd
(&
ãmpPoﬁ
);

1655 i‡(
ègNamePå
) {

1657 
≠pAâs
[
©tIndex
] = 
	`poﬁSt‹eSåög
(&
ãmpPoﬁ
, 
íc
, 
©ts
[
i
].
vÆuePå
,áâs[i].
vÆueEnd
);

1658 i‡(
≠pAâs
[
©tIndex
] == 0)

1659  
XML_ERROR_NO_MEMORY
;

1660 
	`poﬁFöish
(&
ãmpPoﬁ
);

1663 i‡(
©tId
->
¥efix
 && 
ègNamePå
) {

1664 i‡(
©tId
->
xm s
) {

1666 i‡(!
	`addBödög
(
∑r£r
, 
©tId
->
¥efix
,áâId, 
≠pAâs
[
©tIndex
], 
bödögsPå
))

1667  
XML_ERROR_NO_MEMORY
;

1668 --
©tIndex
;

1672 
©tIndex
++;

1673 
nPªfixes
++;

1674 (
©tId
->
«me
)[-1] = 2;

1678 
©tIndex
++;

1680 
nS≥cifõdAâs
 = 
©tIndex
;

1682 i‡(
ègNamePå
) {

1683 
j
;

1684 
j
 = 0; j < 
nDeÁu…Aâs
; j++) {

1685 c⁄° 
DEFAULT_ATTRIBUTE
 *
da
 = 
ñemítTy≥
->
deÁu…Aâs
 + 
j
;

1686 i‡(!(
da
->
id
->
«me
)[-1] && da->
vÆue
) {

1687 i‡(
da
->
id
->
¥efix
) {

1688 i‡(
da
->
id
->
xm s
) {

1689 i‡(!
	`addBödög
(
∑r£r
, 
da
->
id
->
¥efix
, da->id, da->
vÆue
, 
bödögsPå
))

1690  
XML_ERROR_NO_MEMORY
;

1693 (
da
->
id
->
«me
)[-1] = 2;

1694 
nPªfixes
++;

1695 
≠pAâs
[
©tIndex
++] = 
da
->
id
->
«me
;

1696 
≠pAâs
[
©tIndex
++] = 
da
->
vÆue
;

1700 (
da
->
id
->
«me
)[-1] = 1;

1701 
≠pAâs
[
©tIndex
++] = 
da
->
id
->
«me
;

1702 
≠pAâs
[
©tIndex
++] = 
da
->
vÆue
;

1706 
≠pAâs
[
©tIndex
] = 0;

1708 
i
 = 0;

1709 i‡(
nPªfixes
) {

1711 ; 
i
 < 
©tIndex
; i += 2) {

1712 i‡(
≠pAâs
[
i
][-1] == 2) {

1713 
ATTRIBUTE_ID
 *
id
;

1714 ((
XML_Ch¨
 *)(
≠pAâs
[
i
]))[-1] = 0;

1715 
id
 = (
ATTRIBUTE_ID
 *)
	`lookup
(&
dtd
.
©åibuãIds
, 
≠pAâs
[
i
], 0);

1716 i‡(
id
->
¥efix
->
bödög
) {

1717 
j
;

1718 c⁄° 
BINDING
 *
b
 = 
id
->
¥efix
->
bödög
;

1719 c⁄° 
XML_Ch¨
 *
s
 = 
≠pAâs
[
i
];

1720 
j
 = 0; j < 
b
->
uriLí
; j++) {

1721 i‡(!
	`poﬁAµídCh¨
(&
ãmpPoﬁ
, 
b
->
uri
[
j
]))

1722  
XML_ERROR_NO_MEMORY
;

1724 *
s
++ != ':')

1727 i‡(!
	`poﬁAµídCh¨
(&
ãmpPoﬁ
, *
s
))

1728  
XML_ERROR_NO_MEMORY
;

1729 } *
s
++);

1730 
≠pAâs
[
i
] = 
	`poﬁSèπ
(&
ãmpPoﬁ
);

1731 
	`poﬁFöish
(&
ãmpPoﬁ
);

1733 i‡(!--
nPªfixes
)

1737 ((
XML_Ch¨
 *)(
≠pAâs
[
i
]))[-1] = 0;

1741 ; 
i
 < 
©tIndex
; i += 2)

1742 ((
XML_Ch¨
 *)(
≠pAâs
[
i
]))[-1] = 0;

1743 i‡(!
ègNamePå
)

1744  
XML_ERROR_NONE
;

1745 
bödög
 = *
bödögsPå
; bödög; bödög = bödög->
√xtTagBödög
)

1746 
bödög
->
©tId
->
«me
[-1] = 0;

1748 i‡(
ñemítTy≥
->
¥efix
) {

1749 
bödög
 = 
ñemítTy≥
->
¥efix
->binding;

1750 i‡(!
bödög
)

1751  
XML_ERROR_NONE
;

1752 
loˇlP¨t
 = 
ègNamePå
->
°r
;

1753 *
loˇlP¨t
++ !
	`XML_T
(':'))

1756 i‡(
dtd
.
deÁu…Pªfix
.
bödög
) {

1757 
bödög
 = 
dtd
.
deÁu…Pªfix
.binding;

1758 
loˇlP¨t
 = 
ègNamePå
->
°r
;

1761  
XML_ERROR_NONE
;

1762 
ègNamePå
->
loˇlP¨t
 =ÜocalPart;

1763 
ègNamePå
->
uriLí
 = 
bödög
->uriLen;

1764 
i
 = 
bödög
->
uriLí
;

1766 i‡(
i
 =
bödög
->
uriAŒoc
) {

1767 
bödög
->
uri
 = 
	`ªÆloc
(bödög->uri, (bödög->
uriAŒoc
 *2Ë* (
XML_Ch¨
));

1768 i‡(!
bödög
->
uri
)

1769  
XML_ERROR_NO_MEMORY
;

1771 
bödög
->
uri
[
i
++] = *
loˇlP¨t
;

1772 } *
loˇlP¨t
++);

1773 
ègNamePå
->
°r
 = 
bödög
->
uri
;

1774  
XML_ERROR_NONE
;

1775 
	}
}

1778 
	$addBödög
(
XML_P¨£r
 
∑r£r
, 
PREFIX
 *
¥efix
, c⁄° 
ATTRIBUTE_ID
 *
©tId
, c⁄° 
XML_Ch¨
 *
uri
, 
BINDING
 **
bödögsPå
)

1780 
BINDING
 *
b
;

1781 
Àn
;

1782 
Àn
 = 0; 
uri
[len];Üen++)

1784 i‡(
«me•a˚Sï¨©‹
)

1785 
Àn
++;

1786 i‡(
‰ìBödögLi°
) {

1787 
b
 = 
‰ìBödögLi°
;

1788 i‡(
Àn
 > 
b
->
uriAŒoc
) {

1789 
b
->
uri
 = 
	`ªÆloc
(b->uri, (
XML_Ch¨
Ë* (
Àn
 + 
EXPAND_SPARE
));

1790 i‡(!
b
->
uri
)

1792 
b
->
uriAŒoc
 = 
Àn
 + 
EXPAND_SPARE
;

1794 
‰ìBödögLi°
 = 
b
->
√xtTagBödög
;

1797 
b
 = 
	`mÆloc
((
BINDING
));

1798 i‡(!
b
)

1800 
b
->
uri
 = 
	`mÆloc
((
XML_Ch¨
Ë* (
Àn
 + 
EXPAND_SPARE
));

1801 i‡(!
b
->
uri
) {

1802 
	`‰ì
(
b
);

1805 
b
->
uriAŒoc
 = 
Àn
 + 
EXPAND_SPARE
;

1807 
b
->
uriLí
 = 
Àn
;

1808 
	`mem˝y
(
b
->
uri
, uri, 
Àn
 * (
XML_Ch¨
));

1809 i‡(
«me•a˚Sï¨©‹
)

1810 
b
->
uri
[
Àn
 - 1] = 
«me•a˚Sï¨©‹
;

1811 
b
->
¥efix
 =Örefix;

1812 
b
->
©tId
 =áttId;

1813 
b
->
¥evPªfixBödög
 = 
¥efix
->
bödög
;

1814 i‡(*
uri
 =
	`XML_T
('\0'Ë&& 
¥efix
 =&
dtd
.
deÁu…Pªfix
)

1815 
¥efix
->
bödög
 = 0;

1817 
¥efix
->
bödög
 = 
b
;

1818 
b
->
√xtTagBödög
 = *
bödögsPå
;

1819 *
bödögsPå
 = 
b
;

1820 i‡(
°¨tName•a˚De˛H™dÀr
)

1821 
	`°¨tName•a˚De˛H™dÀr
(
h™dÀrArg
, 
¥efix
->
«me
,

1822 
¥efix
->
bödög
 ? 
uri
 : 0);

1824 
	}
}

1830 
XML_Eº‹
 
	$cd©aSe˘i⁄Pro˚ss‹
(
XML_P¨£r
 
∑r£r
,

1831 c⁄° *
°¨t
,

1832 c⁄° *
íd
,

1833 c⁄° **
ídPå
)

1835 
XML_Eº‹
 
ªsu…
 = 
	`doCd©aSe˘i⁄
(
∑r£r
, 
ícodög
, &
°¨t
, 
íd
, 
ídPå
);

1836 i‡(
°¨t
) {

1837 
¥o˚ss‹
 = 
c⁄ã¡Pro˚ss‹
;

1838  
	`c⁄ã¡Pro˚ss‹
(
∑r£r
, 
°¨t
, 
íd
, 
ídPå
);

1840  
ªsu…
;

1841 
	}
}

1847 
XML_Eº‹
 
	$doCd©aSe˘i⁄
(
XML_P¨£r
 
∑r£r
,

1848 c⁄° 
ENCODING
 *
íc
,

1849 c⁄° **
°¨tPå
,

1850 c⁄° *
íd
,

1851 c⁄° **
√xtPå
)

1853 c⁄° *
s
 = *
°¨tPå
;

1854 c⁄° **
evítPP
;

1855 c⁄° **
evítEndPP
;

1856 i‡(
íc
 =
ícodög
) {

1857 
evítPP
 = &
evítPå
;

1858 *
evítPP
 = 
s
;

1859 
evítEndPP
 = &
evítEndPå
;

1862 
evítPP
 = &(
›íI¡î«lE¡ôõs
->
öã∫ÆEvítPå
);

1863 
evítEndPP
 = &(
›íI¡î«lE¡ôõs
->
öã∫ÆEvítEndPå
);

1865 *
evítPP
 = 
s
;

1866 *
°¨tPå
 = 0;

1868 c⁄° *
√xt
;

1869 
tok
 = 
	`XmlCd©aSe˘i⁄Tok
(
íc
, 
s
, 
íd
, &
√xt
);

1870 *
evítEndPP
 = 
√xt
;

1871 
tok
) {

1872 
XML_TOK_CDATA_SECT_CLOSE
:

1873 i‡(
ídCd©aSe˘i⁄H™dÀr
)

1874 
	`ídCd©aSe˘i⁄H™dÀr
(
h™dÀrArg
);

1877 i‡(
ch¨a˘îD©aH™dÀr
)

1878 
	`ch¨a˘îD©aH™dÀr
(
h™dÀrArg
, 
d©aBuf
, 0);

1880 i‡(
deÁu…H™dÀr
)

1881 
	`ªp‹tDeÁu…
(
∑r£r
, 
íc
, 
s
, 
√xt
);

1882 *
°¨tPå
 = 
√xt
;

1883  
XML_ERROR_NONE
;

1884 
XML_TOK_DATA_NEWLINE
:

1885 i‡(
ch¨a˘îD©aH™dÀr
) {

1886 
XML_Ch¨
 
c
 = 0xA;

1887 
	`ch¨a˘îD©aH™dÀr
(
h™dÀrArg
, &
c
, 1);

1889 i‡(
deÁu…H™dÀr
)

1890 
	`ªp‹tDeÁu…
(
∑r£r
, 
íc
, 
s
, 
√xt
);

1892 
XML_TOK_DATA_CHARS
:

1893 i‡(
ch¨a˘îD©aH™dÀr
) {

1894 i‡(
	`MUST_CONVERT
(
íc
, 
s
)) {

1896 
ICHAR
 *
d©aPå
 = (ICHAR *)
d©aBuf
;

1897 
	`XmlC⁄vît
(
íc
, &
s
, 
√xt
, &
d©aPå
, (
ICHAR
 *)
d©aBufEnd
);

1898 *
evítEndPP
 = 
√xt
;

1899 
	`ch¨a˘îD©aH™dÀr
(
h™dÀrArg
, 
d©aBuf
, 
d©aPå
 - (
ICHAR
 *)dataBuf);

1900 i‡(
s
 =
√xt
)

1902 *
evítPP
 = 
s
;

1906 
	`ch¨a˘îD©aH™dÀr
(
h™dÀrArg
,

1907 (
XML_Ch¨
 *)
s
,

1908 (
XML_Ch¨
 *)
√xt
 - (XML_Ch¨ *)
s
);

1910 i‡(
deÁu…H™dÀr
)

1911 
	`ªp‹tDeÁu…
(
∑r£r
, 
íc
, 
s
, 
√xt
);

1913 
XML_TOK_INVALID
:

1914 *
evítPP
 = 
√xt
;

1915  
XML_ERROR_INVALID_TOKEN
;

1916 
XML_TOK_PARTIAL_CHAR
:

1917 i‡(
√xtPå
) {

1918 *
√xtPå
 = 
s
;

1919  
XML_ERROR_NONE
;

1921  
XML_ERROR_PARTIAL_CHAR
;

1922 
XML_TOK_PARTIAL
:

1923 
XML_TOK_NONE
:

1924 i‡(
√xtPå
) {

1925 *
√xtPå
 = 
s
;

1926  
XML_ERROR_NONE
;

1928  
XML_ERROR_UNCLOSED_CDATA_SECTION
;

1930 
	`ab‹t
();

1932 *
evítPP
 = 
s
 = 
√xt
;

1935 
	}
}

1937 #ifde‡
XML_DTD


1943 
XML_Eº‹
 
	$ign‹eSe˘i⁄Pro˚ss‹
(
XML_P¨£r
 
∑r£r
,

1944 c⁄° *
°¨t
,

1945 c⁄° *
íd
,

1946 c⁄° **
ídPå
)

1948 
XML_Eº‹
 
ªsu…
 = 
	`doIgn‹eSe˘i⁄
(
∑r£r
, 
ícodög
, &
°¨t
, 
íd
, 
ídPå
);

1949 i‡(
°¨t
) {

1950 
¥o˚ss‹
 = 
¥ﬁogPro˚ss‹
;

1951  
	`¥ﬁogPro˚ss‹
(
∑r£r
, 
°¨t
, 
íd
, 
ídPå
);

1953  
ªsu…
;

1954 
	}
}

1960 
XML_Eº‹
 
	$doIgn‹eSe˘i⁄
(
XML_P¨£r
 
∑r£r
,

1961 c⁄° 
ENCODING
 *
íc
,

1962 c⁄° **
°¨tPå
,

1963 c⁄° *
íd
,

1964 c⁄° **
√xtPå
)

1966 c⁄° *
√xt
;

1967 
tok
;

1968 c⁄° *
s
 = *
°¨tPå
;

1969 c⁄° **
evítPP
;

1970 c⁄° **
evítEndPP
;

1971 i‡(
íc
 =
ícodög
) {

1972 
evítPP
 = &
evítPå
;

1973 *
evítPP
 = 
s
;

1974 
evítEndPP
 = &
evítEndPå
;

1977 
evítPP
 = &(
›íI¡î«lE¡ôõs
->
öã∫ÆEvítPå
);

1978 
evítEndPP
 = &(
›íI¡î«lE¡ôõs
->
öã∫ÆEvítEndPå
);

1980 *
evítPP
 = 
s
;

1981 *
°¨tPå
 = 0;

1982 
tok
 = 
	`XmlIgn‹eSe˘i⁄Tok
(
íc
, 
s
, 
íd
, &
√xt
);

1983 *
evítEndPP
 = 
√xt
;

1984 
tok
) {

1985 
XML_TOK_IGNORE_SECT
:

1986 i‡(
deÁu…H™dÀr
)

1987 
	`ªp‹tDeÁu…
(
∑r£r
, 
íc
, 
s
, 
√xt
);

1988 *
°¨tPå
 = 
√xt
;

1989  
XML_ERROR_NONE
;

1990 
XML_TOK_INVALID
:

1991 *
evítPP
 = 
√xt
;

1992  
XML_ERROR_INVALID_TOKEN
;

1993 
XML_TOK_PARTIAL_CHAR
:

1994 i‡(
√xtPå
) {

1995 *
√xtPå
 = 
s
;

1996  
XML_ERROR_NONE
;

1998  
XML_ERROR_PARTIAL_CHAR
;

1999 
XML_TOK_PARTIAL
:

2000 
XML_TOK_NONE
:

2001 i‡(
√xtPå
) {

2002 *
√xtPå
 = 
s
;

2003  
XML_ERROR_NONE
;

2005  
XML_ERROR_SYNTAX
;

2007 
	`ab‹t
();

2010 
	}
}

2014 
XML_Eº‹


2015 
	$öôülizeEncodög
(
XML_P¨£r
 
∑r£r
)

2017 c⁄° *
s
;

2018 #ifde‡
XML_UNICODE


2019 
ícodögBuf
[128];

2020 i‡(!
¥ŸocﬁEncodögName
)

2021 
s
 = 0;

2023 
i
;

2024 
i
 = 0; 
¥ŸocﬁEncodögName
[i]; i++) {

2025 i‡(
i
 =(
ícodögBuf
) - 1

2026 || 
¥ŸocﬁEncodögName
[
i
] >= 0x80

2027 || 
¥ŸocﬁEncodögName
[
i
] < 0) {

2028 
ícodögBuf
[0] = '\0';

2031 
ícodögBuf
[
i
] = ()
¥ŸocﬁEncodögName
[i];

2033 
ícodögBuf
[
i
] = '\0';

2034 
s
 = 
ícodögBuf
;

2037 
s
 = 
¥ŸocﬁEncodögName
;

2039 i‡((
ns
 ? 
XmlInôEncodögNS
 : 
XmlInôEncodög
)(&
öôEncodög
, &
ícodög
, 
s
))

2040  
XML_ERROR_NONE
;

2041  
	`h™dÀUnknownEncodög
(
∑r£r
, 
¥ŸocﬁEncodögName
);

2042 
	}
}

2044 
XML_Eº‹


2045 
	$¥o˚ssXmlDe˛
(
XML_P¨£r
 
∑r£r
, 
isGíîÆTextE¡ôy
,

2046 c⁄° *
s
, c⁄° *
√xt
)

2048 c⁄° *
ícodögName
 = 0;

2049 c⁄° 
ENCODING
 *
√wEncodög
 = 0;

2050 c⁄° *
vîsi⁄
;

2051 
°™dÆ⁄e
 = -1;

2052 i‡(!(
ns


2053 ? 
XmlP¨£XmlDe˛NS


2054 : 
XmlP¨£XmlDe˛
)(
isGíîÆTextE¡ôy
,

2055 
ícodög
,

2056 
s
,

2057 
√xt
,

2058 &
evítPå
,

2059 &
vîsi⁄
,

2060 &
ícodögName
,

2061 &
√wEncodög
,

2062 &
°™dÆ⁄e
))

2063  
XML_ERROR_SYNTAX
;

2064 i‡(!
isGíîÆTextE¡ôy
 && 
°™dÆ⁄e
 == 1) {

2065 
dtd
.
°™dÆ⁄e
 = 1;

2066 #ifde‡
XML_DTD


2067 i‡(
∑ømE¡ôyP¨sög
 =
XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE
)

2068 
∑ømE¡ôyP¨sög
 = 
XML_PARAM_ENTITY_PARSING_NEVER
;

2071 i‡(
deÁu…H™dÀr
)

2072 
	`ªp‹tDeÁu…
(
∑r£r
, 
ícodög
, 
s
, 
√xt
);

2073 i‡(!
¥ŸocﬁEncodögName
) {

2074 i‡(
√wEncodög
) {

2075 i‡(
√wEncodög
->
möByãsPîCh¨
 !
ícodög
->minBytesPerChar) {

2076 
evítPå
 = 
ícodögName
;

2077  
XML_ERROR_INCORRECT_ENCODING
;

2079 
ícodög
 = 
√wEncodög
;

2081 i‡(
ícodögName
) {

2082 
XML_Eº‹
 
ªsu…
;

2083 c⁄° 
XML_Ch¨
 *
s
 = 
	`poﬁSt‹eSåög
(&
ãmpPoﬁ
,

2084 
ícodög
,

2085 
ícodögName
,

2086 
ícodögName


2087 + 
	`XmlNameLígth
(
ícodög
, 
ícodögName
));

2088 i‡(!
s
)

2089  
XML_ERROR_NO_MEMORY
;

2090 
ªsu…
 = 
	`h™dÀUnknownEncodög
(
∑r£r
, 
s
);

2091 
	`poﬁDisˇrd
(&
ãmpPoﬁ
);

2092 i‡(
ªsu…
 =
XML_ERROR_UNKNOWN_ENCODING
)

2093 
evítPå
 = 
ícodögName
;

2094  
ªsu…
;

2097  
XML_ERROR_NONE
;

2098 
	}
}

2100 
XML_Eº‹


2101 
	$h™dÀUnknownEncodög
(
XML_P¨£r
 
∑r£r
, c⁄° 
XML_Ch¨
 *
ícodögName
)

2103 i‡(
unknownEncodögH™dÀr
) {

2104 
XML_Encodög
 
öfo
;

2105 
i
;

2106 
i
 = 0; i < 256; i++)

2107 
öfo
.
m≠
[
i
] = -1;

2108 
öfo
.
c⁄vît
 = 0;

2109 
öfo
.
d©a
 = 0;

2110 
öfo
.
ªÀa£
 = 0;

2111 i‡(
	`unknownEncodögH™dÀr
(
unknownEncodögH™dÀrD©a
, 
ícodögName
, &
öfo
)) {

2112 
ENCODING
 *
íc
;

2113 
unknownEncodögMem
 = 
	`mÆloc
(
	`XmlSizeOfUnknownEncodög
());

2114 i‡(!
unknownEncodögMem
) {

2115 i‡(
öfo
.
ªÀa£
)

2116 
öfo
.
	`ªÀa£
(öfo.
d©a
);

2117  
XML_ERROR_NO_MEMORY
;

2119 
íc
 = (
ns


2120 ? 
XmlInôUnknownEncodögNS


2121 : 
XmlInôUnknownEncodög
)(
unknownEncodögMem
,

2122 
öfo
.
m≠
,

2123 
öfo
.
c⁄vît
,

2124 
öfo
.
d©a
);

2125 i‡(
íc
) {

2126 
unknownEncodögD©a
 = 
öfo
.
d©a
;

2127 
unknownEncodögRñó£
 = 
öfo
.
ªÀa£
;

2128 
ícodög
 = 
íc
;

2129  
XML_ERROR_NONE
;

2132 i‡(
öfo
.
ªÀa£
)

2133 
öfo
.
	`ªÀa£
(öfo.
d©a
);

2135  
XML_ERROR_UNKNOWN_ENCODING
;

2136 
	}
}

2138 
XML_Eº‹


2139 
	$¥ﬁogInôPro˚ss‹
(
XML_P¨£r
 
∑r£r
,

2140 c⁄° *
s
,

2141 c⁄° *
íd
,

2142 c⁄° **
√xtPå
)

2144 
XML_Eº‹
 
ªsu…
 = 
	`öôülizeEncodög
(
∑r£r
);

2145 i‡(
ªsu…
 !
XML_ERROR_NONE
)

2146  
ªsu…
;

2147 
¥o˚ss‹
 = 
¥ﬁogPro˚ss‹
;

2148  
	`¥ﬁogPro˚ss‹
(
∑r£r
, 
s
, 
íd
, 
√xtPå
);

2149 
	}
}

2151 
XML_Eº‹


2152 
	$¥ﬁogPro˚ss‹
(
XML_P¨£r
 
∑r£r
,

2153 c⁄° *
s
,

2154 c⁄° *
íd
,

2155 c⁄° **
√xtPå
)

2157 c⁄° *
√xt
;

2158 
tok
 = 
	`XmlPrﬁogTok
(
ícodög
, 
s
, 
íd
, &
√xt
);

2159  
	`doPrﬁog
(
∑r£r
, 
ícodög
, 
s
, 
íd
, 
tok
, 
√xt
, 
√xtPå
);

2160 
	}
}

2162 
XML_Eº‹


2163 
	$doPrﬁog
(
XML_P¨£r
 
∑r£r
,

2164 c⁄° 
ENCODING
 *
íc
,

2165 c⁄° *
s
,

2166 c⁄° *
íd
,

2167 
tok
,

2168 c⁄° *
√xt
,

2169 c⁄° **
√xtPå
)

2171 #ifde‡
XML_DTD


2172 c⁄° 
XML_Ch¨
 
exã∫ÆSub£tName
[] = { '#' , '\0' };

2175 c⁄° **
evítPP
;

2176 c⁄° **
evítEndPP
;

2177 i‡(
íc
 =
ícodög
) {

2178 
evítPP
 = &
evítPå
;

2179 
evítEndPP
 = &
evítEndPå
;

2182 
evítPP
 = &(
›íI¡î«lE¡ôõs
->
öã∫ÆEvítPå
);

2183 
evítEndPP
 = &(
›íI¡î«lE¡ôõs
->
öã∫ÆEvítEndPå
);

2186 
rﬁe
;

2187 *
evítPP
 = 
s
;

2188 *
evítEndPP
 = 
√xt
;

2189 i‡(
tok
 <= 0) {

2190 i‡(
√xtPå
 !0 && 
tok
 !
XML_TOK_INVALID
) {

2191 *
√xtPå
 = 
s
;

2192  
XML_ERROR_NONE
;

2194 
tok
) {

2195 
XML_TOK_INVALID
:

2196 *
evítPP
 = 
√xt
;

2197  
XML_ERROR_INVALID_TOKEN
;

2198 
XML_TOK_PARTIAL
:

2199  
XML_ERROR_UNCLOSED_TOKEN
;

2200 
XML_TOK_PARTIAL_CHAR
:

2201  
XML_ERROR_PARTIAL_CHAR
;

2202 
XML_TOK_NONE
:

2203 #ifde‡
XML_DTD


2204 i‡(
íc
 !
ícodög
)

2205  
XML_ERROR_NONE
;

2206 i‡(
∑ª¡P¨£r
) {

2207 i‡(
	`XmlTokíRﬁe
(&
¥ﬁogSèã
, 
XML_TOK_NONE
, 
íd
,Énd, 
íc
)

2208 =
XML_ROLE_ERROR
)

2209  
XML_ERROR_SYNTAX
;

2210 
hadExã∫ÆDo˘y≥
 = 0;

2211  
XML_ERROR_NONE
;

2214  
XML_ERROR_NO_ELEMENTS
;

2216 
tok
 = -tok;

2217 
√xt
 = 
íd
;

2221 
rﬁe
 = 
	`XmlTokíRﬁe
(&
¥ﬁogSèã
, 
tok
, 
s
, 
√xt
, 
íc
);

2222 
rﬁe
) {

2223 
XML_ROLE_XML_DECL
:

2225 
XML_Eº‹
 
ªsu…
 = 
	`¥o˚ssXmlDe˛
(
∑r£r
, 0, 
s
, 
√xt
);

2226 i‡(
ªsu…
 !
XML_ERROR_NONE
)

2227  
ªsu…
;

2228 
íc
 = 
ícodög
;

2231 
XML_ROLE_DOCTYPE_NAME
:

2232 i‡(
°¨tDo˘y≥De˛H™dÀr
) {

2233 c⁄° 
XML_Ch¨
 *
«me
 = 
	`poﬁSt‹eSåög
(&
ãmpPoﬁ
, 
íc
, 
s
, 
√xt
);

2234 i‡(!
«me
)

2235  
XML_ERROR_NO_MEMORY
;

2236 
	`°¨tDo˘y≥De˛H™dÀr
(
h™dÀrArg
, 
«me
);

2237 
	`poﬁCÀ¨
(&
ãmpPoﬁ
);

2240 #ifde‡
XML_DTD


2241 
XML_ROLE_TEXT_DECL
:

2243 
XML_Eº‹
 
ªsu…
 = 
	`¥o˚ssXmlDe˛
(
∑r£r
, 1, 
s
, 
√xt
);

2244 i‡(
ªsu…
 !
XML_ERROR_NONE
)

2245  
ªsu…
;

2246 
íc
 = 
ícodög
;

2250 
XML_ROLE_DOCTYPE_PUBLIC_ID
:

2251 #ifde‡
XML_DTD


2252 
de˛E¡ôy
 = (
ENTITY
 *)
	`lookup
(&
dtd
.
∑ømE¡ôõs
,

2253 
exã∫ÆSub£tName
,

2254 (
ENTITY
));

2255 i‡(!
de˛E¡ôy
)

2256  
XML_ERROR_NO_MEMORY
;

2259 
XML_ROLE_ENTITY_PUBLIC_ID
:

2260 i‡(!
	`XmlIsPublicId
(
íc
, 
s
, 
√xt
, 
evítPP
))

2261  
XML_ERROR_SYNTAX
;

2262 i‡(
de˛E¡ôy
) {

2263 
XML_Ch¨
 *
ãm
 = 
	`poﬁSt‹eSåög
(&
dtd
.
poﬁ
,

2264 
íc
,

2265 
s
 + 
íc
->
möByãsPîCh¨
,

2266 
√xt
 - 
íc
->
möByãsPîCh¨
);

2267 i‡(!
ãm
)

2268  
XML_ERROR_NO_MEMORY
;

2269 
	`n‹mÆizePublicId
(
ãm
);

2270 
de˛E¡ôy
->
publicId
 = 
ãm
;

2271 
	`poﬁFöish
(&
dtd
.
poﬁ
);

2274 
XML_ROLE_DOCTYPE_CLOSE
:

2275 i‡(
dtd
.
com∂ëe
 && 
hadExã∫ÆDo˘y≥
) {

2276 
dtd
.
com∂ëe
 = 0;

2277 #ifde‡
XML_DTD


2278 i‡(
∑ømE¡ôyP¨sög
 && 
exã∫ÆE¡ôyRefH™dÀr
) {

2279 
ENTITY
 *
ítôy
 = (ENTITY *)
	`lookup
(&
dtd
.
∑ømE¡ôõs
,

2280 
exã∫ÆSub£tName
,

2282 i‡(!
	`exã∫ÆE¡ôyRefH™dÀr
(
exã∫ÆE¡ôyRefH™dÀrArg
,

2284 
ítôy
->
ba£
,

2285 
ítôy
->
sy°emId
,

2286 
ítôy
->
publicId
))

2287  
XML_ERROR_EXTERNAL_ENTITY_HANDLING
;

2290 i‡(!
dtd
.
com∂ëe


2291 && !
dtd
.
°™dÆ⁄e


2292 && 
nŸSèndÆ⁄eH™dÀr


2293 && !
	`nŸSèndÆ⁄eH™dÀr
(
h™dÀrArg
))

2294  
XML_ERROR_NOT_STANDALONE
;

2296 i‡(
ídDo˘y≥De˛H™dÀr
)

2297 
	`ídDo˘y≥De˛H™dÀr
(
h™dÀrArg
);

2299 
XML_ROLE_INSTANCE_START
:

2300 
¥o˚ss‹
 = 
c⁄ã¡Pro˚ss‹
;

2301  
	`c⁄ã¡Pro˚ss‹
(
∑r£r
, 
s
, 
íd
, 
√xtPå
);

2302 
XML_ROLE_ATTLIST_ELEMENT_NAME
:

2304 c⁄° 
XML_Ch¨
 *
«me
 = 
	`poﬁSt‹eSåög
(&
dtd
.
poﬁ
, 
íc
, 
s
, 
√xt
);

2305 i‡(!
«me
)

2306  
XML_ERROR_NO_MEMORY
;

2307 
de˛EÀmítTy≥
 = (
ELEMENT_TYPE
 *)
	`lookup
(&
dtd
.
ñemítTy≥s
, 
«me
, (ELEMENT_TYPE));

2308 i‡(!
de˛EÀmítTy≥
)

2309  
XML_ERROR_NO_MEMORY
;

2310 i‡(
de˛EÀmítTy≥
->
«me
 !=Çame)

2311 
	`poﬁDisˇrd
(&
dtd
.
poﬁ
);

2313 
	`poﬁFöish
(&
dtd
.
poﬁ
);

2314 i‡(!
	`£tEÀmítTy≥Pªfix
(
∑r£r
, 
de˛EÀmítTy≥
))

2315  
XML_ERROR_NO_MEMORY
;

2319 
XML_ROLE_ATTRIBUTE_NAME
:

2320 
de˛AâribuãId
 = 
	`gëAâribuãId
(
∑r£r
, 
íc
, 
s
, 
√xt
);

2321 i‡(!
de˛AâribuãId
)

2322  
XML_ERROR_NO_MEMORY
;

2323 
de˛AâribuãIsCd©a
 = 0;

2325 
XML_ROLE_ATTRIBUTE_TYPE_CDATA
:

2326 
de˛AâribuãIsCd©a
 = 1;

2328 
XML_ROLE_IMPLIED_ATTRIBUTE_VALUE
:

2329 
XML_ROLE_REQUIRED_ATTRIBUTE_VALUE
:

2330 i‡(
dtd
.
com∂ëe


2331 && !
	`deföeAâribuã
(
de˛EÀmítTy≥
, 
de˛AâribuãId
, 
de˛AâribuãIsCd©a
, 0))

2332  
XML_ERROR_NO_MEMORY
;

2334 
XML_ROLE_DEFAULT_ATTRIBUTE_VALUE
:

2335 
XML_ROLE_FIXED_ATTRIBUTE_VALUE
:

2337 c⁄° 
XML_Ch¨
 *
©tVÆ
;

2338 
XML_Eº‹
 
ªsu…


2339 
	`°‹eAâribuãVÆue
(
∑r£r
, 
íc
, 
de˛AâribuãIsCd©a
,

2340 
s
 + 
íc
->
möByãsPîCh¨
,

2341 
√xt
 - 
íc
->
möByãsPîCh¨
,

2342 &
dtd
.
poﬁ
);

2343 i‡(
ªsu…
)

2344  
ªsu…
;

2345 
©tVÆ
 = 
	`poﬁSèπ
(&
dtd
.
poﬁ
);

2346 
	`poﬁFöish
(&
dtd
.
poﬁ
);

2347 i‡(
dtd
.
com∂ëe


2348 && !
	`deföeAâribuã
(
de˛EÀmítTy≥
, 
de˛AâribuãId
, 
de˛AâribuãIsCd©a
, 
©tVÆ
))

2349  
XML_ERROR_NO_MEMORY
;

2352 
XML_ROLE_ENTITY_VALUE
:

2354 
XML_Eº‹
 
ªsu…
 = 
	`°‹eE¡ôyVÆue
(
∑r£r
, 
íc
,

2355 
s
 + 
íc
->
möByãsPîCh¨
,

2356 
√xt
 - 
íc
->
möByãsPîCh¨
);

2357 i‡(
de˛E¡ôy
) {

2358 
de˛E¡ôy
->
ãxtPå
 = 
	`poﬁSèπ
(&
dtd
.
poﬁ
);

2359 
de˛E¡ôy
->
ãxtLí
 = 
	`poﬁLígth
(&
dtd
.
poﬁ
);

2360 
	`poﬁFöish
(&
dtd
.
poﬁ
);

2363 
	`poﬁDisˇrd
(&
dtd
.
poﬁ
);

2364 i‡(
ªsu…
 !
XML_ERROR_NONE
)

2365  
ªsu…
;

2368 
XML_ROLE_DOCTYPE_SYSTEM_ID
:

2369 i‡(!
dtd
.
°™dÆ⁄e


2370 #ifde‡
XML_DTD


2371 && !
∑ømE¡ôyP¨sög


2373 && 
nŸSèndÆ⁄eH™dÀr


2374 && !
	`nŸSèndÆ⁄eH™dÀr
(
h™dÀrArg
))

2375  
XML_ERROR_NOT_STANDALONE
;

2376 
hadExã∫ÆDo˘y≥
 = 1;

2377 #i‚de‡
XML_DTD


2380 i‡(!
de˛E¡ôy
) {

2381 
de˛E¡ôy
 = (
ENTITY
 *)
	`lookup
(&
dtd
.
∑ømE¡ôõs
,

2382 
exã∫ÆSub£tName
,

2383 (
ENTITY
));

2384 i‡(!
de˛E¡ôy
)

2385  
XML_ERROR_NO_MEMORY
;

2389 
XML_ROLE_ENTITY_SYSTEM_ID
:

2390 i‡(
de˛E¡ôy
) {

2391 
de˛E¡ôy
->
sy°emId
 = 
	`poﬁSt‹eSåög
(&
dtd
.
poﬁ
, 
íc
,

2392 
s
 + 
íc
->
möByãsPîCh¨
,

2393 
√xt
 - 
íc
->
möByãsPîCh¨
);

2394 i‡(!
de˛E¡ôy
->
sy°emId
)

2395  
XML_ERROR_NO_MEMORY
;

2396 
de˛E¡ôy
->
ba£
 = 
curBa£
;

2397 
	`poﬁFöish
(&
dtd
.
poﬁ
);

2400 
XML_ROLE_ENTITY_NOTATION_NAME
:

2401 i‡(
de˛E¡ôy
) {

2402 
de˛E¡ôy
->
nŸ©i⁄
 = 
	`poﬁSt‹eSåög
(&
dtd
.
poﬁ
, 
íc
, 
s
, 
√xt
);

2403 i‡(!
de˛E¡ôy
->
nŸ©i⁄
)

2404  
XML_ERROR_NO_MEMORY
;

2405 
	`poﬁFöish
(&
dtd
.
poﬁ
);

2406 i‡(
u≈¨£dE¡ôyDe˛H™dÀr
) {

2407 *
evítEndPP
 = 
s
;

2408 
	`u≈¨£dE¡ôyDe˛H™dÀr
(
h™dÀrArg
,

2409 
de˛E¡ôy
->
«me
,

2410 
de˛E¡ôy
->
ba£
,

2411 
de˛E¡ôy
->
sy°emId
,

2412 
de˛E¡ôy
->
publicId
,

2413 
de˛E¡ôy
->
nŸ©i⁄
);

2418 
XML_ROLE_GENERAL_ENTITY_NAME
:

2420 c⁄° 
XML_Ch¨
 *
«me
;

2421 i‡(
	`XmlPªdeföedE¡ôyName
(
íc
, 
s
, 
√xt
)) {

2422 
de˛E¡ôy
 = 0;

2425 
«me
 = 
	`poﬁSt‹eSåög
(&
dtd
.
poﬁ
, 
íc
, 
s
, 
√xt
);

2426 i‡(!
«me
)

2427  
XML_ERROR_NO_MEMORY
;

2428 i‡(
dtd
.
com∂ëe
) {

2429 
de˛E¡ôy
 = (
ENTITY
 *)
	`lookup
(&
dtd
.
gíîÆE¡ôõs
, 
«me
, (ENTITY));

2430 i‡(!
de˛E¡ôy
)

2431  
XML_ERROR_NO_MEMORY
;

2432 i‡(
de˛E¡ôy
->
«me
 !=Çame) {

2433 
	`poﬁDisˇrd
(&
dtd
.
poﬁ
);

2434 
de˛E¡ôy
 = 0;

2437 
	`poﬁFöish
(&
dtd
.
poﬁ
);

2440 
	`poﬁDisˇrd
(&
dtd
.
poﬁ
);

2441 
de˛E¡ôy
 = 0;

2445 
XML_ROLE_PARAM_ENTITY_NAME
:

2446 #ifde‡
XML_DTD


2447 i‡(
dtd
.
com∂ëe
) {

2448 c⁄° 
XML_Ch¨
 *
«me
 = 
	`poﬁSt‹eSåög
(&
dtd
.
poﬁ
, 
íc
, 
s
, 
√xt
);

2449 i‡(!
«me
)

2450  
XML_ERROR_NO_MEMORY
;

2451 
de˛E¡ôy
 = (
ENTITY
 *)
	`lookup
(&
dtd
.
∑ømE¡ôõs
, 
«me
, (ENTITY));

2452 i‡(!
de˛E¡ôy
)

2453  
XML_ERROR_NO_MEMORY
;

2454 i‡(
de˛E¡ôy
->
«me
 !=Çame) {

2455 
	`poﬁDisˇrd
(&
dtd
.
poﬁ
);

2456 
de˛E¡ôy
 = 0;

2459 
	`poﬁFöish
(&
dtd
.
poﬁ
);

2462 
de˛E¡ôy
 = 0;

2465 
XML_ROLE_NOTATION_NAME
:

2466 
de˛NŸ©i⁄PublicId
 = 0;

2467 
de˛NŸ©i⁄Name
 = 0;

2468 i‡(
nŸ©i⁄De˛H™dÀr
) {

2469 
de˛NŸ©i⁄Name
 = 
	`poﬁSt‹eSåög
(&
ãmpPoﬁ
, 
íc
, 
s
, 
√xt
);

2470 i‡(!
de˛NŸ©i⁄Name
)

2471  
XML_ERROR_NO_MEMORY
;

2472 
	`poﬁFöish
(&
ãmpPoﬁ
);

2475 
XML_ROLE_NOTATION_PUBLIC_ID
:

2476 i‡(!
	`XmlIsPublicId
(
íc
, 
s
, 
√xt
, 
evítPP
))

2477  
XML_ERROR_SYNTAX
;

2478 i‡(
de˛NŸ©i⁄Name
) {

2479 
XML_Ch¨
 *
ãm
 = 
	`poﬁSt‹eSåög
(&
ãmpPoﬁ
,

2480 
íc
,

2481 
s
 + 
íc
->
möByãsPîCh¨
,

2482 
√xt
 - 
íc
->
möByãsPîCh¨
);

2483 i‡(!
ãm
)

2484  
XML_ERROR_NO_MEMORY
;

2485 
	`n‹mÆizePublicId
(
ãm
);

2486 
de˛NŸ©i⁄PublicId
 = 
ãm
;

2487 
	`poﬁFöish
(&
ãmpPoﬁ
);

2490 
XML_ROLE_NOTATION_SYSTEM_ID
:

2491 i‡(
de˛NŸ©i⁄Name
 && 
nŸ©i⁄De˛H™dÀr
) {

2492 c⁄° 
XML_Ch¨
 *
sy°emId


2493 
	`poﬁSt‹eSåög
(&
ãmpPoﬁ
, 
íc
,

2494 
s
 + 
íc
->
möByãsPîCh¨
,

2495 
√xt
 - 
íc
->
möByãsPîCh¨
);

2496 i‡(!
sy°emId
)

2497  
XML_ERROR_NO_MEMORY
;

2498 *
evítEndPP
 = 
s
;

2499 
	`nŸ©i⁄De˛H™dÀr
(
h™dÀrArg
,

2500 
de˛NŸ©i⁄Name
,

2501 
curBa£
,

2502 
sy°emId
,

2503 
de˛NŸ©i⁄PublicId
);

2505 
	`poﬁCÀ¨
(&
ãmpPoﬁ
);

2507 
XML_ROLE_NOTATION_NO_SYSTEM_ID
:

2508 i‡(
de˛NŸ©i⁄PublicId
 && 
nŸ©i⁄De˛H™dÀr
) {

2509 *
evítEndPP
 = 
s
;

2510 
	`nŸ©i⁄De˛H™dÀr
(
h™dÀrArg
,

2511 
de˛NŸ©i⁄Name
,

2512 
curBa£
,

2514 
de˛NŸ©i⁄PublicId
);

2516 
	`poﬁCÀ¨
(&
ãmpPoﬁ
);

2518 
XML_ROLE_ERROR
:

2519 
tok
) {

2520 
XML_TOK_PARAM_ENTITY_REF
:

2521  
XML_ERROR_PARAM_ENTITY_REF
;

2522 
XML_TOK_XML_DECL
:

2523  
XML_ERROR_MISPLACED_XML_PI
;

2525  
XML_ERROR_SYNTAX
;

2527 #ifde‡
XML_DTD


2528 
XML_ROLE_IGNORE_SECT
:

2530 
XML_Eº‹
 
ªsu…
;

2531 i‡(
deÁu…H™dÀr
)

2532 
	`ªp‹tDeÁu…
(
∑r£r
, 
íc
, 
s
, 
√xt
);

2533 
ªsu…
 = 
	`doIgn‹eSe˘i⁄
(
∑r£r
, 
íc
, &
√xt
, 
íd
, 
√xtPå
);

2534 i‡(!
√xt
) {

2535 
¥o˚ss‹
 = 
ign‹eSe˘i⁄Pro˚ss‹
;

2536  
ªsu…
;

2541 
XML_ROLE_GROUP_OPEN
:

2542 i‡(
¥ﬁogSèã
.
Àvñ
 >
groupSize
) {

2543 i‡(
groupSize
)

2544 
groupC⁄√˘‹
 = 
	`ªÆloc
(groupC⁄√˘‹, 
groupSize
 *= 2);

2546 
groupC⁄√˘‹
 = 
	`mÆloc
(
groupSize
 = 32);

2547 i‡(!
groupC⁄√˘‹
)

2548  
XML_ERROR_NO_MEMORY
;

2550 
groupC⁄√˘‹
[
¥ﬁogSèã
.
Àvñ
] = 0;

2552 
XML_ROLE_GROUP_SEQUENCE
:

2553 i‡(
groupC⁄√˘‹
[
¥ﬁogSèã
.
Àvñ
] == '|')

2554  
XML_ERROR_SYNTAX
;

2555 
groupC⁄√˘‹
[
¥ﬁogSèã
.
Àvñ
] = ',';

2557 
XML_ROLE_GROUP_CHOICE
:

2558 i‡(
groupC⁄√˘‹
[
¥ﬁogSèã
.
Àvñ
] == ',')

2559  
XML_ERROR_SYNTAX
;

2560 
groupC⁄√˘‹
[
¥ﬁogSèã
.
Àvñ
] = '|';

2562 
XML_ROLE_PARAM_ENTITY_REF
:

2563 #ifde‡
XML_DTD


2564 
XML_ROLE_INNER_PARAM_ENTITY_REF
:

2565 i‡(
∑ømE¡ôyP¨sög


2566 && (
dtd
.
com∂ëe
 || 
rﬁe
 =
XML_ROLE_INNER_PARAM_ENTITY_REF
)) {

2567 c⁄° 
XML_Ch¨
 *
«me
;

2568 
ENTITY
 *
ítôy
;

2569 
«me
 = 
	`poﬁSt‹eSåög
(&
dtd
.
poﬁ
, 
íc
,

2570 
s
 + 
íc
->
möByãsPîCh¨
,

2571 
√xt
 - 
íc
->
möByãsPîCh¨
);

2572 i‡(!
«me
)

2573  
XML_ERROR_NO_MEMORY
;

2574 
ítôy
 = (
ENTITY
 *)
	`lookup
(&
dtd
.
∑ømE¡ôõs
, 
«me
, 0);

2575 
	`poﬁDisˇrd
(&
dtd
.
poﬁ
);

2576 i‡(!
ítôy
) {

2578  
XML_ERROR_UNDEFINED_ENTITY
;

2580 i‡(
ítôy
->
›í
)

2581  
XML_ERROR_RECURSIVE_ENTITY_REF
;

2582 i‡(
ítôy
->
ãxtPå
) {

2583 
XML_Eº‹
 
ªsu…
;

2584 
ªsu…
 = 
	`¥o˚ssI¡î«lP¨amE¡ôy
(
∑r£r
, 
ítôy
);

2585 i‡(
ªsu…
 !
XML_ERROR_NONE
)

2586  
ªsu…
;

2589 i‡(
rﬁe
 =
XML_ROLE_INNER_PARAM_ENTITY_REF
)

2590  
XML_ERROR_PARAM_ENTITY_REF
;

2591 i‡(
exã∫ÆE¡ôyRefH™dÀr
) {

2592 
dtd
.
com∂ëe
 = 0;

2593 
ítôy
->
›í
 = 1;

2594 i‡(!
	`exã∫ÆE¡ôyRefH™dÀr
(
exã∫ÆE¡ôyRefH™dÀrArg
,

2596 
ítôy
->
ba£
,

2597 
ítôy
->
sy°emId
,

2598 
ítôy
->
publicId
)) {

2599 
ítôy
->
›í
 = 0;

2600  
XML_ERROR_EXTERNAL_ENTITY_HANDLING
;

2602 
ítôy
->
›í
 = 0;

2603 i‡(
dtd
.
com∂ëe
)

2608 i‡(!
dtd
.
°™dÆ⁄e


2609 && 
nŸSèndÆ⁄eH™dÀr


2610 && !
	`nŸSèndÆ⁄eH™dÀr
(
h™dÀrArg
))

2611  
XML_ERROR_NOT_STANDALONE
;

2612 
dtd
.
com∂ëe
 = 0;

2613 i‡(
deÁu…H™dÀr
)

2614 
	`ªp‹tDeÁu…
(
∑r£r
, 
íc
, 
s
, 
√xt
);

2616 
XML_ROLE_NONE
:

2617 
tok
) {

2618 
XML_TOK_PI
:

2619 i‡(!
	`ªp‹tPro˚ssögIn°ru˘i⁄
(
∑r£r
, 
íc
, 
s
, 
√xt
))

2620  
XML_ERROR_NO_MEMORY
;

2622 
XML_TOK_COMMENT
:

2623 i‡(!
	`ªp‹tCommít
(
∑r£r
, 
íc
, 
s
, 
√xt
))

2624  
XML_ERROR_NO_MEMORY
;

2629 i‡(
deÁu…H™dÀr
) {

2630 
tok
) {

2631 
XML_TOK_PI
:

2632 
XML_TOK_COMMENT
:

2633 
XML_TOK_BOM
:

2634 
XML_TOK_XML_DECL
:

2635 #ifde‡
XML_DTD


2636 
XML_TOK_IGNORE_SECT
:

2638 
XML_TOK_PARAM_ENTITY_REF
:

2641 #ifde‡
XML_DTD


2642 i‡(
rﬁe
 !
XML_ROLE_IGNORE_SECT
)

2644 
	`ªp‹tDeÁu…
(
∑r£r
, 
íc
, 
s
, 
√xt
);

2647 
s
 = 
√xt
;

2648 
tok
 = 
	`XmlPrﬁogTok
(
íc
, 
s
, 
íd
, &
√xt
);

2651 
	}
}

2654 
XML_Eº‹
 
	$ïûogPro˚ss‹
(
XML_P¨£r
 
∑r£r
,

2655 c⁄° *
s
,

2656 c⁄° *
íd
,

2657 c⁄° **
√xtPå
)

2659 
¥o˚ss‹
 = 
ïûogPro˚ss‹
;

2660 
evítPå
 = 
s
;

2662 c⁄° *
√xt
;

2663 
tok
 = 
	`XmlPrﬁogTok
(
ícodög
, 
s
, 
íd
, &
√xt
);

2664 
evítEndPå
 = 
√xt
;

2665 
tok
) {

2666 -
XML_TOK_PROLOG_S
:

2667 i‡(
deÁu…H™dÀr
) {

2668 
evítEndPå
 = 
íd
;

2669 
	`ªp‹tDeÁu…
(
∑r£r
, 
ícodög
, 
s
, 
íd
);

2672 
XML_TOK_NONE
:

2673 i‡(
√xtPå
)

2674 *
√xtPå
 = 
íd
;

2675  
XML_ERROR_NONE
;

2676 
XML_TOK_PROLOG_S
:

2677 i‡(
deÁu…H™dÀr
)

2678 
	`ªp‹tDeÁu…
(
∑r£r
, 
ícodög
, 
s
, 
√xt
);

2680 
XML_TOK_PI
:

2681 i‡(!
	`ªp‹tPro˚ssögIn°ru˘i⁄
(
∑r£r
, 
ícodög
, 
s
, 
√xt
))

2682  
XML_ERROR_NO_MEMORY
;

2684 
XML_TOK_COMMENT
:

2685 i‡(!
	`ªp‹tCommít
(
∑r£r
, 
ícodög
, 
s
, 
√xt
))

2686  
XML_ERROR_NO_MEMORY
;

2688 
XML_TOK_INVALID
:

2689 
evítPå
 = 
√xt
;

2690  
XML_ERROR_INVALID_TOKEN
;

2691 
XML_TOK_PARTIAL
:

2692 i‡(
√xtPå
) {

2693 *
√xtPå
 = 
s
;

2694  
XML_ERROR_NONE
;

2696  
XML_ERROR_UNCLOSED_TOKEN
;

2697 
XML_TOK_PARTIAL_CHAR
:

2698 i‡(
√xtPå
) {

2699 *
√xtPå
 = 
s
;

2700  
XML_ERROR_NONE
;

2702  
XML_ERROR_PARTIAL_CHAR
;

2704  
XML_ERROR_JUNK_AFTER_DOC_ELEMENT
;

2706 
evítPå
 = 
s
 = 
√xt
;

2708 
	}
}

2710 #ifde‡
XML_DTD


2712 
XML_Eº‹


2713 
	$¥o˚ssI¡î«lP¨amE¡ôy
(
XML_P¨£r
 
∑r£r
, 
ENTITY
 *
ítôy
)

2715 c⁄° *
s
, *
íd
, *
√xt
;

2716 
tok
;

2717 
XML_Eº‹
 
ªsu…
;

2718 
OPEN_INTERNAL_ENTITY
 
›íE¡ôy
;

2719 
ítôy
->
›í
 = 1;

2720 
›íE¡ôy
.
√xt
 = 
›íI¡î«lE¡ôõs
;

2721 
›íI¡î«lE¡ôõs
 = &
›íE¡ôy
;

2722 
›íE¡ôy
.
ítôy
 =Éntity;

2723 
›íE¡ôy
.
öã∫ÆEvítPå
 = 0;

2724 
›íE¡ôy
.
öã∫ÆEvítEndPå
 = 0;

2725 
s
 = (*)
ítôy
->
ãxtPå
;

2726 
íd
 = (*)(
ítôy
->
ãxtPå
 +É¡ôy->
ãxtLí
);

2727 
tok
 = 
	`XmlPrﬁogTok
(
öã∫ÆEncodög
, 
s
, 
íd
, &
√xt
);

2728 
ªsu…
 = 
	`doPrﬁog
(
∑r£r
, 
öã∫ÆEncodög
, 
s
, 
íd
, 
tok
, 
√xt
, 0);

2729 
ítôy
->
›í
 = 0;

2730 
›íI¡î«lE¡ôõs
 = 
›íE¡ôy
.
√xt
;

2731  
ªsu…
;

2732 
	}
}

2737 
XML_Eº‹
 
	$îr‹Pro˚ss‹
(
XML_P¨£r
 
∑r£r
,

2738 c⁄° *
s
,

2739 c⁄° *
íd
,

2740 c⁄° **
√xtPå
)

2742  
îr‹Code
;

2743 
	}
}

2745 
XML_Eº‹


2746 
	$°‹eAâribuãVÆue
(
XML_P¨£r
 
∑r£r
, c⁄° 
ENCODING
 *
íc
, 
isCd©a
,

2747 c⁄° *
±r
, c⁄° *
íd
,

2748 
STRING_POOL
 *
poﬁ
)

2750 
XML_Eº‹
 
ªsu…
 = 
	`≠≥ndAâribuãVÆue
(
∑r£r
, 
íc
, 
isCd©a
, 
±r
, 
íd
, 
poﬁ
);

2751 i‡(
ªsu…
)

2752  
ªsu…
;

2753 i‡(!
isCd©a
 && 
	`poﬁLígth
(
poﬁ
Ë&& 
	`poﬁLa°Ch¨
(pool) == 0x20)

2754 
	`poﬁCh›
(
poﬁ
);

2755 i‡(!
	`poﬁAµídCh¨
(
poﬁ
, 
	`XML_T
('\0')))

2756  
XML_ERROR_NO_MEMORY
;

2757  
XML_ERROR_NONE
;

2758 
	}
}

2760 
XML_Eº‹


2761 
	$≠≥ndAâribuãVÆue
(
XML_P¨£r
 
∑r£r
, c⁄° 
ENCODING
 *
íc
, 
isCd©a
,

2762 c⁄° *
±r
, c⁄° *
íd
,

2763 
STRING_POOL
 *
poﬁ
)

2766 c⁄° *
√xt
;

2767 
tok
 = 
	`XmlAâribuãVÆueTok
(
íc
, 
±r
, 
íd
, &
√xt
);

2768 
tok
) {

2769 
XML_TOK_NONE
:

2770  
XML_ERROR_NONE
;

2771 
XML_TOK_INVALID
:

2772 i‡(
íc
 =
ícodög
)

2773 
evítPå
 = 
√xt
;

2774  
XML_ERROR_INVALID_TOKEN
;

2775 
XML_TOK_PARTIAL
:

2776 i‡(
íc
 =
ícodög
)

2777 
evítPå
 = 
±r
;

2778  
XML_ERROR_INVALID_TOKEN
;

2779 
XML_TOK_CHAR_REF
:

2781 
XML_Ch¨
 
buf
[
XML_ENCODE_MAX
];

2782 
i
;

2783 
n
 = 
	`XmlCh¨RefNumbî
(
íc
, 
±r
);

2784 i‡(
n
 < 0) {

2785 i‡(
íc
 =
ícodög
)

2786 
evítPå
 = 
±r
;

2787  
XML_ERROR_BAD_CHAR_REF
;

2789 i‡(!
isCd©a


2790 && 
n
 == 0x20

2791 && (
	`poﬁLígth
(
poﬁ
Ë=0 || 
	`poﬁLa°Ch¨
(pool) == 0x20))

2793 
n
 = 
	`XmlEncode
“, (
ICHAR
 *)
buf
);

2794 i‡(!
n
) {

2795 i‡(
íc
 =
ícodög
)

2796 
evítPå
 = 
±r
;

2797  
XML_ERROR_BAD_CHAR_REF
;

2799 
i
 = 0; i < 
n
; i++) {

2800 i‡(!
	`poﬁAµídCh¨
(
poﬁ
, 
buf
[
i
]))

2801  
XML_ERROR_NO_MEMORY
;

2805 
XML_TOK_DATA_CHARS
:

2806 i‡(!
	`poﬁAµíd
(
poﬁ
, 
íc
, 
±r
, 
√xt
))

2807  
XML_ERROR_NO_MEMORY
;

2810 
XML_TOK_TRAILING_CR
:

2811 
√xt
 = 
±r
 + 
íc
->
möByãsPîCh¨
;

2813 
XML_TOK_ATTRIBUTE_VALUE_S
:

2814 
XML_TOK_DATA_NEWLINE
:

2815 i‡(!
isCd©a
 && (
	`poﬁLígth
(
poﬁ
Ë=0 || 
	`poﬁLa°Ch¨
(pool) == 0x20))

2817 i‡(!
	`poﬁAµídCh¨
(
poﬁ
, 0x20))

2818  
XML_ERROR_NO_MEMORY
;

2820 
XML_TOK_ENTITY_REF
:

2822 c⁄° 
XML_Ch¨
 *
«me
;

2823 
ENTITY
 *
ítôy
;

2824 
XML_Ch¨
 
ch
 = 
	`XmlPªdeföedE¡ôyName
(
íc
,

2825 
±r
 + 
íc
->
möByãsPîCh¨
,

2826 
√xt
 - 
íc
->
möByãsPîCh¨
);

2827 i‡(
ch
) {

2828 i‡(!
	`poﬁAµídCh¨
(
poﬁ
, 
ch
))

2829  
XML_ERROR_NO_MEMORY
;

2832 
«me
 = 
	`poﬁSt‹eSåög
(&
ãmp2Poﬁ
, 
íc
,

2833 
±r
 + 
íc
->
möByãsPîCh¨
,

2834 
√xt
 - 
íc
->
möByãsPîCh¨
);

2835 i‡(!
«me
)

2836  
XML_ERROR_NO_MEMORY
;

2837 
ítôy
 = (
ENTITY
 *)
	`lookup
(&
dtd
.
gíîÆE¡ôõs
, 
«me
, 0);

2838 
	`poﬁDisˇrd
(&
ãmp2Poﬁ
);

2839 i‡(!
ítôy
) {

2840 i‡(
dtd
.
com∂ëe
) {

2841 i‡(
íc
 =
ícodög
)

2842 
evítPå
 = 
±r
;

2843  
XML_ERROR_UNDEFINED_ENTITY
;

2846 i‡(
ítôy
->
›í
) {

2847 i‡(
íc
 =
ícodög
)

2848 
evítPå
 = 
±r
;

2849  
XML_ERROR_RECURSIVE_ENTITY_REF
;

2851 i‡(
ítôy
->
nŸ©i⁄
) {

2852 i‡(
íc
 =
ícodög
)

2853 
evítPå
 = 
±r
;

2854  
XML_ERROR_BINARY_ENTITY_REF
;

2856 i‡(!
ítôy
->
ãxtPå
) {

2857 i‡(
íc
 =
ícodög
)

2858 
evítPå
 = 
±r
;

2859  
XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF
;

2862 
XML_Eº‹
 
ªsu…
;

2863 c⁄° 
XML_Ch¨
 *
ãxtEnd
 = 
ítôy
->
ãxtPå
 +É¡ôy->
ãxtLí
;

2864 
ítôy
->
›í
 = 1;

2865 
ªsu…
 = 
	`≠≥ndAâribuãVÆue
(
∑r£r
, 
öã∫ÆEncodög
, 
isCd©a
, (*)
ítôy
->
ãxtPå
, (*)
ãxtEnd
, 
poﬁ
);

2866 
ítôy
->
›í
 = 0;

2867 i‡(
ªsu…
)

2868  
ªsu…
;

2873 
	`ab‹t
();

2875 
±r
 = 
√xt
;

2878 
	}
}

2881 
XML_Eº‹
 
	$°‹eE¡ôyVÆue
(
XML_P¨£r
 
∑r£r
,

2882 c⁄° 
ENCODING
 *
íc
,

2883 c⁄° *
ítôyTextPå
,

2884 c⁄° *
ítôyTextEnd
)

2886 
STRING_POOL
 *
poﬁ
 = &(
dtd
.pool);

2888 c⁄° *
√xt
;

2889 
tok
 = 
	`XmlE¡ôyVÆueTok
(
íc
, 
ítôyTextPå
, 
ítôyTextEnd
, &
√xt
);

2890 
tok
) {

2891 
XML_TOK_PARAM_ENTITY_REF
:

2892 #ifde‡
XML_DTD


2893 i‡(
∑ª¡P¨£r
 || 
íc
 !
ícodög
) {

2894 
XML_Eº‹
 
ªsu…
;

2895 c⁄° 
XML_Ch¨
 *
«me
;

2896 
ENTITY
 *
ítôy
;

2897 
«me
 = 
	`poﬁSt‹eSåög
(&
ãmpPoﬁ
, 
íc
,

2898 
ítôyTextPå
 + 
íc
->
möByãsPîCh¨
,

2899 
√xt
 - 
íc
->
möByãsPîCh¨
);

2900 i‡(!
«me
)

2901  
XML_ERROR_NO_MEMORY
;

2902 
ítôy
 = (
ENTITY
 *)
	`lookup
(&
dtd
.
∑ømE¡ôõs
, 
«me
, 0);

2903 
	`poﬁDisˇrd
(&
ãmpPoﬁ
);

2904 i‡(!
ítôy
) {

2905 i‡(
íc
 =
ícodög
)

2906 
evítPå
 = 
ítôyTextPå
;

2907  
XML_ERROR_UNDEFINED_ENTITY
;

2909 i‡(
ítôy
->
›í
) {

2910 i‡(
íc
 =
ícodög
)

2911 
evítPå
 = 
ítôyTextPå
;

2912  
XML_ERROR_RECURSIVE_ENTITY_REF
;

2914 i‡(
ítôy
->
sy°emId
) {

2915 i‡(
íc
 =
ícodög
)

2916 
evítPå
 = 
ítôyTextPå
;

2917  
XML_ERROR_PARAM_ENTITY_REF
;

2919 
ítôy
->
›í
 = 1;

2920 
ªsu…
 = 
	`°‹eE¡ôyVÆue
(
∑r£r
,

2921 
öã∫ÆEncodög
,

2922 (*)
ítôy
->
ãxtPå
,

2923 (*)(
ítôy
->
ãxtPå
 +É¡ôy->
ãxtLí
));

2924 
ítôy
->
›í
 = 0;

2925 i‡(
ªsu…
)

2926  
ªsu…
;

2930 
evítPå
 = 
ítôyTextPå
;

2931  
XML_ERROR_SYNTAX
;

2932 
XML_TOK_NONE
:

2933  
XML_ERROR_NONE
;

2934 
XML_TOK_ENTITY_REF
:

2935 
XML_TOK_DATA_CHARS
:

2936 i‡(!
	`poﬁAµíd
(
poﬁ
, 
íc
, 
ítôyTextPå
, 
√xt
))

2937  
XML_ERROR_NO_MEMORY
;

2939 
XML_TOK_TRAILING_CR
:

2940 
√xt
 = 
ítôyTextPå
 + 
íc
->
möByãsPîCh¨
;

2942 
XML_TOK_DATA_NEWLINE
:

2943 i‡(
poﬁ
->
íd
 =poﬁ->
±r
 && !
	`poﬁGrow
(pool))

2944  
XML_ERROR_NO_MEMORY
;

2945 *(
poﬁ
->
±r
)++ = 0xA;

2947 
XML_TOK_CHAR_REF
:

2949 
XML_Ch¨
 
buf
[
XML_ENCODE_MAX
];

2950 
i
;

2951 
n
 = 
	`XmlCh¨RefNumbî
(
íc
, 
ítôyTextPå
);

2952 i‡(
n
 < 0) {

2953 i‡(
íc
 =
ícodög
)

2954 
evítPå
 = 
ítôyTextPå
;

2955  
XML_ERROR_BAD_CHAR_REF
;

2957 
n
 = 
	`XmlEncode
“, (
ICHAR
 *)
buf
);

2958 i‡(!
n
) {

2959 i‡(
íc
 =
ícodög
)

2960 
evítPå
 = 
ítôyTextPå
;

2961  
XML_ERROR_BAD_CHAR_REF
;

2963 
i
 = 0; i < 
n
; i++) {

2964 i‡(
poﬁ
->
íd
 =poﬁ->
±r
 && !
	`poﬁGrow
(pool))

2965  
XML_ERROR_NO_MEMORY
;

2966 *(
poﬁ
->
±r
)++ = 
buf
[
i
];

2970 
XML_TOK_PARTIAL
:

2971 i‡(
íc
 =
ícodög
)

2972 
evítPå
 = 
ítôyTextPå
;

2973  
XML_ERROR_INVALID_TOKEN
;

2974 
XML_TOK_INVALID
:

2975 i‡(
íc
 =
ícodög
)

2976 
evítPå
 = 
√xt
;

2977  
XML_ERROR_INVALID_TOKEN
;

2979 
	`ab‹t
();

2981 
ítôyTextPå
 = 
√xt
;

2984 
	}
}

2987 
	$n‹mÆizeLöes
(
XML_Ch¨
 *
s
)

2989 
XML_Ch¨
 *
p
;

2990 ;; 
s
++) {

2991 i‡(*
s
 =
	`XML_T
('\0'))

2993 i‡(*
s
 == 0xD)

2996 
p
 = 
s
;

2998 i‡(*
s
 == 0xD) {

2999 *
p
++ = 0xA;

3000 i‡(*++
s
 == 0xA)

3001 
s
++;

3004 *
p
++ = *
s
++;

3005 } *
s
);

3006 *
p
 = 
	`XML_T
('\0');

3007 
	}
}

3010 
	$ªp‹tPro˚ssögIn°ru˘i⁄
(
XML_P¨£r
 
∑r£r
, c⁄° 
ENCODING
 *
íc
, c⁄° *
°¨t
, c⁄° *
íd
)

3012 c⁄° 
XML_Ch¨
 *
èrgë
;

3013 
XML_Ch¨
 *
d©a
;

3014 c⁄° *
ãm
;

3015 i‡(!
¥o˚ssögIn°ru˘i⁄H™dÀr
) {

3016 i‡(
deÁu…H™dÀr
)

3017 
	`ªp‹tDeÁu…
(
∑r£r
, 
íc
, 
°¨t
, 
íd
);

3020 
°¨t
 +
íc
->
möByãsPîCh¨
 * 2;

3021 
ãm
 = 
°¨t
 + 
	`XmlNameLígth
(
íc
, start);

3022 
èrgë
 = 
	`poﬁSt‹eSåög
(&
ãmpPoﬁ
, 
íc
, 
°¨t
, 
ãm
);

3023 i‡(!
èrgë
)

3025 
	`poﬁFöish
(&
ãmpPoﬁ
);

3026 
d©a
 = 
	`poﬁSt‹eSåög
(&
ãmpPoﬁ
, 
íc
,

3027 
	`XmlSkùS
(
íc
, 
ãm
),

3028 
íd
 - 
íc
->
möByãsPîCh¨
*2);

3029 i‡(!
d©a
)

3031 
	`n‹mÆizeLöes
(
d©a
);

3032 
	`¥o˚ssögIn°ru˘i⁄H™dÀr
(
h™dÀrArg
, 
èrgë
, 
d©a
);

3033 
	`poﬁCÀ¨
(&
ãmpPoﬁ
);

3035 
	}
}

3038 
	$ªp‹tCommít
(
XML_P¨£r
 
∑r£r
, c⁄° 
ENCODING
 *
íc
, c⁄° *
°¨t
, c⁄° *
íd
)

3040 
XML_Ch¨
 *
d©a
;

3041 i‡(!
commítH™dÀr
) {

3042 i‡(
deÁu…H™dÀr
)

3043 
	`ªp‹tDeÁu…
(
∑r£r
, 
íc
, 
°¨t
, 
íd
);

3046 
d©a
 = 
	`poﬁSt‹eSåög
(&
ãmpPoﬁ
,

3047 
íc
,

3048 
°¨t
 + 
íc
->
möByãsPîCh¨
 * 4,

3049 
íd
 - 
íc
->
möByãsPîCh¨
 * 3);

3050 i‡(!
d©a
)

3052 
	`n‹mÆizeLöes
(
d©a
);

3053 
	`commítH™dÀr
(
h™dÀrArg
, 
d©a
);

3054 
	`poﬁCÀ¨
(&
ãmpPoﬁ
);

3056 
	}
}

3059 
	$ªp‹tDeÁu…
(
XML_P¨£r
 
∑r£r
, c⁄° 
ENCODING
 *
íc
, c⁄° *
s
, c⁄° *
íd
)

3061 i‡(
	`MUST_CONVERT
(
íc
, 
s
)) {

3062 c⁄° **
evítPP
;

3063 c⁄° **
evítEndPP
;

3064 i‡(
íc
 =
ícodög
) {

3065 
evítPP
 = &
evítPå
;

3066 
evítEndPP
 = &
evítEndPå
;

3069 
evítPP
 = &(
›íI¡î«lE¡ôõs
->
öã∫ÆEvítPå
);

3070 
evítEndPP
 = &(
›íI¡î«lE¡ôõs
->
öã∫ÆEvítEndPå
);

3073 
ICHAR
 *
d©aPå
 = (ICHAR *)
d©aBuf
;

3074 
	`XmlC⁄vît
(
íc
, &
s
, 
íd
, &
d©aPå
, (
ICHAR
 *)
d©aBufEnd
);

3075 *
evítEndPP
 = 
s
;

3076 
	`deÁu…H™dÀr
(
h™dÀrArg
, 
d©aBuf
, 
d©aPå
 - (
ICHAR
 *)dataBuf);

3077 *
evítPP
 = 
s
;

3078 } 
s
 !
íd
);

3081 
	`deÁu…H™dÀr
(
h™dÀrArg
, (
XML_Ch¨
 *)
s
, (XML_Ch¨ *)
íd
 - (XML_Char *)s);

3082 
	}
}

3086 
	$deföeAâribuã
(
ELEMENT_TYPE
 *
ty≥
, 
ATTRIBUTE_ID
 *
©tId
, 
isCd©a
, c⁄° 
XML_Ch¨
 *
vÆue
)

3088 
DEFAULT_ATTRIBUTE
 *
©t
;

3089 i‡(
vÆue
) {

3092 
i
;

3093 
i
 = 0; i < 
ty≥
->
nDeÁu…Aâs
; i++)

3094 i‡(
©tId
 =
ty≥
->
deÁu…Aâs
[
i
].
id
)

3097 i‡(
ty≥
->
nDeÁu…Aâs
 =ty≥->
ÆlocDeÁu…Aâs
) {

3098 i‡(
ty≥
->
ÆlocDeÁu…Aâs
 == 0) {

3099 
ty≥
->
ÆlocDeÁu…Aâs
 = 8;

3100 
ty≥
->
deÁu…Aâs
 = 
	`mÆloc
—y≥->
ÆlocDeÁu…Aâs
*(
DEFAULT_ATTRIBUTE
));

3103 
ty≥
->
ÆlocDeÁu…Aâs
 *= 2;

3104 
ty≥
->
deÁu…Aâs
 = 
	`ªÆloc
(type->defaultAtts,

3105 
ty≥
->
ÆlocDeÁu…Aâs
*(
DEFAULT_ATTRIBUTE
));

3107 i‡(!
ty≥
->
deÁu…Aâs
)

3110 
©t
 = 
ty≥
->
deÁu…Aâs
 +Åy≥->
nDeÁu…Aâs
;

3111 
©t
->
id
 = 
©tId
;

3112 
©t
->
vÆue
 = value;

3113 
©t
->
isCd©a
 = isCdata;

3114 i‡(!
isCd©a
)

3115 
©tId
->
maybeTokíized
 = 1;

3116 
ty≥
->
nDeÁu…Aâs
 += 1;

3118 
	}
}

3120 
	$£tEÀmítTy≥Pªfix
(
XML_P¨£r
 
∑r£r
, 
ELEMENT_TYPE
 *
ñemítTy≥
)

3122 c⁄° 
XML_Ch¨
 *
«me
;

3123 
«me
 = 
ñemítTy≥
->name; *name;Çame++) {

3124 i‡(*
«me
 =
	`XML_T
(':')) {

3125 
PREFIX
 *
¥efix
;

3126 c⁄° 
XML_Ch¨
 *
s
;

3127 
s
 = 
ñemítTy≥
->
«me
; s !=Çame; s++) {

3128 i‡(!
	`poﬁAµídCh¨
(&
dtd
.
poﬁ
, *
s
))

3131 i‡(!
	`poﬁAµídCh¨
(&
dtd
.
poﬁ
, 
	`XML_T
('\0')))

3133 
¥efix
 = (
PREFIX
 *)
	`lookup
(&
dtd
.
¥efixes
, 
	`poﬁSèπ
(&dtd.
poﬁ
), (PREFIX));

3134 i‡(!
¥efix
)

3136 i‡(
¥efix
->
«me
 =
	`poﬁSèπ
(&
dtd
.
poﬁ
))

3137 
	`poﬁFöish
(&
dtd
.
poﬁ
);

3139 
	`poﬁDisˇrd
(&
dtd
.
poﬁ
);

3140 
ñemítTy≥
->
¥efix
 =Örefix;

3145 
	}
}

3147 
ATTRIBUTE_ID
 *

3148 
	$gëAâribuãId
(
XML_P¨£r
 
∑r£r
, c⁄° 
ENCODING
 *
íc
, c⁄° *
°¨t
, c⁄° *
íd
)

3150 
ATTRIBUTE_ID
 *
id
;

3151 c⁄° 
XML_Ch¨
 *
«me
;

3152 i‡(!
	`poﬁAµídCh¨
(&
dtd
.
poﬁ
, 
	`XML_T
('\0')))

3154 
«me
 = 
	`poﬁSt‹eSåög
(&
dtd
.
poﬁ
, 
íc
, 
°¨t
, 
íd
);

3155 i‡(!
«me
)

3157 ++
«me
;

3158 
id
 = (
ATTRIBUTE_ID
 *)
	`lookup
(&
dtd
.
©åibuãIds
, 
«me
, (ATTRIBUTE_ID));

3159 i‡(!
id
)

3161 i‡(
id
->
«me
 !=Çame)

3162 
	`poﬁDisˇrd
(&
dtd
.
poﬁ
);

3164 
	`poﬁFöish
(&
dtd
.
poﬁ
);

3165 i‡(!
ns
)

3167 i‡(
«me
[0] == 'x'

3168 && 
«me
[1] == 'm'

3169 && 
«me
[2] == 'l'

3170 && 
«me
[3] == 'n'

3171 && 
«me
[4] == 's'

3172 && (
«me
[5] =
	`XML_T
('\0') ||Çame[5] == XML_T(':'))) {

3173 i‡(
«me
[5] == '\0')

3174 
id
->
¥efix
 = &
dtd
.
deÁu…Pªfix
;

3176 
id
->
¥efix
 = (
PREFIX
 *)
	`lookup
(&
dtd
.
¥efixes
, 
«me
 + 6, (PREFIX));

3177 
id
->
xm s
 = 1;

3180 
i
;

3181 
i
 = 0; 
«me
[i]; i++) {

3182 i‡(
«me
[
i
] =
	`XML_T
(':')) {

3183 
j
;

3184 
j
 = 0; j < 
i
; j++) {

3185 i‡(!
	`poﬁAµídCh¨
(&
dtd
.
poﬁ
, 
«me
[
j
]))

3188 i‡(!
	`poﬁAµídCh¨
(&
dtd
.
poﬁ
, 
	`XML_T
('\0')))

3190 
id
->
¥efix
 = (
PREFIX
 *)
	`lookup
(&
dtd
.
¥efixes
, 
	`poﬁSèπ
(&dtd.
poﬁ
), (PREFIX));

3191 i‡(
id
->
¥efix
->
«me
 =
	`poﬁSèπ
(&
dtd
.
poﬁ
))

3192 
	`poﬁFöish
(&
dtd
.
poﬁ
);

3194 
	`poﬁDisˇrd
(&
dtd
.
poﬁ
);

3200  
id
;

3201 
	}
}

3203 
	#CONTEXT_SEP
 
	`XML_T
('\f')

	)

3206 c⁄° 
XML_Ch¨
 *
	$gëC⁄ãxt
(
XML_P¨£r
 
∑r£r
)

3208 
HASH_TABLE_ITER
 
ôî
;

3209 
√edSï
 = 0;

3211 i‡(
dtd
.
deÁu…Pªfix
.
bödög
) {

3212 
i
;

3213 
Àn
;

3214 i‡(!
	`poﬁAµídCh¨
(&
ãmpPoﬁ
, 
	`XML_T
('=')))

3216 
Àn
 = 
dtd
.
deÁu…Pªfix
.
bödög
->
uriLí
;

3217 i‡(
«me•a˚Sï¨©‹
 !
	`XML_T
('\0'))

3218 
Àn
--;

3219 
i
 = 0; i < 
Àn
; i++)

3220 i‡(!
	`poﬁAµídCh¨
(&
ãmpPoﬁ
, 
dtd
.
deÁu…Pªfix
.
bödög
->
uri
[
i
]))

3222 
√edSï
 = 1;

3225 
	`hashTabÀIãrInô
(&
ôî
, &(
dtd
.
¥efixes
));

3227 
i
;

3228 
Àn
;

3229 c⁄° 
XML_Ch¨
 *
s
;

3230 
PREFIX
 *
¥efix
 = (PREFIX *)
	`hashTabÀIãrNext
(&
ôî
);

3231 i‡(!
¥efix
)

3233 i‡(!
¥efix
->
bödög
)

3235 i‡(
√edSï
 && !
	`poﬁAµídCh¨
(&
ãmpPoﬁ
, 
CONTEXT_SEP
))

3237 
s
 = 
¥efix
->
«me
; *s; s++)

3238 i‡(!
	`poﬁAµídCh¨
(&
ãmpPoﬁ
, *
s
))

3240 i‡(!
	`poﬁAµídCh¨
(&
ãmpPoﬁ
, 
	`XML_T
('=')))

3242 
Àn
 = 
¥efix
->
bödög
->
uriLí
;

3243 i‡(
«me•a˚Sï¨©‹
 !
	`XML_T
('\0'))

3244 
Àn
--;

3245 
i
 = 0; i < 
Àn
; i++)

3246 i‡(!
	`poﬁAµídCh¨
(&
ãmpPoﬁ
, 
¥efix
->
bödög
->
uri
[
i
]))

3248 
√edSï
 = 1;

3252 
	`hashTabÀIãrInô
(&
ôî
, &(
dtd
.
gíîÆE¡ôõs
));

3254 c⁄° 
XML_Ch¨
 *
s
;

3255 
ENTITY
 *
e
 = (ENTITY *)
	`hashTabÀIãrNext
(&
ôî
);

3256 i‡(!
e
)

3258 i‡(!
e
->
›í
)

3260 i‡(
√edSï
 && !
	`poﬁAµídCh¨
(&
ãmpPoﬁ
, 
CONTEXT_SEP
))

3262 
s
 = 
e
->
«me
; *s; s++)

3263 i‡(!
	`poﬁAµídCh¨
(&
ãmpPoﬁ
, *
s
))

3265 
√edSï
 = 1;

3268 i‡(!
	`poﬁAµídCh¨
(&
ãmpPoﬁ
, 
	`XML_T
('\0')))

3270  
ãmpPoﬁ
.
°¨t
;

3271 
	}
}

3274 
	$£tC⁄ãxt
(
XML_P¨£r
 
∑r£r
, c⁄° 
XML_Ch¨
 *
c⁄ãxt
)

3276 c⁄° 
XML_Ch¨
 *
s
 = 
c⁄ãxt
;

3278 *
c⁄ãxt
 !
	`XML_T
('\0')) {

3279 i‡(*
s
 =
CONTEXT_SEP
 || *†=
	`XML_T
('\0')) {

3280 
ENTITY
 *
e
;

3281 i‡(!
	`poﬁAµídCh¨
(&
ãmpPoﬁ
, 
	`XML_T
('\0')))

3283 
e
 = (
ENTITY
 *)
	`lookup
(&
dtd
.
gíîÆE¡ôõs
, 
	`poﬁSèπ
(&
ãmpPoﬁ
), 0);

3284 i‡(
e
)

3285 
e
->
›í
 = 1;

3286 i‡(*
s
 !
	`XML_T
('\0'))

3287 
s
++;

3288 
c⁄ãxt
 = 
s
;

3289 
	`poﬁDisˇrd
(&
ãmpPoﬁ
);

3291 i‡(*
s
 == '=') {

3292 
PREFIX
 *
¥efix
;

3293 i‡(
	`poﬁLígth
(&
ãmpPoﬁ
) == 0)

3294 
¥efix
 = &
dtd
.
deÁu…Pªfix
;

3296 i‡(!
	`poﬁAµídCh¨
(&
ãmpPoﬁ
, 
	`XML_T
('\0')))

3298 
¥efix
 = (
PREFIX
 *)
	`lookup
(&
dtd
.
¥efixes
, 
	`poﬁSèπ
(&
ãmpPoﬁ
), (PREFIX));

3299 i‡(!
¥efix
)

3301 i‡(
¥efix
->
«me
 =
	`poﬁSèπ
(&
ãmpPoﬁ
))

3302 
	`poﬁFöish
(&
ãmpPoﬁ
);

3304 
	`poﬁDisˇrd
(&
ãmpPoﬁ
);

3306 
c⁄ãxt
 = 
s
 + 1; *c⁄ãxà!
CONTEXT_SEP
 && *c⁄ãxà!
	`XML_T
('\0'); context++)

3307 i‡(!
	`poﬁAµídCh¨
(&
ãmpPoﬁ
, *
c⁄ãxt
))

3309 i‡(!
	`poﬁAµídCh¨
(&
ãmpPoﬁ
, 
	`XML_T
('\0')))

3311 i‡(!
	`addBödög
(
∑r£r
, 
¥efix
, 0, 
	`poﬁSèπ
(&
ãmpPoﬁ
), &
öhîôedBödögs
))

3313 
	`poﬁDisˇrd
(&
ãmpPoﬁ
);

3314 i‡(*
c⁄ãxt
 !
	`XML_T
('\0'))

3315 ++
c⁄ãxt
;

3316 
s
 = 
c⁄ãxt
;

3319 i‡(!
	`poﬁAµídCh¨
(&
ãmpPoﬁ
, *
s
))

3321 
s
++;

3325 
	}
}

3329 
	$n‹mÆizePublicId
(
XML_Ch¨
 *
publicId
)

3331 
XML_Ch¨
 *
p
 = 
publicId
;

3332 
XML_Ch¨
 *
s
;

3333 
s
 = 
publicId
; *s; s++) {

3334 *
s
) {

3338 i‡(
p
 !
publicId
 &&Ö[-1] != 0x20)

3339 *
p
++ = 0x20;

3342 *
p
++ = *
s
;

3345 i‡(
p
 !
publicId
 &&Ö[-1] == 0x20)

3346 --
p
;

3347 *
p
 = 
	`XML_T
('\0');

3348 
	}
}

3350 
	$dtdInô
(
DTD
 *
p
)

3352 
	`poﬁInô
(&(
p
->
poﬁ
));

3353 
	`hashTabÀInô
(&(
p
->
gíîÆE¡ôõs
));

3354 
	`hashTabÀInô
(&(
p
->
ñemítTy≥s
));

3355 
	`hashTabÀInô
(&(
p
->
©åibuãIds
));

3356 
	`hashTabÀInô
(&(
p
->
¥efixes
));

3357 
p
->
com∂ëe
 = 1;

3358 
p
->
°™dÆ⁄e
 = 0;

3359 #ifde‡
XML_DTD


3360 
	`hashTabÀInô
(&(
p
->
∑ømE¡ôõs
));

3362 
p
->
deÁu…Pªfix
.
«me
 = 0;

3363 
p
->
deÁu…Pªfix
.
bödög
 = 0;

3365 
	}
}

3367 #ifde‡
XML_DTD


3369 
	$dtdSw≠
(
DTD
 *
p1
, DTD *
p2
)

3371 
DTD
 
ãm
;

3372 
	`mem˝y
(&
ãm
, 
p1
, (
DTD
));

3373 
	`mem˝y
(
p1
, 
p2
, (
DTD
));

3374 
	`mem˝y
(
p2
, &
ãm
, (
DTD
));

3375 
	}
}

3379 
	$dtdDe°roy
(
DTD
 *
p
)

3381 
HASH_TABLE_ITER
 
ôî
;

3382 
	`hashTabÀIãrInô
(&
ôî
, &(
p
->
ñemítTy≥s
));

3384 
ELEMENT_TYPE
 *
e
 = (ELEMENT_TYPE *)
	`hashTabÀIãrNext
(&
ôî
);

3385 i‡(!
e
)

3387 i‡(
e
->
ÆlocDeÁu…Aâs
 != 0)

3388 
	`‰ì
(
e
->
deÁu…Aâs
);

3390 
	`hashTabÀDe°roy
(&(
p
->
gíîÆE¡ôõs
));

3391 #ifde‡
XML_DTD


3392 
	`hashTabÀDe°roy
(&(
p
->
∑ømE¡ôõs
));

3394 
	`hashTabÀDe°roy
(&(
p
->
ñemítTy≥s
));

3395 
	`hashTabÀDe°roy
(&(
p
->
©åibuãIds
));

3396 
	`hashTabÀDe°roy
(&(
p
->
¥efixes
));

3397 
	`poﬁDe°roy
(&(
p
->
poﬁ
));

3398 
	}
}

3403 
	$dtdC›y
(
DTD
 *
√wDtd
, c⁄° DTD *
ﬁdDtd
)

3405 
HASH_TABLE_ITER
 
ôî
;

3409 
	`hashTabÀIãrInô
(&
ôî
, &(
ﬁdDtd
->
¥efixes
));

3411 c⁄° 
XML_Ch¨
 *
«me
;

3412 c⁄° 
PREFIX
 *
ﬁdP
 = (PREFIX *)
	`hashTabÀIãrNext
(&
ôî
);

3413 i‡(!
ﬁdP
)

3415 
«me
 = 
	`poﬁC›ySåög
(&(
√wDtd
->
poﬁ
), 
ﬁdP
->name);

3416 i‡(!
«me
)

3418 i‡(!
	`lookup
(&(
√wDtd
->
¥efixes
), 
«me
, (
PREFIX
)))

3422 
	`hashTabÀIãrInô
(&
ôî
, &(
ﬁdDtd
->
©åibuãIds
));

3427 
ATTRIBUTE_ID
 *
√wA
;

3428 c⁄° 
XML_Ch¨
 *
«me
;

3429 c⁄° 
ATTRIBUTE_ID
 *
ﬁdA
 = (ATTRIBUTE_ID *)
	`hashTabÀIãrNext
(&
ôî
);

3431 i‡(!
ﬁdA
)

3434 i‡(!
	`poﬁAµídCh¨
(&(
√wDtd
->
poﬁ
), 
	`XML_T
('\0')))

3436 
«me
 = 
	`poﬁC›ySåög
(&(
√wDtd
->
poﬁ
), 
ﬁdA
->name);

3437 i‡(!
«me
)

3439 ++
«me
;

3440 
√wA
 = (
ATTRIBUTE_ID
 *)
	`lookup
(&(
√wDtd
->
©åibuãIds
), 
«me
, (ATTRIBUTE_ID));

3441 i‡(!
√wA
)

3443 
√wA
->
maybeTokíized
 = 
ﬁdA
->maybeTokenized;

3444 i‡(
ﬁdA
->
¥efix
) {

3445 
√wA
->
xm s
 = 
ﬁdA
->xmlns;

3446 i‡(
ﬁdA
->
¥efix
 =&
ﬁdDtd
->
deÁu…Pªfix
)

3447 
√wA
->
¥efix
 = &
√wDtd
->
deÁu…Pªfix
;

3449 
√wA
->
¥efix
 = (
PREFIX
 *)
	`lookup
(&(
√wDtd
->
¥efixes
), 
ﬁdA
->¥efix->
«me
, 0);

3455 
	`hashTabÀIãrInô
(&
ôî
, &(
ﬁdDtd
->
ñemítTy≥s
));

3458 
i
;

3459 
ELEMENT_TYPE
 *
√wE
;

3460 c⁄° 
XML_Ch¨
 *
«me
;

3461 c⁄° 
ELEMENT_TYPE
 *
ﬁdE
 = (ELEMENT_TYPE *)
	`hashTabÀIãrNext
(&
ôî
);

3462 i‡(!
ﬁdE
)

3464 
«me
 = 
	`poﬁC›ySåög
(&(
√wDtd
->
poﬁ
), 
ﬁdE
->name);

3465 i‡(!
«me
)

3467 
√wE
 = (
ELEMENT_TYPE
 *)
	`lookup
(&(
√wDtd
->
ñemítTy≥s
), 
«me
, (ELEMENT_TYPE));

3468 i‡(!
√wE
)

3470 i‡(
ﬁdE
->
nDeÁu…Aâs
) {

3471 
√wE
->
deÁu…Aâs
 = (
DEFAULT_ATTRIBUTE
 *)
	`mÆloc
(
ﬁdE
->
nDeÁu…Aâs
 * (DEFAULT_ATTRIBUTE));

3472 i‡(!
√wE
->
deÁu…Aâs
)

3475 
√wE
->
ÆlocDeÁu…Aâs
 =ÇewE->
nDeÁu…Aâs
 = 
ﬁdE
->nDefaultAtts;

3476 i‡(
ﬁdE
->
¥efix
)

3477 
√wE
->
¥efix
 = (
PREFIX
 *)
	`lookup
(&(
√wDtd
->
¥efixes
), 
ﬁdE
->¥efix->
«me
, 0);

3478 
i
 = 0; i < 
√wE
->
nDeÁu…Aâs
; i++) {

3479 
√wE
->
deÁu…Aâs
[
i
].
id
 = (
ATTRIBUTE_ID
 *)
	`lookup
(&(
√wDtd
->
©åibuãIds
), 
ﬁdE
->deÁu…Aâs[i].id->
«me
, 0);

3480 
√wE
->
deÁu…Aâs
[
i
].
isCd©a
 = 
ﬁdE
->defaultAtts[i].isCdata;

3481 i‡(
ﬁdE
->
deÁu…Aâs
[
i
].
vÆue
) {

3482 
√wE
->
deÁu…Aâs
[
i
].
vÆue
 = 
	`poﬁC›ySåög
(&(
√wDtd
->
poﬁ
), 
ﬁdE
->defaultAtts[i].value);

3483 i‡(!
√wE
->
deÁu…Aâs
[
i
].
vÆue
)

3487 
√wE
->
deÁu…Aâs
[
i
].
vÆue
 = 0;

3492 i‡(!
	`c›yE¡ôyTabÀ
(&(
√wDtd
->
gíîÆE¡ôõs
),

3493 &(
√wDtd
->
poﬁ
),

3494 &(
ﬁdDtd
->
gíîÆE¡ôõs
)))

3497 #ifde‡
XML_DTD


3498 i‡(!
	`c›yE¡ôyTabÀ
(&(
√wDtd
->
∑ømE¡ôõs
),

3499 &(
√wDtd
->
poﬁ
),

3500 &(
ﬁdDtd
->
∑ømE¡ôõs
)))

3504 
√wDtd
->
com∂ëe
 = 
ﬁdDtd
->complete;

3505 
√wDtd
->
°™dÆ⁄e
 = 
ﬁdDtd
->standalone;

3507 
	}
}

3509 
	$c›yE¡ôyTabÀ
(
HASH_TABLE
 *
√wTabÀ
,

3510 
STRING_POOL
 *
√wPoﬁ
,

3511 c⁄° 
HASH_TABLE
 *
ﬁdTabÀ
)

3513 
HASH_TABLE_ITER
 
ôî
;

3514 c⁄° 
XML_Ch¨
 *
ˇchedOldBa£
 = 0;

3515 c⁄° 
XML_Ch¨
 *
ˇchedNewBa£
 = 0;

3517 
	`hashTabÀIãrInô
(&
ôî
, 
ﬁdTabÀ
);

3520 
ENTITY
 *
√wE
;

3521 c⁄° 
XML_Ch¨
 *
«me
;

3522 c⁄° 
ENTITY
 *
ﬁdE
 = (ENTITY *)
	`hashTabÀIãrNext
(&
ôî
);

3523 i‡(!
ﬁdE
)

3525 
«me
 = 
	`poﬁC›ySåög
(
√wPoﬁ
, 
ﬁdE
->name);

3526 i‡(!
«me
)

3528 
√wE
 = (
ENTITY
 *)
	`lookup
(
√wTabÀ
, 
«me
, (ENTITY));

3529 i‡(!
√wE
)

3531 i‡(
ﬁdE
->
sy°emId
) {

3532 c⁄° 
XML_Ch¨
 *
ãm
 = 
	`poﬁC›ySåög
(
√wPoﬁ
, 
ﬁdE
->
sy°emId
);

3533 i‡(!
ãm
)

3535 
√wE
->
sy°emId
 = 
ãm
;

3536 i‡(
ﬁdE
->
ba£
) {

3537 i‡(
ﬁdE
->
ba£
 =
ˇchedOldBa£
)

3538 
√wE
->
ba£
 = 
ˇchedNewBa£
;

3540 
ˇchedOldBa£
 = 
ﬁdE
->
ba£
;

3541 
ãm
 = 
	`poﬁC›ySåög
(
√wPoﬁ
, 
ˇchedOldBa£
);

3542 i‡(!
ãm
)

3544 
ˇchedNewBa£
 = 
√wE
->
ba£
 = 
ãm
;

3549 c⁄° 
XML_Ch¨
 *
ãm
 = 
	`poﬁC›ySåögN
(
√wPoﬁ
, 
ﬁdE
->
ãxtPå
, oldE->
ãxtLí
);

3550 i‡(!
ãm
)

3552 
√wE
->
ãxtPå
 = 
ãm
;

3553 
√wE
->
ãxtLí
 = 
ﬁdE
->textLen;

3555 i‡(
ﬁdE
->
nŸ©i⁄
) {

3556 c⁄° 
XML_Ch¨
 *
ãm
 = 
	`poﬁC›ySåög
(
√wPoﬁ
, 
ﬁdE
->
nŸ©i⁄
);

3557 i‡(!
ãm
)

3559 
√wE
->
nŸ©i⁄
 = 
ãm
;

3563 
	}
}

3566 
	$poﬁInô
(
STRING_POOL
 *
poﬁ
)

3568 
poﬁ
->
blocks
 = 0;

3569 
poﬁ
->
‰ìBlocks
 = 0;

3570 
poﬁ
->
°¨t
 = 0;

3571 
poﬁ
->
±r
 = 0;

3572 
poﬁ
->
íd
 = 0;

3573 
	}
}

3576 
	$poﬁCÀ¨
(
STRING_POOL
 *
poﬁ
)

3578 i‡(!
poﬁ
->
‰ìBlocks
)

3579 
poﬁ
->
‰ìBlocks
 =Öoﬁ->
blocks
;

3581 
BLOCK
 *
p
 = 
poﬁ
->
blocks
;

3582 
p
) {

3583 
BLOCK
 *
ãm
 = 
p
->
√xt
;

3584 
p
->
√xt
 = 
poﬁ
->
‰ìBlocks
;

3585 
poﬁ
->
‰ìBlocks
 = 
p
;

3586 
p
 = 
ãm
;

3589 
poﬁ
->
blocks
 = 0;

3590 
poﬁ
->
°¨t
 = 0;

3591 
poﬁ
->
±r
 = 0;

3592 
poﬁ
->
íd
 = 0;

3593 
	}
}

3596 
	$poﬁDe°roy
(
STRING_POOL
 *
poﬁ
)

3598 
BLOCK
 *
p
 = 
poﬁ
->
blocks
;

3599 
p
) {

3600 
BLOCK
 *
ãm
 = 
p
->
√xt
;

3601 
	`‰ì
(
p
);

3602 
p
 = 
ãm
;

3604 
poﬁ
->
blocks
 = 0;

3605 
p
 = 
poﬁ
->
‰ìBlocks
;

3606 
p
) {

3607 
BLOCK
 *
ãm
 = 
p
->
√xt
;

3608 
	`‰ì
(
p
);

3609 
p
 = 
ãm
;

3611 
poﬁ
->
‰ìBlocks
 = 0;

3612 
poﬁ
->
±r
 = 0;

3613 
poﬁ
->
°¨t
 = 0;

3614 
poﬁ
->
íd
 = 0;

3615 
	}
}

3618 
XML_Ch¨
 *
	$poﬁAµíd
(
STRING_POOL
 *
poﬁ
, c⁄° 
ENCODING
 *
íc
,

3619 c⁄° *
±r
, c⁄° *
íd
)

3621 i‡(!
poﬁ
->
±r
 && !
	`poﬁGrow
(pool))

3624 
	`XmlC⁄vît
(
íc
, &
±r
, 
íd
, (
ICHAR
 **)&(
poﬁ
->ptr), (ICHAR *)pool->end);

3625 i‡(
±r
 =
íd
)

3627 i‡(!
	`poﬁGrow
(
poﬁ
))

3630  
poﬁ
->
°¨t
;

3631 
	}
}

3633 c⁄° 
XML_Ch¨
 *
	$poﬁC›ySåög
(
STRING_POOL
 *
poﬁ
, c⁄° 
XML_Ch¨
 *
s
)

3636 i‡(!
	`poﬁAµídCh¨
(
poﬁ
, *
s
))

3638 } *
s
++);

3639 
s
 = 
poﬁ
->
°¨t
;

3640 
	`poﬁFöish
(
poﬁ
);

3641  
s
;

3642 
	}
}

3644 c⁄° 
XML_Ch¨
 *
	$poﬁC›ySåögN
(
STRING_POOL
 *
poﬁ
, c⁄° 
XML_Ch¨
 *
s
, 
n
)

3646 i‡(!
poﬁ
->
±r
 && !
	`poﬁGrow
(pool))

3648 ; 
n
 > 0; --n, 
s
++) {

3649 i‡(!
	`poﬁAµídCh¨
(
poﬁ
, *
s
))

3653 
s
 = 
poﬁ
->
°¨t
;

3654 
	`poﬁFöish
(
poﬁ
);

3655  
s
;

3656 
	}
}

3659 
XML_Ch¨
 *
	$poﬁSt‹eSåög
(
STRING_POOL
 *
poﬁ
, c⁄° 
ENCODING
 *
íc
,

3660 c⁄° *
±r
, c⁄° *
íd
)

3662 i‡(!
	`poﬁAµíd
(
poﬁ
, 
íc
, 
±r
, 
íd
))

3664 i‡(
poﬁ
->
±r
 =poﬁ->
íd
 && !
	`poﬁGrow
(pool))

3666 *(
poﬁ
->
±r
)++ = 0;

3667  
poﬁ
->
°¨t
;

3668 
	}
}

3671 
	$poﬁGrow
(
STRING_POOL
 *
poﬁ
)

3673 i‡(
poﬁ
->
‰ìBlocks
) {

3674 i‡(
poﬁ
->
°¨t
 == 0) {

3675 
poﬁ
->
blocks
 =Öoﬁ->
‰ìBlocks
;

3676 
poﬁ
->
‰ìBlocks
 =Öoﬁ->‰ìBlocks->
√xt
;

3677 
poﬁ
->
blocks
->
√xt
 = 0;

3678 
poﬁ
->
°¨t
 =Öoﬁ->
blocks
->
s
;

3679 
poﬁ
->
íd
 =Öoﬁ->
°¨t
 +Öoﬁ->
blocks
->
size
;

3680 
poﬁ
->
±r
 =Öoﬁ->
°¨t
;

3683 i‡(
poﬁ
->
íd
 -Öoﬁ->
°¨t
 <Öoﬁ->
‰ìBlocks
->
size
) {

3684 
BLOCK
 *
ãm
 = 
poﬁ
->
‰ìBlocks
->
√xt
;

3685 
poﬁ
->
‰ìBlocks
->
√xt
 =Öoﬁ->
blocks
;

3686 
poﬁ
->
blocks
 =Öoﬁ->
‰ìBlocks
;

3687 
poﬁ
->
‰ìBlocks
 = 
ãm
;

3688 
	`mem˝y
(
poﬁ
->
blocks
->
s
,Öoﬁ->
°¨t
, (poﬁ->
íd
 -Öoﬁ->°¨tË* (
XML_Ch¨
));

3689 
poﬁ
->
±r
 =Öoﬁ->
blocks
->
s
 + (poﬁ->±∏-Öoﬁ->
°¨t
);

3690 
poﬁ
->
°¨t
 =Öoﬁ->
blocks
->
s
;

3691 
poﬁ
->
íd
 =Öoﬁ->
°¨t
 +Öoﬁ->
blocks
->
size
;

3695 i‡(
poﬁ
->
blocks
 &&Öoﬁ->
°¨t
 =poﬁ->blocks->
s
) {

3696 
blockSize
 = (
poﬁ
->
íd
 -Öoﬁ->
°¨t
)*2;

3697 
poﬁ
->
blocks
 = 
	`ªÆloc
’oﬁ->blocks, 
	`off£tof
(
BLOCK
, 
s
Ë+ 
blockSize
 * (
XML_Ch¨
));

3698 i‡(!
poﬁ
->
blocks
)

3700 
poﬁ
->
blocks
->
size
 = 
blockSize
;

3701 
poﬁ
->
±r
 =Öoﬁ->
blocks
->
s
 + (poﬁ->±∏-Öoﬁ->
°¨t
);

3702 
poﬁ
->
°¨t
 =Öoﬁ->
blocks
->
s
;

3703 
poﬁ
->
íd
 =Öoﬁ->
°¨t
 + 
blockSize
;

3706 
BLOCK
 *
ãm
;

3707 
blockSize
 = 
poﬁ
->
íd
 -Öoﬁ->
°¨t
;

3708 i‡(
blockSize
 < 
INIT_BLOCK_SIZE
)

3709 
blockSize
 = 
INIT_BLOCK_SIZE
;

3711 
blockSize
 *= 2;

3712 
ãm
 = 
	`mÆloc
(
	`off£tof
(
BLOCK
, 
s
Ë+ 
blockSize
 * (
XML_Ch¨
));

3713 i‡(!
ãm
)

3715 
ãm
->
size
 = 
blockSize
;

3716 
ãm
->
√xt
 = 
poﬁ
->
blocks
;

3717 
poﬁ
->
blocks
 = 
ãm
;

3718 
	`mem˝y
(
ãm
->
s
, 
poﬁ
->
°¨t
, (poﬁ->
±r
 -Öoﬁ->°¨tË* (
XML_Ch¨
));

3719 
poﬁ
->
±r
 = 
ãm
->
s
 + (poﬁ->±∏-Öoﬁ->
°¨t
);

3720 
poﬁ
->
°¨t
 = 
ãm
->
s
;

3721 
poﬁ
->
íd
 = 
ãm
->
s
 + 
blockSize
;

3724 
	}
}

	@modules/expat/xmlparse/xmlparse.h

31 #i‚de‡
XmlP¨£_INCLUDED


32 
	#XmlP¨£_INCLUDED
 1

	)

34 #ifde‡
__˝lu•lus


38 #i‚de‡
XMLPARSEAPI


39 
	#XMLPARSEAPI


	)

42 *
	tXML_P¨£r
;

44 #ifde‡
XML_UNICODE_WCHAR_T


50 #i‚de‡
XML_UNICODE


51 
	#XML_UNICODE


	)

54 
	~<°ddef.h
>

55 
wch¨_t
 
	tXML_Ch¨
;

56 
wch¨_t
 
	tXML_LCh¨
;

60 #ifde‡
XML_UNICODE


63 
	tXML_Ch¨
;

64 
	tXML_LCh¨
;

69 
	tXML_Ch¨
;

70 
	tXML_LCh¨
;

80 
XML_P¨£r
 
XMLPARSEAPI


81 
XML_P¨£rCª©e
(c⁄° 
XML_Ch¨
 *
ícodög
);

93 
XML_P¨£r
 
XMLPARSEAPI


94 
XML_P¨£rCª©eNS
(c⁄° 
XML_Ch¨
 *
ícodög
, XML_Ch¨ 
«me•a˚Sï¨©‹
);

100 (*
XML_SèπEÀmítH™dÀr
)(*
	tu£rD©a
,

101 c⁄° 
	tXML_Ch¨
 *
	t«me
,

102 c⁄° 
	tXML_Ch¨
 **
	t©ts
);

104 (*
XML_EndEÀmítH™dÀr
)(*
	tu£rD©a
,

105 c⁄° 
	tXML_Ch¨
 *
	t«me
);

108 (*
XML_Ch¨a˘îD©aH™dÀr
)(*
	tu£rD©a
,

109 c⁄° 
	tXML_Ch¨
 *
	ts
,

110 
	tÀn
);

113 (*
XML_Pro˚ssögIn°ru˘i⁄H™dÀr
)(*
	tu£rD©a
,

114 c⁄° 
	tXML_Ch¨
 *
	tèrgë
,

115 c⁄° 
	tXML_Ch¨
 *
	td©a
);

118 (*
XML_CommítH™dÀr
)(*
	tu£rD©a
, c⁄° 
	tXML_Ch¨
 *
	td©a
);

120 (*
XML_SèπCd©aSe˘i⁄H™dÀr
)(*
	tu£rD©a
);

121 (*
XML_EndCd©aSe˘i⁄H™dÀr
)(*
	tu£rD©a
);

136 (*
XML_DeÁu…H™dÀr
)(*
	tu£rD©a
,

137 c⁄° 
	tXML_Ch¨
 *
	ts
,

138 
	tÀn
);

142 (*
XML_SèπDo˘y≥De˛H™dÀr
)(*
	tu£rD©a
,

143 c⁄° 
	tXML_Ch¨
 *
	tdo˘y≥Name
);

147 (*
XML_EndDo˘y≥De˛H™dÀr
)(*
	tu£rD©a
);

154 (*
XML_U≈¨£dE¡ôyDe˛H™dÀr
)(*
	tu£rD©a
,

155 c⁄° 
	tXML_Ch¨
 *
	títôyName
,

156 c⁄° 
	tXML_Ch¨
 *
	tba£
,

157 c⁄° 
	tXML_Ch¨
 *
	tsy°emId
,

158 c⁄° 
	tXML_Ch¨
 *
	tpublicId
,

159 c⁄° 
	tXML_Ch¨
 *
	tnŸ©i⁄Name
);

165 (*
XML_NŸ©i⁄De˛H™dÀr
)(*
	tu£rD©a
,

166 c⁄° 
	tXML_Ch¨
 *
	tnŸ©i⁄Name
,

167 c⁄° 
	tXML_Ch¨
 *
	tba£
,

168 c⁄° 
	tXML_Ch¨
 *
	tsy°emId
,

169 c⁄° 
	tXML_Ch¨
 *
	tpublicId
);

177 (*
XML_SèπName•a˚De˛H™dÀr
)(*
	tu£rD©a
,

178 c⁄° 
	tXML_Ch¨
 *
	t¥efix
,

179 c⁄° 
	tXML_Ch¨
 *
	turi
);

181 (*
XML_EndName•a˚De˛H™dÀr
)(*
	tu£rD©a
,

182 c⁄° 
	tXML_Ch¨
 *
	t¥efix
);

190 (*
XML_NŸSèndÆ⁄eH™dÀr
)(*
	tu£rD©a
);

216 (*
XML_Exã∫ÆE¡ôyRefH™dÀr
)(
	tXML_P¨£r
 
	t∑r£r
,

217 c⁄° 
	tXML_Ch¨
 *
	tc⁄ãxt
,

218 c⁄° 
	tXML_Ch¨
 *
	tba£
,

219 c⁄° 
	tXML_Ch¨
 *
	tsy°emId
,

220 c⁄° 
	tXML_Ch¨
 *
	tpublicId
);

264 
m≠
[256];

265 *
d©a
;

266 (*
c⁄vît
)(*
d©a
, c⁄° *
s
);

267 (*
ªÀa£
)(*
d©a
);

268 } 
	tXML_Encodög
;

281 (*
XML_UnknownEncodögH™dÀr
)(*
	tícodögH™dÀrD©a
,

282 c⁄° 
	tXML_Ch¨
 *
	t«me
,

283 
	tXML_Encodög
 *
	töfo
);

285 
XMLPARSEAPI


286 
XML_SëEÀmítH™dÀr
(
XML_P¨£r
 
∑r£r
,

287 
XML_SèπEÀmítH™dÀr
 
°¨t
,

288 
XML_EndEÀmítH™dÀr
 
íd
);

290 
XMLPARSEAPI


291 
XML_SëCh¨a˘îD©aH™dÀr
(
XML_P¨£r
 
∑r£r
,

292 
XML_Ch¨a˘îD©aH™dÀr
 
h™dÀr
);

294 
XMLPARSEAPI


295 
XML_SëPro˚ssögIn°ru˘i⁄H™dÀr
(
XML_P¨£r
 
∑r£r
,

296 
XML_Pro˚ssögIn°ru˘i⁄H™dÀr
 
h™dÀr
);

297 
XMLPARSEAPI


298 
XML_SëCommítH™dÀr
(
XML_P¨£r
 
∑r£r
,

299 
XML_CommítH™dÀr
 
h™dÀr
);

301 
XMLPARSEAPI


302 
XML_SëCd©aSe˘i⁄H™dÀr
(
XML_P¨£r
 
∑r£r
,

303 
XML_SèπCd©aSe˘i⁄H™dÀr
 
°¨t
,

304 
XML_EndCd©aSe˘i⁄H™dÀr
 
íd
);

309 
XMLPARSEAPI


310 
XML_SëDeÁu…H™dÀr
(
XML_P¨£r
 
∑r£r
,

311 
XML_DeÁu…H™dÀr
 
h™dÀr
);

316 
XMLPARSEAPI


317 
XML_SëDeÁu…H™dÀrEx∑nd
(
XML_P¨£r
 
∑r£r
,

318 
XML_DeÁu…H™dÀr
 
h™dÀr
);

320 
XMLPARSEAPI


321 
XML_SëDo˘y≥De˛H™dÀr
(
XML_P¨£r
 
∑r£r
,

322 
XML_SèπDo˘y≥De˛H™dÀr
 
°¨t
,

323 
XML_EndDo˘y≥De˛H™dÀr
 
íd
);

325 
XMLPARSEAPI


326 
XML_SëU≈¨£dE¡ôyDe˛H™dÀr
(
XML_P¨£r
 
∑r£r
,

327 
XML_U≈¨£dE¡ôyDe˛H™dÀr
 
h™dÀr
);

329 
XMLPARSEAPI


330 
XML_SëNŸ©i⁄De˛H™dÀr
(
XML_P¨£r
 
∑r£r
,

331 
XML_NŸ©i⁄De˛H™dÀr
 
h™dÀr
);

333 
XMLPARSEAPI


334 
XML_SëName•a˚De˛H™dÀr
(
XML_P¨£r
 
∑r£r
,

335 
XML_SèπName•a˚De˛H™dÀr
 
°¨t
,

336 
XML_EndName•a˚De˛H™dÀr
 
íd
);

338 
XMLPARSEAPI


339 
XML_SëNŸSèndÆ⁄eH™dÀr
(
XML_P¨£r
 
∑r£r
,

340 
XML_NŸSèndÆ⁄eH™dÀr
 
h™dÀr
);

342 
XMLPARSEAPI


343 
XML_SëExã∫ÆE¡ôyRefH™dÀr
(
XML_P¨£r
 
∑r£r
,

344 
XML_Exã∫ÆE¡ôyRefH™dÀr
 
h™dÀr
);

349 
XMLPARSEAPI


350 
XML_SëExã∫ÆE¡ôyRefH™dÀrArg
(
XML_P¨£r
, *
¨g
);

352 
XMLPARSEAPI


353 
XML_SëUnknownEncodögH™dÀr
(
XML_P¨£r
 
∑r£r
,

354 
XML_UnknownEncodögH™dÀr
 
h™dÀr
,

355 *
ícodögH™dÀrD©a
);

360 
XMLPARSEAPI
 
XML_DeÁu…Cuºít
(
XML_P¨£r
 
∑r£r
);

363 
XMLPARSEAPI


364 
XML_SëU£rD©a
(
XML_P¨£r
 
∑r£r
, *
u£rD©a
);

367 
	#XML_GëU£rD©a
(
∑r£r
Ë(*(**)’¨£r))

	)

373 
XMLPARSEAPI


374 
XML_SëEncodög
(
XML_P¨£r
 
∑r£r
, c⁄° 
XML_Ch¨
 *
ícodög
);

380 
XMLPARSEAPI


381 
XML_U£P¨£rAsH™dÀrArg
(
XML_P¨£r
 
∑r£r
);

390 
XMLPARSEAPI


391 
XML_SëBa£
(
XML_P¨£r
 
∑r£r
, c⁄° 
XML_Ch¨
 *
ba£
);

393 c⁄° 
XML_Ch¨
 
XMLPARSEAPI
 *

394 
XML_GëBa£
(
XML_P¨£r
 
∑r£r
);

400 
XMLPARSEAPI
 
XML_GëS≥cifõdAâribuãCou¡
(
XML_P¨£r
 
∑r£r
);

405 
XMLPARSEAPI


406 
XML_P¨£
(
XML_P¨£r
 
∑r£r
, c⁄° *
s
, 
Àn
, 
isFöÆ
);

408 
XMLPARSEAPI
 *

409 
XML_GëBuf„r
(
XML_P¨£r
 
∑r£r
, 
Àn
);

411 
XMLPARSEAPI


412 
XML_P¨£Buf„r
(
XML_P¨£r
 
∑r£r
, 
Àn
, 
isFöÆ
);

427 
XML_P¨£r
 
XMLPARSEAPI


428 
XML_Exã∫ÆE¡ôyP¨£rCª©e
(
XML_P¨£r
 
∑r£r
,

429 c⁄° 
XML_Ch¨
 *
c⁄ãxt
,

430 c⁄° 
XML_Ch¨
 *
ícodög
);

432 
	eXML_P¨amE¡ôyP¨sög
 {

433 
XML_PARAM_ENTITY_PARSING_NEVER
,

434 
XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE
,

435 
XML_PARAM_ENTITY_PARSING_ALWAYS


457 
XMLPARSEAPI


458 
XML_SëP¨amE¡ôyP¨sög
(
XML_P¨£r
 
∑r£r
,

459 
XML_P¨amE¡ôyP¨sög
 
∑rsög
);

461 
	eXML_Eº‹
 {

462 
XML_ERROR_NONE
,

463 
XML_ERROR_NO_MEMORY
,

464 
XML_ERROR_SYNTAX
,

465 
XML_ERROR_NO_ELEMENTS
,

466 
XML_ERROR_INVALID_TOKEN
,

467 
XML_ERROR_UNCLOSED_TOKEN
,

468 
XML_ERROR_PARTIAL_CHAR
,

469 
XML_ERROR_TAG_MISMATCH
,

470 
XML_ERROR_DUPLICATE_ATTRIBUTE
,

471 
XML_ERROR_JUNK_AFTER_DOC_ELEMENT
,

472 
XML_ERROR_PARAM_ENTITY_REF
,

473 
XML_ERROR_UNDEFINED_ENTITY
,

474 
XML_ERROR_RECURSIVE_ENTITY_REF
,

475 
XML_ERROR_ASYNC_ENTITY
,

476 
XML_ERROR_BAD_CHAR_REF
,

477 
XML_ERROR_BINARY_ENTITY_REF
,

478 
XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF
,

479 
XML_ERROR_MISPLACED_XML_PI
,

480 
XML_ERROR_UNKNOWN_ENCODING
,

481 
XML_ERROR_INCORRECT_ENCODING
,

482 
XML_ERROR_UNCLOSED_CDATA_SECTION
,

483 
XML_ERROR_EXTERNAL_ENTITY_HANDLING
,

484 
XML_ERROR_NOT_STANDALONE


490 
XML_Eº‹
 
XMLPARSEAPI
 
XML_GëEº‹Code
(
XML_P¨£r
 
∑r£r
);

500 
XMLPARSEAPI
 
XML_GëCuºítLöeNumbî
(
XML_P¨£r
 
∑r£r
);

501 
XMLPARSEAPI
 
XML_GëCuºítCﬁumnNumbî
(
XML_P¨£r
 
∑r£r
);

502 
XMLPARSEAPI
 
XML_GëCuºítByãIndex
(
XML_P¨£r
 
∑r£r
);

507 
XMLPARSEAPI
 
XML_GëCuºítByãCou¡
(
XML_P¨£r
 
∑r£r
);

510 
	#XML_GëEº‹LöeNumbî
 
XML_GëCuºítLöeNumbî


	)

511 
	#XML_GëEº‹CﬁumnNumbî
 
XML_GëCuºítCﬁumnNumbî


	)

512 
	#XML_GëEº‹ByãIndex
 
XML_GëCuºítByãIndex


	)

515 
XMLPARSEAPI


516 
XML_P¨£rFªe
(
XML_P¨£r
 
∑r£r
);

519 c⁄° 
XML_LCh¨
 
XMLPARSEAPI
 *
XML_Eº‹Såög
(
code
);

521 #ifde‡
__˝lu•lus


	@modules/expat/xmltok/ascii.h

31 
	#ASCII_A
 0x41

	)

32 
	#ASCII_B
 0x42

	)

33 
	#ASCII_C
 0x43

	)

34 
	#ASCII_D
 0x44

	)

35 
	#ASCII_E
 0x45

	)

36 
	#ASCII_F
 0x46

	)

37 
	#ASCII_G
 0x47

	)

38 
	#ASCII_H
 0x48

	)

39 
	#ASCII_I
 0x49

	)

40 
	#ASCII_J
 0x4A

	)

41 
	#ASCII_K
 0x4B

	)

42 
	#ASCII_L
 0x4C

	)

43 
	#ASCII_M
 0x4D

	)

44 
	#ASCII_N
 0x4E

	)

45 
	#ASCII_O
 0x4F

	)

46 
	#ASCII_P
 0x50

	)

47 
	#ASCII_Q
 0x51

	)

48 
	#ASCII_R
 0x52

	)

49 
	#ASCII_S
 0x53

	)

50 
	#ASCII_T
 0x54

	)

51 
	#ASCII_U
 0x55

	)

52 
	#ASCII_V
 0x56

	)

53 
	#ASCII_W
 0x57

	)

54 
	#ASCII_X
 0x58

	)

55 
	#ASCII_Y
 0x59

	)

56 
	#ASCII_Z
 0x5A

	)

58 
	#ASCII_a
 0x61

	)

59 
	#ASCII_b
 0x62

	)

60 
	#ASCII_c
 0x63

	)

61 
	#ASCII_d
 0x64

	)

62 
	#ASCII_e
 0x65

	)

63 
	#ASCII_f
 0x66

	)

64 
	#ASCII_g
 0x67

	)

65 
	#ASCII_h
 0x68

	)

66 
	#ASCII_i
 0x69

	)

67 
	#ASCII_j
 0x6A

	)

68 
	#ASCII_k
 0x6B

	)

69 
	#ASCII_l
 0x6C

	)

70 
	#ASCII_m
 0x6D

	)

71 
	#ASCII_n
 0x6E

	)

72 
	#ASCII_o
 0x6F

	)

73 
	#ASCII_p
 0x70

	)

74 
	#ASCII_q
 0x71

	)

75 
	#ASCII_r
 0x72

	)

76 
	#ASCII_s
 0x73

	)

77 
	#ASCII_t
 0x74

	)

78 
	#ASCII_u
 0x75

	)

79 
	#ASCII_v
 0x76

	)

80 
	#ASCII_w
 0x77

	)

81 
	#ASCII_x
 0x78

	)

82 
	#ASCII_y
 0x79

	)

83 
	#ASCII_z
 0x7A

	)

85 
	#ASCII_0
 0x30

	)

86 
	#ASCII_1
 0x31

	)

87 
	#ASCII_2
 0x32

	)

88 
	#ASCII_3
 0x33

	)

89 
	#ASCII_4
 0x34

	)

90 
	#ASCII_5
 0x35

	)

91 
	#ASCII_6
 0x36

	)

92 
	#ASCII_7
 0x37

	)

93 
	#ASCII_8
 0x38

	)

94 
	#ASCII_9
 0x39

	)

96 
	#ASCII_TAB
 0x09

	)

97 
	#ASCII_SPACE
 0x20

	)

98 
	#ASCII_EXCL
 0x21

	)

99 
	#ASCII_QUOT
 0x22

	)

100 
	#ASCII_AMP
 0x26

	)

101 
	#ASCII_APOS
 0x27

	)

102 
	#ASCII_MINUS
 0x2D

	)

103 
	#ASCII_PERIOD
 0x2E

	)

104 
	#ASCII_COLON
 0x3A

	)

105 
	#ASCII_SEMI
 0x3B

	)

106 
	#ASCII_LT
 0x3C

	)

107 
	#ASCII_EQUALS
 0x3D

	)

108 
	#ASCII_GT
 0x3E

	)

109 
	#ASCII_LSQB
 0x5B

	)

110 
	#ASCII_RSQB
 0x5D

	)

111 
	#ASCII_UNDERSCORE
 0x5F

	)

	@modules/expat/xmltok/asciitab.h

31  
	gBT_NONXML
, BT_NONXML, BT_NONXML, BT_NONXML,

32  
	gBT_NONXML
, BT_NONXML, BT_NONXML, BT_NONXML,

33  
	gBT_NONXML
, 
	gBT_S
, 
	gBT_LF
, BT_NONXML,

34  
	gBT_NONXML
, 
	gBT_CR
, BT_NONXML, BT_NONXML,

35  
	gBT_NONXML
, BT_NONXML, BT_NONXML, BT_NONXML,

36  
	gBT_NONXML
, BT_NONXML, BT_NONXML, BT_NONXML,

37  
	gBT_NONXML
, BT_NONXML, BT_NONXML, BT_NONXML,

38  
	gBT_NONXML
, BT_NONXML, BT_NONXML, BT_NONXML,

39  
	gBT_S
, 
	gBT_EXCL
, 
	gBT_QUOT
, 
	gBT_NUM
,

40  
	gBT_OTHER
, 
	gBT_PERCNT
, 
	gBT_AMP
, 
	gBT_APOS
,

41  
	gBT_LPAR
, 
	gBT_RPAR
, 
	gBT_AST
, 
	gBT_PLUS
,

42  
	gBT_COMMA
, 
	gBT_MINUS
, 
	gBT_NAME
, 
	gBT_SOL
,

43  
	gBT_DIGIT
, BT_DIGIT, BT_DIGIT, BT_DIGIT,

44  
	gBT_DIGIT
, BT_DIGIT, BT_DIGIT, BT_DIGIT,

45  
	gBT_DIGIT
, BT_DIGIT, 
	gBT_COLON
, 
	gBT_SEMI
,

46  
	gBT_LT
, 
	gBT_EQUALS
, 
	gBT_GT
, 
	gBT_QUEST
,

47  
	gBT_OTHER
, 
	gBT_HEX
, BT_HEX, BT_HEX,

48  
	gBT_HEX
, BT_HEX, BT_HEX, 
	gBT_NMSTRT
,

49  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

50  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

51  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

52  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

53  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, 
	gBT_LSQB
,

54  
	gBT_OTHER
, 
	gBT_RSQB
, BT_OTHER, 
	gBT_NMSTRT
,

55  
	gBT_OTHER
, 
	gBT_HEX
, BT_HEX, BT_HEX,

56  
	gBT_HEX
, BT_HEX, BT_HEX, 
	gBT_NMSTRT
,

57  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

58  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

59  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

60  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

61  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, 
	gBT_OTHER
,

62  
	gBT_VERBAR
, 
	gBT_OTHER
, BT_OTHER, BT_OTHER,

	@modules/expat/xmltok/iasciitab.h

32  
	gBT_NONXML
, BT_NONXML, BT_NONXML, BT_NONXML,

33  
	gBT_NONXML
, BT_NONXML, BT_NONXML, BT_NONXML,

34  
	gBT_NONXML
, 
	gBT_S
, 
	gBT_LF
, BT_NONXML,

35  
	gBT_NONXML
, 
	gBT_S
, BT_NONXML, BT_NONXML,

36  
	gBT_NONXML
, BT_NONXML, BT_NONXML, BT_NONXML,

37  
	gBT_NONXML
, BT_NONXML, BT_NONXML, BT_NONXML,

38  
	gBT_NONXML
, BT_NONXML, BT_NONXML, BT_NONXML,

39  
	gBT_NONXML
, BT_NONXML, BT_NONXML, BT_NONXML,

40  
	gBT_S
, 
	gBT_EXCL
, 
	gBT_QUOT
, 
	gBT_NUM
,

41  
	gBT_OTHER
, 
	gBT_PERCNT
, 
	gBT_AMP
, 
	gBT_APOS
,

42  
	gBT_LPAR
, 
	gBT_RPAR
, 
	gBT_AST
, 
	gBT_PLUS
,

43  
	gBT_COMMA
, 
	gBT_MINUS
, 
	gBT_NAME
, 
	gBT_SOL
,

44  
	gBT_DIGIT
, BT_DIGIT, BT_DIGIT, BT_DIGIT,

45  
	gBT_DIGIT
, BT_DIGIT, BT_DIGIT, BT_DIGIT,

46  
	gBT_DIGIT
, BT_DIGIT, 
	gBT_COLON
, 
	gBT_SEMI
,

47  
	gBT_LT
, 
	gBT_EQUALS
, 
	gBT_GT
, 
	gBT_QUEST
,

48  
	gBT_OTHER
, 
	gBT_HEX
, BT_HEX, BT_HEX,

49  
	gBT_HEX
, BT_HEX, BT_HEX, 
	gBT_NMSTRT
,

50  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

51  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

52  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

53  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

54  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, 
	gBT_LSQB
,

55  
	gBT_OTHER
, 
	gBT_RSQB
, BT_OTHER, 
	gBT_NMSTRT
,

56  
	gBT_OTHER
, 
	gBT_HEX
, BT_HEX, BT_HEX,

57  
	gBT_HEX
, BT_HEX, BT_HEX, 
	gBT_NMSTRT
,

58  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

59  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

60  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

61  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

62  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, 
	gBT_OTHER
,

63  
	gBT_VERBAR
, 
	gBT_OTHER
, BT_OTHER, BT_OTHER,

	@modules/expat/xmltok/latin1tab.h

31  
	gBT_OTHER
, BT_OTHER, BT_OTHER, BT_OTHER,

32  
	gBT_OTHER
, BT_OTHER, BT_OTHER, BT_OTHER,

33  
	gBT_OTHER
, BT_OTHER, BT_OTHER, BT_OTHER,

34  
	gBT_OTHER
, BT_OTHER, BT_OTHER, BT_OTHER,

35  
	gBT_OTHER
, BT_OTHER, BT_OTHER, BT_OTHER,

36  
	gBT_OTHER
, BT_OTHER, BT_OTHER, BT_OTHER,

37  
	gBT_OTHER
, BT_OTHER, BT_OTHER, BT_OTHER,

38  
	gBT_OTHER
, BT_OTHER, BT_OTHER, BT_OTHER,

39  
	gBT_OTHER
, BT_OTHER, BT_OTHER, BT_OTHER,

40  
	gBT_OTHER
, BT_OTHER, BT_OTHER, BT_OTHER,

41  
	gBT_OTHER
, BT_OTHER, 
	gBT_NMSTRT
, BT_OTHER,

42  
	gBT_OTHER
, BT_OTHER, BT_OTHER, BT_OTHER,

43  
	gBT_OTHER
, BT_OTHER, BT_OTHER, BT_OTHER,

44  
	gBT_OTHER
, 
	gBT_NMSTRT
, BT_OTHER, 
	gBT_NAME
,

45  
	gBT_OTHER
, BT_OTHER, 
	gBT_NMSTRT
, BT_OTHER,

46  
	gBT_OTHER
, BT_OTHER, BT_OTHER, BT_OTHER,

47  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

48  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

49  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

50  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

51  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

52  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, 
	gBT_OTHER
,

53  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

54  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

55  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

56  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

57  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

58  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

59  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

60  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, 
	gBT_OTHER
,

61  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

62  
	gBT_NMSTRT
, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,

	@modules/expat/xmltok/nametab.h

1 c⁄° 
	g«mögBôm≠
[] = {

83 c⁄° 
	gnm°πPages
[] = {

117 c⁄° 
	g«mePages
[] = {

	@modules/expat/xmltok/utf8tab.h

32  
	gBT_TRAIL
, BT_TRAIL, BT_TRAIL, BT_TRAIL,

33  
	gBT_TRAIL
, BT_TRAIL, BT_TRAIL, BT_TRAIL,

34  
	gBT_TRAIL
, BT_TRAIL, BT_TRAIL, BT_TRAIL,

35  
	gBT_TRAIL
, BT_TRAIL, BT_TRAIL, BT_TRAIL,

36  
	gBT_TRAIL
, BT_TRAIL, BT_TRAIL, BT_TRAIL,

37  
	gBT_TRAIL
, BT_TRAIL, BT_TRAIL, BT_TRAIL,

38  
	gBT_TRAIL
, BT_TRAIL, BT_TRAIL, BT_TRAIL,

39  
	gBT_TRAIL
, BT_TRAIL, BT_TRAIL, BT_TRAIL,

40  
	gBT_TRAIL
, BT_TRAIL, BT_TRAIL, BT_TRAIL,

41  
	gBT_TRAIL
, BT_TRAIL, BT_TRAIL, BT_TRAIL,

42  
	gBT_TRAIL
, BT_TRAIL, BT_TRAIL, BT_TRAIL,

43  
	gBT_TRAIL
, BT_TRAIL, BT_TRAIL, BT_TRAIL,

44  
	gBT_TRAIL
, BT_TRAIL, BT_TRAIL, BT_TRAIL,

45  
	gBT_TRAIL
, BT_TRAIL, BT_TRAIL, BT_TRAIL,

46  
	gBT_TRAIL
, BT_TRAIL, BT_TRAIL, BT_TRAIL,

47  
	gBT_TRAIL
, BT_TRAIL, BT_TRAIL, BT_TRAIL,

48  
	gBT_LEAD2
, BT_LEAD2, BT_LEAD2, BT_LEAD2,

49  
	gBT_LEAD2
, BT_LEAD2, BT_LEAD2, BT_LEAD2,

50  
	gBT_LEAD2
, BT_LEAD2, BT_LEAD2, BT_LEAD2,

51  
	gBT_LEAD2
, BT_LEAD2, BT_LEAD2, BT_LEAD2,

52  
	gBT_LEAD2
, BT_LEAD2, BT_LEAD2, BT_LEAD2,

53  
	gBT_LEAD2
, BT_LEAD2, BT_LEAD2, BT_LEAD2,

54  
	gBT_LEAD2
, BT_LEAD2, BT_LEAD2, BT_LEAD2,

55  
	gBT_LEAD2
, BT_LEAD2, BT_LEAD2, BT_LEAD2,

56  
	gBT_LEAD3
, BT_LEAD3, BT_LEAD3, BT_LEAD3,

57  
	gBT_LEAD3
, BT_LEAD3, BT_LEAD3, BT_LEAD3,

58  
	gBT_LEAD3
, BT_LEAD3, BT_LEAD3, BT_LEAD3,

59  
	gBT_LEAD3
, BT_LEAD3, BT_LEAD3, BT_LEAD3,

60  
	gBT_LEAD4
, BT_LEAD4, BT_LEAD4, BT_LEAD4,

61  
	gBT_LEAD4
, 
	gBT_NONXML
, BT_NONXML, BT_NONXML,

62  
	gBT_NONXML
, BT_NONXML, BT_NONXML, BT_NONXML,

63  
	gBT_NONXML
, BT_NONXML, 
	gBT_MALFORM
, BT_MALFORM,

	@modules/expat/xmltok/xmldef.h

31 
	~<°rög.h
>

33 #ifde‡
XML_WINLIB


35 
	#WIN32_LEAN_AND_MEAN


	)

36 
	#STRICT


	)

37 
	~<wödows.h
>

39 
	#mÆloc
(
x
Ë
	`HópAŒoc
(
	`GëPro˚ssHóp
(), 0, (x))

	)

40 
	#ˇŒoc
(
x
, 
y
Ë
	`HópAŒoc
(
	`GëPro˚ssHóp
(), 
HEAP_ZERO_MEMORY
, (x)*(y))

	)

41 
	#‰ì
(
x
Ë
	`HópFªe
(
	`GëPro˚ssHóp
(), 0, (x))

	)

42 
	#ªÆloc
(
x
, 
y
Ë
	`HópReAŒoc
(
	`GëPro˚ssHóp
(), 0, x, y)

	)

43 
	#ab‹t
(Ë

	)

47 
	~<°dlib.h
>

54 #ifde‡
MOZILLA


56 
	~"n•r.h
"

57 
	#mÆloc
(
x
Ë
	`PR_MÆloc
(x)

	)

58 
	#ªÆloc
(
x
, 
y
Ë
	`PR_RóŒoc
((x), (y))

	)

59 
	#ˇŒoc
(
x
, 
y
Ë
	`PR_CÆloc
((x),(y))

	)

60 
	#‰ì
(
x
Ë
	`PR_Fªe
(x)

	)

61 
öt32


	)

	@modules/expat/xmltok/xmlrole.c

31 
	~"xmldef.h
"

32 
	~"xmÃﬁe.h
"

33 
	~"ascii.h
"

42 c⁄° 
	gKW_ANY
[] = { 
ASCII_A
, 
ASCII_N
, 
ASCII_Y
, '\0' };

43 c⁄° 
	gKW_ATTLIST
[] = { 
ASCII_A
, 
ASCII_T
, ASCII_T, 
ASCII_L
, 
ASCII_I
, 
ASCII_S
, ASCII_T, '\0' };

44 c⁄° 
	gKW_CDATA
[] = { 
ASCII_C
, 
ASCII_D
, 
ASCII_A
, 
ASCII_T
, ASCII_A, '\0' };

45 c⁄° 
	gKW_DOCTYPE
[] = { 
ASCII_D
, 
ASCII_O
, 
ASCII_C
, 
ASCII_T
, 
ASCII_Y
, 
ASCII_P
, 
ASCII_E
, '\0' };

46 c⁄° 
	gKW_ELEMENT
[] = { 
ASCII_E
, 
ASCII_L
, ASCII_E, 
ASCII_M
, ASCII_E, 
ASCII_N
, 
ASCII_T
, '\0' };

47 c⁄° 
	gKW_EMPTY
[] = { 
ASCII_E
, 
ASCII_M
, 
ASCII_P
, 
ASCII_T
, 
ASCII_Y
, '\0' };

48 c⁄° 
	gKW_ENTITIES
[] = { 
ASCII_E
, 
ASCII_N
, 
ASCII_T
, 
ASCII_I
, ASCII_T, ASCII_I, ASCII_E, 
ASCII_S
, '\0' };

49 c⁄° 
	gKW_ENTITY
[] = { 
ASCII_E
, 
ASCII_N
, 
ASCII_T
, 
ASCII_I
, ASCII_T, 
ASCII_Y
, '\0' };

50 c⁄° 
	gKW_FIXED
[] = { 
ASCII_F
, 
ASCII_I
, 
ASCII_X
, 
ASCII_E
, 
ASCII_D
, '\0' };

51 c⁄° 
	gKW_ID
[] = { 
ASCII_I
, 
ASCII_D
, '\0' };

52 c⁄° 
	gKW_IDREF
[] = { 
ASCII_I
, 
ASCII_D
, 
ASCII_R
, 
ASCII_E
, 
ASCII_F
, '\0' };

53 c⁄° 
	gKW_IDREFS
[] = { 
ASCII_I
, 
ASCII_D
, 
ASCII_R
, 
ASCII_E
, 
ASCII_F
, 
ASCII_S
, '\0' };

54 c⁄° 
	gKW_IGNORE
[] = { 
ASCII_I
, 
ASCII_G
, 
ASCII_N
, 
ASCII_O
, 
ASCII_R
, 
ASCII_E
, '\0' };

55 c⁄° 
	gKW_IMPLIED
[] = { 
ASCII_I
, 
ASCII_M
, 
ASCII_P
, 
ASCII_L
, ASCII_I, 
ASCII_E
, 
ASCII_D
, '\0' };

56 c⁄° 
	gKW_INCLUDE
[] = { 
ASCII_I
, 
ASCII_N
, 
ASCII_C
, 
ASCII_L
, 
ASCII_U
, 
ASCII_D
, 
ASCII_E
, '\0' };

57 c⁄° 
	gKW_NDATA
[] = { 
ASCII_N
, 
ASCII_D
, 
ASCII_A
, 
ASCII_T
, ASCII_A, '\0' };

58 c⁄° 
	gKW_NMTOKEN
[] = { 
ASCII_N
, 
ASCII_M
, 
ASCII_T
, 
ASCII_O
, 
ASCII_K
, 
ASCII_E
, ASCII_N, '\0' };

59 c⁄° 
	gKW_NMTOKENS
[] = { 
ASCII_N
, 
ASCII_M
, 
ASCII_T
, 
ASCII_O
, 
ASCII_K
, 
ASCII_E
, ASCII_N, 
ASCII_S
, '\0' };

60 c⁄° 
	gKW_NOTATION
[] = { 
ASCII_N
, 
ASCII_O
, 
ASCII_T
, 
ASCII_A
, ASCII_T, 
ASCII_I
, ASCII_O, ASCII_N, '\0' };

61 c⁄° 
	gKW_PCDATA
[] = { 
ASCII_P
, 
ASCII_C
, 
ASCII_D
, 
ASCII_A
, 
ASCII_T
, ASCII_A, '\0' };

62 c⁄° 
	gKW_PUBLIC
[] = { 
ASCII_P
, 
ASCII_U
, 
ASCII_B
, 
ASCII_L
, 
ASCII_I
, 
ASCII_C
, '\0' };

63 c⁄° 
	gKW_REQUIRED
[] = { 
ASCII_R
, 
ASCII_E
, 
ASCII_Q
, 
ASCII_U
, 
ASCII_I
, ASCII_R, ASCII_E, 
ASCII_D
, '\0' };

64 c⁄° 
	gKW_SYSTEM
[] = { 
ASCII_S
, 
ASCII_Y
, ASCII_S, 
ASCII_T
, 
ASCII_E
, 
ASCII_M
, '\0' };

66 #i‚de‡
MIN_BYTES_PER_CHAR


67 
	#MIN_BYTES_PER_CHAR
(
íc
Ë(”nc)->
möByãsPîCh¨
)

	)

70 #ifde‡
XML_DTD


71 
	#£tT›Levñ
(
°©e
) \

72 ((
°©e
)->
h™dÀr
 = ((°©e)->
documítE¡ôy
 \

73 ? 
öã∫ÆSub£t
 \

74 : 
exã∫ÆSub£t1
))

	)

76 
	#£tT›Levñ
(
°©e
Ë((°©e)->
h™dÀr
 = 
öã∫ÆSub£t
)

	)

79 
	tPROLOG_HANDLER
(
	tPROLOG_STATE
 *
	t°©e
,

80 
	ttok
,

81 c⁄° *
	t±r
,

82 c⁄° *
	tíd
,

83 c⁄° 
	tENCODING
 *
	tíc
);

85 
PROLOG_HANDLER


86 
	g¥ﬁog0
, 
	g¥ﬁog1
, 
	g¥ﬁog2
,

87 
	gdo˘y≥0
, 
	gdo˘y≥1
, 
	gdo˘y≥2
, 
	gdo˘y≥3
, 
	gdo˘y≥4
, 
	gdo˘y≥5
,

88 
	göã∫ÆSub£t
,

89 
	gítôy0
, 
	gítôy1
, 
	gítôy2
, 
	gítôy3
, 
	gítôy4
, 
	gítôy5
, 
	gítôy6
,

90 
	gítôy7
, 
	gítôy8
, 
	gítôy9
,

91 
	gnŸ©i⁄0
, 
	gnŸ©i⁄1
, 
	gnŸ©i⁄2
, 
	gnŸ©i⁄3
, 
	gnŸ©i⁄4
,

92 
	g©éi°0
, 
	g©éi°1
, 
	g©éi°2
, 
	g©éi°3
, 
	g©éi°4
, 
	g©éi°5
, 
	g©éi°6
,

93 
	g©éi°7
, 
	g©éi°8
, 
	g©éi°9
,

94 
	gñemít0
, 
	gñemít1
, 
	gñemít2
, 
	gñemít3
, 
	gñemít4
, 
	gñemít5
, 
	gñemít6
,

95 
	gñemít7
,

96 #ifde‡
XML_DTD


97 
	gexã∫ÆSub£t0
, 
	gexã∫ÆSub£t1
,

98 
	gc⁄dSe˘0
, 
	gc⁄dSe˘1
, 
	gc⁄dSe˘2
,

100 
	gde˛Clo£
,

101 
	gîr‹
;

104 
comm⁄
(
PROLOG_STATE
 *
°©e
, 
tok
);

107 
	$¥ﬁog0
(
PROLOG_STATE
 *
°©e
,

108 
tok
,

109 c⁄° *
±r
,

110 c⁄° *
íd
,

111 c⁄° 
ENCODING
 *
íc
)

113 
tok
) {

114 
XML_TOK_PROLOG_S
:

115 
°©e
->
h™dÀr
 = 
¥ﬁog1
;

116  
XML_ROLE_NONE
;

117 
XML_TOK_XML_DECL
:

118 
°©e
->
h™dÀr
 = 
¥ﬁog1
;

119  
XML_ROLE_XML_DECL
;

120 
XML_TOK_PI
:

121 
°©e
->
h™dÀr
 = 
¥ﬁog1
;

122  
XML_ROLE_NONE
;

123 
XML_TOK_COMMENT
:

124 
°©e
->
h™dÀr
 = 
¥ﬁog1
;

125 
XML_TOK_BOM
:

126  
XML_ROLE_NONE
;

127 
XML_TOK_DECL_OPEN
:

128 i‡(!
	`XmlNameM©chesAscii
(
íc
,

129 
±r
 + 2 * 
	`MIN_BYTES_PER_CHAR
(
íc
),

130 
íd
,

131 
KW_DOCTYPE
))

133 
°©e
->
h™dÀr
 = 
do˘y≥0
;

134  
XML_ROLE_NONE
;

135 
XML_TOK_INSTANCE_START
:

136 
°©e
->
h™dÀr
 = 
îr‹
;

137  
XML_ROLE_INSTANCE_START
;

139  
	`comm⁄
(
°©e
, 
tok
);

140 
	}
}

143 
	$¥ﬁog1
(
PROLOG_STATE
 *
°©e
,

144 
tok
,

145 c⁄° *
±r
,

146 c⁄° *
íd
,

147 c⁄° 
ENCODING
 *
íc
)

149 
tok
) {

150 
XML_TOK_PROLOG_S
:

151  
XML_ROLE_NONE
;

152 
XML_TOK_PI
:

153 
XML_TOK_COMMENT
:

154 
XML_TOK_BOM
:

155  
XML_ROLE_NONE
;

156 
XML_TOK_DECL_OPEN
:

157 i‡(!
	`XmlNameM©chesAscii
(
íc
,

158 
±r
 + 2 * 
	`MIN_BYTES_PER_CHAR
(
íc
),

159 
íd
,

160 
KW_DOCTYPE
))

162 
°©e
->
h™dÀr
 = 
do˘y≥0
;

163  
XML_ROLE_NONE
;

164 
XML_TOK_INSTANCE_START
:

165 
°©e
->
h™dÀr
 = 
îr‹
;

166  
XML_ROLE_INSTANCE_START
;

168  
	`comm⁄
(
°©e
, 
tok
);

169 
	}
}

172 
	$¥ﬁog2
(
PROLOG_STATE
 *
°©e
,

173 
tok
,

174 c⁄° *
±r
,

175 c⁄° *
íd
,

176 c⁄° 
ENCODING
 *
íc
)

178 
tok
) {

179 
XML_TOK_PROLOG_S
:

180  
XML_ROLE_NONE
;

181 
XML_TOK_PI
:

182 
XML_TOK_COMMENT
:

183  
XML_ROLE_NONE
;

184 
XML_TOK_INSTANCE_START
:

185 
°©e
->
h™dÀr
 = 
îr‹
;

186  
XML_ROLE_INSTANCE_START
;

188  
	`comm⁄
(
°©e
, 
tok
);

189 
	}
}

192 
	$do˘y≥0
(
PROLOG_STATE
 *
°©e
,

193 
tok
,

194 c⁄° *
±r
,

195 c⁄° *
íd
,

196 c⁄° 
ENCODING
 *
íc
)

198 
tok
) {

199 
XML_TOK_PROLOG_S
:

200  
XML_ROLE_NONE
;

201 
XML_TOK_NAME
:

202 
XML_TOK_PREFIXED_NAME
:

203 
°©e
->
h™dÀr
 = 
do˘y≥1
;

204  
XML_ROLE_DOCTYPE_NAME
;

206  
	`comm⁄
(
°©e
, 
tok
);

207 
	}
}

210 
	$do˘y≥1
(
PROLOG_STATE
 *
°©e
,

211 
tok
,

212 c⁄° *
±r
,

213 c⁄° *
íd
,

214 c⁄° 
ENCODING
 *
íc
)

216 
tok
) {

217 
XML_TOK_PROLOG_S
:

218  
XML_ROLE_NONE
;

219 
XML_TOK_OPEN_BRACKET
:

220 
°©e
->
h™dÀr
 = 
öã∫ÆSub£t
;

221  
XML_ROLE_NONE
;

222 
XML_TOK_DECL_CLOSE
:

223 
°©e
->
h™dÀr
 = 
¥ﬁog2
;

224  
XML_ROLE_DOCTYPE_CLOSE
;

225 
XML_TOK_NAME
:

226 i‡(
	`XmlNameM©chesAscii
(
íc
, 
±r
, 
íd
, 
KW_SYSTEM
)) {

227 
°©e
->
h™dÀr
 = 
do˘y≥3
;

228  
XML_ROLE_NONE
;

230 i‡(
	`XmlNameM©chesAscii
(
íc
, 
±r
, 
íd
, 
KW_PUBLIC
)) {

231 
°©e
->
h™dÀr
 = 
do˘y≥2
;

232  
XML_ROLE_NONE
;

236  
	`comm⁄
(
°©e
, 
tok
);

237 
	}
}

240 
	$do˘y≥2
(
PROLOG_STATE
 *
°©e
,

241 
tok
,

242 c⁄° *
±r
,

243 c⁄° *
íd
,

244 c⁄° 
ENCODING
 *
íc
)

246 
tok
) {

247 
XML_TOK_PROLOG_S
:

248  
XML_ROLE_NONE
;

249 
XML_TOK_LITERAL
:

250 
°©e
->
h™dÀr
 = 
do˘y≥3
;

251  
XML_ROLE_DOCTYPE_PUBLIC_ID
;

253  
	`comm⁄
(
°©e
, 
tok
);

254 
	}
}

257 
	$do˘y≥3
(
PROLOG_STATE
 *
°©e
,

258 
tok
,

259 c⁄° *
±r
,

260 c⁄° *
íd
,

261 c⁄° 
ENCODING
 *
íc
)

263 
tok
) {

264 
XML_TOK_PROLOG_S
:

265  
XML_ROLE_NONE
;

266 
XML_TOK_LITERAL
:

267 
°©e
->
h™dÀr
 = 
do˘y≥4
;

268  
XML_ROLE_DOCTYPE_SYSTEM_ID
;

270  
	`comm⁄
(
°©e
, 
tok
);

271 
	}
}

274 
	$do˘y≥4
(
PROLOG_STATE
 *
°©e
,

275 
tok
,

276 c⁄° *
±r
,

277 c⁄° *
íd
,

278 c⁄° 
ENCODING
 *
íc
)

280 
tok
) {

281 
XML_TOK_PROLOG_S
:

282  
XML_ROLE_NONE
;

283 
XML_TOK_OPEN_BRACKET
:

284 
°©e
->
h™dÀr
 = 
öã∫ÆSub£t
;

285  
XML_ROLE_NONE
;

286 
XML_TOK_DECL_CLOSE
:

287 
°©e
->
h™dÀr
 = 
¥ﬁog2
;

288  
XML_ROLE_DOCTYPE_CLOSE
;

290  
	`comm⁄
(
°©e
, 
tok
);

291 
	}
}

294 
	$do˘y≥5
(
PROLOG_STATE
 *
°©e
,

295 
tok
,

296 c⁄° *
±r
,

297 c⁄° *
íd
,

298 c⁄° 
ENCODING
 *
íc
)

300 
tok
) {

301 
XML_TOK_PROLOG_S
:

302  
XML_ROLE_NONE
;

303 
XML_TOK_DECL_CLOSE
:

304 
°©e
->
h™dÀr
 = 
¥ﬁog2
;

305  
XML_ROLE_DOCTYPE_CLOSE
;

307  
	`comm⁄
(
°©e
, 
tok
);

308 
	}
}

311 
	$öã∫ÆSub£t
(
PROLOG_STATE
 *
°©e
,

312 
tok
,

313 c⁄° *
±r
,

314 c⁄° *
íd
,

315 c⁄° 
ENCODING
 *
íc
)

317 
tok
) {

318 
XML_TOK_PROLOG_S
:

319  
XML_ROLE_NONE
;

320 
XML_TOK_DECL_OPEN
:

321 i‡(
	`XmlNameM©chesAscii
(
íc
,

322 
±r
 + 2 * 
	`MIN_BYTES_PER_CHAR
(
íc
),

323 
íd
,

324 
KW_ENTITY
)) {

325 
°©e
->
h™dÀr
 = 
ítôy0
;

326  
XML_ROLE_NONE
;

328 i‡(
	`XmlNameM©chesAscii
(
íc
,

329 
±r
 + 2 * 
	`MIN_BYTES_PER_CHAR
(
íc
),

330 
íd
,

331 
KW_ATTLIST
)) {

332 
°©e
->
h™dÀr
 = 
©éi°0
;

333  
XML_ROLE_NONE
;

335 i‡(
	`XmlNameM©chesAscii
(
íc
,

336 
±r
 + 2 * 
	`MIN_BYTES_PER_CHAR
(
íc
),

337 
íd
,

338 
KW_ELEMENT
)) {

339 
°©e
->
h™dÀr
 = 
ñemít0
;

340  
XML_ROLE_NONE
;

342 i‡(
	`XmlNameM©chesAscii
(
íc
,

343 
±r
 + 2 * 
	`MIN_BYTES_PER_CHAR
(
íc
),

344 
íd
,

345 
KW_NOTATION
)) {

346 
°©e
->
h™dÀr
 = 
nŸ©i⁄0
;

347  
XML_ROLE_NONE
;

350 
XML_TOK_PI
:

351 
XML_TOK_COMMENT
:

352  
XML_ROLE_NONE
;

353 
XML_TOK_PARAM_ENTITY_REF
:

354  
XML_ROLE_PARAM_ENTITY_REF
;

355 
XML_TOK_CLOSE_BRACKET
:

356 
°©e
->
h™dÀr
 = 
do˘y≥5
;

357  
XML_ROLE_NONE
;

359  
	`comm⁄
(
°©e
, 
tok
);

360 
	}
}

362 #ifde‡
XML_DTD


365 
	$exã∫ÆSub£t0
(
PROLOG_STATE
 *
°©e
,

366 
tok
,

367 c⁄° *
±r
,

368 c⁄° *
íd
,

369 c⁄° 
ENCODING
 *
íc
)

371 
°©e
->
h™dÀr
 = 
exã∫ÆSub£t1
;

372 i‡(
tok
 =
XML_TOK_XML_DECL
)

373  
XML_ROLE_TEXT_DECL
;

374  
	`exã∫ÆSub£t1
(
°©e
, 
tok
, 
±r
, 
íd
, 
íc
);

375 
	}
}

378 
	$exã∫ÆSub£t1
(
PROLOG_STATE
 *
°©e
,

379 
tok
,

380 c⁄° *
±r
,

381 c⁄° *
íd
,

382 c⁄° 
ENCODING
 *
íc
)

384 
tok
) {

385 
XML_TOK_COND_SECT_OPEN
:

386 
°©e
->
h™dÀr
 = 
c⁄dSe˘0
;

387  
XML_ROLE_NONE
;

388 
XML_TOK_COND_SECT_CLOSE
:

389 i‡(
°©e
->
ö˛udeLevñ
 == 0)

391 
°©e
->
ö˛udeLevñ
 -= 1;

392  
XML_ROLE_NONE
;

393 
XML_TOK_PROLOG_S
:

394  
XML_ROLE_NONE
;

395 
XML_TOK_CLOSE_BRACKET
:

397 
XML_TOK_NONE
:

398 i‡(
°©e
->
ö˛udeLevñ
)

400  
XML_ROLE_NONE
;

402  
	`öã∫ÆSub£t
(
°©e
, 
tok
, 
±r
, 
íd
, 
íc
);

404  
	`comm⁄
(
°©e
, 
tok
);

405 
	}
}

410 
	$ítôy0
(
PROLOG_STATE
 *
°©e
,

411 
tok
,

412 c⁄° *
±r
,

413 c⁄° *
íd
,

414 c⁄° 
ENCODING
 *
íc
)

416 
tok
) {

417 
XML_TOK_PROLOG_S
:

418  
XML_ROLE_NONE
;

419 
XML_TOK_PERCENT
:

420 
°©e
->
h™dÀr
 = 
ítôy1
;

421  
XML_ROLE_NONE
;

422 
XML_TOK_NAME
:

423 
°©e
->
h™dÀr
 = 
ítôy2
;

424  
XML_ROLE_GENERAL_ENTITY_NAME
;

426  
	`comm⁄
(
°©e
, 
tok
);

427 
	}
}

430 
	$ítôy1
(
PROLOG_STATE
 *
°©e
,

431 
tok
,

432 c⁄° *
±r
,

433 c⁄° *
íd
,

434 c⁄° 
ENCODING
 *
íc
)

436 
tok
) {

437 
XML_TOK_PROLOG_S
:

438  
XML_ROLE_NONE
;

439 
XML_TOK_NAME
:

440 
°©e
->
h™dÀr
 = 
ítôy7
;

441  
XML_ROLE_PARAM_ENTITY_NAME
;

443  
	`comm⁄
(
°©e
, 
tok
);

444 
	}
}

447 
	$ítôy2
(
PROLOG_STATE
 *
°©e
,

448 
tok
,

449 c⁄° *
±r
,

450 c⁄° *
íd
,

451 c⁄° 
ENCODING
 *
íc
)

453 
tok
) {

454 
XML_TOK_PROLOG_S
:

455  
XML_ROLE_NONE
;

456 
XML_TOK_NAME
:

457 i‡(
	`XmlNameM©chesAscii
(
íc
, 
±r
, 
íd
, 
KW_SYSTEM
)) {

458 
°©e
->
h™dÀr
 = 
ítôy4
;

459  
XML_ROLE_NONE
;

461 i‡(
	`XmlNameM©chesAscii
(
íc
, 
±r
, 
íd
, 
KW_PUBLIC
)) {

462 
°©e
->
h™dÀr
 = 
ítôy3
;

463  
XML_ROLE_NONE
;

466 
XML_TOK_LITERAL
:

467 
°©e
->
h™dÀr
 = 
de˛Clo£
;

468  
XML_ROLE_ENTITY_VALUE
;

470  
	`comm⁄
(
°©e
, 
tok
);

471 
	}
}

474 
	$ítôy3
(
PROLOG_STATE
 *
°©e
,

475 
tok
,

476 c⁄° *
±r
,

477 c⁄° *
íd
,

478 c⁄° 
ENCODING
 *
íc
)

480 
tok
) {

481 
XML_TOK_PROLOG_S
:

482  
XML_ROLE_NONE
;

483 
XML_TOK_LITERAL
:

484 
°©e
->
h™dÀr
 = 
ítôy4
;

485  
XML_ROLE_ENTITY_PUBLIC_ID
;

487  
	`comm⁄
(
°©e
, 
tok
);

488 
	}
}

492 
	$ítôy4
(
PROLOG_STATE
 *
°©e
,

493 
tok
,

494 c⁄° *
±r
,

495 c⁄° *
íd
,

496 c⁄° 
ENCODING
 *
íc
)

498 
tok
) {

499 
XML_TOK_PROLOG_S
:

500  
XML_ROLE_NONE
;

501 
XML_TOK_LITERAL
:

502 
°©e
->
h™dÀr
 = 
ítôy5
;

503  
XML_ROLE_ENTITY_SYSTEM_ID
;

505  
	`comm⁄
(
°©e
, 
tok
);

506 
	}
}

509 
	$ítôy5
(
PROLOG_STATE
 *
°©e
,

510 
tok
,

511 c⁄° *
±r
,

512 c⁄° *
íd
,

513 c⁄° 
ENCODING
 *
íc
)

515 
tok
) {

516 
XML_TOK_PROLOG_S
:

517  
XML_ROLE_NONE
;

518 
XML_TOK_DECL_CLOSE
:

519 
	`£tT›Levñ
(
°©e
);

520  
XML_ROLE_NONE
;

521 
XML_TOK_NAME
:

522 i‡(
	`XmlNameM©chesAscii
(
íc
, 
±r
, 
íd
, 
KW_NDATA
)) {

523 
°©e
->
h™dÀr
 = 
ítôy6
;

524  
XML_ROLE_NONE
;

528  
	`comm⁄
(
°©e
, 
tok
);

529 
	}
}

532 
	$ítôy6
(
PROLOG_STATE
 *
°©e
,

533 
tok
,

534 c⁄° *
±r
,

535 c⁄° *
íd
,

536 c⁄° 
ENCODING
 *
íc
)

538 
tok
) {

539 
XML_TOK_PROLOG_S
:

540  
XML_ROLE_NONE
;

541 
XML_TOK_NAME
:

542 
°©e
->
h™dÀr
 = 
de˛Clo£
;

543  
XML_ROLE_ENTITY_NOTATION_NAME
;

545  
	`comm⁄
(
°©e
, 
tok
);

546 
	}
}

549 
	$ítôy7
(
PROLOG_STATE
 *
°©e
,

550 
tok
,

551 c⁄° *
±r
,

552 c⁄° *
íd
,

553 c⁄° 
ENCODING
 *
íc
)

555 
tok
) {

556 
XML_TOK_PROLOG_S
:

557  
XML_ROLE_NONE
;

558 
XML_TOK_NAME
:

559 i‡(
	`XmlNameM©chesAscii
(
íc
, 
±r
, 
íd
, 
KW_SYSTEM
)) {

560 
°©e
->
h™dÀr
 = 
ítôy9
;

561  
XML_ROLE_NONE
;

563 i‡(
	`XmlNameM©chesAscii
(
íc
, 
±r
, 
íd
, 
KW_PUBLIC
)) {

564 
°©e
->
h™dÀr
 = 
ítôy8
;

565  
XML_ROLE_NONE
;

568 
XML_TOK_LITERAL
:

569 
°©e
->
h™dÀr
 = 
de˛Clo£
;

570  
XML_ROLE_ENTITY_VALUE
;

572  
	`comm⁄
(
°©e
, 
tok
);

573 
	}
}

576 
	$ítôy8
(
PROLOG_STATE
 *
°©e
,

577 
tok
,

578 c⁄° *
±r
,

579 c⁄° *
íd
,

580 c⁄° 
ENCODING
 *
íc
)

582 
tok
) {

583 
XML_TOK_PROLOG_S
:

584  
XML_ROLE_NONE
;

585 
XML_TOK_LITERAL
:

586 
°©e
->
h™dÀr
 = 
ítôy9
;

587  
XML_ROLE_ENTITY_PUBLIC_ID
;

589  
	`comm⁄
(
°©e
, 
tok
);

590 
	}
}

593 
	$ítôy9
(
PROLOG_STATE
 *
°©e
,

594 
tok
,

595 c⁄° *
±r
,

596 c⁄° *
íd
,

597 c⁄° 
ENCODING
 *
íc
)

599 
tok
) {

600 
XML_TOK_PROLOG_S
:

601  
XML_ROLE_NONE
;

602 
XML_TOK_LITERAL
:

603 
°©e
->
h™dÀr
 = 
de˛Clo£
;

604  
XML_ROLE_ENTITY_SYSTEM_ID
;

606  
	`comm⁄
(
°©e
, 
tok
);

607 
	}
}

610 
	$nŸ©i⁄0
(
PROLOG_STATE
 *
°©e
,

611 
tok
,

612 c⁄° *
±r
,

613 c⁄° *
íd
,

614 c⁄° 
ENCODING
 *
íc
)

616 
tok
) {

617 
XML_TOK_PROLOG_S
:

618  
XML_ROLE_NONE
;

619 
XML_TOK_NAME
:

620 
°©e
->
h™dÀr
 = 
nŸ©i⁄1
;

621  
XML_ROLE_NOTATION_NAME
;

623  
	`comm⁄
(
°©e
, 
tok
);

624 
	}
}

627 
	$nŸ©i⁄1
(
PROLOG_STATE
 *
°©e
,

628 
tok
,

629 c⁄° *
±r
,

630 c⁄° *
íd
,

631 c⁄° 
ENCODING
 *
íc
)

633 
tok
) {

634 
XML_TOK_PROLOG_S
:

635  
XML_ROLE_NONE
;

636 
XML_TOK_NAME
:

637 i‡(
	`XmlNameM©chesAscii
(
íc
, 
±r
, 
íd
, 
KW_SYSTEM
)) {

638 
°©e
->
h™dÀr
 = 
nŸ©i⁄3
;

639  
XML_ROLE_NONE
;

641 i‡(
	`XmlNameM©chesAscii
(
íc
, 
±r
, 
íd
, 
KW_PUBLIC
)) {

642 
°©e
->
h™dÀr
 = 
nŸ©i⁄2
;

643  
XML_ROLE_NONE
;

647  
	`comm⁄
(
°©e
, 
tok
);

648 
	}
}

651 
	$nŸ©i⁄2
(
PROLOG_STATE
 *
°©e
,

652 
tok
,

653 c⁄° *
±r
,

654 c⁄° *
íd
,

655 c⁄° 
ENCODING
 *
íc
)

657 
tok
) {

658 
XML_TOK_PROLOG_S
:

659  
XML_ROLE_NONE
;

660 
XML_TOK_LITERAL
:

661 
°©e
->
h™dÀr
 = 
nŸ©i⁄4
;

662  
XML_ROLE_NOTATION_PUBLIC_ID
;

664  
	`comm⁄
(
°©e
, 
tok
);

665 
	}
}

668 
	$nŸ©i⁄3
(
PROLOG_STATE
 *
°©e
,

669 
tok
,

670 c⁄° *
±r
,

671 c⁄° *
íd
,

672 c⁄° 
ENCODING
 *
íc
)

674 
tok
) {

675 
XML_TOK_PROLOG_S
:

676  
XML_ROLE_NONE
;

677 
XML_TOK_LITERAL
:

678 
°©e
->
h™dÀr
 = 
de˛Clo£
;

679  
XML_ROLE_NOTATION_SYSTEM_ID
;

681  
	`comm⁄
(
°©e
, 
tok
);

682 
	}
}

685 
	$nŸ©i⁄4
(
PROLOG_STATE
 *
°©e
,

686 
tok
,

687 c⁄° *
±r
,

688 c⁄° *
íd
,

689 c⁄° 
ENCODING
 *
íc
)

691 
tok
) {

692 
XML_TOK_PROLOG_S
:

693  
XML_ROLE_NONE
;

694 
XML_TOK_LITERAL
:

695 
°©e
->
h™dÀr
 = 
de˛Clo£
;

696  
XML_ROLE_NOTATION_SYSTEM_ID
;

697 
XML_TOK_DECL_CLOSE
:

698 
	`£tT›Levñ
(
°©e
);

699  
XML_ROLE_NOTATION_NO_SYSTEM_ID
;

701  
	`comm⁄
(
°©e
, 
tok
);

702 
	}
}

705 
	$©éi°0
(
PROLOG_STATE
 *
°©e
,

706 
tok
,

707 c⁄° *
±r
,

708 c⁄° *
íd
,

709 c⁄° 
ENCODING
 *
íc
)

711 
tok
) {

712 
XML_TOK_PROLOG_S
:

713  
XML_ROLE_NONE
;

714 
XML_TOK_NAME
:

715 
XML_TOK_PREFIXED_NAME
:

716 
°©e
->
h™dÀr
 = 
©éi°1
;

717  
XML_ROLE_ATTLIST_ELEMENT_NAME
;

719  
	`comm⁄
(
°©e
, 
tok
);

720 
	}
}

723 
	$©éi°1
(
PROLOG_STATE
 *
°©e
,

724 
tok
,

725 c⁄° *
±r
,

726 c⁄° *
íd
,

727 c⁄° 
ENCODING
 *
íc
)

729 
tok
) {

730 
XML_TOK_PROLOG_S
:

731  
XML_ROLE_NONE
;

732 
XML_TOK_DECL_CLOSE
:

733 
	`£tT›Levñ
(
°©e
);

734  
XML_ROLE_NONE
;

735 
XML_TOK_NAME
:

736 
XML_TOK_PREFIXED_NAME
:

737 
°©e
->
h™dÀr
 = 
©éi°2
;

738  
XML_ROLE_ATTRIBUTE_NAME
;

740  
	`comm⁄
(
°©e
, 
tok
);

741 
	}
}

744 
	$©éi°2
(
PROLOG_STATE
 *
°©e
,

745 
tok
,

746 c⁄° *
±r
,

747 c⁄° *
íd
,

748 c⁄° 
ENCODING
 *
íc
)

750 
tok
) {

751 
XML_TOK_PROLOG_S
:

752  
XML_ROLE_NONE
;

753 
XML_TOK_NAME
:

755 c⁄° *
ty≥s
[] = {

756 
KW_CDATA
,

757 
KW_ID
,

758 
KW_IDREF
,

759 
KW_IDREFS
,

760 
KW_ENTITY
,

761 
KW_ENTITIES
,

762 
KW_NMTOKEN
,

763 
KW_NMTOKENS
,

765 
i
;

766 
i
 = 0; i < ()((
ty≥s
)/(types[0])); i++)

767 i‡(
	`XmlNameM©chesAscii
(
íc
, 
±r
, 
íd
, 
ty≥s
[
i
])) {

768 
°©e
->
h™dÀr
 = 
©éi°8
;

769  
XML_ROLE_ATTRIBUTE_TYPE_CDATA
 + 
i
;

772 i‡(
	`XmlNameM©chesAscii
(
íc
, 
±r
, 
íd
, 
KW_NOTATION
)) {

773 
°©e
->
h™dÀr
 = 
©éi°5
;

774  
XML_ROLE_NONE
;

777 
XML_TOK_OPEN_PAREN
:

778 
°©e
->
h™dÀr
 = 
©éi°3
;

779  
XML_ROLE_NONE
;

781  
	`comm⁄
(
°©e
, 
tok
);

782 
	}
}

785 
	$©éi°3
(
PROLOG_STATE
 *
°©e
,

786 
tok
,

787 c⁄° *
±r
,

788 c⁄° *
íd
,

789 c⁄° 
ENCODING
 *
íc
)

791 
tok
) {

792 
XML_TOK_PROLOG_S
:

793  
XML_ROLE_NONE
;

794 
XML_TOK_NMTOKEN
:

795 
XML_TOK_NAME
:

796 
XML_TOK_PREFIXED_NAME
:

797 
°©e
->
h™dÀr
 = 
©éi°4
;

798  
XML_ROLE_ATTRIBUTE_ENUM_VALUE
;

800  
	`comm⁄
(
°©e
, 
tok
);

801 
	}
}

804 
	$©éi°4
(
PROLOG_STATE
 *
°©e
,

805 
tok
,

806 c⁄° *
±r
,

807 c⁄° *
íd
,

808 c⁄° 
ENCODING
 *
íc
)

810 
tok
) {

811 
XML_TOK_PROLOG_S
:

812  
XML_ROLE_NONE
;

813 
XML_TOK_CLOSE_PAREN
:

814 
°©e
->
h™dÀr
 = 
©éi°8
;

815  
XML_ROLE_NONE
;

816 
XML_TOK_OR
:

817 
°©e
->
h™dÀr
 = 
©éi°3
;

818  
XML_ROLE_NONE
;

820  
	`comm⁄
(
°©e
, 
tok
);

821 
	}
}

824 
	$©éi°5
(
PROLOG_STATE
 *
°©e
,

825 
tok
,

826 c⁄° *
±r
,

827 c⁄° *
íd
,

828 c⁄° 
ENCODING
 *
íc
)

830 
tok
) {

831 
XML_TOK_PROLOG_S
:

832  
XML_ROLE_NONE
;

833 
XML_TOK_OPEN_PAREN
:

834 
°©e
->
h™dÀr
 = 
©éi°6
;

835  
XML_ROLE_NONE
;

837  
	`comm⁄
(
°©e
, 
tok
);

838 
	}
}

842 
	$©éi°6
(
PROLOG_STATE
 *
°©e
,

843 
tok
,

844 c⁄° *
±r
,

845 c⁄° *
íd
,

846 c⁄° 
ENCODING
 *
íc
)

848 
tok
) {

849 
XML_TOK_PROLOG_S
:

850  
XML_ROLE_NONE
;

851 
XML_TOK_NAME
:

852 
°©e
->
h™dÀr
 = 
©éi°7
;

853  
XML_ROLE_ATTRIBUTE_NOTATION_VALUE
;

855  
	`comm⁄
(
°©e
, 
tok
);

856 
	}
}

859 
	$©éi°7
(
PROLOG_STATE
 *
°©e
,

860 
tok
,

861 c⁄° *
±r
,

862 c⁄° *
íd
,

863 c⁄° 
ENCODING
 *
íc
)

865 
tok
) {

866 
XML_TOK_PROLOG_S
:

867  
XML_ROLE_NONE
;

868 
XML_TOK_CLOSE_PAREN
:

869 
°©e
->
h™dÀr
 = 
©éi°8
;

870  
XML_ROLE_NONE
;

871 
XML_TOK_OR
:

872 
°©e
->
h™dÀr
 = 
©éi°6
;

873  
XML_ROLE_NONE
;

875  
	`comm⁄
(
°©e
, 
tok
);

876 
	}
}

880 
	$©éi°8
(
PROLOG_STATE
 *
°©e
,

881 
tok
,

882 c⁄° *
±r
,

883 c⁄° *
íd
,

884 c⁄° 
ENCODING
 *
íc
)

886 
tok
) {

887 
XML_TOK_PROLOG_S
:

888  
XML_ROLE_NONE
;

889 
XML_TOK_POUND_NAME
:

890 i‡(
	`XmlNameM©chesAscii
(
íc
,

891 
±r
 + 
	`MIN_BYTES_PER_CHAR
(
íc
),

892 
íd
,

893 
KW_IMPLIED
)) {

894 
°©e
->
h™dÀr
 = 
©éi°1
;

895  
XML_ROLE_IMPLIED_ATTRIBUTE_VALUE
;

897 i‡(
	`XmlNameM©chesAscii
(
íc
,

898 
±r
 + 
	`MIN_BYTES_PER_CHAR
(
íc
),

899 
íd
,

900 
KW_REQUIRED
)) {

901 
°©e
->
h™dÀr
 = 
©éi°1
;

902  
XML_ROLE_REQUIRED_ATTRIBUTE_VALUE
;

904 i‡(
	`XmlNameM©chesAscii
(
íc
,

905 
±r
 + 
	`MIN_BYTES_PER_CHAR
(
íc
),

906 
íd
,

907 
KW_FIXED
)) {

908 
°©e
->
h™dÀr
 = 
©éi°9
;

909  
XML_ROLE_NONE
;

912 
XML_TOK_LITERAL
:

913 
°©e
->
h™dÀr
 = 
©éi°1
;

914  
XML_ROLE_DEFAULT_ATTRIBUTE_VALUE
;

916  
	`comm⁄
(
°©e
, 
tok
);

917 
	}
}

920 
	$©éi°9
(
PROLOG_STATE
 *
°©e
,

921 
tok
,

922 c⁄° *
±r
,

923 c⁄° *
íd
,

924 c⁄° 
ENCODING
 *
íc
)

926 
tok
) {

927 
XML_TOK_PROLOG_S
:

928  
XML_ROLE_NONE
;

929 
XML_TOK_LITERAL
:

930 
°©e
->
h™dÀr
 = 
©éi°1
;

931  
XML_ROLE_FIXED_ATTRIBUTE_VALUE
;

933  
	`comm⁄
(
°©e
, 
tok
);

934 
	}
}

937 
	$ñemít0
(
PROLOG_STATE
 *
°©e
,

938 
tok
,

939 c⁄° *
±r
,

940 c⁄° *
íd
,

941 c⁄° 
ENCODING
 *
íc
)

943 
tok
) {

944 
XML_TOK_PROLOG_S
:

945  
XML_ROLE_NONE
;

946 
XML_TOK_NAME
:

947 
XML_TOK_PREFIXED_NAME
:

948 
°©e
->
h™dÀr
 = 
ñemít1
;

949  
XML_ROLE_ELEMENT_NAME
;

951  
	`comm⁄
(
°©e
, 
tok
);

952 
	}
}

955 
	$ñemít1
(
PROLOG_STATE
 *
°©e
,

956 
tok
,

957 c⁄° *
±r
,

958 c⁄° *
íd
,

959 c⁄° 
ENCODING
 *
íc
)

961 
tok
) {

962 
XML_TOK_PROLOG_S
:

963  
XML_ROLE_NONE
;

964 
XML_TOK_NAME
:

965 i‡(
	`XmlNameM©chesAscii
(
íc
, 
±r
, 
íd
, 
KW_EMPTY
)) {

966 
°©e
->
h™dÀr
 = 
de˛Clo£
;

967  
XML_ROLE_CONTENT_EMPTY
;

969 i‡(
	`XmlNameM©chesAscii
(
íc
, 
±r
, 
íd
, 
KW_ANY
)) {

970 
°©e
->
h™dÀr
 = 
de˛Clo£
;

971  
XML_ROLE_CONTENT_ANY
;

974 
XML_TOK_OPEN_PAREN
:

975 
°©e
->
h™dÀr
 = 
ñemít2
;

976 
°©e
->
Àvñ
 = 1;

977  
XML_ROLE_GROUP_OPEN
;

979  
	`comm⁄
(
°©e
, 
tok
);

980 
	}
}

983 
	$ñemít2
(
PROLOG_STATE
 *
°©e
,

984 
tok
,

985 c⁄° *
±r
,

986 c⁄° *
íd
,

987 c⁄° 
ENCODING
 *
íc
)

989 
tok
) {

990 
XML_TOK_PROLOG_S
:

991  
XML_ROLE_NONE
;

992 
XML_TOK_POUND_NAME
:

993 i‡(
	`XmlNameM©chesAscii
(
íc
,

994 
±r
 + 
	`MIN_BYTES_PER_CHAR
(
íc
),

995 
íd
,

996 
KW_PCDATA
)) {

997 
°©e
->
h™dÀr
 = 
ñemít3
;

998  
XML_ROLE_CONTENT_PCDATA
;

1001 
XML_TOK_OPEN_PAREN
:

1002 
°©e
->
Àvñ
 = 2;

1003 
°©e
->
h™dÀr
 = 
ñemít6
;

1004  
XML_ROLE_GROUP_OPEN
;

1005 
XML_TOK_NAME
:

1006 
XML_TOK_PREFIXED_NAME
:

1007 
°©e
->
h™dÀr
 = 
ñemít7
;

1008  
XML_ROLE_CONTENT_ELEMENT
;

1009 
XML_TOK_NAME_QUESTION
:

1010 
°©e
->
h™dÀr
 = 
ñemít7
;

1011  
XML_ROLE_CONTENT_ELEMENT_OPT
;

1012 
XML_TOK_NAME_ASTERISK
:

1013 
°©e
->
h™dÀr
 = 
ñemít7
;

1014  
XML_ROLE_CONTENT_ELEMENT_REP
;

1015 
XML_TOK_NAME_PLUS
:

1016 
°©e
->
h™dÀr
 = 
ñemít7
;

1017  
XML_ROLE_CONTENT_ELEMENT_PLUS
;

1019  
	`comm⁄
(
°©e
, 
tok
);

1020 
	}
}

1023 
	$ñemít3
(
PROLOG_STATE
 *
°©e
,

1024 
tok
,

1025 c⁄° *
±r
,

1026 c⁄° *
íd
,

1027 c⁄° 
ENCODING
 *
íc
)

1029 
tok
) {

1030 
XML_TOK_PROLOG_S
:

1031  
XML_ROLE_NONE
;

1032 
XML_TOK_CLOSE_PAREN
:

1033 
XML_TOK_CLOSE_PAREN_ASTERISK
:

1034 
°©e
->
h™dÀr
 = 
de˛Clo£
;

1035  
XML_ROLE_GROUP_CLOSE_REP
;

1036 
XML_TOK_OR
:

1037 
°©e
->
h™dÀr
 = 
ñemít4
;

1038  
XML_ROLE_NONE
;

1040  
	`comm⁄
(
°©e
, 
tok
);

1041 
	}
}

1044 
	$ñemít4
(
PROLOG_STATE
 *
°©e
,

1045 
tok
,

1046 c⁄° *
±r
,

1047 c⁄° *
íd
,

1048 c⁄° 
ENCODING
 *
íc
)

1050 
tok
) {

1051 
XML_TOK_PROLOG_S
:

1052  
XML_ROLE_NONE
;

1053 
XML_TOK_NAME
:

1054 
XML_TOK_PREFIXED_NAME
:

1055 
°©e
->
h™dÀr
 = 
ñemít5
;

1056  
XML_ROLE_CONTENT_ELEMENT
;

1058  
	`comm⁄
(
°©e
, 
tok
);

1059 
	}
}

1062 
	$ñemít5
(
PROLOG_STATE
 *
°©e
,

1063 
tok
,

1064 c⁄° *
±r
,

1065 c⁄° *
íd
,

1066 c⁄° 
ENCODING
 *
íc
)

1068 
tok
) {

1069 
XML_TOK_PROLOG_S
:

1070  
XML_ROLE_NONE
;

1071 
XML_TOK_CLOSE_PAREN_ASTERISK
:

1072 
°©e
->
h™dÀr
 = 
de˛Clo£
;

1073  
XML_ROLE_GROUP_CLOSE_REP
;

1074 
XML_TOK_OR
:

1075 
°©e
->
h™dÀr
 = 
ñemít4
;

1076  
XML_ROLE_NONE
;

1078  
	`comm⁄
(
°©e
, 
tok
);

1079 
	}
}

1082 
	$ñemít6
(
PROLOG_STATE
 *
°©e
,

1083 
tok
,

1084 c⁄° *
±r
,

1085 c⁄° *
íd
,

1086 c⁄° 
ENCODING
 *
íc
)

1088 
tok
) {

1089 
XML_TOK_PROLOG_S
:

1090  
XML_ROLE_NONE
;

1091 
XML_TOK_OPEN_PAREN
:

1092 
°©e
->
Àvñ
 += 1;

1093  
XML_ROLE_GROUP_OPEN
;

1094 
XML_TOK_NAME
:

1095 
XML_TOK_PREFIXED_NAME
:

1096 
°©e
->
h™dÀr
 = 
ñemít7
;

1097  
XML_ROLE_CONTENT_ELEMENT
;

1098 
XML_TOK_NAME_QUESTION
:

1099 
°©e
->
h™dÀr
 = 
ñemít7
;

1100  
XML_ROLE_CONTENT_ELEMENT_OPT
;

1101 
XML_TOK_NAME_ASTERISK
:

1102 
°©e
->
h™dÀr
 = 
ñemít7
;

1103  
XML_ROLE_CONTENT_ELEMENT_REP
;

1104 
XML_TOK_NAME_PLUS
:

1105 
°©e
->
h™dÀr
 = 
ñemít7
;

1106  
XML_ROLE_CONTENT_ELEMENT_PLUS
;

1108  
	`comm⁄
(
°©e
, 
tok
);

1109 
	}
}

1112 
	$ñemít7
(
PROLOG_STATE
 *
°©e
,

1113 
tok
,

1114 c⁄° *
±r
,

1115 c⁄° *
íd
,

1116 c⁄° 
ENCODING
 *
íc
)

1118 
tok
) {

1119 
XML_TOK_PROLOG_S
:

1120  
XML_ROLE_NONE
;

1121 
XML_TOK_CLOSE_PAREN
:

1122 
°©e
->
Àvñ
 -= 1;

1123 i‡(
°©e
->
Àvñ
 == 0)

1124 
°©e
->
h™dÀr
 = 
de˛Clo£
;

1125  
XML_ROLE_GROUP_CLOSE
;

1126 
XML_TOK_CLOSE_PAREN_ASTERISK
:

1127 
°©e
->
Àvñ
 -= 1;

1128 i‡(
°©e
->
Àvñ
 == 0)

1129 
°©e
->
h™dÀr
 = 
de˛Clo£
;

1130  
XML_ROLE_GROUP_CLOSE_REP
;

1131 
XML_TOK_CLOSE_PAREN_QUESTION
:

1132 
°©e
->
Àvñ
 -= 1;

1133 i‡(
°©e
->
Àvñ
 == 0)

1134 
°©e
->
h™dÀr
 = 
de˛Clo£
;

1135  
XML_ROLE_GROUP_CLOSE_OPT
;

1136 
XML_TOK_CLOSE_PAREN_PLUS
:

1137 
°©e
->
Àvñ
 -= 1;

1138 i‡(
°©e
->
Àvñ
 == 0)

1139 
°©e
->
h™dÀr
 = 
de˛Clo£
;

1140  
XML_ROLE_GROUP_CLOSE_PLUS
;

1141 
XML_TOK_COMMA
:

1142 
°©e
->
h™dÀr
 = 
ñemít6
;

1143  
XML_ROLE_GROUP_SEQUENCE
;

1144 
XML_TOK_OR
:

1145 
°©e
->
h™dÀr
 = 
ñemít6
;

1146  
XML_ROLE_GROUP_CHOICE
;

1148  
	`comm⁄
(
°©e
, 
tok
);

1149 
	}
}

1151 #ifde‡
XML_DTD


1154 
	$c⁄dSe˘0
(
PROLOG_STATE
 *
°©e
,

1155 
tok
,

1156 c⁄° *
±r
,

1157 c⁄° *
íd
,

1158 c⁄° 
ENCODING
 *
íc
)

1160 
tok
) {

1161 
XML_TOK_PROLOG_S
:

1162  
XML_ROLE_NONE
;

1163 
XML_TOK_NAME
:

1164 i‡(
	`XmlNameM©chesAscii
(
íc
, 
±r
, 
íd
, 
KW_INCLUDE
)) {

1165 
°©e
->
h™dÀr
 = 
c⁄dSe˘1
;

1166  
XML_ROLE_NONE
;

1168 i‡(
	`XmlNameM©chesAscii
(
íc
, 
±r
, 
íd
, 
KW_IGNORE
)) {

1169 
°©e
->
h™dÀr
 = 
c⁄dSe˘2
;

1170  
XML_ROLE_NONE
;

1174  
	`comm⁄
(
°©e
, 
tok
);

1175 
	}
}

1178 
	$c⁄dSe˘1
(
PROLOG_STATE
 *
°©e
,

1179 
tok
,

1180 c⁄° *
±r
,

1181 c⁄° *
íd
,

1182 c⁄° 
ENCODING
 *
íc
)

1184 
tok
) {

1185 
XML_TOK_PROLOG_S
:

1186  
XML_ROLE_NONE
;

1187 
XML_TOK_OPEN_BRACKET
:

1188 
°©e
->
h™dÀr
 = 
exã∫ÆSub£t1
;

1189 
°©e
->
ö˛udeLevñ
 += 1;

1190  
XML_ROLE_NONE
;

1192  
	`comm⁄
(
°©e
, 
tok
);

1193 
	}
}

1196 
	$c⁄dSe˘2
(
PROLOG_STATE
 *
°©e
,

1197 
tok
,

1198 c⁄° *
±r
,

1199 c⁄° *
íd
,

1200 c⁄° 
ENCODING
 *
íc
)

1202 
tok
) {

1203 
XML_TOK_PROLOG_S
:

1204  
XML_ROLE_NONE
;

1205 
XML_TOK_OPEN_BRACKET
:

1206 
°©e
->
h™dÀr
 = 
exã∫ÆSub£t1
;

1207  
XML_ROLE_IGNORE_SECT
;

1209  
	`comm⁄
(
°©e
, 
tok
);

1210 
	}
}

1215 
	$de˛Clo£
(
PROLOG_STATE
 *
°©e
,

1216 
tok
,

1217 c⁄° *
±r
,

1218 c⁄° *
íd
,

1219 c⁄° 
ENCODING
 *
íc
)

1221 
tok
) {

1222 
XML_TOK_PROLOG_S
:

1223  
XML_ROLE_NONE
;

1224 
XML_TOK_DECL_CLOSE
:

1225 
	`£tT›Levñ
(
°©e
);

1226  
XML_ROLE_NONE
;

1228  
	`comm⁄
(
°©e
, 
tok
);

1229 
	}
}

1234 
	$ign‹e
(
PROLOG_STATE
 *
°©e
,

1235 
tok
,

1236 c⁄° *
±r
,

1237 c⁄° *
íd
,

1238 c⁄° 
ENCODING
 *
íc
)

1240 
tok
) {

1241 
XML_TOK_DECL_CLOSE
:

1242 
°©e
->
h™dÀr
 = 
öã∫ÆSub£t
;

1245  
XML_ROLE_NONE
;

1247  
	`comm⁄
(
°©e
, 
tok
);

1248 
	}
}

1252 
	$îr‹
(
PROLOG_STATE
 *
°©e
,

1253 
tok
,

1254 c⁄° *
±r
,

1255 c⁄° *
íd
,

1256 c⁄° 
ENCODING
 *
íc
)

1258  
XML_ROLE_NONE
;

1259 
	}
}

1262 
	$comm⁄
(
PROLOG_STATE
 *
°©e
, 
tok
)

1264 #ifde‡
XML_DTD


1265 i‡(!
°©e
->
documítE¡ôy
 && 
tok
 =
XML_TOK_PARAM_ENTITY_REF
)

1266  
XML_ROLE_INNER_PARAM_ENTITY_REF
;

1268 
°©e
->
h™dÀr
 = 
îr‹
;

1269  
XML_ROLE_ERROR
;

1270 
	}
}

1272 
	$XmlPrﬁogSèãInô
(
PROLOG_STATE
 *
°©e
)

1274 
°©e
->
h™dÀr
 = 
¥ﬁog0
;

1275 #ifde‡
XML_DTD


1276 
°©e
->
documítE¡ôy
 = 1;

1277 
°©e
->
ö˛udeLevñ
 = 0;

1279 
	}
}

1281 #ifde‡
XML_DTD


1283 
	$XmlPrﬁogSèãInôExã∫ÆE¡ôy
(
PROLOG_STATE
 *
°©e
)

1285 
°©e
->
h™dÀr
 = 
exã∫ÆSub£t0
;

1286 
°©e
->
documítE¡ôy
 = 0;

1287 
°©e
->
ö˛udeLevñ
 = 0;

1288 
	}
}

	@modules/expat/xmltok/xmlrole.h

31 #i‚de‡
XmlRﬁe_INCLUDED


32 
	#XmlRﬁe_INCLUDED
 1

	)

34 
	~"xm…ok.h
"

36 #ifde‡
__˝lu•lus


41 
XML_ROLE_ERROR
 = -1,

42 
XML_ROLE_NONE
 = 0,

43 
XML_ROLE_XML_DECL
,

44 
XML_ROLE_INSTANCE_START
,

45 
XML_ROLE_DOCTYPE_NAME
,

46 
XML_ROLE_DOCTYPE_SYSTEM_ID
,

47 
XML_ROLE_DOCTYPE_PUBLIC_ID
,

48 
XML_ROLE_DOCTYPE_CLOSE
,

49 
XML_ROLE_GENERAL_ENTITY_NAME
,

50 
XML_ROLE_PARAM_ENTITY_NAME
,

51 
XML_ROLE_ENTITY_VALUE
,

52 
XML_ROLE_ENTITY_SYSTEM_ID
,

53 
XML_ROLE_ENTITY_PUBLIC_ID
,

54 
XML_ROLE_ENTITY_NOTATION_NAME
,

55 
XML_ROLE_NOTATION_NAME
,

56 
XML_ROLE_NOTATION_SYSTEM_ID
,

57 
XML_ROLE_NOTATION_NO_SYSTEM_ID
,

58 
XML_ROLE_NOTATION_PUBLIC_ID
,

59 
XML_ROLE_ATTRIBUTE_NAME
,

60 
XML_ROLE_ATTRIBUTE_TYPE_CDATA
,

61 
XML_ROLE_ATTRIBUTE_TYPE_ID
,

62 
XML_ROLE_ATTRIBUTE_TYPE_IDREF
,

63 
XML_ROLE_ATTRIBUTE_TYPE_IDREFS
,

64 
XML_ROLE_ATTRIBUTE_TYPE_ENTITY
,

65 
XML_ROLE_ATTRIBUTE_TYPE_ENTITIES
,

66 
XML_ROLE_ATTRIBUTE_TYPE_NMTOKEN
,

67 
XML_ROLE_ATTRIBUTE_TYPE_NMTOKENS
,

68 
XML_ROLE_ATTRIBUTE_ENUM_VALUE
,

69 
XML_ROLE_ATTRIBUTE_NOTATION_VALUE
,

70 
XML_ROLE_ATTLIST_ELEMENT_NAME
,

71 
XML_ROLE_IMPLIED_ATTRIBUTE_VALUE
,

72 
XML_ROLE_REQUIRED_ATTRIBUTE_VALUE
,

73 
XML_ROLE_DEFAULT_ATTRIBUTE_VALUE
,

74 
XML_ROLE_FIXED_ATTRIBUTE_VALUE
,

75 
XML_ROLE_ELEMENT_NAME
,

76 
XML_ROLE_CONTENT_ANY
,

77 
XML_ROLE_CONTENT_EMPTY
,

78 
XML_ROLE_CONTENT_PCDATA
,

79 
XML_ROLE_GROUP_OPEN
,

80 
XML_ROLE_GROUP_CLOSE
,

81 
XML_ROLE_GROUP_CLOSE_REP
,

82 
XML_ROLE_GROUP_CLOSE_OPT
,

83 
XML_ROLE_GROUP_CLOSE_PLUS
,

84 
XML_ROLE_GROUP_CHOICE
,

85 
XML_ROLE_GROUP_SEQUENCE
,

86 
XML_ROLE_CONTENT_ELEMENT
,

87 
XML_ROLE_CONTENT_ELEMENT_REP
,

88 
XML_ROLE_CONTENT_ELEMENT_OPT
,

89 
XML_ROLE_CONTENT_ELEMENT_PLUS
,

90 #ifde‡
XML_DTD


91 
XML_ROLE_TEXT_DECL
,

92 
XML_ROLE_IGNORE_SECT
,

93 
XML_ROLE_INNER_PARAM_ENTITY_REF
,

95 
XML_ROLE_PARAM_ENTITY_REF


98 
	s¥ﬁog_°©e
 {

99 (*
h™dÀr
)(
¥ﬁog_°©e
 *
°©e
,

100 
tok
,

101 c⁄° *
±r
,

102 c⁄° *
íd
,

103 c⁄° 
ENCODING
 *
íc
);

104 
Àvñ
;

105 #ifde‡
XML_DTD


106 
ö˛udeLevñ
;

107 
documítE¡ôy
;

109 } 
	tPROLOG_STATE
;

111 
XMLTOKAPI
 
XmlPrﬁogSèãInô
(
PROLOG_STATE
 *);

112 #ifde‡
XML_DTD


113 
XMLTOKAPI
 
XmlPrﬁogSèãInôExã∫ÆE¡ôy
(
PROLOG_STATE
 *);

116 
	#XmlTokíRﬁe
(
°©e
, 
tok
, 
±r
, 
íd
, 
íc
) \

117 (((
°©e
)->
h™dÀr
)(°©e, 
tok
, 
±r
, 
íd
, 
íc
))

	)

119 #ifde‡
__˝lu•lus


	@modules/expat/xmltok/xmltok.c

31 
	~"xmldef.h
"

32 
	~"xm…ok.h
"

33 
	~"«mëab.h
"

35 #ifde‡
XML_DTD


36 
	#IGNORE_SECTION_TOK_VTABLE
 , 
	`PREFIX
(
ign‹eSe˘i⁄Tok
)

	)

38 
	#IGNORE_SECTION_TOK_VTABLE


	)

41 
	#VTABLE1
 \

42 { 
	`PREFIX
(
¥ﬁogTok
), PREFIX(
c⁄ã¡Tok
), \

43 
	`PREFIX
(
cd©aSe˘i⁄Tok
Ë
IGNORE_SECTION_TOK_VTABLE
 }, \

44 { 
	`PREFIX
(
©åibuãVÆueTok
), PREFIX(
ítôyVÆueTok
) }, \

45 
	`PREFIX
(
ßmeName
), \

46 
	`PREFIX
(
«meM©chesAscii
), \

47 
	`PREFIX
(
«meLígth
), \

48 
	`PREFIX
(
skùS
), \

49 
	`PREFIX
(
gëAâs
), \

50 
	`PREFIX
(
ch¨RefNumbî
), \

51 
	`PREFIX
(
¥edeföedE¡ôyName
), \

52 
	`PREFIX
(
upd©ePosôi⁄
), \

53 
	`PREFIX
(
isPublicId
)

	)

55 
	#VTABLE
 
VTABLE1
, 
	`PREFIX
(
toUtf8
), PREFIX(
toUtf16
)

	)

57 
	#UCS2_GET_NAMING
(
∑ges
, 
hi
, 
lo
) \

58 (
«mögBôm≠
[(
∑ges
[
hi
] << 3Ë+ ((
lo
Ë>> 5)] & (1 << (÷oË& 0x1F)))

	)

64 
	#UTF8_GET_NAMING2
(
∑ges
, 
byã
) \

65 (
«mögBôm≠
[((
∑ges
)[(((
byã
)[0]) >> 2) & 7] << 3) \

66 + ((((
byã
)[0]) & 3) << 1) \

67 + ((((
byã
)[1]) >> 5) & 1)] \

68 & (1 << (((
byã
)[1]Ë& 0x1F)))

	)

74 
	#UTF8_GET_NAMING3
(
∑ges
, 
byã
) \

75 (
«mögBôm≠
[((
∑ges
)[((((
byã
)[0]) & 0xF) << 4) \

76 + ((((
byã
)[1]) >> 2) & 0xF)] \

78 + ((((
byã
)[1]) & 3) << 1) \

79 + ((((
byã
)[2]) >> 5) & 1)] \

80 & (1 << (((
byã
)[2]Ë& 0x1F)))

	)

82 
	#UTF8_GET_NAMING
(
∑ges
, 
p
, 
n
) \

83 ((
n
) == 2 \

84 ? 
	`UTF8_GET_NAMING2
(
∑ges
, (c⁄° *)(
p
)) \

85 : ((
n
) == 3 \

86 ? 
	`UTF8_GET_NAMING3
(
∑ges
, (c⁄° *)(
p
)) \

87 : 0))

	)

89 
	#UTF8_INVALID3
(
p
) \

90 ((*
p
) == 0xED \

91 ? (((
p
)[1] & 0x20) != 0) \

92 : ((*
p
) == 0xEF \

93 ? ((
p
)[1] == 0xBF && ((p)[2] == 0xBF || (p)[2] == 0xBE)) \

94 : 0))

	)

96 
	#UTF8_INVALID4
(
p
Ë((*pË=0xF4 && (’)[1] & 0x30Ë!0)

	)

99 
	$isNevî
(c⁄° 
ENCODING
 *
íc
, c⁄° *
p
)

102 
	}
}

105 
	$utf8_isName2
(c⁄° 
ENCODING
 *
íc
, c⁄° *
p
)

107  
	`UTF8_GET_NAMING2
(
«mePages
, (c⁄° *)
p
);

108 
	}
}

111 
	$utf8_isName3
(c⁄° 
ENCODING
 *
íc
, c⁄° *
p
)

113  
	`UTF8_GET_NAMING3
(
«mePages
, (c⁄° *)
p
);

114 
	}
}

116 
	#utf8_isName4
 
isNevî


	)

119 
	$utf8_isNm°π2
(c⁄° 
ENCODING
 *
íc
, c⁄° *
p
)

121  
	`UTF8_GET_NAMING2
(
nm°πPages
, (c⁄° *)
p
);

122 
	}
}

125 
	$utf8_isNm°π3
(c⁄° 
ENCODING
 *
íc
, c⁄° *
p
)

127  
	`UTF8_GET_NAMING3
(
nm°πPages
, (c⁄° *)
p
);

128 
	}
}

130 
	#utf8_isNm°π4
 
isNevî


	)

132 
	#utf8_isInvÆid2
 
isNevî


	)

135 
	$utf8_isInvÆid3
(c⁄° 
ENCODING
 *
íc
, c⁄° *
p
)

137  
	`UTF8_INVALID3
((c⁄° *)
p
);

138 
	}
}

141 
	$utf8_isInvÆid4
(c⁄° 
ENCODING
 *
íc
, c⁄° *
p
)

143  
	`UTF8_INVALID4
((c⁄° *)
p
);

144 
	}
}

146 
	sn‹mÆ_ícodög
 {

147 
ENCODING
 
	míc
;

148 
	mty≥
[256];

149 #ifde‡
XML_MIN_SIZE


150 (*
	mbyãTy≥
)(c⁄° 
	mENCODING
 *, const *);

151 (*
	misNameMö
)(c⁄° 
	mENCODING
 *, const *);

152 (*
	misNm°πMö
)(c⁄° 
	mENCODING
 *, const *);

153 (*
	mbyãToAscii
)(c⁄° 
	mENCODING
 *, const *);

154 (*
	mch¨M©ches
)(c⁄° 
	mENCODING
 *, const *, );

156 (*
	misName2
)(c⁄° 
	mENCODING
 *, const *);

157 (*
	misName3
)(c⁄° 
	mENCODING
 *, const *);

158 (*
	misName4
)(c⁄° 
	mENCODING
 *, const *);

159 (*
	misNm°π2
)(c⁄° 
	mENCODING
 *, const *);

160 (*
	misNm°π3
)(c⁄° 
	mENCODING
 *, const *);

161 (*
	misNm°π4
)(c⁄° 
	mENCODING
 *, const *);

162 (*
	misInvÆid2
)(c⁄° 
	mENCODING
 *, const *);

163 (*
	misInvÆid3
)(c⁄° 
	mENCODING
 *, const *);

164 (*
	misInvÆid4
)(c⁄° 
	mENCODING
 *, const *);

167 #ifde‡
XML_MIN_SIZE


169 
	#STANDARD_VTABLE
(
E
) \

170 
E
 ## 
byãTy≥
, \

171 
E
 ## 
isNameMö
, \

172 
E
 ## 
isNm°πMö
, \

173 
E
 ## 
byãToAscii
, \

174 
E
 ## 
ch¨M©ches
,

	)

178 
	#STANDARD_VTABLE
(
E
Ë

	)

182 
	#NORMAL_VTABLE
(
E
) \

183 
E
 ## 
isName2
, \

184 
E
 ## 
isName3
, \

185 
E
 ## 
isName4
, \

186 
E
 ## 
isNm°π2
, \

187 
E
 ## 
isNm°π3
, \

188 
E
 ## 
isNm°π4
, \

189 
E
 ## 
isInvÆid2
, \

190 
E
 ## 
isInvÆid3
, \

191 
E
 ## 
isInvÆid4


	)

193 
checkCh¨RefNumbî
();

195 
	~"xm…ok_im∂.h
"

196 
	~"ascii.h
"

198 #ifde‡
XML_MIN_SIZE


199 
	#sb_isNameMö
 
isNevî


	)

200 
	#sb_isNm°πMö
 
isNevî


	)

203 #ifde‡
XML_MIN_SIZE


204 
	#MINBPC
(
íc
Ë(”nc)->
möByãsPîCh¨
)

	)

207 
	#MINBPC
(
íc
Ë1

	)

210 
	#SB_BYTE_TYPE
(
íc
, 
p
) \

211 (((
n‹mÆ_ícodög
 *)(
íc
))->
ty≥
[()*(
p
)])

	)

213 #ifde‡
XML_MIN_SIZE


215 
	$sb_byãTy≥
(c⁄° 
ENCODING
 *
íc
, c⁄° *
p
)

217  
	`SB_BYTE_TYPE
(
íc
, 
p
);

218 
	}
}

219 
	#BYTE_TYPE
(
íc
, 
p
) \

220 (((c⁄° 
n‹mÆ_ícodög
 *)(
íc
))->
	`byãTy≥
”nc, 
p
))

	)

222 
	#BYTE_TYPE
(
íc
, 
p
Ë
	`SB_BYTE_TYPE
”nc,Ö)

	)

225 #ifde‡
XML_MIN_SIZE


226 
	#BYTE_TO_ASCII
(
íc
, 
p
) \

227 (((c⁄° 
n‹mÆ_ícodög
 *)(
íc
))->
	`byãToAscii
”nc, 
p
))

	)

229 
	$sb_byãToAscii
(c⁄° 
ENCODING
 *
íc
, c⁄° *
p
)

231  *
p
;

232 
	}
}

234 
	#BYTE_TO_ASCII
(
íc
, 
p
Ë(*’))

	)

237 
	#IS_NAME_CHAR
(
íc
, 
p
, 
n
) \

238 (((c⁄° 
n‹mÆ_ícodög
 *)(
íc
))->
isName
 ## 
	`n
”nc, 
p
))

	)

239 
	#IS_NMSTRT_CHAR
(
íc
, 
p
, 
n
) \

240 (((c⁄° 
n‹mÆ_ícodög
 *)(
íc
))->
isNm°π
 ## 
	`n
”nc, 
p
))

	)

241 
	#IS_INVALID_CHAR
(
íc
, 
p
, 
n
) \

242 (((c⁄° 
n‹mÆ_ícodög
 *)(
íc
))->
isInvÆid
 ## 
	`n
”nc, 
p
))

	)

244 #ifde‡
XML_MIN_SIZE


245 
	#IS_NAME_CHAR_MINBPC
(
íc
, 
p
) \

246 (((c⁄° 
n‹mÆ_ícodög
 *)(
íc
))->
	`isNameMö
”nc, 
p
))

	)

247 
	#IS_NMSTRT_CHAR_MINBPC
(
íc
, 
p
) \

248 (((c⁄° 
n‹mÆ_ícodög
 *)(
íc
))->
	`isNm°πMö
”nc, 
p
))

	)

250 
	#IS_NAME_CHAR_MINBPC
(
íc
, 
p
Ë(0)

	)

251 
	#IS_NMSTRT_CHAR_MINBPC
(
íc
, 
p
Ë(0)

	)

254 #ifde‡
XML_MIN_SIZE


255 
	#CHAR_MATCHES
(
íc
, 
p
, 
c
) \

256 (((c⁄° 
n‹mÆ_ícodög
 *)(
íc
))->
	`ch¨M©ches
”nc, 
p
, 
c
))

	)

258 
	$sb_ch¨M©ches
(c⁄° 
ENCODING
 *
íc
, c⁄° *
p
, 
c
)

260  *
p
 =
c
;

261 
	}
}

264 
	#CHAR_MATCHES
(
íc
, 
p
, 
c
Ë(*’Ë=c)

	)

267 
	#PREFIX
(
idít
Ë
n‹mÆ_
 ## 
	)
ident

268 
	~"xm…ok_im∂.c
"

270 #unde‡
MINBPC


271 #unde‡
BYTE_TYPE


272 #unde‡
BYTE_TO_ASCII


273 #unde‡
CHAR_MATCHES


274 #unde‡
IS_NAME_CHAR


275 #unde‡
IS_NAME_CHAR_MINBPC


276 #unde‡
IS_NMSTRT_CHAR


277 #unde‡
IS_NMSTRT_CHAR_MINBPC


278 #unde‡
IS_INVALID_CHAR


281 
	mUTF8_cvÆ1
 = 0x00,

282 
	mUTF8_cvÆ2
 = 0xc0,

283 
	mUTF8_cvÆ3
 = 0xe0,

284 
	mUTF8_cvÆ4
 = 0xf0

288 
	$utf8_toUtf8
(c⁄° 
ENCODING
 *
íc
,

289 c⁄° **
‰omP
, c⁄° *
‰omLim
,

290 **
toP
, c⁄° *
toLim
)

292 *
to
;

293 c⁄° *
‰om
;

294 i‡(
‰omLim
 - *
‰omP
 > 
toLim
 - *
toP
) {

296 
‰omLim
 = *
‰omP
 + (
toLim
 - *
toP
); fromLim > *fromP; fromLim--)

297 i‡((()
‰omLim
[-1] & 0xc0) != 0x80)

300 
to
 = *
toP
, 
‰om
 = *
‰omP
; from !
‰omLim
; from++,Åo++)

301 *
to
 = *
‰om
;

302 *
‰omP
 = 
‰om
;

303 *
toP
 = 
to
;

304 
	}
}

307 
	$utf8_toUtf16
(c⁄° 
ENCODING
 *
íc
,

308 c⁄° **
‰omP
, c⁄° *
‰omLim
,

309 **
toP
, c⁄° *
toLim
)

311 *
to
 = *
toP
;

312 c⁄° *
‰om
 = *
‰omP
;

313 
‰om
 !
‰omLim
 && 
to
 !
toLim
) {

314 ((
n‹mÆ_ícodög
 *)
íc
)->
ty≥
[()*
‰om
]) {

315 
BT_LEAD2
:

316 *
to
++ = ((
‰om
[0] & 0x1f) << 6) | (from[1] & 0x3f);

317 
‰om
 += 2;

319 
BT_LEAD3
:

320 *
to
++ = ((
‰om
[0] & 0xf) << 12) | ((from[1] & 0x3f) << 6) | (from[2] & 0x3f);

321 
‰om
 += 3;

323 
BT_LEAD4
:

325 
n
;

326 i‡(
to
 + 1 =
toLim
)

328 
n
 = ((
‰om
[0] & 0x7) << 18) | ((from[1] & 0x3f) << 12) | ((from[2] & 0x3f) << 6) | (from[3] & 0x3f);

329 
n
 -= 0x10000;

330 
to
[0] = ()((
n
 >> 10) | 0xD800);

331 
to
[1] = ()((
n
 & 0x3FF) | 0xDC00);

332 
to
 += 2;

333 
‰om
 += 4;

337 *
to
++ = *
‰om
++;

341 *
‰omP
 = 
‰om
;

342 *
toP
 = 
to
;

343 
	}
}

345 #ifde‡
XML_NS


346 c⁄° 
n‹mÆ_ícodög
 
	gutf8_ícodög_ns
 = {

347 { 
VTABLE1
, 
utf8_toUtf8
, 
utf8_toUtf16
, 1, 1, 0 },

349 
	~"asciôab.h
"

350 
	~"utf8èb.h
"

352 
STANDARD_VTABLE
(
sb_
Ë
NORMAL_VTABLE
(
utf8_
)

356 c⁄° 
n‹mÆ_ícodög
 
	gutf8_ícodög
 = {

357 { 
VTABLE1
, 
utf8_toUtf8
, 
utf8_toUtf16
, 1, 1, 0 },

359 
	#BT_COLON
 
BT_NMSTRT


	)

360 
	~"asciôab.h
"

361 #unde‡
BT_COLON


362 
	~"utf8èb.h
"

364 
STANDARD_VTABLE
(
sb_
Ë
NORMAL_VTABLE
(
utf8_
)

367 #ifde‡
XML_NS


369 c⁄° 
n‹mÆ_ícodög
 
	göã∫Æ_utf8_ícodög_ns
 = {

370 { 
VTABLE1
, 
utf8_toUtf8
, 
utf8_toUtf16
, 1, 1, 0 },

372 
	~"üsciôab.h
"

373 
	~"utf8èb.h
"

375 
STANDARD_VTABLE
(
sb_
Ë
NORMAL_VTABLE
(
utf8_
)

380 c⁄° 
n‹mÆ_ícodög
 
	göã∫Æ_utf8_ícodög
 = {

381 { 
VTABLE1
, 
utf8_toUtf8
, 
utf8_toUtf16
, 1, 1, 0 },

383 
	#BT_COLON
 
BT_NMSTRT


	)

384 
	~"üsciôab.h
"

385 #unde‡
BT_COLON


386 
	~"utf8èb.h
"

388 
STANDARD_VTABLE
(
sb_
Ë
NORMAL_VTABLE
(
utf8_
)

392 
	$œtö1_toUtf8
(c⁄° 
ENCODING
 *
íc
,

393 c⁄° **
‰omP
, c⁄° *
‰omLim
,

394 **
toP
, c⁄° *
toLim
)

397 
c
;

398 i‡(*
‰omP
 =
‰omLim
)

400 
c
 = ()**
‰omP
;

401 i‡(
c
 & 0x80) {

402 i‡(
toLim
 - *
toP
 < 2)

404 *(*
toP
)++ = ((
c
 >> 6Ë| 
UTF8_cvÆ2
);

405 *(*
toP
)++ = ((
c
 & 0x3f) | 0x80);

406 (*
‰omP
)++;

409 i‡(*
toP
 =
toLim
)

411 *(*
toP
)++ = *(*
‰omP
)++;

414 
	}
}

417 
	$œtö1_toUtf16
(c⁄° 
ENCODING
 *
íc
,

418 c⁄° **
‰omP
, c⁄° *
‰omLim
,

419 **
toP
, c⁄° *
toLim
)

421 *
‰omP
 !
‰omLim
 && *
toP
 !
toLim
)

422 *(*
toP
)++ = ()*(*
‰omP
)++;

423 
	}
}

425 #ifde‡
XML_NS


427 c⁄° 
n‹mÆ_ícodög
 
	gœtö1_ícodög_ns
 = {

428 { 
VTABLE1
, 
œtö1_toUtf8
, 
œtö1_toUtf16
, 1, 0, 0 },

430 
	~"asciôab.h
"

431 
	~"œtö1èb.h
"

433 
STANDARD_VTABLE
(
sb_
)

438 c⁄° 
n‹mÆ_ícodög
 
	gœtö1_ícodög
 = {

439 { 
VTABLE1
, 
œtö1_toUtf8
, 
œtö1_toUtf16
, 1, 0, 0 },

441 
	#BT_COLON
 
BT_NMSTRT


	)

442 
	~"asciôab.h
"

443 #unde‡
BT_COLON


444 
	~"œtö1èb.h
"

446 
STANDARD_VTABLE
(
sb_
)

450 
	$ascii_toUtf8
(c⁄° 
ENCODING
 *
íc
,

451 c⁄° **
‰omP
, c⁄° *
‰omLim
,

452 **
toP
, c⁄° *
toLim
)

454 *
‰omP
 !
‰omLim
 && *
toP
 !
toLim
)

455 *(*
toP
)++ = *(*
‰omP
)++;

456 
	}
}

458 #ifde‡
XML_NS


460 c⁄° 
n‹mÆ_ícodög
 
	gascii_ícodög_ns
 = {

461 { 
VTABLE1
, 
ascii_toUtf8
, 
œtö1_toUtf16
, 1, 1, 0 },

463 
	~"asciôab.h
"

466 
STANDARD_VTABLE
(
sb_
)

471 c⁄° 
n‹mÆ_ícodög
 
	gascii_ícodög
 = {

472 { 
VTABLE1
, 
ascii_toUtf8
, 
œtö1_toUtf16
, 1, 1, 0 },

474 
	#BT_COLON
 
BT_NMSTRT


	)

475 
	~"asciôab.h
"

476 #unde‡
BT_COLON


479 
STANDARD_VTABLE
(
sb_
)

482 
	$unicode_byã_ty≥
(
hi
, 
lo
)

484 ()
hi
) {

486  
BT_LEAD4
;

488  
BT_TRAIL
;

490 ()
lo
) {

493  
BT_NONXML
;

497  
BT_NONASCII
;

498 
	}
}

500 
	#DEFINE_UTF16_TO_UTF8
(
E
) \

502 
E
 ## 
	`toUtf8
(c⁄° 
ENCODING
 *
íc
, \

503 c⁄° **
‰omP
, c⁄° *
‰omLim
, \

504 **
toP
, c⁄° *
toLim
) \

506 c⁄° *
‰om
; \

507 
‰om
 = *
‰omP
; from !
‰omLim
; from += 2) { \

508 
∂™e
; \

509 
lo2
; \

510 
lo
 = 
	`GET_LO
(
‰om
); \

511 
hi
 = 
	`GET_HI
(
‰om
); \

512 
hi
) { \

514 i‡(
lo
 < 0x80) { \

515 i‡(*
toP
 =
toLim
) { \

516 *
‰omP
 = 
‰om
; \

519 *(*
toP
)++ = 
lo
; \

525 i‡(
toLim
 - *
toP
 < 2) { \

526 *
‰omP
 = 
‰om
; \

529 *(*
toP
)++ = ((
lo
 >> 6Ë| (
hi
 << 2Ë| 
UTF8_cvÆ2
); \

530 *(*
toP
)++ = ((
lo
 & 0x3f) | 0x80); \

533 i‡(
toLim
 - *
toP
 < 3) { \

534 *
‰omP
 = 
‰om
; \

538 *(*
toP
)++ = ((
hi
 >> 4Ë| 
UTF8_cvÆ3
); \

539 *(*
toP
)++ = (((
hi
 & 0xfË<< 2Ë| (
lo
 >> 6) | 0x80); \

540 *(*
toP
)++ = ((
lo
 & 0x3f) | 0x80); \

543 i‡(
toLim
 - *
toP
 < 4) { \

544 *
‰omP
 = 
‰om
; \

547 
∂™e
 = (((
hi
 & 0x3Ë<< 2Ë| ((
lo
 >> 6) & 0x3)) + 1; \

548 *(*
toP
)++ = ((
∂™e
 >> 2Ë| 
UTF8_cvÆ4
); \

549 *(*
toP
)++ = (((
lo
 >> 2Ë& 0xFË| ((
∂™e
 & 0x3) << 4) | 0x80); \

550 
‰om
 += 2; \

551 
lo2
 = 
	`GET_LO
(
‰om
); \

552 *(*
toP
)++ = (((
lo
 & 0x3) << 4) \

553 | ((
	`GET_HI
(
‰om
) & 0x3) << 2) \

554 | (
lo2
 >> 6) \

556 *(*
toP
)++ = ((
lo2
 & 0x3f) | 0x80); \

560 *
‰omP
 = 
‰om
; \

561 }

	)

563 
	#DEFINE_UTF16_TO_UTF16
(
E
) \

565 
E
 ## 
	`toUtf16
(c⁄° 
ENCODING
 *
íc
, \

566 c⁄° **
‰omP
, c⁄° *
‰omLim
, \

567 **
toP
, c⁄° *
toLim
) \

570 i‡(
‰omLim
 - *
‰omP
 > ((
toLim
 - *
toP
) << 1) \

571 && (
	`GET_HI
(
‰omLim
 - 2) & 0xF8) == 0xD8) \

572 
‰omLim
 -= 2; \

573 ; *
‰omP
 !
‰omLim
 && *
toP
 !
toLim
; *fromP += 2) \

574 *(*
toP
)++ = (
	`GET_HI
(*
‰omP
Ë<< 8Ë| 
	`GET_LO
(*fromP); \

575 }

	)

577 
	#SET2
(
±r
, 
ch
) \

578 (((
±r
)[0] = ((
ch
Ë& 0xff)), (’å)[1] = ((chË>> 8)))

	)

579 
	#GET_LO
(
±r
Ë(()’å)[0])

	)

580 
	#GET_HI
(
±r
Ë(()’å)[1])

	)

582 
	$DEFINE_UTF16_TO_UTF8
(
lôée2_
)

583 
	$DEFINE_UTF16_TO_UTF16
(
lôée2_
)

585 #unde‡
SET2


586 #unde‡
GET_LO


587 #unde‡
GET_HI


589 
	#SET2
(
±r
, 
ch
) \

590 (((
±r
)[0] = ((
ch
Ë>> 8)), (’å)[1] = ((chË& 0xFF)))

	)

591 
	#GET_LO
(
±r
Ë(()’å)[1])

	)

592 
	#GET_HI
(
±r
Ë(()’å)[0])

	)

594 
	$DEFINE_UTF16_TO_UTF8
(
big2_
)

595 
	$DEFINE_UTF16_TO_UTF16
(
big2_
)

597 #unde‡
SET2


598 #unde‡
GET_LO


599 #unde‡
GET_HI


601 
	#LITTLE2_BYTE_TYPE
(
íc
, 
p
) \

602 ((
p
)[1] == 0 \

603 ? ((
n‹mÆ_ícodög
 *)(
íc
))->
ty≥
[()*(
p
)] \

604 : 
	`unicode_byã_ty≥
((
p
)[1], (p)[0]))

	)

605 
	#LITTLE2_BYTE_TO_ASCII
(
íc
, 
p
Ë(’)[1] =0 ? (p)[0] : -1)

	)

606 
	#LITTLE2_CHAR_MATCHES
(
íc
, 
p
, 
c
Ë(’)[1] =0 && (p)[0] =c)

	)

607 
	#LITTLE2_IS_NAME_CHAR_MINBPC
(
íc
, 
p
) \

608 
	`UCS2_GET_NAMING
(
«mePages
, ()
p
[1], (Ì[0])

	)

609 
	#LITTLE2_IS_NMSTRT_CHAR_MINBPC
(
íc
, 
p
) \

610 
	`UCS2_GET_NAMING
(
nm°πPages
, ()
p
[1], (Ì[0])

	)

612 #ifde‡
XML_MIN_SIZE


615 
	$lôée2_byãTy≥
(c⁄° 
ENCODING
 *
íc
, c⁄° *
p
)

617  
	`LITTLE2_BYTE_TYPE
(
íc
, 
p
);

618 
	}
}

621 
	$lôée2_byãToAscii
(c⁄° 
ENCODING
 *
íc
, c⁄° *
p
)

623  
	`LITTLE2_BYTE_TO_ASCII
(
íc
, 
p
);

624 
	}
}

627 
	$lôée2_ch¨M©ches
(c⁄° 
ENCODING
 *
íc
, c⁄° *
p
, 
c
)

629  
	`LITTLE2_CHAR_MATCHES
(
íc
, 
p
, 
c
);

630 
	}
}

633 
	$lôée2_isNameMö
(c⁄° 
ENCODING
 *
íc
, c⁄° *
p
)

635  
	`LITTLE2_IS_NAME_CHAR_MINBPC
(
íc
, 
p
);

636 
	}
}

639 
	$lôée2_isNm°πMö
(c⁄° 
ENCODING
 *
íc
, c⁄° *
p
)

641  
	`LITTLE2_IS_NMSTRT_CHAR_MINBPC
(
íc
, 
p
);

642 
	}
}

644 #unde‡
VTABLE


645 
	#VTABLE
 
VTABLE1
, 
lôée2_toUtf8
, 
lôée2_toUtf16


	)

649 #unde‡
PREFIX


650 
	#PREFIX
(
idít
Ë
lôée2_
 ## 
	)
ident

651 
	#MINBPC
(
íc
Ë2

	)

653 
	#BYTE_TYPE
(
íc
, 
p
Ë
	`LITTLE2_BYTE_TYPE
”nc,Ö)

	)

654 
	#BYTE_TO_ASCII
(
íc
, 
p
Ë
	`LITTLE2_BYTE_TO_ASCII
”nc,Ö)

	)

655 
	#CHAR_MATCHES
(
íc
, 
p
, 
c
Ë
	`LITTLE2_CHAR_MATCHES
”nc,Ö, c)

	)

656 
	#IS_NAME_CHAR
(
íc
, 
p
, 
n
Ë0

	)

657 
	#IS_NAME_CHAR_MINBPC
(
íc
, 
p
Ë
	`LITTLE2_IS_NAME_CHAR_MINBPC
”nc,Ö)

	)

658 
	#IS_NMSTRT_CHAR
(
íc
, 
p
, 
n
Ë(0)

	)

659 
	#IS_NMSTRT_CHAR_MINBPC
(
íc
, 
p
Ë
	`LITTLE2_IS_NMSTRT_CHAR_MINBPC
”nc,Ö)

	)

661 
	~"xm…ok_im∂.c
"

663 #unde‡
MINBPC


664 #unde‡
BYTE_TYPE


665 #unde‡
BYTE_TO_ASCII


666 #unde‡
CHAR_MATCHES


667 #unde‡
IS_NAME_CHAR


668 #unde‡
IS_NAME_CHAR_MINBPC


669 #unde‡
IS_NMSTRT_CHAR


670 #unde‡
IS_NMSTRT_CHAR_MINBPC


671 #unde‡
IS_INVALID_CHAR


675 #ifde‡
XML_NS


677 c⁄° 
n‹mÆ_ícodög
 
	glôée2_ícodög_ns
 = {

678 { 
VTABLE
, 2, 0,

679 #i‡
XML_BYTE_ORDER
 == 12

686 
	~"asciôab.h
"

687 
	~"œtö1èb.h
"

689 
STANDARD_VTABLE
(
lôée2_
)

694 c⁄° 
n‹mÆ_ícodög
 
	glôée2_ícodög
 = {

695 { 
VTABLE
, 2, 0,

696 #i‡
XML_BYTE_ORDER
 == 12

703 
	#BT_COLON
 
BT_NMSTRT


	)

704 
	~"asciôab.h
"

705 #unde‡
BT_COLON


706 
	~"œtö1èb.h
"

708 
STANDARD_VTABLE
(
lôée2_
)

711 #i‡
XML_BYTE_ORDER
 != 21

713 #ifde‡
XML_NS


715 c⁄° 
n‹mÆ_ícodög
 
	göã∫Æ_lôée2_ícodög_ns
 = {

716 { 
VTABLE
, 2, 0, 1 },

718 
	~"üsciôab.h
"

719 
	~"œtö1èb.h
"

721 
STANDARD_VTABLE
(
lôée2_
)

726 c⁄° 
n‹mÆ_ícodög
 
	göã∫Æ_lôée2_ícodög
 = {

727 { 
VTABLE
, 2, 0, 1 },

729 
	#BT_COLON
 
BT_NMSTRT


	)

730 
	~"üsciôab.h
"

731 #unde‡
BT_COLON


732 
	~"œtö1èb.h
"

734 
STANDARD_VTABLE
(
lôée2_
)

740 
	#BIG2_BYTE_TYPE
(
íc
, 
p
) \

741 ((
p
)[0] == 0 \

742 ? ((
n‹mÆ_ícodög
 *)(
íc
))->
ty≥
[()(
p
)[1]] \

743 : 
	`unicode_byã_ty≥
((
p
)[0], (p)[1]))

	)

744 
	#BIG2_BYTE_TO_ASCII
(
íc
, 
p
Ë(’)[0] =0 ? (p)[1] : -1)

	)

745 
	#BIG2_CHAR_MATCHES
(
íc
, 
p
, 
c
Ë(’)[0] =0 && (p)[1] =c)

	)

746 
	#BIG2_IS_NAME_CHAR_MINBPC
(
íc
, 
p
) \

747 
	`UCS2_GET_NAMING
(
«mePages
, ()
p
[0], (Ì[1])

	)

748 
	#BIG2_IS_NMSTRT_CHAR_MINBPC
(
íc
, 
p
) \

749 
	`UCS2_GET_NAMING
(
nm°πPages
, ()
p
[0], (Ì[1])

	)

751 #ifde‡
XML_MIN_SIZE


754 
	$big2_byãTy≥
(c⁄° 
ENCODING
 *
íc
, c⁄° *
p
)

756  
	`BIG2_BYTE_TYPE
(
íc
, 
p
);

757 
	}
}

760 
	$big2_byãToAscii
(c⁄° 
ENCODING
 *
íc
, c⁄° *
p
)

762  
	`BIG2_BYTE_TO_ASCII
(
íc
, 
p
);

763 
	}
}

766 
	$big2_ch¨M©ches
(c⁄° 
ENCODING
 *
íc
, c⁄° *
p
, 
c
)

768  
	`BIG2_CHAR_MATCHES
(
íc
, 
p
, 
c
);

769 
	}
}

772 
	$big2_isNameMö
(c⁄° 
ENCODING
 *
íc
, c⁄° *
p
)

774  
	`BIG2_IS_NAME_CHAR_MINBPC
(
íc
, 
p
);

775 
	}
}

778 
	$big2_isNm°πMö
(c⁄° 
ENCODING
 *
íc
, c⁄° *
p
)

780  
	`BIG2_IS_NMSTRT_CHAR_MINBPC
(
íc
, 
p
);

781 
	}
}

783 #unde‡
VTABLE


784 
	#VTABLE
 
VTABLE1
, 
big2_toUtf8
, 
big2_toUtf16


	)

788 #unde‡
PREFIX


789 
	#PREFIX
(
idít
Ë
big2_
 ## 
	)
ident

790 
	#MINBPC
(
íc
Ë2

	)

792 
	#BYTE_TYPE
(
íc
, 
p
Ë
	`BIG2_BYTE_TYPE
”nc,Ö)

	)

793 
	#BYTE_TO_ASCII
(
íc
, 
p
Ë
	`BIG2_BYTE_TO_ASCII
”nc,Ö)

	)

794 
	#CHAR_MATCHES
(
íc
, 
p
, 
c
Ë
	`BIG2_CHAR_MATCHES
”nc,Ö, c)

	)

795 
	#IS_NAME_CHAR
(
íc
, 
p
, 
n
Ë0

	)

796 
	#IS_NAME_CHAR_MINBPC
(
íc
, 
p
Ë
	`BIG2_IS_NAME_CHAR_MINBPC
”nc,Ö)

	)

797 
	#IS_NMSTRT_CHAR
(
íc
, 
p
, 
n
Ë(0)

	)

798 
	#IS_NMSTRT_CHAR_MINBPC
(
íc
, 
p
Ë
	`BIG2_IS_NMSTRT_CHAR_MINBPC
”nc,Ö)

	)

800 
	~"xm…ok_im∂.c
"

802 #unde‡
MINBPC


803 #unde‡
BYTE_TYPE


804 #unde‡
BYTE_TO_ASCII


805 #unde‡
CHAR_MATCHES


806 #unde‡
IS_NAME_CHAR


807 #unde‡
IS_NAME_CHAR_MINBPC


808 #unde‡
IS_NMSTRT_CHAR


809 #unde‡
IS_NMSTRT_CHAR_MINBPC


810 #unde‡
IS_INVALID_CHAR


814 #ifde‡
XML_NS


816 c⁄° 
n‹mÆ_ícodög
 
	gbig2_ícodög_ns
 = {

817 { 
VTABLE
, 2, 0,

818 #i‡
XML_BYTE_ORDER
 == 21

825 
	~"asciôab.h
"

826 
	~"œtö1èb.h
"

828 
STANDARD_VTABLE
(
big2_
)

833 c⁄° 
n‹mÆ_ícodög
 
	gbig2_ícodög
 = {

834 { 
VTABLE
, 2, 0,

835 #i‡
XML_BYTE_ORDER
 == 21

842 
	#BT_COLON
 
BT_NMSTRT


	)

843 
	~"asciôab.h
"

844 #unde‡
BT_COLON


845 
	~"œtö1èb.h
"

847 
STANDARD_VTABLE
(
big2_
)

850 #i‡
XML_BYTE_ORDER
 != 12

852 #ifde‡
XML_NS


854 c⁄° 
n‹mÆ_ícodög
 
	göã∫Æ_big2_ícodög_ns
 = {

855 { 
VTABLE
, 2, 0, 1 },

857 
	~"üsciôab.h
"

858 
	~"œtö1èb.h
"

860 
STANDARD_VTABLE
(
big2_
)

865 c⁄° 
n‹mÆ_ícodög
 
	göã∫Æ_big2_ícodög
 = {

866 { 
VTABLE
, 2, 0, 1 },

868 
	#BT_COLON
 
BT_NMSTRT


	)

869 
	~"üsciôab.h
"

870 #unde‡
BT_COLON


871 
	~"œtö1èb.h
"

873 
STANDARD_VTABLE
(
big2_
)

878 #unde‡
PREFIX


881 
	$°ªqci
(c⁄° *
s1
, c⁄° *
s2
)

884 
c1
 = *
s1
++;

885 
c2
 = *
s2
++;

886 i‡(
ASCII_a
 <
c1
 && c1 <
ASCII_z
)

887 
c1
 +
ASCII_A
 - 
ASCII_a
;

888 i‡(
ASCII_a
 <
c2
 && c2 <
ASCII_z
)

889 
c2
 +
ASCII_A
 - 
ASCII_a
;

890 i‡(
c1
 !
c2
)

892 i‡(!
c1
)

896 
	}
}

899 
	$öôUpd©ePosôi⁄
(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
,

900 c⁄° *
íd
, 
POSITION
 *
pos
)

902 
	`n‹mÆ_upd©ePosôi⁄
(&
utf8_ícodög
.
íc
, 
±r
, 
íd
, 
pos
);

903 
	}
}

906 
	$toAscii
(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
, c⁄° *
íd
)

908 
buf
[1];

909 *
p
 = 
buf
;

910 
	`XmlUtf8C⁄vît
(
íc
, &
±r
, 
íd
, &
p
,Ö + 1);

911 i‡(
p
 =
buf
)

914  
buf
[0];

915 
	}
}

918 
	$isS∑˚
(
c
)

920 
c
) {

928 
	}
}

933 
	$∑r£P£udoAâribuã
(c⁄° 
ENCODING
 *
íc
,

934 c⁄° *
±r
,

935 c⁄° *
íd
,

936 c⁄° **
«mePå
,

937 c⁄° **
«meEndPå
,

938 c⁄° **
vÆPå
,

939 c⁄° **
√xtTokPå
)

941 
c
;

942 
›í
;

943 i‡(
±r
 =
íd
) {

944 *
«mePå
 = 0;

947 i‡(!
	`isS∑˚
(
	`toAscii
(
íc
, 
±r
, 
íd
))) {

948 *
√xtTokPå
 = 
±r
;

952 
±r
 +
íc
->
möByãsPîCh¨
;

953 } 
	`isS∑˚
(
	`toAscii
(
íc
, 
±r
, 
íd
)));

954 i‡(
±r
 =
íd
) {

955 *
«mePå
 = 0;

958 *
«mePå
 = 
±r
;

960 
c
 = 
	`toAscii
(
íc
, 
±r
, 
íd
);

961 i‡(
c
 == -1) {

962 *
√xtTokPå
 = 
±r
;

965 i‡(
c
 =
ASCII_EQUALS
) {

966 *
«meEndPå
 = 
±r
;

969 i‡(
	`isS∑˚
(
c
)) {

970 *
«meEndPå
 = 
±r
;

972 
±r
 +
íc
->
möByãsPîCh¨
;

973 } 
	`isS∑˚
(
c
 = 
	`toAscii
(
íc
, 
±r
, 
íd
)));

974 i‡(
c
 !
ASCII_EQUALS
) {

975 *
√xtTokPå
 = 
±r
;

980 
±r
 +
íc
->
möByãsPîCh¨
;

982 i‡(
±r
 =*
«mePå
) {

983 *
√xtTokPå
 = 
±r
;

986 
±r
 +
íc
->
möByãsPîCh¨
;

987 
c
 = 
	`toAscii
(
íc
, 
±r
, 
íd
);

988 
	`isS∑˚
(
c
)) {

989 
±r
 +
íc
->
möByãsPîCh¨
;

990 
c
 = 
	`toAscii
(
íc
, 
±r
, 
íd
);

992 i‡(
c
 !
ASCII_QUOT
 && c !
ASCII_APOS
) {

993 *
√xtTokPå
 = 
±r
;

996 
›í
 = 
c
;

997 
±r
 +
íc
->
möByãsPîCh¨
;

998 *
vÆPå
 = 
±r
;

999 ;; 
±r
 +
íc
->
möByãsPîCh¨
) {

1000 
c
 = 
	`toAscii
(
íc
, 
±r
, 
íd
);

1001 i‡(
c
 =
›í
)

1003 i‡(!(
ASCII_a
 <
c
 && c <
ASCII_z
)

1004 && !(
ASCII_A
 <
c
 && c <
ASCII_Z
)

1005 && !(
ASCII_0
 <
c
 && c <
ASCII_9
)

1006 && 
c
 !
ASCII_PERIOD


1007 && 
c
 !
ASCII_MINUS


1008 && 
c
 !
ASCII_UNDERSCORE
) {

1009 *
√xtTokPå
 = 
±r
;

1013 *
√xtTokPå
 = 
±r
 + 
íc
->
möByãsPîCh¨
;

1015 
	}
}

1017 c⁄° 
	gKW_vîsi⁄
[] = {

1018 
ASCII_v
, 
ASCII_e
, 
ASCII_r
, 
ASCII_s
, 
ASCII_i
, 
ASCII_o
, 
ASCII_n
, '\0'

1021 c⁄° 
	gKW_ícodög
[] = {

1022 
ASCII_e
, 
ASCII_n
, 
ASCII_c
, 
ASCII_o
, 
ASCII_d
, 
ASCII_i
, ASCII_n, 
ASCII_g
, '\0'

1025 c⁄° 
	gKW_°™dÆ⁄e
[] = {

1026 
ASCII_s
, 
ASCII_t
, 
ASCII_a
, 
ASCII_n
, 
ASCII_d
, ASCII_a, 
ASCII_l
, 
ASCII_o
, ASCII_n, 
ASCII_e
, '\0'

1029 c⁄° 
	gKW_yes
[] = {

1030 
ASCII_y
, 
ASCII_e
, 
ASCII_s
, '\0'

1033 c⁄° 
	gKW_no
[] = {

1034 
ASCII_n
, 
ASCII_o
, '\0'

1038 
doP¨£XmlDe˛
(c⁄° 
ENCODING
 *(*
ícodögFödî
)(const ENCODING *,

1041 
isGíîÆTextE¡ôy
,

1042 c⁄° 
ENCODING
 *
íc
,

1043 c⁄° *
±r
,

1044 c⁄° *
íd
,

1045 c⁄° **
badPå
,

1046 c⁄° **
vîsi⁄På
,

1047 c⁄° **
ícodögName
,

1048 c⁄° 
ENCODING
 **
ícodög
,

1049 *
°™dÆ⁄e
)

1051 c⁄° *
	gvÆ
 = 0;

1052 c⁄° *
	g«me
 = 0;

1053 c⁄° *
	g«meEnd
 = 0;

1054 
	g±r
 +5 * 
íc
->
möByãsPîCh¨
;

1055 
	gíd
 -2 * 
íc
->
möByãsPîCh¨
;

1056 i‡(!
∑r£P£udoAâribuã
(
íc
, 
±r
, 
íd
, &
«me
, &
«meEnd
, &
vÆ
, &±rË|| !
	g«me
) {

1057 *
	gbadPå
 = 
±r
;

1060 i‡(!
XmlNameM©chesAscii
(
íc
, 
«me
, 
«meEnd
, 
KW_vîsi⁄
)) {

1061 i‡(!
	gisGíîÆTextE¡ôy
) {

1062 *
	gbadPå
 = 
«me
;

1067 i‡(
	gvîsi⁄På
)

1068 *
	gvîsi⁄På
 = 
vÆ
;

1069 i‡(!
∑r£P£udoAâribuã
(
íc
, 
±r
, 
íd
, &
«me
, &
«meEnd
, &
vÆ
, &ptr)) {

1070 *
	gbadPå
 = 
±r
;

1073 i‡(!
	g«me
) {

1074 i‡(
	gisGíîÆTextE¡ôy
) {

1076 *
	gbadPå
 = 
±r
;

1082 i‡(
XmlNameM©chesAscii
(
íc
, 
«me
, 
«meEnd
, 
KW_ícodög
)) {

1083 
	gc
 = 
toAscii
(
íc
, 
vÆ
, 
íd
);

1084 i‡(!(
	gASCII_a
 <
c
 && c <
ASCII_z
Ë&& !(
ASCII_A
 <¯&& c <
ASCII_Z
)) {

1085 *
badPå
 = 
vÆ
;

1088 i‡(
	gícodögName
)

1089 *
	gícodögName
 = 
vÆ
;

1090 i‡(
	gícodög
)

1091 *
	gícodög
 = 
ícodögFödî
(
íc
, 
vÆ
, 
±r
 -Énc->
möByãsPîCh¨
);

1092 i‡(!
∑r£P£udoAâribuã
(
íc
, 
±r
, 
íd
, &
«me
, &
«meEnd
, &
vÆ
, &ptr)) {

1093 *
	gbadPå
 = 
±r
;

1096 i‡(!
	g«me
)

1099 i‡(!
XmlNameM©chesAscii
(
íc
, 
«me
, 
«meEnd
, 
KW_°™dÆ⁄e
Ë|| 
	gisGíîÆTextE¡ôy
) {

1100 *
	gbadPå
 = 
«me
;

1103 i‡(
XmlNameM©chesAscii
(
íc
, 
vÆ
, 
±r
 -Énc->
möByãsPîCh¨
, 
KW_yes
)) {

1104 i‡(
	g°™dÆ⁄e
)

1105 *
	g°™dÆ⁄e
 = 1;

1107 i‡(
XmlNameM©chesAscii
(
íc
, 
vÆ
, 
±r
 -Énc->
möByãsPîCh¨
, 
KW_no
)) {

1108 i‡(
	g°™dÆ⁄e
)

1109 *
	g°™dÆ⁄e
 = 0;

1112 *
	gbadPå
 = 
vÆ
;

1115 
isS∑˚
(
toAscii
(
íc
, 
±r
, 
íd
)))

1116 
	g±r
 +
íc
->
möByãsPîCh¨
;

1117 i‡(
	g±r
 !
íd
) {

1118 *
badPå
 = 
±r
;

1125 
	$checkCh¨RefNumbî
(
ªsu…
)

1127 
ªsu…
 >> 8) {

1132 i‡(
œtö1_ícodög
.
ty≥
[
ªsu…
] =
BT_NONXML
)

1136 i‡(
ªsu…
 == 0xFFFE ||Ñesult == 0xFFFF)

1140  
ªsu…
;

1141 
	}
}

1143 
	$XmlUtf8Encode
(
c
, *
buf
)

1147 
mö2
 = 0x80,

1148 
mö3
 = 0x800,

1149 
mö4
 = 0x10000

1152 i‡(
c
 < 0)

1154 i‡(
c
 < 
mö2
) {

1155 
buf
[0] = (
c
 | 
UTF8_cvÆ1
);

1158 i‡(
c
 < 
mö3
) {

1159 
buf
[0] = ((
c
 >> 6Ë| 
UTF8_cvÆ2
);

1160 
buf
[1] = ((
c
 & 0x3f) | 0x80);

1163 i‡(
c
 < 
mö4
) {

1164 
buf
[0] = ((
c
 >> 12Ë| 
UTF8_cvÆ3
);

1165 
buf
[1] = (((
c
 >> 6) & 0x3f) | 0x80);

1166 
buf
[2] = ((
c
 & 0x3f) | 0x80);

1169 i‡(
c
 < 0x110000) {

1170 
buf
[0] = ((
c
 >> 18Ë| 
UTF8_cvÆ4
);

1171 
buf
[1] = (((
c
 >> 12) & 0x3f) | 0x80);

1172 
buf
[2] = (((
c
 >> 6) & 0x3f) | 0x80);

1173 
buf
[3] = ((
c
 & 0x3f) | 0x80);

1177 
	}
}

1179 
	$XmlUtf16Encode
(
ch¨Num
, *
buf
)

1181 i‡(
ch¨Num
 < 0)

1183 i‡(
ch¨Num
 < 0x10000) {

1184 
buf
[0] = 
ch¨Num
;

1187 i‡(
ch¨Num
 < 0x110000) {

1188 
ch¨Num
 -= 0x10000;

1189 
buf
[0] = (
ch¨Num
 >> 10) + 0xD800;

1190 
buf
[1] = (
ch¨Num
 & 0x3FF) + 0xDC00;

1194 
	}
}

1196 
	sunknown_ícodög
 {

1197 
n‹mÆ_ícodög
 
	mn‹mÆ
;

1198 (*
	mc⁄vît
)(*
	mu£rD©a
, c⁄° *
	mp
);

1199 *
	mu£rD©a
;

1200 
	mutf16
[256];

1201 
	mutf8
[256][4];

1204 
	$XmlSizeOfUnknownEncodög
()

1206  (
unknown_ícodög
);

1207 
	}
}

1210 
	$unknown_isName
(c⁄° 
ENCODING
 *
íc
, c⁄° *
p
)

1212 
c
 = ((c⁄° 
unknown_ícodög
 *)
íc
)

1213 ->
	`c⁄vît
(((c⁄° 
unknown_ícodög
 *)
íc
)->
u£rD©a
, 
p
);

1214 i‡(
c
 & ~0xFFFF)

1216  
	`UCS2_GET_NAMING
(
«mePages
, 
c
 >> 8, c & 0xFF);

1217 
	}
}

1220 
	$unknown_isNm°π
(c⁄° 
ENCODING
 *
íc
, c⁄° *
p
)

1222 
c
 = ((c⁄° 
unknown_ícodög
 *)
íc
)

1223 ->
	`c⁄vît
(((c⁄° 
unknown_ícodög
 *)
íc
)->
u£rD©a
, 
p
);

1224 i‡(
c
 & ~0xFFFF)

1226  
	`UCS2_GET_NAMING
(
nm°πPages
, 
c
 >> 8, c & 0xFF);

1227 
	}
}

1230 
	$unknown_isInvÆid
(c⁄° 
ENCODING
 *
íc
, c⁄° *
p
)

1232 
c
 = ((c⁄° 
unknown_ícodög
 *)
íc
)

1233 ->
	`c⁄vît
(((c⁄° 
unknown_ícodög
 *)
íc
)->
u£rD©a
, 
p
);

1234  (
c
 & ~0xFFFFË|| 
	`checkCh¨RefNumbî
(c) < 0;

1235 
	}
}

1238 
	$unknown_toUtf8
(c⁄° 
ENCODING
 *
íc
,

1239 c⁄° **
‰omP
, c⁄° *
‰omLim
,

1240 **
toP
, c⁄° *
toLim
)

1242 
buf
[
XML_UTF8_ENCODE_MAX
];

1244 c⁄° *
utf8
;

1245 
n
;

1246 i‡(*
‰omP
 =
‰omLim
)

1248 
utf8
 = ((c⁄° 
unknown_ícodög
 *)
íc
)->utf8[()**
‰omP
];

1249 
n
 = *
utf8
++;

1250 i‡(
n
 == 0) {

1251 
c
 = ((c⁄° 
unknown_ícodög
 *)
íc
)

1252 ->
	`c⁄vît
(((c⁄° 
unknown_ícodög
 *)
íc
)->
u£rD©a
, *
‰omP
);

1253 
n
 = 
	`XmlUtf8Encode
(
c
, 
buf
);

1254 i‡(
n
 > 
toLim
 - *
toP
)

1256 
utf8
 = 
buf
;

1257 *
‰omP
 +((c⁄° 
n‹mÆ_ícodög
 *)
íc
)->
ty≥
[()**fromP]

1258 - (
BT_LEAD2
 - 2);

1261 i‡(
n
 > 
toLim
 - *
toP
)

1263 (*
‰omP
)++;

1266 *(*
toP
)++ = *
utf8
++;

1267 } --
n
 != 0);

1269 
	}
}

1272 
	$unknown_toUtf16
(c⁄° 
ENCODING
 *
íc
,

1273 c⁄° **
‰omP
, c⁄° *
‰omLim
,

1274 **
toP
, c⁄° *
toLim
)

1276 *
‰omP
 !
‰omLim
 && *
toP
 !
toLim
) {

1277 
c


1278 ((c⁄° 
unknown_ícodög
 *)
íc
)->
utf16
[()**
‰omP
];

1279 i‡(
c
 == 0) {

1280 
c
 = ()((c⁄° 
unknown_ícodög
 *)
íc
)

1281 ->
	`c⁄vît
(((c⁄° 
unknown_ícodög
 *)
íc
)->
u£rD©a
, *
‰omP
);

1282 *
‰omP
 +((c⁄° 
n‹mÆ_ícodög
 *)
íc
)->
ty≥
[()**fromP]

1283 - (
BT_LEAD2
 - 2);

1286 (*
‰omP
)++;

1287 *(*
toP
)++ = 
c
;

1289 
	}
}

1291 
ENCODING
 *

1292 
XmlInôUnknownEncodög
(*
mem
,

1293 *
èbÀ
,

1294 (*
c⁄vît
)(*
u£rD©a
, c⁄° *
p
),

1295 *
u£rD©a
)

1297 
i
;

1298 
unknown_ícodög
 *
e
 = 
mem
;

1299 
i
 = 0; i < (
n‹mÆ_ícodög
); i++)

1300 ((*)
mem
)[
i
] = ((*)&
œtö1_ícodög
)[i];

1301 
i
 = 0; i < 128; i++)

1302 i‡(
œtö1_ícodög
.
ty≥
[
i
] !
BT_OTHER


1303 && 
œtö1_ícodög
.
ty≥
[
i
] !
BT_NONXML


1304 && 
èbÀ
[
i
] != i)

1306 
i
 = 0; i < 256; i++) {

1307 
c
 = 
èbÀ
[
i
];

1308 i‡(
c
 == -1) {

1309 
e
->
n‹mÆ
.
ty≥
[
i
] = 
BT_MALFORM
;

1311 
e
->
utf16
[
i
] = 0xFFFF;

1312 
e
->
utf8
[
i
][0] = 1;

1313 
e
->
utf8
[
i
][1] = 0;

1315 i‡(
c
 < 0) {

1316 i‡(
c
 < -4)

1318 
e
->
n‹mÆ
.
ty≥
[
i
] = 
BT_LEAD2
 - (
c
 + 2);

1319 
e
->
utf8
[
i
][0] = 0;

1320 
e
->
utf16
[
i
] = 0;

1322 i‡(
c
 < 0x80) {

1323 i‡(
œtö1_ícodög
.
ty≥
[
c
] !
BT_OTHER


1324 && 
œtö1_ícodög
.
ty≥
[
c
] !
BT_NONXML


1325 && 
c
 !
i
)

1327 
e
->
n‹mÆ
.
ty≥
[
i
] = 
œtö1_ícodög
.ty≥[
c
];

1328 
e
->
utf8
[
i
][0] = 1;

1329 
e
->
utf8
[
i
][1] = ()
c
;

1330 
e
->
utf16
[
i
] = 
c
 == 0 ? 0xFFFF : c;

1332 i‡(
	`checkCh¨RefNumbî
(
c
) < 0) {

1333 
e
->
n‹mÆ
.
ty≥
[
i
] = 
BT_NONXML
;

1335 
e
->
utf16
[
i
] = 0xFFFF;

1336 
e
->
utf8
[
i
][0] = 1;

1337 
e
->
utf8
[
i
][1] = 0;

1340 i‡(
c
 > 0xFFFF)

1342 i‡(
	`UCS2_GET_NAMING
(
nm°πPages
, 
c
 >> 8, c & 0xff))

1343 
e
->
n‹mÆ
.
ty≥
[
i
] = 
BT_NMSTRT
;

1344 i‡(
	`UCS2_GET_NAMING
(
«mePages
, 
c
 >> 8, c & 0xff))

1345 
e
->
n‹mÆ
.
ty≥
[
i
] = 
BT_NAME
;

1347 
e
->
n‹mÆ
.
ty≥
[
i
] = 
BT_OTHER
;

1348 
e
->
utf8
[
i
][0] = ()
	`XmlUtf8Encode
(
c
,É->utf8[i] + 1);

1349 
e
->
utf16
[
i
] = 
c
;

1352 
e
->
u£rD©a
 = userData;

1353 
e
->
c⁄vît
 = convert;

1354 i‡(
c⁄vît
) {

1355 
e
->
n‹mÆ
.
isName2
 = 
unknown_isName
;

1356 
e
->
n‹mÆ
.
isName3
 = 
unknown_isName
;

1357 
e
->
n‹mÆ
.
isName4
 = 
unknown_isName
;

1358 
e
->
n‹mÆ
.
isNm°π2
 = 
unknown_isNm°π
;

1359 
e
->
n‹mÆ
.
isNm°π3
 = 
unknown_isNm°π
;

1360 
e
->
n‹mÆ
.
isNm°π4
 = 
unknown_isNm°π
;

1361 
e
->
n‹mÆ
.
isInvÆid2
 = 
unknown_isInvÆid
;

1362 
e
->
n‹mÆ
.
isInvÆid3
 = 
unknown_isInvÆid
;

1363 
e
->
n‹mÆ
.
isInvÆid4
 = 
unknown_isInvÆid
;

1365 
e
->
n‹mÆ
.
íc
.
utf8C⁄vît
 = 
unknown_toUtf8
;

1366 
e
->
n‹mÆ
.
íc
.
utf16C⁄vît
 = 
unknown_toUtf16
;

1367  &(
e
->
n‹mÆ
.
íc
);

1368 
	}
}

1373 
	mUNKNOWN_ENC
 = -1,

1374 
	mISO_8859_1_ENC
 = 0,

1375 
	mUS_ASCII_ENC
,

1376 
	mUTF_8_ENC
,

1377 
	mUTF_16_ENC
,

1378 
	mUTF_16BE_ENC
,

1379 
	mUTF_16LE_ENC
,

1381 
	mNO_ENC


1384 c⁄° 
	gKW_ISO_8859_1
[] = {

1385 
ASCII_I
, 
ASCII_S
, 
ASCII_O
, 
ASCII_MINUS
, 
ASCII_8
, ASCII_8, 
ASCII_5
, 
ASCII_9
, ASCII_MINUS, 
ASCII_1
, '\0'

1387 c⁄° 
	gKW_US_ASCII
[] = {

1388 
ASCII_U
, 
ASCII_S
, 
ASCII_MINUS
, 
ASCII_A
, ASCII_S, 
ASCII_C
, 
ASCII_I
, ASCII_I, '\0'

1390 c⁄° 
	gKW_UTF_8
[] = {

1391 
ASCII_U
, 
ASCII_T
, 
ASCII_F
, 
ASCII_MINUS
, 
ASCII_8
, '\0'

1393 c⁄° 
	gKW_UTF_16
[] = {

1394 
ASCII_U
, 
ASCII_T
, 
ASCII_F
, 
ASCII_MINUS
, 
ASCII_1
, 
ASCII_6
, '\0'

1396 c⁄° 
	gKW_UTF_16BE
[] = {

1397 
ASCII_U
, 
ASCII_T
, 
ASCII_F
, 
ASCII_MINUS
, 
ASCII_1
, 
ASCII_6
, 
ASCII_B
, 
ASCII_E
, '\0'

1399 c⁄° 
	gKW_UTF_16LE
[] = {

1400 
ASCII_U
, 
ASCII_T
, 
ASCII_F
, 
ASCII_MINUS
, 
ASCII_1
, 
ASCII_6
, 
ASCII_L
, 
ASCII_E
, '\0'

1404 
	$gëEncodögIndex
(c⁄° *
«me
)

1406 c⁄° *
ícodögNames
[] = {

1407 
KW_ISO_8859_1
,

1408 
KW_US_ASCII
,

1409 
KW_UTF_8
,

1410 
KW_UTF_16
,

1411 
KW_UTF_16BE
,

1412 
KW_UTF_16LE
,

1414 
i
;

1415 i‡(
«me
 == 0)

1416  
NO_ENC
;

1417 
i
 = 0; i < (
ícodögNames
)/(encodingNames[0]); i++)

1418 i‡(
	`°ªqci
(
«me
, 
ícodögNames
[
i
]))

1419  
i
;

1420  
UNKNOWN_ENC
;

1421 
	}
}

1426 
	#INIT_ENC_INDEX
(
íc
Ë(()”nc)->
öôEnc
.
isUtf16
)

	)

1427 
	#SET_INIT_ENC_INDEX
(
íc
, 
i
Ë(”nc)->
öôEnc
.
isUtf16
 = ()i)

	)

1438 
	$öôSˇn
(c⁄° 
ENCODING
 **
ícodögTabÀ
,

1439 c⁄° 
INIT_ENCODING
 *
íc
,

1440 
°©e
,

1441 c⁄° *
±r
,

1442 c⁄° *
íd
,

1443 c⁄° **
√xtTokPå
)

1445 c⁄° 
ENCODING
 **
ícPå
;

1447 i‡(
±r
 =
íd
)

1448  
XML_TOK_NONE
;

1449 
ícPå
 = 
íc
->encPtr;

1450 i‡(
±r
 + 1 =
íd
) {

1452 #i‚de‡
XML_DTD


1454 i‡(
°©e
 !
XML_CONTENT_STATE
)

1455  
XML_TOK_PARTIAL
;

1459 
	`INIT_ENC_INDEX
(
íc
)) {

1460 
UTF_16_ENC
:

1461 
UTF_16LE_ENC
:

1462 
UTF_16BE_ENC
:

1463  
XML_TOK_PARTIAL
;

1465 ()*
±r
) {

1469 i‡(
	`INIT_ENC_INDEX
(
íc
Ë=
ISO_8859_1_ENC


1470 && 
°©e
 =
XML_CONTENT_STATE
)

1475  
XML_TOK_PARTIAL
;

1479 (()
±r
[0] << 8) | ()ptr[1]) {

1481 i‡(
	`INIT_ENC_INDEX
(
íc
Ë=
ISO_8859_1_ENC


1482 && 
°©e
 =
XML_CONTENT_STATE
)

1484 *
√xtTokPå
 = 
±r
 + 2;

1485 *
ícPå
 = 
ícodögTabÀ
[
UTF_16BE_ENC
];

1486  
XML_TOK_BOM
;

1489 i‡((
	`INIT_ENC_INDEX
(
íc
Ë=
UTF_16BE_ENC


1490 || 
	`INIT_ENC_INDEX
(
íc
Ë=
UTF_16_ENC
)

1491 && 
°©e
 =
XML_CONTENT_STATE
)

1493 *
ícPå
 = 
ícodögTabÀ
[
UTF_16LE_ENC
];

1494  
	`XmlTok
(*
ícPå
, 
°©e
, 
±r
, 
íd
, 
√xtTokPå
);

1496 i‡(
	`INIT_ENC_INDEX
(
íc
Ë=
ISO_8859_1_ENC


1497 && 
°©e
 =
XML_CONTENT_STATE
)

1499 *
√xtTokPå
 = 
±r
 + 2;

1500 *
ícPå
 = 
ícodögTabÀ
[
UTF_16LE_ENC
];

1501  
XML_TOK_BOM
;

1509 i‡(
°©e
 =
XML_CONTENT_STATE
) {

1510 
e
 = 
	`INIT_ENC_INDEX
(
íc
);

1511 i‡(
e
 =
ISO_8859_1_ENC
 ||É =
UTF_16BE_ENC
 ||É =
UTF_16LE_ENC
 ||É =
UTF_16_ENC
)

1514 i‡(
±r
 + 2 =
íd
)

1515  
XML_TOK_PARTIAL
;

1516 i‡(()
±r
[2] == 0xBF) {

1517 *
ícPå
 = 
ícodögTabÀ
[
UTF_8_ENC
];

1518  
XML_TOK_BOM
;

1522 i‡(
±r
[0] == '\0') {

1527 i‡(
°©e
 =
XML_CONTENT_STATE
 && 
	`INIT_ENC_INDEX
(
íc
Ë=
UTF_16LE_ENC
)

1529 *
ícPå
 = 
ícodögTabÀ
[
UTF_16BE_ENC
];

1530  
	`XmlTok
(*
ícPå
, 
°©e
, 
±r
, 
íd
, 
√xtTokPå
);

1532 i‡(
±r
[1] == '\0') {

1541 i‡(
°©e
 =
XML_CONTENT_STATE
)

1543 *
ícPå
 = 
ícodögTabÀ
[
UTF_16LE_ENC
];

1544  
	`XmlTok
(*
ícPå
, 
°©e
, 
±r
, 
íd
, 
√xtTokPå
);

1549 *
ícPå
 = 
ícodögTabÀ
[
	`INIT_ENC_INDEX
(
íc
)];

1550  
	`XmlTok
(*
ícPå
, 
°©e
, 
±r
, 
íd
, 
√xtTokPå
);

1551 
	}
}

1554 
	#NS
(
x
Ë
	)
x

1555 
	#ns
(
x
Ë
	)
x

1556 
	~"xm…ok_ns.c
"

1557 #unde‡
NS


1558 #unde‡
ns


1560 #ifde‡
XML_NS


1562 
	#NS
(
x
Ëx ## 
NS


	)

1563 
	#ns
(
x
Ëx ## 
_ns


	)

1565 
	~"xm…ok_ns.c
"

1567 #unde‡
NS


1568 #unde‡
ns


1570 
ENCODING
 *

1571 
XmlInôUnknownEncodögNS
(*
mem
,

1572 *
èbÀ
,

1573 (*
c⁄vît
)(*
u£rD©a
, c⁄° *
p
),

1574 *
u£rD©a
)

1576 
ENCODING
 *
íc
 = 
	`XmlInôUnknownEncodög
(
mem
, 
èbÀ
, 
c⁄vît
, 
u£rD©a
);

1577 i‡(
íc
)

1578 ((
n‹mÆ_ícodög
 *)
íc
)->
ty≥
[
ASCII_COLON
] = 
BT_COLON
;

1579  
íc
;

1580 
	}
}

	@modules/expat/xmltok/xmltok.h

31 #i‚de‡
XmlTok_INCLUDED


32 
	#XmlTok_INCLUDED
 1

	)

34 #ifde‡
__˝lu•lus


38 #i‚de‡
XMLTOKAPI


39 
	#XMLTOKAPI


	)

43 
	#XML_TOK_TRAILING_RSQB
 -5

	)

46 
	#XML_TOK_NONE
 -4

	)

47 
	#XML_TOK_TRAILING_CR
 -3

	)

49 
	#XML_TOK_PARTIAL_CHAR
 -2

	)

50 
	#XML_TOK_PARTIAL
 -1

	)

51 
	#XML_TOK_INVALID
 0

	)

56 
	#XML_TOK_START_TAG_WITH_ATTS
 1

	)

57 
	#XML_TOK_START_TAG_NO_ATTS
 2

	)

58 
	#XML_TOK_EMPTY_ELEMENT_WITH_ATTS
 3

	)

59 
	#XML_TOK_EMPTY_ELEMENT_NO_ATTS
 4

	)

60 
	#XML_TOK_END_TAG
 5

	)

61 
	#XML_TOK_DATA_CHARS
 6

	)

62 
	#XML_TOK_DATA_NEWLINE
 7

	)

63 
	#XML_TOK_CDATA_SECT_OPEN
 8

	)

64 
	#XML_TOK_ENTITY_REF
 9

	)

65 
	#XML_TOK_CHAR_REF
 10

	)

68 
	#XML_TOK_PI
 11

	)

69 
	#XML_TOK_XML_DECL
 12

	)

70 
	#XML_TOK_COMMENT
 13

	)

71 
	#XML_TOK_BOM
 14

	)

74 
	#XML_TOK_PROLOG_S
 15

	)

75 
	#XML_TOK_DECL_OPEN
 16

	)

76 
	#XML_TOK_DECL_CLOSE
 17

	)

77 
	#XML_TOK_NAME
 18

	)

78 
	#XML_TOK_NMTOKEN
 19

	)

79 
	#XML_TOK_POUND_NAME
 20

	)

80 
	#XML_TOK_OR
 21

	)

81 
	#XML_TOK_PERCENT
 22

	)

82 
	#XML_TOK_OPEN_PAREN
 23

	)

83 
	#XML_TOK_CLOSE_PAREN
 24

	)

84 
	#XML_TOK_OPEN_BRACKET
 25

	)

85 
	#XML_TOK_CLOSE_BRACKET
 26

	)

86 
	#XML_TOK_LITERAL
 27

	)

87 
	#XML_TOK_PARAM_ENTITY_REF
 28

	)

88 
	#XML_TOK_INSTANCE_START
 29

	)

91 
	#XML_TOK_NAME_QUESTION
 30

	)

92 
	#XML_TOK_NAME_ASTERISK
 31

	)

93 
	#XML_TOK_NAME_PLUS
 32

	)

94 
	#XML_TOK_COND_SECT_OPEN
 33

	)

95 
	#XML_TOK_COND_SECT_CLOSE
 34

	)

96 
	#XML_TOK_CLOSE_PAREN_QUESTION
 35

	)

97 
	#XML_TOK_CLOSE_PAREN_ASTERISK
 36

	)

98 
	#XML_TOK_CLOSE_PAREN_PLUS
 37

	)

99 
	#XML_TOK_COMMA
 38

	)

102 
	#XML_TOK_ATTRIBUTE_VALUE_S
 39

	)

105 
	#XML_TOK_CDATA_SECT_CLOSE
 40

	)

109 
	#XML_TOK_PREFIXED_NAME
 41

	)

111 #ifde‡
XML_DTD


112 
	#XML_TOK_IGNORE_SECT
 42

	)

115 #ifde‡
XML_DTD


116 
	#XML_N_STATES
 4

	)

118 
	#XML_N_STATES
 3

	)

121 
	#XML_PROLOG_STATE
 0

	)

122 
	#XML_CONTENT_STATE
 1

	)

123 
	#XML_CDATA_SECTION_STATE
 2

	)

124 #ifde‡
XML_DTD


125 
	#XML_IGNORE_SECTION_STATE
 3

	)

128 
	#XML_N_LITERAL_TYPES
 2

	)

129 
	#XML_ATTRIBUTE_VALUE_LITERAL
 0

	)

130 
	#XML_ENTITY_VALUE_LITERAL
 1

	)

133 
	#XML_UTF8_ENCODE_MAX
 4

	)

135 
	#XML_UTF16_ENCODE_MAX
 2

	)

137 
	sposôi⁄
 {

139 
löeNumbî
;

140 
cﬁumnNumbî
;

141 } 
	tPOSITION
;

144 c⁄° *
«me
;

145 c⁄° *
vÆuePå
;

146 c⁄° *
vÆueEnd
;

147 
n‹mÆized
;

148 } 
	tATTRIBUTE
;

150 
ícodög
;

151 
ícodög
 
	tENCODING
;

153 
	sícodög
 {

154 (*
sˇ¬îs
[
XML_N_STATES
])(c⁄° 
ENCODING
 *,

158 (*
lôîÆSˇ¬îs
[
XML_N_LITERAL_TYPES
])(c⁄° 
ENCODING
 *,

162 (*
ßmeName
)(c⁄° 
ENCODING
 *,

164 (*
«meM©chesAscii
)(c⁄° 
ENCODING
 *,

166 (*
«meLígth
)(c⁄° 
ENCODING
 *, const *);

167 c⁄° *(*
skùS
)(c⁄° 
ENCODING
 *, const *);

168 (*
gëAâs
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
,

169 
©tsMax
, 
ATTRIBUTE
 *
©ts
);

170 (*
ch¨RefNumbî
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
);

171 (*
¥edeföedE¡ôyName
)(c⁄° 
ENCODING
 *, const *, const *);

172 (*
upd©ePosôi⁄
)(c⁄° 
ENCODING
 *,

173 c⁄° *
±r
,

174 c⁄° *
íd
,

175 
POSITION
 *);

176 (*
isPublicId
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
, c⁄° *
íd
,

177 c⁄° **
badPå
);

178 (*
utf8C⁄vît
)(c⁄° 
ENCODING
 *
íc
,

179 c⁄° **
‰omP
,

180 c⁄° *
‰omLim
,

181 **
toP
,

182 c⁄° *
toLim
);

183 (*
utf16C⁄vît
)(c⁄° 
ENCODING
 *
íc
,

184 c⁄° **
‰omP
,

185 c⁄° *
‰omLim
,

186 **
toP
,

187 c⁄° *
toLim
);

188 
möByãsPîCh¨
;

189 
isUtf8
;

190 
isUtf16
;

214 
	#XmlTok
(
íc
, 
°©e
, 
±r
, 
íd
, 
√xtTokPå
) \

215 (((
íc
)->
sˇ¬îs
[
°©e
])”nc, 
±r
, 
íd
, 
√xtTokPå
))

	)

217 
	#XmlPrﬁogTok
(
íc
, 
±r
, 
íd
, 
√xtTokPå
) \

218 
	`XmlTok
(
íc
, 
XML_PROLOG_STATE
, 
±r
, 
íd
, 
√xtTokPå
)

	)

220 
	#XmlC⁄ã¡Tok
(
íc
, 
±r
, 
íd
, 
√xtTokPå
) \

221 
	`XmlTok
(
íc
, 
XML_CONTENT_STATE
, 
±r
, 
íd
, 
√xtTokPå
)

	)

223 
	#XmlCd©aSe˘i⁄Tok
(
íc
, 
±r
, 
íd
, 
√xtTokPå
) \

224 
	`XmlTok
(
íc
, 
XML_CDATA_SECTION_STATE
, 
±r
, 
íd
, 
√xtTokPå
)

	)

226 #ifde‡
XML_DTD


228 
	#XmlIgn‹eSe˘i⁄Tok
(
íc
, 
±r
, 
íd
, 
√xtTokPå
) \

229 
	`XmlTok
(
íc
, 
XML_IGNORE_SECTION_STATE
, 
±r
, 
íd
, 
√xtTokPå
)

	)

236 
	#XmlLôîÆTok
(
íc
, 
lôîÆTy≥
, 
±r
, 
íd
, 
√xtTokPå
) \

237 (((
íc
)->
lôîÆSˇ¬îs
[
lôîÆTy≥
])”nc, 
±r
, 
íd
, 
√xtTokPå
))

	)

239 
	#XmlAâribuãVÆueTok
(
íc
, 
±r
, 
íd
, 
√xtTokPå
) \

240 
	`XmlLôîÆTok
(
íc
, 
XML_ATTRIBUTE_VALUE_LITERAL
, 
±r
, 
íd
, 
√xtTokPå
)

	)

242 
	#XmlE¡ôyVÆueTok
(
íc
, 
±r
, 
íd
, 
√xtTokPå
) \

243 
	`XmlLôîÆTok
(
íc
, 
XML_ENTITY_VALUE_LITERAL
, 
±r
, 
íd
, 
√xtTokPå
)

	)

245 
	#XmlSameName
(
íc
, 
±r1
, 
±r2
Ë((”nc)->
ßmeName
)”nc,Öå1,Öå2))

	)

247 
	#XmlNameM©chesAscii
(
íc
, 
±r1
, 
íd1
, 
±r2
) \

248 (((
íc
)->
«meM©chesAscii
)”nc, 
±r1
, 
íd1
, 
±r2
))

	)

250 
	#XmlNameLígth
(
íc
, 
±r
) \

251 (((
íc
)->
«meLígth
)”nc, 
±r
))

	)

253 
	#XmlSkùS
(
íc
, 
±r
) \

254 (((
íc
)->
skùS
)”nc, 
±r
))

	)

256 
	#XmlGëAâribuãs
(
íc
, 
±r
, 
©tsMax
, 
©ts
) \

257 (((
íc
)->
gëAâs
)”nc, 
±r
, 
©tsMax
, 
©ts
))

	)

259 
	#XmlCh¨RefNumbî
(
íc
, 
±r
) \

260 (((
íc
)->
ch¨RefNumbî
)”nc, 
±r
))

	)

262 
	#XmlPªdeföedE¡ôyName
(
íc
, 
±r
, 
íd
) \

263 (((
íc
)->
¥edeföedE¡ôyName
)”nc, 
±r
, 
íd
))

	)

265 
	#XmlUpd©ePosôi⁄
(
íc
, 
±r
, 
íd
, 
pos
) \

266 (((
íc
)->
upd©ePosôi⁄
)”nc, 
±r
, 
íd
, 
pos
))

	)

268 
	#XmlIsPublicId
(
íc
, 
±r
, 
íd
, 
badPå
) \

269 (((
íc
)->
isPublicId
)”nc, 
±r
, 
íd
, 
badPå
))

	)

271 
	#XmlUtf8C⁄vît
(
íc
, 
‰omP
, 
‰omLim
, 
toP
, 
toLim
) \

272 (((
íc
)->
utf8C⁄vît
)”nc, 
‰omP
, 
‰omLim
, 
toP
, 
toLim
))

	)

274 
	#XmlUtf16C⁄vît
(
íc
, 
‰omP
, 
‰omLim
, 
toP
, 
toLim
) \

275 (((
íc
)->
utf16C⁄vît
)”nc, 
‰omP
, 
‰omLim
, 
toP
, 
toLim
))

	)

278 
ENCODING
 
öôEnc
;

279 c⁄° 
ENCODING
 **
ícPå
;

280 } 
	tINIT_ENCODING
;

282 
XMLTOKAPI
 
XmlP¨£XmlDe˛
(
isGíîÆTextE¡ôy
,

283 c⁄° 
ENCODING
 *
íc
,

284 c⁄° *
±r
,

285 c⁄° *
íd
,

286 c⁄° **
badPå
,

287 c⁄° **
vîsi⁄På
,

288 c⁄° **
ícodögNamePå
,

289 c⁄° 
ENCODING
 **
«medEncodögPå
,

290 *
°™dÆ⁄ePå
);

292 
XMLTOKAPI
 
XmlInôEncodög
(
INIT_ENCODING
 *, c⁄° 
ENCODING
 **, c⁄° *
«me
);

293 c⁄° 
ENCODING
 
XMLTOKAPI
 *
XmlGëUtf8I¡î«lEncodög
();

294 c⁄° 
ENCODING
 
XMLTOKAPI
 *
XmlGëUtf16I¡î«lEncodög
();

295 
XMLTOKAPI
 
XmlUtf8Encode
(
ch¨Numbî
, *
buf
);

296 
XMLTOKAPI
 
XmlUtf16Encode
(
ch¨Numbî
, *
buf
);

298 
XMLTOKAPI
 
XmlSizeOfUnknownEncodög
();

299 
ENCODING
 
XMLTOKAPI
 *

300 
XmlInôUnknownEncodög
(*
mem
,

301 *
èbÀ
,

302 (*
c⁄v
)(*
u£rD©a
, c⁄° *
p
),

303 *
u£rD©a
);

305 
XMLTOKAPI
 
XmlP¨£XmlDe˛NS
(
isGíîÆTextE¡ôy
,

306 c⁄° 
ENCODING
 *
íc
,

307 c⁄° *
±r
,

308 c⁄° *
íd
,

309 c⁄° **
badPå
,

310 c⁄° **
vîsi⁄På
,

311 c⁄° **
ícodögNamePå
,

312 c⁄° 
ENCODING
 **
«medEncodögPå
,

313 *
°™dÆ⁄ePå
);

314 
XMLTOKAPI
 
XmlInôEncodögNS
(
INIT_ENCODING
 *, c⁄° 
ENCODING
 **, c⁄° *
«me
);

315 c⁄° 
ENCODING
 
XMLTOKAPI
 *
XmlGëUtf8I¡î«lEncodögNS
();

316 c⁄° 
ENCODING
 
XMLTOKAPI
 *
XmlGëUtf16I¡î«lEncodögNS
();

317 
ENCODING
 
XMLTOKAPI
 *

318 
XmlInôUnknownEncodögNS
(*
mem
,

319 *
èbÀ
,

320 (*
c⁄v
)(*
u£rD©a
, c⁄° *
p
),

321 *
u£rD©a
);

322 #ifde‡
__˝lu•lus


	@modules/expat/xmltok/xmltok_impl.c

31 #i‚de‡
IS_INVALID_CHAR


32 
	#IS_INVALID_CHAR
(
íc
, 
±r
, 
n
Ë(0)

	)

35 
	#INVALID_LEAD_CASE
(
n
, 
±r
, 
√xtTokPå
) \

36 
BT_LEAD
 ## 
n
: \

37 i‡(
íd
 - 
±r
 < 
n
) \

38  
XML_TOK_PARTIAL_CHAR
; \

39 i‡(
	`IS_INVALID_CHAR
(
íc
, 
±r
, 
n
)) { \

40 *(
√xtTokPå
Ë(
±r
); \

41  
XML_TOK_INVALID
; \

43 
±r
 +
n
; \

44 ;

	)

46 
	#INVALID_CASES
(
±r
, 
√xtTokPå
) \

47 
	`INVALID_LEAD_CASE
(2, 
±r
, 
√xtTokPå
) \

48 
	`INVALID_LEAD_CASE
(3, 
±r
, 
√xtTokPå
) \

49 
	`INVALID_LEAD_CASE
(4, 
±r
, 
√xtTokPå
) \

50 
BT_NONXML
: \

51 
BT_MALFORM
: \

52 
BT_TRAIL
: \

53 *(
√xtTokPå
Ë(
±r
); \

54  
XML_TOK_INVALID
;

	)

56 
	#CHECK_NAME_CASE
(
n
, 
íc
, 
±r
, 
íd
, 
√xtTokPå
) \

57 
BT_LEAD
 ## 
n
: \

58 i‡(
íd
 - 
±r
 < 
n
) \

59  
XML_TOK_PARTIAL_CHAR
; \

60 i‡(!
	`IS_NAME_CHAR
(
íc
, 
±r
, 
n
)) { \

61 *
√xtTokPå
 = 
±r
; \

62  
XML_TOK_INVALID
; \

64 
±r
 +
n
; \

65 ;

	)

67 
	#CHECK_NAME_CASES
(
íc
, 
±r
, 
íd
, 
√xtTokPå
) \

68 
BT_NONASCII
: \

69 i‡(!
	`IS_NAME_CHAR_MINBPC
(
íc
, 
±r
)) { \

70 *
√xtTokPå
 = 
±r
; \

71  
XML_TOK_INVALID
; \

73 
BT_NMSTRT
: \

74 
BT_HEX
: \

75 
BT_DIGIT
: \

76 
BT_NAME
: \

77 
BT_MINUS
: \

78 
±r
 +
	`MINBPC
(
íc
); \

80 
	`CHECK_NAME_CASE
(2, 
íc
, 
±r
, 
íd
, 
√xtTokPå
) \

81 
	`CHECK_NAME_CASE
(3, 
íc
, 
±r
, 
íd
, 
√xtTokPå
) \

82 
	`CHECK_NAME_CASE
(4, 
íc
, 
±r
, 
íd
, 
√xtTokPå
)

	)

84 
	#CHECK_NMSTRT_CASE
(
n
, 
íc
, 
±r
, 
íd
, 
√xtTokPå
) \

85 
BT_LEAD
 ## 
n
: \

86 i‡(
íd
 - 
±r
 < 
n
) \

87  
XML_TOK_PARTIAL_CHAR
; \

88 i‡(!
	`IS_NMSTRT_CHAR
(
íc
, 
±r
, 
n
)) { \

89 *
√xtTokPå
 = 
±r
; \

90  
XML_TOK_INVALID
; \

92 
±r
 +
n
; \

93 ;

	)

95 
	#CHECK_NMSTRT_CASES
(
íc
, 
±r
, 
íd
, 
√xtTokPå
) \

96 
BT_NONASCII
: \

97 i‡(!
	`IS_NMSTRT_CHAR_MINBPC
(
íc
, 
±r
)) { \

98 *
√xtTokPå
 = 
±r
; \

99  
XML_TOK_INVALID
; \

101 
BT_NMSTRT
: \

102 
BT_HEX
: \

103 
±r
 +
	`MINBPC
(
íc
); \

105 
	`CHECK_NMSTRT_CASE
(2, 
íc
, 
±r
, 
íd
, 
√xtTokPå
) \

106 
	`CHECK_NMSTRT_CASE
(3, 
íc
, 
±r
, 
íd
, 
√xtTokPå
) \

107 
	`CHECK_NMSTRT_CASE
(4, 
íc
, 
±r
, 
íd
, 
√xtTokPå
)

	)

109 #i‚de‡
PREFIX


110 
	#PREFIX
(
idít
Ë
	)
ident

116 
	$PREFIX
(
sˇnCommít
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
, c⁄° *
íd
,

117 c⁄° **
√xtTokPå
)

119 i‡(
±r
 !
íd
) {

120 i‡(!
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_MINUS
)) {

121 *
√xtTokPå
 = 
±r
;

122  
XML_TOK_INVALID
;

124 
±r
 +
	`MINBPC
(
íc
);

125 
±r
 !
íd
) {

126 
	`BYTE_TYPE
(
íc
, 
±r
)) {

127 
	`INVALID_CASES
(
±r
, 
√xtTokPå
)

128 
BT_MINUS
:

129 i‡((
±r
 +
	`MINBPC
(
íc
)Ë=
íd
)

130  
XML_TOK_PARTIAL
;

131 i‡(
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_MINUS
)) {

132 i‡((
±r
 +
	`MINBPC
(
íc
)Ë=
íd
)

133  
XML_TOK_PARTIAL
;

134 i‡(!
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_GT
)) {

135 *
√xtTokPå
 = 
±r
;

136  
XML_TOK_INVALID
;

138 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

139  
XML_TOK_COMMENT
;

143 
±r
 +
	`MINBPC
(
íc
);

148  
XML_TOK_PARTIAL
;

149 
	}
}

154 
	$PREFIX
(
sˇnDe˛
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
, c⁄° *
íd
,

155 c⁄° **
√xtTokPå
)

157 i‡(
±r
 =
íd
)

158  
XML_TOK_PARTIAL
;

159 
	`BYTE_TYPE
(
íc
, 
±r
)) {

160 
BT_MINUS
:

161  
	`PREFIX
(
sˇnCommít
)(
íc
, 
±r
 + 
	`MINBPC
”nc), 
íd
, 
√xtTokPå
);

162 
BT_LSQB
:

163 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

164  
XML_TOK_COND_SECT_OPEN
;

165 
BT_NMSTRT
:

166 
BT_HEX
:

167 
±r
 +
	`MINBPC
(
íc
);

170 *
√xtTokPå
 = 
±r
;

171  
XML_TOK_INVALID
;

173 
±r
 !
íd
) {

174 
	`BYTE_TYPE
(
íc
, 
±r
)) {

175 
BT_PERCNT
:

176 i‡(
±r
 + 
	`MINBPC
(
íc
Ë=
íd
)

177  
XML_TOK_PARTIAL
;

179 
	`BYTE_TYPE
(
íc
, 
±r
 + 
	`MINBPC
(enc))) {

180 
BT_S
: 
BT_CR
: 
BT_LF
: 
BT_PERCNT
:

181 *
√xtTokPå
 = 
±r
;

182  
XML_TOK_INVALID
;

185 
BT_S
: 
BT_CR
: 
BT_LF
:

186 *
√xtTokPå
 = 
±r
;

187  
XML_TOK_DECL_OPEN
;

188 
BT_NMSTRT
:

189 
BT_HEX
:

190 
±r
 +
	`MINBPC
(
íc
);

193 *
√xtTokPå
 = 
±r
;

194  
XML_TOK_INVALID
;

197  
XML_TOK_PARTIAL
;

198 
	}
}

201 
	$PREFIX
(
checkPiT¨gë
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
, c⁄° *
íd
, *
tokPå
)

203 
uµî
 = 0;

204 *
tokPå
 = 
XML_TOK_PI
;

205 i‡(
íd
 - 
±r
 !
	`MINBPC
(
íc
)*3)

207 
	`BYTE_TO_ASCII
(
íc
, 
±r
)) {

208 
ASCII_x
:

210 
ASCII_X
:

211 
uµî
 = 1;

216 
±r
 +
	`MINBPC
(
íc
);

217 
	`BYTE_TO_ASCII
(
íc
, 
±r
)) {

218 
ASCII_m
:

220 
ASCII_M
:

221 
uµî
 = 1;

226 
±r
 +
	`MINBPC
(
íc
);

227 
	`BYTE_TO_ASCII
(
íc
, 
±r
)) {

228 
ASCII_l
:

230 
ASCII_L
:

231 
uµî
 = 1;

236 i‡(
uµî
)

238 *
tokPå
 = 
XML_TOK_XML_DECL
;

240 
	}
}

245 
	$PREFIX
(
sˇnPi
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
, c⁄° *
íd
,

246 c⁄° **
√xtTokPå
)

248 
tok
;

249 c⁄° *
èrgë
 = 
±r
;

250 i‡(
±r
 =
íd
)

251  
XML_TOK_PARTIAL
;

252 
	`BYTE_TYPE
(
íc
, 
±r
)) {

253 
	`CHECK_NMSTRT_CASES
(
íc
, 
±r
, 
íd
, 
√xtTokPå
)

255 *
√xtTokPå
 = 
±r
;

256  
XML_TOK_INVALID
;

258 
±r
 !
íd
) {

259 
	`BYTE_TYPE
(
íc
, 
±r
)) {

260 
	`CHECK_NAME_CASES
(
íc
, 
±r
, 
íd
, 
√xtTokPå
)

261 
BT_S
: 
BT_CR
: 
BT_LF
:

262 i‡(!
	`PREFIX
(
checkPiT¨gë
)(
íc
, 
èrgë
, 
±r
, &
tok
)) {

263 *
√xtTokPå
 = 
±r
;

264  
XML_TOK_INVALID
;

266 
±r
 +
	`MINBPC
(
íc
);

267 
±r
 !
íd
) {

268 
	`BYTE_TYPE
(
íc
, 
±r
)) {

269 
	`INVALID_CASES
(
±r
, 
√xtTokPå
)

270 
BT_QUEST
:

271 
±r
 +
	`MINBPC
(
íc
);

272 i‡(
±r
 =
íd
)

273  
XML_TOK_PARTIAL
;

274 i‡(
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_GT
)) {

275 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

276  
tok
;

280 
±r
 +
	`MINBPC
(
íc
);

284  
XML_TOK_PARTIAL
;

285 
BT_QUEST
:

286 i‡(!
	`PREFIX
(
checkPiT¨gë
)(
íc
, 
èrgë
, 
±r
, &
tok
)) {

287 *
√xtTokPå
 = 
±r
;

288  
XML_TOK_INVALID
;

290 
±r
 +
	`MINBPC
(
íc
);

291 i‡(
±r
 =
íd
)

292  
XML_TOK_PARTIAL
;

293 i‡(
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_GT
)) {

294 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

295  
tok
;

299 *
√xtTokPå
 = 
±r
;

300  
XML_TOK_INVALID
;

303  
XML_TOK_PARTIAL
;

304 
	}
}

308 
	$PREFIX
(
sˇnCd©aSe˘i⁄
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
, c⁄° *
íd
,

309 c⁄° **
√xtTokPå
)

311 c⁄° 
CDATA_LSQB
[] = { 
ASCII_C
, 
ASCII_D
, 
ASCII_A
, 
ASCII_T
, ASCII_A, 
ASCII_LSQB
 };

312 
i
;

314 i‡(
íd
 - 
±r
 < 6 * 
	`MINBPC
(
íc
))

315  
XML_TOK_PARTIAL
;

316 
i
 = 0; i < 6; i++, 
±r
 +
	`MINBPC
(
íc
)) {

317 i‡(!
	`CHAR_MATCHES
(
íc
, 
±r
, 
CDATA_LSQB
[
i
])) {

318 *
√xtTokPå
 = 
±r
;

319  
XML_TOK_INVALID
;

322 *
√xtTokPå
 = 
±r
;

323  
XML_TOK_CDATA_SECT_OPEN
;

324 
	}
}

327 
	$PREFIX
(
cd©aSe˘i⁄Tok
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
, c⁄° *
íd
,

328 c⁄° **
√xtTokPå
)

330 i‡(
±r
 =
íd
)

331  
XML_TOK_NONE
;

332 i‡(
	`MINBPC
(
íc
) > 1) {

333 
size_t
 
n
 = 
íd
 - 
±r
;

334 i‡(
n
 & (
	`MINBPC
(
íc
) - 1)) {

335 
n
 &~(
	`MINBPC
(
íc
) - 1);

336 i‡(
n
 == 0)

337  
XML_TOK_PARTIAL
;

338 
íd
 = 
±r
 + 
n
;

341 
	`BYTE_TYPE
(
íc
, 
±r
)) {

342 
BT_RSQB
:

343 
±r
 +
	`MINBPC
(
íc
);

344 i‡(
±r
 =
íd
)

345  
XML_TOK_PARTIAL
;

346 i‡(!
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_RSQB
))

348 
±r
 +
	`MINBPC
(
íc
);

349 i‡(
±r
 =
íd
)

350  
XML_TOK_PARTIAL
;

351 i‡(!
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_GT
)) {

352 
±r
 -
	`MINBPC
(
íc
);

355 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

356  
XML_TOK_CDATA_SECT_CLOSE
;

357 
BT_CR
:

358 
±r
 +
	`MINBPC
(
íc
);

359 i‡(
±r
 =
íd
)

360  
XML_TOK_PARTIAL
;

361 i‡(
	`BYTE_TYPE
(
íc
, 
±r
Ë=
BT_LF
)

362 
±r
 +
	`MINBPC
(
íc
);

363 *
√xtTokPå
 = 
±r
;

364  
XML_TOK_DATA_NEWLINE
;

365 
BT_LF
:

366 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

367  
XML_TOK_DATA_NEWLINE
;

368 
	`INVALID_CASES
(
±r
, 
√xtTokPå
)

370 
±r
 +
	`MINBPC
(
íc
);

373 
±r
 !
íd
) {

374 
	`BYTE_TYPE
(
íc
, 
±r
)) {

375 
	#LEAD_CASE
(
n
) \

376 
BT_LEAD
 ## 
n
: \

377 i‡(
íd
 - 
±r
 < 
n
 || 
	`IS_INVALID_CHAR
(
íc
,Ötr,Ç)) { \

378 *
√xtTokPå
 = 
±r
; \

379  
XML_TOK_DATA_CHARS
; \

381 
±r
 +
n
; \

382 ;

	)

383 
	`LEAD_CASE
(2) LEAD_CASE(3) LEAD_CASE(4)

384 #unde‡
LEAD_CASE


385 
BT_NONXML
:

386 
BT_MALFORM
:

387 
BT_TRAIL
:

388 
BT_CR
:

389 
BT_LF
:

390 
BT_RSQB
:

391 *
√xtTokPå
 = 
±r
;

392  
XML_TOK_DATA_CHARS
;

394 
±r
 +
	`MINBPC
(
íc
);

398 *
√xtTokPå
 = 
±r
;

399  
XML_TOK_DATA_CHARS
;

400 
	}
}

405 
	$PREFIX
(
sˇnEndTag
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
, c⁄° *
íd
,

406 c⁄° **
√xtTokPå
)

408 i‡(
±r
 =
íd
)

409  
XML_TOK_PARTIAL
;

410 
	`BYTE_TYPE
(
íc
, 
±r
)) {

411 
	`CHECK_NMSTRT_CASES
(
íc
, 
±r
, 
íd
, 
√xtTokPå
)

413 *
√xtTokPå
 = 
±r
;

414  
XML_TOK_INVALID
;

416 
±r
 !
íd
) {

417 
	`BYTE_TYPE
(
íc
, 
±r
)) {

418 
	`CHECK_NAME_CASES
(
íc
, 
±r
, 
íd
, 
√xtTokPå
)

419 
BT_S
: 
BT_CR
: 
BT_LF
:

420 
±r
 +
	`MINBPC
(
íc
);Öå !
íd
;Ötr += MINBPC(enc)) {

421 
	`BYTE_TYPE
(
íc
, 
±r
)) {

422 
BT_S
: 
BT_CR
: 
BT_LF
:

424 
BT_GT
:

425 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

426  
XML_TOK_END_TAG
;

428 *
√xtTokPå
 = 
±r
;

429  
XML_TOK_INVALID
;

432  
XML_TOK_PARTIAL
;

433 #ifde‡
XML_NS


434 
BT_COLON
:

436 
±r
 +
	`MINBPC
(
íc
);

439 
BT_GT
:

440 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

441  
XML_TOK_END_TAG
;

443 *
√xtTokPå
 = 
±r
;

444  
XML_TOK_INVALID
;

447  
XML_TOK_PARTIAL
;

448 
	}
}

453 
	$PREFIX
(
sˇnHexCh¨Ref
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
, c⁄° *
íd
,

454 c⁄° **
√xtTokPå
)

456 i‡(
±r
 !
íd
) {

457 
	`BYTE_TYPE
(
íc
, 
±r
)) {

458 
BT_DIGIT
:

459 
BT_HEX
:

462 *
√xtTokPå
 = 
±r
;

463  
XML_TOK_INVALID
;

465 
±r
 +
	`MINBPC
(
íc
);Öå !
íd
;Ötr += MINBPC(enc)) {

466 
	`BYTE_TYPE
(
íc
, 
±r
)) {

467 
BT_DIGIT
:

468 
BT_HEX
:

470 
BT_SEMI
:

471 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

472  
XML_TOK_CHAR_REF
;

474 *
√xtTokPå
 = 
±r
;

475  
XML_TOK_INVALID
;

479  
XML_TOK_PARTIAL
;

480 
	}
}

485 
	$PREFIX
(
sˇnCh¨Ref
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
, c⁄° *
íd
,

486 c⁄° **
√xtTokPå
)

488 i‡(
±r
 !
íd
) {

489 i‡(
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_x
))

490  
	`PREFIX
(
sˇnHexCh¨Ref
)(
íc
, 
±r
 + 
	`MINBPC
”nc), 
íd
, 
√xtTokPå
);

491 
	`BYTE_TYPE
(
íc
, 
±r
)) {

492 
BT_DIGIT
:

495 *
√xtTokPå
 = 
±r
;

496  
XML_TOK_INVALID
;

498 
±r
 +
	`MINBPC
(
íc
);Öå !
íd
;Ötr += MINBPC(enc)) {

499 
	`BYTE_TYPE
(
íc
, 
±r
)) {

500 
BT_DIGIT
:

502 
BT_SEMI
:

503 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

504  
XML_TOK_CHAR_REF
;

506 *
√xtTokPå
 = 
±r
;

507  
XML_TOK_INVALID
;

511  
XML_TOK_PARTIAL
;

512 
	}
}

517 
	$PREFIX
(
sˇnRef
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
, c⁄° *
íd
,

518 c⁄° **
√xtTokPå
)

520 i‡(
±r
 =
íd
)

521  
XML_TOK_PARTIAL
;

522 
	`BYTE_TYPE
(
íc
, 
±r
)) {

523 
	`CHECK_NMSTRT_CASES
(
íc
, 
±r
, 
íd
, 
√xtTokPå
)

524 
BT_NUM
:

525  
	`PREFIX
(
sˇnCh¨Ref
)(
íc
, 
±r
 + 
	`MINBPC
”nc), 
íd
, 
√xtTokPå
);

527 *
√xtTokPå
 = 
±r
;

528  
XML_TOK_INVALID
;

530 
±r
 !
íd
) {

531 
	`BYTE_TYPE
(
íc
, 
±r
)) {

532 
	`CHECK_NAME_CASES
(
íc
, 
±r
, 
íd
, 
√xtTokPå
)

533 
BT_SEMI
:

534 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

535  
XML_TOK_ENTITY_REF
;

537 *
√xtTokPå
 = 
±r
;

538  
XML_TOK_INVALID
;

541  
XML_TOK_PARTIAL
;

542 
	}
}

547 
	$PREFIX
(
sˇnAâs
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
, c⁄° *
íd
,

548 c⁄° **
√xtTokPå
)

550 #ifde‡
XML_NS


551 
hadCﬁ⁄
 = 0;

553 
±r
 !
íd
) {

554 
	`BYTE_TYPE
(
íc
, 
±r
)) {

555 
	`CHECK_NAME_CASES
(
íc
, 
±r
, 
íd
, 
√xtTokPå
)

556 #ifde‡
XML_NS


557 
BT_COLON
:

558 i‡(
hadCﬁ⁄
) {

559 *
√xtTokPå
 = 
±r
;

560  
XML_TOK_INVALID
;

562 
hadCﬁ⁄
 = 1;

563 
±r
 +
	`MINBPC
(
íc
);

564 i‡(
±r
 =
íd
)

565  
XML_TOK_PARTIAL
;

566 
	`BYTE_TYPE
(
íc
, 
±r
)) {

567 
	`CHECK_NMSTRT_CASES
(
íc
, 
±r
, 
íd
, 
√xtTokPå
)

569 *
√xtTokPå
 = 
±r
;

570  
XML_TOK_INVALID
;

574 
BT_S
: 
BT_CR
: 
BT_LF
:

576 
t
;

578 
±r
 +
	`MINBPC
(
íc
);

579 i‡(
±r
 =
íd
)

580  
XML_TOK_PARTIAL
;

581 
t
 = 
	`BYTE_TYPE
(
íc
, 
±r
);

582 i‡(
t
 =
BT_EQUALS
)

584 
t
) {

585 
BT_S
:

586 
BT_LF
:

587 
BT_CR
:

590 *
√xtTokPå
 = 
±r
;

591  
XML_TOK_INVALID
;

595 
BT_EQUALS
:

597 
›í
;

598 #ifde‡
XML_NS


599 
hadCﬁ⁄
 = 0;

603 
±r
 +
	`MINBPC
(
íc
);

604 i‡(
±r
 =
íd
)

605  
XML_TOK_PARTIAL
;

606 
›í
 = 
	`BYTE_TYPE
(
íc
, 
±r
);

607 i‡(
›í
 =
BT_QUOT
 || o≥¿=
BT_APOS
)

609 
›í
) {

610 
BT_S
:

611 
BT_LF
:

612 
BT_CR
:

615 *
√xtTokPå
 = 
±r
;

616  
XML_TOK_INVALID
;

619 
±r
 +
	`MINBPC
(
íc
);

622 
t
;

623 i‡(
±r
 =
íd
)

624  
XML_TOK_PARTIAL
;

625 
t
 = 
	`BYTE_TYPE
(
íc
, 
±r
);

626 i‡(
t
 =
›í
)

628 
t
) {

629 
	`INVALID_CASES
(
±r
, 
√xtTokPå
)

630 
BT_AMP
:

632 
tok
 = 
	`PREFIX
(
sˇnRef
)(
íc
, 
±r
 + 
	`MINBPC
”nc), 
íd
, &ptr);

633 i‡(
tok
 <= 0) {

634 i‡(
tok
 =
XML_TOK_INVALID
)

635 *
√xtTokPå
 = 
±r
;

636  
tok
;

640 
BT_LT
:

641 *
√xtTokPå
 = 
±r
;

642  
XML_TOK_INVALID
;

644 
±r
 +
	`MINBPC
(
íc
);

648 
±r
 +
	`MINBPC
(
íc
);

649 i‡(
±r
 =
íd
)

650  
XML_TOK_PARTIAL
;

651 
	`BYTE_TYPE
(
íc
, 
±r
)) {

652 
BT_S
:

653 
BT_CR
:

654 
BT_LF
:

656 
BT_SOL
:

657 
sﬁ
;

658 
BT_GT
:

659 
gt
;

661 *
√xtTokPå
 = 
±r
;

662  
XML_TOK_INVALID
;

666 
±r
 +
	`MINBPC
(
íc
);

667 i‡(
±r
 =
íd
)

668  
XML_TOK_PARTIAL
;

669 
	`BYTE_TYPE
(
íc
, 
±r
)) {

670 
	`CHECK_NMSTRT_CASES
(
íc
, 
±r
, 
íd
, 
√xtTokPå
)

671 
BT_S
: 
BT_CR
: 
BT_LF
:

673 
BT_GT
:

674 
gt
:

675 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

676  
XML_TOK_START_TAG_WITH_ATTS
;

677 
BT_SOL
:

678 
sﬁ
:

679 
±r
 +
	`MINBPC
(
íc
);

680 i‡(
±r
 =
íd
)

681  
XML_TOK_PARTIAL
;

682 i‡(!
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_GT
)) {

683 *
√xtTokPå
 = 
±r
;

684  
XML_TOK_INVALID
;

686 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

687  
XML_TOK_EMPTY_ELEMENT_WITH_ATTS
;

689 *
√xtTokPå
 = 
±r
;

690  
XML_TOK_INVALID
;

697 *
√xtTokPå
 = 
±r
;

698  
XML_TOK_INVALID
;

701  
XML_TOK_PARTIAL
;

702 
	}
}

707 
	$PREFIX
(
sˇnLt
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
, c⁄° *
íd
,

708 c⁄° **
√xtTokPå
)

710 #ifde‡
XML_NS


711 
hadCﬁ⁄
;

713 i‡(
±r
 =
íd
)

714  
XML_TOK_PARTIAL
;

715 
	`BYTE_TYPE
(
íc
, 
±r
)) {

716 
	`CHECK_NMSTRT_CASES
(
íc
, 
±r
, 
íd
, 
√xtTokPå
)

717 
BT_EXCL
:

718 i‡((
±r
 +
	`MINBPC
(
íc
)Ë=
íd
)

719  
XML_TOK_PARTIAL
;

720 
	`BYTE_TYPE
(
íc
, 
±r
)) {

721 
BT_MINUS
:

722  
	`PREFIX
(
sˇnCommít
)(
íc
, 
±r
 + 
	`MINBPC
”nc), 
íd
, 
√xtTokPå
);

723 
BT_LSQB
:

724  
	`PREFIX
(
sˇnCd©aSe˘i⁄
)(
íc
, 
±r
 + 
	`MINBPC
”nc), 
íd
, 
√xtTokPå
);

726 *
√xtTokPå
 = 
±r
;

727  
XML_TOK_INVALID
;

728 
BT_QUEST
:

729  
	`PREFIX
(
sˇnPi
)(
íc
, 
±r
 + 
	`MINBPC
”nc), 
íd
, 
√xtTokPå
);

730 
BT_SOL
:

731  
	`PREFIX
(
sˇnEndTag
)(
íc
, 
±r
 + 
	`MINBPC
”nc), 
íd
, 
√xtTokPå
);

733 *
√xtTokPå
 = 
±r
;

734  
XML_TOK_INVALID
;

736 #ifde‡
XML_NS


737 
hadCﬁ⁄
 = 0;

740 
±r
 !
íd
) {

741 
	`BYTE_TYPE
(
íc
, 
±r
)) {

742 
	`CHECK_NAME_CASES
(
íc
, 
±r
, 
íd
, 
√xtTokPå
)

743 #ifde‡
XML_NS


744 
BT_COLON
:

745 i‡(
hadCﬁ⁄
) {

746 *
√xtTokPå
 = 
±r
;

747  
XML_TOK_INVALID
;

749 
hadCﬁ⁄
 = 1;

750 
±r
 +
	`MINBPC
(
íc
);

751 i‡(
±r
 =
íd
)

752  
XML_TOK_PARTIAL
;

753 
	`BYTE_TYPE
(
íc
, 
±r
)) {

754 
	`CHECK_NMSTRT_CASES
(
íc
, 
±r
, 
íd
, 
√xtTokPå
)

756 *
√xtTokPå
 = 
±r
;

757  
XML_TOK_INVALID
;

761 
BT_S
: 
BT_CR
: 
BT_LF
:

763 
±r
 +
	`MINBPC
(
íc
);

764 
±r
 !
íd
) {

765 
	`BYTE_TYPE
(
íc
, 
±r
)) {

766 
	`CHECK_NMSTRT_CASES
(
íc
, 
±r
, 
íd
, 
√xtTokPå
)

767 
BT_GT
:

768 
gt
;

769 
BT_SOL
:

770 
sﬁ
;

771 
BT_S
: 
BT_CR
: 
BT_LF
:

772 
±r
 +
	`MINBPC
(
íc
);

775 *
√xtTokPå
 = 
±r
;

776  
XML_TOK_INVALID
;

778  
	`PREFIX
(
sˇnAâs
)(
íc
, 
±r
, 
íd
, 
√xtTokPå
);

780  
XML_TOK_PARTIAL
;

782 
BT_GT
:

783 
gt
:

784 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

785  
XML_TOK_START_TAG_NO_ATTS
;

786 
BT_SOL
:

787 
sﬁ
:

788 
±r
 +
	`MINBPC
(
íc
);

789 i‡(
±r
 =
íd
)

790  
XML_TOK_PARTIAL
;

791 i‡(!
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_GT
)) {

792 *
√xtTokPå
 = 
±r
;

793  
XML_TOK_INVALID
;

795 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

796  
XML_TOK_EMPTY_ELEMENT_NO_ATTS
;

798 *
√xtTokPå
 = 
±r
;

799  
XML_TOK_INVALID
;

802  
XML_TOK_PARTIAL
;

803 
	}
}

806 
	$PREFIX
(
c⁄ã¡Tok
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
, c⁄° *
íd
,

807 c⁄° **
√xtTokPå
)

809 i‡(
±r
 =
íd
)

810  
XML_TOK_NONE
;

811 i‡(
	`MINBPC
(
íc
) > 1) {

812 
size_t
 
n
 = 
íd
 - 
±r
;

813 i‡(
n
 & (
	`MINBPC
(
íc
) - 1)) {

814 
n
 &~(
	`MINBPC
(
íc
) - 1);

815 i‡(
n
 == 0)

816  
XML_TOK_PARTIAL
;

817 
íd
 = 
±r
 + 
n
;

820 
	`BYTE_TYPE
(
íc
, 
±r
)) {

821 
BT_LT
:

822  
	`PREFIX
(
sˇnLt
)(
íc
, 
±r
 + 
	`MINBPC
”nc), 
íd
, 
√xtTokPå
);

823 
BT_AMP
:

824  
	`PREFIX
(
sˇnRef
)(
íc
, 
±r
 + 
	`MINBPC
”nc), 
íd
, 
√xtTokPå
);

825 
BT_CR
:

826 
±r
 +
	`MINBPC
(
íc
);

827 i‡(
±r
 =
íd
)

828  
XML_TOK_TRAILING_CR
;

829 i‡(
	`BYTE_TYPE
(
íc
, 
±r
Ë=
BT_LF
)

830 
±r
 +
	`MINBPC
(
íc
);

831 *
√xtTokPå
 = 
±r
;

832  
XML_TOK_DATA_NEWLINE
;

833 
BT_LF
:

834 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

835  
XML_TOK_DATA_NEWLINE
;

836 
BT_RSQB
:

837 
±r
 +
	`MINBPC
(
íc
);

838 i‡(
±r
 =
íd
)

839  
XML_TOK_TRAILING_RSQB
;

840 i‡(!
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_RSQB
))

842 
±r
 +
	`MINBPC
(
íc
);

843 i‡(
±r
 =
íd
)

844  
XML_TOK_TRAILING_RSQB
;

845 i‡(!
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_GT
)) {

846 
±r
 -
	`MINBPC
(
íc
);

849 *
√xtTokPå
 = 
±r
;

850  
XML_TOK_INVALID
;

851 
	`INVALID_CASES
(
±r
, 
√xtTokPå
)

853 
±r
 +
	`MINBPC
(
íc
);

856 
±r
 !
íd
) {

857 
	`BYTE_TYPE
(
íc
, 
±r
)) {

858 
	#LEAD_CASE
(
n
) \

859 
BT_LEAD
 ## 
n
: \

860 i‡(
íd
 - 
±r
 < 
n
 || 
	`IS_INVALID_CHAR
(
íc
,Ötr,Ç)) { \

861 *
√xtTokPå
 = 
±r
; \

862  
XML_TOK_DATA_CHARS
; \

864 
±r
 +
n
; \

865 ;

	)

866 
	`LEAD_CASE
(2) LEAD_CASE(3) LEAD_CASE(4)

867 #unde‡
LEAD_CASE


868 
BT_RSQB
:

869 i‡(
±r
 + 
	`MINBPC
(
íc
Ë!
íd
) {

870 i‡(!
	`CHAR_MATCHES
(
íc
, 
±r
 + 
	`MINBPC
”nc), 
ASCII_RSQB
)) {

871 
±r
 +
	`MINBPC
(
íc
);

874 i‡(
±r
 + 2*
	`MINBPC
(
íc
Ë!
íd
) {

875 i‡(!
	`CHAR_MATCHES
(
íc
, 
±r
 + 2*
	`MINBPC
”nc), 
ASCII_GT
)) {

876 
±r
 +
	`MINBPC
(
íc
);

879 *
√xtTokPå
 = 
±r
 + 2*
	`MINBPC
(
íc
);

880  
XML_TOK_INVALID
;

884 
BT_AMP
:

885 
BT_LT
:

886 
BT_NONXML
:

887 
BT_MALFORM
:

888 
BT_TRAIL
:

889 
BT_CR
:

890 
BT_LF
:

891 *
√xtTokPå
 = 
±r
;

892  
XML_TOK_DATA_CHARS
;

894 
±r
 +
	`MINBPC
(
íc
);

898 *
√xtTokPå
 = 
±r
;

899  
XML_TOK_DATA_CHARS
;

900 
	}
}

905 
	$PREFIX
(
sˇnPî˚¡
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
, c⁄° *
íd
,

906 c⁄° **
√xtTokPå
)

908 i‡(
±r
 =
íd
)

909  
XML_TOK_PARTIAL
;

910 
	`BYTE_TYPE
(
íc
, 
±r
)) {

911 
	`CHECK_NMSTRT_CASES
(
íc
, 
±r
, 
íd
, 
√xtTokPå
)

912 
BT_S
: 
BT_LF
: 
BT_CR
: 
BT_PERCNT
:

913 *
√xtTokPå
 = 
±r
;

914  
XML_TOK_PERCENT
;

916 *
√xtTokPå
 = 
±r
;

917  
XML_TOK_INVALID
;

919 
±r
 !
íd
) {

920 
	`BYTE_TYPE
(
íc
, 
±r
)) {

921 
	`CHECK_NAME_CASES
(
íc
, 
±r
, 
íd
, 
√xtTokPå
)

922 
BT_SEMI
:

923 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

924  
XML_TOK_PARAM_ENTITY_REF
;

926 *
√xtTokPå
 = 
±r
;

927  
XML_TOK_INVALID
;

930  
XML_TOK_PARTIAL
;

931 
	}
}

934 
	$PREFIX
(
sˇnPoundName
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
, c⁄° *
íd
,

935 c⁄° **
√xtTokPå
)

937 i‡(
±r
 =
íd
)

938  
XML_TOK_PARTIAL
;

939 
	`BYTE_TYPE
(
íc
, 
±r
)) {

940 
	`CHECK_NMSTRT_CASES
(
íc
, 
±r
, 
íd
, 
√xtTokPå
)

942 *
√xtTokPå
 = 
±r
;

943  
XML_TOK_INVALID
;

945 
±r
 !
íd
) {

946 
	`BYTE_TYPE
(
íc
, 
±r
)) {

947 
	`CHECK_NAME_CASES
(
íc
, 
±r
, 
íd
, 
√xtTokPå
)

948 
BT_CR
: 
BT_LF
: 
BT_S
:

949 
BT_RPAR
: 
BT_GT
: 
BT_PERCNT
: 
BT_VERBAR
:

950 *
√xtTokPå
 = 
±r
;

951  
XML_TOK_POUND_NAME
;

953 *
√xtTokPå
 = 
±r
;

954  
XML_TOK_INVALID
;

957  -
XML_TOK_POUND_NAME
;

958 
	}
}

961 
	$PREFIX
(
sˇnLô
)(
›í
, c⁄° 
ENCODING
 *
íc
,

962 c⁄° *
±r
, c⁄° *
íd
,

963 c⁄° **
√xtTokPå
)

965 
±r
 !
íd
) {

966 
t
 = 
	`BYTE_TYPE
(
íc
, 
±r
);

967 
t
) {

968 
	`INVALID_CASES
(
±r
, 
√xtTokPå
)

969 
BT_QUOT
:

970 
BT_APOS
:

971 
±r
 +
	`MINBPC
(
íc
);

972 i‡(
t
 !
›í
)

974 i‡(
±r
 =
íd
)

975  -
XML_TOK_LITERAL
;

976 *
√xtTokPå
 = 
±r
;

977 
	`BYTE_TYPE
(
íc
, 
±r
)) {

978 
BT_S
: 
BT_CR
: 
BT_LF
:

979 
BT_GT
: 
BT_PERCNT
: 
BT_LSQB
:

980  
XML_TOK_LITERAL
;

982  
XML_TOK_INVALID
;

985 
±r
 +
	`MINBPC
(
íc
);

989  
XML_TOK_PARTIAL
;

990 
	}
}

993 
	$PREFIX
(
¥ﬁogTok
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
, c⁄° *
íd
,

994 c⁄° **
√xtTokPå
)

996 
tok
;

997 i‡(
±r
 =
íd
)

998  
XML_TOK_NONE
;

999 i‡(
	`MINBPC
(
íc
) > 1) {

1000 
size_t
 
n
 = 
íd
 - 
±r
;

1001 i‡(
n
 & (
	`MINBPC
(
íc
) - 1)) {

1002 
n
 &~(
	`MINBPC
(
íc
) - 1);

1003 i‡(
n
 == 0)

1004  
XML_TOK_PARTIAL
;

1005 
íd
 = 
±r
 + 
n
;

1008 
	`BYTE_TYPE
(
íc
, 
±r
)) {

1009 
BT_QUOT
:

1010  
	`PREFIX
(
sˇnLô
)(
BT_QUOT
, 
íc
, 
±r
 + 
	`MINBPC
”nc), 
íd
, 
√xtTokPå
);

1011 
BT_APOS
:

1012  
	`PREFIX
(
sˇnLô
)(
BT_APOS
, 
íc
, 
±r
 + 
	`MINBPC
”nc), 
íd
, 
√xtTokPå
);

1013 
BT_LT
:

1015 
±r
 +
	`MINBPC
(
íc
);

1016 i‡(
±r
 =
íd
)

1017  
XML_TOK_PARTIAL
;

1018 
	`BYTE_TYPE
(
íc
, 
±r
)) {

1019 
BT_EXCL
:

1020  
	`PREFIX
(
sˇnDe˛
)(
íc
, 
±r
 + 
	`MINBPC
”nc), 
íd
, 
√xtTokPå
);

1021 
BT_QUEST
:

1022  
	`PREFIX
(
sˇnPi
)(
íc
, 
±r
 + 
	`MINBPC
”nc), 
íd
, 
√xtTokPå
);

1023 
BT_NMSTRT
:

1024 
BT_HEX
:

1025 
BT_NONASCII
:

1026 
BT_LEAD2
:

1027 
BT_LEAD3
:

1028 
BT_LEAD4
:

1029 *
√xtTokPå
 = 
±r
 - 
	`MINBPC
(
íc
);

1030  
XML_TOK_INSTANCE_START
;

1032 *
√xtTokPå
 = 
±r
;

1033  
XML_TOK_INVALID
;

1035 
BT_CR
:

1036 i‡(
±r
 + 
	`MINBPC
(
íc
Ë=
íd
)

1037  -
XML_TOK_PROLOG_S
;

1039 
BT_S
: 
BT_LF
:

1041 
±r
 +
	`MINBPC
(
íc
);

1042 i‡(
±r
 =
íd
)

1044 
	`BYTE_TYPE
(
íc
, 
±r
)) {

1045 
BT_S
: 
BT_LF
:

1047 
BT_CR
:

1049 i‡(
±r
 + 
	`MINBPC
(
íc
Ë!
íd
)

1053 *
√xtTokPå
 = 
±r
;

1054  
XML_TOK_PROLOG_S
;

1057 *
√xtTokPå
 = 
±r
;

1058  
XML_TOK_PROLOG_S
;

1059 
BT_PERCNT
:

1060  
	`PREFIX
(
sˇnPî˚¡
)(
íc
, 
±r
 + 
	`MINBPC
”nc), 
íd
, 
√xtTokPå
);

1061 
BT_COMMA
:

1062 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

1063  
XML_TOK_COMMA
;

1064 
BT_LSQB
:

1065 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

1066  
XML_TOK_OPEN_BRACKET
;

1067 
BT_RSQB
:

1068 
±r
 +
	`MINBPC
(
íc
);

1069 i‡(
±r
 =
íd
)

1070  -
XML_TOK_CLOSE_BRACKET
;

1071 i‡(
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_RSQB
)) {

1072 i‡(
±r
 + 
	`MINBPC
(
íc
Ë=
íd
)

1073  
XML_TOK_PARTIAL
;

1074 i‡(
	`CHAR_MATCHES
(
íc
, 
±r
 + 
	`MINBPC
”nc), 
ASCII_GT
)) {

1075 *
√xtTokPå
 = 
±r
 + 2*
	`MINBPC
(
íc
);

1076  
XML_TOK_COND_SECT_CLOSE
;

1079 *
√xtTokPå
 = 
±r
;

1080  
XML_TOK_CLOSE_BRACKET
;

1081 
BT_LPAR
:

1082 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

1083  
XML_TOK_OPEN_PAREN
;

1084 
BT_RPAR
:

1085 
±r
 +
	`MINBPC
(
íc
);

1086 i‡(
±r
 =
íd
)

1087  -
XML_TOK_CLOSE_PAREN
;

1088 
	`BYTE_TYPE
(
íc
, 
±r
)) {

1089 
BT_AST
:

1090 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

1091  
XML_TOK_CLOSE_PAREN_ASTERISK
;

1092 
BT_QUEST
:

1093 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

1094  
XML_TOK_CLOSE_PAREN_QUESTION
;

1095 
BT_PLUS
:

1096 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

1097  
XML_TOK_CLOSE_PAREN_PLUS
;

1098 
BT_CR
: 
BT_LF
: 
BT_S
:

1099 
BT_GT
: 
BT_COMMA
: 
BT_VERBAR
:

1100 
BT_RPAR
:

1101 *
√xtTokPå
 = 
±r
;

1102  
XML_TOK_CLOSE_PAREN
;

1104 *
√xtTokPå
 = 
±r
;

1105  
XML_TOK_INVALID
;

1106 
BT_VERBAR
:

1107 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

1108  
XML_TOK_OR
;

1109 
BT_GT
:

1110 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

1111  
XML_TOK_DECL_CLOSE
;

1112 
BT_NUM
:

1113  
	`PREFIX
(
sˇnPoundName
)(
íc
, 
±r
 + 
	`MINBPC
”nc), 
íd
, 
√xtTokPå
);

1114 
	#LEAD_CASE
(
n
) \

1115 
BT_LEAD
 ## 
n
: \

1116 i‡(
íd
 - 
±r
 < 
n
) \

1117  
XML_TOK_PARTIAL_CHAR
; \

1118 i‡(
	`IS_NMSTRT_CHAR
(
íc
, 
±r
, 
n
)) { \

1119 
±r
 +
n
; \

1120 
tok
 = 
XML_TOK_NAME
; \

1123 i‡(
	`IS_NAME_CHAR
(
íc
, 
±r
, 
n
)) { \

1124 
±r
 +
n
; \

1125 
tok
 = 
XML_TOK_NMTOKEN
; \

1128 *
√xtTokPå
 = 
±r
; \

1129  
XML_TOK_INVALID
;

	)

1130 
	`LEAD_CASE
(2) LEAD_CASE(3) LEAD_CASE(4)

1131 #unde‡
LEAD_CASE


1132 
BT_NMSTRT
:

1133 
BT_HEX
:

1134 
tok
 = 
XML_TOK_NAME
;

1135 
±r
 +
	`MINBPC
(
íc
);

1137 
BT_DIGIT
:

1138 
BT_NAME
:

1139 
BT_MINUS
:

1140 #ifde‡
XML_NS


1141 
BT_COLON
:

1143 
tok
 = 
XML_TOK_NMTOKEN
;

1144 
±r
 +
	`MINBPC
(
íc
);

1146 
BT_NONASCII
:

1147 i‡(
	`IS_NMSTRT_CHAR_MINBPC
(
íc
, 
±r
)) {

1148 
±r
 +
	`MINBPC
(
íc
);

1149 
tok
 = 
XML_TOK_NAME
;

1152 i‡(
	`IS_NAME_CHAR_MINBPC
(
íc
, 
±r
)) {

1153 
±r
 +
	`MINBPC
(
íc
);

1154 
tok
 = 
XML_TOK_NMTOKEN
;

1159 *
√xtTokPå
 = 
±r
;

1160  
XML_TOK_INVALID
;

1162 
±r
 !
íd
) {

1163 
	`BYTE_TYPE
(
íc
, 
±r
)) {

1164 
	`CHECK_NAME_CASES
(
íc
, 
±r
, 
íd
, 
√xtTokPå
)

1165 
BT_GT
: 
BT_RPAR
: 
BT_COMMA
:

1166 
BT_VERBAR
: 
BT_LSQB
: 
BT_PERCNT
:

1167 
BT_S
: 
BT_CR
: 
BT_LF
:

1168 *
√xtTokPå
 = 
±r
;

1169  
tok
;

1170 #ifde‡
XML_NS


1171 
BT_COLON
:

1172 
±r
 +
	`MINBPC
(
íc
);

1173 
tok
) {

1174 
XML_TOK_NAME
:

1175 i‡(
±r
 =
íd
)

1176  
XML_TOK_PARTIAL
;

1177 
tok
 = 
XML_TOK_PREFIXED_NAME
;

1178 
	`BYTE_TYPE
(
íc
, 
±r
)) {

1179 
	`CHECK_NAME_CASES
(
íc
, 
±r
, 
íd
, 
√xtTokPå
)

1181 
tok
 = 
XML_TOK_NMTOKEN
;

1185 
XML_TOK_PREFIXED_NAME
:

1186 
tok
 = 
XML_TOK_NMTOKEN
;

1191 
BT_PLUS
:

1192 i‡(
tok
 =
XML_TOK_NMTOKEN
) {

1193 *
√xtTokPå
 = 
±r
;

1194  
XML_TOK_INVALID
;

1196 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

1197  
XML_TOK_NAME_PLUS
;

1198 
BT_AST
:

1199 i‡(
tok
 =
XML_TOK_NMTOKEN
) {

1200 *
√xtTokPå
 = 
±r
;

1201  
XML_TOK_INVALID
;

1203 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

1204  
XML_TOK_NAME_ASTERISK
;

1205 
BT_QUEST
:

1206 i‡(
tok
 =
XML_TOK_NMTOKEN
) {

1207 *
√xtTokPå
 = 
±r
;

1208  
XML_TOK_INVALID
;

1210 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

1211  
XML_TOK_NAME_QUESTION
;

1213 *
√xtTokPå
 = 
±r
;

1214  
XML_TOK_INVALID
;

1217  -
tok
;

1218 
	}
}

1221 
	$PREFIX
(
©åibuãVÆueTok
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
, c⁄° *
íd
,

1222 c⁄° **
√xtTokPå
)

1224 c⁄° *
°¨t
;

1225 i‡(
±r
 =
íd
)

1226  
XML_TOK_NONE
;

1227 
°¨t
 = 
±r
;

1228 
±r
 !
íd
) {

1229 
	`BYTE_TYPE
(
íc
, 
±r
)) {

1230 
	#LEAD_CASE
(
n
) \

1231 
BT_LEAD
 ## 
n
: 
±r
 +n; ;

	)

1232 
	`LEAD_CASE
(2) LEAD_CASE(3) LEAD_CASE(4)

1233 #unde‡
LEAD_CASE


1234 
BT_AMP
:

1235 i‡(
±r
 =
°¨t
)

1236  
	`PREFIX
(
sˇnRef
)(
íc
, 
±r
 + 
	`MINBPC
”nc), 
íd
, 
√xtTokPå
);

1237 *
√xtTokPå
 = 
±r
;

1238  
XML_TOK_DATA_CHARS
;

1239 
BT_LT
:

1241 *
√xtTokPå
 = 
±r
;

1242  
XML_TOK_INVALID
;

1243 
BT_LF
:

1244 i‡(
±r
 =
°¨t
) {

1245 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

1246  
XML_TOK_DATA_NEWLINE
;

1248 *
√xtTokPå
 = 
±r
;

1249  
XML_TOK_DATA_CHARS
;

1250 
BT_CR
:

1251 i‡(
±r
 =
°¨t
) {

1252 
±r
 +
	`MINBPC
(
íc
);

1253 i‡(
±r
 =
íd
)

1254  
XML_TOK_TRAILING_CR
;

1255 i‡(
	`BYTE_TYPE
(
íc
, 
±r
Ë=
BT_LF
)

1256 
±r
 +
	`MINBPC
(
íc
);

1257 *
√xtTokPå
 = 
±r
;

1258  
XML_TOK_DATA_NEWLINE
;

1260 *
√xtTokPå
 = 
±r
;

1261  
XML_TOK_DATA_CHARS
;

1262 
BT_S
:

1263 i‡(
±r
 =
°¨t
) {

1264 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

1265  
XML_TOK_ATTRIBUTE_VALUE_S
;

1267 *
√xtTokPå
 = 
±r
;

1268  
XML_TOK_DATA_CHARS
;

1270 
±r
 +
	`MINBPC
(
íc
);

1274 *
√xtTokPå
 = 
±r
;

1275  
XML_TOK_DATA_CHARS
;

1276 
	}
}

1279 
	$PREFIX
(
ítôyVÆueTok
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
, c⁄° *
íd
,

1280 c⁄° **
√xtTokPå
)

1282 c⁄° *
°¨t
;

1283 i‡(
±r
 =
íd
)

1284  
XML_TOK_NONE
;

1285 
°¨t
 = 
±r
;

1286 
±r
 !
íd
) {

1287 
	`BYTE_TYPE
(
íc
, 
±r
)) {

1288 
	#LEAD_CASE
(
n
) \

1289 
BT_LEAD
 ## 
n
: 
±r
 +n; ;

	)

1290 
	`LEAD_CASE
(2) LEAD_CASE(3) LEAD_CASE(4)

1291 #unde‡
LEAD_CASE


1292 
BT_AMP
:

1293 i‡(
±r
 =
°¨t
)

1294  
	`PREFIX
(
sˇnRef
)(
íc
, 
±r
 + 
	`MINBPC
”nc), 
íd
, 
√xtTokPå
);

1295 *
√xtTokPå
 = 
±r
;

1296  
XML_TOK_DATA_CHARS
;

1297 
BT_PERCNT
:

1298 i‡(
±r
 =
°¨t
)

1299  
	`PREFIX
(
sˇnPî˚¡
)(
íc
, 
±r
 + 
	`MINBPC
”nc), 
íd
, 
√xtTokPå
);

1300 *
√xtTokPå
 = 
±r
;

1301  
XML_TOK_DATA_CHARS
;

1302 
BT_LF
:

1303 i‡(
±r
 =
°¨t
) {

1304 *
√xtTokPå
 = 
±r
 + 
	`MINBPC
(
íc
);

1305  
XML_TOK_DATA_NEWLINE
;

1307 *
√xtTokPå
 = 
±r
;

1308  
XML_TOK_DATA_CHARS
;

1309 
BT_CR
:

1310 i‡(
±r
 =
°¨t
) {

1311 
±r
 +
	`MINBPC
(
íc
);

1312 i‡(
±r
 =
íd
)

1313  
XML_TOK_TRAILING_CR
;

1314 i‡(
	`BYTE_TYPE
(
íc
, 
±r
Ë=
BT_LF
)

1315 
±r
 +
	`MINBPC
(
íc
);

1316 *
√xtTokPå
 = 
±r
;

1317  
XML_TOK_DATA_NEWLINE
;

1319 *
√xtTokPå
 = 
±r
;

1320  
XML_TOK_DATA_CHARS
;

1322 
±r
 +
	`MINBPC
(
íc
);

1326 *
√xtTokPå
 = 
±r
;

1327  
XML_TOK_DATA_CHARS
;

1328 
	}
}

1330 #ifde‡
XML_DTD


1333 
	$PREFIX
(
ign‹eSe˘i⁄Tok
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
, c⁄° *
íd
,

1334 c⁄° **
√xtTokPå
)

1336 
Àvñ
 = 0;

1337 i‡(
	`MINBPC
(
íc
) > 1) {

1338 
size_t
 
n
 = 
íd
 - 
±r
;

1339 i‡(
n
 & (
	`MINBPC
(
íc
) - 1)) {

1340 
n
 &~(
	`MINBPC
(
íc
) - 1);

1341 
íd
 = 
±r
 + 
n
;

1344 
±r
 !
íd
) {

1345 
	`BYTE_TYPE
(
íc
, 
±r
)) {

1346 
	`INVALID_CASES
(
±r
, 
√xtTokPå
)

1347 
BT_LT
:

1348 i‡((
±r
 +
	`MINBPC
(
íc
)Ë=
íd
)

1349  
XML_TOK_PARTIAL
;

1350 i‡(
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_EXCL
)) {

1351 i‡((
±r
 +
	`MINBPC
(
íc
)Ë=
íd
)

1352  
XML_TOK_PARTIAL
;

1353 i‡(
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_LSQB
)) {

1354 ++
Àvñ
;

1355 
±r
 +
	`MINBPC
(
íc
);

1359 
BT_RSQB
:

1360 i‡((
±r
 +
	`MINBPC
(
íc
)Ë=
íd
)

1361  
XML_TOK_PARTIAL
;

1362 i‡(
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_RSQB
)) {

1363 i‡((
±r
 +
	`MINBPC
(
íc
)Ë=
íd
)

1364  
XML_TOK_PARTIAL
;

1365 i‡(
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_GT
)) {

1366 
±r
 +
	`MINBPC
(
íc
);

1367 i‡(
Àvñ
 == 0) {

1368 *
√xtTokPå
 = 
±r
;

1369  
XML_TOK_IGNORE_SECT
;

1371 --
Àvñ
;

1376 
±r
 +
	`MINBPC
(
íc
);

1380  
XML_TOK_PARTIAL
;

1381 
	}
}

1386 
	$PREFIX
(
isPublicId
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
, c⁄° *
íd
,

1387 c⁄° **
badPå
)

1389 
±r
 +
	`MINBPC
(
íc
);

1390 
íd
 -
	`MINBPC
(
íc
);

1391 ; 
±r
 !
íd
;Öå +
	`MINBPC
(
íc
)) {

1392 
	`BYTE_TYPE
(
íc
, 
±r
)) {

1393 
BT_DIGIT
:

1394 
BT_HEX
:

1395 
BT_MINUS
:

1396 
BT_APOS
:

1397 
BT_LPAR
:

1398 
BT_RPAR
:

1399 
BT_PLUS
:

1400 
BT_COMMA
:

1401 
BT_SOL
:

1402 
BT_EQUALS
:

1403 
BT_QUEST
:

1404 
BT_CR
:

1405 
BT_LF
:

1406 
BT_SEMI
:

1407 
BT_EXCL
:

1408 
BT_AST
:

1409 
BT_PERCNT
:

1410 
BT_NUM
:

1411 #ifde‡
XML_NS


1412 
BT_COLON
:

1415 
BT_S
:

1416 i‡(
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_TAB
)) {

1417 *
badPå
 = 
±r
;

1421 
BT_NAME
:

1422 
BT_NMSTRT
:

1423 i‡(!(
	`BYTE_TO_ASCII
(
íc
, 
±r
) & ~0x7f))

1426 
	`BYTE_TO_ASCII
(
íc
, 
±r
)) {

1431 *
badPå
 = 
±r
;

1438 
	}
}

1445 
	$PREFIX
(
gëAâs
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
,

1446 
©tsMax
, 
ATTRIBUTE
 *
©ts
)

1448 íum { 
Ÿhî
, 
öName
, 
öVÆue
 } 
°©e
 = inName;

1449 
nAâs
 = 0;

1450 
›í
 = 0;

1453 
±r
 +
	`MINBPC
(
íc
);;Ötr += MINBPC(enc)) {

1454 
	`BYTE_TYPE
(
íc
, 
±r
)) {

1455 
	#START_NAME
 \

1456 i‡(
°©e
 =
Ÿhî
) { \

1457 i‡(
nAâs
 < 
©tsMax
) { \

1458 
©ts
[
nAâs
].
«me
 = 
±r
; \

1459 
©ts
[
nAâs
].
n‹mÆized
 = 1; \

1461 
°©e
 = 
öName
; \

1462 }

	)

1463 
	#LEAD_CASE
(
n
) \

1464 
BT_LEAD
 ## 
n
: 
START_NAME
 
±r
 +“ - 
	`MINBPC
(
íc
)); ;

	)

1465 
	`LEAD_CASE
(2) LEAD_CASE(3) LEAD_CASE(4)

1466 #unde‡
LEAD_CASE


1467 
BT_NONASCII
:

1468 
BT_NMSTRT
:

1469 
BT_HEX
:

1470 
START_NAME


1472 #unde‡
START_NAME


1473 
BT_QUOT
:

1474 i‡(
°©e
 !
öVÆue
) {

1475 i‡(
nAâs
 < 
©tsMax
)

1476 
©ts
[
nAâs
].
vÆuePå
 = 
±r
 + 
	`MINBPC
(
íc
);

1477 
°©e
 = 
öVÆue
;

1478 
›í
 = 
BT_QUOT
;

1480 i‡(
›í
 =
BT_QUOT
) {

1481 
°©e
 = 
Ÿhî
;

1482 i‡(
nAâs
 < 
©tsMax
)

1483 
©ts
[
nAâs
].
vÆueEnd
 = 
±r
;

1484 
nAâs
++;

1487 
BT_APOS
:

1488 i‡(
°©e
 !
öVÆue
) {

1489 i‡(
nAâs
 < 
©tsMax
)

1490 
©ts
[
nAâs
].
vÆuePå
 = 
±r
 + 
	`MINBPC
(
íc
);

1491 
°©e
 = 
öVÆue
;

1492 
›í
 = 
BT_APOS
;

1494 i‡(
›í
 =
BT_APOS
) {

1495 
°©e
 = 
Ÿhî
;

1496 i‡(
nAâs
 < 
©tsMax
)

1497 
©ts
[
nAâs
].
vÆueEnd
 = 
±r
;

1498 
nAâs
++;

1501 
BT_AMP
:

1502 i‡(
nAâs
 < 
©tsMax
)

1503 
©ts
[
nAâs
].
n‹mÆized
 = 0;

1505 
BT_S
:

1506 i‡(
°©e
 =
öName
)

1507 
°©e
 = 
Ÿhî
;

1508 i‡(
°©e
 =
öVÆue


1509 && 
nAâs
 < 
©tsMax


1510 && 
©ts
[
nAâs
].
n‹mÆized


1511 && (
±r
 =
©ts
[
nAâs
].
vÆuePå


1512 || 
	`BYTE_TO_ASCII
(
íc
, 
±r
Ë!
ASCII_SPACE


1513 || 
	`BYTE_TO_ASCII
(
íc
, 
±r
 + 
	`MINBPC
”nc)Ë=
ASCII_SPACE


1514 || 
	`BYTE_TYPE
(
íc
, 
±r
 + 
	`MINBPC
”nc)Ë=
›í
))

1515 
©ts
[
nAâs
].
n‹mÆized
 = 0;

1517 
BT_CR
: 
BT_LF
:

1520 i‡(
°©e
 =
öName
)

1521 
°©e
 = 
Ÿhî
;

1522 i‡(
°©e
 =
öVÆue
 && 
nAâs
 < 
©tsMax
)

1523 
©ts
[
nAâs
].
n‹mÆized
 = 0;

1525 
BT_GT
:

1526 
BT_SOL
:

1527 i‡(
°©e
 !
öVÆue
)

1528  
nAâs
;

1535 
	}
}

1538 
	$PREFIX
(
ch¨RefNumbî
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
)

1540 
ªsu…
 = 0;

1542 
±r
 +2*
	`MINBPC
(
íc
);

1543 i‡(
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_x
)) {

1544 
±r
 +
	`MINBPC
(
íc
); !
	`CHAR_MATCHES
”nc,Öå, 
ASCII_SEMI
);Ötr += MINBPC(enc)) {

1545 
c
 = 
	`BYTE_TO_ASCII
(
íc
, 
±r
);

1546 
c
) {

1547 
ASCII_0
: 
ASCII_1
: 
ASCII_2
: 
ASCII_3
: 
ASCII_4
:

1548 
ASCII_5
: 
ASCII_6
: 
ASCII_7
: 
ASCII_8
: 
ASCII_9
:

1549 
ªsu…
 <<= 4;

1550 
ªsu…
 |(
c
 - 
ASCII_0
);

1552 
ASCII_A
: 
ASCII_B
: 
ASCII_C
: 
ASCII_D
: 
ASCII_E
: 
ASCII_F
:

1553 
ªsu…
 <<= 4;

1554 
ªsu…
 +10 + (
c
 - 
ASCII_A
);

1556 
ASCII_a
: 
ASCII_b
: 
ASCII_c
: 
ASCII_d
: 
ASCII_e
: 
ASCII_f
:

1557 
ªsu…
 <<= 4;

1558 
ªsu…
 +10 + (
c
 - 
ASCII_a
);

1561 i‡(
ªsu…
 >= 0x110000)

1566 ; !
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_SEMI
);Öå +
	`MINBPC
(enc)) {

1567 
c
 = 
	`BYTE_TO_ASCII
(
íc
, 
±r
);

1568 
ªsu…
 *= 10;

1569 
ªsu…
 +(
c
 - 
ASCII_0
);

1570 i‡(
ªsu…
 >= 0x110000)

1574  
	`checkCh¨RefNumbî
(
ªsu…
);

1575 
	}
}

1578 
	$PREFIX
(
¥edeföedE¡ôyName
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
, c⁄° *
íd
)

1580 (
íd
 - 
±r
)/
	`MINBPC
(
íc
)) {

1582 i‡(
	`CHAR_MATCHES
(
íc
, 
±r
 + 
	`MINBPC
”nc), 
ASCII_t
)) {

1583 
	`BYTE_TO_ASCII
(
íc
, 
±r
)) {

1584 
ASCII_l
:

1585  
ASCII_LT
;

1586 
ASCII_g
:

1587  
ASCII_GT
;

1592 i‡(
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_a
)) {

1593 
±r
 +
	`MINBPC
(
íc
);

1594 i‡(
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_m
)) {

1595 
±r
 +
	`MINBPC
(
íc
);

1596 i‡(
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_p
))

1597  
ASCII_AMP
;

1602 
	`BYTE_TO_ASCII
(
íc
, 
±r
)) {

1603 
ASCII_q
:

1604 
±r
 +
	`MINBPC
(
íc
);

1605 i‡(
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_u
)) {

1606 
±r
 +
	`MINBPC
(
íc
);

1607 i‡(
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_o
)) {

1608 
±r
 +
	`MINBPC
(
íc
);

1609 i‡(
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_t
))

1610  
ASCII_QUOT
;

1614 
ASCII_a
:

1615 
±r
 +
	`MINBPC
(
íc
);

1616 i‡(
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_p
)) {

1617 
±r
 +
	`MINBPC
(
íc
);

1618 i‡(
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_o
)) {

1619 
±r
 +
	`MINBPC
(
íc
);

1620 i‡(
	`CHAR_MATCHES
(
íc
, 
±r
, 
ASCII_s
))

1621  
ASCII_APOS
;

1628 
	}
}

1631 
	$PREFIX
(
ßmeName
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r1
, c⁄° *
±r2
)

1634 
	`BYTE_TYPE
(
íc
, 
±r1
)) {

1635 
	#LEAD_CASE
(
n
) \

1636 
BT_LEAD
 ## 
n
: \

1637 i‡(*
±r1
++ !*
±r2
++) \

1638  0;

	)

1639 
	`LEAD_CASE
(4) LEAD_CASE(3) LEAD_CASE(2)

1640 #unde‡
LEAD_CASE


1642 i‡(*
±r1
++ !*
±r2
++)

1645 
BT_NONASCII
:

1646 
BT_NMSTRT
:

1647 #ifde‡
XML_NS


1648 
BT_COLON
:

1650 
BT_HEX
:

1651 
BT_DIGIT
:

1652 
BT_NAME
:

1653 
BT_MINUS
:

1654 i‡(*
±r2
++ !*
±r1
++)

1656 i‡(
	`MINBPC
(
íc
) > 1) {

1657 i‡(*
±r2
++ !*
±r1
++)

1659 i‡(
	`MINBPC
(
íc
) > 2) {

1660 i‡(*
±r2
++ !*
±r1
++)

1662 i‡(
	`MINBPC
(
íc
) > 3) {

1663 i‡(*
±r2
++ !*
±r1
++)

1670 i‡(
	`MINBPC
(
íc
Ë=1 && *
±r1
 =*
±r2
)

1672 
	`BYTE_TYPE
(
íc
, 
±r2
)) {

1673 
BT_LEAD2
:

1674 
BT_LEAD3
:

1675 
BT_LEAD4
:

1676 
BT_NONASCII
:

1677 
BT_NMSTRT
:

1678 #ifde‡
XML_NS


1679 
BT_COLON
:

1681 
BT_HEX
:

1682 
BT_DIGIT
:

1683 
BT_NAME
:

1684 
BT_MINUS
:

1692 
	}
}

1695 
	$PREFIX
(
«meM©chesAscii
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r1
,

1696 c⁄° *
íd1
, c⁄° *
±r2
)

1698 ; *
±r2
; 
±r1
 +
	`MINBPC
(
íc
),Ötr2++) {

1699 i‡(
±r1
 =
íd1
)

1701 i‡(!
	`CHAR_MATCHES
(
íc
, 
±r1
, *
±r2
))

1704  
±r1
 =
íd1
;

1705 
	}
}

1708 
	$PREFIX
(
«meLígth
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
)

1710 c⁄° *
°¨t
 = 
±r
;

1712 
	`BYTE_TYPE
(
íc
, 
±r
)) {

1713 
	#LEAD_CASE
(
n
) \

1714 
BT_LEAD
 ## 
n
: 
±r
 +n; ;

	)

1715 
	`LEAD_CASE
(2) LEAD_CASE(3) LEAD_CASE(4)

1716 #unde‡
LEAD_CASE


1717 
BT_NONASCII
:

1718 
BT_NMSTRT
:

1719 #ifde‡
XML_NS


1720 
BT_COLON
:

1722 
BT_HEX
:

1723 
BT_DIGIT
:

1724 
BT_NAME
:

1725 
BT_MINUS
:

1726 
±r
 +
	`MINBPC
(
íc
);

1729  
±r
 - 
°¨t
;

1732 
	}
}

1735 c⁄° *
	$PREFIX
(
skùS
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
)

1738 
	`BYTE_TYPE
(
íc
, 
±r
)) {

1739 
BT_LF
:

1740 
BT_CR
:

1741 
BT_S
:

1742 
±r
 +
	`MINBPC
(
íc
);

1745  
±r
;

1748 
	}
}

1751 
	$PREFIX
(
upd©ePosôi⁄
)(c⁄° 
ENCODING
 *
íc
,

1752 c⁄° *
±r
,

1753 c⁄° *
íd
,

1754 
POSITION
 *
pos
)

1756 
±r
 !
íd
) {

1757 
	`BYTE_TYPE
(
íc
, 
±r
)) {

1758 
	#LEAD_CASE
(
n
) \

1759 
BT_LEAD
 ## 
n
: \

1760 
±r
 +
n
; \

1761 ;

	)

1762 
	`LEAD_CASE
(2) LEAD_CASE(3) LEAD_CASE(4)

1763 #unde‡
LEAD_CASE


1764 
BT_LF
:

1765 
pos
->
cﬁumnNumbî
 = ()-1;

1766 
pos
->
löeNumbî
++;

1767 
±r
 +
	`MINBPC
(
íc
);

1769 
BT_CR
:

1770 
pos
->
löeNumbî
++;

1771 
±r
 +
	`MINBPC
(
íc
);

1772 i‡(
±r
 !
íd
 && 
	`BYTE_TYPE
(
íc
,ÖåË=
BT_LF
)

1773 
±r
 +
	`MINBPC
(
íc
);

1774 
pos
->
cﬁumnNumbî
 = ()-1;

1777 
±r
 +
	`MINBPC
(
íc
);

1780 
pos
->
cﬁumnNumbî
++;

1782 
	}
}

1784 #unde‡
DO_LEAD_CASE


1785 #unde‡
MULTIBYTE_CASES


1786 #unde‡
INVALID_CASES


1787 #unde‡
CHECK_NAME_CASE


1788 #unde‡
CHECK_NAME_CASES


1789 #unde‡
CHECK_NMSTRT_CASE


1790 #unde‡
CHECK_NMSTRT_CASES


	@modules/expat/xmltok/xmltok_impl.h

32 
	mBT_NONXML
,

33 
	mBT_MALFORM
,

34 
	mBT_LT
,

35 
	mBT_AMP
,

36 
	mBT_RSQB
,

37 
	mBT_LEAD2
,

38 
	mBT_LEAD3
,

39 
	mBT_LEAD4
,

40 
	mBT_TRAIL
,

41 
	mBT_CR
,

42 
	mBT_LF
,

43 
	mBT_GT
,

44 
	mBT_QUOT
,

45 
	mBT_APOS
,

46 
	mBT_EQUALS
,

47 
	mBT_QUEST
,

48 
	mBT_EXCL
,

49 
	mBT_SOL
,

50 
	mBT_SEMI
,

51 
	mBT_NUM
,

52 
	mBT_LSQB
,

53 
	mBT_S
,

54 
	mBT_NMSTRT
,

55 
	mBT_COLON
,

56 
	mBT_HEX
,

57 
	mBT_DIGIT
,

58 
	mBT_NAME
,

59 
	mBT_MINUS
,

60 
	mBT_OTHER
,

61 
	mBT_NONASCII
,

62 
	mBT_PERCNT
,

63 
	mBT_LPAR
,

64 
	mBT_RPAR
,

65 
	mBT_AST
,

66 
	mBT_PLUS
,

67 
	mBT_COMMA
,

68 
	mBT_VERBAR


71 
	~<°ddef.h
>

	@modules/expat/xmltok/xmltok_ns.c

1 c⁄° 
ENCODING
 *
	$NS
(
XmlGëUtf8I¡î«lEncodög
)()

3  &
	`ns
(
öã∫Æ_utf8_ícodög
).
íc
;

4 
	}
}

6 c⁄° 
ENCODING
 *
	$NS
(
XmlGëUtf16I¡î«lEncodög
)()

8 #i‡
XML_BYTE_ORDER
 == 12

9  &
	`ns
(
öã∫Æ_lôée2_ícodög
).
íc
;

10 #ñi‡
XML_BYTE_ORDER
 == 21

11  &
	`ns
(
öã∫Æ_big2_ícodög
).
íc
;

13 c⁄° 
n
 = 1;

14  *(c⁄° *)&
n
 ? &
	`ns
(
öã∫Æ_lôée2_ícodög
).
íc
 : &ns(
öã∫Æ_big2_ícodög
).enc;

16 
	}
}

19 c⁄° 
ENCODING
 *
NS
(
ícodögs
)[] = {

20 &
ns
(
œtö1_ícodög
).
íc
,

21 &
ns
(
ascii_ícodög
).
íc
,

22 &
ns
(
utf8_ícodög
).
íc
,

23 &
ns
(
big2_ícodög
).
íc
,

24 &
ns
(
big2_ícodög
).
íc
,

25 &
ns
(
lôée2_ícodög
).
íc
,

26 &
ns
(
utf8_ícodög
).
íc


30 
	$NS
(
öôSˇnPrﬁog
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
, c⁄° *
íd
,

31 c⁄° **
√xtTokPå
)

33  
	`öôSˇn
(
	`NS
(
ícodögs
), (c⁄° 
INIT_ENCODING
 *)
íc
, 
XML_PROLOG_STATE
, 
±r
, 
íd
, 
√xtTokPå
);

34 
	}
}

37 
	$NS
(
öôSˇnC⁄ã¡
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
, c⁄° *
íd
,

38 c⁄° **
√xtTokPå
)

40  
	`öôSˇn
(
	`NS
(
ícodögs
), (c⁄° 
INIT_ENCODING
 *)
íc
, 
XML_CONTENT_STATE
, 
±r
, 
íd
, 
√xtTokPå
);

41 
	}
}

43 
	$NS
(
XmlInôEncodög
)(
INIT_ENCODING
 *
p
, c⁄° 
ENCODING
 **
ícPå
, c⁄° *
«me
)

45 
i
 = 
	`gëEncodögIndex
(
«me
);

46 i‡(
i
 =
UNKNOWN_ENC
)

48 
	`SET_INIT_ENC_INDEX
(
p
, 
i
);

49 
p
->
öôEnc
.
sˇ¬îs
[
XML_PROLOG_STATE
] = 
	`NS
(
öôSˇnPrﬁog
);

50 
p
->
öôEnc
.
sˇ¬îs
[
XML_CONTENT_STATE
] = 
	`NS
(
öôSˇnC⁄ã¡
);

51 
p
->
öôEnc
.
upd©ePosôi⁄
 = 
öôUpd©ePosôi⁄
;

52 
p
->
ícPå
 =ÉncPtr;

53 *
ícPå
 = &(
p
->
öôEnc
);

55 
	}
}

58 c⁄° 
ENCODING
 *
	$NS
(
födEncodög
)(c⁄° 
ENCODING
 *
íc
, c⁄° *
±r
, c⁄° *
íd
)

60 
	#ENCODING_MAX
 128

	)

61 
buf
[
ENCODING_MAX
];

62 *
p
 = 
buf
;

63 
i
;

64 
	`XmlUtf8C⁄vît
(
íc
, &
±r
, 
íd
, &
p
,Ö + 
ENCODING_MAX
 - 1);

65 i‡(
±r
 !
íd
)

67 *
p
 = 0;

68 i‡(
	`°ªqci
(
buf
, 
KW_UTF_16
Ë&& 
íc
->
möByãsPîCh¨
 == 2)

69  
íc
;

70 
i
 = 
	`gëEncodögIndex
(
buf
);

71 i‡(
i
 =
UNKNOWN_ENC
)

73  
	`NS
(
ícodögs
)[
i
];

74 
	}
}

76 
	$NS
(
XmlP¨£XmlDe˛
)(
isGíîÆTextE¡ôy
,

77 c⁄° 
ENCODING
 *
íc
,

78 c⁄° *
±r
,

79 c⁄° *
íd
,

80 c⁄° **
badPå
,

81 c⁄° **
vîsi⁄På
,

82 c⁄° **
ícodögName
,

83 c⁄° 
ENCODING
 **
ícodög
,

84 *
°™dÆ⁄e
)

86  
	`doP¨£XmlDe˛
(
	`NS
(
födEncodög
),

87 
isGíîÆTextE¡ôy
,

88 
íc
,

89 
±r
,

90 
íd
,

91 
badPå
,

92 
vîsi⁄På
,

93 
ícodögName
,

94 
ícodög
,

95 
°™dÆ⁄e
);

96 
	}
}

	@modules/md5/md5.c

26 
	~"md5.h
"

30 
	#S11
 7

	)

31 
	#S12
 12

	)

32 
	#S13
 17

	)

33 
	#S14
 22

	)

34 
	#S21
 5

	)

35 
	#S22
 9

	)

36 
	#S23
 14

	)

37 
	#S24
 20

	)

38 
	#S31
 4

	)

39 
	#S32
 11

	)

40 
	#S33
 16

	)

41 
	#S34
 23

	)

42 
	#S41
 6

	)

43 
	#S42
 10

	)

44 
	#S43
 15

	)

45 
	#S44
 21

	)

47 
MD5Tønsf‹m
 
PROTO_LIST
 ((
UINT4
 [4], [64]));

48 
Encode
 
	gPROTO_LIST


49 ((*, 
	gUINT4
 *, ));

50 
Decode
 
	gPROTO_LIST


51 ((
	gUINT4
 *, *, ));

52 
MD5_mem˝y
 
PROTO_LIST
 ((
POINTER
, POINTER, ));

53 
MD5_mem£t
 
PROTO_LIST
 ((
POINTER
, , ));

55 
	gPADDING
[64] = {

63 
	#F
(
x
, 
y
, 
z
Ë(((xË& (y)Ë| ((~xË& (z)))

	)

64 
	#G
(
x
, 
y
, 
z
Ë(((xË& (z)Ë| ((yË& (~z)))

	)

65 
	#H
(
x
, 
y
, 
z
Ë((xË^ (yË^ (z))

	)

66 
	#I
(
x
, 
y
, 
z
Ë((yË^ ((xË| (~z)))

	)

70 
	#ROTATE_LEFT
(
x
, 
n
Ë(((xË<< (n)Ë| ((xË>> (32-“))))

	)

75 
	#FF
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

76 (
a
Ë+
	`F
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

77 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

78 (
a
Ë+(
b
); \

79 }

	)

80 
	#GG
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

81 (
a
Ë+
	`G
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

82 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

83 (
a
Ë+(
b
); \

84 }

	)

85 
	#HH
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

86 (
a
Ë+
	`H
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

87 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

88 (
a
Ë+(
b
); \

89 }

	)

90 
	#II
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

91 (
a
Ë+
	`I
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

92 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

93 (
a
Ë+(
b
); \

94 }

	)

98 
	$MD5Inô
 (
c⁄ãxt
)

99 
MD5_CTX
 *
c⁄ãxt
;

101 
c⁄ãxt
->
cou¡
[0] = context->count[1] = 0;

104 
c⁄ãxt
->
°©e
[0] = 0x67452301;

105 
c⁄ãxt
->
°©e
[1] = 0xefcdab89;

106 
c⁄ãxt
->
°©e
[2] = 0x98badcfe;

107 
c⁄ãxt
->
°©e
[3] = 0x10325476;

108 
	}
}

114 
	$MD5Upd©e
 (
c⁄ãxt
, 
öput
, 
öputLí
)

115 
MD5_CTX
 *
c⁄ãxt
;

116 *
öput
;

117 
öputLí
;

119 
i
, 
ödex
, 
∑πLí
;

122 
ödex
 = ()((
c⁄ãxt
->
cou¡
[0] >> 3) & 0x3F);

125 i‡((
c⁄ãxt
->
cou¡
[0] +((
UINT4
)
öputLí
 << 3))

126 < ((
UINT4
)
öputLí
 << 3))

127 
c⁄ãxt
->
cou¡
[1]++;

128 
c⁄ãxt
->
cou¡
[1] +((
UINT4
)
öputLí
 >> 29);

130 
∑πLí
 = 64 - 
ödex
;

134 i‡(
öputLí
 >
∑πLí
) {

135 
MD5_mem˝y


136 ((
POINTER
)&
c⁄ãxt
->
buf„r
[
ödex
], (POINTER)
öput
, 
∑πLí
);

137 
	`MD5Tønsf‹m
 (
c⁄ãxt
->
°©e
, c⁄ãxt->
buf„r
);

139 
i
 = 
∑πLí
; i + 63 < 
öputLí
; i += 64)

140 
	`MD5Tønsf‹m
 (
c⁄ãxt
->
°©e
, &
öput
[
i
]);

142 
ödex
 = 0;

145 
i
 = 0;

148 
MD5_mem˝y


149 ((
POINTER
)&
c⁄ãxt
->
buf„r
[
ödex
], (POINTER)&
öput
[
i
],

150 
öputLí
-
i
);

151 
	}
}

156 
	$MD5FöÆ
 (
dige°
, 
c⁄ãxt
)

157 
dige°
[16];

158 
MD5_CTX
 *
c⁄ãxt
;

160 
bôs
[8];

161 
ödex
, 
∑dLí
;

164 
	`Encode
 (
bôs
, 
c⁄ãxt
->
cou¡
, 8);

168 
ödex
 = ()((
c⁄ãxt
->
cou¡
[0] >> 3) & 0x3f);

169 
∑dLí
 = (
ödex
 < 56) ? (56 - index) : (120 - index);

170 
	`MD5Upd©e
 (
c⁄ãxt
, 
PADDING
, 
∑dLí
);

173 
	`MD5Upd©e
 (
c⁄ãxt
, 
bôs
, 8);

175 
	`Encode
 (
dige°
, 
c⁄ãxt
->
°©e
, 16);

179 
	`MD5_mem£t
 ((
POINTER
)
c⁄ãxt
, 0,  (*context));

180 
	}
}

184 
	$MD5Tønsf‹m
 (
°©e
, 
block
)

185 
UINT4
 
°©e
[4];

186 
block
[64];

188 
UINT4
 
a
 = 
°©e
[0], 
b
 = sèã[1], 
c
 = sèã[2], 
d
 = sèã[3], 
x
[16];

190 
	`Decode
 (
x
, 
block
, 64);

193 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[ 0], 
S11
, 0xd76aa478);

194 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[ 1], 
S12
, 0xe8c7b756);

195 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[ 2], 
S13
, 0x242070db);

196 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[ 3], 
S14
, 0xc1bdceee);

197 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[ 4], 
S11
, 0xf57c0faf);

198 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[ 5], 
S12
, 0x4787c62a);

199 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[ 6], 
S13
, 0xa8304613);

200 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[ 7], 
S14
, 0xfd469501);

201 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[ 8], 
S11
, 0x698098d8);

202 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[ 9], 
S12
, 0x8b44f7af);

203 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[10], 
S13
, 0xffff5bb1);

204 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[11], 
S14
, 0x895cd7be);

205 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[12], 
S11
, 0x6b901122);

206 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[13], 
S12
, 0xfd987193);

207 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[14], 
S13
, 0xa679438e);

208 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[15], 
S14
, 0x49b40821);

211 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[ 1], 
S21
, 0xf61e2562);

212 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[ 6], 
S22
, 0xc040b340);

213 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[11], 
S23
, 0x265e5a51);

214 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[ 0], 
S24
, 0xe9b6c7aa);

215 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[ 5], 
S21
, 0xd62f105d);

216 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[10], 
S22
, 0x2441453);

217 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[15], 
S23
, 0xd8a1e681);

218 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[ 4], 
S24
, 0xe7d3fbc8);

219 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[ 9], 
S21
, 0x21e1cde6);

220 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[14], 
S22
, 0xc33707d6);

221 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[ 3], 
S23
, 0xf4d50d87);

222 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[ 8], 
S24
, 0x455a14ed);

223 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[13], 
S21
, 0xa9e3e905);

224 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[ 2], 
S22
, 0xfcefa3f8);

225 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[ 7], 
S23
, 0x676f02d9);

226 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[12], 
S24
, 0x8d2a4c8a);

229 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[ 5], 
S31
, 0xfffa3942);

230 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[ 8], 
S32
, 0x8771f681);

231 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[11], 
S33
, 0x6d9d6122);

232 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[14], 
S34
, 0xfde5380c);

233 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[ 1], 
S31
, 0xa4beea44);

234 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[ 4], 
S32
, 0x4bdecfa9);

235 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[ 7], 
S33
, 0xf6bb4b60);

236 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[10], 
S34
, 0xbebfbc70);

237 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[13], 
S31
, 0x289b7ec6);

238 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[ 0], 
S32
, 0xeaa127fa);

239 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[ 3], 
S33
, 0xd4ef3085);

240 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[ 6], 
S34
, 0x4881d05);

241 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[ 9], 
S31
, 0xd9d4d039);

242 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[12], 
S32
, 0xe6db99e5);

243 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[15], 
S33
, 0x1fa27cf8);

244 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[ 2], 
S34
, 0xc4ac5665);

247 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[ 0], 
S41
, 0xf4292244);

248 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[ 7], 
S42
, 0x432aff97);

249 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[14], 
S43
, 0xab9423a7);

250 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[ 5], 
S44
, 0xfc93a039);

251 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[12], 
S41
, 0x655b59c3);

252 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[ 3], 
S42
, 0x8f0ccc92);

253 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[10], 
S43
, 0xffeff47d);

254 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[ 1], 
S44
, 0x85845dd1);

255 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[ 8], 
S41
, 0x6fa87e4f);

256 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[15], 
S42
, 0xfe2ce6e0);

257 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[ 6], 
S43
, 0xa3014314);

258 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[13], 
S44
, 0x4e0811a1);

259 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[ 4], 
S41
, 0xf7537e82);

260 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[11], 
S42
, 0xbd3af235);

261 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[ 2], 
S43
, 0x2ad7d2bb);

262 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[ 9], 
S44
, 0xeb86d391);

264 
°©e
[0] +
a
;

265 
°©e
[1] +
b
;

266 
°©e
[2] +
c
;

267 
°©e
[3] +
d
;

271 
	`MD5_mem£t
 ((
POINTER
)
x
, 0,  (x));

272 
	}
}

277 
	$Encode
 (
ouçut
, 
öput
, 
Àn
)

278 *
ouçut
;

279 
UINT4
 *
öput
;

280 
Àn
;

282 
i
, 
j
;

284 
i
 = 0, 
j
 = 0; j < 
Àn
; i++, j += 4) {

285 
ouçut
[
j
] = ()(
öput
[
i
] & 0xff);

286 
ouçut
[
j
+1] = ()((
öput
[
i
] >> 8) & 0xff);

287 
ouçut
[
j
+2] = ()((
öput
[
i
] >> 16) & 0xff);

288 
ouçut
[
j
+3] = ()((
öput
[
i
] >> 24) & 0xff);

290 
	}
}

295 
	$Decode
 (
ouçut
, 
öput
, 
Àn
)

296 
UINT4
 *
ouçut
;

297 *
öput
;

298 
Àn
;

300 
i
, 
j
;

302 
i
 = 0, 
j
 = 0; j < 
Àn
; i++, j += 4)

303 
ouçut
[
i
] = ((
UINT4
)
öput
[
j
]) | (((UINT4)input[j+1]) << 8) |

304 (((
UINT4
)
öput
[
j
+2]) << 16) | (((UINT4)input[j+3]) << 24);

305 
	}
}

310 
	$MD5_mem˝y
 (
ouçut
, 
öput
, 
Àn
)

311 
POINTER
 
ouçut
;

312 
POINTER
 
öput
;

313 
Àn
;

315 
i
;

317 
i
 = 0; i < 
Àn
; i++)

318 
ouçut
[
i
] = 
öput
[i];

319 
	}
}

323 
	$MD5_mem£t
 (
ouçut
, 
vÆue
, 
Àn
)

324 
POINTER
 
ouçut
;

325 
vÆue
;

326 
Àn
;

328 
i
;

330 
i
 = 0; i < 
Àn
; i++)

331 ((*)
ouçut
)[
i
] = ()
vÆue
;

332 
	}
}

	@modules/md5/md5.h

34 #i‚de‡
PROTOTYPES


35 
	#PROTOTYPES
 1

	)

39 *
	tPOINTER
;

42 
	tUINT2
;

45 
	tUINT4
;

52 #i‡
PROTOTYPES


53 
	#PROTO_LIST
(
li°
Ë
	)
list

55 
	#PROTO_LIST
(
li°
Ë()

	)

60 
UINT4
 
	m°©e
[4];

61 
UINT4
 
	mcou¡
[2];

62 
	mbuf„r
[64];

63 } 
	tMD5_CTX
;

65 
MD5Inô
 
PROTO_LIST
 ((
MD5_CTX
 *));

66 
MD5Upd©e
 
	gPROTO_LIST


67 ((
	gMD5_CTX
 *, *, ));

68 
MD5FöÆ
 
PROTO_LIST
 (([16], 
MD5_CTX
 *));

	@wwwconf.h

5 #i‚de‡
__CHAR_UNSIGNED__


14 
	#GETGROUPS_T
 
gid_t


	)

23 
	#HAVE_LONG_DOUBLE
 1

	)

26 
	#HAVE_STRFTIME
 1

	)

29 
	#HAVE_SYS_WAIT_H
 1

	)

32 
	#HAVE_TM_ZONE
 1

	)

39 
	#HAVE_VPRINTF
 1

	)

51 
	#RETSIGTYPE
 

	)

60 
	#STDC_HEADERS
 1

	)

63 
	#TIME_WITH_SYS_TIME
 1

	)

82 
	#HT_MD5
 1

	)

91 
	#HT_EXPAT
 1

	)

153 
	#W3C_PACKAGE
 "w3c-libwww"

	)

156 
	#W3C_VERSION
 "5.4.0"

	)

159 
	#CACHE_FILE_PREFIX
 "/u§/w§c/"

	)

162 
	#HT_NO_NAGLE
 1

	)

174 
	#BOOLEAN
 

	)

177 
	#RESOLV_CONF
 "/ëc/ªsﬁv.c⁄f"

	)

180 
	#RLOGIN_PROGRAM
 "æogö"

	)

183 
	#TELNET_PROGRAM
 "ã ë"

	)

201 
	#HAVE_LONG_TIME_T
 1

	)

207 
	#SIZEOF_CHAR
 1

	)

210 
	#SIZEOF_CHAR_P
 4

	)

213 
	#SIZEOF_INT
 4

	)

216 
	#SIZEOF_LONG
 4

	)

219 
	#HAVE_CHDIR
 1

	)

222 
	#HAVE_FCNTL
 1

	)

225 
	#HAVE_GETCWD
 1

	)

228 
	#HAVE_GETDOMAINNAME
 1

	)

231 
	#HAVE_GETHOSTNAME
 1

	)

234 
	#HAVE_GETLOGIN
 1

	)

237 
	#HAVE_GETPASS
 1

	)

240 
	#HAVE_GETPID
 1

	)

243 
	#HAVE_GETSOCKOPT
 1

	)

246 
	#HAVE_GETTIMEOFDAY
 1

	)

249 
	#HAVE_GETWD
 1

	)

252 
	#HAVE_IOCTL
 1

	)

255 
	#HAVE_MEMCPY
 1

	)

258 
	#HAVE_MKTIME
 1

	)

261 
	#HAVE_OPENDIR
 1

	)

264 
	#HAVE_READDIR
 1

	)

267 
	#HAVE_SELECT
 1

	)

270 
	#HAVE_SETSOCKOPT
 1

	)

273 
	#HAVE_SOCKET
 1

	)

276 
	#HAVE_STRCHR
 1

	)

279 
	#HAVE_STRERROR
 1

	)

282 
	#HAVE_STRTOL
 1

	)

285 
	#HAVE_SYSINFO
 1

	)

288 
	#HAVE_TEMPNAM
 1

	)

291 
	#HAVE_TIMEGM
 1

	)

294 
	#HAVE_TZSET
 1

	)

303 
	#HAVE_ARPA_INET_H
 1

	)

312 
	#HAVE_CTYPE_H
 1

	)

315 
	#HAVE_CURSES_H
 1

	)

327 
	#HAVE_DIRENT_H
 1

	)

336 
	#HAVE_ERRNO_H
 1

	)

339 
	#HAVE_FCNTL_H
 1

	)

342 
	#HAVE_GRP_H
 1

	)

354 
	#HAVE_LIMITS_H
 1

	)

357 
	#HAVE_MALLOC_H
 1

	)

363 
	#HAVE_MEMORY_H
 1

	)

372 
	#HAVE_NETDB_H
 1

	)

375 
	#HAVE_NETINET_IN_H
 1

	)

378 
	#HAVE_NETINET_TCP_H
 1

	)

381 
	#HAVE_PWD_H
 1

	)

384 
	#HAVE_REGEX_H
 1

	)

405 
	#HAVE_STDIO_H
 1

	)

408 
	#HAVE_STDLIB_H
 1

	)

411 
	#HAVE_STRING_H
 1

	)

414 
	#HAVE_STRINGS_H
 1

	)

420 
	#HAVE_SYS_ERRNO_H
 1

	)

423 
	#HAVE_SYS_FCNTL_H
 1

	)

426 
	#HAVE_SYS_FILE_H
 1

	)

429 
	#HAVE_SYS_IOCTL_H
 1

	)

432 
	#HAVE_SYS_IPC_H
 1

	)

444 
	#HAVE_SYS_RESOURCE_H
 1

	)

447 
	#HAVE_SYS_SELECT_H
 1

	)

450 
	#HAVE_SYS_SOCKET_H
 1

	)

453 
	#HAVE_SYS_STAT_H
 1

	)

462 
	#HAVE_SYS_TIME_H
 1

	)

465 
	#HAVE_SYS_TYPES_H
 1

	)

468 
	#HAVE_SYS_UNISTD_H
 1

	)

471 
	#HAVE_SYSLOG_H
 1

	)

477 
	#HAVE_TERMIOS_H
 1

	)

480 
	#HAVE_TIME_H
 1

	)

486 
	#HAVE_UNISTD_H
 1

	)

498 
	#HAVE_LIBDL
 1

	)

510 
	#PACKAGE
 "w3c-libwww"

	)

513 
	#VERSION
 "5.4.0"

	)

526 
	#HAVE_TIMEZONE
 1

	)

532 
	#HAVE_DAYLIGHT
 1

	)

541 
	#HAVE_TM_GMTOFF
 1

	)

544 
	#HAVE_WINSIZE
 1

	)

	@
1
.
0
397
9298
ComLine/src/HTLine.c
ComLine/src/HTLine.h
Library/Examples/LoadToFile.c
Library/Examples/chunk.c
Library/Examples/chunkbody.c
Library/Examples/cookie.c
Library/Examples/davsample.c
Library/Examples/eventloop.c
Library/Examples/getheaders.c
Library/Examples/head.c
Library/Examples/init.c
Library/Examples/isredirected.c
Library/Examples/libapp_1.c
Library/Examples/libapp_2.c
Library/Examples/libapp_3.c
Library/Examples/libapp_4.c
Library/Examples/listen.c
Library/Examples/memput.c
Library/Examples/mget.c
Library/Examples/multichunk.c
Library/Examples/myext.c
Library/Examples/myext2.c
Library/Examples/post.c
Library/Examples/postform.c
Library/Examples/ptri.c
Library/Examples/put.c
Library/Examples/range.c
Library/Examples/rdf_parse_buffer.c
Library/Examples/rdf_parse_file.c
Library/Examples/showlinks.c
Library/Examples/showtags.c
Library/Examples/showtext.c
Library/Examples/showxml.c
Library/Examples/stri.c
Library/Examples/tiny.c
Library/Examples/trace.c
Library/Examples/tzcheck.c
Library/Examples/upgrade.c
Library/Examples/wwwssl.c
Library/cvs2sql/cvs2sql.c
Library/src/HTAABrow.c
Library/src/HTAABrow.h
Library/src/HTAAUtil.c
Library/src/HTAAUtil.h
Library/src/HTANSI.c
Library/src/HTANSI.h
Library/src/HTAccess.c
Library/src/HTAccess.h
Library/src/HTAlert.c
Library/src/HTAlert.h
Library/src/HTAncMan.h
Library/src/HTAnchor.c
Library/src/HTAnchor.h
Library/src/HTArray.c
Library/src/HTArray.h
Library/src/HTAssoc.c
Library/src/HTAssoc.h
Library/src/HTAtom.c
Library/src/HTAtom.h
Library/src/HTBInit.c
Library/src/HTBInit.h
Library/src/HTBTree.c
Library/src/HTBTree.h
Library/src/HTBind.c
Library/src/HTBind.h
Library/src/HTBound.c
Library/src/HTBound.h
Library/src/HTBufWrt.c
Library/src/HTBufWrt.h
Library/src/HTCache.c
Library/src/HTCache.h
Library/src/HTChannl.c
Library/src/HTChannl.h
Library/src/HTChunk.c
Library/src/HTChunk.h
Library/src/HTConLen.c
Library/src/HTConLen.h
Library/src/HTCookie.c
Library/src/HTCookie.h
Library/src/HTDAV.c
Library/src/HTDAV.h
Library/src/HTDNS.c
Library/src/HTDNS.h
Library/src/HTDemux.c
Library/src/HTDemux.h
Library/src/HTDescpt.c
Library/src/HTDescpt.h
Library/src/HTDialog.c
Library/src/HTDialog.h
Library/src/HTDigest.c
Library/src/HTDigest.h
Library/src/HTDir.c
Library/src/HTDir.h
Library/src/HTEPtoCl.c
Library/src/HTEPtoCl.h
Library/src/HTError.c
Library/src/HTError.h
Library/src/HTEscape.c
Library/src/HTEscape.h
Library/src/HTEvent.c
Library/src/HTEvent.h
Library/src/HTEvtLst.c
Library/src/HTEvtLst.h
Library/src/HTFSave.c
Library/src/HTFSave.h
Library/src/HTFTP.c
Library/src/HTFTP.h
Library/src/HTFTPDir.c
Library/src/HTFTPDir.h
Library/src/HTFWrite.c
Library/src/HTFWrite.h
Library/src/HTFile.c
Library/src/HTFile.h
Library/src/HTFilter.c
Library/src/HTFilter.h
Library/src/HTFormat.c
Library/src/HTFormat.h
Library/src/HTGopher.c
Library/src/HTGopher.h
Library/src/HTGuess.c
Library/src/HTGuess.h
Library/src/HTHInit.c
Library/src/HTHInit.h
Library/src/HTHash.c
Library/src/HTHash.h
Library/src/HTHeader.c
Library/src/HTHeader.h
Library/src/HTHist.c
Library/src/HTHist.h
Library/src/HTHome.c
Library/src/HTHome.h
Library/src/HTHost.c
Library/src/HTHost.h
Library/src/HTHstMan.h
Library/src/HTIOStream.h
Library/src/HTIcons.c
Library/src/HTIcons.h
Library/src/HTInet.c
Library/src/HTInet.h
Library/src/HTInit.c
Library/src/HTInit.h
Library/src/HTLib.c
Library/src/HTLib.h
Library/src/HTLink.c
Library/src/HTLink.h
Library/src/HTList.c
Library/src/HTList.h
Library/src/HTLocal.c
Library/src/HTLocal.h
Library/src/HTLog.c
Library/src/HTLog.h
Library/src/HTMIME.c
Library/src/HTMIME.h
Library/src/HTMIMERq.c
Library/src/HTMIMERq.h
Library/src/HTMIMImp.c
Library/src/HTMIMImp.h
Library/src/HTMIMPrs.c
Library/src/HTMIMPrs.h
Library/src/HTML.c
Library/src/HTML.h
Library/src/HTMLGen.c
Library/src/HTMLGen.h
Library/src/HTMLPDTD.c
Library/src/HTMLPDTD.h
Library/src/HTMemLog.c
Library/src/HTMemLog.h
Library/src/HTMemory.c
Library/src/HTMemory.h
Library/src/HTMerge.c
Library/src/HTMerge.h
Library/src/HTMethod.c
Library/src/HTMethod.h
Library/src/HTMulpar.h
Library/src/HTMulti.c
Library/src/HTMulti.h
Library/src/HTMuxCh.c
Library/src/HTMuxCh.h
Library/src/HTMuxHeader.h
Library/src/HTMuxTx.c
Library/src/HTMuxTx.h
Library/src/HTNDir.c
Library/src/HTNDir.h
Library/src/HTNet.c
Library/src/HTNet.h
Library/src/HTNetMan.h
Library/src/HTNetTxt.c
Library/src/HTNetTxt.h
Library/src/HTNews.c
Library/src/HTNews.h
Library/src/HTNewsLs.c
Library/src/HTNewsLs.h
Library/src/HTNewsRq.c
Library/src/HTNewsRq.h
Library/src/HTNoFree.c
Library/src/HTNoFree.h
Library/src/HTPEP.c
Library/src/HTPEP.h
Library/src/HTParse.c
Library/src/HTParse.h
Library/src/HTPlain.c
Library/src/HTPlain.h
Library/src/HTProfil.c
Library/src/HTProfil.h
Library/src/HTProt.c
Library/src/HTProt.h
Library/src/HTProxy.c
Library/src/HTProxy.h
Library/src/HTRDF.c
Library/src/HTRDF.h
Library/src/HTReader.c
Library/src/HTReader.h
Library/src/HTReq.h
Library/src/HTReqMan.c
Library/src/HTReqMan.h
Library/src/HTResMan.h
Library/src/HTResponse.c
Library/src/HTResponse.h
Library/src/HTRules.c
Library/src/HTRules.h
Library/src/HTSChunk.c
Library/src/HTSChunk.h
Library/src/HTSQL.c
Library/src/HTSQL.h
Library/src/HTSQLLog.c
Library/src/HTSQLLog.h
Library/src/HTSocket.c
Library/src/HTSocket.h
Library/src/HTStream.c
Library/src/HTStream.h
Library/src/HTString.c
Library/src/HTString.h
Library/src/HTStruct.h
Library/src/HTStyle.c
Library/src/HTStyle.h
Library/src/HTTCP.c
Library/src/HTTCP.h
Library/src/HTTChunk.c
Library/src/HTTChunk.h
Library/src/HTTP.c
Library/src/HTTP.h
Library/src/HTTPGen.c
Library/src/HTTPGen.h
Library/src/HTTPReq.c
Library/src/HTTPReq.h
Library/src/HTTPRes.c
Library/src/HTTPRes.h
Library/src/HTTPServ.c
Library/src/HTTPServ.h
Library/src/HTTPUtil.h
Library/src/HTTeXGen.c
Library/src/HTTeXGen.h
Library/src/HTTee.c
Library/src/HTTee.h
Library/src/HTTelnet.c
Library/src/HTTelnet.h
Library/src/HTTimer.c
Library/src/HTTimer.h
Library/src/HTTrace.c
Library/src/HTTrans.c
Library/src/HTTrans.h
Library/src/HTUTree.c
Library/src/HTUTree.h
Library/src/HTUU.c
Library/src/HTUU.h
Library/src/HTUser.c
Library/src/HTUser.h
Library/src/HTUtils.h
Library/src/HTWAIS.c
Library/src/HTWAIS.h
Library/src/HTWSRC.c
Library/src/HTWSRC.h
Library/src/HTWWWStr.c
Library/src/HTWWWStr.h
Library/src/HTWriter.c
Library/src/HTWriter.h
Library/src/HTXML.c
Library/src/HTXML.h
Library/src/HTXParse.c
Library/src/HTXParse.h
Library/src/HTZip.c
Library/src/HTZip.h
Library/src/HText.c
Library/src/HText.h
Library/src/HTextImp.h
Library/src/SGML.c
Library/src/SGML.h
Library/src/SSL/HTSSL.c
Library/src/SSL/HTSSL.h
Library/src/SSL/HTSSLMan.h
Library/src/SSL/HTSSLReader.c
Library/src/SSL/HTSSLReader.h
Library/src/SSL/HTSSLWriter.c
Library/src/SSL/HTSSLWriter.h
Library/src/SSL/HTSSLhttps.c
Library/src/SSL/HTSSLhttps.h
Library/src/SSL/WWWSSL.h
Library/src/WWWApp.h
Library/src/WWWCache.h
Library/src/WWWCore.h
Library/src/WWWDir.h
Library/src/WWWFTP.h
Library/src/WWWFile.h
Library/src/WWWGophe.h
Library/src/WWWHTML.h
Library/src/WWWHTTP.h
Library/src/WWWInit.h
Library/src/WWWLib.h
Library/src/WWWMIME.h
Library/src/WWWMux.h
Library/src/WWWNews.h
Library/src/WWWSQL.h
Library/src/WWWStream.h
Library/src/WWWTelnt.h
Library/src/WWWTrans.h
Library/src/WWWUtil.h
Library/src/WWWWAIS.h
Library/src/WWWXML.h
Library/src/WWWZip.h
Library/src/vms/HTVMSUtils.c
Library/src/vms/HTVMSUtils.h
Library/src/vms/crypt.c
Library/src/vms/crypt_util.c
Library/src/vms/dirent.c
Library/src/vms/dirent.h
Library/src/vms/getline.c
Library/src/vms/getpass.c
Library/src/vms/patchlevel.h
Library/src/vms/sys_dirent.h
Library/src/vms/ufc-crypt.h
Library/src/windows/config.h
Library/src/windows/windll.c
Library/src/windows/wwwdll.c
Library/src/wwwsys.h
LineMode/src/ConView.c
LineMode/src/DefaultStyles.c
LineMode/src/GridStyle.c
LineMode/src/GridStyle.h
LineMode/src/GridText.c
LineMode/src/GridText.h
LineMode/src/HTBrowse.c
LineMode/src/HTBrowse.h
LineMode/src/HTFont.h
LineMode/src/a_stdio.c
LineMode/src/a_stdio.h
PICS-client/src/CSApp.c
PICS-client/src/CSChkLab.c
PICS-client/src/CSKwik.c
PICS-client/src/CSLApp.h
PICS-client/src/CSLL.h
PICS-client/src/CSLLOut.c
PICS-client/src/CSLLSt.h
PICS-client/src/CSLLURLs.c
PICS-client/src/CSLUtils.h
PICS-client/src/CSLabel.c
PICS-client/src/CSMR.h
PICS-client/src/CSMRSt.h
PICS-client/src/CSMacRed.c
PICS-client/src/CSMem.c
PICS-client/src/CSParse.c
PICS-client/src/CSParse.h
PICS-client/src/CSStream.c
PICS-client/src/CSUser.c
PICS-client/src/CSUser.h
PICS-client/src/CSUserSt.h
PICS-client/src/CSUsrLst.c
PICS-client/src/CSUsrLst.h
Robot/src/HTQueue.c
Robot/src/HTQueue.h
Robot/src/HTRobMan.h
Robot/src/HTRobot.c
Robot/src/HTRobot.h
Robot/src/RobotMain.c
Robot/src/RobotTxt.c
Robot/src/RobotTxt.h
acconfig.h
modules/expat/xmlparse/hashtable.c
modules/expat/xmlparse/hashtable.h
modules/expat/xmlparse/xmlparse.c
modules/expat/xmlparse/xmlparse.h
modules/expat/xmltok/ascii.h
modules/expat/xmltok/asciitab.h
modules/expat/xmltok/iasciitab.h
modules/expat/xmltok/latin1tab.h
modules/expat/xmltok/nametab.h
modules/expat/xmltok/utf8tab.h
modules/expat/xmltok/xmldef.h
modules/expat/xmltok/xmlrole.c
modules/expat/xmltok/xmlrole.h
modules/expat/xmltok/xmltok.c
modules/expat/xmltok/xmltok.h
modules/expat/xmltok/xmltok_impl.c
modules/expat/xmltok/xmltok_impl.h
modules/expat/xmltok/xmltok_ns.c
modules/md5/md5.c
modules/md5/md5.h
wwwconf.h
